<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-07-18T05:28:46.211Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Expressjs框架的安装使用</title>
    <link href="https://huangwang.github.io/2019/07/18/Expressjs%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://huangwang.github.io/2019/07/18/Expressjs框架的安装使用/</id>
    <published>2019-07-18T05:18:54.000Z</published>
    <updated>2019-07-18T05:28:46.211Z</updated>
    
    <content type="html"><![CDATA[<p>Express是高度包容、快速而极简的 Node.js Web 框架。下面简单介绍Express框架的安装和使用。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装最新Nodejs长期支持版"><a href="#安装最新Nodejs长期支持版" class="headerlink" title="安装最新Nodejs长期支持版"></a>安装最新Nodejs长期支持版</h2><p>前往<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">nodejs官方网站</a>下载其最新长期支持版，并安装。</p><h2 id="安装Express生成器"><a href="#安装Express生成器" class="headerlink" title="安装Express生成器"></a>安装Express生成器</h2><p>Express生成器是一个脚手架工具，能够快速生成标准的Express Web框架，简化开发过程。具体安装方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express-generator@4</span><br></pre></td></tr></table></figure><p>创建APP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express /tmp/foo &amp;&amp; cd /tmp/foo</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>启动Web服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接启动</span><br><span class="line">npm start</span><br><span class="line"># 调试启动</span><br><span class="line">SET DEBUG=server:* &amp; npm start</span><br></pre></td></tr></table></figure><p>访问网站： <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://expressjs.com/zh-cn/" target="_blank" rel="noopener">Express</a>,by Express homepage.</li><li><a href="https://github.com/expressjs/express" target="_blank" rel="noopener">Express github</a>,by Express github.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Express是高度包容、快速而极简的 Node.js Web 框架。下面简单介绍Express框架的安装和使用。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Excel宏编程简易教程</title>
    <link href="https://huangwang.github.io/2019/07/16/Excel%E5%AE%8F%E7%BC%96%E7%A8%8B%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/07/16/Excel宏编程简易教程/</id>
    <published>2019-07-16T12:00:15.000Z</published>
    <updated>2019-07-17T04:41:44.609Z</updated>
    
    <content type="html"><![CDATA[<p>期末了，媳妇计算学生平时成绩好辛苦，于是准备编写Excel宏程序提高媳妇工作的效率，节省时间。于是简单记录Excel宏编程的相关知识。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>为了编写Excel宏，首先需要了解一些基本概念：</p><h2 id="工作簿"><a href="#工作簿" class="headerlink" title="工作簿"></a>工作簿</h2><p>工作簿相关概念有：Workbooks、Workbook、ActiveWorkbook、ThisWorkbook。</p><ul><li><p>Workbooks集合包含excel中所有当前打开的excel工作簿，亦即所有打开的excel文件；</p></li><li><p>Workbook对应Workbooks中的成员，即其中的excel文件；</p></li><li><p>ActiveWorkbook代表当前处于活动状态的工作簿，即当前显示的excel文件；</p></li><li><p>ThisWorkbook代表其中有Visual Basic代码正在运行的工作簿。</p></li></ul><p>在具体使用中可用Workbooks(index)来引用Workbook对象，其中index为工作簿名称或编号，如Workbooks(1)、 Workbooks(“年度报表.xls”)。而编号按照创建或打开工作簿的顺序来确定，第一个打开的工作簿编号为1，第二个打开的工作簿为2……。</p><h2 id="工作表"><a href="#工作表" class="headerlink" title="工作表"></a>工作表</h2><p>工作表相关概念有：Worksheets、Worksheet、ActiveSheet。</p><ul><li><p>Worksheets集合包含工作簿中所有的工作表，即一个excel文件中的所有数据表页；</p></li><li><p>Worksheet则代表其中的一个工作表；</p></li><li><p>ActiveSheet代表当前处于的活动状态工作表，即当前显示的一个工作表。</p></li></ul><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>图表相关概念有：Chart 、Charts、ChartObject、ChartObjects、ActiveChart。</p><ul><li><p>Chart代表工作簿中的图表。该图表既可为嵌入式图表（包含在ChartObject中），也可为一个分开的（单独的）图表工作表。</p></li><li><p>Charts代表指定工作簿或活动工作簿中所有图表工作表的集合，但不包括嵌入式在工作表或对话框编辑表中的图表。使用Charts(index) 可引用单个Chart图表，其中index是该图表工作表的索引号或名称；如Charts(1)、Charts(“销售图表”)。</p></li><li><p>ChartObject代表工作表中的嵌入式图表，其作用是作为Chart对象的容器。利用ChartObject可以控制工作表上嵌入式图表的外观和尺寸。</p></li><li><p>ChartObjects代表指定的图表工作表、对话框编辑表或工作表上所有嵌入式图表的集合。</p></li></ul><h2 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h2><p>单元格相关概念有：Cells、ActiveCell、Range、Areas。</p><ul><li><p>Cells(row,column)代表单个单元格，其中row为行号，column为列号。如可以用Cells(1,1)、Cells(10,4)来引用”A1”、”D10” 单元格。</p></li><li><p>ActiveCell代表活动工作表的活动单元格，或指定工作表的活动单元格。</p></li><li><p>Range代表工作表中的某一单元格、某一行、某一列、某一选定区域（该选定区域可包含一个或若干连续单元格区域）或者某一三维区域。可用Range(arg)来引用单元格或单元格区域，其中arg可为单元格号、单元格号范围、单元格区域名称。如Range(“A5”)、 Range(“A1:H8”)、Range(“Criteria”)。虽然可用Range(“A1”)返回单元格A1，但用Cells更方便，因为此时可 用变量指定行和列。</p></li><li><p>Areas 为选定区域内的连续单元格块的集合，其成员是Range对象。</p></li></ul><h2 id="行与列"><a href="#行与列" class="headerlink" title="行与列"></a>行与列</h2><p>行与列相关概念有：Rows、Columns、Row、Column。</p><p>Rows、Columns分别代表活动工作表、单元格区域范围Range、指定工作表中的所有行数、列数。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Visual Basic for Applications（VBA）是一种Visual Basic的一种宏语言，主要能用来扩展Windows的应用程序功能，特别是Microsoft Office软件。也可说是一种应用程序视觉化的Basic Sc​​ript。 1994年发行的Excel 5.0版本中，即具备了VBA的宏功能。Excel宏编程主要使用VBA。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>即Primary Type Data，下述列表的括号内为字节数：</p><ul><li>Byte (1)：无符号类型，取值范围0-255</li><li>Boolean (2)</li><li>Integer (2)</li><li>Long (4)</li><li>Single (4)</li><li>Double (8)</li><li>Currency (8)</li><li>Decimal (14)</li><li>Date (8)</li><li>String</li><li>Object (4)</li><li>Variant （根据分配确定）</li></ul><h3 id="自定义的数据类型"><a href="#自定义的数据类型" class="headerlink" title="自定义的数据类型"></a>自定义的数据类型</h3><p>相当于C语言的struct，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Type 自定义类型名</span><br><span class="line">     元素名  As 类型</span><br><span class="line">      …</span><br><span class="line">     [元素名 As 类型]</span><br><span class="line">End Type</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Option Base 0 &apos;數組索引值從0開始</span><br><span class="line">Option Base 1 &apos;數組索引值從1開始</span><br><span class="line">Dim MyArray(10) &apos;聲明一個數組變量，10是最大的可用的數組索引值</span><br><span class="line">MyArray(5) = 101 &apos;給數組的元素賦值</span><br><span class="line">Dim Data(10,5) &apos;聲明一個二維數組變量</span><br><span class="line">Data(1,1) = &quot;A001&quot; &apos;給數組元素賦值</span><br><span class="line">Dim cArr(-11 To 20, 1 To 3) As String &apos;聲明一個數組，定義數組索引值的上下界</span><br><span class="line">Dim dArr() As String &apos;聲明動態數組</span><br><span class="line">ReDim dArr(0 To 5, 1 To 2) &apos;改變動態數組的尺寸默認把原數據清除。如果保留原來的數據，必須加上參數Preserve。</span><br><span class="line">                                &apos;使用Preserve參數時只能改變最後一維的大小</span><br><span class="line">If UBound(vTemp) = -1 Then</span><br><span class="line">     &apos;判斷數組變量vTemp是否為 空數組</span><br><span class="line">End If</span><br><span class="line">Erase MyArrar, Data &apos;Eras​​e語句清除數組元素，釋放變量佔用的空間</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>日期常量由符号“#”将字符括起来，如#2012-1-1#。</p><p>系统定义常量有3个：True、False和Null。</p><p>固有常量是编程时引用的对象库定义的常量。所有固有常量都可以在宏或VBA代码中使用。通常，固有常量通过前两个字母来指明定义该常量。来自VB库的常量则以“vb”开头。来自Access的常量以“ac”开头。可以使用对象浏览器来查看所有对象库中的固有常量列表。</p><p>可以自行定义常量。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Global Const 符号常量名称 = 常量值</span><br></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if 條件1 then</span><br><span class="line">   語句1</span><br><span class="line">elseif 條件2 then</span><br><span class="line">   語句2</span><br><span class="line">elseif ...</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">   語句n</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><h3 id="Select-Case-语句"><a href="#Select-Case-语句" class="headerlink" title="Select Case 语句"></a>Select Case 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Select Case 表達式</span><br><span class="line">   Case 表達式列表1</span><br><span class="line">       語句1</span><br><span class="line">   Case 表達式列表2</span><br><span class="line">       語句2</span><br><span class="line">       ...</span><br><span class="line">   Case 表達式列表n</span><br><span class="line">       語句n</span><br><span class="line">End Select</span><br></pre></td></tr></table></figure><h3 id="Do…Loop-语句"><a href="#Do…Loop-语句" class="headerlink" title="Do…Loop 语句"></a>Do…Loop 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Do While或Until 條件</span><br><span class="line">   語句塊1</span><br><span class="line">   Exit Do</span><br><span class="line">   語句塊2</span><br><span class="line">Loop</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Do</span><br><span class="line">   語句塊1</span><br><span class="line">   Exit Do</span><br><span class="line">   語句塊2</span><br><span class="line">Loop While或Until 條件</span><br></pre></td></tr></table></figure><h3 id="For…Next语句"><a href="#For…Next语句" class="headerlink" title="For…Next语句"></a>For…Next语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For 循環控制變量=初值To 終值Step 步長</span><br><span class="line">   語句塊 ‘Exit For語句可以跳出循環體</span><br><span class="line">Next</span><br></pre></td></tr></table></figure><h3 id="For-Each-…-Next语句"><a href="#For-Each-…-Next语句" class="headerlink" title="For Each … Next语句"></a>For Each … Next语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For Each 循環控制變量 In 集合變量</span><br><span class="line">   語句塊 </span><br><span class="line">   Exit For語句可以跳出循環體</span><br><span class="line">Next 循環控制變量</span><br></pre></td></tr></table></figure><h3 id="跳出本次循环的continue语句"><a href="#跳出本次循环的continue语句" class="headerlink" title="跳出本次循环的continue语句"></a>跳出本次循环的continue语句</h3><p>VBA没有类似C语言的continue语句。通常可如此写程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">For 循環控制變量=初值 To 終值 Step 步長</span><br><span class="line">   Do &apos;用于模拟continue</span><br><span class="line">       語句塊 </span><br><span class="line">       If 条件 Then Exit Do &apos;用于模拟continue</span><br><span class="line">       語句塊 </span><br><span class="line">   Loop While False &apos;用于模拟continue</span><br><span class="line">Next</span><br></pre></td></tr></table></figure><h3 id="With语句"><a href="#With语句" class="headerlink" title="With语句"></a>With语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">With 對象引用</span><br><span class="line">   語句塊</span><br><span class="line">End With</span><br></pre></td></tr></table></figure><h3 id="On-Error语句"><a href="#On-Error语句" class="headerlink" title="On Error语句"></a>On Error语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On Error Goto 出錯處理語句的label &apos;跳轉到出錯處理語句</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On Error Resume Next &apos;遇到錯誤，不管錯誤，繼續往下執行</span><br></pre></td></tr></table></figure></p><h2 id="过程与函数"><a href="#过程与函数" class="headerlink" title="过程与函数"></a>过程与函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sub 過程名(參數表)</span><br><span class="line">    語句塊</span><br><span class="line">    Exit Sub</span><br><span class="line">    語句塊</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function 函數名(參數表) As Type</span><br><span class="line">   語句塊</span><br><span class="line">   函數名=表達式</span><br><span class="line">   Exit Function</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure><h2 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h2><p>VBA的常用内置函数列表:</p><ul><li>MsgBox</li><li>InputBox</li><li>舍入函数：Fix 向0取整,Int向下取整, Round四舍五入</li><li>Rnd 返回0-1内的单精度随机数</li><li>字符串函数：<ul><li>Filter：对字符串的一维数组的过滤</li><li>InStr([Start, ]<str1>,<str2>[, Compare])与InStrRev： 查找子串</str2></str1></li><li>Len 字符串长度</li><li>Join：连接一维数组中的所有子字符串</li><li>Left,Right,Mid 截取子字符串</li><li>Space(数值) 生成空格字符串</li><li>Ucase,Lcase 大小写转换函数</li><li>Ltrim, Rtrim,Trim 删除首尾空格</li><li>Replace</li><li>Split：分割一个字符串成为一维数组</li><li>StrComp：字符串比较</li><li>StrConv：字符串转换</li><li>String(number, character)：制定字符重复若干次</li><li>StrReverse</li></ul></li><li>日期/时间有关函数：<ul><li>Year, Month, Day, WeekDay,Hour,Minute,Second 截取日期时间分量</li><li>DateAdd 日期/时间增量函数</li><li>DateDiff(&lt;间隔类型&gt;,&lt;日期1&gt;,&lt;日期2&gt;[,W1][,W2])日期/时间的距离函数</li><li>DatePart(&lt;分割类型&gt;,&lt;日期&gt;[,w1][,w2])时间分割函数</li><li>DateSerial(&lt;表达式1&gt;,&lt;表达式2&gt;,&lt;表达式3&gt;) 合成日期；DateValue(“字符串表达式”)返回日期；</li><li>Date,Time,Now,Timer 返回日期时间</li><li>DateValue</li><li>TimeSerial：由时间序列得到时间对象</li><li>TimeValue：由时间字符串得到时间对象</li><li>Weekday：获得日期的周几</li><li>WeekdayName</li></ul></li><li>转换函数：CBool、CByte、CCur、 CDate、 CDbl、CDec、CInt、 CLng、CLngLng、CLngPtr、CSng、CStr、CVar、CVErr、Asc(&lt;字符串表达式&gt;)返回第一个字符的Ascii编码值、Chr(ASCII码)返回字符、Hex、Oct、Str(&lt;数值表达式&gt;)返回字符串、Val(string)、Format、FormatCurrency、FormatDateTime、FormatNumber、FormatPercent、MonthName</li><li>Nz(表达式或字段属性值[,规定值])如果是空，则返回0或者””或者函数的第二个参数值</li><li>验证函数：isNumeric、isDate、isNull、isEmpty IsArray、IsError、IsMissing、IsObject</li><li>数学函数：Abs、Sqr、Tan、Atn（即atan）、Sin、Cos、Exp（e为基的指数）、Log自然对数</li><li>Array:构造一个Array对象</li><li>CallByName: get or set a property, or invoke a method at run time using a string name.</li><li>控制流：Choose:类似于C语言的select语句、IIf相当于IF-ELSE语句、Switch</li><li>Command：获取命令行参数</li><li>CreateObject：创建ActiveX对象</li><li>CurDir：返回指定驱动器的当前工作路径</li><li>由基本数学函数导出的函数：Sec、Cosec、Cotangent、Cotan、Arcsin、Arccos、Arcsec、Arccosec、Arccotan、HSin、HCos、HTan、HSec、HCosec、HCotan、HArcsin、HArccos、HArctan、HArcsec、HArccosec、HArccotan、LogN</li><li>DoEvents：暂时把CPU控制权交回给系统。</li><li>Environ：返回环境变量的值</li><li>文件操作：<ul><li>Dir：返回满足条件的所有文件、目录的名字</li><li>EOF</li><li>FileAttr</li><li>FileDateTime</li><li>FileLen</li><li>FreeFile Function</li><li>GetAttr：返回文件、目录的属性值</li><li>Input：读取文件</li><li>Loc：文件指针位置</li><li>LOF：文件打开时的指针位置</li><li>Seek：文件指针定位</li><li>Spc：使用Print做position output</li><li>Tab：用于Print函数</li><li>Error:错误号对应的错误消息</li><li>Windows Registry中的数据：GetAllSettings、SaveSetting、DeleteSetting、GetSetting</li><li>GetObject：ActiveX组建的引用</li><li>IMEStatus：返回当前Input Method Editor (IME)。</li><li>Macintosh平台：MacID、MacScript</li></ul></li><li>金融函数：<ul><li>DDB：使用double-declining balance计算贬值</li><li>FV:计算固定利率的年金</li><li>IPmt：计算利率</li><li>IRR：计算利率</li><li>MIRR：计算利率</li><li>NPer：计算周期数</li><li>NPV：计算net present value</li><li>Pmt：计算支付数</li><li>PPmt：计算本金支付数</li><li>PV：计算present value</li><li>Rate：利息率</li><li>SLN：straight-line depreciation</li><li>SYD：计算sum-of-years’ digits depreciation</li></ul></li><li>Partition：返回字符串，表示一个数值名字落在各个range内。常用于SQL select语句</li><li>QBColor：颜色值</li><li>RGB：颜色值</li><li>TypeName：得到变量的类型名</li><li>VarType：得到变量的类型数</li></ul><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>比较特殊的运算符有指数运算^，浮点除法/，整数除法\，取模运算Mod，不等逻辑比较运算&lt;&gt;</p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>在Excel开发工具中点击录制宏，生成一个VBA过程，创建如下代码计算学生平均成绩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Sub 计算平均成绩()</span><br><span class="line">&apos;</span><br><span class="line">&apos; 计算平均成绩 宏</span><br><span class="line">&apos; 计算平均成绩</span><br><span class="line">&apos;</span><br><span class="line">&apos; 快捷键: Ctrl+l</span><br><span class="line">&apos;</span><br><span class="line">    Application.Goto Reference:=&quot;计算平均成绩&quot;</span><br><span class="line">    </span><br><span class="line">    Dim count As Integer &apos; 统计学生总数</span><br><span class="line">    count = Range(&quot;A1&quot;).CurrentRegion.Rows.count &apos; 统计学生总数</span><br><span class="line">    </span><br><span class="line">    ActiveSheet.Cells(1, &quot;E&quot;).Value = &quot;平均成绩&quot;</span><br><span class="line">    Dim workSocre  As Double &apos; 课程分</span><br><span class="line">    Dim videoScore As Double &apos; 视频分</span><br><span class="line">    Dim discussScore As Double &apos; 讨论分</span><br><span class="line">    </span><br><span class="line">    For i = 2 To count</span><br><span class="line">        &apos; 计算学生平均成绩</span><br><span class="line">        workSocre = ActiveSheet.Cells(i, &quot;A&quot;).Value</span><br><span class="line">        videoScore = ActiveSheet.Cells(i, &quot;B&quot;).Value</span><br><span class="line">        discussScore = Discuss(ActiveSheet.Cells(i, &quot;C&quot;).Value)</span><br><span class="line">        ActiveSheet.Cells(i, &quot;E&quot;).Value = workSocre * 0.6 + videoScore * 100 * 0.2 + discussScore * 0.2</span><br><span class="line">    Next</span><br><span class="line">    MsgBox (&quot;平均成绩计算完成!&quot;)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function Discuss(discussCount As Integer) As Integer</span><br><span class="line">    Dim score As Integer</span><br><span class="line">    Select Case discussCount</span><br><span class="line">        Case Is &gt;= 20</span><br><span class="line">        score = 100</span><br><span class="line">        Case Is &gt;= 15</span><br><span class="line">        score = 80</span><br><span class="line">        Case Is &gt;= 10</span><br><span class="line">        score = 60</span><br><span class="line">        Case Is &gt;= 5</span><br><span class="line">        score = 40</span><br><span class="line">        Case Is &gt; 0</span><br><span class="line">        score = 20</span><br><span class="line">        Case Is = 0</span><br><span class="line">        score = 0</span><br><span class="line">    End Select</span><br><span class="line">    Discuss = score</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/lyhdream/article/details/9060801" target="_blank" rel="noopener">Excel宏教程 (宏的介绍与基本使用)</a>,by 远洪.</li><li><a href="https://zh.wikipedia.org/wiki/Visual_Basic_for_Applications" target="_blank" rel="noopener">Visual Basic for Applications</a>,by wikipedia.</li><li><a href="https://www.jianshu.com/p/bd760f3c82fd" target="_blank" rel="noopener">VBA——Range操作</a>,by 风之工程师.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;期末了，媳妇计算学生平时成绩好辛苦，于是准备编写Excel宏程序提高媳妇工作的效率，节省时间。于是简单记录Excel宏编程的相关知识。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="语法" scheme="https://huangwang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="VBA" scheme="https://huangwang.github.io/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>小波变换学习笔记</title>
    <link href="https://huangwang.github.io/2019/07/14/%E5%B0%8F%E6%B3%A2%E5%8F%98%E6%8D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/07/14/小波变换学习笔记/</id>
    <published>2019-07-14T07:52:21.000Z</published>
    <updated>2019-07-14T07:59:07.290Z</updated>
    
    <content type="html"><![CDATA[<p>小波分析（英语：wavelet analysis）或小波变换（英语：wavelet transform）是指用有限长或快速衰减的“母小波”（mother wavelet）的振荡波形来表示信号。该波形被缩放和平移以匹配输入的信号。</p><p>小波变化的发展，承袭Gabor transform的局部化思想，并且克服了傅里叶和Gabor transform的部分缺陷，小波变换提供了一个可以调变的时频窗口，窗口的宽度(width)随着频率变化，频率增高时，时间窗口的宽度就会变窄，以提高分辨率．小波在整个时间范围内的振幅平均值为0，具有有限的持续时间和突变的频率与震幅，可以是不规则，或不对称的信号。</p><p>小波变换分成两个大类：离散小波变换（DWT） 和连续小波变换（CWT）。两者的主要区别在于，连续变换在所有可能的缩放和平移上操作，而离散变换采用所有缩放和平移值的特定子集。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/22864189" target="_blank" rel="noopener">能不能通俗的讲解下傅立叶分析和小波分析之间的关系？</a>,by zhihu.</li><li><a href="https://www.zhihu.com/question/278337954" target="_blank" rel="noopener">什么是线性平稳信号和非线性非平稳信号？</a>,by zhihu.</li><li><a href="https://zhuanlan.zhihu.com/p/22450818" target="_blank" rel="noopener">形象易懂讲解算法I——小波变换</a>,by 咚懂咚懂咚.</li><li><a href="https://zhuanlan.zhihu.com/p/66189212" target="_blank" rel="noopener">从傅里叶变换进阶到小波变换（一）</a>,by 1335.</li><li><a href="https://zhuanlan.zhihu.com/p/34989414" target="_blank" rel="noopener">信号频域分析方法的理解（频谱、能量谱、功率谱、倒频谱、小波分析）</a>,by Mr.括号.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E6%B3%A2%E5%88%86%E6%9E%90" target="_blank" rel="noopener">小波分析</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小波分析（英语：wavelet analysis）或小波变换（英语：wavelet transform）是指用有限长或快速衰减的“母小波”（mother wavelet）的振荡波形来表示信号。该波形被缩放和平移以匹配输入的信号。&lt;/p&gt;
&lt;p&gt;小波变化的发展，承袭Gabor
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>信号与线性系统学习笔记</title>
    <link href="https://huangwang.github.io/2019/07/05/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/07/05/信号与线性系统学习笔记/</id>
    <published>2019-07-05T01:24:25.000Z</published>
    <updated>2019-07-08T05:02:29.551Z</updated>
    
    <content type="html"><![CDATA[<p>信号与线性系统是学习自动控制理论的前置专业基础课，可惜当年就学得似懂非懂，过了这么多年，知识早就忘了，现在捡起来温习一下，算是温故而知新吧。</p><h1 id="信号与系统基础"><a href="#信号与系统基础" class="headerlink" title="信号与系统基础"></a>信号与系统基础</h1><p>连续的或离散的动态系统，按其基本特性可分为线性的与非线性的；时变的与时不变的；因果的与非因果的；稳定与非稳定的。</p><h1 id="连续系统的时域分析"><a href="#连续系统的时域分析" class="headerlink" title="连续系统的时域分析"></a>连续系统的时域分析</h1><p>对单输入与单输出的线性时不变连续系统，通常适用n阶常系数线性微分方程表示：</p><script type="math/tex; mode=display">y^{(n)}(t)+a_{n-1}y^{(n-1)}(t)+...+a_1y^{(1)}(t)+a_0y(t) \\=b_mf^{(m)}(t)+b_{m-1}f^{(m-1)}(t)+...+b_1f^{(1)}(t)+b_0f(t) \tag{1}</script><p>或缩写为</p><script type="math/tex; mode=display">\sum_{i=0}^{n}a_iy^{(i)}(t)=\sum_{j=0}^{m}b_jy^{(j)}(t)</script><p>其中$f(t)$为激励，$y(t)$为响应，$a_i(i=0,1,…,n)$和$b_j(j=0,1,…,n)$均为常数，$a_n=1$。</p><p>该微分方程的全解由齐次解$y_h(t)$和特解$y_p(t)$组成，即</p><script type="math/tex; mode=display">y(t)=y_h(t)+y_p(t)</script><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/31383909" target="_blank" rel="noopener">1. 信号与线性系统—-究竟在学啥？</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/31921889" target="_blank" rel="noopener">2. 信号与线性系统——信号的分解</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/32205610" target="_blank" rel="noopener">3. 信号与线性系统——啥？卷积？</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/32963217" target="_blank" rel="noopener">4. 信号与线性系统——你好，傅里叶</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/33291443" target="_blank" rel="noopener">5. 信号与线性系统——F.T&amp;L.T</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/35533240" target="_blank" rel="noopener">7. 信号与线性系统——系统的分析方法</a>,by Dean Rossi.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;信号与线性系统是学习自动控制理论的前置专业基础课，可惜当年就学得似懂非懂，过了这么多年，知识早就忘了，现在捡起来温习一下，算是温故而知新吧。&lt;/p&gt;
&lt;h1 id=&quot;信号与系统基础&quot;&gt;&lt;a href=&quot;#信号与系统基础&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="控制理论" scheme="https://huangwang.github.io/tags/%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>傅里叶级数和变换学习笔记</title>
    <link href="https://huangwang.github.io/2019/07/01/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E5%92%8C%E5%8F%98%E6%8D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/07/01/傅里叶级数和变换学习笔记/</id>
    <published>2019-07-01T12:50:33.000Z</published>
    <updated>2019-07-13T04:10:02.806Z</updated>
    
    <content type="html"><![CDATA[<p>在数学中，<strong>傅里叶级数（Fourier series）</strong>能将任何周期函数或周期信号分解成一个（可能由无穷个元素组成的）简单振荡函数的集合，即正弦函数和余弦函数（或者，等价地使用复指数）。<strong>傅里叶变换（Fourier transform）</strong>是一种线性积分变换，用于信号在时域（或空域）和频域之间的变换，在物理学和工程学中有许多应用。傅里叶变换就像化学分析，确定物质的基本成分；信号来自自然界，也可对其进行分析，确定其基本成分。</p><h1 id="傅里叶级数公式"><a href="#傅里叶级数公式" class="headerlink" title="傅里叶级数公式"></a>傅里叶级数公式</h1><p>傅里叶级数的公式：</p><script type="math/tex; mode=display">f(t) =\frac{a_{0}}{2}+a_{1}cos(\omega t)+b_{1}sin(\omega t) \\+a_{2}cos(2\omega t)+b_{2}sin(2\omega t) +...\\ =\frac{a_{0}}{2}+\sum_{n=1}^{\infty}{[a_{n}cos(n\omega t)+b_{n}sin(n\omega t)]}  \tag{1}</script><p>其中：</p><script type="math/tex; mode=display">a_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)cos(n\omega t)dt \tag{2}</script><script type="math/tex; mode=display">b_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)sin(n\omega t)dt \tag{3}</script><h1 id="傅里叶级数的收敛性"><a href="#傅里叶级数的收敛性" class="headerlink" title="傅里叶级数的收敛性"></a>傅里叶级数的收敛性</h1><p>若傅里叶级数不收敛于$f(t)$，则不能在两者之间画等号。关于傅里叶级数的收敛性，最常用的为狄利克雷条件：</p><blockquote><p>对于一个周期为$2\pi$的函数$f(x)$，如果它满足：</p><p>（1）在一个周期内连续或只有有限个第一类间断点；</p><p>（2）在一个周期内只有有限个极值点。</p><p>那么$f(x)$的傅里叶级数收敛于$\frac{f(x+0)+f(x-0)}{2}$。</p></blockquote><p>狄利克雷条件只是傅里叶级数收敛的充分条件，而非必要条件，级数收敛不代表该条件成立。</p><p>下面给出一个周期函数的傅里叶级数的计算示例。</p><p>周期为$2\pi$的函数$f(x)$，在$(-\pi,\pi)$上$f(x)=x$，求$f(x)$的傅里叶级数。</p><script type="math/tex; mode=display">a_n=\frac{1}{\pi}\int_{-\pi}^{\pi}x\mathrm{cos}nx\mathrm{d}x=0</script><script type="math/tex; mode=display">b_n=\frac{1}{\pi}\int_{-\pi}^{\pi}x\mathrm{sin}nx\mathrm{d}x=(-1)^{n+1}\frac{2}{n}</script><p>狄利克雷条件显然成立，所以</p><script type="math/tex; mode=display">f(x)=\sum^{\infty}_{n=1}(-1)^{n+1}\frac{2}{n}\mathrm{sin}nx</script><h1 id="傅里叶级数的指数形式"><a href="#傅里叶级数的指数形式" class="headerlink" title="傅里叶级数的指数形式"></a>傅里叶级数的指数形式</h1><p>令$i$表示虚数单位，傅里叶级数的指数形式为:</p><script type="math/tex; mode=display">f(t)=\sum^{\infty}_{n=-\infty}c_ne^{in\omega t}</script><p>其中,</p><script type="math/tex; mode=display">c_n=\frac{1}{T}\int^{T}_{0}f(t)e^{-in\omega t}\mathrm{d}t</script><p>指数形式与三角形式是相等的，推导如下:</p><script type="math/tex; mode=display">\begin{aligned}&\quad\sum^{\infty}_{n=-\infty}c_ne^{in\omega t}\\ &=c_0+\sum^{\infty}_{n=1}(c_ne^{in\omega t}+c_{-n}e^{-in\omega t}） \\ &=c_0+\sum^{\infty}_{n=1}[(c_n+c_{-n})\mathrm{cos}n\omega t+i(c_n-c_{-n})\mathrm{sin}n\omega t] \\ &=\frac{a_0}{2}+\sum_{n=1}^{\infty}(a_n \mathrm{cos}n \omega t+b_n \mathrm{sin}n \omega t)     \end{aligned}</script><h1 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h1><p>傅里叶变换是傅里叶级数在非周期函数上的推广。对非周期函数$f(x)$，其周期$T\rightarrow\infty$。因为$\omega_0=\frac{2\pi}{T}$，则$\omega_0\rightarrow0$。</p><p>观察傅里叶级数的指数形式</p><script type="math/tex; mode=display">f(t)=\sum^{\infty}_{n=-\infty}c_ne^{in\omega t} \tag{1}</script><p>其中,</p><script type="math/tex; mode=display">c_n=\frac{1}{T}\int^{T}_{0}f(t)e^{-in\omega t}\mathrm{d}t \tag{2}</script><p>当 $\omega_0\rightarrow0$ 时， $n\omega_0$ 从原本的离散变化变成了连续变化， $c_n$ 也就可以表示为关于 $n\omega_0$ 的函数 $F(n\omega_0)$ 。</p><p>傅里叶级数中公式（2）的积分的上下限不一定是$0$到$T$，只需要$f(t)$的一个周期就可以了。即对于任意的$x_0$, 公式(2)可表示为：</p><script type="math/tex; mode=display">c_n=\frac{1}{T}\int^{x_0+T}_{x_0}f(t)e^{-in\omega_0 t}\mathrm{d}t \tag{3}</script><p>这个积分需要积一整个周期，而此时的周期为无穷大，也就是整个定义域上都需要积，所以要从$-\infin$积分到$\infin$。</p><p>只需要让上式中的 $T\rightarrow\infty$ ， $\omega_0\rightarrow0$ ，便可以得到 $F(n\omega_0)$ 的表达式。不妨令 $\omega=n\omega_0$ ，就得到了 </p><script type="math/tex; mode=display">F(\omega)=\frac{1}{T}\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t \tag{4}</script><p>由于$\frac{1}{T}\rightarrow0$，我们先丢弃$\frac{1}{T}$，之后用到$F(\omega)$在乘回来，于是令：</p><script type="math/tex; mode=display">F(\omega)=\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t \tag{5}</script><p>将公式（5）代入公式（1），并代入$\frac{1}{T}=\frac{\omega_0}{2\pi}$，则有：</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\sum^{\infty}_{n=-\infty}F(n\omega_0)e^{in\omega_0 t}\omega_0 \tag{6}</script><p>因为 $\omega=n\omega_0$ ，每次 $\omega$ 的增量 $d\omega$ 都是由于 $n$ 变为 $n+1$ 造成的，所以</p><script type="math/tex; mode=display">\mathrm{d}\omega=(n+1)\omega_0-n\omega_0=\omega_0</script><p>同时 $n\omega_0$ 连续变化，原本的离散意义下的求和就该变为连续意义下的积分，于是公式（6）变形为：</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}\mathrm{d}\omega \tag{7}</script><p>至此得到傅里叶变换的两个公式：</p><script type="math/tex; mode=display">F(\omega)=ℱ[f(t)]=\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t</script><script type="math/tex; mode=display">f(t)=ℱ^{-1}[F(\omega)]=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}\mathrm{d}\omega</script><h1 id="傅里叶变换条件"><a href="#傅里叶变换条件" class="headerlink" title="傅里叶变换条件"></a>傅里叶变换条件</h1><p>由于傅里叶变换是从傅里叶级数推导得来的，所以还是狄利克雷条件，不过此时还要加上第三条，  $f(t)$ 在一个周期内绝对可积。</p><p>这一个条件在 $f(t)$ 为周期函数时，可以由前两个条件推出来，因为周期和函数值均为有限值，所以在一个周期内一定绝对可积。但是推广到傅里叶变换后，这个推导就不成立了，需要单独判定第三个条件。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/19763358" target="_blank" rel="noopener">傅里叶分析之掐死教程</a>,by Heinrich.</li><li><a href="https://zhuanlan.zhihu.com/p/32341301" target="_blank" rel="noopener">傅里叶级数和傅里叶变换</a>,by 木不shi丁.</li><li><a href="https://www.zhihu.com/question/21665935" target="_blank" rel="noopener">傅里叶级数和傅里叶变换是什么关系？</a>,by 马同学.</li><li><a href="https://zhuanlan.zhihu.com/p/52158237" target="_blank" rel="noopener">傅里叶级数与傅里叶变换推导</a>,by 令狐哦打.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0" target="_blank" rel="noopener">傅里叶级数</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2" target="_blank" rel="noopener">傅里叶变换</a>,by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/41455378" target="_blank" rel="noopener">傅里叶系列（一）傅里叶级数的推导</a>,by ElPsyCongree.</li><li><a href="https://zhuanlan.zhihu.com/p/55566705" target="_blank" rel="noopener">傅里叶变换（一） 傅里叶级数</a>,by<br>misaka.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在数学中，&lt;strong&gt;傅里叶级数（Fourier series）&lt;/strong&gt;能将任何周期函数或周期信号分解成一个（可能由无穷个元素组成的）简单振荡函数的集合，即正弦函数和余弦函数（或者，等价地使用复指数）。&lt;strong&gt;傅里叶变换（Fourier transfo
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>使用python3+PyQt5+PyCharm桌面GUI开发</title>
    <link href="https://huangwang.github.io/2019/06/29/%E4%BD%BF%E7%94%A8python3-PyQt5-pycharm%E6%A1%8C%E9%9D%A2GUI%E5%BC%80%E5%8F%91/"/>
    <id>https://huangwang.github.io/2019/06/29/使用python3-PyQt5-pycharm桌面GUI开发/</id>
    <published>2019-06-29T13:18:34.000Z</published>
    <updated>2019-06-29T13:32:59.309Z</updated>
    
    <content type="html"><![CDATA[<p>下面简单介绍基于Python3、PyQt5和PyCharm进行桌面GUI开发。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h2><p>PyQt5所支持的python版本是从3.5开始的，因此安装的Python3版本必须大于3.5。</p><h2 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install PyQt5</span><br><span class="line">pip3 install PyQt5-tools</span><br></pre></td></tr></table></figure><h2 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装PyCharm</h2><p>安装完PyCharm后，需要配置Qt Designer和PyUIC，前者用于设计UI，后者用于将UI转成Py文件。</p><p>具体步骤请参考<a href="https://www.cnblogs.com/zhoug2020/p/9039993.html" target="_blank" rel="noopener">程序员之路：python3+PyQt5+pycharm桌面GUI开发</a>。</p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># Form implementation generated from reading ui file &apos;clearWaterPrintGui.ui&apos;</span><br><span class="line">#</span><br><span class="line"># Created by: PyQt5 UI code generator 5.11.3</span><br><span class="line">#</span><br><span class="line"># WARNING! All changes made in this file will be lost!</span><br><span class="line"></span><br><span class="line">from PyQt5 import QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line">class Ui_Form(object):</span><br><span class="line">    def setupUi(self, Form):</span><br><span class="line">        Form.setObjectName(&quot;Form&quot;)</span><br><span class="line">        Form.resize(400, 300)</span><br><span class="line">        self.label_DirPath = QtWidgets.QLabel(Form)</span><br><span class="line">        self.label_DirPath.setGeometry(QtCore.QRect(16, 52, 72, 15))</span><br><span class="line">        self.label_DirPath.setObjectName(&quot;label_DirPath&quot;)</span><br><span class="line">        self.label_ExtName = QtWidgets.QLabel(Form)</span><br><span class="line">        self.label_ExtName.setGeometry(QtCore.QRect(31, 112, 72, 15))</span><br><span class="line">        self.label_ExtName.setObjectName(&quot;label_ExtName&quot;)</span><br><span class="line">        self.buttonBox = QtWidgets.QDialogButtonBox(Form)</span><br><span class="line">        self.buttonBox.setGeometry(QtCore.QRect(190, 260, 193, 28))</span><br><span class="line">        self.buttonBox.setInputMethodHints(QtCore.Qt.ImhNone)</span><br><span class="line">        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)</span><br><span class="line">        self.buttonBox.setObjectName(&quot;buttonBox&quot;)</span><br><span class="line">        self.lineEdit_DirPath = QtWidgets.QLineEdit(Form)</span><br><span class="line">        self.lineEdit_DirPath.setGeometry(QtCore.QRect(100, 50, 281, 21))</span><br><span class="line">        self.lineEdit_DirPath.setObjectName(&quot;lineEdit_DirPath&quot;)</span><br><span class="line">        self.lineEdit_ExtName = QtWidgets.QLineEdit(Form)</span><br><span class="line">        self.lineEdit_ExtName.setGeometry(QtCore.QRect(100, 112, 281, 21))</span><br><span class="line">        self.lineEdit_ExtName.setObjectName(&quot;lineEdit_ExtName&quot;)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">    def retranslateUi(self, Form):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(&quot;Form&quot;, &quot;Form&quot;))</span><br><span class="line">        self.label_DirPath.setText(_translate(&quot;Form&quot;, &quot;文件路径：&quot;))</span><br><span class="line">        self.label_ExtName.setText(_translate(&quot;Form&quot;, &quot;扩展名：&quot;))</span><br><span class="line"></span><br><span class="line"># 下面代码是手动添加的</span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    import sys</span><br><span class="line">    from PyQt5.QtGui import QIcon</span><br><span class="line">    app=QtWidgets.QApplication(sys.argv)</span><br><span class="line">    widget=QtWidgets.QWidget()</span><br><span class="line">    ui=Ui_Form()</span><br><span class="line">    ui.setupUi(widget)</span><br><span class="line">    # widget.setWindowIcon(QIcon(&apos;web.png&apos;))#增加icon图标，如果没有图片可以没有这句</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/zhoug2020/p/9039993.html" target="_blank" rel="noopener">程序员之路：python3+PyQt5+pycharm桌面GUI开发</a>,by 莫水千流.</li><li><a href="http://www.futantan.com/2015/11/22/use-pyqt-develop-gui/" target="_blank" rel="noopener">使用PyQt快速开发GUI应用</a>,by Prayer.</li><li><a href="https://zh.wikipedia.org/wiki/PyQt" target="_blank" rel="noopener">PyQt</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面简单介绍基于Python3、PyQt5和PyCharm进行桌面GUI开发。&lt;/p&gt;
&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;h2 id=&quot;安装python3&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序打包成exe</title>
    <link href="https://huangwang.github.io/2019/06/29/Python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe/"/>
    <id>https://huangwang.github.io/2019/06/29/Python程序打包成exe/</id>
    <published>2019-06-29T03:18:51.000Z</published>
    <updated>2019-06-29T03:38:29.315Z</updated>
    
    <content type="html"><![CDATA[<p>大部分人是普通人，不知道如何运行Python脚本程序，因此有必要将Python脚本程序打包成可执行文件，免去安装Python环境，提高Python脚本程序的可用性。</p><h1 id="打包方法"><a href="#打包方法" class="headerlink" title="打包方法"></a>打包方法</h1><p>Python脚本程序的发布有三种方法：</p><ul><li>.py文件：对于开源项目或者源码没那么重要的，直接提供源码，需要使用者自行安装Python并且安装依赖的各种库。</li><li>.pyc文件：有些公司或个人因为机密或者各种原因，不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</li><li>可执行文件：对于非码农用户，最简单的方式就是提供一个可执行文件，只需要把用法告诉他即可。比较麻烦的是需要针对不同平台需要打包不同的可执行文件（Windows, Linux, Mac,…）。</li></ul><p>下面介绍将Python脚本程序打包成可执行程序的各种工具。</p><center>表1 各种打包工具的对比</center><div class="table-container"><table><thead><tr><th>Solution</th><th>Windows</th><th>Linux</th><th>OS X</th><th>Python 3</th><th>One file mode</th><th>Zipfile import</th><th>Eggs</th><th>pkg_resources support</th></tr></thead><tbody><tr><td>bbFreeze</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>py2exe</td><td>yes</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>pyInstaller</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>no</td></tr><tr><td>cx_Freeze</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>py2app</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table></div><p>从上述对Python脚本程序打包工具对比可知，推荐使用pyInstaller。</p><h1 id="PyInstaller打包示例"><a href="#PyInstaller打包示例" class="headerlink" title="PyInstaller打包示例"></a>PyInstaller打包示例</h1><h2 id="安装PyInstaller"><a href="#安装PyInstaller" class="headerlink" title="安装PyInstaller"></a>安装PyInstaller</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h2 id="打包Python脚本"><a href="#打包Python脚本" class="headerlink" title="打包Python脚本"></a>打包Python脚本</h2><p>打包Python脚本成单独的 .exe 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F yourprogram.py</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/45288707" target="_blank" rel="noopener">如何将 Python 程序打包成 .exe 文件？</a>,by 刘哈哈.</li><li><a href="https://blog.csdn.net/zengxiantao1994/article/details/76578421" target="_blank" rel="noopener">Python程序打包成exe可执行文件</a>,by 知行流浪.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大部分人是普通人，不知道如何运行Python脚本程序，因此有必要将Python脚本程序打包成可执行文件，免去安装Python环境，提高Python脚本程序的可用性。&lt;/p&gt;
&lt;h1 id=&quot;打包方法&quot;&gt;&lt;a href=&quot;#打包方法&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python命令行参数解析示例</title>
    <link href="https://huangwang.github.io/2019/06/29/Python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E7%A4%BA%E4%BE%8B/"/>
    <id>https://huangwang.github.io/2019/06/29/Python命令行参数解析示例/</id>
    <published>2019-06-29T01:03:23.000Z</published>
    <updated>2019-06-29T11:06:28.789Z</updated>
    
    <content type="html"><![CDATA[<p>最新需要一个小程序实现解析命令行参数、遍历指定文件夹，处理指定扩展名的文件。于是简单用python实现一下。</p><h1 id="库选择"><a href="#库选择" class="headerlink" title="库选择"></a>库选择</h1><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><h3 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h3><p>解析Python中命令行参数的最传统的方法是通过sys.argv。但这种方法比较古老，灵活性很差，同时解析出来的参数都是str类型。但在编写简单脚本，参数较少且固定时比较方便。</p><h3 id="getopt模块"><a href="#getopt模块" class="headerlink" title="getopt模块"></a>getopt模块</h3><p>getopt模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（—）。</p><h3 id="optparse模块"><a href="#optparse模块" class="headerlink" title="optparse模块"></a>optparse模块</h3><p>optparse，功能强大，易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。但在Python2.7后就已经弃用不再维护。</p><h3 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h3><p>argparse模块是Python内置的参数解析模块，使用起来比较简单且功能强大。</p><p>ArgumentParser类创建时的参数如下：</p><ul><li>prog - 程序的名字（默认：sys.argv[0]）</li><li>usage - 描述程序用法的字符串（默认：从解析器的参数生成）</li><li>description - 参数帮助信息之前的文本（默认：空）</li><li>epilog - 参数帮助信息之后的文本（默认：空）</li><li>parents - ArgumentParser 对象的一个列表，这些对象的参数应该包括进去</li><li>formatter_class - 定制化帮助信息的类</li><li>prefix_chars - 可选参数的前缀字符集（默认：‘-‘）</li><li>fromfile_prefix_chars - 额外的参数应该读取的文件的前缀字符集（默认：None）</li><li>argument_default - 参数的全局默认值（默认：None）</li><li>conflict_handler - 解决冲突的可选参数的策略（通常没有必要）</li><li>add_help - 给解析器添加-h/–help 选项（默认：True）</li></ul><p>add_argument函数的参数如下：</p><ul><li>name or flags - 选项字符串的名字或者列表，例如foo 或者-f, –foo。</li><li>action - 在命令行遇到该参数时采取的基本动作类型。</li><li>nargs - 应该读取的命令行参数数目。</li><li>const - 某些action和nargs选项要求的常数值。</li><li>default - 如果命令行中没有出现该参数时的默认值。</li><li>type - 命令行参数应该被转换成的类型。</li><li>choices - 参数可允许的值的一个容器。</li><li>required - 该命令行选项是否可以省略（只针对可选参数）。</li><li>help - 参数的简短描述。</li><li>metavar - 参数在帮助信息中的名字。</li><li>dest - 给parse_args()返回的对象要添加的属性名称。</li></ul><h3 id="参数解析模块比较"><a href="#参数解析模块比较" class="headerlink" title="参数解析模块比较"></a>参数解析模块比较</h3><ul><li>getopt，只能简单的处理命令行参数，无法解析一个参数多个值的情况，如 —file file1 file2 file3。</li><li>optparse，功能强大，易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。但在Python2.7后就已经弃用不再维护。</li><li>argparse，使其更加容易的编写用户友好的命令行接口。它所需的程序进程了参数定义，argparse将更好的解析sys.argv。同时argparse模块还能自动生成帮助及用户输入错误参数时的提示信息。</li></ul><h2 id="文件夹遍历"><a href="#文件夹遍历" class="headerlink" title="文件夹遍历"></a>文件夹遍历</h2><p>文件夹遍历有两种方法：</p><ul><li>使用os.walk</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line">import os </span><br><span class="line">def Test1(rootDir): </span><br><span class="line">    list_dirs = os.walk(rootDir) </span><br><span class="line">    for root, dirs, files in list_dirs: </span><br><span class="line">        for d in dirs: </span><br><span class="line">            print os.path.join(root, d)      </span><br><span class="line">        for f in files: </span><br><span class="line">            print os.path.join(root, f)</span><br></pre></td></tr></table></figure><ul><li>使用os.listdir</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line">import os </span><br><span class="line">def Test2(rootDir): </span><br><span class="line">    for lists in os.listdir(rootDir): </span><br><span class="line">        path = os.path.join(rootDir, lists) </span><br><span class="line">        print path </span><br><span class="line">        if os.path.isdir(path): </span><br><span class="line">            Test2(path)</span><br></pre></td></tr></table></figure><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>Python内置了读写文件的函数，用法和C是兼容的。本节介绍内容大致有：文件的打开/关闭、文件对象、文件的读写等。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line"># 遍历文件夹</span><br><span class="line">def traverse(pathName,extName):</span><br><span class="line">    extNameList=extName.split(&apos; &apos;) </span><br><span class="line">    print(extNameList)</span><br><span class="line">    list_dirs = os.walk(pathName) </span><br><span class="line">    for root, dirs, files in list_dirs:   </span><br><span class="line">        for f in files:</span><br><span class="line">            targetExt=os.path.splitext(f)[-1]</span><br><span class="line">            if targetExt.lower() in extNameList:</span><br><span class="line">                clearWaterPrint(os.path.join(root, f))</span><br><span class="line"></span><br><span class="line">def clearWaterPrint(fileName):</span><br><span class="line">    print(fileName)</span><br><span class="line">    fileOrgin=open(fileName,&apos;rb&apos;)</span><br><span class="line">    fileTarget=open(fileName+&apos;.exe&apos;,&apos;wb&apos;)</span><br><span class="line">    fileTarget.write(fileOrgin.read())</span><br><span class="line">    fileOrgin.close()</span><br><span class="line">    os.remove(fileName)</span><br><span class="line">    fileTarget.close()</span><br><span class="line">    os.rename(fileName+&apos;.exe&apos;,fileName)</span><br><span class="line">  </span><br><span class="line"># Driver Code </span><br><span class="line">if __name__ == &apos;__main__&apos;: </span><br><span class="line">    # 首先创建一个ArgumentParser对象</span><br><span class="line">    parser = argparse.ArgumentParser(description=&apos;Process the water print!&apos;)   </span><br><span class="line">    # 添加--path设置文件目录</span><br><span class="line">    parser.add_argument(&apos;-p&apos;,&apos;--path&apos;, type = str,dest=&apos;pathName&apos;, help=&apos;give the path of directory&apos;,</span><br><span class="line">    default = &apos;./&apos;)    </span><br><span class="line">    # 添加--ext设置文件目录</span><br><span class="line">    parser.add_argument(&apos;-e&apos;,&apos;--ext&apos;, type = str,dest=&apos;extName&apos;, help=&apos;give the extension name of file&apos;,</span><br><span class="line">    default = &apos;.doc .docx .wav .txt .xml .dot .html .jpg .png&apos;,nargs = &apos;*&apos;)    </span><br><span class="line">    #返回一个命名空间,如果想要使用变量,可用args.attr</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    # Calling traverse() function </span><br><span class="line">    traverse(args.pathName,args.extName)</span><br></pre></td></tr></table></figure><p>使用方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 clearWaterPrint.py -h</span><br><span class="line">python3 clearWaterPrint.py -p /home/test -e .doc .ppt</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://noahsnail.com/2017/09/13/2017-09-13-Python%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">Python的命令行参数解析</a>,by Tyan.</li><li><a href="https://zhuanlan.zhihu.com/p/56961708" target="_blank" rel="noopener">Python中最好用的命令行参数解析工具</a>,by Mingle Wong.</li><li><a href="https://blog.51cto.com/laocao/525140" target="_blank" rel="noopener">Python遍历文件夹的两种方法比较</a>,by likecao.</li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c05/p04_read_write_binary_data.html" target="_blank" rel="noopener">读写字节数据</a>,by python3-cookbook.</li><li><a href="http://funhacks.net/explore-python/File-Directory/binary_file_io.html" target="_blank" rel="noopener">读写二进制文件</a>,by funhacks.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最新需要一个小程序实现解析命令行参数、遍历指定文件夹，处理指定扩展名的文件。于是简单用python实现一下。&lt;/p&gt;
&lt;h1 id=&quot;库选择&quot;&gt;&lt;a href=&quot;#库选择&quot; class=&quot;headerlink&quot; title=&quot;库选择&quot;&gt;&lt;/a&gt;库选择&lt;/h1&gt;&lt;h2 id=
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C++标准演化简介</title>
    <link href="https://huangwang.github.io/2019/06/26/CPlusPlus%E6%A0%87%E5%87%86%E6%BC%94%E5%8C%96%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/06/26/CPlusPlus标准演化简介/</id>
    <published>2019-06-26T11:45:12.000Z</published>
    <updated>2019-06-26T12:36:16.066Z</updated>
    
    <content type="html"><![CDATA[<p>最近阅读采用C++编写的MAVROS源码，遇到很多C++语言的新特性，理解起来很费劲，因此，特地分析一下C++标准演变过程，学习其进化过程中引入的新特性，提高C++源码阅读效率。</p><h1 id="C-标准演变"><a href="#C-标准演变" class="headerlink" title="C++标准演变"></a>C++标准演变</h1><p>2017年12月05日，ISO C++ 委员会正式发布了 C++ 17 标准，官方名称为 ISO/IEC 14882:2017。之前发布的C++标准有C++14、C++11、C++03、C++98。</p><h2 id="C-98"><a href="#C-98" class="headerlink" title="C++98"></a>C++98</h2><p>C++98是第一个C++标准。它分为两个部分：核心语言和C++标准程序库；后者包含了大部分标准模板库和C标准程序库的稍加修改版本。存在许多不属于标准部分的C++程序库，且使用外部链接，程序库甚至可以用C撰写。</p><p>C++标准程序库充分吸收了C标准程序库，并佐以少许的修改，使其与C++良好的运作。另一个大型的程序库部分，是以标准模板库（STL）为基础，STL于1994年2月正式成为ANSI/ISO C++。它提供了实用的工具，如容器类（如：Array和Vector），迭代器（广义指针）提供容器以类似数组的访问方式，以及泛型算法进行搜索和排序的运算。此外还提供了(multi)map和(multi)set，它们都共享相似的成员函数。因此，以下成为可能，使用模板撰写泛型算法，它可以和任何容器或在任何以迭代器定义的序列上运作。如同C，使用#include指令包含标准表头，即可访问程序库里的功能。C++提供69个标准表头，其中19个不再赞成使用。</p><p>使用标准模板库（例如：使用std::vector或std::string来取代C风格的数组或字符数组）有助于导向更安全和更灵活的软件。</p><p>在STL在纳入C++标准以前，是来自HP和后来的SGI的第三方程式库，标准中并未称之为“STL”，它只是标准库中的一部分，但仍有许多人使用这个名称，以别于其它的标准库（输入／输出流、国际化、诊断、C程序库子集，等等）。 另外，如std::basic_string此类标准委员会添加的接口，有时也被误认为STL；实际上它们并不存在于原始的SGI STL中，在标准化后SGI STL才从标准库吸收加入其中。</p><h2 id="C-03"><a href="#C-03" class="headerlink" title="C++03"></a>C++03</h2><p>C++03 是 C++ 语言国际标准的一个版本，正式名称是 ISO/IEC 14882:2003。该标准由国际标准化组织（ISO）和国际电工委员会（IEC）共同制定。</p><p>C++03 取代了 C++ 标准的前一个版本 C++98，后被 C++11 所取代。C++03 主要是在前一个版本的基础上针对实现方的一些问题进行了修复，从而在各个实现间达到一致、保持了可移植性。该版本共涉及 92 项核心语言缺陷报告、125 项库缺陷报告，所提供的新特性只有一项：值初始化（英语：value initialization）。</p><p>C++03 的第 69 号库缺陷报告非常值得一提，为了解决该问题，标准中加入了“std::vector 中的元素必须连续存储”的要求。</p><h2 id="C-11"><a href="#C-11" class="headerlink" title="C++11"></a>C++11</h2><p>C++11，先前被称作C++0x，即ISO/IEC 14882:2011，是C++编程语言的一个标准。它取代第二版标准ISO/IEC 14882:2003（第一版ISO/IEC 14882:1998公开于1998年，第二版于2003年更新，分别通称C++98以及C++03，两者差异很小），且已被C++14取代。相比于C++03，C++11标准包含核心语言的新机能，而且扩展C++标准程序库，并入了大部分的C++ Technical Report 1程序库（数学的特殊函数除外）。 ISO／IEC JTC1/SC22/WG21 C++标准委员会计划在2010年8月之前完成对最终委员会草案的投票，以及于2011年3月召开的标准会议完成国际标准的最终草案。然而，WG21预期ISO将要花费六个月到一年的时间才能正式发布新的C++标准。为了能够如期完成，委员会决定致力于直至2006年为止的提案，忽略新的提案。最终于2011年8月12日公布，并于2011年9月出版。</p><p>2012年2月28日的国际标准草案是最接近于C++11标准的草案，差异仅有编辑上的修正。</p><p>像C++这样的编程语言，透过一种演化的的过程来发展其定义。这个过程不可避免地将引发与现有代码的兼容问题，在C++的发展过程中偶尔会发生。不过根据比雅尼·斯特劳斯特鲁普（C++的创始人并且是委员会的一员）表示，新的标准将几乎100%兼容于现有标准。</p><h2 id="C-14"><a href="#C-14" class="headerlink" title="C++14"></a>C++14</h2><p>C++14是C++的现行标准的非正式名称，正式名称为”International Standard ISO/IEC 14882:2014(E) Programming Language C++”。C++14旨在作为C++11的一个小扩展，主要提供漏洞修复和小的改进。C++14标准的委员会草案（Committee Draft）N3690于2013年5月15日发表。工作草案（Working Draft）N3936已于2014年3月2日完成。最终的投票期结束于2014年8月15日，结果（一致通过）已于8月18日公布。</p><h2 id="C-17"><a href="#C-17" class="headerlink" title="C++17"></a>C++17</h2><p>C++17又称C++1z，是C++的现行标准的非正式名称，正式名称为”International Standard ISO/IEC Programming Language C++”。C++17旨在作为大型扩展，最终的投票期将于2017年结束。</p><p>当前不少著名C++编译器已支持C++17仍未定案的草案（draft），例如最新的GCC6已支持C++ concept的C++事务型内存（Transactional Memory），Visual Studio与Clang当前都提供了modules。</p><h1 id="C-新语言特性"><a href="#C-新语言特性" class="headerlink" title="C++新语言特性"></a>C++新语言特性</h1><h2 id="Lambda函数与表示式"><a href="#Lambda函数与表示式" class="headerlink" title="Lambda函数与表示式"></a>Lambda函数与表示式</h2><p>在标准C++，特别是当使用C++标准程序库算法函数诸如sort和find，用户经常希望能够在算法函数调用的附近定义一个临时的述部函数（又称谓词函数，predicate function）。由于语言本身允许在函数内部定义类别，可以考虑使用函数对象，然而这通常既麻烦又冗赘，也阻碍了代码的流程。此外，标准C++不允许定义于函数内部的类别被用于模板，所以前述的作法是不可行的。</p><p><strong>C++11对lambda（即匿名函数）的支持可以解决上述问题</strong>。</p><p>一个lambda函数可以用如下的方式定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](int x, int y) &#123; return x + y; &#125;</span><br></pre></td></tr></table></figure><p>这个不具名函数的回返类型是decltype(x+y)。只有在lambda函数匹配”return expression”的形式下，它的回返类型才能被忽略。在前述的情况下，lambda函数仅能为一个述句。</p><p>在一个更为复杂的例子中，回返类型可以被明确的指定如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](int x, int y) -&gt; int &#123; int z = x + y; return z + x; &#125;</span><br></pre></td></tr></table></figure><p>本例中，一个临时的参数z被创建用来存储中间结果。如同一般的函数，z的值不会保留到下一次该不具名函数再次被调用时。</p><p>如果lambda函数没有传回值（例如void），其回返类型可被完全忽略。</p><p>定义在与lambda函数相同作用域的参数引用也可以被使用。这种的参数集合一般被称作closure（闭包）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[]      // 沒有定义任何变量。使用未定义变量会引发错误。</span><br><span class="line">[x, &amp;y] // x以传值方式传入（默认），y以引用方式传入。</span><br><span class="line">[&amp;]     // 任何被使用到的外部变量都隐式地以引用方式加以引用。</span><br><span class="line">[=]     // 任何被使用到的外部变量都隐式地以传值方式加以引用。</span><br><span class="line">[&amp;, x]  // x显式地以传值方式加以引用。其余变量以引用方式加以引用。</span><br><span class="line">[=, &amp;z] // z显式地以引用方式加以引用。其余变量以传值方式加以引用。</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C++</a>,by wikipedia.</li><li><a href="https://zh.cppreference.com/w/cpp/language/history" target="_blank" rel="noopener">C++ 的历史</a>,by cppreference.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B03" target="_blank" rel="noopener">C++03</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="noopener">C++11</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B14" target="_blank" rel="noopener">C++14</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B17" target="_blank" rel="noopener">C++17</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近阅读采用C++编写的MAVROS源码，遇到很多C++语言的新特性，理解起来很费劲，因此，特地分析一下C++标准演变过程，学习其进化过程中引入的新特性，提高C++源码阅读效率。&lt;/p&gt;
&lt;h1 id=&quot;C-标准演变&quot;&gt;&lt;a href=&quot;#C-标准演变&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>有趣的数学游戏</title>
    <link href="https://huangwang.github.io/2019/06/23/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6%E6%B8%B8%E6%88%8F/"/>
    <id>https://huangwang.github.io/2019/06/23/有趣的数学游戏/</id>
    <published>2019-06-23T15:29:58.000Z</published>
    <updated>2019-06-23T16:11:12.284Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些有趣的数学游戏，与小伙伴分享。</p><h1 id="三门问题"><a href="#三门问题" class="headerlink" title="三门问题"></a>三门问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。</p><p>问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？</p><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p><a href="https://zhuanlan.zhihu.com/p/70217002" target="_blank" rel="noopener">漫画：反直觉的 “三门问题”</a></p><h1 id="海盗分金币问题"><a href="#海盗分金币问题" class="headerlink" title="海盗分金币问题"></a>海盗分金币问题</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>经济学上有个“海盗分金”模型：是说5个海盗抢得100枚金币，他们按抽签的顺序依次提方案：首先由1号提出分配方案，然后5人表决，投票要超过半数同意方案才被通过，否则他将被扔入大海喂鲨鱼，依此类推。</p><p>“海盗分金”其实是一个高度简化和抽象的模型，体现了博弈的思想。在“海盗分金”模型中，任何“分配者”想让自己的方案获得通过的关键是事先考虑清楚“挑战者”的分配方案是什么，并用最小的代价获取最大收益，拉拢“挑战者”分配方案中最不得意的人们。</p><h2 id="问题解答-1"><a href="#问题解答-1" class="headerlink" title="问题解答"></a>问题解答</h2><p><a href="https://zhuanlan.zhihu.com/p/55273946" target="_blank" rel="noopener">漫画：有趣的海盗问题</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/70217002" target="_blank" rel="noopener">漫画：反直觉的 “三门问题”</a>,by 小灰.</li><li><a href="https://zhuanlan.zhihu.com/p/55273946" target="_blank" rel="noopener">漫画：有趣的海盗问题</a>,by 小灰.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一些有趣的数学游戏，与小伙伴分享。&lt;/p&gt;
&lt;h1 id=&quot;三门问题&quot;&gt;&lt;a href=&quot;#三门问题&quot; class=&quot;headerlink&quot; title=&quot;三门问题&quot;&gt;&lt;/a&gt;三门问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数学" scheme="https://huangwang.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="游戏" scheme="https://huangwang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>gdb调试入门</title>
    <link href="https://huangwang.github.io/2019/06/23/gdb%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/06/23/gdb调试入门/</id>
    <published>2019-06-23T06:26:54.000Z</published>
    <updated>2019-06-23T15:17:40.600Z</updated>
    
    <content type="html"><![CDATA[<p>GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。 对于一名Linux下工作的c++程序员，gdb是必不可少的工具。</p><h1 id="启动gdb"><a href="#启动gdb" class="headerlink" title="启动gdb"></a>启动gdb</h1><p>对C/C++程序的调试，需要在编译前就加上-g选项。对大型项目，一般选择Debug选项进行编译以 方便gdb调试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -g hello.cpp -o hello</span><br></pre></td></tr></table></figure><p>调试可执行文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$gdb &lt;program&gt;</span><br></pre></td></tr></table></figure><p>program也就是你的执行文件，一般在当前目录下。</p><h1 id="gdb交互命令"><a href="#gdb交互命令" class="headerlink" title="gdb交互命令"></a>gdb交互命令</h1><p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>run：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li><li>continue （简写c ）：继续执行，到下一个断点处（或运行结束）</li><li>next：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li><li>step （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li><li>until：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li><li>until+行号： 运行至某行，不仅仅用来跳出循环</li><li>finish： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li><li><strong>call 函数(参数)：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)</strong></li><li>quit：简记为 q ，退出gdb</li></ul><h2 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h2><ul><li><strong>break n （简写b n）:在第n行处设置断点</strong><br>（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）</li><li>b fn1 if a＞b：条件断点设置</li><li>break func（break缩写为b）：在函数func()的入口处设置断点，如：break cb_button</li><li>delete 断点号n：删除第n个断点</li><li>disable 断点号n：暂停第n个断点</li><li>enable 断点号n：开启第n个断点</li><li>clear 行号n：清除第n行的断点</li><li>info b （info breakpoints） ：显示当前程序的断点设置情况</li><li>delete breakpoints：清除所有断点</li></ul><h2 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h2><ul><li>list ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li><li>list 行号：将显示当前文件以“行号”为中心的前后10行代码，如：list 12</li><li>list 函数名：将显示“函数名”所在函数的源代码，如：list main</li><li>list ：不带参数，将接着上一次 list 命令的，输出下边的内容。</li></ul><h2 id="打印表达式"><a href="#打印表达式" class="headerlink" title="打印表达式"></a>打印表达式</h2><ul><li>print 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。</li><li>print a：将显示整数 a 的值</li><li>print ++a：将把 a 中的值加1,并显示出来</li><li>print name：将显示字符串 name 的值</li><li>print gdb_test(22)：将以整数22作为参数调用 gdb_test() 函数</li><li>print gdb_test(a)：将以变量 a 作为参数调用 gdb_test() 函数</li><li>display 表达式：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li><li>watch 表达式：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a</li><li>whatis ：查询变量或函数</li><li>info function： 查询函数</li><li>扩展info locals： 显示当前堆栈页的所有变量</li></ul><h2 id="查询运行信息"><a href="#查询运行信息" class="headerlink" title="查询运行信息"></a>查询运行信息</h2><ul><li>where/bt ：当前运行的堆栈列表；</li><li>bt backtrace 显示当前调用堆栈</li><li>up/down 改变堆栈显示的深度</li><li><strong>set args 参数:指定运行时的参数</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set args -l a -C abc</span><br><span class="line">set args -l=a -C=abc</span><br></pre></td></tr></table></figure><ul><li>show args：查看设置好的参数</li><li>info program： 来查看程序的是否在运行，进程号，被暂停的原因。</li></ul><h2 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h2><ul><li>layout：用于分割窗口，可以一边查看代码，一边测试：</li><li>layout src：显示源代码窗口</li><li>layout asm：显示反汇编窗口</li><li>layout regs：显示源代码/反汇编和CPU寄存器窗口</li><li>layout split：显示源代码和反汇编窗口</li><li>Ctrl + L：刷新窗口</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">gdb 调试利器</a>,by Linux Tools Quick Tutorial.</li><li><a href="https://blog.csdn.net/blacet/article/details/52385955" target="_blank" rel="noopener">GDB调试带参数的程序（转载＋整理+实践）</a>,by blacet.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。 对于一名Linux下工作的c++程序员，gdb是必不可少的工具。&lt;/p&gt;
&lt;h1 id=&quot;启动gdb&quot;&gt;&lt;a href=&quot;#启动gdb&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>随机抽样一致</title>
    <link href="https://huangwang.github.io/2019/06/23/%E9%9A%8F%E6%9C%BA%E6%8A%BD%E6%A0%B7%E4%B8%80%E8%87%B4/"/>
    <id>https://huangwang.github.io/2019/06/23/随机抽样一致/</id>
    <published>2019-06-23T01:26:08.000Z</published>
    <updated>2019-06-23T03:23:28.719Z</updated>
    
    <content type="html"><![CDATA[<p>随机抽样一致算法（RANdom SAmple Consensus，RANSAC）。它采用迭代的方式从一组包含离群(outlier)的被观测数据中估算出数学模型的参数。 RANSAC是一个非确定性算法，在某种意义上说，它会产生一个在一定概率下合理的结果，而更多次的迭代会使这一概率增加。此RANSAC算法在1981年由Fischler和Bolles首次提出。</p><p>RANSAC的基本假设是</p><ul><li>“内群”(inlier)数据可以通过几组模型的参数来叙述其分布，而“离群”(outlier)数据则是不适合模型化的数据。</li><li>数据会受噪声影响，噪声指的是离群，例如从极端的噪声或错误解释有关数据的测量或不正确的假设。</li><li>RANSAC假定，给定一组（通常很小）的内群，存在一个程序，这个程序可以估算最佳解释或最适用于这一数据模型的参数。</li></ul><h1 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h1><p>这里用一个简单的例子来说明，在一组数据点中找到一条最适合的线。假设，此有一组集合包含了内群以及离群，其中内群为可以被拟合到线段上的点，而离群则是无法被拟合的点。如果我们用简单的最小二乘法来找此线，我们将无法得到一条适合于内群的线，因为最小二乘法会受离群影响而影响其结果。而RANSAC，可以只由内群来计算出模型，而且概率还够高。然而，RANSAC无法保证结果一定最好，所以必须小心选择参数，使其能有足够的概率。</p><div style="display:flex">    <div style="width: 45%;margin: 0 2.5%;">        <img display="block" src="images/255px-Line_with_outliers.svg.png" width="100%" alt="包含许多离群的一组数据">        <div>包含许多离群的一组数据，要找一条最适合的线。</div>    </div>    <div style="width: 45%;margin: 0 2.5%;">        <img display="block" src="images/255px-Fitted_line.svg.png" width="100%" alt="RANSAC找到的线">        <div>RANSAC找到的线，离群值对结果没影响（蓝色点为内群，红色点为离群）</div>    </div>   </div><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>RANSAC算法是一个学习的技巧，通过使用观测数据的随机样本来估计模型参数。RANSAC使用投票机制来寻找优化的拟合结果。每个数据元被用来投票一或多个模型。投票机制基于两点假设：</p><ul><li><p>噪音大的特征并不能一直单独为某个模型投票</p></li><li><p>有足够多的特征来拟合一个好的模型</p></li></ul><p>一般RANSAC算法由两步骤迭代计算：</p><ul><li><p>一个样本子集，包含数据选取（随机选取）。通过使用这些数据得到一个拟合模型和相关的模型参数。样本子集的数量是最小充分的得到模型参数。</p></li><li><p>算法检查数据集中的哪些元素是一直在第一步估计到的模型当中的。如果在阈值（相对噪声的最大偏离度）外的话，该模型元素不能拟合估计到的模型便会被当做outlier。</p></li></ul><p>inliers的设置称作“一致性设置”RANSAC算法会一直迭代直到获得足够的inliers。</p><p>RANSAC的输入是一些观测数据和一些“可信度”参数，实现步骤：</p><ol><li>随机选择一些原始数据，叫作假设inliers子集</li><li>建立模型拟合</li><li>用其他数据来验证，根据模型特定的loss-function来计算是否符合该模型</li><li>如果足够的点都算是“一致性”设置里则该模型算是好模型</li><li>比较所有的“一致性”设置（就是建立的所有模型）看看哪个inliers多就是我们要的。</li></ol><h2 id="参数决定"><a href="#参数决定" class="headerlink" title="参数决定"></a>参数决定</h2><p>假设每个点是真正内群的几率是 $w$ :</p><script type="math/tex; mode=display">w = 真正內群的數目 / 數據總共的數量</script><p>通常我们不知道 $w$ 是多少, $w^n$ 是所选择的n个点都是内群的几率, $1-w^n$ 是所选择的n个点至少有一个不是内群的几率, $(1 − w^n)^k$ 是表示重复k次都没有全部的n个点都是内群的几率, 这边定算法跑k次以后成功的几率是p，那么,</p><script type="math/tex; mode=display">1 − p =(1 − w^n)^k</script><script type="math/tex; mode=display">p = 1 −(1 − w^n)^k</script><p>所以如果希望成功几率高，p = 0.99, 当n不变时，k越大,p越大, 当w不变时，n越大，所需的k就越大, 通常w未知，所以n选小一点比较好。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>RANSAC常被用在计算机视觉，例如，对应点问题和 估算立体摄影机双眼相对点的基本矩阵。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/36301702" target="_blank" rel="noopener">随机抽样一致RANSAC: Random Sample Consensus</a>,by 江知季.</li><li><a href="https://zh.wikipedia.org/wiki/%E9%9A%A8%E6%A9%9F%E6%8A%BD%E6%A8%A3%E4%B8%80%E8%87%B4" target="_blank" rel="noopener">随机抽样一致</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随机抽样一致算法（RANdom SAmple Consensus，RANSAC）。它采用迭代的方式从一组包含离群(outlier)的被观测数据中估算出数学模型的参数。 RANSAC是一个非确定性算法，在某种意义上说，它会产生一个在一定概率下合理的结果，而更多次的迭代会使这一
      
    
    </summary>
    
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="统计学" scheme="https://huangwang.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>尺度空间理论简介</title>
    <link href="https://huangwang.github.io/2019/06/22/%E5%B0%BA%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%90%86%E8%AE%BA%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/06/22/尺度空间理论简介/</id>
    <published>2019-06-22T10:53:42.000Z</published>
    <updated>2019-06-22T13:30:21.237Z</updated>
    
    <content type="html"><![CDATA[<p>尺度空间理论最早可以追溯到1962年的T.Iijima最先提出，学术界开始关注尺度空间技术主要在1986年IEEE PAMI上同时刊出的4篇关于尺度空间理论的文章奠定了发展基础。</p><p>现实世界中物体只有具备一定的尺度才能够倍人眼所察觉，计算机视觉学术研究就是在不断的尝试与突破来模拟人眼的观察方法。因此，尺度空间就是试图在图像领域中模拟人眼观察物体的概念与方法。</p><h1 id="尺度空间理论"><a href="#尺度空间理论" class="headerlink" title="尺度空间理论"></a>尺度空间理论</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>图像的尺度空间是指图像的模糊程度，而非图像的大小。近距离看一个物体和远距离看一个物体，模糊程度是不一样的；从近到远，图像越来越模糊的过程，也是图像的尺度越来越大的过程。</p><h2 id="尺度空间的作用"><a href="#尺度空间的作用" class="headerlink" title="尺度空间的作用"></a>尺度空间的作用</h2><ul><li><p>用计算机视觉系统分析未知场景时，计算机并不预先知道图像中物体的尺度。需要同时考虑图像在多尺度下的描述，获知感兴趣物体的最佳尺度；</p></li><li><p>不同的尺度下都有同样的关键点，那么在不同的尺度的输入图像下就都可以检测出来关键点匹配，也就是尺度不变性；</p></li></ul><h2 id="尺度空间的应用"><a href="#尺度空间的应用" class="headerlink" title="尺度空间的应用"></a>尺度空间的应用</h2><ul><li>David G. Lowe教授基于描述数字图像局部特征的尺度空间概念，于1999年提出尺度不变特征变换算法（Scale-invariant feature transform，SIFT）；</li><li>在信息获取与处理、建筑、城市学等不同学科中，都有类似的概念，或有借用尺度空间的概念与方法的可能；</li></ul><h1 id="尺度不变特征转换"><a href="#尺度不变特征转换" class="headerlink" title="尺度不变特征转换"></a>尺度不变特征转换</h1><p>尺度不变特征转换(Scale-invariant feature transform 或 SIFT)是一种机器视觉的算法用来侦测与描述影像中的局部性特征，它在空间尺度中寻找极值点，并提取出其位置、尺度、旋转不变数，此算法由 David Lowe 在1999年所发表，2004年完善总结。 [1] 后续的论文中也有许多基于 SIFT 改进的论文，例如 SURF 将 SIFT 的许多过程近似，达到加速的效果；PCA-SIFT利用主成分分析降低描述子的维度，减少内存的使用并加快配对速度。</p><p>其应用范围包含物体辨识、机器人地图感知与导航、影像缝合、3D模型建立、手势辨识、影像追踪和动作比对。</p><p>此算法有其专利，专利拥有者为 英属哥伦比亚大学。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/Small_Munich/article/details/79968229" target="_blank" rel="noopener">SIFT算法系列之尺度空间</a>,by small_munich.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%B0%BA%E5%BA%A6%E4%B8%8D%E8%AE%8A%E7%89%B9%E5%BE%B5%E8%BD%89%E6%8F%9B" target="_blank" rel="noopener">尺度不变特征转换</a>,by wikipedia.</li><li><a href="https://www.cnblogs.com/ronny/p/3886013.html" target="_blank" rel="noopener">尺度空间理论</a>,by ☆Ronny丶.</li><li><a href="https://zhuanlan.zhihu.com/p/48594812" target="_blank" rel="noopener">特征点检测一</a>,by 张帅宾.</li><li><a href="http://zhaoxuhui.top/blog/2018/01/29/ORB%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E5%8C%B9%E9%85%8D%E5%8F%8A%E5%AE%9E%E7%8E%B0.html" target="_blank" rel="noopener">ORB特征提取、匹配及实现</a>,by zhaoxuhui.</li><li><a href="https://senitco.github.io/2017/07/05/image-feature-brief/" target="_blank" rel="noopener">图像特征描述子之BRIEF</a>,by Senit_Co.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;尺度空间理论最早可以追溯到1962年的T.Iijima最先提出，学术界开始关注尺度空间技术主要在1986年IEEE PAMI上同时刊出的4篇关于尺度空间理论的文章奠定了发展基础。&lt;/p&gt;
&lt;p&gt;现实世界中物体只有具备一定的尺度才能够倍人眼所察觉，计算机视觉学术研究就是在不断
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机图形学" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计的五大原则SOLID</title>
    <link href="https://huangwang.github.io/2019/06/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%BA%94%E5%A4%A7%E5%8E%9F%E5%88%99SOLID/"/>
    <id>https://huangwang.github.io/2019/06/16/面向对象设计的五大原则SOLID/</id>
    <published>2019-06-16T12:05:21.000Z</published>
    <updated>2019-06-16T14:45:15.322Z</updated>
    
    <content type="html"><![CDATA[<p>在程序设计领域， SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）是由罗伯特·C·马丁在21世纪早期引入，指代了面向对象编程和面向对象设计的五个基本原则。</p><p>当这些原则被一起应用时，它们使得一个程序员开发一个容易进行软件维护和扩展的系统变得更加可能。 SOLID所包含的原则是通过引发编程者进行软件源代码的代码重构进行软件的代码异味清扫，从而使得软件清晰可读以及可扩展时可以应用的指南。</p><p>SOLID被典型的应用在测试驱动开发上，并且是敏捷开发以及自适应软件开发的基本原则的重要组成部分。</p><h1 id="SOLID原则简介"><a href="#SOLID原则简介" class="headerlink" title="SOLID原则简介"></a>SOLID原则简介</h1><div class="table-container"><table><thead><tr><th>首字母</th><th>指代</th><th>概念</th></tr></thead><tbody><tr><td>S</td><td>单一功能原则</td><td>对象应该仅具有一种单一功能</td></tr><tr><td>O</td><td>开闭原则</td><td>软件体应该是对于扩展开放的，但是对于修改封闭的</td></tr><tr><td>L</td><td>里氏替换原则</td><td>程序中对象在不改变程序正确性的前提下被它的子类所替换</td></tr><tr><td>I</td><td>接口隔离原则</td><td>多个特定客户端接口要好于一个宽泛用途的接口</td></tr><tr><td>D</td><td>依赖反转原则</td><td>依赖于抽象而不是一个实例</td></tr></tbody></table></div><h1 id="单一功能原则"><a href="#单一功能原则" class="headerlink" title="单一功能原则"></a>单一功能原则</h1><p>在面向对象编程领域中，单一功能原则（Single responsibility principle）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）。</p><p>这个术语由罗伯特·C·马丁（Robert Cecil Martin）在他的《敏捷软件开发，原则，模式和实践》一书中的一篇名为〈面向对象设计原则〉的文章中给出。 马丁表述该原则是基于的《结构化分析和系统规格》一书中的内聚原则（Cohesion）上。</p><p>马丁把功能（职责）定义为：“改变的原因”，并且总结出一个类或者模块应该有且只有一个改变的原因。一个具体的例子就是，想象有一个用于编辑和打印报表的模块。这样的一个模块存在两个改变的原因。第一，报表的内容可以改变（编辑）。第二，报表的格式可以改变（打印）。这两方面会的改变因为完全不同的起因而发生：一个是本质的修改，一个是表面的修改。单一功能原则认为这两方面的问题事实上是两个分离的功能，因此他们应该分离在不同的类或者模块里。把有不同的改变原因的事物耦合在一起的设计是糟糕的。</p><p>保持一个类专注于单一功能点上的一个重要的原因是，它会使得类更加的健壮。继续上面的例子，如果有一个对于报表编辑流程的修改，那么将存在极大的危险性，因为假设这两个功能存在于同一个类中，修改报表的编辑流程会导致公共状态或者依赖关系的改变，打印功能的代码会因此不工作。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">abstract class Employee &#123;</span><br><span class="line">  // This needs to be implemented</span><br><span class="line">  abstract calculatePay (): number;</span><br><span class="line">  // This needs to be implemented</span><br><span class="line">  abstract reportHours (): number;</span><br><span class="line">  // let&apos;s assume THIS is going to be the </span><br><span class="line">  // same algorithm for each employee- it can</span><br><span class="line">  // be shared here.</span><br><span class="line">  protected save (): Promise&lt;any&gt; &#123;</span><br><span class="line">    // common save algorithm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HR extends Employee &#123;</span><br><span class="line">  calculatePay (): number &#123;</span><br><span class="line">    // implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line">  reportHours (): number &#123;</span><br><span class="line">    // implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Accounting extends Employee &#123;</span><br><span class="line">  calculatePay (): number &#123;</span><br><span class="line">    // implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line">  reportHours (): number &#123;</span><br><span class="line">    // implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IT extends Employee &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><p>在面向对象编程领域中，开闭原则规定“软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的”，这意味着一个实体是允许在不改变它的源代码的前提下变更它的行为。该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要代码审查，单元测试以及诸如此类的用以确保产品使用质量的过程。遵循这种原则的代码在扩展时并不发生改变，因此无需上述的过程。</p><p>开闭原则的命名被应用在两种方式上。这两种方式都使用了<strong>继承</strong>来解决明显的困境，但是它们的目的，技术以及结果是不同的。</p><p></p><p align="center">    <img src="images/ocp-2.png" width="90%" alt="开闭原则示意图"></p><p></p><center>图2  开闭原则示意图</center><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><p>在面向对象的程序设计中，里氏替换原则（Liskov Substitution principle）是对子类型的特别定义。它由芭芭拉·利斯科夫（Barbara Liskov）在1987年在一次会议上名为“数据的抽象与层次”的演说中首先提出。</p><p>里氏替换原则的内容可以描述为： “派生类（子类）对象可以在程式中代替其基类（超类）对象。”</p><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><p>接口隔离原则（英语：interface-segregation principles， 缩写：ISP）指明客户（client）应该不依赖于它不使用的方法。接口隔离原则(ISP)拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为角色接口（role interfaces）。接口隔离原则(ISP)的目的是系统解开耦合，从而容易重构，更改和重新部署。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>以商家接入移动支付API的场景举例，支付宝支持收费和退费；微信接口只支持收费。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">interface PayChannel &#123;</span><br><span class="line">    void charge();</span><br><span class="line">    void refund();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AlipayChannel implements PayChannel &#123;</span><br><span class="line">    public void charge() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void refund() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WeChatChannel implements payChannel &#123;</span><br><span class="line">    public void charge() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void refund() &#123;</span><br><span class="line">        // 没有任何代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种支付渠道，根本没有退款的功能，但是由于实现了PayChannel，又不得不将refund()实现成了空方法。那么，在调用中，这个方法是可以调用的，实际上什么都没有做!</p><p>将PayChannel拆成各包含一个方法的两个接口PayableChannel和RefundableChannel。</p><h1 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h1><p>在面向对象编程领域中，依赖反转原则（Dependency inversion principle，DIP）是指一种特定的解耦（传统的依赖关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</p><p>该原则规定：</p><ul><li><strong>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。</strong></li><li><strong>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。</strong></li></ul><p>该原则颠倒了一部分人对于面向对象设计的认识方式。如高层次和低层次对象都应该依赖于相同的抽象接口。</p><p></p><p align="center">    <img src="images/Dependency_inversion.png" width="90%" alt="依赖反转原则示意图"></p><p></p><center>左图中高层对象A依赖于底层对象B的实现；右图中把高层对象A对底层对象的需求抽象为一个接口A，底层对象B实现了接口A，这就是依赖反转。</center><center>图2  依赖反转原则示意图</center><p>在传统的应用架构中，低层次的组件设计用于被高层次的组件使用，这一点提供了逐步的构建一个复杂系统的可能。在这种结构下，高层次的组件直接依赖于低层次的组件去实现一些任务。这种对于低层次组件的依赖限制了高层次组件被重用的可行性。</p><p>依赖反转原则的目的是把高层次组件从对低层次组件的依赖中解耦出来，这样使得重用不同层级的组件实现变得可能。把高层组件和低层组件划分到不同的包/库（在这些包/库中拥有定义了高层组件所必须的行为和服务的接口，并且存在高层组件的包）中的方式促进了这种解耦。由于低层组件是对高层组件接口的具体实现，因此低层组件包的编译是依赖于高层组件的，这颠倒了传统的依赖关系。众多的设计模式，比如插件，服务定位器或者依赖反转，则被用来在运行时把指定的低层组件实现提供给高层组件。</p><p>应用依赖反转原则同样被认为是应用了适配器模式，例如：高层的类定义了它自己的适配器接口（高层类所依赖的抽象接口）。被适配的对象同样依赖于适配器接口的抽象（这是当然的，因为它实现了这个接口），同时它的实现则可以使用它自身所在低层模块的代码。通过这种方式，高层组件则不依赖于低层组件，因为它（高层组件）仅间接的通过调用适配器接口多态方法使用了低层组件，而这些多态方法则是由被适配对象以及它的低层模块所实现的。</p><h2 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class PasswordReminder &#123;</span><br><span class="line">    private $dbConnection;</span><br><span class="line"> </span><br><span class="line">    public function __construct(MySQLConnection $dbConnection) &#123;</span><br><span class="line">        $this-&gt;dbConnection = $dbConnection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码存在问题：首先MySQLConnection是低层次模块，而PasswordReminder处于高层次，但根据S.O.L.I.D.中D的定义，即依赖抽象而不是具体实现，上面这段代码违反这一原则，PasswordReminder类被迫依赖于MySQLConnection类。</p><p>以后如果你改变数据库引擎，你还必须编辑PasswordReminder类，因此违反了开闭原则。</p><p>PasswordReminder类不应该关心你的应用程序使用什么数据库，为了解决这个问题我们又一次“对接口编程”，因为高层次和低层次模块应该依赖于抽象，我们可以创建一个接口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface DBConnectionInterface &#123;</span><br><span class="line">    public function connect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口有一个connect方法，MySQLConnection类实现该接口，在PasswordReminder类的构造函数不使用MySQLConnection类，而是使用接口替换，不用管你的应用程序使用的是什么类型的数据库，PasswordReminder类可以很容易地连接到数据库，没有任何问题，且不违反OCP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MySQLConnection implements DBConnectionInterface &#123;</span><br><span class="line">    public function connect() &#123;</span><br><span class="line">        return &quot;Database connection&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class PasswordReminder &#123;</span><br><span class="line">    private $dbConnection;</span><br><span class="line"> </span><br><span class="line">    public function __construct(DBConnectionInterface $dbConnection) &#123;</span><br><span class="line">        $this-&gt;dbConnection = $dbConnection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的代码片段，你现在可以看到，高层次和低层次模块依赖于抽象。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/wuyuegb2312/p/7011708.html" target="_blank" rel="noopener">面向对象的SOLID原则</a>,by wuyuegb2312.</li><li><a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">SOLID (面向对象设计)</a>),by wikipedia.</li><li><a href="https://khalilstemmler.com/articles/solid-principles/solid-typescript/" target="_blank" rel="noopener">SOLID Principles: The Software Developer’s Framework to Robust &amp; Maintainable Code [with Examples]</a>,by Khalil Stemmler.</li><li><a href="http://blog.jobbole.com/86267/" target="_blank" rel="noopener">S.O.L.I.D：面向对象设计的头 5 大原则</a>,by 伯乐在线.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在程序设计领域， SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）是由罗伯特·C·马丁在21世纪早期引入，指代了面向对象编程和面向对象设计的五个基本原则。&lt;/p&gt;
&lt;p&gt;当这些原则被一起应用时，它们使得一个程序员开发一个容易进行软件维护和扩展的系统变得更加可
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>非专业设计师的基本设计原则</title>
    <link href="https://huangwang.github.io/2019/06/14/%E9%9D%9E%E4%B8%93%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://huangwang.github.io/2019/06/14/非专业设计师的基本设计原则/</id>
    <published>2019-06-14T11:58:21.000Z</published>
    <updated>2019-06-14T12:52:54.474Z</updated>
    
    <content type="html"><![CDATA[<p>绝大部分内容创作者不是专业的设计师，因此在其内容展示时会遇到很大的困难，即如何对展示的内容进行优雅的排版？</p><p>遵循如下<strong>四个原则</strong>，虽然不会让您创造出令人惊艳的设计，但能帮助您创建出色、清晰且易于理解的设计，使每个人都可以轻松理解和互动。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p><strong>确保所有元素之间有足够的对比度。您的设计元素应该完全相同或显着不同。</strong></p><p>对比问题主要表现在4种不同的方面：</p><ul><li>颜色：浅色使用深色，反之亦然。</li></ul><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*1c9lIQ_y0Cz82vs4uF05ZA.png" width="80%"></p><ul><li>尺寸：仅将彼此相邻的元素放在完全相同的大小或相当大的大小上。</li></ul><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*Vy_CjoiJ4s3_U3jNW9JZlA.png" width="80%"></p><ul><li>重量：与尺寸相同，只是将元素放在彼此相邻的重量完全相同或重量相当不同的地方。</li></ul><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*WibV_UOHFJxjD1EUbs2sxQ.png" width="80%"></p><ul><li>样式：不要将一个斜体类型放在另一个斜体类型旁边，或者在另一个衬线字体旁边放置一个衬线字体。 结合不同的东西。</li></ul><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*kYKhe2rzZkyB8Oi84a6euQ.png" width="80%"></p><h1 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h1><p>确保类似的元素以类似的方式出现。</p><p>为什么？ 首先，通过保持事物的一致性（因此，简单），您可以让人们将注意力集中在设计的重要方面，而不是被一直在变化的事物分散注意力。</p><p>其次，一致性增加了信任，使事物看起来实际上是设计的，而不是简单地快速抛在一起。</p><p>一旦你选择它们就要坚持下去：</p><ul><li>字体/字体</li><li>调色板/颜色的阴影</li><li>表格</li><li>对齐</li><li>装饰元素的风格</li></ul><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*W843TWXVVLson0ME-6crWQ.png" width="80%"></p><h1 id="奥卡姆剃刀"><a href="#奥卡姆剃刀" class="headerlink" title="奥卡姆剃刀"></a>奥卡姆剃刀</h1><p>奥卡姆剃刀即若无必要，勿增实体，以减少视觉噪音。</p><p>您在设计中使用的元素数量越少越好。</p><p>为什么？ 人类的大脑很难处理信息并在输入过载的情况下做出决策。 使用尽可能少的装饰元素（字体，颜色，阴影，框架，笔画，图标，图案等）。</p><p>将奥卡姆剃刀的设计原则应用于所有内容：</p><p>如果只用2个元素可以实现某些功能，请不要使用3.如果可以使用10个元素实现某些功能，请不要使用20.您可以使用它。</p><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*Bjh-mMQ5VQ99TvHPyCCmNQ.png" width="80%"></p><h1 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h1><p>事物的定位方式会发送关于其含义的元级别消息。</p><p>为什么这很重要？ 因为了解你如何定位事物以及你在它们周围添加了多少空间有助于降低设计的复杂性，因此，使它更令人愉悦，更容易与之交互。</p><p>在设计中使用空间来传达这三个方面的意义：</p><ol><li>接近==相关性</li></ol><p>与其他元素相比彼此更接近的事物被认为彼此更多地相互关联而不是与其他元素相关。</p><p>这个是最重要的，因为我觉得它经常被忽视（甚至有些人声称是专业设计师，而不是命名任何名字）。</p><p>它可以以多种不同的方式应用，例如：</p><pre><code>* 行之间应该有一个空格，而不是一行中每个单词之间的空间 - 同样，不同段落之间的空间也比段落内的行之间的空间要大。</code></pre><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*HQyTLidmveDLqN7su2evmg.png" width="80%"></p><pre><code>* 设计元素应该在彼此之间具有较小的空间，而不是在这些元素和组合物的边缘之间。</code></pre><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*Wb5mwX_UEIn0Wwsp7ObCNQ.png" width="80%"></p><pre><code>* 标签和支持信息应位于其描述/相关的元素附近。</code></pre><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*zNbzNX9H9GBkfNz2EO5qww.png" width="80%"></p><ol><li>负空间</li></ol><p>与奥卡姆剃刀设计原则结合使用，尽可能地为您的设计提供负面空间，使它们整齐并使其意义更加明显。</p><p>将太多元素放入有限的空间就像试着一次听三首不同的歌。 很难理解所说的内容。</p><p align="center">    <img src="https://cdn-images-1.medium.com/max/800/1*mNNmcsVmOooLRgtF3CJw1g.png" width="80%"></p><ol><li>重要性和秩序</li></ol><p>最重要的事情，你先放，和/或让它们占用最多的空间。 使用一系列事物来传达秩序。 等等。你绝对可以弄明白其余的。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.freecodecamp.org/news/fundamental-design-principles-for-non-designers-ad34c30caa7/" target="_blank" rel="noopener">Fundamental design principles for non-designers</a>,by freecodecamp.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80" target="_blank" rel="noopener">奥卡姆剃刀</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;绝大部分内容创作者不是专业的设计师，因此在其内容展示时会遇到很大的困难，即如何对展示的内容进行优雅的排版？&lt;/p&gt;
&lt;p&gt;遵循如下&lt;strong&gt;四个原则&lt;/strong&gt;，虽然不会让您创造出令人惊艳的设计，但能帮助您创建出色、清晰且易于理解的设计，使每个人都可以轻松理解和
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MAVLink协议解析</title>
    <link href="https://huangwang.github.io/2019/06/13/Mavlink%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/06/13/Mavlink协议解析/</id>
    <published>2019-06-13T06:21:30.000Z</published>
    <updated>2019-06-13T06:50:46.728Z</updated>
    
    <content type="html"><![CDATA[<p>MAVLink是一种非常轻量级的消息传递协议，用于与无人机（以及板载无人机组件之间）进行通信。</p><p>MAVLink遵循现代混合发布-订阅和点对点设计模式：数据流作为主题发送/发布，而配置子协议（如任务协议或参数协议）是点对点重传。</p><p>消息在XML文件中定义。每个XML文件定义特定MAVLink系统支持的消息集，也称为“方言”。由大多数地面控制站和自动驾驶仪实现的参考消息集在common.xml中定义（大多数方言构建在此定义的顶部）。</p><p>MAVLink工具链使用XML消息定义为每种受支持的编程语言生成MAVLink库。无人机，地面控制站和其他MAVLink系统使用生成的库进行通信。这些通常是MIT许可的，因此可以在任何闭源应用程序中无限制地使用，而无需发布闭源应用程序的源代码。</p><p>MAVLink于2009年初由Lorenz Meier首次发布，现在已经有相当数量的贡献者。</p><h1 id="MAVLink消息格式"><a href="#MAVLink消息格式" class="headerlink" title="MAVLink消息格式"></a>MAVLink消息格式</h1><p>MAVLink消息格式如图1所示。</p><p></p><p align="center">    <img src="images/MAVLink_msg.webp" width="90%" alt="MAVLink消息格式"></p><p></p><center>图1  MAVLink消息格式</center><p>MAVLink消息中各字段含义如图2所示。</p><p></p><p align="center">    <img src="images/Msg_Desc.webp" width="90%" alt="MAVLink消息格式描述"></p><p></p><center>图2  MAVLink消息格式描述</center><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://mavlink.io/en/" target="_blank" rel="noopener">MAVLink Developer Guide</a>,by mavlink homepage.</li><li><a href="https://www.jianshu.com/p/23fddff60369" target="_blank" rel="noopener">无人机通讯协议 —Mavlink 学习</a>, by Theshy.</li><li><a href="https://blog.csdn.net/oqqENvY12/article/details/61615609" target="_blank" rel="noopener">Pixhawk原生固件PX4之MAVLink协议解析</a>,by FantasyJXF.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MAVLink是一种非常轻量级的消息传递协议，用于与无人机（以及板载无人机组件之间）进行通信。&lt;/p&gt;
&lt;p&gt;MAVLink遵循现代混合发布-订阅和点对点设计模式：数据流作为主题发送/发布，而配置子协议（如任务协议或参数协议）是点对点重传。&lt;/p&gt;
&lt;p&gt;消息在XML文件中
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="无人机" scheme="https://huangwang.github.io/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
      <category term="MAVLink" scheme="https://huangwang.github.io/tags/MAVLink/"/>
    
  </entry>
  
  <entry>
    <title>轨迹相似度度量方法总结</title>
    <link href="https://huangwang.github.io/2019/06/10/%E8%BD%A8%E8%BF%B9%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%BA%A6%E9%87%8F%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://huangwang.github.io/2019/06/10/轨迹相似度度量方法总结/</id>
    <published>2019-06-10T14:39:26.000Z</published>
    <updated>2019-06-11T13:53:37.249Z</updated>
    
    <content type="html"><![CDATA[<p>轨迹相似度度量有广泛的用途，如语音识别分类、模板匹配、信息检索等。下面介绍各种轨迹相似度度量方法。</p><h1 id="轨迹定义"><a href="#轨迹定义" class="headerlink" title="轨迹定义"></a>轨迹定义</h1><p>轨迹可由时间域到空间域的映射函数表示，如：</p><script type="math/tex; mode=display">t\stackrel{F}{\longrightarrow}R^d, d>1</script><h1 id="度量方法"><a href="#度量方法" class="headerlink" title="度量方法"></a>度量方法</h1><p>轨迹相似度度量方法主要有：</p><ul><li><p>基于点方法： EDR，LCSS，DTW等</p></li><li><p>基于形状的方法： Frechet， Hausdorff</p></li><li><p>基于分段的方法：One Way Distance, LIP distance</p></li><li><p>基于特定任务的方法：TRACLUS， Road Network，grid等</p></li></ul><h2 id="基于点的方法"><a href="#基于点的方法" class="headerlink" title="基于点的方法"></a>基于点的方法</h2><h3 id="DTW"><a href="#DTW" class="headerlink" title="DTW"></a>DTW</h3><p>DTW（Dynamic Time Warping, 动态时间规整）可以计算两个时间序列的相似度，尤其适用于不同长度、不同节奏的时间序列（比如不同的人读同一个词的音频序列）。DTW将自动warping扭曲 时间序列（即在时间轴上进行局部的缩放），使得两个序列的形态尽可能的一致，得到最大可能的相似度。</p><p>Dynamic Time Warping（DTW）诞生有一定的历史了（日本学者Itakura提出），它出现的目的也比较单纯，是一种衡量两个长度不同的时间序列的相似度的方法。应用也比较广，主要是在模板匹配中，比如说用在孤立词语音识别（识别两段语音是否表示同一个单词），手势识别，数据挖掘和信息检索等中。</p><p>设 $P=<p_1,p_2,...,p_m>$ 和 $Q=<q_1,q_2,...,q_n>$ 是两个时间序列，则 $P$ 和 $Q$的距离 $DTW(P,Q)$ 定义如下：</q_1,q_2,...,q_n></p_1,p_2,...,p_m></p><script type="math/tex; mode=display">DTW(P,Q)= \left\{\begin{array}{lcl}0     &   &if\ m=n=0\\\infty &   &if\ m=0\ or\ n=0\\dist(p_1,q_1)+min    \left\{    \begin{aligned}            DTW(Rest(P),Rest(Q))\\            DTW(Rest(P),Q)\\            DTW(P,Rest(Q))\\    \end{aligned}    \right\} & & otherwise\end{array}\right.</script><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/27213170" target="_blank" rel="noopener">如何判断两条轨迹（或曲线）的相似度？</a>,by zhihu.</li><li><a href="https://zhuanlan.zhihu.com/p/43247215" target="_blank" rel="noopener">动态时间规整（DTW）算法简介</a>,by 文均.</li><li><a href="https://zhuanlan.zhihu.com/p/32849741" target="_blank" rel="noopener">DTW(Dynamic Time Warping)动态时间规整</a>,by X-猪.</li><li><a href="https://www.cnblogs.com/luxiaoxun/archive/2013/05/09/3069036.html" target="_blank" rel="noopener">Dynamic Time Warping 动态时间规整算法</a>,by 阿凡卢.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;轨迹相似度度量有广泛的用途，如语音识别分类、模板匹配、信息检索等。下面介绍各种轨迹相似度度量方法。&lt;/p&gt;
&lt;h1 id=&quot;轨迹定义&quot;&gt;&lt;a href=&quot;#轨迹定义&quot; class=&quot;headerlink&quot; title=&quot;轨迹定义&quot;&gt;&lt;/a&gt;轨迹定义&lt;/h1&gt;&lt;p&gt;轨迹可由时
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>经典控制与现代控制理论的区别与联系</title>
    <link href="https://huangwang.github.io/2019/06/09/%E7%BB%8F%E5%85%B8%E6%8E%A7%E5%88%B6%E4%B8%8E%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/"/>
    <id>https://huangwang.github.io/2019/06/09/经典控制与现代控制理论的区别与联系/</id>
    <published>2019-06-09T08:28:08.000Z</published>
    <updated>2019-06-09T09:21:52.701Z</updated>
    
    <content type="html"><![CDATA[<p>控制理论是工程学与数学的跨领域分支，主要处理在有输入信号的动力系统的行为。系统的外部输入称为“参考值”，系统中的一个或多个变量需随着参考值变化，控制器处理系统的输入，使系统输出得到预期的效果。</p><p>控制理论一般的目的是借由控制器的动作让系统稳定，也就是系统维持在设定值，而且不会在设定值附近晃动。</p><h1 id="控制论简介"><a href="#控制论简介" class="headerlink" title="控制论简介"></a>控制论简介</h1><p>控制理论是</p><ul><li>一个研究如何调整动态系统特性的理论。</li><li>科学中跨学科的领域，起源于工程及数学，逐渐的应用在许多社会科学中，例如心理学、社会学（社会学中的控制理论）、犯罪学及金融系统。</li></ul><p>控制系统可以视为具有四种机能的系统：<strong>量测、比较、计算及修正</strong>。这四个机能可以用五种元素来实现：<strong>感测器、换能器、发送器、控制器及最终控制元件</strong>。量测机能是由感测器、换能器及发送器执行，在实务应用上，这三个元素会整合在一个单体内，像是电阻温度计。比较和计算的机能是由控制器执行，可能是电子式的比例控制（P控制）、PI控制、PID控制、双稳态的迟滞控制，也可能是可编程逻辑控制器（PLC）。早期的控制器也可能是机械式的，像是离心式调速器或是化油器。修正机能是由最终控制元件执行，最终控制元件改变系统的输出，因此影响操纵或控制的变量。</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>车辆的巡航定速系统是让车辆维持在由驾驶者设定的固定参考速度。此时控制器为巡航定速系统，车辆为受控体（plant），而系统是由控制器和车辆所组成，而控制变量是引擎节流阀的位置．会决定引擎可以产生的功率。</p><p>一种最单纯的作法是当驾驶者启动巡航定速系统时，固定引擎节流阀的位置。但是若驾驶者在平坦的路面启动巡航定速系统，车辆在上坡时速度会较慢，车辆在下坡时速度又会较快。这种的控制器称为开环控制器，因为没有去量测系统输出（车辆速度）并且影响控制变量（节流阀位置），因此此系统无法去针对车辆遇到的变化（像路面坡度的变动）去进行调整。</p><p>在闭环控制系统中，利用感测器量测系统输出（车辆速度），并将资料送入控制器中，控制器依资料调整控制变量（节流阀位置），来达到维持理想系统输出（使车辆速度和驾驶者设定的参考速度一致）。此时若车辆在上坡时，感测器会量到车辆的速度变慢，因此会调整节流阀位置，加大引擎输出功率，使马达加速。因为有量测车辆速度的回授，因此控制器可以配合车辆速度的变化进行动态调整。因此产生了控制系统中的“环”范式：控制变量影响系统输出，而再根据量测到的系统输出去调整控制变量。</p><h1 id="经典控制理论"><a href="#经典控制理论" class="headerlink" title="经典控制理论"></a>经典控制理论</h1><p>为了克服开环控制器的限制，在控制理论中导入了反馈。闭环的控制器利用回授来控制动态系统的状态或输出。其名称来自系统中的讯息路径：程序输入（例如马达的电压）影响程序输出（例如马达的电流或转矩），利用感测器量测输出，再将量测资料送到控制器中处理，结果送回控制器作为输入信号之一，因此成为一闭环。</p><p>相对于开环控制器，闭环控制器有以下的优点：</p><ul><li>噪声抑制能力（像巡航定速中的路面坡度）。</li><li>即使在数学模型有一些不确定性的情形下（如模型结构和实际系统不是完全符合，或是模型参数和实际数值不是完全一致），仍有一定程度的性能。</li><li>可以稳定不稳定的系统</li><li>减少对于参数变动的灵敏度</li><li>提升命令追随（命令变化时，系统配合命令变化）的性能</li><li>有些系统中，同时出现开环及闭环的控制，此时的开环会称为前馈，目的是为了提升命令追随的性能。</li></ul><p>PID控制器是常见的闭回路控制器架构。</p><h2 id="闭环传递函数"><a href="#闭环传递函数" class="headerlink" title="闭环传递函数"></a>闭环传递函数</h2><p>系统的输出y(t)借由感测器F量测后，和参考值r(t)相减，控制器C根据参考值和输出值的误差e调整受控体P的输入u，如图1所示，这类的控制器称为闭环控制器。</p><p>由于只有一个输入和输出，此系统会称为SISO（单一输入单一输出）控制系统。MIMO（多重输入多重输出）控制系统是指输入或输出不只一个，在实际应用上也很常见，其输入变量和输出变量会用向量表示，而不是单一数值的标量。在分布参量系统中，向量可能是无限维的，即一般的函数。</p><p></p><p align="center">    <img src="images/control_loop.png" width="50%" alt="闭环传递函数示意图"></p><p></p><center>图1  闭环传递函数示意图</center><p>若假设控制器C、受控体P及感测器F都是线性及非时变的（各模组输入和输出的关系不随时间改变），可以将上述系统用拉普拉斯转换来分析，因此可以得到以下的关系：</p><script type="math/tex; mode=display">Y(s)=P(s)U(s)\,\!</script><script type="math/tex; mode=display">U(s)=C(s)E(s)\,\!</script><script type="math/tex; mode=display">E(s)=R(s)-F(s)Y(s)\,\!</script><p>其中 s为拉普拉斯转换中的复变量，若要求解Y(s)用R(s)表示，可得：</p><script type="math/tex; mode=display">Y(s)=\left({\frac  {P(s)C(s)}{1+F(s)P(s)C(s)}}\right)R(s)=H(s)R(s)\,\!</script><p>表示式 $H(s)={\frac {P(s)C(s)}{1+F(s)P(s)C(s)}}\,!$即为系统的闭环传递函数，分子是从r到y的前馈（开环）增益，分母是1加上经过反馈环的增益．即闭环增益，若$|P(s)C(s)|\gg 1\,!$，，也就是说在各s下，其范数都很大，且 $|F(s)|\approx 1\,!$，则Y(s)近似于R(s)，此时输出会紧密的追随参考输入。</p><h2 id="PID"><a href="#PID" class="headerlink" title="PID"></a>PID</h2><p>请参考链接[4]。</p><h1 id="现代控制理论"><a href="#现代控制理论" class="headerlink" title="现代控制理论"></a>现代控制理论</h1><p>经典控制理论以频域分析为主，而现代控制理论利用时域的状态空间表示法，将系统中的输入、输出及状态变量之间的关系用一阶的微分方程表示。为了抽象化输入、输出及状态变量的数量，这些变量一般会用向量来表示，而微分方程或代数方程（当系统是线性时）则会以矩阵形式表示。状态空间表示法也称为时域分析，提供一个方便且简洁的方式针对多重输入及输出的系统建模及分析，在有输入和输出时，也可以利用拉氏转换，将系统所有的资料包括在其中。现代控制理论不同于频域分析，可以分析非线性或不是零初始条件的系统。状态空间就是指坐标轴为状态变量的空间，系统的状态可以表示为状态空间中的一个向量。</p><h1 id="控制理论主题"><a href="#控制理论主题" class="headerlink" title="控制理论主题"></a>控制理论主题</h1><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>在控制理论中的稳定性是指控制系统的状态在特定条件下，可以维持在一定的范围内，不会发散，而在什么范围内才算是稳定则依系统种类而不同。</p><ul><li>没有输入信号的动力系统，其稳定性是用李雅普诺夫稳定性来描述，也就是任何初始条件在 $x<em>{0}$ 附近的轨迹均能维持在 $x</em>{0}$ 附近</li><li>有输入信号的线性系统，其稳定性是用有界输入有界输出稳定性（BIBO 稳定性）来描述，针对任何有界的输入信号，其输出也是有界。</li><li>有输入信号的非线性系统，其稳定性是用输入-状态稳定性（input-to-state stability），结合了李雅普诺夫稳定性及类似有界输入有界输出稳定性的表示方式。</li></ul><h2 id="可控制性及可观测性"><a href="#可控制性及可观测性" class="headerlink" title="可控制性及可观测性"></a>可控制性及可观测性</h2><p>可控制性和可观测性分别是输入和状态，输出和状态之间的性质。是在分析控制系统，决定控制策略或判断是否可以使系统稳定时所需要的重要性质。</p><p>可控制性是指是可以用适当的控制信号作为输入，使特定状态变量的数值变成０，和利用输入调整状态变量的能力有关，若一个状态变量是不可控制的，表示没有输入可以调整这一个状态，若一系统中所有不可控制的状态变量，其动态特性都是稳定的，则此系统称为可稳定的（stabilizable）。</p><p>可观测性是指可以用输出的量测及计算得到状态变量的值，若一个状态变量是不可观测的，表示无法确认此一状态是否稳定，也就无法用此状态来稳定整个系统。若一系统中所有不可控制的观测变量都是稳定的，则此系统称为可检测的（detectable）。</p><h2 id="控制规格"><a href="#控制规格" class="headerlink" title="控制规格"></a>控制规格</h2><p>在控制原理的基础下，已发展出许多不同的控制策略，从非常通用的（PID控制器），到针对特殊系统的控制，尤其是机器人或是航空器的巡航定速控制。</p><p>一个控制问题会有许多的规格，其中稳定性是必要条件的，不论系统开环稳定性如何，控制器需确保在闭环下是稳定的。性能不佳或是调整不当的控制器可能使系统变的不稳定，甚至可能比开环还要不稳定，这是应尽量要避免的。</p><h2 id="模型识别及鲁棒性"><a href="#模型识别及鲁棒性" class="headerlink" title="模型识别及鲁棒性"></a>模型识别及鲁棒性</h2><p>控制系统一定会有一定程度的鲁棒性。控制器一般是依照一个假设的受控系统模组再进行设计，鲁棒性是指一控制器配合的受控系统和原来假设的系统有一点不同，控制器的特性不会有太大的变化。这个规格在实际的控制器中相当重要，因为很少实际系统会完全符合描述它的微分方程，在选择系统数学模型时，一般会进行简化，否则数学模型会非常复杂，甚至无法求得一个完整的模型。</p><h1 id="系统分类"><a href="#系统分类" class="headerlink" title="系统分类"></a>系统分类</h1><h2 id="线性系统控制"><a href="#线性系统控制" class="headerlink" title="线性系统控制"></a>线性系统控制</h2><p>针对MIMO的系统，极点的指定可以用开环系统的状态空间，再将极点放在指定位置，计算对应的回授矩阵。若在复杂的系统中，上述的程序需要用电脑辅助计算才能达到，而且不保证其鲁棒性。而且一般而言无法量到所有的系统状态，在极点指定的设计时需加入观测器（observer）的设计。</p><h2 id="非线性系统控制"><a href="#非线性系统控制" class="headerlink" title="非线性系统控制"></a>非线性系统控制</h2><p>像机器人学及航天产业中的程序一般都有高度非线性的动态，在控制理论中有时可以用线性化的方式转换为线性系统，再依线性系统的方式控制。但有时需要用一些可以配合非线性系统使用的非线性控制理论，例如回授线性化、反推控制、滑动模式控制等。轨迹线性化控制一般利用李亚普诺夫稳定性的基础。微分几何用做为一数学工具，将许多广为人知的线性控制概念扩展到非线性控制中，但其中又有其微妙之处，因此变成一个更有挑战性的问题。</p><h2 id="分散式系统"><a href="#分散式系统" class="headerlink" title="分散式系统"></a>分散式系统</h2><p>分散控制系统是指一个系统由多个控制器来控制。分散控制有几个好处，例如可以控制一个位在广大地理区域的系统，各控制器之间可以用通讯网络彼此交换资料，并协调彼此的行动。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">控制理论</a>,by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/34908368" target="_blank" rel="noopener">「珂学原理」精选：经典控制和现代控制理论有何本质区别？</a>,by 王珂.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%8F%98%E6%8D%A2" target="_blank" rel="noopener">拉普拉斯变换</a>,by wikipedia.</li><li><a href="https://huangwang.github.io/2019/02/09/PID%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/">PID控制算法原理分析</a>,by jackhuang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;控制理论是工程学与数学的跨领域分支，主要处理在有输入信号的动力系统的行为。系统的外部输入称为“参考值”，系统中的一个或多个变量需随着参考值变化，控制器处理系统的输入，使系统输出得到预期的效果。&lt;/p&gt;
&lt;p&gt;控制理论一般的目的是借由控制器的动作让系统稳定，也就是系统维持在设
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="控制理论" scheme="https://huangwang.github.io/tags/%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>ROS中Package安装方法</title>
    <link href="https://huangwang.github.io/2019/06/08/ROS%E4%B8%ADPackage%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/06/08/ROS中Package安装方法/</id>
    <published>2019-06-08T13:41:08.000Z</published>
    <updated>2019-06-08T13:50:37.297Z</updated>
    
    <content type="html"><![CDATA[<p>ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理，它也提供一些工具和库用于获取、建立、编写和执行多机融合的程序。</p><p>ROS的Package资源非常丰富，官方库中就有两千多Package，这对扩充ROS的功能十分重要。下面即介绍ROS中Package的安装方法，主要分成两种方法：</p><h1 id="Deb安装方式"><a href="#Deb安装方式" class="headerlink" title="Deb安装方式"></a>Deb安装方式</h1><p>deb方式安装方法十分简单，根据ROS版本，直接运行apt-get命令，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ros-kinetic-camera-calibration</span><br></pre></td></tr></table></figure><h1 id="源码安装方式"><a href="#源码安装方式" class="headerlink" title="源码安装方式"></a>源码安装方式</h1><p>源码安装方式稍微复杂，安装方法如下：</p><ol><li>创建catkin工作空间</li><li>在catkin工作空间的src文件夹下，下载ROS的Package源代码</li><li>使用catkin build命令编译安装</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zybuluo.com/ferstar/note/214495" target="_blank" rel="noopener">安装ROS软件包</a>,by ferstar.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="ROS" scheme="https://huangwang.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS编译命令catkin简析</title>
    <link href="https://huangwang.github.io/2019/06/06/ROS%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4catkin%E7%AE%80%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/06/06/ROS编译命令catkin简析/</id>
    <published>2019-06-06T13:47:21.000Z</published>
    <updated>2019-06-06T14:04:41.817Z</updated>
    
    <content type="html"><![CDATA[<p>目前编译ROS的Package有两种方法：</p><ul><li>catkin_make</li><li>catkin build</li></ul><h1 id="catkin-make"><a href="#catkin-make" class="headerlink" title="catkin_make"></a>catkin_make</h1><p>catkin_make 是一个命令行工具，它简化了catkin的标准工作流程。你可以认为catkin_make是在CMake标准工作流程中依次调用了cmake 和 make。</p><p>使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在catkin工作空间下</span><br><span class="line">$ catkin_make [make_targets] [-DCMAKE_VARIABLES=...]</span><br></pre></td></tr></table></figure><h1 id="catkin"><a href="#catkin" class="headerlink" title="catkin"></a>catkin</h1><p>catkin是一个用于处理catkin元构建系统和catkin工作区的命令行工具。其用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">`catkin VERB -h` for help on each verb listed below:</span><br><span class="line">  </span><br><span class="line">    buildBuilds a catkin workspace.</span><br><span class="line">    cleanDeletes various products of the build verb.</span><br><span class="line">    configConfigures a catkin workspace&apos;s context.</span><br><span class="line">    createCreates catkin workspace resources like packages.</span><br><span class="line">    env        Run an arbitrary command in a modified environment. </span><br><span class="line">    initInitializes a given folder as a catkin workspace.</span><br><span class="line">    listLists catkin packages in the workspace or other arbitray folders.</span><br><span class="line">    locateGet the paths to various locations in a workspace.</span><br><span class="line">    profileManage config profiles for a catkin workspace.</span><br></pre></td></tr></table></figure><p>同样可使用catkin build命令编译ROS的package。</p><h1 id="catkin-make与catkin-build的区别"><a href="#catkin-make与catkin-build的区别" class="headerlink" title="catkin_make与catkin build的区别"></a>catkin_make与catkin build的区别</h1><p>与catkin_make不同，catkin命令行工具不仅仅是围绕cmake和make命令的瘦包装器。 catkin build命令隔离地在工作空间的源空间中构建每个包，以防止构建时串扰。 因此，在其最简单的用法中，catkin构建的行为类似于catkin_make_isolated的并行化版本。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://catkin-tools.readthedocs.io/en/latest/migration.html" target="_blank" rel="noopener">Migrating from catkin_make</a>,by catkin_tools homepage.</li><li><a href="http://wiki.ros.org/cn/ROS/Tutorials/BuildingPackages" target="_blank" rel="noopener">编译ROS程序包</a>,by ros wiki.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前编译ROS的Package有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;catkin_make&lt;/li&gt;
&lt;li&gt;catkin build&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;catkin-make&quot;&gt;&lt;a href=&quot;#catkin-make&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="ROS" scheme="https://huangwang.github.io/tags/ROS/"/>
    
  </entry>
  
</feed>
