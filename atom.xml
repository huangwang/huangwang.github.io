<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-12-29T12:41:12.660Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编译原理学习笔记</title>
    <link href="https://huangwang.github.io/2019/12/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/12/29/编译原理学习笔记/</id>
    <published>2019-12-29T12:34:24.000Z</published>
    <updated>2019-12-29T12:41:12.660Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理是计算机专业的一门重要专业课，旨在介绍编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生成、存储管理、代码优化和目标代码生成。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>词法分析 </li></ul><p>从左到右逐个字符地扫描，从中识别出一个个“单词”符号。“单词”符号是程序设计语言的基本语法单位，如关键字、标识符、常数、运算符和分隔符等。</p><ul><li>语法分析 </li></ul><p>根据语言的语法规则将单词符号序列分解成各类语法单位，比如表达式、语句和程序等。语法规则就是各类语法单位的构成规则。通过语法分析确定整个输入串是否构成一个语法上正确的程序。</p><ul><li>语义分析 </li></ul><p>检查源程序是否包含静态语义错误，并收集类型信息供后面的代码生成阶段使用。只有语法和语义都正确的源程序才能被翻译成正确的目标代码。</p><p>语义分析的一个主要工作是进行类型分析和检查。程序语言中的一个数据类型一般包含两个方面的内容：类型的载体及其上的运算。例如：整除取余运算只能对整型数据进行运算，若其运算对象中有浮点数就认为是类型不匹配的错误。静态的语义错误是指编译程序可以发现，动态的语义错误是指源程序虽然能够被编译和执行，但是结果不对，一般是逻辑上的错误。</p><h1 id="编译的过程"><a href="#编译的过程" class="headerlink" title="编译的过程"></a>编译的过程</h1><p>编译程序的工作过程一般可以分为5个阶段：</p><ol><li>词法分析</li><li>语法分析</li><li>语义分析和中间代码的产生</li><li>优化</li><li>目标代码生成</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://jartto.wang/2018/11/17/about-ast/" target="_blank" rel="noopener">AST 抽象语法树</a>,by Jartto.</li><li><a href="https://blog.csdn.net/cflys/article/details/71274116" target="_blank" rel="noopener">【编译原理】编译原理简单介绍</a>,by cflys.</li><li><a href="https://github.com/junhey/softwareDesigner/wiki/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">编译原理</a>,by junhey.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编译原理是计算机专业的一门重要专业课，旨在介绍编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生成、存储管理、代码优化和目标代码生成。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
      <category term="语法" scheme="https://huangwang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>3D模型动画分类及其使用</title>
    <link href="https://huangwang.github.io/2019/12/28/3D%E6%A8%A1%E5%9E%8B%E5%8A%A8%E7%94%BB%E5%88%86%E7%B1%BB%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://huangwang.github.io/2019/12/28/3D模型动画分类及其使用/</id>
    <published>2019-12-28T12:35:32.000Z</published>
    <updated>2019-12-28T13:05:19.180Z</updated>
    
    <content type="html"><![CDATA[<p>3DMax、Blender之类的3D建模软件易学难精，其原因在于很多人不了解其背后的计算机图形学原理。因此，掌握相关的计算机图形学原理和知识，对于我们熟练运用3D建模软件是十分必要的。下面简单介绍3D模型的分类及其使用方法。</p><h1 id="3D模型动画分类"><a href="#3D模型动画分类" class="headerlink" title="3D模型动画分类"></a>3D模型动画分类</h1><blockquote><p><strong>3D模型动画的基本原理是让模型中各顶点的位置随时间变化。</strong> 主要种类有Morph（变形）动画，关节动画和骨骼蒙皮动画(SkinnedMesh)。从动画数据的角度来说，三者一般都采用关键帧技术，即只给出关键帧的数据，其他帧的数据使用插值得到。但由于这三种技术的不同，关键帧的数据是不一样的。</p></blockquote><h2 id="变形动画"><a href="#变形动画" class="headerlink" title="变形动画"></a>变形动画</h2><blockquote><p>Morph（渐变，变形）动画是直接指定动画每一帧的顶点位置，其动画关键中存储的是Mesh所有顶点在关键帧对应时刻的位置。</p></blockquote><h2 id="关节动画"><a href="#关节动画" class="headerlink" title="关节动画"></a>关节动画</h2><blockquote><p>关节动画的模型不是一个整体的Mesh,而是分成很多部分(Mesh)，通过一个父子层次结构将这些分散的Mesh组织在一起，父Mesh带动其下子Mesh的运动，各Mesh中的顶点坐标定义在自己的坐标系中，这样各个Mesh是作为一个整体参与运动的。</p><p>动画帧中设置各子Mesh相对于其父Mesh的变换（主要是旋转，当然也可包括移动和缩放），通过子到父，一级级的变换累加（当然从技术上，如果是矩阵操作是累乘）得到该Mesh在整个动画模型所在的坐标空间中的变换（从本文的视角来说就是世界坐标系了，下同），从而确定每个Mesh在世界坐标系中的位置和方向，然后以Mesh为单位渲染即可。</p><p>关节动画的问题是，各部分Mesh中的顶点是固定在其Mesh坐标系中的，这样在两个Mesh结合处就可能产生裂缝。</p></blockquote><h2 id="骨骼蒙皮动画"><a href="#骨骼蒙皮动画" class="headerlink" title="骨骼蒙皮动画"></a>骨骼蒙皮动画</h2><blockquote><p>骨骼蒙皮动画即SkinnedMesh了，骨骼蒙皮动画的出现解决了关节动画的裂缝问题。骨骼动画的基本原理可概括为：在骨骼控制下，通过顶点混合动态计算蒙皮网格的顶点，而骨骼的运动相对于其父骨骼，并由动画关键帧数据驱动。</p><p>一个骨骼动画通常包括骨骼层次结构数据，网格(Mesh)数据，网格蒙皮数据(skin info)和骨骼的动画(关键帧)数据。</p></blockquote><h3 id="SkinnedMesh原理"><a href="#SkinnedMesh原理" class="headerlink" title="SkinnedMesh原理"></a>SkinnedMesh原理</h3><blockquote><p>SkinnedMesh中文一般称作骨骼蒙皮动画，正如其名，这种动画中包含骨骼（Bone）和蒙皮(Skinned Mesh)两个部分，Bone的层次结构和关节动画类似，Mesh则和关节动画不同：</p><p>关节动画中是使用多个分散的Mesh,而Skinned Mesh中Mesh是一个整体，也就是说只有一个Mesh,实际上如果没有骨骼让Mesh运动变形，Mesh就和静态模型一样了。</p><p>Skinned Mesh技术的精华在于蒙皮，所谓的皮并不是模型的贴图（也许会有人这么想过吧），而是Mesh本身，蒙皮是指将Mesh中的顶点附着（绑定）在骨骼之上，而且每个顶点可以被多个骨骼所控制，这样在关节处的顶点由于同时受到父子骨骼的拉扯而改变位置就消除了裂缝。</p><p>Skinned Mesh这个词从字面上理解似乎是有皮的模型，哦，如果贴图是皮，那么普通静态模型不也都有吗？所以我觉得应该理解为具有蒙皮信息的Mesh或可当做皮肤用的Mesh，这个皮肤就是Mesh。而为了有皮肤功能，Mesh还需要蒙皮信息，即Skin数据，没有Skin数据就是一个普通的静态Mesh了。</p><p>Skin数据决定顶点如何绑定到骨骼上。顶点的Skin数据包括顶点受哪些骨骼影响以及这些骨骼影响该顶点时的权重(weight)，另外对于每块骨骼还需要骨骼偏移矩阵(BoneOffsetMatrix)用来将顶点从Mesh空间变换到骨骼空间。</p></blockquote><h3 id="SkinnedMesh结构"><a href="#SkinnedMesh结构" class="headerlink" title="SkinnedMesh结构"></a>SkinnedMesh结构</h3><ul><li>骨骼决定了模型整体在世界坐标系中的位置和朝向。</li></ul><blockquote><p>先看看静态模型吧，静态模型没有骨骼，我们在世界坐标系中放置静态模型时，只要指定模型自身坐标系在世界坐标系中的位置和朝向。在骨骼动画中，不是把Mesh直接放到世界坐标系中，Mesh只是作为Skin使用的，是依附于骨骼的，真正决定模型在世界坐标系中的位置和朝向的是骨骼。</p><p>在渲染静态模型时，由于模型的顶点都是定义在模型坐标系中的，所以各顶点只要经过模型坐标系到世界坐标系的变换后就可进行渲染。而对于骨骼动画，我们设置模型的位置和朝向，实际是在设置根骨骼的位置和朝向，然后根据骨骼层次结构中父子骨骼之间的变换关系计算出各个骨骼的位置和朝向，然后根据骨骼对Mesh中顶点的绑定计算出顶点在世界坐标系中的坐标，从而对顶点进行渲染。要记住，在骨骼动画中，骨骼才是模型主体，Mesh不过是一层皮，一件衣服。</p></blockquote><ul><li>骨骼可理解为一个坐标空间。</li></ul><blockquote><p>骨骼只是一个形象的说法，实际上骨骼可理解为一个坐标空间，关节可理解为骨骼坐标空间的原点。关节的位置由它在父骨骼坐标空间中的位置描述。上图中有三块骨骼，分别是上臂，前臂和两个手指。Clavicle(锁骨)是一个关节，它是上臂的原点，同样肘关节(elbow joint)是前臂的原点，腕关节(wrist)是手指骨骼的原点。关节既决定了骨骼空间的位置，又是骨骼空间的旋转和缩放中心。</p><p>骨骼就是坐标空间，骨骼层次就是嵌套的坐标空间。关节只是描述骨骼的位置即骨骼自己的坐标空间原点在其父空间中的位置，绕关节旋转是指骨骼坐标空间（包括所有子空间）自身的旋转。</p><p>但还有两个可能的疑问，一是骨骼的长度问题，由于骨骼是坐标空间，没有所谓的长度和宽度的限制，我们看到的长度一方面是蒙皮后的结果，另一方面子骨骼的原点（也就是关节）的位置往往决定了视觉上父骨骼的长度，比如这里upper arm线段的长度实际是由elbow joint的位置决定的。</p><p>第二个问题，手指的那个端点是啥啊？实际上在我们的例子中手指没有子骨骼，所以那个端点并不存在：）那是为了方便演示画上去的。实际问题中总有最下层的骨骼，他们不能决定其他骨骼了，他们的作用只剩下控制Mesh顶点。对了，那么手指的长度如何确定？我们看到的长度应该是由蒙皮决定的，也就是由Mesh中属于手指的那些点离腕关节的距离决定。</p></blockquote><h1 id="3D模型动画使用"><a href="#3D模型动画使用" class="headerlink" title="3D模型动画使用"></a>3D模型动画使用</h1><p>下面给出一段在Unity3D中控制3D模型动画的代码，作为参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"> </span><br><span class="line">public class AnimationScript : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        Animation animation = this.animation;//动画控制器</span><br><span class="line">        animation.Play(&quot;idle&quot;);//上来直接播放idle动画</span><br><span class="line">    &#125;</span><br><span class="line">    void OnGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        if (GUI.Button(new Rect(0, 0, 100, 30), &quot;行走&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;run&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (GUI.Button(new Rect(100, 0, 100, 30), &quot;停止&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;idle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (GUI.Button(new Rect(200, 0, 100, 30), &quot;攻击&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;attack&quot;);</span><br><span class="line">            animation.PlayQueued(&quot;idle&quot;);//播放完attack之后再播放idle</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://gameinstitute.qq.com/community/detail/127900" target="_blank" rel="noopener">骨骼蒙皮动画(SkinnedMesh)的原理解析</a>,by feng.</li><li><a href="https://blog.csdn.net/yongh701/article/details/73001312" target="_blank" rel="noopener">【Unity3D】3D模型的使用——FBX的使用与Animation设置</a>,by yongh701.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3DMax、Blender之类的3D建模软件易学难精，其原因在于很多人不了解其背后的计算机图形学原理。因此，掌握相关的计算机图形学原理和知识，对于我们熟练运用3D建模软件是十分必要的。下面简单介绍3D模型的分类及其使用方法。&lt;/p&gt;
&lt;h1 id=&quot;3D模型动画分类&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>GitBook入门教程</title>
    <link href="https://huangwang.github.io/2019/12/26/gitbook%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/12/26/gitbook入门教程/</id>
    <published>2019-12-26T13:44:42.000Z</published>
    <updated>2019-12-28T12:02:28.097Z</updated>
    
    <content type="html"><![CDATA[<p>GitBook是一种制作在线书籍的工具。它基于Git支持多人协作，支持将采用Markdown语法编辑的文档导出成 PDF，EPUB，HTML等多种格式。</p><h1 id="GitBook安装"><a href="#GitBook安装" class="headerlink" title="GitBook安装"></a>GitBook安装</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>NodeJS (v4.0.0 and above is recommended)</li><li>Windows, Linux, Unix, or Mac OS X</li></ul><h2 id="NPM安装GitBook"><a href="#NPM安装GitBook" class="headerlink" title="NPM安装GitBook"></a>NPM安装GitBook</h2><p>通过NPM工具安装GitBook是最佳的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-cli -g</span><br><span class="line">$ gitbook init //下载稳定版的gitbook，同时创建在线书籍</span><br></pre></td></tr></table></figure><p>gitbook-cli工具可安装多个GitBook版本到系统上。对于Windows平台，gitbook-cli工具安装的多个GitBook版本通常存储在“C:\Users\CurrentLoginUser.gitbook”。</p><h2 id="离线安装GitBook"><a href="#离线安装GitBook" class="headerlink" title="离线安装GitBook"></a>离线安装GitBook</h2><p>内网机器上安装GitBook的方法如下：</p><ul><li>安装最新Nodejs长期支持版。</li><li>使用npm-bundle命令在线打包gitbook-cli</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install npm-bundle -g</span><br><span class="line">npm-bundle gitbook-cli</span><br></pre></td></tr></table></figure><ul><li>内网机器上安装gitbook-cli</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ./gitbook-cli.tgz</span><br></pre></td></tr></table></figure><ul><li>将“C:\Users\CurrentLoginUser.gitbook”目录打包拷贝至内网机器对应位置</li></ul><h1 id="创建书籍"><a href="#创建书籍" class="headerlink" title="创建书籍"></a>创建书籍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook init    //在当前目录创建书籍</span><br><span class="line">$ gitbook build   //构建在线书籍网站</span><br><span class="line">$ gitbook serve   //构建在线书籍网站并启动</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/lu_embedded/article/details/81100704" target="_blank" rel="noopener">GitBook 从懵逼到入门</a>,by 阿基米东.</li><li><a href="https://yq.aliyun.com/articles/384086" target="_blank" rel="noopener">使用 Gitbook 打造你的电子书</a>,by 文艺小青年.</li><li><a href="https://www.icharm.me/%E4%B8%96%E4%B8%8A%E6%9C%80%E4%BD%B3%E7%A6%BB%E7%BA%BFmakedown%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7%EF%BC%88gitbook%E5%92%8Cgitbook-editor%EF%BC%89.html" target="_blank" rel="noopener">世上最佳离线markdown编辑工具（gitbook和gitbook editor）</a>,by icharm.</li><li><a href="https://blog.tedxiong.com/how_to_remove_Published_with_GitBook_in_GitBook.html" target="_blank" rel="noopener">移除GitBook目录下方的“本书使用GitBook发布”字样</a>,by tedxiong.</li><li><a href="https://www.cnblogs.com/powercto/p/6917106.html" target="_blank" rel="noopener">EbookError: Error during ebook generation: ‘ebook-convert</a>,by 狼爷.</li><li><a href="http://gitbook.wiliam.me/bookjson.html" target="_blank" rel="noopener">书籍配置文件(book.json)</a>,by wiliam.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GitBook是一种制作在线书籍的工具。它基于Git支持多人协作，支持将采用Markdown语法编辑的文档导出成 PDF，EPUB，HTML等多种格式。&lt;/p&gt;
&lt;h1 id=&quot;GitBook安装&quot;&gt;&lt;a href=&quot;#GitBook安装&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>glTF2.0格式解析</title>
    <link href="https://huangwang.github.io/2019/12/25/gltf2-0%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/12/25/gltf2-0格式解析/</id>
    <published>2019-12-25T15:13:58.000Z</published>
    <updated>2019-12-27T15:18:44.730Z</updated>
    
    <content type="html"><![CDATA[<p>glTF（GL传输格式的衍生简称）是一种使用JSON标准的3D场景和模型的文件格式。 它是Khronos Group 3D格式工作组开发的一种与API无关的运行时资产交付格式。 它在HTML5DevConf 2016上宣布。此格式旨在成为一种高效，可互操作的格式，具有最小的文件大小和应用程序对运行时的处理。 因此，其创建者将其描述为“3D JPEG”。 glTF还为3D内容工具和服务定义了一种通用的发布格式。本文旨通过对glTF2.0格式的解析，进一步加深对3D建模的理解。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>在对glTF2.0格式解析之前，应先了解一些3D建模或glTF独有的基本概念：</p><ul><li>scenes, nodes：场景的基本结构</li><li>cameras：场景的可视配置</li><li>meshes：构成3D对象的几何</li><li>buﬀers, buﬀerViews, accessors：数据参考和布局描述</li><li>materials：定义数据如何被渲染</li><li>textures, images, samplers：对象表面显示</li><li>skins：顶点蒙皮信息</li><li>animations：随时间改变的属性</li></ul><p></p><p align="center">    <img src="images/concept_relation.jpg" width="60%" alt="glTF概念之间的关系"></p><p></p><center>图1 glTF概念之间的关系</center><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/KhronosGroup/glTF" target="_blank" rel="noopener">glTF</a>,by KhronosGroup.</li><li><a href="https://en.wikipedia.org/wiki/GlTF" target="_blank" rel="noopener">glTF</a>,by wikipedia.</li><li><a href="https://www.khronos.org/files/gltf20-reference-guide.pdf" target="_blank" rel="noopener">glTF Overview</a>,by KhronosGroup.</li><li><a href="https://gameinstitute.qq.com/community/detail/127900" target="_blank" rel="noopener">骨骼蒙皮动画(SkinnedMesh)的原理解析</a>,by feng.</li><li><a href="https://blog.csdn.net/yongh701/article/details/73001312" target="_blank" rel="noopener">【Unity3D】3D模型的使用——FBX的使用与Animation设置</a>,by yongh701.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;glTF（GL传输格式的衍生简称）是一种使用JSON标准的3D场景和模型的文件格式。 它是Khronos Group 3D格式工作组开发的一种与API无关的运行时资产交付格式。 它在HTML5DevConf 2016上宣布。此格式旨在成为一种高效，可互操作的格式，具有最小的
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>jszip使用方法简介</title>
    <link href="https://huangwang.github.io/2019/12/24/jszip%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/12/24/jszip使用方法简介/</id>
    <published>2019-12-24T11:45:47.000Z</published>
    <updated>2019-12-24T12:08:07.670Z</updated>
    
    <content type="html"><![CDATA[<p>当大文件需要在网络中传输时，最好进行压缩传输，然后在终点进行解压。以ZIP压缩为例，压缩后文件大小极具减小，可节约带宽，提高系统并发能力。下面介绍使用jszip在浏览器端的解压方法。</p><h1 id="JSZip简介"><a href="#JSZip简介" class="headerlink" title="JSZip简介"></a>JSZip简介</h1><p>JSZip是一个用于创建、读取和编辑.zip文件的javascript库，有一个可爱而简单的API。JSZip支持Nodejs和浏览器端的安装使用。具体方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">With npm : npm install jszip</span><br><span class="line"></span><br><span class="line">With bower : bower install Stuk/jszip</span><br><span class="line"></span><br><span class="line">With component : component install Stuk/jszip</span><br><span class="line"></span><br><span class="line">Manually : download JSZip and include the file dist/jszip.js or dist/jszip.min.js</span><br></pre></td></tr></table></figure><h1 id="浏览器端解压zip文件"><a href="#浏览器端解压zip文件" class="headerlink" title="浏览器端解压zip文件"></a>浏览器端解压zip文件</h1><p>后端Nodejs将zip文件以二进制形式存储到数据库中。当前端需要该zip文件时，后端将zip文件以二进制形式传输到前端，前端再解压还原。</p><h2 id="Nodejs使用JSZip压缩文件"><a href="#Nodejs使用JSZip压缩文件" class="headerlink" title="Nodejs使用JSZip压缩文件"></a>Nodejs使用JSZip压缩文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var JSZip = require(&quot;jszip&quot;);</span><br><span class="line">var zip = new JSZip();</span><br><span class="line"></span><br><span class="line">// create a file</span><br><span class="line">zip.file(&quot;hello.txt&quot;, &quot;Hello[p my)6cxsw2q&quot;);</span><br><span class="line">// oops, cat on keyboard. Fixing !</span><br><span class="line">zip.file(&quot;hello.txt&quot;, &quot;Hello World\n&quot;);</span><br><span class="line"></span><br><span class="line">// create a file and a folder</span><br><span class="line">zip.file(&quot;nested/hello.txt&quot;, &quot;Hello World\n&quot;);</span><br><span class="line">// same as</span><br><span class="line">zip.folder(&quot;nested&quot;).file(&quot;hello.txt&quot;, &quot;Hello World\n&quot;);</span><br></pre></td></tr></table></figure><h2 id="浏览器端解压Zip文件"><a href="#浏览器端解压Zip文件" class="headerlink" title="浏览器端解压Zip文件"></a>浏览器端解压Zip文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import JSZip from &apos;jszip&apos;</span><br><span class="line"></span><br><span class="line">let new_zip = new JSZip();</span><br><span class="line"></span><br><span class="line">// Read zip package</span><br><span class="line">new_zip.loadAsync(content)</span><br><span class="line">.then(function(zip) &#123;</span><br><span class="line">    // you now have every files contained in the loaded zip</span><br><span class="line">    new_zip.file(&quot;hello.txt&quot;).async(&quot;string&quot;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/ZIP%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">ZIP格式</a>,by wikipedia.</li><li><a href="https://catdeacon.com/note/679.html" target="_blank" rel="noopener">gzip,bzip2,zip三种格式压缩率对比</a>,by CatDeacon.</li><li><a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">JSZip</a>,by stuk.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当大文件需要在网络中传输时，最好进行压缩传输，然后在终点进行解压。以ZIP压缩为例，压缩后文件大小极具减小，可节约带宽，提高系统并发能力。下面介绍使用jszip在浏览器端的解压方法。&lt;/p&gt;
&lt;h1 id=&quot;JSZip简介&quot;&gt;&lt;a href=&quot;#JSZip简介&quot; class
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Python第三方包离线安装</title>
    <link href="https://huangwang.github.io/2019/12/19/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
    <id>https://huangwang.github.io/2019/12/19/Python第三方包离线安装/</id>
    <published>2019-12-19T11:50:33.000Z</published>
    <updated>2019-12-19T12:41:25.872Z</updated>
    
    <content type="html"><![CDATA[<p>需要在离线的情况下，配置电脑的Python环境，具体方法如下：</p><ol><li>寻找一台与离线电脑架构一致且能上网的干净电脑或虚拟机，在线配置Python环境。</li><li>在线电脑上打包Python环境，拷贝到离线电脑上。</li><li>在离线电脑上安装Python环境。</li></ol><h1 id="在线配置Python环境"><a href="#在线配置Python环境" class="headerlink" title="在线配置Python环境"></a>在线配置Python环境</h1><p>安装Python3之后，使用如下命令安装第三方包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 临时使用清华镜像，加快Python第三方包下载速度</span><br><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple matplotlib</span><br></pre></td></tr></table></figure><p>打包安装的Python第三方包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 list #查看安装的包</span><br><span class="line">pip3 freeze &gt;requirements.txt</span><br><span class="line">pip3 install --download C:\Python37\packages -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="离线配置Python环境"><a href="#离线配置Python环境" class="headerlink" title="离线配置Python环境"></a>离线配置Python环境</h1><p>将打包好的Python环境拷贝到离线电脑后，使用如下命令安装第三方包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --no-index --find-links=C:\Python37\packages -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">pypi 镜像使用帮助</a>,by 清华大学开源软件镜像站.</li><li><a href="https://imshuai.com/python-pip-install-package-offline-tensorflow" target="_blank" rel="noopener">Python pip离线安装package方法总结（以TensorFlow为例）</a>,by 毛帅.</li><li><a href="https://blog.csdn.net/satann/article/details/72831140" target="_blank" rel="noopener">离线环境安装python第三方库</a>,by 接纳自己.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要在离线的情况下，配置电脑的Python环境，具体方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寻找一台与离线电脑架构一致且能上网的干净电脑或虚拟机，在线配置Python环境。&lt;/li&gt;
&lt;li&gt;在线电脑上打包Python环境，拷贝到离线电脑上。&lt;/li&gt;
&lt;li&gt;在离线电脑上安
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C++中Cout输出到文件</title>
    <link href="https://huangwang.github.io/2019/12/12/CPlusPlus%E4%B8%ADCout%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6/"/>
    <id>https://huangwang.github.io/2019/12/12/CPlusPlus中Cout输出到文件/</id>
    <published>2019-12-12T12:46:41.000Z</published>
    <updated>2019-12-12T12:57:07.886Z</updated>
    
    <content type="html"><![CDATA[<p>最近在调试一个C++程序时，没有报任何错误就直接退出了，Cout输出到控制台的信息没法查看，无法找到错误原因。于是想到将Cout输出重定向到文件，以便分析错误原因。具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    streambuf *psbuf,*backup;</span><br><span class="line">    ofstream file;</span><br><span class="line">    file.open(&quot;test.txt&quot;);</span><br><span class="line">    backup=cout.rdbuf();</span><br><span class="line">    psbuf=file.rdbuf();</span><br><span class="line"></span><br><span class="line">    cout.rdbuf(psbuf);//将cout输出重定向到文件</span><br><span class="line">    cout&lt;&lt; &quot;This will write to test.txt!&quot;;</span><br><span class="line"></span><br><span class="line">    cout.rdbuf(backup);//恢复cout输出重定向到终端</span><br><span class="line">    file.close();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/fly1988happy/archive/2012/04/16/2452021.html" target="_blank" rel="noopener">NULL指针、零指针、野指针</a>,by fly1988happy.</li><li><a href="https://www.w3cschool.cn/cpp/cpp-null-pointers.html" target="_blank" rel="noopener">C++ Null 指针</a>,by w3cschool.</li><li><a href="https://stackoverflow.com/questions/10150468/how-to-redirect-cin-and-cout-to-files" target="_blank" rel="noopener">How to redirect cin and cout to files?</a>,by stackoverflow.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在调试一个C++程序时，没有报任何错误就直接退出了，Cout输出到控制台的信息没法查看，无法找到错误原因。于是想到将Cout输出重定向到文件，以便分析错误原因。具体代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>红外点源目标探测仿真</title>
    <link href="https://huangwang.github.io/2019/12/11/%E7%BA%A2%E5%A4%96%E7%82%B9%E6%BA%90%E7%9B%AE%E6%A0%87%E6%8E%A2%E6%B5%8B%E4%BB%BF%E7%9C%9F/"/>
    <id>https://huangwang.github.io/2019/12/11/红外点源目标探测仿真/</id>
    <published>2019-12-11T12:47:52.000Z</published>
    <updated>2019-12-11T12:57:06.019Z</updated>
    
    <content type="html"><![CDATA[<p>红外点源目标探测仿真过程中遇到两个问题：一是哪些目标重合到一块，二是如何计算重合目标的中心和半径。这两个问题可分别通过计算图连通分量的算法和最小圆覆盖算法解决。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/wu_tongtong/article/details/79362339" target="_blank" rel="noopener">最小圆覆盖（经典算法【三点定圆）</a>,by Coco<em>T</em>.</li><li><a href="https://blog.csdn.net/EsonJohn/article/details/52403185" target="_blank" rel="noopener">利用邻接矩阵求解无向图的连通分支的个数</a>,by EsonJohn.</li><li><a href="http://blog.letow.top/2017/11/13/vector-cross-product-cal-intersection/" target="_blank" rel="noopener">使用向量叉乘判断线段是否相交并求交点</a>,by leto.</li><li><a href="https://sylvanassun.github.io/2017/07/18/2017-07-18-Graph_UndirectedGraph/" target="_blank" rel="noopener">图的那点事儿(1)-无向图</a>,by SylvanasSun.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;红外点源目标探测仿真过程中遇到两个问题：一是哪些目标重合到一块，二是如何计算重合目标的中心和半径。这两个问题可分别通过计算图连通分量的算法和最小圆覆盖算法解决。&lt;/p&gt;
&lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++矩阵的存储方法接出存储方法-行主序与列主序</title>
    <link href="https://huangwang.github.io/2019/12/11/CPlusPlus%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95%E6%8E%A5%E5%87%BA%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95-%E8%A1%8C%E4%B8%BB%E5%BA%8F%E4%B8%8E%E5%88%97%E4%B8%BB%E5%BA%8F/"/>
    <id>https://huangwang.github.io/2019/12/11/CPlusPlus矩阵的存储方法接出存储方法-行主序与列主序/</id>
    <published>2019-12-11T12:31:11.000Z</published>
    <updated>2019-12-11T13:10:17.726Z</updated>
    
    <content type="html"><![CDATA[<p>最近要设计一个C++矩阵类，涉及到矩阵元素的存储。根据矩阵元素的存储，通常分为行主序和列主序。</p><ul><li><p>行主序是指以行为优先单位，在内存中逐行存储；</p></li><li><p>列主序是指以列为优先单位，在内存中逐列存储。</p></li></ul><p>行主序与列主序的代码实现有一定的惯例，表现如下：</p><ul><li>行主序以二维数组存储，列主序以一维数组存储；</li><li>行主序以二维数组方式命名初始化参数，列主序以一维数组方式命名初始化参数；</li><li>行主序以行为单位初始化，列主序以列为单位初始化；</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jianshu.com/p/bfc8327eaad3" target="_blank" rel="noopener">OpenGL中矩阵的行主序与列主序</a>,by 天律界中子.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近要设计一个C++矩阵类，涉及到矩阵元素的存储。根据矩阵元素的存储，通常分为行主序和列主序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;行主序是指以行为优先单位，在内存中逐行存储；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;列主序是指以列为优先单位，在内存中逐列存储。&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>GSL插值函数编译链接出错解决方法</title>
    <link href="https://huangwang.github.io/2019/12/11/GSL%E6%8F%92%E5%80%BC%E5%87%BD%E6%95%B0%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/12/11/GSL插值函数编译链接出错解决方法/</id>
    <published>2019-12-11T12:14:51.000Z</published>
    <updated>2019-12-11T12:26:27.177Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows平台使用VS2017社区版将开源数学库GSL编译链接成DLL后，使用官方示例测试其插值函数。在编译链接该示例过程中报</p><blockquote><p>LNK2001: unresolved external symbol _gsl_interp_cspline</p></blockquote><p>的错误。</p><p>解决方法如下，在示例开始处定义如下宏即可。</p><blockquote><h1 id="define-GSL-DLL"><a href="#define-GSL-DLL" class="headerlink" title="define GSL_DLL"></a>define GSL_DLL</h1></blockquote><p>完整可运行示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#define GSL_DLL</span><br><span class="line"></span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;gsl/gsl_errno.h&gt;</span><br><span class="line">#include &lt;gsl/gsl_spline.h&gt;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main (void)</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line">  double xi, yi, x[10], y[10];</span><br><span class="line"></span><br><span class="line">  printf (&quot;#m=0,S=17\n&quot;);</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      x[i] = i + 0.5 * sin (i);</span><br><span class="line">      y[i] = i + cos (i * i);</span><br><span class="line">      printf (&quot;%g %g\n&quot;, x[i], y[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  printf (&quot;#m=1,S=0\n&quot;);</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    gsl_interp_accel *acc</span><br><span class="line">      = gsl_interp_accel_alloc ();</span><br><span class="line">    gsl_spline *spline</span><br><span class="line">      = gsl_spline_alloc (gsl_interp_cspline, 10);</span><br><span class="line"></span><br><span class="line">    gsl_spline_init (spline, x, y, 10);</span><br><span class="line"></span><br><span class="line">    for (xi = x[0]; xi &lt; x[9]; xi += 0.01)</span><br><span class="line">      &#123;</span><br><span class="line">        yi = gsl_spline_eval (spline, xi, acc);</span><br><span class="line">        printf (&quot;%g %g\n&quot;, xi, yi);</span><br><span class="line">      &#125;</span><br><span class="line">    gsl_spline_free (spline);</span><br><span class="line">    gsl_interp_accel_free (acc);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.gnu.org/software/gsl/doc/html/interp.html" target="_blank" rel="noopener">Interpolation</a>,by gsl homepage.</li><li><a href="https://lists.gnu.org/archive/html/help-gsl/2008-01/msg00034.html" target="_blank" rel="noopener">[Help-gsl] LNK2001: unresolved external symbol _gsl_interp_cspline</a>,by lists.gnu.org.</li><li><a href="https://lists.gnu.org/archive/html/help-gsl/2008-01/msg00036.html" target="_blank" rel="noopener">[Help-gsl] Re: LNK2001: unresolved external symbol _gsl_interp_cspline</a>,by lists.gnu.org.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Windows平台使用VS2017社区版将开源数学库GSL编译链接成DLL后，使用官方示例测试其插值函数。在编译链接该示例过程中报&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LNK2001: unresolved external symbol _gsl_interp_cs
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>企事业单位IT架构的涅槃与重生之中台</title>
    <link href="https://huangwang.github.io/2019/12/08/%E4%BC%81%E4%BA%8B%E4%B8%9A%E5%8D%95%E4%BD%8DIT%E6%9E%B6%E6%9E%84%E7%9A%84%E6%B6%85%E6%A7%83%E4%B8%8E%E9%87%8D%E7%94%9F%E4%B9%8B%E4%B8%AD%E5%8F%B0/"/>
    <id>https://huangwang.github.io/2019/12/08/企事业单位IT架构的涅槃与重生之中台/</id>
    <published>2019-12-08T14:57:15.000Z</published>
    <updated>2019-12-11T13:42:08.398Z</updated>
    
    <content type="html"><![CDATA[<p>近年来，企事业单位IT建设如火如荼，取得了很多的成果，极大地提高了企事业单位的工作效率。但同时企事业IT建设中存在的数据管理问题、业务管理问题不容忽视。在企事业单位IT建设的早期，项目之间没有整体规划，缺乏统一管理，造成数据孤岛、数据标准化缺失、数据存储杂乱、数据使用泛滥等数据管理问题，同时业务方面也存在重复建设、人亡政息、部门分割、多头管理等业务管理问题。中台架构即是针对上述问题，对企事业IT建设的涅槃和重生。</p><h1 id="中台由来"><a href="#中台由来" class="headerlink" title="中台由来"></a>中台由来</h1><p>在传统企业IT架构中，通常分成前台和后台。前台即包括各种和用户直接交互的界面，比如web页面、手机app；也包括服务端各种实时响应用户请求的业务逻辑，比如商品查询、订单系统等等。而后台并不直接面向用户，而是面向运营人员的配置管理系统，比如商品管理、物流管理、结算管理。后台为前台提供了一些简单的配置。</p><p>在企业竞争不够激烈时，这种IT架构能够满足用户需求，虽然易造成数据冗余、数据孤岛、数据杂乱等问题。而今天随着互联网的蓬勃发展，企业竞争越来越激烈，用户也越来越挑剔。只有以用户为中心，快速影响用户的需求，不断迭代和试错，才能让企事业在竞争当中立于不败，才能更加满足用户的需求。于是中台架构应运而生。</p><p>中台架构本质上是对传统前后台IT架构的重构，尤其是后台的重构。在传统的IT架构中，通常会遇到如下两类问题：</p><ul><li>一类是，许多业务需求或功能需求高度类似、通用化程度很高，但是由于没有专门的团队负责规划和开发，大量的系统重复开发、重复建设，导致复用性低、效率低、产研资源浪费、用户体验不统一。</li><li>另一类是，早期业务发展过程中，为了解决一些当下的业务问题，垂直的、个性化的业务逻辑与基础系统耦合太深，由于没有平台性质的规划，横向系统之间、上下游系统之间的交叉逻辑也非常多，这样导致在新业务、新市场的拓展过程中，系统没法直接复用，甚至没法快速迭代。</li></ul><p>这两类问题，在软件开发领域，有专门的名称，叫做“重复造轮子”和“烟囱式架构”。中台的诞生即为了避免“重复造轮子”的尴尬和“烟囱式架构”的无序发展。</p><p>中台是真正为前台而生的平台（可以是技术平台，业务能力甚至是组织机构），它存在的唯一目的就是更好的服务前台规模化创新，进而更好的响应服务引领用户，使企业真正做到自身能力与用户需求的持续对接。</p><p>中台就像是在前台与后台之间添加的⼀组“变速⻮轮”，将前台与后台的速率进行匹配，是前台与后台的桥梁。它为前台而生，易于前台使用，将后台资源顺滑流向用户，响应用户。</p><h1 id="中台价值"><a href="#中台价值" class="headerlink" title="中台价值"></a>中台价值</h1><p>中台的存在价值是为它的客户服务，比如业务中台和数据中台要快速响应前台应用的需求。中台建设的价值，在于帮助企业搭建更加适应企业数字化转型的全新IT架构。或者说，中台架构本身就是企业全新IT架构的核心内容和骨干系统，让企业IT运营更加顺畅，更能帮助企业尝试新的商业模式，完成战略转型的目的。</p><h1 id="中台构建"><a href="#中台构建" class="headerlink" title="中台构建"></a>中台构建</h1><p>根据功能和角色的不同，中台可分为：</p><ul><li>业务中台：通过各个项目的共通业务进行下沉，整合成通用的服务平台。</li><li>技术中台：为了避免研发人员重复发明轮子，向各个项目提供通用的底层框架、引擎、中间件。</li><li>数据中台：为各个项目进行各种数据采集和分析。</li><li>算法中台：为各个项目提供算法能力，比如推荐算法、搜索算法、图像识别、语音识别等等。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://juejin.im/post/5d995f82f265da5ba308389d" target="_blank" rel="noopener">漫画：什么是中台？</a>,by 程序员小灰.</li><li><a href="https://www.zhihu.com/question/57717433" target="_blank" rel="noopener">互联网公司中所谓中台是怎么定义的？</a>,by zhihu.</li><li><a href="https://insights.thoughtworks.cn/what-is-zhongtai/" target="_blank" rel="noopener">白话中台战略：中台是个什么鬼?</a>,by 王健.</li><li><a href="https://www.infoq.cn/article/7z0JSGIIxFydDYS5tWfO" target="_blank" rel="noopener">中台战略全解读（一）：中台的发展与进化</a>,by 陈新宇等.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近年来，企事业单位IT建设如火如荼，取得了很多的成果，极大地提高了企事业单位的工作效率。但同时企事业IT建设中存在的数据管理问题、业务管理问题不容忽视。在企事业单位IT建设的早期，项目之间没有整体规划，缺乏统一管理，造成数据孤岛、数据标准化缺失、数据存储杂乱、数据使用泛滥等
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>三阶魔方复原方法简介</title>
    <link href="https://huangwang.github.io/2019/11/30/%E4%B8%89%E9%98%B6%E9%AD%94%E6%96%B9%E5%A4%8D%E5%8E%9F%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/11/30/三阶魔方复原方法简介/</id>
    <published>2019-11-30T12:46:42.000Z</published>
    <updated>2019-12-02T13:44:28.404Z</updated>
    
    <content type="html"><![CDATA[<p>魔方作为家喻户晓的益智玩具，由匈牙利建筑学教授暨雕塑家鲁比克·艾尔内于1974年发明，最初的名称叫Magic Cube[2]，1980年Ideal Toys公司于贩售此玩具，并将名称改为Rubik’s Cube。下面简要介绍魔方复原的方法。</p><h1 id="魔方公式书写方式"><a href="#魔方公式书写方式" class="headerlink" title="魔方公式书写方式"></a>魔方公式书写方式</h1><p>为了记录下复原、转乱的过程或公式的步骤，会用Singmaster符号来书写（由David Singmaster发明）。书写方式如下：</p><ul><li>R(Right)、L(Left)、U(Up)、D(Down)、F(Front)、B(Back)分别代表右、左、上、下、前、后层。</li><li>若是顺时针旋转，则直接写上符号；若是逆时针旋转，则在符号后加上“’”或是“i”；若是旋转180°，则在符号后加上“2”或是“²”。</li></ul><h1 id="魔方数学方程式"><a href="#魔方数学方程式" class="headerlink" title="魔方数学方程式"></a>魔方数学方程式</h1><h2 id="变化数"><a href="#变化数" class="headerlink" title="变化数"></a>变化数</h2><p>三阶魔方的总变化数是：</p><script type="math/tex; mode=display">{\displaystyle {\frac {8!\times 3^{8}\times 12!\times 2^{12}}{2\times 2\times 3}}=43,\!252,\!003,\!274,\!489,\!856,\!000\approx 4.33\times 10^{19}}</script><p>三阶魔方总变化数的算式是这样得来：</p><ul><li><p>8个角块可以互换位置（${\displaystyle 8!}$），也可以旋转（3），但不能单独旋转一个角块，所以总共有${\displaystyle {\frac {8!\times 3^{8}}{3}}}$种变化状态。</p></li><li><p>12个边块可以互换位置（$12!$)，也可以翻转（2），但不能单独翻转一个边块（将两个面对调），也不能单独交换两边块，所以总共有${\displaystyle {\frac {12!\times 2^{12}}{2\times 2}}}$种变化状态。</p></li></ul><h2 id="上帝的数字"><a href="#上帝的数字" class="headerlink" title="上帝的数字"></a>上帝的数字</h2><p>所有的三阶魔方都可以在有限步数内复原，1982年，佛雷与辛马斯特合著的《魔方手册》定义任意的三阶魔方都可以保证最少n步复原，并称呼n为上帝的数字。在此书中，证明上帝的数字介于17~52之间。</p><p>1995年，瑞德证明上帝的数字介于20-29之间。2006年，雷杜用群论证明上界可改进为27。</p><p>2007年，计算机科学家古柏曼与他的学生用20台超级电脑花了8000个小时证明上界可改进为26。</p><p>2008年，Tomas Rokicki宣布证明了任何魔方可以在25步以内解开[22]。之后又改进为22步。</p><p>2010年，包括Tomas Rokicki和Morley Davidson等人的研究团队证明任意组合的魔方可以在20步内还原，现在上帝的数字正式定为20。</p><h1 id="魔方复原方法"><a href="#魔方复原方法" class="headerlink" title="魔方复原方法"></a>魔方复原方法</h1><p>以白色面为例，说明魔方复原的简单方法。</p><h2 id="第一步白色面的复原"><a href="#第一步白色面的复原" class="headerlink" title="第一步白色面的复原"></a>第一步白色面的复原</h2><p>第一步白色面的复原非常简单，分成两小步，如图1和图2所示。</p><p></p><p align="center">    <img src="images/good-white-cross.svg" width="40%" alt="解决白色边缘"></p><p></p><center>图1 解决白色边缘</center><p align="center">    <img src="images/solved-first-white-face.svg" width="40%" alt="解决白色角落"></p><center>图2 解决白色角落</center><p>白色面的还原比较简单，就不介绍具体步骤了。</p><h2 id="第二步中间层的复原"><a href="#第二步中间层的复原" class="headerlink" title="第二步中间层的复原"></a>第二步中间层的复原</h2><p>第二步中间层的复原分成两种情况，如图3和图4所示。</p><p></p><p align="center">    <img src="images/left.png" width="40%" alt="中间层左侧边块的复原"></p><p></p><center>U' L' U L U F U' F'</center><center>图3 中间层左侧边块的复原</center><p align="center">    <img src="images/right.png" width="40%" alt="中间层右侧边块的复原"> </p><center>U R U' R' U' F' U F</center><center>图4 中间层右侧边块的复原</center><h2 id="第三步顶层的复原"><a href="#第三步顶层的复原" class="headerlink" title="第三步顶层的复原"></a>第三步顶层的复原</h2><p>第三步最后一层的还原遇到的情况很多，目前我也没有完全搞明白，下面简单介绍最后一层复原的步骤，但并不能保证一定能复原。</p><h3 id="形成顶层十字"><a href="#形成顶层十字" class="headerlink" title="形成顶层十字"></a>形成顶层十字</h3><p></p><p align="center">    <img src="images/top-cross.png" width="40%" alt="顶层十字的复原"></p><p></p><center>F R U R' U' F'</center><center>图5 顶层十字的复原</center><p>根据顶层状态，多次使用公式F R U R’ U’ F’，以形成顶部十字。</p><h3 id="交换顶层十字边块"><a href="#交换顶层十字边块" class="headerlink" title="交换顶层十字边块"></a>交换顶层十字边块</h3><p>交换顶层边块，使其边缘颜色保持一致，如图6所示。</p><p></p><p align="center">    <img src="images/top-cross-color.png" width="60%" alt="交换顶层边块"></p><p></p><center>R U R' U R U2 R' U</center><center>图6 交换顶层边块</center><h3 id="交换顶层角块"><a href="#交换顶层角块" class="headerlink" title="交换顶层角块"></a>交换顶层角块</h3><p>现在只剩下黄色的角落，将分两个步骤进行。首先，我们必须以定位它们，在下一步骤中定向它们。</p><h4 id="定位顶层角块"><a href="#定位顶层角块" class="headerlink" title="定位顶层角块"></a>定位顶层角块</h4><p></p><p align="center">    <img src="images/cycle-yellow-corners.svg" width="60%" alt="定位顶层角块"></p><p></p><center>U R U' L' U R' U' L</center><center>图7 定位顶层角块</center><p>此算法循环上面图像上顶层的角块，但标有“OK”的前右上角将保留在原位。</p><h4 id="定向顶层角块"><a href="#定向顶层角块" class="headerlink" title="定向顶层角块"></a>定向顶层角块</h4><p>现在顶层角块都已定位，但角块颜色与周围面不一致，使用如图8所示算法一个一个旋转顶层角块。</p><p></p><p align="center">    <img src="images/orient-yellow-corners.svg" width="60%" alt="定向顶层角块"></p><p></p><center>R' D' R D</center><center>图8 定向顶层角块</center><p>首先在突出显示的右前方点，拿着你的手有一个不对准的黄色角落的立方体（见图8）。重复R’ D’ R D算法，直到这一块在它的地方与黄色贴纸。</p><p>只将一面向上转动，将另一个错误的黄色拐角移到突出显示的点，并重复R’ D’ R D算法，直到这个黄色面被解决。</p><p>移动其他未对齐的黄色边角，一个一个到标记的点，并做公式，直到所有的黄色角落都被解决。</p><h4 id="顶层最后两个角块位置对颜色不对的复原方法"><a href="#顶层最后两个角块位置对颜色不对的复原方法" class="headerlink" title="顶层最后两个角块位置对颜色不对的复原方法"></a>顶层最后两个角块位置对颜色不对的复原方法</h4><p>将色向不对的两个角放在顶层左手边位置,用公式(R;U;R’;U;R;U2;R’;)(L’;U’;L;U’;L’;U2;L;)。</p><p>做一遍如果不对的话,就再做一遍就行了.</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://cube3x3.com/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%AD%94%E6%96%B9/" target="_blank" rel="noopener">如何解决魔方 魔方</a>,by cub3x3.</li><li><a href="https://zhidao.baidu.com/question/446648519.html" target="_blank" rel="noopener">三阶魔方解法最后两个角如何复原?位置是对的只是颜色对不住？</a>,by qiuyuhanfeng.</li><li><a href="https://zh.wikipedia.org/wiki/%E9%AD%94%E6%96%B9" target="_blank" rel="noopener">魔方</a>,by wikipedia.</li><li><a href="https://site.douban.com/107925/widget/notes/4567539/note/171635813/" target="_blank" rel="noopener">暴强！！！只需7步，任何魔方6面皆可还原！</a>,by 飞天飘渺.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;魔方作为家喻户晓的益智玩具，由匈牙利建筑学教授暨雕塑家鲁比克·艾尔内于1974年发明，最初的名称叫Magic Cube[2]，1980年Ideal Toys公司于贩售此玩具，并将名称改为Rubik’s Cube。下面简要介绍魔方复原的方法。&lt;/p&gt;
&lt;h1 id=&quot;魔方公式
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="游戏" scheme="https://huangwang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Eigen入门教程</title>
    <link href="https://huangwang.github.io/2019/11/27/Eigen%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/11/27/Eigen入门教程/</id>
    <published>2019-11-27T13:50:14.000Z</published>
    <updated>2019-11-27T14:11:58.877Z</updated>
    
    <content type="html"><![CDATA[<p>Eigen是用于线性代数的C ++模板库，包括矩阵，向量，数值求解器和相关算法。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>从<a href="http://eigen.tuxfamily.org/index.php?title=Main_Page#Download" target="_blank" rel="noopener">Eigen官网</a>下载最新的Eigen版本。解压Eigen，然后使用Cmake进行配置并生成Visual Studio 15 2017的工程。打开解决方案，先生成ALL_BUILD工程，再生成INSTALL工程，则安装Eigen完毕。将在安装路径下生成Eigen的头文件。</p><p>当然也可以不编译安装，直接将Eigen源代码目录下的Eigen子目录复制到Include文件夹即可。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="运行时推断矩阵尺寸示例"><a href="#运行时推断矩阵尺寸示例" class="headerlink" title="运行时推断矩阵尺寸示例"></a>运行时推断矩阵尺寸示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Eigen/Dense&gt;</span><br><span class="line">using namespace Eigen;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  MatrixXd m = MatrixXd::Random(3,3);</span><br><span class="line">  m = (m + MatrixXd::Constant(3,3,1.2)) * 50;</span><br><span class="line">  cout &lt;&lt; &quot;m =&quot; &lt;&lt; endl &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">  VectorXd v(3);</span><br><span class="line">  v &lt;&lt; 1, 2, 3;</span><br><span class="line">  cout &lt;&lt; &quot;m * v =&quot; &lt;&lt; endl &lt;&lt; m * v &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译时确定矩阵尺寸示例"><a href="#编译时确定矩阵尺寸示例" class="headerlink" title="编译时确定矩阵尺寸示例"></a>编译时确定矩阵尺寸示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Eigen/Dense&gt;</span><br><span class="line">using namespace Eigen;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  Matrix3d m = Matrix3d::Random();</span><br><span class="line">  m = (m + Matrix3d::Constant(1.2)) * 50;</span><br><span class="line">  cout &lt;&lt; &quot;m =&quot; &lt;&lt; endl &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">  Vector3d v(1,2,3);</span><br><span class="line">  </span><br><span class="line">  cout &lt;&lt; &quot;m * v =&quot; &lt;&lt; endl &lt;&lt; m * v &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://eigen.tuxfamily.org/dox/GettingStarted.html" target="_blank" rel="noopener">Getting started</a>,by eigen home.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Eigen是用于线性代数的C ++模板库，包括矩阵，向量，数值求解器和相关算法。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;从&lt;a href=&quot;http://eigen
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>太阳位置及辐射强度等属性的计算方法</title>
    <link href="https://huangwang.github.io/2019/11/26/%E5%A4%AA%E9%98%B3%E4%BD%8D%E7%BD%AE%E5%8F%8A%E8%BE%90%E5%B0%84%E5%BC%BA%E5%BA%A6%E7%AD%89%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/11/26/太阳位置及辐射强度等属性的计算方法/</id>
    <published>2019-11-26T12:48:12.000Z</published>
    <updated>2019-11-26T13:53:30.241Z</updated>
    
    <content type="html"><![CDATA[<p>太阳位置是从地球表面观察时，太阳在天空中的位置，它是时间和地理位置两者的函数。计算给定地点和时间的太阳位置要经过下列三个步骤：</p><ul><li>计算太阳在黄道坐标系的位置</li><li>转换到赤道坐标系统</li><li>依据观测者的位置和时间，转换到地平坐标系</li></ul><h1 id="计算太阳黄道坐标的方法"><a href="#计算太阳黄道坐标的方法" class="headerlink" title="计算太阳黄道坐标的方法"></a>计算太阳黄道坐标的方法</h1><p>黄道坐标系是以黄道作基准平面的天球坐标系统，多用作研究太阳系天体运动情况之用。如图1所示。</p><p></p><p align="center">    <img src="images/Earths_orbit_and_ecliptic.png" width="80%" alt="黄道坐标系"></p><p></p><center>图1 黄道坐标系</center><p>黄道是由地球上观察太阳一年中在天球上的视运动所通过的路径，若以地球“不动”作参照的话就是太阳绕地球公转的轨道平面（黄道面）在天球上的投影。</p><p>黄道与天赤道相交于两点：春分点与秋分点（这两点称二分点）；而黄道对应的两个几何极是北黄极（在天龙座）、与南黄极 (在剑鱼座)。</p><p>在黄道上与黄道平行的小圆称黄纬，符号β，以由黄道面向北黄极方向为正值（0°至90°），向南黄极方向则为负值。垂直黄道的经度称黄经，符号为λ，由春分点起由西向东量度（0°至360°）。像赤道坐标系中的赤经一样，以春分点做为黄经的起点。</p><p>此坐标系特别适合标示太阳系内天体的位置，大多数行星（水星和冥王星除外）与许多小行星轨道平面与黄道的倾角都很小，故其黄纬值（β）都不大。</p><p>太阳黄道坐标的近似计算方法如下：</p><p>先计算与格林尼治 2000.0年1月1日中午12:00（历元）相距的日数。如果你知道儒略日，则你的叙述会如下：</p><script type="math/tex; mode=display">n = \mathrm{JD} - 2451545.0</script><p>以光行差修正太阳的平黄经，如下：</p><script type="math/tex; mode=display">L = 280.460^\circ + 0.9856474^\circ n</script><p>太阳的平近点角（实际上，是地球在轨道上绕着太阳，但是假设太阳绕着地球比较方便）如下：</p><script type="math/tex; mode=display">g = 357.528^\circ + 0.9856003^\circ n</script><p>根据需要将L和g多次加或减360°，让数值的范围调整到0°至 360°之间。</p><p>最后，太阳的黄经是：</p><script type="math/tex; mode=display">\lambda = L + 1.915^\circ \sin g + 0.020^\circ \sin 2g</script><p>太阳的黄纬是:</p><script type="math/tex; mode=display">\beta = 0</script><p>太阳的黄纬不超过0.00033，</p><p>并且从太阳到地球的距离，以天文单位度量是：</p><script type="math/tex; mode=display">R = 1.00014 - 0.01671 \cos g - 0.00014 \cos 2g</script><h1 id="计算太阳赤道坐标的方法"><a href="#计算太阳赤道坐标的方法" class="headerlink" title="计算太阳赤道坐标的方法"></a>计算太阳赤道坐标的方法</h1><p>赤道坐标系统是使用得最广泛的天球坐标系统，他的元素是:</p><ul><li>赤纬（$\delta$）</li><li>赤经（$\alpha$ ）－也记为RA</li></ul><p>他与地理坐标系统非常相似，因为两者使用相同的基准平面和相同的极点。地球的赤道在天球上的投影就称为天球赤道，相同的，地理极点在天球上的投影就是天极，如图2所示。</p><p></p><p align="center">    <img src="images/AxialTiltObliquity.png" width="80%" alt="赤道坐标系"></p><p></p><center>图2 赤道坐标系</center><p>在经过一夜或数个夜晚，就能看出来星星在天空中的位置移动了，当然，这并非恒星在天球上的运动，只是地球运动造成的。因为岁差和章动的影响，在相当长的时间间隔下所做的观测，就必须注明所使用的特殊历元，为行星、恒星、星系等等的位置做记录。现在使用的历元是J2000.0分点，稍早期使用的是B1950.0分点。</p><p>赤道坐标系统中与纬度相似的值是赤纬(缩写为Dec.)，是天体在天球赤道上方或下方的角度。与经度对应的是赤经(缩写为RA)，是与春分点的角度距离，不同于经度的是赤经以时、分、秒为单位，而非度、分、秒。</p><p>$\lambda$、$\beta$ 和 $R$ 构成太阳在黄道座标完整的位置。通过黄赤交角 $ε$ 的计算可以转换成赤道座标，计算方法如下：</p><p>赤经：</p><script type="math/tex; mode=display">\alpha = \arctan(\cos \epsilon \tan \lambda)</script><p>赤纬：</p><script type="math/tex; mode=display">\delta = \arcsin(\sin \epsilon \sin \lambda)</script><p>其中，黄赤交角不是固定不变的，它目前的值接近：</p><script type="math/tex; mode=display">\epsilon = 23.439^\circ - 0.0000004^\circ n</script><h1 id="计算太阳地平坐标的方法"><a href="#计算太阳地平坐标的方法" class="headerlink" title="计算太阳地平坐标的方法"></a>计算太阳地平坐标的方法</h1><p>地平坐标系，又作地平座标系，是天球坐标系统中的一种，以观测者所在地为中心点，所在地的地平线作为基础平面，将天球适当的分成能看见的上半球和看不见（被地球本身遮蔽）的下半球。上半球的顶点（最高点）称为天顶，下半球的顶点（最低点）称为地底。如图3所示。</p><p></p><p align="center">    <img src="images/Horizontal_coordinate_system.png" width="80%" alt="地平坐标系"></p><p></p><center>图3 地平坐标系</center><p>地平坐标系统是：</p><ul><li>高度角（Altitude, Alt）或仰角又称地平纬度，是天体和观测者所在地的地平线的夹角，有时就称为高度或海拔标高（elevation, geometric height）。</li><li>方位角（Azimuth, Az）又称地平经度，是沿着地平线测量的角度（由正北方为起点向东方测量）。</li></ul><p>因此地平坐标系有时也被称为高度/方位（Alt/Az）坐标系统。</p><p>只要知道观测者的地理坐标与时间，就可以将地平坐标转换成赤道坐标，或是反过来将赤道坐标转换成地平坐标。（纬度在北极点是+90°，在赤道是0°，南极点是-90°。）</p><p>在数学公式中，以$A$代表方位，$a$代表高度。</p><p>以$\delta$ 表示赤纬，$H$ 表示时角。 $φ$ 为观测者所在地的纬度。</p><p>赤道坐标转为地平坐标的计算方法如下：</p><script type="math/tex; mode=display">\sin a=\sin \phi \cdot \sin \delta +\cos \phi \cdot \cos \delta \cdot \cos H</script><script type="math/tex; mode=display">{\displaystyle \cos A\cdot \cos a=-\cos \phi \cdot \sin \delta +\sin \phi \cdot \cos \delta \cdot \cos H}</script><script type="math/tex; mode=display">{\displaystyle \sin A\cdot \cos a=\cos \delta \cdot \sin H}</script><p>有些人或许会试图将最后两个公式相除来加以简化，以消除$\cos a$，而只剩下$\tan A$。但是正切函数不能清楚的区别出象限，例如45°和225°是完全不同的方位，分别指向相对的东北方和西南方。</p><p>时角（HA）是天文学的名词，一个天体的时角被定义为该天体的赤经与当地的恒星时的差值。 在天文学和天文航海中，时角是在赤道坐标系中用于给出天球上点的方向的坐标之一。 一个点的时角是两个平面之间的角度：一个平面包含地轴和天顶（子午面），另一个平面是穿过该点与极点（地轴）的球面大圆切圆所形成的平面（赤经圈）。如图4所示。</p><p></p><p align="center">    <img src="images/HourAngle_Observer_en.png" width="80%" alt="时角"></p><p></p><center>图3 时角</center><p>时角由天赤道平面上的橙色箭头指示。 箭头自天球天赤道的子午面至观测目标所在面的球面大圆处结束，该球面大圆也是赤经圈<br>时角由子午线确定，遵循的规则是在子午线的东边则为负时角，在子午线的西边则为正时角，或者向西为正的360度，时角与经度的换算方法为24h = 360°。</p><p>一个天体的时角表示该天体是否通过了当地的子午圈（中天）。其数值则表示了该天体与当地子午圈的角距离，并借用时间的单位，以小时来计量（1HA = 15度）。例如，一个天体的时角是2.5HA，就表示他已经在2.5个小时之前通过当地的子午圈，并且在当地子午圈的西方37.5度的距离上。负数则表示在多少小时之后将通过当地的子午圈。当然，当时角为0时的意思就是这个天体就在当地的子午圈上。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%A4%AA%E9%99%BD%E4%BD%8D%E7%BD%AE" target="_blank" rel="noopener">太阳位置</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%84%92%E7%95%A5%E6%97%A5" target="_blank" rel="noopener">儒略日</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E9%BB%83%E9%81%93%E5%9D%90%E6%A8%99%E7%B3%BB" target="_blank" rel="noopener">黄道坐标系</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E8%B5%A4%E9%81%93%E5%9D%90%E6%A8%99%E7%B3%BB%E7%B5%B1" target="_blank" rel="noopener">赤道坐标系统</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%B9%B3%E5%9D%90%E6%A8%99%E7%B3%BB" target="_blank" rel="noopener">地平坐标系</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%99%82%E8%A7%92" target="_blank" rel="noopener">时角</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;太阳位置是从地球表面观察时，太阳在天空中的位置，它是时间和地理位置两者的函数。计算给定地点和时间的太阳位置要经过下列三个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算太阳在黄道坐标系的位置&lt;/li&gt;
&lt;li&gt;转换到赤道坐标系统&lt;/li&gt;
&lt;li&gt;依据观测者的位置和时间，转换到地平坐
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>经纬高与北天东坐标之间的转换方法</title>
    <link href="https://huangwang.github.io/2019/11/16/%E7%BB%8F%E7%BA%AC%E9%AB%98%E4%B8%8E%E5%8C%97%E5%A4%A9%E4%B8%9C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/11/16/经纬高与北天东坐标之间的转换方法/</id>
    <published>2019-11-16T15:41:38.000Z</published>
    <updated>2019-11-26T12:42:26.047Z</updated>
    
    <content type="html"><![CDATA[<p>经纬高是地理坐标系的表示方法，北天东则是一种直角坐标系。它们之间通过直角坐标系原点的经纬度联系起来，并可相互转换。下面介绍它们之间的转换方法。</p><h1 id="坐标系分类"><a href="#坐标系分类" class="headerlink" title="坐标系分类"></a>坐标系分类</h1><p>目前常用的坐标系统分成两种：地理坐标系和直角坐标系。下面分别介绍这两种坐标系。</p><h2 id="地理坐标系"><a href="#地理坐标系" class="headerlink" title="地理坐标系"></a>地理坐标系</h2><p>地理坐标系一般是指由经度、纬度和相对高度组成的坐标系，能够标示地球上的任何一个位置。经度和纬度常合称为经纬度，把球面上的经纬度显示在平面地图上需要采用某种地图投影。</p><p>地理坐标系的用途很广泛，例如天文学上常用的黄道坐标系、赤道坐标系同样也是一种地理坐标系。</p><h2 id="直角坐标系"><a href="#直角坐标系" class="headerlink" title="直角坐标系"></a>直角坐标系</h2><p>笛卡尔坐标系（英语：Cartesian coordinate system，也称直角坐标系）在数学中是一种正交坐标系，由法国数学家勒内·笛卡尔引入而有此名。</p><p>二维的直角坐标系通常由两个互相垂直的坐标轴设定，通常分别称为x-轴和 y-轴；两个坐标轴的相交点，称为原点，通常标记为O，既有“零”的意思，又是英语“Origin”的首字母。每一个轴都指向一个特定的方向。这两个不同线的坐标轴，决定了一个平面，称为xy-平面，又称为笛卡尔平面。通常两个坐标轴只要互相垂直，其指向何方对于分析问题是没有影响的，但习惯性地，x-轴被水平摆放，称为横轴，通常指向右方；y-轴被竖直摆放而称为纵轴，通常指向上方。两个坐标轴这样的位置关系，称为二维的右手坐标系，或右手系。</p><p>直角坐标系也可以推广至三维空间与高维空间 (higher dimension)。在原本的二维直角坐标系，再添加一个垂直于x-轴，y-轴的坐标轴，称为z-轴。假若，这三个坐标轴满足右手定则，则可得到三维的直角坐标系。这z-轴与x-轴，y-轴相互正交于原点。在三维空间的任何一点P，可以用直角坐标${\displaystyle (x,\ y,\ z)}$来表达其位置。</p><p>直角坐标系的用途非常广泛。例如天文学上常用的赤道直角坐标系、地平坐标系是一种直角坐标系。地心地固坐标系、北天东坐标系、北东地坐标系都是一种直角坐标系。</p><h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><p>经纬高与北天东的转换方法，通常通过地心地固坐标系作为中介进行转换。例如，经纬高转北天东，首先将经纬高转地心地固坐标系，再将地心地固坐标系转北天东坐标系。北天东转经纬高亦如此。</p><h2 id="经纬高转地心地固坐标系"><a href="#经纬高转地心地固坐标系" class="headerlink" title="经纬高转地心地固坐标系"></a>经纬高转地心地固坐标系</h2><p>地心地固坐标系的示意图如图1所示。</p><p></p><p align="center">    <img src="images/ECEF.png" width="80%" alt="地心地固坐标系"></p><p></p><center>图1 地心地固坐标系</center><h2 id="地心地固坐标系转北天东"><a href="#地心地固坐标系转北天东" class="headerlink" title="地心地固坐标系转北天东"></a>地心地固坐标系转北天东</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%BF%83%E5%9C%B0%E5%9B%BA%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">地心地固坐标系</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E6%A4%AD%E7%90%83" target="_blank" rel="noopener">地球椭球</a>,by wikipedia.</li><li><a href="http://qiancy.com/2017/01/07/datum-spheroid-parameters-equation/" target="_blank" rel="noopener">椭球体的重要参数和公式</a>,by 一灯.</li><li><a href="https://stackoverflow.com/questions/4679876/how-do-i-translate-of-lon-lat-coordinate-by-some-n-e-meters-distance-on-earth-su" target="_blank" rel="noopener">how do I translate of lon/lat coordinate by some N-E meters distance on earth surface?</a>,by stackoverflow.</li><li><a href="https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">笛卡尔坐标系</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">地理坐标系</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/liweihua0007/article/details/66970014" target="_blank" rel="noopener">ECEF坐标系</a>,by 深_蓝.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经纬高是地理坐标系的表示方法，北天东则是一种直角坐标系。它们之间通过直角坐标系原点的经纬度联系起来，并可相互转换。下面介绍它们之间的转换方法。&lt;/p&gt;
&lt;h1 id=&quot;坐标系分类&quot;&gt;&lt;a href=&quot;#坐标系分类&quot; class=&quot;headerlink&quot; title=&quot;坐标系
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>CMake使用入门教程</title>
    <link href="https://huangwang.github.io/2019/11/16/CMake%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/11/16/CMake使用入门教程/</id>
    <published>2019-11-16T14:49:15.000Z</published>
    <updated>2019-11-16T15:39:07.887Z</updated>
    
    <content type="html"><![CDATA[<p>近几年美国对中国的科技封杀十分严重，说不定哪天Windows操作系统就不让我们用了。因此，在构建C/C++项目时应考虑跨平台，哪天不让用Windows了，可以请容易的将项目移植到Linux上。不同系统平台有不同的C/C++编译器，不同编译器有不同的构建规则，针对每个平台的不同编译器编写构建规则十分复杂，幸好有CMake可简化构建规则的编写，实现一次编写，不同平台适用。下面简单介绍CMake的使用。</p><h1 id="CMake简介"><a href="#CMake简介" class="headerlink" title="CMake简介"></a>CMake简介</h1><p>代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。</p><p>Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。</p><p>Make工具有很多，例如 GNU Make ，QT 的 qmake ，微软的 MS nmake，BSD Make（pmake），Makepp，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。</p><p>CMake就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 VTK、ITK、KDE、OpenCV、OSG 等。</p><h1 id="CMake教程入门"><a href="#CMake教程入门" class="headerlink" title="CMake教程入门"></a>CMake教程入门</h1><h2 id="给工程起个名字"><a href="#给工程起个名字" class="headerlink" title="给工程起个名字"></a>给工程起个名字</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project(&lt;PROJECT-NAME&gt; [LANGUAGES] [&lt;language-name&gt;...])</span><br></pre></td></tr></table></figure><p>该指令定义工程名称。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project(UtilTool)</span><br></pre></td></tr></table></figure><h2 id="添加头文件目录INCLUDE-DIRECTORIES"><a href="#添加头文件目录INCLUDE-DIRECTORIES" class="headerlink" title="添加头文件目录INCLUDE_DIRECTORIES"></a>添加头文件目录INCLUDE_DIRECTORIES</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])</span><br></pre></td></tr></table></figure><p>它相当于g++选项中的-I参数的作用，也相当于环境变量中增加路径到CPLUS_INCLUDE_PATH变量的作用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/include)</span><br></pre></td></tr></table></figure><h2 id="添加需要链接的库文件目录LINK-DIRECTORIES"><a href="#添加需要链接的库文件目录LINK-DIRECTORIES" class="headerlink" title="添加需要链接的库文件目录LINK_DIRECTORIES"></a>添加需要链接的库文件目录LINK_DIRECTORIES</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link_directories(directory1 directory2 ...)</span><br></pre></td></tr></table></figure><p>它相当于g++命令的-L选项的作用，也相当于环境变量中增加LD_LIBRARY_PATH的路径的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/lib)</span><br></pre></td></tr></table></figure><h2 id="设置要链接的库文件的名称TARGET-LINK-LIBRARIES"><a href="#设置要链接的库文件的名称TARGET-LINK-LIBRARIES" class="headerlink" title="设置要链接的库文件的名称TARGET_LINK_LIBRARIES"></a>设置要链接的库文件的名称TARGET_LINK_LIBRARIES</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target_link_libraries(&lt;target&gt; [item1 [item2 [...]]]</span><br><span class="line">                      [[debug|optimized|general] &lt;item&gt;] ...)</span><br></pre></td></tr></table></figure><p>该指令的作用为将目标文件与库文件进行链接。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TARGET_LINK_LIBRARIES(utiltool-example utiltool)</span><br></pre></td></tr></table></figure><h2 id="为工程生成目标文件"><a href="#为工程生成目标文件" class="headerlink" title="为工程生成目标文件"></a>为工程生成目标文件</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE]</span><br><span class="line">               [EXCLUDE_FROM_ALL]</span><br><span class="line">               source1 [source2 ...])</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD_EXECUTABLE(utiltool-example examples/ConverterTest.cpp)</span><br></pre></td></tr></table></figure><h2 id="为工程生成共享库"><a href="#为工程生成共享库" class="headerlink" title="为工程生成共享库"></a>为工程生成共享库</h2><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_library(&lt;name&gt; [STATIC | SHARED | MODULE]</span><br><span class="line">            [EXCLUDE_FROM_ALL]</span><br><span class="line">            [source1] [source2] [...])</span><br></pre></td></tr></table></figure><p>该指令的主要作用就是将指定的源文件生成链接文件，然后添加到工程中去。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD_LIBRARY(utiltool SHARED $&#123;UTILTOOL_SOURCES&#125;)</span><br></pre></td></tr></table></figure><h2 id="为工程制作简单的安装脚本"><a href="#为工程制作简单的安装脚本" class="headerlink" title="为工程制作简单的安装脚本"></a>为工程制作简单的安装脚本</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">install(TARGETS targets... [EXPORT &lt;export-name&gt;]</span><br><span class="line">          [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|</span><br><span class="line">            PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]</span><br><span class="line">           [DESTINATION &lt;dir&gt;]</span><br><span class="line">           [PERMISSIONS permissions...]</span><br><span class="line">           [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">           [COMPONENT &lt;component&gt;]</span><br><span class="line">           [OPTIONAL] [NAMELINK_ONLY|NAMELINK_SKIP]</span><br><span class="line">          ] [...])</span><br></pre></td></tr></table></figure><p>该命令为一个工程生成安装规则。TARGETS格式的install命令规定了安装工程中的目标（targets）的规则。有5中可以被安装的目标文件：ARCHIVE，LIBRARY，RUNTIME，FRAMEWORK，和BUNDLE。静态链接的库文件总是被当做ARCHIVE目标。模块库总是被当做LIBRARY目标。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">install(TARGETS utiltool </span><br><span class="line">        RUNTIME DESTINATION bin</span><br><span class="line">        ARCHIVE DESTINATION lib </span><br><span class="line">        LIBRARY DESTINATION lib)</span><br><span class="line">install(FILES $&#123;UTILTOOL_HEADERS&#125; DESTINATION include)</span><br></pre></td></tr></table></figure><h2 id="为工程设置变量"><a href="#为工程设置变量" class="headerlink" title="为工程设置变量"></a>为工程设置变量</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set(&lt;variable&gt; &lt;value&gt;</span><br><span class="line">    [[CACHE &lt;type&gt; &lt;docstring&gt; [FORCE]] | PARENT_SCOPE])</span><br></pre></td></tr></table></figure><p>该指令用于给一般变量，缓存变量，环境变量赋值。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># set up versioning.</span><br><span class="line">set(BUILD_MAJOR &quot;1&quot;)</span><br><span class="line">set(BUILD_MINOR &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION $&#123;BUILD_MAJOR&#125;.$&#123;BUILD_MINOR&#125;.$&#123;BUILD_VERSION&#125;)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_HEADERS</span><br><span class="line">src/GeodeticConverter.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_SOURCES</span><br><span class="line">src/GeodeticConverter.cpp</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="为工程设置预定义宏"><a href="#为工程设置预定义宏" class="headerlink" title="为工程设置预定义宏"></a>为工程设置预定义宏</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_definitions(-DFOO -DBAR ...)</span><br></pre></td></tr></table></figure><p>该指令添加编译参数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加WIN32宏定义</span><br><span class="line">add_definitions(-DWIN32)</span><br></pre></td></tr></table></figure><h2 id="OPTION变量"><a href="#OPTION变量" class="headerlink" title="OPTION变量"></a>OPTION变量</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">option(&lt;option_variable&gt; &quot;help string describing option&quot;</span><br><span class="line">            [initial value])</span><br></pre></td></tr></table></figure><p>该指令提供一个用户可以任选的选项，可在之后由用户通过CMake的GUI或者命令行进行更改。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTION(UTILTOOL_EXAMPLES &quot;Build the examples&quot; ON)</span><br></pre></td></tr></table></figure><h1 id="完整简单示例"><a href="#完整简单示例" class="headerlink" title="完整简单示例"></a>完整简单示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># CMakeList.txt: UtilTool 的 CMake 项目，在此处包括源代码并定义</span><br><span class="line"># 项目特定的逻辑。</span><br><span class="line">#</span><br><span class="line">cmake_minimum_required (VERSION 3.8)</span><br><span class="line"></span><br><span class="line">project(UtilTool)</span><br><span class="line"></span><br><span class="line"># set up versioning.</span><br><span class="line">set(BUILD_MAJOR &quot;1&quot;)</span><br><span class="line">set(BUILD_MINOR &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION $&#123;BUILD_MAJOR&#125;.$&#123;BUILD_MINOR&#125;.$&#123;BUILD_VERSION&#125;)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/include)</span><br><span class="line"></span><br><span class="line">link_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line">link_libraries(gsl)</span><br><span class="line"></span><br><span class="line"># OS and compiler checks. </span><br><span class="line">if(UNIX)</span><br><span class="line">    # linux / normal unix</span><br><span class="line">    add_definitions(-D_LINUX)</span><br><span class="line">    if(CYGWIN)</span><br><span class="line">        # Special Cygwin stuff here</span><br><span class="line">    elseif(APPLE)</span><br><span class="line">        # Special Apple stuff here</span><br><span class="line">        remove_definitions(-D_LINUX)</span><br><span class="line">        add_definitions(-D_DARWIN)</span><br><span class="line">    endif()</span><br><span class="line">elseif(WIN32)</span><br><span class="line">    add_definitions(-DWIN32)</span><br><span class="line">    add_definitions(-D UtilTool_EXPORTS)</span><br><span class="line">    if(MINGW)</span><br><span class="line">        # Special MINGW stuff here</span><br><span class="line">    elseif(MSVC)</span><br><span class="line">        # Special MSVC stuff here</span><br><span class="line">        add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)</span><br><span class="line">    else()</span><br><span class="line">        # No idea what it is, but there&apos;s a good chance it&apos;s too weird.</span><br><span class="line">        MESSAGE( FATAL_ERROR &quot;Using unknown WIN32 compiler... NOT. Please add to build system.&quot; )</span><br><span class="line">    endif()</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_HEADERS</span><br><span class="line">src/GeodeticConverter.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_SOURCES</span><br><span class="line">src/GeodeticConverter.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># mark headers as headers...</span><br><span class="line">SET_SOURCE_FILES_PROPERTIES( $&#123;UTILTOOL_HEADERS&#125; PROPERTIES HEADER_FILE_ONLY TRUE )</span><br><span class="line"># append to sources so that dependency checks work on headers</span><br><span class="line">LIST(APPEND UTILTOOL_SOURCES $&#123;UTILTOOL_HEADERS&#125;)</span><br><span class="line"></span><br><span class="line">OPTION(UTILTOOL_SHARED &quot;Build utiltool lib as shared.&quot; ON)</span><br><span class="line">OPTION(UTILTOOL_DEP_ONLY &quot;Build for use inside other CMake projects as dependency.&quot; OFF)</span><br><span class="line"></span><br><span class="line"># 将源代码添加到此项目的共享库中。</span><br><span class="line">if(UTILTOOL_SHARED)</span><br><span class="line">    ADD_LIBRARY(utiltool SHARED $&#123;UTILTOOL_SOURCES&#125;)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"># install into configured prefix</span><br><span class="line">if(NOT UTILTOOL_DEP_ONLY)</span><br><span class="line">    install(TARGETS utiltool </span><br><span class="line">        RUNTIME DESTINATION bin</span><br><span class="line">        ARCHIVE DESTINATION lib </span><br><span class="line">        LIBRARY DESTINATION lib)</span><br><span class="line">    install(FILES $&#123;UTILTOOL_HEADERS&#125; DESTINATION include)</span><br><span class="line">else()</span><br><span class="line"></span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"># TODO: 如有需要，请添加测试并安装目标。</span><br><span class="line">OPTION(UTILTOOL_EXAMPLES &quot;Build the examples&quot; ON)</span><br><span class="line"></span><br><span class="line">if(UTILTOOL_EXAMPLES)</span><br><span class="line">    ADD_EXECUTABLE(utiltool-example examples/ConverterTest.cpp)</span><br><span class="line">    TARGET_LINK_LIBRARIES(utiltool-example utiltool)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2019/03/20/Linux%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95JSBSim/">Linux平台编译安装测试JSBSim</a>,by jackhuang.</li><li><a href="https://zhuanlan.zhihu.com/p/59450618" target="_blank" rel="noopener">干货：构建C/C++良好的工程结构</a>,by Froser.</li><li><a href="https://blog.csdn.net/yzx_zjut/article/details/80831900" target="_blank" rel="noopener">基于CMake构建系统的C++工程框架</a>,by  zhongxiao_yao.</li><li><a href="https://www.cnblogs.com/coderfenghc/archive/2012/08/12/2627561.html" target="_blank" rel="noopener">CMake 手册详解（十九）install指令</a>,by SirDigit.</li><li><a href="https://murphypei.github.io/blog/2018/10/cmake-variable" target="_blank" rel="noopener">CMake中变量总结</a>,by 拾荒志.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近几年美国对中国的科技封杀十分严重，说不定哪天Windows操作系统就不让我们用了。因此，在构建C/C++项目时应考虑跨平台，哪天不让用Windows了，可以请容易的将项目移植到Linux上。不同系统平台有不同的C/C++编译器，不同编译器有不同的构建规则，针对每个平台的不
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++常用库简介</title>
    <link href="https://huangwang.github.io/2019/11/15/CPlusCPlus%E5%B8%B8%E7%94%A8%E5%BA%93%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/11/15/CPlusCPlus常用库简介/</id>
    <published>2019-11-15T13:48:55.000Z</published>
    <updated>2019-11-17T03:37:31.765Z</updated>
    
    <content type="html"><![CDATA[<p>为熟练使用C++创建项目，应掌握常用的C++库。现总结常用的C++库如下：</p><h1 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h1><h2 id="gsl（GNU-Scientific-Library）-GUN科学运算库"><a href="#gsl（GNU-Scientific-Library）-GUN科学运算库" class="headerlink" title="gsl（GNU Scientific Library）:GUN科学运算库"></a>gsl（GNU Scientific Library）:GUN科学运算库</h2><h2 id="Blitz-高效率的数值计算函数库"><a href="#Blitz-高效率的数值计算函数库" class="headerlink" title="Blitz++:高效率的数值计算函数库"></a>Blitz++:高效率的数值计算函数库</h2><p>它的设计目的是希望建立一套既具像C++ 一样方便，同时又比Fortran速度更快的数值计算环境。通常，用C++所写出的数值程序， 比 Fortran慢20%左右，因此Blitz++正是要改掉这个缺点。方法是利用C++的template 技术，程序执行甚至可以比Fortran更快。</p><h2 id="MTL-Matrix-Template-Library-矩阵模板库"><a href="#MTL-Matrix-Template-Library-矩阵模板库" class="headerlink" title="MTL(Matrix Template Library):矩阵模板库"></a>MTL(Matrix Template Library):矩阵模板库</h2><p>专注于线性代数相关的计算任务，如各种形式矩阵的生成(对角，共轭，稀疏，对称等)，相关的计算，变换，以及与一维向量的运算。</p><h2 id="POOMA"><a href="#POOMA" class="headerlink" title="POOMA"></a>POOMA</h2><p>一个免费的高性能的C++库，用于处理并行式科学计算。POOMA的面向对象设计方便了快速的程 序开发，对并行机器进行了优化以达到最高的效率，方便在工业和研究环境中使用。</p><h2 id="CGAL：计算几何算法库"><a href="#CGAL：计算几何算法库" class="headerlink" title="CGAL：计算几何算法库"></a>CGAL：计算几何算法库</h2><p>Computational Geometry Algorithms Library的目的是把在计 算几何方面的大部分重要的解决方案和方法以C++库的形式提供给工业和学术界的用户。<br>是一个大型C + +库的几何数据结构和算法，如Delaunay三角网，网格生成，布尔运算的多边形，以及各种几何处理算法。 CGAL是用来在各个领域：计算机图形学，科学可视化，计算机辅助设计与建模，地理信息系统，分子生物学，医学影像学，机器人学和运动规划，和数值方法。</p><h2 id="Matlab的开源高仿-Octave"><a href="#Matlab的开源高仿-Octave" class="headerlink" title="Matlab的开源高仿 Octave"></a>Matlab的开源高仿 Octave</h2><p>旨在解决线性和非线性的数值计算问题。也是跨平台的，源码中用了大量m4语言。</p><h2 id="C-符号计算库-GiNaC"><a href="#C-符号计算库-GiNaC" class="headerlink" title="C++符号计算库 GiNaC"></a>C++符号计算库 GiNaC</h2><h2 id="Eigen-目前较活跃"><a href="#Eigen-目前较活跃" class="headerlink" title="Eigen -目前较活跃"></a>Eigen -目前较活跃</h2><p>线性代数、矩阵、向量操作等运算的C++库。推荐使用。</p><h2 id="C-C-数值计算库-mygsl"><a href="#C-C-数值计算库-mygsl" class="headerlink" title="C/C++数值计算库 mygsl"></a>C/C++数值计算库 mygsl</h2><p>mygsl是一个基于GSL库的个性化开源数值计算项目.</p><h2 id="IMSL"><a href="#IMSL" class="headerlink" title="IMSL"></a>IMSL</h2><p>软件名称 IMSL C Numerical Library(不兼容vc6 编译器)。</p><p>分为统计库和数学库两部分。数学库包含应用数学和特殊函数。IMSL 程序库已成为数值分析解决方案的工业标准。 IMSL 程序库提供最完整与最值得信赖的函数库。 IMSL 数值程序库提供目前世界上最广泛被使用的 IMSL 算法，有超过 370 验证过、最正确与 thread-safe 的数学与统计程序。 IMSL FORTRAN 程序库提供新一代以 FORTRAN 90 为程序库基础的程序，能展现出最佳化的演算法能力应用于多处理器与其它高效能运算系统。</p><h1 id="网络库"><a href="#网络库" class="headerlink" title="网络库"></a>网络库</h1><h2 id="ACE"><a href="#ACE" class="headerlink" title="ACE"></a>ACE</h2><p>庞大、复杂，适合大型项目。开源、免费，不依赖第三方库，支持跨平台。</p><h2 id="Asio"><a href="#Asio" class="headerlink" title="Asio"></a>Asio</h2><p>Asio基于Boost开发的异步IO库，封装了Socket，简化基于socket程序的开发。</p><p>开源、免费，支持跨平台。</p><h2 id="POCO"><a href="#POCO" class="headerlink" title="POCO"></a>POCO</h2><p>POCO C++ Libraries 提供一套 C++ 的类库用以开发基于网络的可移植的应用程序，功能涉及线程、线程同步、文件系统访问、流操作、共享库和类加载、套接字以及网络协议包括：HTTP、 FTP、SMTP 等；其本身还包含一个 HTTP 服务器，提供 XML 的解析和 SQL 数据库的访问接口。POCO库的模块化、高效的设计及实现使得POCO特别适合嵌入式开发。在嵌入式开发领域，由于C++既适合底层（设备I/O、中断处理等）和高层面向对象开发，越来越流行。</p><h2 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h2><p>Libevent是一个轻量级的开源高性能网络库，从它的官网标题：libevent-an event notification library就能知道它的机制是采用事件触发，封装了以下三种事件的响应:IO事件,定时器事件,信号事件。select模型来实现跨平台的操作，Windows环境下支持IOCP。Google的开源WEB浏览器Chromium在Mac和Linux版本中，也使用了Libevent，足见该库的质量。</p><h2 id="libev"><a href="#libev" class="headerlink" title="libev"></a>libev</h2><p>libev和libevent很像，按照作者的介绍，可以作为libevent的替代者，能够提供更高的性能。</p><p>libev是一个高性能事件循环，所实现的功能就是一个强大的reactor。</p><h2 id="c-sockets-library"><a href="#c-sockets-library" class="headerlink" title="c++ sockets library"></a>c++ sockets library</h2><p>封装了sockets C API的C++类库。</p><p>支持SSL, IPv6, tcp 和 udp sockets, sctp sockets, http协议, 高度可定制的错误处理。</p><h2 id="libcurl"><a href="#libcurl" class="headerlink" title="libcurl"></a>libcurl</h2><p>libcurl是免费的轻量级的客户端网络库，支持DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet, TFTP. 支持SSL, HTTP POST, HTTP PUT, FTP上传, HTTP form上传，代理，cookies, 用户名与密码认证。</p><p>如果你开发的是客户端，libcurl是一个不错的选择。</p><h2 id="clsocket"><a href="#clsocket" class="headerlink" title="clsocket"></a>clsocket</h2><p>clsocket是一组轻量级的类，允许开发人员实现基于IP的网络程序。这个编译简单而且用起来也简单，推荐使用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jianshu.com/p/2ba19ad64211" target="_blank" rel="noopener">C++数学库</a>,by xigua1234.</li><li><a href="https://blog.csdn.net/SSYITwin/article/details/83016844" target="_blank" rel="noopener">c++中关于M_PI，M_E的解释和使用，以及参考值</a>,by SYITwin.</li><li><a href="https://github.com/ampl/gsl" target="_blank" rel="noopener">GSL with CMake build support</a>,by ampl.</li><li><a href="https://th0masxu.gq/index.php/archives/224" target="_blank" rel="noopener">在Visual Studio中使用GNU Scientific Library (GSL)</a>,by NULL_BOT.</li><li><a href="https://blog.csdn.net/weiwangchao_/article/details/8730199" target="_blank" rel="noopener">开源免费的C/C++网络库(c/c++ sockets library) 七剑下天山</a>,by 工程师WWW.</li><li><a href="https://www.jianshu.com/p/ee5b34870eba" target="_blank" rel="noopener">值得推荐的C/C++框架和库 (真的很强大)</a>,by tibet889.</li><li><a href="https://zhuanlan.zhihu.com/p/71707672" target="_blank" rel="noopener">有哪些值得推荐的c/c++开源框架与库</a>,by 零声学院.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为熟练使用C++创建项目，应掌握常用的C++库。现总结常用的C++库如下：&lt;/p&gt;
&lt;h1 id=&quot;数学库&quot;&gt;&lt;a href=&quot;#数学库&quot; class=&quot;headerlink&quot; title=&quot;数学库&quot;&gt;&lt;/a&gt;数学库&lt;/h1&gt;&lt;h2 id=&quot;gsl（GNU-Scientif
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Web应用压力测试方法</title>
    <link href="https://huangwang.github.io/2019/11/12/Web%E5%BA%94%E7%94%A8%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/11/12/Web应用压力测试方法/</id>
    <published>2019-11-12T10:26:50.000Z</published>
    <updated>2019-11-25T14:02:25.983Z</updated>
    
    <content type="html"><![CDATA[<p>Web应用在部署前，最好进行压力测试，以衡量其是否达到设计指标，判断其在何种极限条件下应用功能会失效。下面即介绍软件测试中压力测试，尤其是Web应用压力测试的相关知识。</p><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p>压力测试（英语：Stress testing）是针对特定系统或是组件，为要确认其稳定性而特意进行的严格测试。会让系统在超过正常使用条件下运作，然后再确认其结果。进行压力测试的原因可能包括：</p><ul><li>确认系统在什么条件下会损坏，以及安全使用条件。</li><li>确认预测系统在什么条件下会损坏或其安全使用条件的数学模型是否准确。</li><li>确认是否符合预期的规格。</li><li>确认失效原因。</li><li>确认系统在正常工作条件以外，是否可以正常运作。</li></ul><p>软件测试中的压力测试是在超过正常运作条件以外的条件下运作系统，以确认健壮性的方式。压力测试对于关键任务软件格外的重要，但可以适用于各种的软件。压力测试一般较强调软件在高负载下的健壮性、可用性及异常处理，以及哪些在一般使用环境下算是正常行为。</p><p>例如一个网站设计容量是100个人同时点击，压力测试就要是采用120个同时点击的条件测试。</p><h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>web应用的性能指标主要有响应时间，吞吐量，并发量，性能计数器。</p><h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><p>响应时间指应用执行一个操作需要的时间，即从发出请求到最后收到响应数据所需要的时间。例如：打开一个网站的响应时间、数据库查询一条记录（有索引）的响应时间等等。</p><p>实践中通常采用的办法是重复请求，比如一个请求操作重复执行1万次，测试一万次执行的总响应时间之和，然后除以1万，就得到单次请求的响应时间。</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>吞吐量指单位时间内系统处理的请求数量，体现系统的整体处理能力。对于网站，可用“请求数/秒”、“页面数/秒”或“访问人数/天”、“处理业务数/小时”等来衡量。重要指标有TPS(每秒处理的事物数)、QPS(每秒查询的请求数)、HPS（每秒HTTP请求数）等。</p><h2 id="并发量"><a href="#并发量" class="headerlink" title="并发量"></a>并发量</h2><p>并发量指系统能够同时处理的请求的数目，这个数字反映了系统的负载性能。对于网站而言，并发数指网站用户同时提交请求的用户数目。</p><h2 id="性能计数器"><a href="#性能计数器" class="headerlink" title="性能计数器"></a>性能计数器</h2><p>性能计数器描述服务器或操作系统性能的一些数据指标。如System Load、对象与线程数、内存使用、CPU使用、磁盘与网络I/O等使用情况。通过对这些指标设置报警阈值，当监控系统发现性能计数器超过阈值时，就向开发人员和运维报警，及时发现异常并处理。</p><h1 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h1><p>压力测试工具有http_load、apache ab、siege。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">压力测试</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6_(%E8%BB%9F%E9%AB%94" target="_blank" rel="noopener">压力测试 (软件)</a>),by wikipedia.</li><li><a href="https://www.cnblogs.com/sunshineliulu/p/7509810.html" target="_blank" rel="noopener">网站性能测试指标及网站压力测试</a>,by 呦呦鹿鸣.</li><li><a href="https://juejin.im/entry/5913d544da2f600064deb31d" target="_blank" rel="noopener">Web 性能压测工具 ApacheBench（ab）使用总结</a>,by juejin.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Web应用在部署前，最好进行压力测试，以衡量其是否达到设计指标，判断其在何种极限条件下应用功能会失效。下面即介绍软件测试中压力测试，尤其是Web应用压力测试的相关知识。&lt;/p&gt;
&lt;h1 id=&quot;压力测试&quot;&gt;&lt;a href=&quot;#压力测试&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Axios请求超时处理方法</title>
    <link href="https://huangwang.github.io/2019/11/11/Axios%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/11/11/Axios请求超时处理方法/</id>
    <published>2019-11-11T12:30:30.000Z</published>
    <updated>2019-11-11T12:52:36.785Z</updated>
    
    <content type="html"><![CDATA[<p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。Vue2官方推荐使用Axios执行HTTP请求和处理HTTP响应。Axios具有如下特征：</p><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><p>下面介绍使用Axios的拦截功能实现Axios超时错误的统一处理。</p><h1 id="Axios基本用法"><a href="#Axios基本用法" class="headerlink" title="Axios基本用法"></a>Axios基本用法</h1><p>执行 GET 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 为给定 ID 的 user 创建请求</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// 可选地，上面的请求可以这样做</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行 POST 请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;,</span><br><span class="line">    lastName: &apos;Flintstone&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345/permissions&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // 两个请求现在都执行完成</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h1 id="Axios拦截器"><a href="#Axios拦截器" class="headerlink" title="Axios拦截器"></a>Axios拦截器</h1><p>自定义 axios 实例添加拦截器，在请求或响应被 then 或 catch 处理前拦截它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// create an axios instance</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url</span><br><span class="line">  // withCredentials: true, // send cookies when cross-domain requests</span><br><span class="line">  timeout: 5000 // request timeout</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 添加请求拦截器</span><br><span class="line">service.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// 添加响应拦截器</span><br><span class="line">service.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="拦截timeout错误"><a href="#拦截timeout错误" class="headerlink" title="拦截timeout错误"></a>拦截timeout错误</h1><p>在Axios响应拦截器中，处理timeout错误，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    if(error.message.includes(&apos;timeout&apos;))&#123;   // 判断请求异常信息中是否含有超时timeout字符串</span><br><span class="line">      console.log(&quot;错误回调&quot;, error);</span><br><span class="line">      alert(&quot;网络超时&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">Axios使用说明</a>,by yunye.</li><li><a href="https://www.cnblogs.com/hcxy/p/10052465.html" target="_blank" rel="noopener">axios超时timeout拦截</a>,by 亲爱的混蛋.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。Vue2官方推荐使用Axios执行HTTP请求和处理HTTP响应。Axios具有如下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从浏览器中创建 XMLHttpRequests&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>C++标准模板库STL入门</title>
    <link href="https://huangwang.github.io/2019/11/10/CPlusPlus%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/11/10/CPlusPlus标准模板库STL入门/</id>
    <published>2019-11-10T04:26:15.000Z</published>
    <updated>2019-11-10T09:53:15.433Z</updated>
    
    <content type="html"><![CDATA[<p>最近C++编程中需要管理多个由同一个类实例化的对象，于是想到了C++的标准模板库STL，在此将STL的相关知识记录一下。</p><h1 id="STL的来龙去脉"><a href="#STL的来龙去脉" class="headerlink" title="STL的来龙去脉"></a>STL的来龙去脉</h1><p>STL 历史可以追溯到 1972 年 C 语言在 UNIX 计算机上的首次使用。直到 1994 年，STL 才被正式纳入 C++ 标准中。</p><p>标准模板库（STL）是 C ++编程语言的软件库，影响了C ++标准库的许多部分。它提供了四个组件，分别称为<strong>算法，容器，仿函数和迭代器</strong>。</p><p>STL为 C ++提供了一组通用类，例如容器和关联数组，可以与任何内置类型和支持某些基本操作（例如复制和赋值）的任何用户定义类型一起使用。 STL算法独立于容器，从而大大降低了库的复杂性。</p><p>STL通过使用模板来实现其结果。这种方法提供的编译时多态性通常比传统的运行时多态性更有效。对现代 C ++编译器进行了调整，以最大程度地减少由于大量使用STL而引起的抽象损失。</p><p>STL是创建的第一个C ++通用算法和数据结构库，它牢记四个想法：通用编程，不损失效率的抽象性，冯·诺依曼计算模型和值语义。</p><h1 id="STL-组件"><a href="#STL-组件" class="headerlink" title="STL 组件"></a>STL 组件</h1><p>STL 将“在数据上执行的操作”与“要执行操作的数据分开”，分别以如下概念指代：</p><ul><li>容器：包含、放置数据的地方。</li><li>迭代器：在容器中指出一个位置、或成对使用以划定一个区域，用来限定操作所涉及到的数据范围。</li><li>算法：要执行的操作。</li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器即用来存储并管理某类对象的集合。例如鱼缸是用来盛放金鱼的容器。标准模板库中容器主要分为序列容器（sequence containers）与关系容器（associative containers）。</p><p>序列容器包括：</p><ul><li>vector</li><li>list</li><li>forward_list</li><li>deque</li><li>array</li></ul><p>关联容器包括：</p><ul><li>set</li><li>multiset</li><li>map</li><li>multimap</li><li>unordered_set</li><li>unordered_multiset</li><li>unordered_map</li><li>unordered_multimap</li></ul><p>其他类型的容器包括：</p><ul><li>bitset</li><li>valarray</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器用于在一个对象群集的元素上进行遍历动作。对象群集可能是容器，也可能是容器的一部分。</p><p>迭代器的主要用途是为容器提供一组很小的公共接口。利用这个接口，某项操作可以行进至群集内的下一个元素。</p><p>每种容器都提供了各自的迭代器。迭代器了解该容器的内部结构，所以能够正确行进。迭代器的接口和一般指针类似。</p><p>迭代器的作用就是提供一个遍历容器内部所有元素的接口，因此迭代器的内部必须保存一个与容器相关联的指针，然后重载各种运算操作来方便遍历，其中最重要的就是∗运算符和-&gt;运算符，以及++，–等可能需要的运算符重载。</p><p>根据迭代器的操作方式的不同，迭代器分为五种：</p><ul><li>输入迭代器</li><li>输出迭代器</li><li>前向迭代器</li><li>双向迭代器</li><li>随机访问迭代器</li></ul><p>迭代器的示例代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; v;        // 定义一个vector容器</span><br><span class="line"></span><br><span class="line">    v.push_back(1);        // 向容器中添加3个元素</span><br><span class="line">    v.push_back(2);</span><br><span class="line">    v.push_back(3);</span><br><span class="line"></span><br><span class="line">    // 遍历向量的元素</span><br><span class="line">    vector&lt;int&gt;::iterator b = v.begin();        // 指向容器的第一个元素</span><br><span class="line">    vector&lt;int&gt;::iterator e = v.end();            // 指向容器尾元素的下一个位置</span><br><span class="line"></span><br><span class="line">    // C++11新标准的写法, auto关键字为类型推断，由编译器自动完成</span><br><span class="line">    // auto b = v.begin();</span><br><span class="line">    // auto e = v.end();</span><br><span class="line"></span><br><span class="line">    for (vector&lt;int&gt;::iterator iter = b; iter != e; ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *iter &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法用来处理群集内的元素，可以出于不同目的搜寻、排序、修改、使用那些元素。所有容器的迭代器都提供一致的接口，通过迭代器的协助，算法程序可以用于任意容器。</p><p>STL 的一个特性是将数据和操作分离。数据由容器类别加以管理，操作则由可定制的算法定义。迭代器在两者之间充当“粘合剂”，以使算法可以和容器交互运作。</p><p>STL 的另一个特性即组件可以针对任意型别运作。“标准模板库”这一名称即表示“可接受任意型别”的模板，并且这些型别均可执行必要操作。</p><h2 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h2><p>STL中大量运用了仿函数。仿函数具有泛型编程强大的威力，是纯粹抽象概念的例证。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://c.biancheng.net/stl/" target="_blank" rel="noopener">STL教程：C++ STL快速入门</a>,by C语言中文网.</li><li><a href="http://c.biancheng.net/view/1436.html" target="_blank" rel="noopener">STL是什么（STL简介）</a>,by C语言中文网.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93" target="_blank" rel="noopener">标准模板库</a>,by wikipedia.</li><li><a href="https://www.jianshu.com/p/77d0dd2fa3ee" target="_blank" rel="noopener">C++ STL初识及整理</a>,by thinkChao.</li><li><a href="https://blog.csdn.net/wutao1530663/article/details/64922389" target="_blank" rel="noopener">C++标准模板库(STL)迭代器的原理与实现</a>,by wutao02.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近C++编程中需要管理多个由同一个类实例化的对象，于是想到了C++的标准模板库STL，在此将STL的相关知识记录一下。&lt;/p&gt;
&lt;h1 id=&quot;STL的来龙去脉&quot;&gt;&lt;a href=&quot;#STL的来龙去脉&quot; class=&quot;headerlink&quot; title=&quot;STL的来龙去脉
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
</feed>
