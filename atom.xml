<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-05-27T09:18:36.542Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>光线追踪基本概念入门</title>
    <link href="https://huangwang.github.io/2019/05/26/%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/05/26/光线追踪基本概念入门/</id>
    <published>2019-05-26T14:16:23.000Z</published>
    <updated>2019-05-27T09:18:36.542Z</updated>
    
    <content type="html"><![CDATA[<p>光线追踪（Ray tracing）是三维计算机图形学中的特殊渲染算法，跟踪从眼睛发出的光线而不是光源发出的光线，通过这样一项技术生成编排好的场景的数学模型显现出来。光线追踪的优点可以提供更为真实的光影效果，缺点是计算量巨大。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>光线追踪与光栅化渲染作为相对的两个概念，理解光栅化渲染更能解释光线追踪的概念。</p><p>光栅化渲染是将向量图形格式表示的图像转换成位图以用于显示器或者打印机输出的过程，如图1所示。</p><p></p><p align="center">    <img src="images/rasterrizer.png" width="90%" alt="光线追踪示意图"></p><p></p><center>图1  光栅化渲染示意图</center><p>光线追踪的示意图如图2所示。[Whitted 1980]提出了使用光线跟踪来在计算机上生成图像的方法，这一方法后来也被称为经典光线跟踪方法或Whitted-style 光线跟踪方法。其主要思想是从视点向成像平面上的像素发射光线，找到与该光线相交的最近物体的交点，如果该点处的表面是散射面，则计算光源直接照射该点产生的颜色；如果该点处表面是镜面或折射面，则继续向反射或折射方向跟踪另一条光线，如此递归下去，直到光线逃逸出场景或达到设定的最大递归深度。这种经典的方法可以产生镜面反射、折射、阴影等效果，不过不能实现其他的全局光照的效果。</p><p></p><p align="center">    <img src="images/ray_track.jpg" width="90%" alt="光线追踪示意图"></p><p></p><center>图2  光线追踪示意图</center><h1 id="渲染方程（The-Rendering-Equation）"><a href="#渲染方程（The-Rendering-Equation）" class="headerlink" title="渲染方程（The Rendering Equation）"></a>渲染方程（The Rendering Equation）</h1><p>[Kajiya 1986]第一次将渲染方程引入图形学，使用它来解释光能传输的产生的各种现象。这一方程描述了场景中光能传输达到稳定状态以后，物体表面某个点在某个方向上的辐射亮度（Radiance）与入射辐射亮度等的关系。</p><script type="math/tex; mode=display">L_o(x,w_o)=L_e(x,w_0)+\int_\Omega{f_r(x,w_i,w_0)L_i(x,w_i)cos\theta_idw_i}</script><p>其中，$L_o(x,W_o)$表示物体表面点 $x$ 处在方向  $𝜔𝑜$  上出射的辐射亮度，$𝐿𝑒(𝑥, 𝜔0)$表示在该点该方向上自辐射的亮度。$𝐿𝑖(𝑥,𝜔𝑖)$表示该点处 $𝜔𝑖$ 方向入射的辐射亮度，$𝑓𝑟(𝑥, 𝜔𝑖, 𝜔𝑜)$ 是双向反射分布函数（BRDF），描述的是入射方向的辐射亮度对出射方向的贡献，$cos 𝜃𝑖$ 是$𝜔𝑖$与表面法向的点积。在这一方程的基础上，辐射度方法和蒙特卡罗光线跟踪的方法就可以看成是对方程中积分的不同的数值求解方法。</p><p>BRDF描述的是表面本身的性质，比如它的光滑程度，导电程度等等。由于四面八方的光线都会作用在这个表面，所以我们需要对所有方向进行积分，也就是一个球面上的积分，考虑到积分项中的 $(w_i\cdot n)$ ，那么只有位于正半空间的方向才会对最终积分有贡献，所以最后这个球面的积分就变成了一个半球的积分，如图3所示。</p><p></p><p align="center">    <img src="images/brdf.jpg" width="90%" alt="光线追踪示意图"></p><p></p><center>图3  BRDF示意图</center><h1 id="双向反射分布函数（bidirectional-reflectance-distribution-function-BRDF）"><a href="#双向反射分布函数（bidirectional-reflectance-distribution-function-BRDF）" class="headerlink" title="双向反射分布函数（bidirectional reflectance distribution function, BRDF）"></a>双向反射分布函数（bidirectional reflectance distribution function, BRDF）</h1><p>在计算机图形学领域，着色（Shading）是指根据表面或者多边形相对光源和相机的角度和距离来计算它的颜色的过程。不同的用途可以使用不同的着色算法，CAD等追求响应速度的交互式图形领域可以使用简单快速的着色算法，卡通油画等艺术效果可以使用非真实感（Nonphotorealistic）着色算法，而追求真实感的CG电影或游戏则可以使用基于物理建模的着色算法。而BRDF是基于物理建模的着色算法的理论基础。</p><p>我们看到一个表面，实际上是周围环境的光照射到表面上，然后表面将一部分光反射到我们眼睛里。双向反射分布函数BRDF（Bidirectional Reflectance Distribution Function）就是描述表面入射光和反射光关系的。</p><p>对于一个方向的入射光，表面会将光反射到表面上半球的各个方向，不同方向反射的比例是不同的，我们用BRDF来表示指定方向的反射光和入射光的比例关系，BRDF定义为：</p><script type="math/tex; mode=display">f(l,v)=\frac{dL_o(v)}{dE(l)}</script><p>其中，$f$就是BRDF，$l$是入射光方向，$v$是观察方向，也就是我们关心的反射光方向。$d L_o(v)$ 是表面反射到$v$方向的反射光的微分辐射率。表面反射到$v$方向的反射光的辐射率为$L_o(v)$，来自于表面上半球所有方向的入射光线的贡献，而微分辐射率 $d L_o(v)$ 特指来自方向 $l$ 的入射光贡献的反射辐射率。$dE(l)$是表面上来自入射光方向 $l$ 的微分辐照度。表面接收到的辐照度为 $E$ ，来自上半球所有方向的入射光线的贡献，而微分辐照度 $dE(l)$ 特指来自于方向 $l$ 的入射光。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/zh-hans/%E5%85%89%E7%B7%9A%E8%BF%BD%E8%B9%A4" target="_blank" rel="noopener">光线追踪</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%A0%85%E6%A0%BC%E5%8C%96" target="_blank" rel="noopener">栅格化</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/baishuo8/article/details/81476422" target="_blank" rel="noopener">光线追踪基本概念与代码实现</a>,by 鹅城惊喜师爷.</li><li><a href="https://zhuanlan.zhihu.com/p/41269520" target="_blank" rel="noopener">一篇光线追踪的入门</a>,by 洛城.</li><li><a href="https://www.jun.ninja/projects/gcg/report.pdf" target="_blank" rel="noopener">基于蒙特卡罗的光线跟踪绘制方法</a>,by 严俊.</li><li><a href="https://zhuanlan.zhihu.com/p/21376124" target="_blank" rel="noopener">基于物理着色：BRDF</a>,by Maple.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;光线追踪（Ray tracing）是三维计算机图形学中的特殊渲染算法，跟踪从眼睛发出的光线而不是光源发出的光线，通过这样一项技术生成编排好的场景的数学模型显现出来。光线追踪的优点可以提供更为真实的光影效果，缺点是计算量巨大。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机图形学" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>SLAM中位姿估计的数学基础</title>
    <link href="https://huangwang.github.io/2019/05/20/SLAM%E4%B8%AD%E4%BD%8D%E5%A7%BF%E4%BC%B0%E8%AE%A1%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <id>https://huangwang.github.io/2019/05/20/SLAM中位姿估计的数学基础/</id>
    <published>2019-05-20T11:38:57.000Z</published>
    <updated>2019-05-20T13:01:24.165Z</updated>
    
    <content type="html"><![CDATA[<p>同步定位与地图构建（SLAM或Simultaneous localization and mapping）是一种概念：希望机器人从未知环境的未知地点出发，在运动过程中通过重复观测到的地图特征（比如，墙角，柱子等）定位自身位置和姿态，再根据自身位置增量式的构建地图，从而达到同时定位和地图构建的目的。</p><p>SLAM的核心工作有两个：</p><ul><li>地图构建</li></ul><p>研究如何把从一系列传感器收集到的信息，集成到一个一致性的模型上的问题。它可以被描述为第一核心问题：这个世界长什么样？地图构建的核心部分是环境的表达方式以及传感器数据的解释。</p><ul><li>定位</li></ul><p>研究在地图上估测机器人的坐标和姿势形态的问题；换而言之，机器人需要回答这里的第二核心问题，我在哪？典型的解包含以下两个方面：追踪——通常机器人的初始位置已知；全局定位——通常只给出很少，甚至不给出有关于起始位置环境特征的先验信息。</p><p>下面主要介绍SLAM定位研究中涉及的数学知识。</p><h1 id="向量点积"><a href="#向量点积" class="headerlink" title="向量点积"></a>向量点积</h1><p>有如下两个向量:</p><script type="math/tex; mode=display">a=\begin{pmatrix}a_{1}\\ a_{2}\\ a_{3}\end{pmatrix},b=\begin{pmatrix}b_{1}\\ b_{2}\\ b_{3}\end{pmatrix}</script><p>它们的点乘定义如下：</p><script type="math/tex; mode=display">% <![CDATA[a\cdot b=a^{T}\cdot b = \sum_{i=1}^{3}a_{i}b_{i}=\left | a \right |\left | b \right |cos<a,b> %]]></script><p>即两个向量点乘等于一个向量的转置乘以另一个向量。</p><h1 id="向量叉积"><a href="#向量叉积" class="headerlink" title="向量叉积"></a>向量叉积</h1><p>两个向量做叉积结果还是一个向量，这个向量垂直于这两个做叉积的向量所组成的平面。</p><script type="math/tex; mode=display">a\times b=\begin{vmatrix}i & j & k\\ a_{1} & a_{2} & a_{3}\\ b_{1} & b_{2} & b_{3}\end{vmatrix}=(a_{2}b_{3}-a_{3}b_{2})i+(a_{3}b_{1}-a_{1}b_{3})j+(a_{1}b_{2}-a_{2}b_{1})k</script><p>为了计算方便，将两个向量写成行列式的形式，然后按对角线法则计算行列式的值。i、j、k分量分别即代表x、y、z轴方向的分量。写成列向量的形式如下:</p><script type="math/tex; mode=display">\begin{pmatrix}a_{2}b_{3}-a_{3}b_{2}\\ a_{3}b_{1}-a_{1}b_{3}\\ a_{1}b_{2}-a_{2}b_{1}\end{pmatrix}=\begin{pmatrix}0\cdot b_{1}-a_{3}b_{2}+a_{2}b_{3}\\ a_{3}b_{1}-0\cdot b_{2}-a_{1}b_{3}\\ -a{2}b_{1}+a_{1}b_{2}+0\cdot b_{3}\end{pmatrix}=\begin{pmatrix}0 & -a_{3} & a_{2}\\ a_{3} & 0 & -a_{1}\\ -a_{2} & a_{1} & 0\end{pmatrix}\begin{pmatrix}b_{1}\\ b_{2}\\ b_{3}\end{pmatrix}</script><p>再将其写成与b相乘的矩阵形式，提取系数矩阵。这个系数矩阵就称作向量a的反对称矩阵，用a^记。所谓反对称矩阵，是指满足下面这个条件的矩阵。</p><script type="math/tex; mode=display">A^{-1}=-A</script><p>因为向量叉积的结果是一个向量，因此可以用来表示旋转，结果向量的方向为旋转轴，大小为旋转角。结果可以看作一个旋转向量。</p><h1 id="对极几何"><a href="#对极几何" class="headerlink" title="对极几何"></a>对极几何</h1><p>两个相机在不同位置拍摄同一物体，两张照片中的景物有重叠部分，那么理论上这两张照片会存在一定的对应关系，而对极几何就是探索描述它们之间对应关系的工具。相机在不同位置拍摄同一物体示意图如图1所示。</p><p></p><p align="center">    <img src="images/epipolor1.png" width="90%" alt="相机在不同位置拍摄同一物体示意图"></p><p></p><center>图1  相机在不同位置拍摄同一物体示意图</center><p>图中的概念有：</p><ul><li><p>极点e：分别是左边相机中心在右图像平面上的像，右相机中心在左像平面上的像。</p></li><li><p>极平面：两个相机中心和空间中某店p形成的平面。</p></li><li><p>极线l：极平面分别和两个像平面的交线。</p></li></ul><p>对极几何则是描述这几个量之间的对应关系。直观讲，从左图的角度看，如果不知道p点的深度信息，射线op是这个点可能出现的空间位置，因为该射线上的点都会投影到同一个像素点，同时，如果不知道p点的具体位置，那么当在右图的位置看时，极线 l’ 就是点p可能出现的位置，即在这条线上的某个地方。如图2所示:</p><p></p><p align="center">    <img src="images/epipolor2.png" width="90%" alt="物体位置示意图"></p><p></p><center>图2  物体位置示意图</center><p>在计算机视觉中，基础矩阵（Fundamental matrix） F 是一个3×3的矩阵，表达了立体像对的像点之间的对应关系。在对极几何中，对于立体像对中的一对同名点，它们的齐次化图像坐标分别为 $p$ 与 $p’$， ${\displaystyle \mathrm {F} p}$ 表示一条必定经过 $p’$的直线（极线）。这意味着立体像对的所有同名点对都满足：</p><script type="math/tex; mode=display">{\displaystyle p'^{\top }\mathrm {F} p=0.}</script><p>F矩阵中蕴含了立体像对的两幅图像在拍摄时相互之间的空间几何关系（外参数）以及相机检校参数（内参数），包括旋转、位移、像主点坐标和焦距。因为 F 矩阵的秩为2，并且可以自由缩放（尺度化），所以只需7对同名点即可估算出F的值。</p><p>基础矩阵这一概念由Q. T. Luong在他那篇很有影响力的博士毕业论文中提出。Faugeras则是在1992年发表的著作中以上面的关系式给出了 F 矩阵的定义。尽管Longuet-Higgins提出的本质矩阵也满足类似的关系式，但本质矩阵中并不蕴含相机检校参数。本质矩阵与基础矩阵之间的关系可由下式表达：</p><script type="math/tex; mode=display">{\displaystyle \mathrm {E} =\mathrm {K'^{\top }} \mathrm {FK} .}</script><p>其中 $K$和 $K’$分别为两个相机的内参数矩阵。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://zhaoxuhui.top/blog/2018/03/22/MathInSLAM.html" target="_blank" rel="noopener">SLAM数学基础</a>,by zhaoxuhui.</li><li><a href="https://zh.wikipedia.org/wiki/即时定位与地图构建" target="_blank" rel="noopener">即时定位与地图构建</a>,by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/23247395" target="_blank" rel="noopener">大牛讲堂｜SLAM第一篇：基础知识</a>, by 地平线HorizonRobotics.</li><li><a href="https://www.zhihu.com/question/35186064" target="_blank" rel="noopener">学习SLAM需要哪些预备知识？</a>,by wikipedia.</li><li><a href="http://cvrs.whu.edu.cn/downloads/ebooks/计算机视觉中的数学方法.pdf" target="_blank" rel="noopener">计算机视觉中的数学方法</a>,by 吴福朝.</li><li><a href="https://blog.csdn.net/u012936940/article/details/80723609" target="_blank" rel="noopener">对极几何及单应矩阵</a>, by Rap_God.<br>​</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;同步定位与地图构建（SLAM或Simultaneous localization and mapping）是一种概念：希望机器人从未知环境的未知地点出发，在运动过程中通过重复观测到的地图特征（比如，墙角，柱子等）定位自身位置和姿态，再根据自身位置增量式的构建地图，从而达到同
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>PX4无人机MAVROS外部控制教程</title>
    <link href="https://huangwang.github.io/2019/05/15/PX4%E6%97%A0%E4%BA%BA%E6%9C%BAMAVROS%E5%A4%96%E9%83%A8%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/05/15/PX4无人机MAVROS外部控制教程/</id>
    <published>2019-05-15T13:36:12.000Z</published>
    <updated>2019-05-15T14:16:51.150Z</updated>
    
    <content type="html"><![CDATA[<p>PX4中的offboard模式能够接受来自外部的控制指令，搭配机载或支持MAVROS的协同计算机，可在PX4飞控平台上加入视觉处理或人工智能，以实现无人机自动控制功能。下面即介绍如何在基于MAVROS的协同计算机上运行程序控制PX4无人机。具体过程如下：</p><h1 id="PX4固件参数设置"><a href="#PX4固件参数设置" class="headerlink" title="PX4固件参数设置"></a>PX4固件参数设置</h1><p>在开始无人机外部控制开发之前，您需要在PX4固件中设置两件事:</p><ul><li>将RC开关映射到场外模式激活</li></ul><p>要执行此操作，请在QGroundControl中加载参数并查找RC_MAP_OFFB_SW参数，您可以为其分配要用于激活offboard模式的RC通道。 以这样一种方式映射事物是非常有用的。当你脱离offboard模式时，你会进入位置控制。</p><p>虽然此步骤不是强制性的，因为您可以使用MAVLink消息激活offboard模式。 我们认为这种方法更安全。</p><ul><li>启用配套计算机接口</li></ul><p>查找SYS_COMPANION参数并将其设置为921600（推荐）或57600. 此参数将激活<strong>Telem2</strong>端口上的MAVLink流，其中包含特定于板载模式的数据流以及相应的波特率（921600 8N1或57600 8N1）。 </p><p><strong>本人实验测试时SYS_COMPANION参数设置成Companion Link(57600) 。此外要注意通过Telem2端口的无线收发装置与地面支持MAVROS的具有无线收发装置的协同计算机连接。并长按安全锁手动解锁无人机。</strong></p><h1 id="安装MAVROS"><a href="#安装MAVROS" class="headerlink" title="安装MAVROS"></a>安装MAVROS</h1><p>在地面协同计算机上安装MAVROS请参考<a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>，完成后使用如下命令启动MAVROS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ roscore</span><br><span class="line"># 启动MAVROS,链接到本地ROS</span><br><span class="line">$ roslaunch mavros px4.launch fcu_url:=serial:///dev/ttyUSB0:57600</span><br></pre></td></tr></table></figure><h1 id="构建Offboard示例程序"><a href="#构建Offboard示例程序" class="headerlink" title="构建Offboard示例程序"></a>构建Offboard示例程序</h1><p>ROS节点Offboard示例程序的构建请参考<a href="https://huangwang.github.io/2019/05/15/ROS构建Package和Node的教程/">ROS构建Package和Node的教程</a>，完成后使用如下命令启动Offboard示例程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd catkin_ws/</span><br><span class="line">$ source devel/setup.bash</span><br><span class="line">$ rosrun offboard offboard_node</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2019/05/15/PX4软件在环仿真之MAVROS外部控制/">PX4软件在环仿真之MAVROS外部控制</a>,by jackhuang. </li><li><a href="https://dev.px4.io/en/ros/offboard_control.html" target="_blank" rel="noopener">Offboard Control</a>, by dronecode.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PX4中的offboard模式能够接受来自外部的控制指令，搭配机载或支持MAVROS的协同计算机，可在PX4飞控平台上加入视觉处理或人工智能，以实现无人机自动控制功能。下面即介绍如何在基于MAVROS的协同计算机上运行程序控制PX4无人机。具体过程如下：&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="PX4" scheme="https://huangwang.github.io/tags/PX4/"/>
    
      <category term="Gazebo" scheme="https://huangwang.github.io/tags/Gazebo/"/>
    
  </entry>
  
  <entry>
    <title>PX4软件在环仿真之MAVROS外部控制</title>
    <link href="https://huangwang.github.io/2019/05/15/PX4%E8%BD%AF%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%BB%BF%E7%9C%9F%E4%B9%8BMAVROS%E5%A4%96%E9%83%A8%E6%8E%A7%E5%88%B6/"/>
    <id>https://huangwang.github.io/2019/05/15/PX4软件在环仿真之MAVROS外部控制/</id>
    <published>2019-05-15T12:47:35.000Z</published>
    <updated>2019-05-15T13:28:49.953Z</updated>
    
    <content type="html"><![CDATA[<p>PX4软件在环仿真之MAVROS外部控制将使用基于MAVROS的PX4外部控制ROS节点，控制在Gazebo仿真环境中的四悬翼无人机,如图1所示。</p><p></p><p align="center">    <img src="images/px4_sitl_overview.png" width="90%" alt="px4软件在环仿真"></p><p></p><center>图1  px4软件在环仿真</center><p>具体步骤如下：</p><h1 id="构建PX4自驾仪"><a href="#构建PX4自驾仪" class="headerlink" title="构建PX4自驾仪"></a>构建PX4自驾仪</h1><p>请参考<a href="https://huangwang.github.io/2019/04/26/PX4编译开发环境配置/">PX4编译开发环境配置</a>和<a href="https://dev.px4.io/en/setup/dev_env_linux.html#gazebo-with-ros" target="_blank" rel="noopener">Development Environment on Linux</a>配置PX4编译开发环境。需要指出的是，为使用Gazebo仿真环境，PX4开发工具链使用脚本<a href="https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim_ros_gazebo.sh" target="_blank" rel="noopener">ubuntu_sim_ros_gazebo.sh</a>构建。</p><p>PX4编译开发环境配置完成后，使用如下命令启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/src/Firmware</span><br><span class="line">$ make posix_sitl_default gazebo</span><br></pre></td></tr></table></figure></p><h1 id="安装MAVROS"><a href="#安装MAVROS" class="headerlink" title="安装MAVROS"></a>安装MAVROS</h1><p>安装MAVROS请参考<a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>，完成后使用如下命令启动MAVROS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ roscore</span><br><span class="line"># 启动MAVROS,链接到本地ROS</span><br><span class="line">$ roslaunch mavros px4.launch fcu_url:=&quot;udp://:14540@127.0.0.1:14557&quot;</span><br></pre></td></tr></table></figure><h1 id="构建Offboard示例程序"><a href="#构建Offboard示例程序" class="headerlink" title="构建Offboard示例程序"></a>构建Offboard示例程序</h1><p>ROS节点Offboard示例程序的构建请参考<a href="https://huangwang.github.io/2019/05/15/ROS构建Package和Node的教程/">ROS构建Package和Node的教程</a>，完成后使用如下命令启动Offboard示例程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd catkin_ws/</span><br><span class="line">$ source devel/setup.bash</span><br><span class="line">$ rosrun offboard offboard_node</span><br></pre></td></tr></table></figure><p>最终能够在Gazebo仿真环境中观察到四悬翼无人机垂直起飞到2米的高度。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>,by jackhuang.</li><li><a href="https://huangwang.github.io/2019/05/15/ROS构建Package和Node的教程/">ROS构建Package和Node的教程</a>,by jackhuang.</li><li><a href="https://huangwang.github.io/2019/04/26/PX4编译开发环境配置/">PX4编译开发环境配置</a>,by jackhuang.</li><li><a href="https://dev.px4.io/en/setup/dev_env_linux.html#gazebo-with-ros" target="_blank" rel="noopener">Development Environment on Linux</a>, by dronecode.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PX4软件在环仿真之MAVROS外部控制将使用基于MAVROS的PX4外部控制ROS节点，控制在Gazebo仿真环境中的四悬翼无人机,如图1所示。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;images/px4_sitl_ove
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="PX4" scheme="https://huangwang.github.io/tags/PX4/"/>
    
      <category term="Gazebo" scheme="https://huangwang.github.io/tags/Gazebo/"/>
    
  </entry>
  
  <entry>
    <title>ROS构建Package和Node的教程</title>
    <link href="https://huangwang.github.io/2019/05/15/ROS%E6%9E%84%E5%BB%BAPackage%E5%92%8CNode%E7%9A%84%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/05/15/ROS构建Package和Node的教程/</id>
    <published>2019-05-15T11:35:37.000Z</published>
    <updated>2019-05-15T12:43:35.770Z</updated>
    
    <content type="html"><![CDATA[<p>ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理，它也提供一些工具和库用于获取、建立、编写和执行多机融合的程序。</p><p>ROS的运行架构是一种使用ROS通信模块实现模块间P2P的松耦合的网络连接的处理架构，它执行若干种类型的通讯，包括：</p><ul><li>基于服务的同步RPC（远程过程调用）通讯；</li><li>基于Topic的异步数据流通讯，还有参数服务器上的数据存储。</li></ul><p>ROS可与PX4一起用于飞行器的外部控制, 它使用MAVROS节点与在硬件上运行的PX4或使用Gazebo Simulator进行通信。MAVROS节点的安装请参考<a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>，下面以编写基于MAVROS的外部控制节点为例，介绍ROS包和节点的构建过程。</p><h1 id="ROS包构建方法"><a href="#ROS包构建方法" class="headerlink" title="ROS包构建方法"></a>ROS包构建方法</h1><p>catkin和rosbuild是构建ROS包的两种方法。目前多用catkin构建ros包。</p><p>catkin包可以构建为独立项目，与构建普通cmake项目的方式相同，但catkin还提供了工作空间的概念，您可以在其中同时构建多个相互依赖的包。</p><h1 id="ROS包构成"><a href="#ROS包构成" class="headerlink" title="ROS包构成"></a>ROS包构成</h1><p>ROS包是其代码组织的一种高级结构好哦，最简单的catkin包的构成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_package/</span><br><span class="line">  CMakeLists.txt</span><br><span class="line">  package.xml</span><br></pre></td></tr></table></figure><p>其中:</p><ul><li>包必须包含一个符合catkin的package.xml文件。<ul><li>该package.xml文件提供有关包的元信息。</li></ul></li><li>包必须包含一个使用catkin的CMakeLists.txt。<ul><li>如果它是catkin元数据包，它必须具有相关的样板CMakeLists.txt文件。</li></ul></li><li>包都必须有自己的文件夹。<ul><li>这意味着没有嵌套包，也没有多个包共享同一目录。</li></ul></li></ul><h1 id="catkin工作空间的构成"><a href="#catkin工作空间的构成" class="headerlink" title="catkin工作空间的构成"></a>catkin工作空间的构成</h1><p>使用catkin软件包的推荐方法是使用catkin工作区，但您也可以独立构建catkin软件包。 一个简单的工作空间可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">workspace_folder/        -- WORKSPACE</span><br><span class="line">  src/                   -- SOURCE SPACE</span><br><span class="line">    CMakeLists.txt       -- &apos;Toplevel&apos; CMake file, provided by catkin</span><br><span class="line">    package_1/</span><br><span class="line">      CMakeLists.txt     -- CMakeLists.txt file for package_1</span><br><span class="line">      package.xml        -- Package manifest for package_1</span><br><span class="line">    ...</span><br><span class="line">    package_n/</span><br><span class="line">      CMakeLists.txt     -- CMakeLists.txt file for package_n</span><br><span class="line">      package.xml        -- Package manifest for package_n</span><br></pre></td></tr></table></figure><h1 id="创建catkin包"><a href="#创建catkin包" class="headerlink" title="创建catkin包"></a>创建catkin包</h1><p>通常使用catkin_create_pkg命令创建新的catkin包，具体步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/catkin_ws/src</span><br><span class="line">$ cd ~/catkin_ws/src</span><br><span class="line"># 创建名为offboard的ros包，它依赖roscpp、mavros和geometry_msgs</span><br><span class="line">$ catkin_create_pkg offboard roscpp mavros geometry_msgs</span><br><span class="line">$ cd offboard/src/</span><br><span class="line"># 创建offboard_node.cpp，将官方PX4外部控制例程代码写入该文件</span><br><span class="line"># 该文件也是offboard包的第一个node</span><br><span class="line">$ touch offboard_node.cpp</span><br></pre></td></tr></table></figure><p>offboard_node.cpp文件的具体内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @file offb_node.cpp</span><br><span class="line"> * @brief Offboard control example node, written with MAVROS version 0.19.x, PX4 Pro Flight</span><br><span class="line"> * Stack and tested in Gazebo SITL</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#include &lt;ros/ros.h&gt;</span><br><span class="line">#include &lt;geometry_msgs/PoseStamped.h&gt;</span><br><span class="line">#include &lt;mavros_msgs/CommandBool.h&gt;</span><br><span class="line">#include &lt;mavros_msgs/SetMode.h&gt;</span><br><span class="line">#include &lt;mavros_msgs/State.h&gt;</span><br><span class="line"></span><br><span class="line">mavros_msgs::State current_state;</span><br><span class="line">void state_cb(const mavros_msgs::State::ConstPtr&amp; msg)&#123;</span><br><span class="line">    current_state = *msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    ros::init(argc, argv, &quot;offb_node&quot;);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    ros::Subscriber state_sub = nh.subscribe&lt;mavros_msgs::State&gt;</span><br><span class="line">            (&quot;mavros/state&quot;, 10, state_cb);</span><br><span class="line">    ros::Publisher local_pos_pub = nh.advertise&lt;geometry_msgs::PoseStamped&gt;</span><br><span class="line">            (&quot;mavros/setpoint_position/local&quot;, 10);</span><br><span class="line">    ros::ServiceClient arming_client = nh.serviceClient&lt;mavros_msgs::CommandBool&gt;</span><br><span class="line">            (&quot;mavros/cmd/arming&quot;);</span><br><span class="line">    ros::ServiceClient set_mode_client = nh.serviceClient&lt;mavros_msgs::SetMode&gt;</span><br><span class="line">            (&quot;mavros/set_mode&quot;);</span><br><span class="line"></span><br><span class="line">    //the setpoint publishing rate MUST be faster than 2Hz</span><br><span class="line">    ros::Rate rate(20.0);</span><br><span class="line"></span><br><span class="line">    // wait for FCU connection</span><br><span class="line">    while(ros::ok() &amp;&amp; !current_state.connected)&#123;</span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    geometry_msgs::PoseStamped pose;</span><br><span class="line">    pose.pose.position.x = 0;</span><br><span class="line">    pose.pose.position.y = 0;</span><br><span class="line">    pose.pose.position.z = 2;</span><br><span class="line"></span><br><span class="line">    //send a few setpoints before starting</span><br><span class="line">    for(int i = 100; ros::ok() &amp;&amp; i &gt; 0; --i)&#123;</span><br><span class="line">        local_pos_pub.publish(pose);</span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavros_msgs::SetMode offb_set_mode;</span><br><span class="line">    offb_set_mode.request.custom_mode = &quot;OFFBOARD&quot;;</span><br><span class="line"></span><br><span class="line">    mavros_msgs::CommandBool arm_cmd;</span><br><span class="line">    arm_cmd.request.value = true;</span><br><span class="line"></span><br><span class="line">    ros::Time last_request = ros::Time::now();</span><br><span class="line"></span><br><span class="line">    while(ros::ok())&#123;</span><br><span class="line">        if( current_state.mode != &quot;OFFBOARD&quot; &amp;&amp;</span><br><span class="line">            (ros::Time::now() - last_request &gt; ros::Duration(5.0)))&#123;</span><br><span class="line">            if( set_mode_client.call(offb_set_mode) &amp;&amp;</span><br><span class="line">                offb_set_mode.response.mode_sent)&#123;</span><br><span class="line">                ROS_INFO(&quot;Offboard enabled&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            last_request = ros::Time::now();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if( !current_state.armed &amp;&amp;</span><br><span class="line">                (ros::Time::now() - last_request &gt; ros::Duration(5.0)))&#123;</span><br><span class="line">                if( arming_client.call(arm_cmd) &amp;&amp;</span><br><span class="line">                    arm_cmd.response.success)&#123;</span><br><span class="line">                    ROS_INFO(&quot;Vehicle armed&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                last_request = ros::Time::now();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        local_pos_pub.publish(pose);</span><br><span class="line"></span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后需要修改~/catkin_ws/src/offboard目录下的CMakeLists.txt文件。取消掉一些注释，生成相应节点（否则会出现找不到节点的错误）。</p><p align="center">    <img src="images/cmakelists.png" width="90%" alt="修改CMakeLists.txt文件"></p><h1 id="构建catkin包"><a href="#构建catkin包" class="headerlink" title="构建catkin包"></a>构建catkin包</h1><p>在catkin工作空间（catkin_ws）中，使用catkin_make工具从源文件构建和安装一个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/catkin_ws</span><br><span class="line">$ catkin_make</span><br><span class="line">$ catkin_make install</span><br><span class="line"># 配置catkin工作空间，使ros能找到刚生成的offboard包</span><br><span class="line">$ source devel/setup.bash</span><br><span class="line"># 查看ros包路径环境变量是否配置好</span><br><span class="line">$ echo $ROS_PACKAGE_PATH</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>,by jackhuang.</li><li><a href="http://wiki.ros.org/ROS/Tutorials/CreatingPackage" target="_blank" rel="noopener">Creating a ROS Package</a>, by ros homepage.</li><li><a href="http://wiki.ros.org/ROS/Tutorials/BuildingPackages" target="_blank" rel="noopener">Building a ROS Package</a>, by ros homepage.</li><li><a href="http://wiki.ros.org/ROS/Tutorials/UnderstandingNodes" target="_blank" rel="noopener">Understanding ROS Nodes</a>, by ros homepage.</li><li><a href="https://blog.csdn.net/chishuideyu/article/details/53581013" target="_blank" rel="noopener">catkin 与 rosbuild解析及两者区别和联系</a>,by Xuefeng_BUPT.</li><li><a href="https://blog.csdn.net/oqqENvY12/article/details/55263122" target="_blank" rel="noopener">Pixhawk原生固件PX4之SITL软件在环仿真</a>,by FantasyJXF.</li><li><a href="https://blog.csdn.net/oqqENvY12/article/details/77995192" target="_blank" rel="noopener">Pixhawk原生固件PX4之offboard</a>,by FantasyJXF.</li><li><a href="https://dev.px4.io/en/ros/mavros_offboard.html" target="_blank" rel="noopener">MAVROS Offboard control example</a>, by dronecode.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="PX4" scheme="https://huangwang.github.io/tags/PX4/"/>
    
      <category term="ROS" scheme="https://huangwang.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>使用nvm进行nodejs版本管理</title>
    <link href="https://huangwang.github.io/2019/05/11/%E4%BD%BF%E7%94%A8nvm%E8%BF%9B%E8%A1%8Cnodejs%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://huangwang.github.io/2019/05/11/使用nvm进行nodejs版本管理/</id>
    <published>2019-05-11T09:24:03.000Z</published>
    <updated>2019-05-11T11:33:51.015Z</updated>
    
    <content type="html"><![CDATA[<p>nvm是一个简单bash脚本，用于管理多个活动的nodejs版本。在linux操作系统中使用nvm安装和管理nodejs十分方便。下面简单介绍ubuntu 16.04操作系统下nvm的安装使用。</p><h1 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h1><p>在Ubuntu 16.04的终端中，直接运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><h1 id="管理Nodejs"><a href="#管理Nodejs" class="headerlink" title="管理Nodejs"></a>管理Nodejs</h1><ul><li><p>安装最新nodejs长期支持版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure></li><li><p>卸载最新nodejs长期支持版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall --lts</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">Node Version Manager</a>, by nvm-sh.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nvm是一个简单bash脚本，用于管理多个活动的nodejs版本。在linux操作系统中使用nvm安装和管理nodejs十分方便。下面简单介绍ubuntu 16.04操作系统下nvm的安装使用。&lt;/p&gt;
&lt;h1 id=&quot;安装脚本&quot;&gt;&lt;a href=&quot;#安装脚本&quot; class
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Dell笔记本安装Ubuntu16.04出现的问题及解决方案</title>
    <link href="https://huangwang.github.io/2019/05/11/Dell%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85Ubuntu16-04%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://huangwang.github.io/2019/05/11/Dell笔记本安装Ubuntu16-04出现的问题及解决方案/</id>
    <published>2019-05-11T03:50:55.000Z</published>
    <updated>2019-05-11T09:21:44.013Z</updated>
    
    <content type="html"><![CDATA[<p>PX4开发推荐在Ubuntu16.04上进行，然在一些带独立显卡的笔记本上安装时，进入安装界面就卡住了。问题产生原因显然与显卡驱动有关。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决方案可参考链接<a href="https://zhuanlan.zhihu.com/p/29209412" target="_blank" rel="noopener">Ubuntu16.04—64位安装及使用中出现的问题</a>。主要有两种方法：</p><ul><li>重新开机，光标选中“Install Ubuntu” ，按“e”，进入grub界面，将倒数第二行中的“quiet splash —-”改为“nomodeset”。F10保存，就可以进入安装界面，进行安装。</li><li>如果加入nomodeset参数不行，则试试加入nouveau.modeset=0，步骤一样。</li></ul><h1 id="后续维护"><a href="#后续维护" class="headerlink" title="后续维护"></a>后续维护</h1><p>如果能顺利安装，则安装好后，添加选项到/etc/default/grub文件。步骤如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure></p><p>然后将nomodeset选项添加到 GRUB_CMDLINE_LINUX_DEFAULT:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_HIDDEN_TIMEOUT=0</span><br><span class="line">GRUB_HIDDEN_TIMEOUT_QUIET=true</span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash nomodeset&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;&quot;</span><br></pre></td></tr></table></figure><p>最后更显grub启动文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></p><h1 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h1><p>附内核显示参数的含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nomodeset </span><br><span class="line">不载入所有关于显示卡的驱动</span><br><span class="line"></span><br><span class="line">nouveau.modeset=0 </span><br><span class="line">关闭nvidia显卡的驱动，反之=1为开启</span><br><span class="line"></span><br><span class="line">i915.modeset=0 </span><br><span class="line">关闭Intel显卡的驱动，挺好奇对于Intel内显会有什么影响</span><br><span class="line"></span><br><span class="line">xforcevesa或radeon.modeset=0 xforcevesa </span><br><span class="line">跟AMD显卡(ATI)有关的设定，我猜也是关闭</span><br><span class="line"></span><br><span class="line">acpi=off </span><br><span class="line">回归旧时代，电源相关设定，OS无法控管，交给bios处理</span><br><span class="line">acpi功能失效，有不少硬体上奇怪的问题，可以用这参数解决</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/29209412" target="_blank" rel="noopener">Ubuntu16.04—64位安装及使用中出现的问题</a>,by 一部电影.</li><li><a href="https://medium.com/caesars-study-review-on-web-development/acpi-osi-linux-nomodeset%E6%98%AF%E4%BB%80%E9%BA%BC%E6%84%8F%E6%80%9D-%E5%8A%9F%E8%83%BD-42d8e2c444c3" target="_blank" rel="noopener">acpi_osi=linux、 nomodeset是什么意思? 功能?</a>, by 峰Caesar.</li><li><a href="https://askubuntu.com/questions/38780/how-do-i-set-nomodeset-after-ive-already-installed-ubuntu" target="_blank" rel="noopener">How do I set ‘nomodeset’ after I’ve already installed Ubuntu?</a>,by askubuntu.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PX4开发推荐在Ubuntu16.04上进行，然在一些带独立显卡的笔记本上安装时，进入安装界面就卡住了。问题产生原因显然与显卡驱动有关。&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Ubuntu" scheme="https://huangwang.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装MAVROS</title>
    <link href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/"/>
    <id>https://huangwang.github.io/2019/05/10/Ubuntu16-04安装MAVROS/</id>
    <published>2019-05-10T10:28:50.000Z</published>
    <updated>2019-05-22T00:23:33.474Z</updated>
    
    <content type="html"><![CDATA[<p>MAVROS包支持运行ROS的计算机、支持Mavlink的自驾仪、支持Mavlink的地面控制站之间使用Mavlink协议进行通信，如图1所示。</p><p></p><p align="center">    <img src="images/px4_sitl_overview.png" width="90%" alt="px4软件在环仿真"></p><p></p><center>图1  px4软件在环仿真</center><p>为构建px4软件在环仿真环境，下面介绍在协同计算机上安装Ubuntu16.04、ROS和MAVROS的步骤。</p><h1 id="安装ubuntu-16-04"><a href="#安装ubuntu-16-04" class="headerlink" title="安装ubuntu 16.04"></a>安装ubuntu 16.04</h1><p>安装ubuntu 16.04 LTS桌面板的教程请参考链接<a href="https://forum.ubuntu.org.cn/viewtopic.php?t=478527" target="_blank" rel="noopener">Ubuntu 16.04 安装基础入门教程（图文）</a>。</p><h1 id="安装ROS"><a href="#安装ROS" class="headerlink" title="安装ROS"></a>安装ROS</h1><h2 id="ROS简介"><a href="#ROS简介" class="headerlink" title="ROS简介"></a>ROS简介</h2><p>ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理，它也提供一些工具和库用于获取、建立、编写和执行多机融合的程序。</p><p>ROS的首要设计目标是在机器人研发领域提高代码复用率。ROS是一种分布式处理框架（又名Nodes）。这使可执行文件能被单独设计，并且在运行时松散耦合。这些过程可以封装到数据包（Packages）和堆栈（Stacks）中，以便于共享和分发。ROS还支持代码库的联合系统。使得协作亦能被分发。这种从文件系统级别到社区一级的设计让独立地决定发展和实施工作成为可能。上述所有功能都能由ROS的基础工具实现。</p><p>ROS有三个层次的概念：分别为Filesystem level，Computation graph level， 以及Communication level。 以下内容具体的总结了这些层次及概念。除了这三个层次的概念， ROS也定义了两种名称— Package资源名称和Graph资源名称。</p><h2 id="安装ROS-1"><a href="#安装ROS-1" class="headerlink" title="安装ROS"></a>安装ROS</h2><p>不建议在虚拟机中安装Ubuntu，再安装ROS。具体ROS安装步骤请参考<a href="https://www.cnblogs.com/liu-fa/p/5779206.html" target="_blank" rel="noopener">ROS 不能再详细的安装教程</a>和<a href="http://wiki.ros.org/kinetic/Installation/Ubuntu" target="_blank" rel="noopener">Ubuntu install of ROS Kinetic</a>。在此只简单记录Ubuntu 16.04 中安装ROS步骤：</p><ul><li>设置source.list</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &apos;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&apos;</span><br></pre></td></tr></table></figure><ul><li>设置公钥</li></ul><p>如何在连接服务器的过程中出现问题，可设置可选的hkp://pgp.mit.edu:80 或 hkp://keyserver.ubuntu.com:80</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ros-kinetic-desktop-full</span><br></pre></td></tr></table></figure><ul><li>初始化rosdep</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure><ul><li>环境配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source /opt/ros/kinetic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>安装ros组件构建环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-catkin-tools python-rosinstall python-rosinstall-generator python-wstool build-essential -y</span><br></pre></td></tr></table></figure><h2 id="运行ROS"><a href="#运行ROS" class="headerlink" title="运行ROS"></a>运行ROS</h2><p>在Ubuntu 16.04终端中运行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># roscore will start up a ROS Master, a ROS Parameter Server and a rosout logging node</span><br><span class="line">$ roscore</span><br><span class="line"></span><br><span class="line"># rosnode is a command-line tool for printing information about ROS Nodes.</span><br><span class="line">$ rosnode list</span><br><span class="line"></span><br><span class="line"># rospack allows you to get information about packages. </span><br><span class="line"></span><br><span class="line">$ rospack list</span><br><span class="line"></span><br><span class="line"># rosrun will locate PACKAGE and try to find an executable named EXECUTABLE in the PACKAGE tree. If it finds it, it will run it with ARGS.</span><br><span class="line"># Usage: rosrun [--prefix cmd] [--debug] PACKAGE EXECUTABLE [ARGS]</span><br><span class="line">$ rosrun turtlesim turtlesim_node</span><br><span class="line">$ rosrun turtlesim turtle_teleop_key</span><br><span class="line"></span><br><span class="line"># check what&apos;s happen in ros system</span><br><span class="line">$ rosrun rqt_graph rqt_graph</span><br><span class="line"></span><br><span class="line"># rqt_plot displays a scrolling time plot of the data published on topics</span><br><span class="line">$ rosrun rqt_plot rqt_plot</span><br><span class="line"></span><br><span class="line"># rostopic is a command-line tool for printing information about ROS Topics.</span><br><span class="line">$ rostopic list</span><br><span class="line"></span><br><span class="line"># rostopic echo shows the data published on a topic.</span><br><span class="line">$ rostopic echo /turtle1/cmd_vel</span><br><span class="line"></span><br><span class="line"># rostopic type returns the message type of any topic being published.</span><br><span class="line">$ rostopic type /turtle1/cmd_vel</span><br><span class="line"></span><br><span class="line"># rostopic pub publishes data on to a topic currently advertised.</span><br><span class="line">$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- &apos;[2.0, 0.0, 0.0]&apos; &apos;[0.0, 0.0, 1.8]&apos;</span><br><span class="line"></span><br><span class="line"># rostopic hz reports the rate at which data is published.</span><br><span class="line">$ rostopic hz /turtle1/pose</span><br><span class="line"></span><br><span class="line"># check info of /turtlesim node</span><br><span class="line">$ rosnode info /turtlesim</span><br></pre></td></tr></table></figure></p><h1 id="安装MAVROS"><a href="#安装MAVROS" class="headerlink" title="安装MAVROS"></a>安装MAVROS</h1><p>具体安装MAVROS的步骤请参考链接<a href="https://dev.px4.io/en/ros/mavros_installation.html" target="_blank" rel="noopener">MAVROS</a>。下面简单介绍Ubuntu 16.04下从源代码安装MAVROS的过程。</p><ul><li>创建catkin工作空间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/catkin_ws/src</span><br><span class="line">cd ~/catkin_ws</span><br><span class="line">catkin init</span><br><span class="line">wstool init src</span><br></pre></td></tr></table></figure><ul><li>安装MAVLink</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosinstall_generator --rosdistro kinetic mavlink | tee /tmp/mavros.rosinstall</span><br></pre></td></tr></table></figure><ul><li>安装MAVROS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosinstall_generator --upstream mavros | tee -a /tmp/mavros.rosinstall</span><br></pre></td></tr></table></figure><ul><li>创建工作空间和依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wstool merge -t src /tmp/mavros.rosinstall</span><br><span class="line">wstool update -t src -j4</span><br><span class="line">rosdep install --from-paths src --ignore-src -y</span><br></pre></td></tr></table></figure><ul><li>安装GeographicLib数据集</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./src/mavros/mavros/scripts/install_geographiclib_datasets.sh</span><br></pre></td></tr></table></figure><ul><li>构建源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin build</span><br></pre></td></tr></table></figure><ul><li>添加工作空间到ros环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Needed or rosrun can&apos;t find nodes from this workspace.</span><br><span class="line">$ source devel/setup.bash</span><br><span class="line"># Or write in .bashrc</span><br><span class="line">$ echo &quot;source ~/catkin_ws/devel/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://forum.ubuntu.org.cn/viewtopic.php?t=478527" target="_blank" rel="noopener">Ubuntu 16.04 安装基础入门教程（图文）</a>, by ubuntu中文论坛.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E4%BA%BA%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1" target="_blank" rel="noopener">机器人操作系统</a>,by wikipedia.</li><li><a href="https://www.cnblogs.com/liu-fa/p/5779206.html" target="_blank" rel="noopener">ROS 不能再详细的安装教程</a>,by 小萌是个球.</li><li><a href="http://wiki.ros.org/kinetic/Installation/Ubuntu" target="_blank" rel="noopener">Ubuntu install of ROS Kinetic</a>, by ROS.org.</li><li><a href="http://wiki.ros.org/ROS/Tutorials" target="_blank" rel="noopener">ROS Tutorials</a>, by ROS.org.</li><li><a href="https://dev.px4.io/en/ros/mavros_installation.html" target="_blank" rel="noopener">MAVROS</a>, by DroneCode.</li><li><a href="https://blog.csdn.net/chishuideyu/article/details/53581013" target="_blank" rel="noopener">catkin 与 rosbuild解析及两者区别和联系</a>,by Xuefeng_BUPT.</li><li><a href="http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment" target="_blank" rel="noopener">Installing and Configuring Your ROS Environment</a>, by ros.org.</li><li><a href="http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment" target="_blank" rel="noopener">Installing and Configuring Your ROS Environment</a>,by ros.org.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MAVROS包支持运行ROS的计算机、支持Mavlink的自驾仪、支持Mavlink的地面控制站之间使用Mavlink协议进行通信，如图1所示。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;images/px4_sitl_over
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="PX4" scheme="https://huangwang.github.io/tags/PX4/"/>
    
      <category term="ROS" scheme="https://huangwang.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>计算机科学术语辨析</title>
    <link href="https://huangwang.github.io/2019/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%9C%AF%E8%AF%AD%E8%BE%A8%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/05/05/计算机科学术语辨析/</id>
    <published>2019-05-05T01:16:04.000Z</published>
    <updated>2019-05-05T09:42:56.441Z</updated>
    
    <content type="html"><![CDATA[<p>计算机科学中的一些术语是同行之间进行交流的工具，但是这些术语约定俗成，缺乏权威定义，在不同的语境下有不同的涵义，不同的人有不同的理解，由此造成很多分歧。本文记录常用计算机科学术语，通过规范和校正其内涵和外延，避免分歧，提高效率。</p><h1 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>软件架构是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。</p><p>软件架构是一个系统的草图，抽象层次高。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>在软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的。</p><p>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。面向对象设计模式通常以类别或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类别或对象。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。</p><p>《设计模式》一书原先把设计模式分为创建型模式、结构型模式、行为型模式，把它们通过授权、聚合、诊断的概念来描述。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块，module，模块是一个通用概念，可能从功能或其他目的来区分。模块可以是子系统子领域，主要取决于上下文环境的用法。</p><p>通常我们会说程序模块，功能模块，这实际上是在按照不同的标准对模块的内容和范围的不同定义。</p><p>通常我们说的程序模块，是指的一段能够实现某个有价值目标的的成员代码段，这样的东西，我们还有另一个称呼：例程，而例程有两种，即函数和过程，它们都能实现一个有价值的目标供其它的模块使用。</p><p>而功能模块的说法一般在分析和设计阶段出现得比较频繁，通常我们用一个功能模块来说明一个功能所包含的系统行为，当我们觉得分析的颗粒度可能更大一些的时候我们可以用一个功能模块来表示一组功能的集合，这似乎让我们觉得，模块这个词的概念和“子系统”这个词的概念有些模糊，是的，事实上，有些大的模块会慢慢的让我们觉得称呼他们子系统更合适，或者一个子系统，我们会慢慢发现你还包含着一些模块。</p><p>但是无论怎样，定义模块的原则应该是：高内聚和低耦合。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>软件组件，定义为自包含的、可编程的、可重用的、与语言无关的软件单元。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>根据对组件和模块的分析，插件属于组件，而且还是一个程序模块，也是一个功能模块。插件是一种电脑程序，通过和应用程序的互动，来替应用程式增加一些特定的功能。 插件必须依赖于应用程序才能发挥自身功能，仅靠插件是无法正常运行的。</p><p>使用方法：满足一定接口规范的具有一定功能的程序模块。开发者可以在自己软件系统中设计相应的接口以匹配某个插件，也可以设计一定的接口规范，来让别人开发插件。插件和程序之间通过接口进行交互。</p><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><p>可视化的组件。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。</p><h1 id="术语辨析"><a href="#术语辨析" class="headerlink" title="术语辨析"></a>术语辨析</h1><h2 id="面向对象编程-VS-面向过程编程-VS-面向切面编程"><a href="#面向对象编程-VS-面向过程编程-VS-面向切面编程" class="headerlink" title="面向对象编程 VS 面向过程编程 VS 面向切面编程"></a>面向对象编程 VS 面向过程编程 VS 面向切面编程</h2><p>面向过程(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。</p><p>面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）是一种计算机编程架构。OOP 的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p><p>面向切面编程（Aspect Oriented Programming(AOP)），是一个比较热门的话题。AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。</p><p>面向过程编程围绕行为组织事物，面向对象编程围绕事物组织行为，有没有类、有没有继承并不是两种编程方法差异的关键；</p><p>面向切面编程是横跨流程的，实现某个特定位置的功能，面向功能进行抽象。具体流程只需做引用即可，而不至于不同流程中冗余很多类似代码。</p><h2 id="组件化开发-VS-模块化开发"><a href="#组件化开发-VS-模块化开发" class="headerlink" title="组件化开发 VS 模块化开发"></a>组件化开发 VS 模块化开发</h2><p>组件化和模块化的中心思想都是分而治之。目的都是将一个庞大的系统拆分成多个组件或者说是模块。</p><p>模块化就是将一个程序按照其功能做拆分，分成相互独立的模块，以便于每个模块只包含与其功能相关的内容。模块我们相对熟悉,比如登录功能可以是一个模块,搜索功能可以是一个模块,汽车的发送机也可是一个模块.</p><p>组件化就是基于可重用的目的，将一个大的软件系统按照分离关注点的形式，拆分成多个独立的组件，主要目的就是减少耦合.</p><p>一个独立的组件可以是一个软件包、web服务、web资源或者是封装了一些函数的模块。比如汽车的发动机是一个模块,也是一个组件,再或者前端中的一个日历控件是一个模块,也一个组件.这样，独立出来的组件可以单独维护和升级而不会影响到其他的组件.</p><p>组件和模块是一对容易混淆的名词,也常常被用来相互替换,两者是否有差异往往取决于专业背景、所在领域、以及视角。从设计上来看,组件强调复用,模块强调职责(内聚、分离),或者说组件是达到可复用要求的模块</p><p>模块化强调的是拆分，无论是从业务角度还是从架构、技术角度，模块化首先意味着将代码、数据等内容按照其职责不同分离，使其变得更加容易维护、迭代，使开发人员可以分而治之。</p><p>组件化则着重于可重用性，不管是界面上反复使用的用户头像按钮，还是处理数据的流程中的某个部件，只要可以被反复使用，并且进行了高度封装，只能通过接口访问，就可以称其为“组件”。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/28614088" target="_blank" rel="noopener">面向对象 vs 类与继承 vs 面向组件</a>, by 龙腾道默默地.</li><li><a href="https://zh.wikipedia.org/wiki/软件架构" target="_blank" rel="noopener">软件架构</a>,by wikipedia.</li><li><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html" target="_blank" rel="noopener">软件架构入门</a>,by 阮一峰.</li><li><a href="https://zh.wikipedia.org/wiki/设计模式_(计算机" target="_blank" rel="noopener">设计模式</a>),by wikipedia.</li><li><a href="https://www.cnblogs.com/doit8791/p/6129963.html" target="_blank" rel="noopener">软件架构、框架、模式、模块、组件、插件概念汇总</a>,by 时间的朋友.</li><li><a href="https://gaodaxiu0406.github.io/2017/09/09/模块化与组件化/" target="_blank" rel="noopener">模块化与组件化</a>,by 滴答.</li><li><a href="https://blog.csdn.net/qq_29422251/article/details/76618460" target="_blank" rel="noopener">面向过程编程，面向对象编程和面向切面编程理解</a>, by 枫叶千言.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机科学中的一些术语是同行之间进行交流的工具，但是这些术语约定俗成，缺乏权威定义，在不同的语境下有不同的涵义，不同的人有不同的理解，由此造成很多分歧。本文记录常用计算机科学术语，通过规范和校正其内涵和外延，避免分歧，提高效率。&lt;/p&gt;
&lt;h1 id=&quot;常用术语&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>PX4应用开发简要教程</title>
    <link href="https://huangwang.github.io/2019/04/29/PX4%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/04/29/PX4应用开发简要教程/</id>
    <published>2019-04-29T12:11:19.000Z</published>
    <updated>2019-04-29T12:47:18.224Z</updated>
    
    <content type="html"><![CDATA[<p>本文说明如何创建和运行第一个板载应用程序。 它涵盖了PX4上应用程序开发所需的所有基本概念和API。</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>在开发第一个PX4应用程序之前，需要构建如下开发环境：</p><ul><li>PX4 SITL模拟器或兼容PX4的飞行控制器。</li><li>PX4开发工具链用于所需目标。</li><li>从Github下载PX4源代码</li></ul><h1 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h1><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>本节创建一个最小的应用，仅用于打印Hello Sky！。整个应用由一个简单C文件和一个cmake定义文件构成。具体步骤如下：</p><ol><li>创建目录Firmware/src/examples/px4_simple_app</li><li>在上述目录中创建C文件px4_simple_app.c</li><li>在上述目录中创建cmake定义文件CMakeLists.txt</li></ol><p>px4_simple_app.c代码内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @file px4_simple_app.c</span><br><span class="line"> * Minimal application example for PX4 autopilot</span><br><span class="line"> *</span><br><span class="line"> * @author Example User &lt;mail@example.com&gt;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#include &lt;px4_log.h&gt;</span><br><span class="line"></span><br><span class="line">__EXPORT int px4_simple_app_main(int argc, char *argv[]);</span><br><span class="line"></span><br><span class="line">int px4_simple_app_main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    PX4_INFO(&quot;Hello Sky!&quot;);</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">px4_add_module(</span><br><span class="line">    MODULE examples__px4_simple_app</span><br><span class="line">    MAIN px4_simple_app</span><br><span class="line">    STACK_MAIN 2000</span><br><span class="line">    SRCS</span><br><span class="line">        px4_simple_app.c</span><br><span class="line">    DEPENDS</span><br><span class="line">        platforms__common</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>px4_add_module()方法从模块描述构建静态库。 MAIN块列出了模块的名称 。这会将该模块与NuttX一起注册，以便可以从PX4 shell或SITL控制台调用它。</p><h2 id="编译链接"><a href="#编译链接" class="headerlink" title="编译链接"></a>编译链接</h2><p>针对不同的目标平台，使用不同的make命令构建：</p><ul><li>jMAVSim Simulator: make posix_sitl_default jmavsim</li><li>Pixhawk v1/2: make px4fmu-v2_default</li><li>Pixhawk v3: make px4fmu-v4_default</li></ul><h2 id="测试应用（硬件）"><a href="#测试应用（硬件）" class="headerlink" title="测试应用（硬件）"></a>测试应用（硬件）</h2><h3 id="上传固件到开发板"><a href="#上传固件到开发板" class="headerlink" title="上传固件到开发板"></a>上传固件到开发板</h3><p>在开发板上测试，使用如下命令上传PX4固件：</p><ul><li>Pixhawk v1/2: make px4fmu-v2_default upload</li><li>Pixhawk v3: make px4fmu-v4_default upload</li></ul><h3 id="连接控制台"><a href="#连接控制台" class="headerlink" title="连接控制台"></a>连接控制台</h3><p>现在通过串口或USB连接到系统控制台。 点击ENTER将弹出shell提示符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nsh&gt;</span><br><span class="line">nsh&gt;help</span><br><span class="line">nsh&gt; px4_simple_app</span><br><span class="line">Hello Sky!</span><br></pre></td></tr></table></figure><h2 id="测试应用（SITL）"><a href="#测试应用（SITL）" class="headerlink" title="测试应用（SITL）"></a>测试应用（SITL）</h2><p>如果您正在使用SITL，PX4控制台将自动启动。 与nsh控制台一样，您可以键入help以查看内置应用程序列表。</p><p>输入px4_simple_app以运行最小应用程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pxh&gt; px4_simple_app</span><br><span class="line">INFO  [px4_simple_app] Hello Sky!</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2019/04/26/PX4编译开发环境配置/">PX4编译开发环境配置</a>,by jackhuang.</li><li><a href="https://huangwang.github.io/2019/04/27/PX4开发基本概念解读/">PX4开发基本概念解读</a>,by jackhuang.</li><li><a href="https://dev.px4.io/en/apps/hello_sky.html" target="_blank" rel="noopener">First Application Tutorial (Hello Sky)</a>,by dronecode.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文说明如何创建和运行第一个板载应用程序。 它涵盖了PX4上应用程序开发所需的所有基本概念和API。&lt;/p&gt;
&lt;h1 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h1&gt;&lt;p&gt;在开发第
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV4.0相机标定教程</title>
    <link href="https://huangwang.github.io/2019/04/28/OpenCV4-0%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/04/28/OpenCV4-0相机标定教程/</id>
    <published>2019-04-28T14:55:38.000Z</published>
    <updated>2019-05-20T13:59:33.464Z</updated>
    
    <content type="html"><![CDATA[<p>相机已经存在了很长时间。 然而，随着20世纪后期廉价针孔相机的推出，它们成为我们日常生活中的常见现象。 不幸的是，这种便宜与其价格有关：严重失真。 幸运的是，这些是常数，并且通过校准和一些重新映射，我们可以纠正这一点。 此外，通过校准，您还可以确定相机的自然单位（像素）与真实世界单位（例如毫米）之间的关系。这个校准过程就是相机标定。</p><h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p>对于失真，OpenCV考虑了径向和切向因子。 对于径向因子，使用以下公式：</p><script type="math/tex; mode=display">x_{distorted} = x( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6) \\ y_{distorted} = y( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6)</script><p>因此，对于$（x，y）$坐标处的未失真像素点，其在失真图像上的位置将是$（x<em>{distorted},y</em>{distorted}）$。 径向变形的存在表现为“桶状”或“鱼眼”效应。</p><p>由于摄像镜头与成像平面不完全平行，因此会发生偏心畸变。 它可以通过公式表示：</p><script type="math/tex; mode=display">x_{distorted} = x + [ 2p_1xy + p_2(r^2+2x^2)] \\ y_{distorted} = y + [ p_1(r^2+ 2y^2)+ 2p_2xy]</script><p>所以我们有五个失真参数，在OpenCV中呈现为一行矩阵，有5列：</p><script type="math/tex; mode=display">distortion\_coefficients=(k_1 \hspace{10pt} k_2 \hspace{10pt} p_1 \hspace{10pt} p_2 \hspace{10pt} k_3)</script><p>现在我们使用以下公式进行单位转换：</p><script type="math/tex; mode=display">\left [ \begin{matrix} x \\ y \\ w \end{matrix} \right ] = \left [ \begin{matrix} f_x & 0 & c_x \\ 0 & f_y & c_y \\ 0 & 0 & 1 \end{matrix} \right ] \left [ \begin{matrix} X \\ Y \\ Z \end{matrix} \right ]</script><p>这里通过使用单应性坐标系（和$w = Z$）来解释$w$的存在。 未知参数是$f_x$和$f_y$（相机焦距）和（$c_x，c_y$），它们是以像素坐标表示的光学中心。 如果对于两个轴，使用具有给定纵横比（通常为1）的共同焦距，则$f_y = f_x <em> a$，并且在上部公式中，我们将具有单个焦距$f$。 包含这四个参数的矩阵称为<em>*相机矩阵</em></em>。 虽然无论使用何种相机分辨率，失真系数都是相同的，但应根据校准分辨率的当前分辨率进行缩放。</p><p>确定这两个矩阵的过程是校准。 通过基本几何方程计算这些参数。 使用的等式取决于所选择的校准对象。 目前，OpenCV支持三种类型的校准对象：</p><ul><li>古典黑白棋枰</li><li>对称的圆圈图案</li><li>不对称的圆圈图案</li></ul><p>基本上，您需要使用相机拍摄这些图案的快照，然后让OpenCV找到它们。 每个找到的模式都会产生一个新的等式。 要求解方程，您需要至少预定数量的模式快照，以形成一个良好的方程系统。 棋盘图案的数量较高，圆圈图案的数量较少。 例如，理论上棋盘图案需要至少两个快照。 但是，实际上我们的输入图像中存在大量噪声，因此为了获得良好的结果，您可能需要至少10个不同位置的输入模式的快照。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>OpenCV4.0中相机标定样例程序的目标：</p><ul><li>确定失真矩阵</li><li>确定相机矩阵</li><li>从摄像机，视频和图像文件列表中获取输入</li><li>从XML / YAML文件中读取配置</li><li>将结果保存到XML / YAML文件中</li><li>计算重新投影误差</li></ul><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><p>您也可以在OpenCV源库的samples / cpp / tutorial_code / calib3d / camera_calibration /文件夹中找到源代码，或从此处下载。要使用该程序，请使用-h参数运行它。该程序有一个重要的参数：配置文件的名称。如果没有给出，那么它将尝试打开名为“default.xml”的那个。这是XML格式的示例配置文件。在配置文件中，您可以选择将相机用作输入，视频文件或图像列表。如果选择最后一个，则需要创建一个配置文件，用于枚举要使用的图像。这是一个例子。要记住的重要部分是需要使用绝对路径或应用程序工作目录中的相对路径来指定图像。您可以在上面提到的samples目录中找到所有这些。</p><p>应用程序启动时从配置文件中读取设置。虽然这是它的一个重要部分，但它与本教程的主题无关：摄像机校准。因此，我选择不在此处发布该部分的代码。有关如何执行此操作的技术背景，您可以在使用XML和YAML文件的文件输入和输出教程中找到。</p><h1 id="构建相机标定程序"><a href="#构建相机标定程序" class="headerlink" title="构建相机标定程序"></a>构建相机标定程序</h1><p>切换到camera_calibration示例教程源代码所在目录，创建build临时目录并创建CMakeLists.txt文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/opencv/samples/cpp/tutorial_code/calib3d/camera_calibration/</span><br><span class="line">mkdir build</span><br><span class="line">touch CMakeLists.txt</span><br></pre></td></tr></table></figure><p>CMakeLists.txt文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line">set (CMAKE_CXX_STANDARD 11)</span><br><span class="line">project( camera_calibration )</span><br><span class="line">find_package( OpenCV REQUIRED )</span><br><span class="line">include_directories( $&#123;OpenCV_INCLUDE_DIRS&#125; )</span><br><span class="line">add_executable( camera_calibration camera_calibration.cpp )</span><br><span class="line">target_link_libraries( camera_calibration $&#123;OpenCV_LIBS&#125; )</span><br></pre></td></tr></table></figure></p><p>构建相机标定程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><h1 id="运行相机标定程序"><a href="#运行相机标定程序" class="headerlink" title="运行相机标定程序"></a>运行相机标定程序</h1><p>运行相机标定程序的目的在于获得相机的失真参数和内外参，其中相机的失真参数和内参只需标定一次便不再变化。下面以标定笔记本自带摄像头说明运行相机标定程序的步骤。</p><h2 id="修改标定配置参数"><a href="#修改标定配置参数" class="headerlink" title="修改标定配置参数"></a>修改标定配置参数</h2><p>找到camera_calibration/in_VID5.xml文件，这是标定程序使用的配置文件，需要设置里面的几个参数。</p><ul><li>修改棋盘格交叉点参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Number of inner corners per a item row and column. (square, circle) --&gt;</span><br><span class="line">&lt;BoardSize_Width&gt;9&lt;/BoardSize_Width&gt;</span><br><span class="line">&lt;BoardSize_Height&gt;6&lt;/BoardSize_Height&gt;</span><br></pre></td></tr></table></figure><p>需要特别注意的是，这里的宽度和高度是指内部交叉点的个数，而不是方形格的个数。如图1所示的棋盘格，内部交叉点的宽度是9，高度是6。请务必填写正确，否则无法标定。</p><p></p><p align="center">    <img src="images/chess.png" width="90%" alt="用于相机标定的棋盘格"></p><p></p><center>图1  用于相机标定的棋盘格</center><ul><li>修改每格的宽度</li></ul><p>每格的宽度应设置为实际的毫米数，该参数的实际用途尚待考证。目前看来，即使设置的不准确也无大碍。根据我使用的棋盘格，设置棋盘格参数42。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The size of a square in some user defined metric system (pixel, millimeter)--&gt;</span><br><span class="line">&lt;Square_Size&gt;42&lt;/Square_Size&gt;</span><br></pre></td></tr></table></figure><ul><li>设置图像输入方式</li></ul><p>例程提供了三种输入方式。不过，如果待标定的摄像头已经接入电脑，建议使用input camera方式。该方式只需要设置视频输入设备号，对于笔记本电脑来说，通常0表示笔记本自带摄像头，1表示外接摄像头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!-- The input to use for calibration. </span><br><span class="line">        To use an input camera -&gt; give the ID of the camera, like &quot;1&quot;</span><br><span class="line">        To use an input video  -&gt; give the path of the input video, like &quot;/tmp/x.avi&quot;</span><br><span class="line">        To use an image list   -&gt; give the path to the XML or YAML file containing the list of the images, like &quot;/tmp/circles_list.xml&quot;</span><br><span class="line">        --&gt;</span><br><span class="line">&lt;Input&gt;&quot;0&quot;&lt;/Input&gt;</span><br></pre></td></tr></table></figure><h2 id="执行相机标定程序"><a href="#执行相机标定程序" class="headerlink" title="执行相机标定程序"></a>执行相机标定程序</h2><p>运行如下命令开始标定笔记本自带摄像头，标定完成后将得到保存相关参数的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./camera_calibration ../in_VID5.xml</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.opencv.org/4.1.0/db/df5/tutorial_linux_gcc_cmake.html" target="_blank" rel="noopener">Using OpenCV with gcc and CMake</a>,by opencv.</li><li><a href="https://docs.opencv.org/4.1.0/d4/d94/tutorial_camera_calibration.html" target="_blank" rel="noopener">Camera calibration With OpenCV</a>,by opencv.</li><li><a href="https://stackoverflow.com/questions/49012222/c11-activation-with-target-compile-feature-or-set-cmake-cxx-standard" target="_blank" rel="noopener">C++11 activation with <target_compile_feature> or <set (cmake_cxx_standard)=""></set></target_compile_feature></a>,by stackoverflow.</li><li><a href="https://huangwang.github.io/2018/11/19/计算机视觉之相机成像原理与坐标系转换/">计算机视觉之相机成像原理与坐标系转换</a>,by jack huang.</li><li><a href="https://www.jianshu.com/p/967a35dbb56a" target="_blank" rel="noopener">OpenCV 相机参数标定（Camera Calibration）</a>,by Wafei.</li><li><a href="https://zhuanlan.zhihu.com/p/32030223" target="_blank" rel="noopener">图像二维坐标转世界三维坐标</a>, by 橙子.</li><li><a href="https://blog.csdn.net/cocoaqin/article/details/77485436" target="_blank" rel="noopener">solvepnp三维位姿估算</a>,by cocoaqin.</li><li><a href="http://zhaoxuhui.top/blog/2018/03/08/%E5%8D%95%E7%9B%AESLAM%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html" target="_blank" rel="noopener">单目SLAM理论基础</a>,by zhaoxuhui.</li><li><a href="http://zhaoxuhui.top/blog/2018/03/18/Location&amp;PoseEstimationInSLAM.html" target="_blank" rel="noopener">SLAM相机位姿估计(1)</a>,by zhaoxuhui.</li><li><a href="https://zhuanlan.zhihu.com/p/24651968" target="_blank" rel="noopener">张氏法相机标定</a>,by Lstyle.</li><li><a href="https://www.zhihu.com/question/29448299" target="_blank" rel="noopener">机器视觉的相机标定到底是什么？</a>, by zhihu.</li><li><a href="https://zhuanlan.zhihu.com/p/30813733" target="_blank" rel="noopener">相机标定究竟在标定什么？</a>,by 许翔翔.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相机已经存在了很长时间。 然而，随着20世纪后期廉价针孔相机的推出，它们成为我们日常生活中的常见现象。 不幸的是，这种便宜与其价格有关：严重失真。 幸运的是，这些是常数，并且通过校准和一些重新映射，我们可以纠正这一点。 此外，通过校准，您还可以确定相机的自然单位（像素）与真
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="opencv" scheme="https://huangwang.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu_16.04安装OpenCV的方法</title>
    <link href="https://huangwang.github.io/2019/04/28/Ubuntu-16-04%E5%AE%89%E8%A3%85opencv%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/04/28/Ubuntu-16-04安装opencv的方法/</id>
    <published>2019-04-28T11:38:11.000Z</published>
    <updated>2019-05-17T04:51:39.858Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录在Ubuntu16.04 LTS操作系统中从源代码编译安装OpenCV的过程。</p><h1 id="安装必需的软件包"><a href="#安装必需的软件包" class="headerlink" title="安装必需的软件包"></a>安装必需的软件包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[compiler] sudo apt-get install build-essential</span><br><span class="line">[required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">[optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure><h1 id="下载OpenCV源代码"><a href="#下载OpenCV源代码" class="headerlink" title="下载OpenCV源代码"></a>下载OpenCV源代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/&lt;my_working_directory&gt;</span><br><span class="line">git clone https://github.com/opencv/opencv.git</span><br><span class="line">git clone https://github.com/opencv/opencv_contrib.git</span><br></pre></td></tr></table></figure><h1 id="使用CMake构建OpenCV"><a href="#使用CMake构建OpenCV" class="headerlink" title="使用CMake构建OpenCV"></a>使用CMake构建OpenCV</h1><h2 id="创建临时的build目录"><a href="#创建临时的build目录" class="headerlink" title="创建临时的build目录"></a>创建临时的build目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~/opencv</span><br><span class="line"># 查看并检出OpenCV最新发布版</span><br><span class="line">git tag</span><br><span class="line">git checkout 4.1.0</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line"># 可选，如使用opencv_contrib, 采用如下命令生成编译配置文件</span><br><span class="line">$ cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules ..</span><br><span class="line"># 可选，构建示例程序和文档</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_EXAMPLES=1 -D BUILD_DOCS=1 ..</span><br></pre></td></tr></table></figure><h2 id="构建OpenCV"><a href="#构建OpenCV" class="headerlink" title="构建OpenCV"></a>构建OpenCV</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j3 # runs 3 jobs in parallel</span><br></pre></td></tr></table></figure><h2 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.opencv.org/4.1.0/d7/d9f/tutorial_linux_install.html" target="_blank" rel="noopener">Installation in Linux</a>, by opencv.</li><li><a href="https://github.com/opencv/opencv/issues/13154" target="_blank" rel="noopener">4.0.0 does not produce pkgconfig file</a>, by opencv.</li><li><a href="https://zh.wikipedia.org/zh-hans/Pkg-config" target="_blank" rel="noopener">Pkg-config</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文记录在Ubuntu16.04 LTS操作系统中从源代码编译安装OpenCV的过程。&lt;/p&gt;
&lt;h1 id=&quot;安装必需的软件包&quot;&gt;&lt;a href=&quot;#安装必需的软件包&quot; class=&quot;headerlink&quot; title=&quot;安装必需的软件包&quot;&gt;&lt;/a&gt;安装必需的软件包&lt;/h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="opencv" scheme="https://huangwang.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>PX4开发基本概念解读</title>
    <link href="https://huangwang.github.io/2019/04/27/PX4%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E8%A7%A3%E8%AF%BB/"/>
    <id>https://huangwang.github.io/2019/04/27/PX4开发基本概念解读/</id>
    <published>2019-04-27T14:02:29.000Z</published>
    <updated>2019-04-27T15:11:50.434Z</updated>
    
    <content type="html"><![CDATA[<p>进行PX4开发，必先了解PX4体系结构及相关概念。下面及简要介绍PX4开发的相关知识。</p><h1 id="PX4体系结构"><a href="#PX4体系结构" class="headerlink" title="PX4体系结构"></a>PX4体系结构</h1><p>PX4由两个层次组成：一是飞行控制栈(flight stack)，即自驾仪的软件解决方案，二是中间件，一种可以支持任意类型自主机器人的通用机器人中间件。</p><p>所有的无人机机型，事实上所有的包括船舶在内的机器人系统，都具有同一代码库。整个系统设计是反应式(reactive)的，这意味着：</p><ul><li>所有的功能被划分为可替换部件</li><li>通过异步消息传递进行通信</li><li>该系统可以应对不同的工作负载</li></ul><p>除了这些运行时考虑之外，其模块化最大限度地提高了系统的可重用性。</p><p></p><p align="center">    <img src="images/PX4_Architecture.svg" width="90%" alt="PX4体系结构"></p><p></p><center>图1  PX4体系结构</center><h2 id="飞行控制栈"><a href="#飞行控制栈" class="headerlink" title="飞行控制栈"></a>飞行控制栈</h2><p>飞行控制栈是自主无人机的引导、导航和控制算法的集合。它包括用于固定翼，多旋翼和垂直起降机身的控制器以及用于姿态和位置的估计器。</p><p>图2显示了飞行控制栈的构建块的预览。 它包含从传感器，RC输入和自主飞行控制（导航器）到电机或伺服控制（执行器）的完整管道。</p><p></p><p align="center">    <img src="images/PX4_High-Level_Flight-Stack.svg" width="90%" alt="PX4飞行控制栈结构图"></p><p></p><center>图2  PX4飞行控制栈结构图</center><p><strong>估计器</strong>采用一个或多个传感器输入，组合它们，并计算无人机状态（例如来自IMU传感器数据的姿态）。</p><p><strong>控制器</strong>是将设定值和测量或估计状态（过程变量）作为输入的组件。 其目标是调整过程变量的值，使其与设定值匹配。 输出是最终达到该设定点的校正。 例如，位置控制器将位置设定点作为输入，过程变量是当前估计的位置，输出是将车辆移向期望位置的姿态和推力设定点。</p><p><strong>混合器</strong>接受强制命令（例如向右转）并将它们转换为单独的电机命令，同时确保不超过某些限制。 该平移特定于无人机类型并且取决于各种因素，例如关于重心的马达布置或无人机的转动惯量。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件主要包括嵌入式传感器的设备驱动程序，与外部世界的通信（协同计算机，地面控制站等）和uORB发布 - 订阅消息总线。</p><p>此外，中间件包括一个模拟层，允许PX4飞行代码在桌面操作系统上运行，并在模拟的“世界”中控制计算机建模的无人机。</p><h2 id="更新速率"><a href="#更新速率" class="headerlink" title="更新速率"></a>更新速率</h2><p>由于模块等待消息更新，因此驱动程序通常会定义模块更新的速度。 大多数IMU驱动器以1kHz采样数据，将其集成并以250Hz发布。 系统的其他部分，例如导航器，不需要如此高的更新速率，因此运行速度相当慢。</p><p>可以通过运行uorb top在系统上实时检查消息更新率。</p><h2 id="运行时环境"><a href="#运行时环境" class="headerlink" title="运行时环境"></a>运行时环境</h2><p>PX4可在各种提供POSIX-API的操作系统上运行（例如Linux，macOS，NuttX或QuRT）。 它还应该具有某种形式的实时调度（例如FIFO）。</p><p>模块间通信（使用uORB）基于共享内存。 整个PX4中间件在单个地址空间中运行，即在所有模块之间共享存储器。</p><p>有两种不同的方式可以执行模块：</p><ul><li><strong>任务</strong>：模块在自己的任务中运行，具有自己的堆栈和进程优先级（这是更常见的方式）。</li><li><p><strong>工作队列</strong>：模块在共享任务上运行，这意味着它不拥有堆栈。 多个任务在同一堆栈上运行，每个工作队列具有一个优先级。</p><p>通过指定将来的固定时间来安排任务。 优点是它使用较少的RAM，但不允许任务在消息上休眠或轮询。</p><p>工作队列用于周期性任务，例如传感器驱动器或陆地探测器。</p></li></ul><h2 id="操作系统相关信息"><a href="#操作系统相关信息" class="headerlink" title="操作系统相关信息"></a>操作系统相关信息</h2><h3 id="NuttX"><a href="#NuttX" class="headerlink" title="NuttX"></a>NuttX</h3><p>NuttX是在飞行控制板上运行PX4的主要RTOS。 它是开源（BSD许可证），重量轻，高效且非常稳定。</p><p>模块作为任务执行：它们有自己的文件描述符列表，但它们共享一个地址空间。 任务仍然可以启动共享文件描述符列表的一个或多个线程。</p><p>每个任务/线程都有一个固定大小的堆栈，并且有一个周期性任务，它检查所有堆栈是否有足够的可用空间（基于堆栈着色）。</p><h3 id="Linux-MacOS"><a href="#Linux-MacOS" class="headerlink" title="Linux / MacOS"></a>Linux / MacOS</h3><p>在Linux或macOS上，PX4在单个进程中运行，并且模块在它们自己的线程中运行（NuttX上的任务和线程之间没有区别）。</p><h1 id="PX4飞行模式"><a href="#PX4飞行模式" class="headerlink" title="PX4飞行模式"></a>PX4飞行模式</h1><p>飞行模式定义了系统在任何给定时间的状态。用户可以使用远程遥控器或者QGroundControl地面站来进行飞行模式切换。</p><p></p><p align="center">    <img src="images/commander-flow-diagram.png" width="90%" alt="PX4飞行模式控制流程图"></p><p></p><center>图3  PX4飞行模式控制流程图</center><h1 id="Dronecode平台软硬件架构"><a href="#Dronecode平台软硬件架构" class="headerlink" title="Dronecode平台软硬件架构"></a>Dronecode平台软硬件架构</h1><p>Dronecode是开源的无人机平台，其软硬件体系结构如图4所示。图4左侧显示了一种可能的硬件配置，其中飞行控制器（浅蓝色）通过RTPS连接到感知计算机（深蓝色）。 感知计算机使用相机传感器阵列提供视觉控制和物体避免，并且具有单独的有效载荷相机。</p><p>图的右侧显示了端到端软件堆栈。 堆栈“近似”水平对齐图表的硬件部分，并进行颜色编码，以显示飞行控制器上运行的软件以及配套计算机上的软件。</p><p></p><p align="center">    <img src="images/dronecode_platform_architecture.jpg" width="90%" alt="Dronecode平台软硬件架构"></p><p></p><center>图4  Dronecode平台软硬件架构</center><h1 id="PX4位姿控制"><a href="#PX4位姿控制" class="headerlink" title="PX4位姿控制"></a>PX4位姿控制</h1><h2 id="多旋翼位置控制"><a href="#多旋翼位置控制" class="headerlink" title="多旋翼位置控制"></a>多旋翼位置控制</h2><p></p><p align="center">    <img src="images/px4_mc_position_controller_diagram.png" width="90%" alt="PX4多旋翼位置控制"></p><p></p><center>图5  PX4多旋翼位置控制</center><h1 id="混合和执行器"><a href="#混合和执行器" class="headerlink" title="混合和执行器"></a>混合和执行器</h1><p>PX4架构保证了核心控制器中不需要针对机身布局做特别处理。</p><p>混控指的是把输入指令（例如：遥控器打右转）分配到电机以及舵机的执行器（如电调或舵机PWM）指令。对于固定翼的副翼控制而言，每个副翼由一个舵机控制，那么混控的意义就是控制其中一个副翼抬起而另一个副翼落下。同样的，对多旋翼而言，俯仰操作需要改变所有电机的转速。</p><p>将混控逻辑从实际姿态控制器中分离出来可以大大提高复用性。</p><h2 id="控制管线"><a href="#控制管线" class="headerlink" title="控制管线"></a>控制管线</h2><p>一个特定的控制器（如姿态控制器）发送特定的归一化（-1..+1）的命令到给混合（mixing）,然后混合后输出独立的PWM到执行器（电调，舵机等）.在经过输出驱动如（串口，UAVCAN，PWM）等将归一化的值再转回特性的值（如输出1300的PWM等）。</p><p></p><p align="center">    <img src="images/control_pipeline.jpg" width="90%" alt="PX4控制管线"></p><p></p><center>图6  PX4控制管线</center><h2 id="控制组"><a href="#控制组" class="headerlink" title="控制组"></a>控制组</h2><p>PX4 有输入组和输出组的概念，顾名思义：控制输入组（如： attitude），就是用于核心的飞行姿态控制，（如： gimbal ）就是用于挂载控制. 一个输出组就是一个物理总线，如前8个PWM组成的总线用于舵机控制，组内带8个归一化（-1..+1）值,一个混合就是用于输入和输出连接方式（如:对于四轴来说,输入组有俯仰，翻滚，偏航等，对于于向前打俯仰操作，就需要改变输出组中的4个电调的PWM输出值，前俩个降低转速，后两个增加转速，飞机就向前）。</p><p>对于简单的固定翼来说，输入0（roll），就直接连接到输出的0（副翼）。对于多旋翼来说就不同了，输入0（roll）需要连接到所有的4个电机。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://dev.px4.io/en/" target="_blank" rel="noopener">PX4 Development Guide (STABLE - v1.8.2)</a>,by Dronecode.</li><li><a href="https://dev.px4.io/zh/" target="_blank" rel="noopener">PX4开发指南</a>, by Dronecode.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行PX4开发，必先了解PX4体系结构及相关概念。下面及简要介绍PX4开发的相关知识。&lt;/p&gt;
&lt;h1 id=&quot;PX4体系结构&quot;&gt;&lt;a href=&quot;#PX4体系结构&quot; class=&quot;headerlink&quot; title=&quot;PX4体系结构&quot;&gt;&lt;/a&gt;PX4体系结构&lt;/h1&gt;&lt;p
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="无人机" scheme="https://huangwang.github.io/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>PX4编译开发环境配置</title>
    <link href="https://huangwang.github.io/2019/04/26/PX4%E7%BC%96%E8%AF%91%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://huangwang.github.io/2019/04/26/PX4编译开发环境配置/</id>
    <published>2019-04-26T12:50:05.000Z</published>
    <updated>2019-04-27T14:02:48.300Z</updated>
    
    <content type="html"><![CDATA[<p>拟在基于NuttX的硬件平台如Pixhawk系列开源硬件平台上运行自定义的Px4自驾仪软件，因此需要建立Px4的编译开发环境。以官方文档推荐，在Ubuntu 16.04 LTS操作系统上建立Px4编译开发环境为例，记录整个配置过程。</p><h1 id="安装Ubuntu-16-04-LTS"><a href="#安装Ubuntu-16-04-LTS" class="headerlink" title="安装Ubuntu 16.04 LTS"></a>安装Ubuntu 16.04 LTS</h1><p>官方推荐在Mac OS和Linux上进行开发，因此选择安装Ubuntu 16.04 LTS作为Px4开发的操作系统。主要步骤如下：</p><ol><li>安装VirtualBox系统虚拟机</li><li>在VirtualBox创建虚拟机</li><li>在虚拟机中安装Ubuntu 16.04 LTS操作系统</li></ol><h1 id="Ubuntu中安装工具链"><a href="#Ubuntu中安装工具链" class="headerlink" title="Ubuntu中安装工具链"></a>Ubuntu中安装工具链</h1><h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><p>为了使当前用户能够访问串口，将当前用户添加到dialout组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G dialout $USER</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h2><h3 id="Pixhawk-NuttX-and-jMAVSim"><a href="#Pixhawk-NuttX-and-jMAVSim" class="headerlink" title="Pixhawk/NuttX (and jMAVSim)"></a>Pixhawk/NuttX (and jMAVSim)</h3><p>针对基于NuttX的硬件平台如Pixhawk构建开发工具链，步骤如下：</p><ol><li>下载ubuntu_sim_nuttx.sh</li><li>运行脚本ubuntu_sim_nuttx.sh</li><li>完成后重启</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim_nuttx.sh</span><br><span class="line">source ubuntu_sim_nuttx.sh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="编译Px4软件"><a href="#编译Px4软件" class="headerlink" title="编译Px4软件"></a>编译Px4软件</h1><h2 id="下载Px4源代码"><a href="#下载Px4源代码" class="headerlink" title="下载Px4源代码"></a>下载Px4源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/src</span><br><span class="line">cd ~/src</span><br><span class="line">git clone https://github.com/PX4/Firmware.git</span><br><span class="line"></span><br><span class="line">cd Firmware</span><br><span class="line"></span><br><span class="line"># list the releases (tags)</span><br><span class="line">git tag -l</span><br><span class="line"></span><br><span class="line"># Checkout code for particular tag (e.g. for tag v1.8.2 stable version)</span><br><span class="line">git checkout v1.8.2</span><br><span class="line"></span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>现在可以通过编译源代码来构建二进制文件。在直接使用硬件前，推荐先<strong>进行仿真</strong>。</p><h2 id="jMAVSim仿真器"><a href="#jMAVSim仿真器" class="headerlink" title="jMAVSim仿真器"></a>jMAVSim仿真器</h2><p>在直接使用硬件之前，以jMAVSim仿真器为目标平台构建PX4，验证PX4的正确性。<strong>注意在virtualbox中启动3D图形加速，防止jMAVSim运行出错！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make posix jmavsim</span><br><span class="line"></span><br><span class="line"># 起飞四旋翼无人机</span><br><span class="line">pxh&gt; commander takeoff</span><br></pre></td></tr></table></figure><h2 id="基于NuttX-Pixhawk的硬件板"><a href="#基于NuttX-Pixhawk的硬件板" class="headerlink" title="基于NuttX / Pixhawk的硬件板"></a>基于NuttX / Pixhawk的硬件板</h2><p>以Pixhawk为目标平台，构建PX4。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Firmware</span><br><span class="line">make px4fmu-v2_default</span><br></pre></td></tr></table></figure><p>注意到“make”是一个字符命令编译工具，“px4fmu-v2”是硬件/ardupilot版本，“default”是默认配置，所有的PX4编译目标遵循这个规则。</p><p>成功编译的最后输出是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[100%] Linking CXX executable firmware_nuttx</span><br><span class="line">[100%] Built target firmware_nuttx</span><br><span class="line">Scanning dependencies of target build/firmware_px4fmu-v2</span><br><span class="line">[100%] Generating nuttx-px4fmu-v2-default.px4</span><br><span class="line">[100%] Built target build/firmware_px4fmu-v2</span><br></pre></td></tr></table></figure><p>通过在命令后面添加‘upload’，编译的二进制程序就会通过USB上传到飞控硬件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make px4fmu-v2_default upload</span><br></pre></td></tr></table></figure><p>上传成功时输出情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Erase  : [====================] 100.0%</span><br><span class="line">Program: [====================] 100.0%</span><br><span class="line">Verify : [====================] 100.0%</span><br><span class="line">Rebooting.</span><br><span class="line"></span><br><span class="line">[100%] Built target upload</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://dev.px4.io/en/" target="_blank" rel="noopener">PX4 Development Guide (STABLE - v1.8.2)</a>,by Dronecode.</li><li><a href="https://dev.px4.io/zh/" target="_blank" rel="noopener">PX4开发指南</a>, by Dronecode.</li><li><a href="https://github.com/DrTon/jMAVSim/issues/42" target="_blank" rel="noopener">running JMAVSim in vmware fails</a>, by jMAVSim issues.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;拟在基于NuttX的硬件平台如Pixhawk系列开源硬件平台上运行自定义的Px4自驾仪软件，因此需要建立Px4的编译开发环境。以官方文档推荐，在Ubuntu 16.04 LTS操作系统上建立Px4编译开发环境为例，记录整个配置过程。&lt;/p&gt;
&lt;h1 id=&quot;安装Ubuntu
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="无人机" scheme="https://huangwang.github.io/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>硬件在环与软件在环概念辨析</title>
    <link href="https://huangwang.github.io/2019/04/25/%E7%A1%AC%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%B8%8E%E8%BD%AF%E4%BB%B6%E5%9C%A8%E7%8E%AF%E6%A6%82%E5%BF%B5%E8%BE%A8%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/04/25/硬件在环与软件在环概念辨析/</id>
    <published>2019-04-25T13:51:19.000Z</published>
    <updated>2019-04-25T14:46:16.952Z</updated>
    
    <content type="html"><![CDATA[<p>在PX4自驾仪软件的二次开发过程中，涉及硬件在环与软件在环两个概念，不易理解。下面对这两个概念进行辨析。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="硬件在环"><a href="#硬件在环" class="headerlink" title="硬件在环"></a>硬件在环</h2><p>硬件在环（Hardware in the Loop，简称HIL）即硬件在控制环路，是一种半实物仿真。根据控制器和控制对象是否为真实硬件，分为以下两种硬件在环方式：</p><ul><li>虚拟控制器+实际对象=快速控制原型(RCP)仿真系统，是系统的一种半实物仿真；</li><li>实际控制器+虚拟对象=硬件在回路(HIL)仿真系统，是系统的另一种半实物仿真。</li></ul><p>硬件在环主要用于测试控制器系统。</p><h2 id="软件在环"><a href="#软件在环" class="headerlink" title="软件在环"></a>软件在环</h2><p>软件在环主要测试控制器模型与控制器模型代码实现之间的一致性。</p><h2 id="处理器在环"><a href="#处理器在环" class="headerlink" title="处理器在环"></a>处理器在环</h2><p>软件在环主要测试控制器模型与控制器模型代码实现在目标处理器上运行之间的一致性。</p><h2 id="模型在环"><a href="#模型在环" class="headerlink" title="模型在环"></a>模型在环</h2><p>模型在环（Model in the Loop，简称MIL）是用模型驱动进行嵌入式系统的开发时，在开发阶段初期及建模阶段中进行的仿真方式。嵌入式系统需和其运作的环境互动，一般会预期有合理的传感器信号为其输入，也会依输入及系统设计来驱动实体系统。为了使系统正常工作，需要将嵌入式系统的环境纳入仿真考量范围内。若嵌入式系统模型和环境模型连接，一起进行仿真，则即称为模型在环模拟。</p><p>模型在环主要用于测试控制算法，其控制器模型和控制器对象都是虚拟的。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/32069347" target="_blank" rel="noopener">请明白人通俗的解释一下什么叫硬件在环？</a>, by zhihu.</li><li><a href="http://www.360doc.com/content/16/0908/10/22368478_589256146.shtml" target="_blank" rel="noopener">简单说说MIL、SIL、PIL和HIL</a>, by Wangxn665.</li><li><a href="https://zh.wikipedia.org/wiki/模型在环" target="_blank" rel="noopener">模型在环</a>, by wikipedia.</li><li><a href="https://baike.baidu.com/item/硬件在环" target="_blank" rel="noopener">硬件在环</a>, by 百度百科.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在PX4自驾仪软件的二次开发过程中，涉及硬件在环与软件在环两个概念，不易理解。下面对这两个概念进行辨析。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>机器人路径规划、轨迹规划和运动规划概念辨析</title>
    <link href="https://huangwang.github.io/2019/04/17/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92-%E8%BD%A8%E8%BF%B9%E8%A7%84%E5%88%92%E5%92%8C%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92%E6%A6%82%E5%BF%B5%E8%BE%A8%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/04/17/机器人路径规划-轨迹规划和运动规划概念辨析/</id>
    <published>2019-04-17T13:15:42.000Z</published>
    <updated>2019-04-17T13:56:21.132Z</updated>
    
    <content type="html"><![CDATA[<p>在机器人自动控制研究中，路径规划、轨迹规划和运动规划三个概念总是混淆不清，难以捉摸。下面结合各种资料，给出我个人的一些理解，对这三个概念进行辨析。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="路径规划（path-planning）"><a href="#路径规划（path-planning）" class="headerlink" title="路径规划（path planning）"></a>路径规划（path planning）</h2><p>路径是机器人位姿的一定序列，<strong>不考虑机器人位姿参数随时间变化的因素</strong>。路径规划（一般指位置规划）是找到一系列要经过的路径点，路径点是空间中的位置或关节角度。</p><h2 id="轨迹规划（trajectory-planning）"><a href="#轨迹规划（trajectory-planning）" class="headerlink" title="轨迹规划（trajectory planning）"></a>轨迹规划（trajectory planning）</h2><p>路径是机器人位姿的一定序列，<strong>不考虑机器人位姿参数随时间变化的因素</strong>。路径规划（一般指位置规划）是找到一系列要经过的路径点，路径点是空间中的位置或关节角度，而轨迹规划是赋予路径时间信息。</p><h2 id="运动规划（motion-planning）"><a href="#运动规划（motion-planning）" class="headerlink" title="运动规划（motion planning）"></a>运动规划（motion planning）</h2><p>运动规划就是在给定的位置A与位置B之间为机器人找到一条符合约束条件的路径。运动规划包含路径规划和轨迹规划。</p><p>运动规划，又称运动插补，是在给定的路径端点之间插入用于控制的中间点序列从而实现沿给定的平稳运动。</p><p>运动控制则是主要解决如何控制目标系统准确跟踪指令轨迹的问题，即对于给定的指令轨迹，选择适合的控制算法和参数，产生输出，控制目标实时，准确地跟踪给定的指令轨迹。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/wdzeng/p/9159575.html" target="_blank" rel="noopener">运动（motion）规划、路径（path）规划和轨迹（trajectory）规划之区别</a>,by Roger_Ceng.</li><li><a href="https://blog.csdn.net/wx545644217/article/details/54175035" target="_blank" rel="noopener">运动规划/路径规划/轨迹规划</a>,by 小白鼠2号.</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MDE2MjQ0OQ==&amp;mid=2652786406&amp;idx=1&amp;sn=f937dd6aa91344fed689baf51dc821ab#rd" target="_blank" rel="noopener">运动规划 | 简介篇</a>,by qqfly.</li><li><a href="https://www.zhihu.com/question/67867008" target="_blank" rel="noopener">无人车运动规划，路径规划，轨迹规划的区别和联系？</a>, by zhihu.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在机器人自动控制研究中，路径规划、轨迹规划和运动规划三个概念总是混淆不清，难以捉摸。下面结合各种资料，给出我个人的一些理解，对这三个概念进行辨析。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>FlightGear简易飞行教程</title>
    <link href="https://huangwang.github.io/2019/03/29/FlightGear%E7%AE%80%E6%98%93%E9%A3%9E%E8%A1%8C%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/03/29/FlightGear简易飞行教程/</id>
    <published>2019-03-29T02:29:07.000Z</published>
    <updated>2019-03-29T08:34:07.255Z</updated>
    
    <content type="html"><![CDATA[<p>FlightGear是一个始于1997年多平台飞行模拟器、自由软件项目。下面简要介绍如何在FlightGear中驾驶飞行。</p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="飞机操纵"><a href="#飞机操纵" class="headerlink" title="飞机操纵"></a>飞机操纵</h2><ul><li>9/3</li></ul><p>推力：9增加推力（油门），3减小推力（油门）</p><ul><li>4/6</li></ul><p>副翼：4向左滚转，6向右滚转</p><ul><li>8/2</li></ul><p>升降舵：8推杆低头，2拉杆抬头</p><ul><li>0/Enter</li></ul><p>方向舵：0向右偏航，Enter向右偏航</p><ul><li>5</li></ul><p>居中副翼/升降舵/方向舵</p><ul><li>]/[</li></ul><p>放/收襟翼</p><ul><li>g/G</li></ul><p>收/放起落架</p><ul><li>b/B</li></ul><p>刹车（全部轮胎）/或释放刹车</p><h2 id="视角变换"><a href="#视角变换" class="headerlink" title="视角变换"></a>视角变换</h2><ul><li>x/X</li></ul><p>放大/缩小</p><ul><li>v/V</li></ul><p>切换飞行员的观测模式</p><ul><li>Tab</li></ul><p>循环切换鼠标模式：正常模式(默认)、控制模式和查看模式。</p><h2 id="自动驾驶"><a href="#自动驾驶" class="headerlink" title="自动驾驶"></a>自动驾驶</h2><ul><li>Ctril + A</li></ul><p>高度保持开关</p><ul><li>Ctril + G</li></ul><p>下滑角跟随开关</p><ul><li>Ctril + H</li></ul><p>航向保持开关</p><ul><li>Ctril + N</li></ul><p>NAV 开关</p><ul><li>Ctril + T</li></ul><p>地形跟随开关</p><ul><li>Ctril + U</li></ul><p>高度增加 1000 英尺（紧急情况）</p><h1 id="起飞教程"><a href="#起飞教程" class="headerlink" title="起飞教程"></a>起飞教程</h1><p>起飞步骤如下：</p><p>1.启动引擎</p><p>在驾驶舱内通过按键启动飞机引擎的过程很麻烦，且各种类型飞机引擎启动过程不一样。幸运的是，FlightGear的飞机菜单中会有自动启动或快速启动的子菜单，点击它们自动启动飞机引擎和各种航电设备。</p><p>2.释放刹车</p><p>使用快捷键B释放刹车。</p><p>3.滑跑起飞</p><p>飞机尽量在跑道中央进行滑跑起飞，使用快捷键“0/Enter”控制飞机方向舵，使飞机在跑道中央滑跑; 当飞机达到起飞速度（一般200～300km/h）时，<strong>先使用快捷键“5”居中副翼/升降舵/方向舵，以降低飞机在空中操纵的难度，再使用快捷键“8/2”操纵飞机升降舵，注意应避免仰角过大</strong>。</p><h1 id="武器使用教程"><a href="#武器使用教程" class="headerlink" title="武器使用教程"></a>武器使用教程</h1><p>各种战斗机可通过飞机菜单选择不同武器加载方案。但各种战斗机的武器使用方法不一样，对应武器发射的快捷键也不一样，可通过菜单“Help-&gt;Aircraft Help”查看具体飞机的自定义快捷键。下面以官方飞机库中的F15和F16为例说明武器使用方法。</p><h2 id="F15"><a href="#F15" class="headerlink" title="F15"></a>F15</h2><p>F15武器使用步骤如下：</p><p>1.打开Master ARM开关</p><p>该军械总开关防止武器误发射，使用快捷键Ctrl+w控制。</p><p>2.选择武器</p><p>可选择航炮和导弹等武器，使用快捷键m控制</p><p>3.发射航炮或释放导弹</p><p>使用快捷键e控制，注意航炮按e就发射，而导弹按e得持续3秒钟才能释放导弹。</p><p>4.使用诱饵弹</p><p>使用快捷键Ctrl+q释放诱饵弹。</p><h2 id="F16"><a href="#F16" class="headerlink" title="F16"></a>F16</h2><p>F16武器使用步骤如下：</p><p>1.打开Master ARM开关</p><p>该开关防止武器误发射，使用快捷键m控制。</p><p>2.选择武器</p><p>可选择航炮和导弹等武器，使用快捷键w控制</p><p>3.发射航炮或释放导弹</p><p>使用快捷键e控制，注意航炮按e就发射，而导弹按e得持续3秒钟才能释放导弹。</p><p>4.使用诱饵弹</p><p>使用快捷键q释放诱饵弹。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/FlightGear" target="_blank" rel="noopener">FlightGear</a>,by wikipedia.</li><li><a href="http://www.flightgear.org.cn/thread-23-1-1.html" target="_blank" rel="noopener">FlightGear基本飞行操作快捷键</a>,by zxc.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;FlightGear是一个始于1997年多平台飞行模拟器、自由软件项目。下面简要介绍如何在FlightGear中驾驶飞行。&lt;/p&gt;
&lt;h1 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>JSBSim编程实践之入门</title>
    <link href="https://huangwang.github.io/2019/03/27/JSBSim%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/03/27/JSBSim编程实践之入门/</id>
    <published>2019-03-27T07:32:05.000Z</published>
    <updated>2019-03-27T08:12:15.251Z</updated>
    
    <content type="html"><![CDATA[<p>JSBSim是一个开源跨平台的飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。JSBSim可以独立运行，通过命令行参数指定飞行器和初始状态，进行简单情境下的飞行动力学仿真，也可以将JSBSim作为代码库，编程实现飞行器模型加载，设置输入，获得输出。下面即介绍在Linux平台编程调用JSBSim库的方法和步骤。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="gcc与g"><a href="#gcc与g" class="headerlink" title="gcc与g++"></a>gcc与g++</h2><p>GNU编译器套装（英语：GNU Compiler Collection，缩写为GCC），指一套编程语言编译器，以GPL及LGPL许可证所发行的自由软件，也是GNU项目的关键部分，也是GNU工具链的主要组成部分之一。GCC（特别是其中的C语言编译器）也常被认为是跨平台编译器的事实标准。</p><p>通常gcc用于编译链接c代码文件，而g++用于编译链接c++代码文件，但它们的使用方法很类似。下面介绍gcc和g++的常用选项。</p><ul><li>添加头文件搜索路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc foo.c -I /home/xiaowp/include -o foo</span><br></pre></td></tr></table></figure><ul><li>添加动态库搜索路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc foo.c -L /home/xiaowp/lib -lfoo -o foo</span><br></pre></td></tr></table></figure><ul><li>添加静态库搜索路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc foo.c -L /home/xiaowp/lib -static -lfoo -o foo</span><br></pre></td></tr></table></figure><h1 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h1><h2 id="最简仿真"><a href="#最简仿真" class="headerlink" title="最简仿真"></a>最简仿真</h2><p>下面是JSBSim参考手册中的最简单实例，因JSBSim的不断开发，JSBSim参考手册中该编程实例有点过时，因此进行了少量修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;FGFDMExec.h&gt;</span><br><span class="line">#include &lt;sg_path.hxx&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  JSBSim::FGFDMExec FDMExec;</span><br><span class="line">  bool result = true;</span><br><span class="line"> </span><br><span class="line">  FDMExec.LoadScript(SGPath::fromUtf8(argv[1]));</span><br><span class="line"> </span><br><span class="line">  while (result) result = FDMExec.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可知，调用JSBSim的主要方法是利用FGFDMExec类，通过实例化一个FGFDMExec类，就相当于获得了一个运行JSBSim仿真的工具箱，通过这个工具箱就可以调用JSBSim的大部分功能，实现我们要的仿真目标。</p><p>接下来对该实例进行编译链接，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># jsbsim_script.cpp是上述实例的代码文件</span><br><span class="line">g++ jsbsim_script.cpp -I ../jsbsim/src/ -I../jsbsim/src/simgear/misc  -L ../jsbsim/build/src/ -static -l JSBSim -o jsbsim_script</span><br></pre></td></tr></table></figure><p>测试该实例，使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># jsbsim是JSBSim项目文件夹</span><br><span class="line"># JSBSimTest是JSBSim测试实例所在文件夹</span><br><span class="line">cd jsbsim</span><br><span class="line">../JSBSimTest/jsbsim_script ./scripts/c1723.xml</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/yu_lei_/article/details/81916143" target="_blank" rel="noopener">JSBSim编程实践</a>,by 32768.</li><li><a href="https://huangwang.github.io/2019/03/20/Linux平台编译安装测试JSBSim/">Linux平台编译安装测试JSBSim</a>,by jack huang.</li><li><a href="http://jsbsim.sourceforge.net/documentation.html" target="_blank" rel="noopener">JSBSim Reference Manual </a>,by jsbsim.</li><li><a href="https://www.cnblogs.com/zxouxuewei/p/7263568.html" target="_blank" rel="noopener">gcc和g++头文件和库路径的寻找和添加</a>,by 周学伟.</li><li><a href="https://zh.wikipedia.org/wiki/GCC" target="_blank" rel="noopener">GCC</a>,by wikipedia.</li><li><a href="https://www.freelancinggig.com/blog/2017/11/10/difference-gcc-g/" target="_blank" rel="noopener">WHAT IS THE DIFFERENCE BETWEEN GCC AND G++</a>,by KITTY GUPTA.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JSBSim是一个开源跨平台的飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。JSBSim可以独立运行，通过命令行参数指定飞行器和初始状态，进行简单情境下的飞行动力学仿真，也可以将
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>四旋翼无人机制作简易教程</title>
    <link href="https://huangwang.github.io/2019/03/25/%E5%9B%9B%E6%97%8B%E7%BF%BC%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/03/25/四旋翼无人机制作简易教程/</id>
    <published>2019-03-25T13:40:54.000Z</published>
    <updated>2019-04-08T12:24:22.360Z</updated>
    
    <content type="html"><![CDATA[<p>四轴飞行器又称四旋翼、四转子，是一种多轴飞行器，有四个旋翼来悬停、维持姿态及平飞。和固定翼飞机不同，它通过旋翼提供的推力使飞机升空。它的四个旋翼大小相同，分布位置接近对称。对于简单的设计来说，仅仅通过调整不同旋翼之间的相对速度来调节不同位置的推力，并克服每个旋翼之间的反扭力矩，就可以控制飞机维持姿态、或完成各种机动飞行。下面简单介绍四旋翼无人机的制作过程。</p><h1 id="无人机硬件装配"><a href="#无人机硬件装配" class="headerlink" title="无人机硬件装配"></a>无人机硬件装配</h1><p>组装一件无人机所需配件及其连接示意图如图1所示。</p><p></p><p align="center">    <img src="images/drone_connect.jpg" width="100%" alt="四旋翼无人机机硬件连接图"></p><p></p><center>图1  四旋翼无人机机硬件连接图</center><p>所需配件主要有：</p><ul><li>机身骨架</li><li>一对正浆和一对反浆。注意浆的固定方向与电机旋转方向要一致。</li><li>遥控器及接收机</li><li>无刷电机及电调</li><li>ppm sum receiver</li><li>pixhawk 1，内含安全开关和蜂鸣器</li><li>gps</li><li>锂电池</li><li>云台和摄像头（可选）</li><li>telemetry无线收发装置与图传（可选）</li></ul><h1 id="无人机软件调试"><a href="#无人机软件调试" class="headerlink" title="无人机软件调试"></a>无人机软件调试</h1><h2 id="遥控器与接收机之间对码"><a href="#遥控器与接收机之间对码" class="headerlink" title="遥控器与接收机之间对码"></a>遥控器与接收机之间对码</h2><p>遥控器和接收机之间是配对的，使用之前必须对码，可根据遥控器的使用说明书进行操作。其连接示意图如图2所示。</p><p></p><p align="center">    <img src="images/pair_code.png" width="80%" alt="航模遥控器与接收机对码示意图"></p><p></p><center>图2  航模遥控器与接收机对码示意图</center><h2 id="电子调速器的油门行程和进角设置"><a href="#电子调速器的油门行程和进角设置" class="headerlink" title="电子调速器的油门行程和进角设置"></a>电子调速器的油门行程和进角设置</h2><p>电子调速器主要控制马达的转速，其调试连接示意图如图3所示。</p><p></p><p align="center">    <img src="images/esc.jpg" width="80%" alt="电子调速器连接示意图"></p><p></p><center>图3 电子调速器连接示意图</center><p>如图3所示将电子调速器连接后，即开始设置油门行程和电子调速器进角。设置油门行程即让电子调速器知道遥控器的油门输入范围。而电子调速器进角有高中低之分，类似于汽车档位。低进角速度慢但扭力大，高进角速度快但扭力小，一般设置电子调速器中进角即可满足大多数要求。具体设置说明参照电子调速器使用说明书。</p><h2 id="pixhawk飞控平台的设置"><a href="#pixhawk飞控平台的设置" class="headerlink" title="pixhawk飞控平台的设置"></a>pixhawk飞控平台的设置</h2><p>Pixhawk是PX4飞行堆栈的标准微控制器平台。在pixhawk硬件平台上可运行PX4和ArduPilot两种不同的自动驾驶仪软件套件。如果在pixhawk平台上安装px4自驾仪软件，则使用QGroundControl地面站软件进行设置；如果在pixhawk平台上安装ArduPilot自驾仪软件，则使用MissionPlanner地面站软件进行设置。</p><p>Pixhawk和GPS按照方向捆绑好后，按照地面站软件的指示进行设置。设置好之后，长按Pixhawk的安全开关，再将遥控器油门拉动底并推向最右方，即可解锁Pixhawk。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/四轴飞行器" target="_blank" rel="noopener">四轴飞行器</a>,by wikipedia.</li><li><a href="http://dev.px4.io/" target="_blank" rel="noopener">PX4 autopilot</a>, by px4 homepage.</li><li><a href="http://www.crazepony.com/book/" target="_blank" rel="noopener">Crazepony开源四轴飞行器</a>,by crazepony.</li><li><a href="https://en.wikipedia.org/wiki/ArduPilot" target="_blank" rel="noopener">ArduPilot</a>,by wikipedia.</li><li><a href="https://en.wikipedia.org/wiki/PX4_autopilot" target="_blank" rel="noopener">PX4 autopilot</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;四轴飞行器又称四旋翼、四转子，是一种多轴飞行器，有四个旋翼来悬停、维持姿态及平飞。和固定翼飞机不同，它通过旋翼提供的推力使飞机升空。它的四个旋翼大小相同，分布位置接近对称。对于简单的设计来说，仅仅通过调整不同旋翼之间的相对速度来调节不同位置的推力，并克服每个旋翼之间的反扭力
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="无人机" scheme="https://huangwang.github.io/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>FlightGear多人服务器的本地安装配置</title>
    <link href="https://huangwang.github.io/2019/03/20/FlightGear%E5%A4%9A%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://huangwang.github.io/2019/03/20/FlightGear多人服务器的本地安装配置/</id>
    <published>2019-03-20T12:28:23.000Z</published>
    <updated>2019-03-20T13:53:22.827Z</updated>
    
    <content type="html"><![CDATA[<p>FGMS或FlightGear多人游戏服务器是FlightGear的独立网络服务器，并根据GPL许可。 它允许通过FGFS内的网络与其他飞行员一起飞行。</p><p>FGMS服务器列表类型主要有：</p><ul><li>中继服务器 - 网络中的其他服务器。 每个都必须有完整的列表（减去自己）以获得适当的网络功能。</li><li>交叉馈送服务器 - 服务器从本地用户和其他服务器接收的所有内容都将转发到交叉馈送服务器。 用于在同一主机上运行多个连接的fgms实例，例如用于提供跟踪和未跟踪服务，而不会产生额外的外部流量。</li><li>跟踪服务器 - 服务器每10秒向跟踪器发送一个每个本地用户的摘要更新。</li><li>HUB服务器  - 通常服务器不会将从服务器接收的数据包发送到其他中继。 HUB服务器将数据从服务器发送到它知道的所有中继。</li></ul><p>特别呼号：</p><ul><li>“obsXXXX”（用您喜欢的任何字符替换X）允许连接的FlightGear客户端查看全球所有其他MP飞行员（位置数据和聊天消息），但对他们和MPmap保持不可见。</li><li>“mpdummy”阻止在FGTracker上跟踪飞行员。 不推荐 - 如果多个用户使用此呼号，服务器将忽略一些用户。 改为连接到未跟踪的服务器。</li></ul><h1 id="安装配置FGMS服务器"><a href="#安装配置FGMS服务器" class="headerlink" title="安装配置FGMS服务器"></a>安装配置FGMS服务器</h1><h2 id="下载FGMS服务器源码"><a href="#下载FGMS服务器源码" class="headerlink" title="下载FGMS服务器源码"></a>下载FGMS服务器源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.code.sf.net/p/fgms/src fgms-src</span><br></pre></td></tr></table></figure><h2 id="安装配置FGMS服务器源码"><a href="#安装配置FGMS服务器源码" class="headerlink" title="安装配置FGMS服务器源码"></a>安装配置FGMS服务器源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd fgms-src</span><br><span class="line">mkdir build</span><br><span class="line">cd build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">cd ..</span><br><span class="line">cp contrib/etc/fgms_production.skel.conf build/fgms.cfg</span><br><span class="line">cd build</span><br><span class="line">./fgms</span><br></pre></td></tr></table></figure><h1 id="安装配置FGMS跟踪服务器源码"><a href="#安装配置FGMS跟踪服务器源码" class="headerlink" title="安装配置FGMS跟踪服务器源码"></a>安装配置FGMS跟踪服务器源码</h1><h2 id="下载FGMS跟踪服务器源码"><a href="#下载FGMS跟踪服务器源码" class="headerlink" title="下载FGMS跟踪服务器源码"></a>下载FGMS跟踪服务器源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.code.sf.net/p/fgms/fgtracker fgms-fgtracker</span><br></pre></td></tr></table></figure><h1 id="FlightGear联网飞行配置"><a href="#FlightGear联网飞行配置" class="headerlink" title="FlightGear联网飞行配置"></a>FlightGear联网飞行配置</h1><p>联机前，请选择合适的服务器名（通常是mpserver0?.flightgear.org）和端口号(通常是5000)，然后按照以下方式启动FlightGear。</p><h2 id="使用向导程序"><a href="#使用向导程序" class="headerlink" title="使用向导程序"></a>使用向导程序</h2><p>在向导程序上专门有一个联网飞行选项，只要选中选项，填入服务器名和端口号以及你的昵称就可以了，你的昵称最长可以使7个字符。同时必须确定AI models选项选中，否则无法看到别的联网飞机。</p><h2 id="使用命令行方式"><a href="#使用命令行方式" class="headerlink" title="使用命令行方式"></a>使用命令行方式</h2><p>基本命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--multiplay=out,10,&lt;server&gt;,&lt;portnumber&gt;</span><br><span class="line">--multiplay=in,10,&lt;client&gt;,&lt;portnumber&gt;</span><br><span class="line">--callsign=&lt;anything&gt;</span><br><span class="line">--enable-ai-models</span><br></pre></td></tr></table></figure></p><p>备注:</p><ol><li><portnumber> 为端口号，比如5000.</portnumber></li><li><server> 为服务器名，比如mpserver01.flightgear.org.</server></li><li><client> 是你的计算机名，或者是你的联网的IP地址，比如本地IP地址192.168.0.1</client></li><li><callsign> 是你自己的昵称, 最多7个字符比如NFGFS.<br>当程序开始运行后，你可以在服务器地图上看到自己，如果看不到，检查一下程序是否有报错信息，按照下面将要介绍的内容检查错误。</callsign></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://wiki.flightgear.org/Howto:Multiplayer" target="_blank" rel="noopener">Howto:Multiplayer</a>,by flightgear home.</li><li><a href="http://wiki.flightgear.org/FlightGear_Multiplayer_Server" target="_blank" rel="noopener">FlightGear Multiplayer Server</a>,by flightgear home.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;FGMS或FlightGear多人游戏服务器是FlightGear的独立网络服务器，并根据GPL许可。 它允许通过FGFS内的网络与其他飞行员一起飞行。&lt;/p&gt;
&lt;p&gt;FGMS服务器列表类型主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中继服务器 - 网络中的其他服务器。 每个都必须
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
</feed>
