<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2018-11-26T03:43:03.791Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度强化学习研究笔记</title>
    <link href="https://huangwang.github.io/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/11/26/深度强化学习研究笔记/</id>
    <published>2018-11-26T02:07:07.000Z</published>
    <updated>2018-11-26T03:43:03.791Z</updated>
    
    <content type="html"><![CDATA[<p>深度强化学习Deep Reinforcement Learning是将深度学习与强化学习结合起来从而实现从Perception感知到Action动作的端对端学习End-to-End Learning的一种全新的算法。深度强化学习具备使机器人实现真正完全自主的学习一种甚至多种技能的潜力。</p><h1 id="深度强化学习的起源"><a href="#深度强化学习的起源" class="headerlink" title="深度强化学习的起源"></a>深度强化学习的起源</h1><p>深度强化学习是深度学习与强化学习相结合的产物。</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>在人工智能领域，一般用智能体Agent表示一个具备行为能力的物体，比如机器人，无人车等等。而强化学习则研究智能体Agent和环境Environment之间交互过程如何取得任务的成功。</p><p>强化学习与环境的交互过程如图1所示。在某个时间点，智能体Agent会获得观察值(Observation)和反馈值(Reward)，然后根据这些选择下一步的动作(Action)。</p><p></p><p align="center">    <img src="images/reinforce_learning.png" width="90%" alt="强化学习示意图"></p><p></p><center>图1 强化学习示意图</center><p>在整个过程中，任务的目标是获取尽可能多的Reward，这是任务的目标。而在每个时间片，Agent都是根据当前的观察来确定下一步的动作。观察Observation的集合就作为Agent的所处的状态State，因此，状态State和动作Action存在映射关系，也就是一个state可以对应一个action，或者对应不同动作的概率（常常用概率来表示，概率最高的就是最值得执行的动作）。状态与动作的关系其实就是输入与输出的关系，而状态State到动作Action的过程就称之为一个策略Policy，一般用 $\pi$  表示，也就是需要找到以下关系：</p><script type="math/tex; mode=display">a=\pi(s)</script><p>或者</p><script type="math/tex; mode=display">\pi(a|s)</script><p>其中a是action，s是state。第一种是一一对应的表示，第二种是概率的表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">强化学习的任务就是找到一个最优的策略Policy从而使Reward最多。</span><br></pre></td></tr></table></figure></p><p>强化学习的训练一开始从采用随机策略进行试验开始，可获得一系列的状态,动作和反馈：</p><script type="math/tex; mode=display">\{s_1,a_1,r_1,s_2,a_2,r_2,...,s_t,a_t,r_t\}</script><p>根据这一系列样本，强化学习从中改进策略，使得任务反馈Reward越来越多。</p><h2 id="深度强化学习"><a href="#深度强化学习" class="headerlink" title="深度强化学习"></a>深度强化学习</h2><p>深度强化学习始于DeepMind在NIPS 2013上发表的Playing Atari with Deep Reinforcement Learning一文，在该文中第一次提出Deep Reinforcement Learning 这个名称，并且提出DQN（Deep Q-Network）算法，实现从纯图像输入完全通过学习来玩Atari游戏的成果。</p><p>之后DeepMind在Nature上发表了改进版的DQN文章Human-level Control through Deep Reinforcement Learning，引起了广泛的关注，Deep Reinfocement Learning 从此成为深度学习领域的前沿研究方向。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/21262246?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃1 DQN与增强学习</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21292697?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃2 增强学习与MDP</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21340755?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃3 价值函数与Bellman方程</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21378532" target="_blank" rel="noopener">DQN 从入门到放弃4 动态规划与Q-Learning</a>,by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21421729" target="_blank" rel="noopener">DQN从入门到放弃5 深度解读DQN算法</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21547911" target="_blank" rel="noopener">DQN从入门到放弃6 DQN的各种改进</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21609472" target="_blank" rel="noopener">DQN从入门到放弃7 连续控制DQN算法-NAF</a>,by Flood Sung.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深度强化学习Deep Reinforcement Learning是将深度学习与强化学习结合起来从而实现从Perception感知到Action动作的端对端学习End-to-End Learning的一种全新的算法。深度强化学习具备使机器人实现真正完全自主的学习一种甚至多种
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>wiringPi学习笔记</title>
    <link href="https://huangwang.github.io/2018/11/24/wiringPi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/11/24/wiringPi学习笔记/</id>
    <published>2018-11-24T12:26:31.000Z</published>
    <updated>2018-11-24T13:36:53.344Z</updated>
    
    <content type="html"><![CDATA[<p>wiringPi 库是由 Gordon Henderson 所编写并维护的一个用 C 语言写成的类库。起初,主要是作为 BCM2835 芯片的 GPIO 库。而现在,已经非常丰富,除了 GPIO 库,还包括了I2C 库、SPI 库、UART 库和软件 PWM 库等。</p><p>由于其与 Arduino 的“wiring”系统较为类似,故以此命名。它是采用 GNU LGPLv3许可证的,可以在 C 或 C++上使用,而且在其他编程语言上也有对应的扩展。</p><p>wiringPi 库包含了一个命令行工具 gpio,它可以用来设置 GPIO 管脚,可以用来读写GPIO 管脚,甚至可以在 Shell 脚本中使用来达到控制 GPIO 管脚的目的。</p><h1 id="下载、编译和测试wiringPi"><a href="#下载、编译和测试wiringPi" class="headerlink" title="下载、编译和测试wiringPi"></a>下载、编译和测试wiringPi</h1><ol><li><p>下载并编译wiringPi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.drogon.net/wiringPi</span><br><span class="line">cd wiringPi</span><br><span class="line">./build</span><br></pre></td></tr></table></figure></li><li><p>测试wiringPi是否安装成功<br>打开命令终端，可以通过 gpio 命令来检查 wiringPi 是否安装成功，运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpio –v</span><br><span class="line">gpio readall</span><br></pre></td></tr></table></figure></li></ol><p>运行上述第二条命令将得到树莓派的 GPIO 接口之间的对应关系。</p><p align="center">    <img src="images/gpio_map.png" width="100%" alt="gpio管脚定义"></p><h1 id="使用wiringPi"><a href="#使用wiringPi" class="headerlink" title="使用wiringPi"></a>使用wiringPi</h1><p>在使用wiringPi之前，应首先对wiringPi进行设置。</p><h2 id="wiringPi设置函数"><a href="#wiringPi设置函数" class="headerlink" title="wiringPi设置函数"></a>wiringPi设置函数</h2><p>wiringPi设置函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int wiringPiSetup (void) ;</span><br><span class="line">int wiringPiSetupGpio (void) ;</span><br><span class="line">int wiringPiSetupPhys (void) ;</span><br><span class="line">int wiringPiSetupSys (void) ;</span><br></pre></td></tr></table></figure></p><h3 id="wiringPiSetup-void-函数"><a href="#wiringPiSetup-void-函数" class="headerlink" title="wiringPiSetup (void) 函数"></a>wiringPiSetup (void) 函数</h3><p>该函数初始化wiringPi，假定程序将使用wiringPi的管脚定义图。具体管脚映射，可以通过gpio readall命令来查看。该函数需要root权限。</p><h3 id="wiringPiSetupGpio-void-函数"><a href="#wiringPiSetupGpio-void-函数" class="headerlink" title="wiringPiSetupGpio (void) 函数"></a>wiringPiSetupGpio (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于假定程序使用的是Broadcom的GPIO管脚定义，而没有重新映射。该函数需要root权限，需要注意v1和v2版本的树莓派是不同的。</p><h3 id="wiringPiSetupPhys-void-函数"><a href="#wiringPiSetupPhys-void-函数" class="headerlink" title="wiringPiSetupPhys (void) 函数"></a>wiringPiSetupPhys (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于允许程序使用物理管脚定义，但仅支持P1接口。该函数需要root权限。</p><h3 id="wiringPiSetupSys-void-函数"><a href="#wiringPiSetupSys-void-函数" class="headerlink" title="wiringPiSetupSys (void) 函数"></a>wiringPiSetupSys (void) 函数</h3><p>该函数初始化wiringPi，使用/sys/class/gpio接口，而不是直接通过操作硬件来实现。该函数可以使用非root权限用户，在此种模式下的管脚号是Broadcom的GPIO管脚号，不wiringPiSetupGpio函数类似，需要注意v1和v2板子的不同。</p><p>在此种模式下，在运行程序前，您需要通过/sys/class/gpio接口导出要使用的管脚。你可以在一个独立的shell脚本中来导出将要使用的管脚，或者使用系统的system()函数来调用GPIO命令。</p><h2 id="软件-PWM-库"><a href="#软件-PWM-库" class="headerlink" title="软件 PWM 库"></a>软件 PWM 库</h2><p>wiringPi 中包含了一个软件驱动的 PWM (Pulse Width Modulation, 脉冲宽度调节)处理库，可以在任意的树莓派 GPIO 上输出 PWM 信号。</p><p>但是也有一些限制。为了维护较低的 CPU 使用率，最小的脉冲宽度是 100 微秒，结合默认的建议值为 100，那么最小的 PWM 频率是 100Hz。如果需要更高的频率，可以使用更低的数值。如果看脉冲宽度的驱动代码，你会发现低于 100 微秒，wiringPi 是在软件循环中实现的，这就意味着 CPU 使用率将会动态增加，从而使得控制其他管脚成为不可能。</p><p>需要注意的是，当其他程序运行在更高的实时的优先级，Linux 可能会影响产生信号的精度。尽管有这些限制，控制 LED 或电机还是可以的。</p><p>使用前,需要包含相应的文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;wiringPi.h&gt;</span><br><span class="line">#include &lt;softPwm.h&gt;</span><br></pre></td></tr></table></figure></p><p>当编译程序时,必须加上 pthread 库,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc –o myprog myprog.c –lwiringPi –lpthread</span><br></pre></td></tr></table></figure></p><p>必须使用 wiringPiSetup()、 wiringPiSetupGpio()或者 wiringPiSetupPhys()函数来初始化 wiringPi。</p><p>wiringPiSetupSys()是不够快的，因此，必须使用 sudo 命令来运行程序。</p><h3 id="softPwmCreate-函数"><a href="#softPwmCreate-函数" class="headerlink" title="softPwmCreate 函数"></a>softPwmCreate 函数</h3><p>该函数的原型为：int softPwmCreate(int pin, int initialValue, int pwmRange);</p><p>该函数将会创建一个软件控制的 PWM 管脚。可以使用任何一个 GPIO 管脚 , pwmRange 参数可以为 0(关)~100(全开)。</p><p>返回值为 0，代表成功，其他值，代表失败。</p><h3 id="softPwmWrite-函数"><a href="#softPwmWrite-函数" class="headerlink" title="softPwmWrite 函数"></a>softPwmWrite 函数</h3><p>该函数的原型为: void softPwmWrite(int pin, int value);</p><p>该函数将会更新指定管脚的 PWM 值。value 参数的范围将会被检查,如果指定的管脚之前没有通过 softPwmCreate 初始化,将会被忽略。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.lxx1.com/树莓派-wiringpi-用户手册" target="_blank" rel="noopener">树莓派 wiringPi 用户手册</a>, by 科技爱好者博客</li><li><a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a></li><li><a href="https://hanbingyan.github.io/2016/03/07/pthread_on_linux/" target="_blank" rel="noopener">Pthreads 入门教程</a>,by hanbingyan.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;wiringPi 库是由 Gordon Henderson 所编写并维护的一个用 C 语言写成的类库。起初,主要是作为 BCM2835 芯片的 GPIO 库。而现在,已经非常丰富,除了 GPIO 库,还包括了I2C 库、SPI 库、UART 库和软件 PWM 库等。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>人工智能——人类科技再次飞跃的门槛</title>
    <link href="https://huangwang.github.io/2018/11/21/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E2%80%94%E2%80%94%E4%BA%BA%E7%B1%BB%E7%A7%91%E6%8A%80%E5%86%8D%E6%AC%A1%E9%A3%9E%E8%B7%83%E7%9A%84%E9%97%A8%E6%A7%9B/"/>
    <id>https://huangwang.github.io/2018/11/21/人工智能——人类科技再次飞跃的门槛/</id>
    <published>2018-11-21T02:13:10.000Z</published>
    <updated>2018-11-26T02:03:54.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h1><h1 id="问题的分析"><a href="#问题的分析" class="headerlink" title="问题的分析"></a>问题的分析</h1><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;问题的提出&lt;/h1&gt;&lt;h1 id=&quot;问题的分析&quot;&gt;&lt;a href=&quot;#问题的分析&quot; class=&quot;headerlink&quot; title=&quot;问题的
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之神经网络</title>
    <link href="https://huangwang.github.io/2018/11/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://huangwang.github.io/2018/11/20/机器学习之神经网络/</id>
    <published>2018-11-20T15:36:43.000Z</published>
    <updated>2018-11-26T02:07:26.598Z</updated>
    
    <content type="html"><![CDATA[<p>人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。</p><p>神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统，通俗的讲就是具备学习功能。<strong>现代神经网络是一种非线性统计性数据建模工具</strong>。</p><h1 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h1><p>神经元示意图：</p><p></p><p align="center">    <img src="images/Ncell.png" width="90%" alt="神经元示意图"></p><p></p><center>图1 神经元示意图</center><ul><li>a1~an为输入向量的各个分量</li><li>w1~wn为神经元各个突触的权值</li><li>b为偏置</li><li>f为传递函数，通常为非线性函数。一般有Sigmoid(), ReLU(), Softmax()。</li><li>t为神经元输出</li></ul><p>神经元的数学表示是：$t=f(\vec{W^{‘}}\vec{A}+b)$</p><ul><li>$\vec{W}$为权向量，$\vec{W^{‘}}$为$\vec{W}$的转置</li><li>$\vec{A}$为输入向量</li><li>$b$为偏置</li><li>$f$为传递函数</li></ul><p>可见，一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果。</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><ul><li>Sigmoid函数</li></ul><p>Sigmoid函数也称S型激活函数，其将加权和转换为介于 0 和 1 之间的值。</p><script type="math/tex; mode=display">F(x)=\frac{1} {1+e^{-x}}</script><p>曲线图如下：</p><p></p><p align="center">    <img src="images/sigmoid.svg" width="90%" alt="S 型激活函数"></p><p></p><center>图2 S 型激活函数</center><ul><li>ReLU函数</li></ul><p>相较于 S 型函数等平滑函数，以下修正线性单元激活函数（简称为 ReLU）的效果通常要好一点，同时还非常易于计算。</p><script type="math/tex; mode=display">F(x)=max(0,x)</script><p>ReLU 的优势在于它基于实证发现（可能由 ReLU 驱动），拥有更实用的响应范围。S 型函数的响应性在两端相对较快地减少。</p><p></p><p align="center">    <img src="images/relu.svg" width="90%" alt="ReLU 激活函数"></p><p></p><center>图3 ReLU 激活函数</center><ul><li>Softmax函数</li></ul><p>Softmax函数用于多类别神经网络。在多类别问题中，Softmax 会为每个类别分配一个用小数表示的概率。这些用小数表示的概率相加之和必须是 1.0。</p><p>Softmax 方程式如下所示：</p><script type="math/tex; mode=display">p(y = j|\textbf{x})  = \frac{e^{(\textbf{w}_j^{T}\textbf{x} + b_j)}}{\sum_{k\in K} {e^{(\textbf{w}_k^{T}\textbf{x} + b_k)}} }</script><p>请注意，此公式本质上是将逻辑回归公式延伸到了多类别。</p><p>Softmax 层是紧挨着输出层之前的神经网络层。Softmax 层必须和输出层拥有一样的节点数。</p><p></p><p align="center">    <img src="images/SoftmaxLayer.svg" width="90%" alt="神经网络中的 Softmax 层"></p><p></p><center>图4 神经网络中的 Softmax 层</center><h1 id="神经元网络"><a href="#神经元网络" class="headerlink" title="神经元网络"></a>神经元网络</h1><p>神经元网络可分为单层神经元网络和多层神经元网络。而常用的是多层神经元网络。</p><h2 id="多层神经元网络"><a href="#多层神经元网络" class="headerlink" title="多层神经元网络"></a>多层神经元网络</h2><p>一种常见的多层结构的前馈网络（Multilayer Feedforward Network）由三部分组成，如图2所示：</p><p></p><p align="center">    <img src="images/activation.svg" width="90%" alt="包含激活函数的三层模型的图表"></p><p></p><center>图5 包含激活函数的三层模型的图表</center><ul><li>输入层（Input layer），众多神经元（Neuron）接受大量非线形输入消息。输入的消息称为输入向量。</li><li>输出层（Output layer），消息在神经元链接中传输、分析、权衡，形成输出结果。输出的消息称为输出向量。</li><li>隐藏层（Hidden layer），简称“隐层”，是输入层和输出层之间众多神经元和链接组成的各个层面。隐层可以有一层或多层。隐层的节点（神经元）数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性（robustness）（控制系统在一定结构、大小等的参数摄动下，维持某些性能的特性）更显著。习惯上会选输入节点1.2至1.5倍的节点。</li></ul><p>这种网络一般称为感知器（对单隐藏层）或多层感知器（对多隐藏层），神经网络的类型已经演变出很多种，这种分层的结构也并不是对所有的神经网络都适用。</p><h1 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h1><p>通常使用方向传播算法训练神经网络<sup>[3]</sup>，但一些常见情况都会导致反向传播算法出错。</p><ul><li>梯度消失</li></ul><p>较低层（更接近输入）的梯度可能会变得非常小。在深度网络中，计算这些梯度时，可能涉及许多小项的乘积。</p><p>当较低层的梯度逐渐消失到 0 时，这些层的训练速度会非常缓慢，甚至不再训练。</p><p>ReLU 激活函数有助于防止梯度消失。</p><ul><li>梯度爆炸</li></ul><p>如果网络中的权重过大，则较低层的梯度会涉及许多大项的乘积。在这种情况下，梯度就会爆炸：梯度过大导致难以收敛。</p><p>批标准化可以降低学习速率，因而有助于防止梯度爆炸。</p><ul><li>ReLU 单元消失</li></ul><p>一旦 ReLU 单元的加权和低于 0，ReLU 单元就可能会停滞。它会输出对网络输出没有任何贡献的 0 激活，而梯度在反向传播算法期间将无法再从中流过。由于梯度的来源被切断，ReLU 的输入可能无法作出足够的改变来使加权和恢复到 0 以上。</p><p>降低学习速率有助于防止 ReLU 单元消失。</p><ul><li>丢弃正则化</li></ul><p>这是称为丢弃的另一种形式的正则化，可用于神经网络。其工作原理是，在梯度下降法的每一步中随机丢弃一些网络单元。丢弃得越多，正则化效果就越强。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/人工神经网络" target="_blank" rel="noopener">人工神经网络</a>,by wikipedia.</li><li><a href="https://developers.google.com/machine-learning/crash-course/introduction-to-neural-networks/anatomy?hl=zh-cn" target="_blank" rel="noopener">神经网络简介</a>,by google.</li><li><a href="https://www.leiphone.com/news/201705/TMsNCqjpOIfN3Bjr.html" target="_blank" rel="noopener">一文详解神经网络 BP 算法原理及 Python 实现</a>,by AI研习社.</li><li><a href="https://google-developers.appspot.com/machine-learning/crash-course/backprop-scroll/?hl=zh-CN" target="_blank" rel="noopener">反向传播算法动态演示</a>, by google.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://huangwang.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之相关概念</title>
    <link href="https://huangwang.github.io/2018/11/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <id>https://huangwang.github.io/2018/11/19/机器学习之相关概念/</id>
    <published>2018-11-19T08:04:16.000Z</published>
    <updated>2018-11-26T02:07:36.738Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>机器学习有下面几种定义：</p><ul><li>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。</li><li>机器学习是对能通过经验自动改进的计算机算法的研究。</li><li>机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。</li></ul><p>一种经常引用的英文定义是：A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>机器学习可以分成下面几种类别：</p><ul><li>监督学习：从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。</li></ul><p>监督学习和非监督学习的差别就是训练集目标是否人标注。他们都有训练集且都有输入和输出。</p><ul><li>无监督学习：与监督学习相比，训练集没有人为标注的结果。常见的无监督学习算法有生成对抗网络（GAN）、聚类。</li><li>半监督学习：介于监督学习与无监督学习之间。</li><li>强化学习：通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>具体的机器学习算法有：</p><ul><li>构造间隔理论分布：聚类分析和模式识别<ul><li>人工神经网络</li><li>决策树</li><li>感知器</li><li>支持向量机</li><li>集成学习AdaBoost</li><li>降维与度量学习</li><li>聚类</li><li>贝叶斯分类器</li></ul></li><li>构造条件概率：回归分析和统计分类<ul><li>高斯过程回归</li><li>线性判别分析</li><li>最近邻居法</li><li>径向基函数核</li></ul></li><li>通过再生模型构造概率密度函数：<ul><li>最大期望算法</li><li>概率图模型：包括贝叶斯网和Markov随机场</li><li>Generative Topographic Mapping</li></ul></li><li>近似推断技术：<ul><li>马尔可夫链</li><li>蒙特卡罗方法</li><li>变分法</li></ul></li><li>最优化：大多数以上方法，直接或者间接使用最优化算法。</li></ul><h1 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签是我们要预测的事物，即简单线性回归中的 y 变量。标签可以是小麦未来的价格、图片中显示的动物品种、音频剪辑的含义或任何事物。</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>特征是输入变量，即简单线性回归中的 x 变量。简单的机器学习项目可能会使用单个特征，而比较复杂的机器学习项目可能会使用数百万个特征，按如下方式指定：</p><script type="math/tex; mode=display">\{ x_1,x_2,...x_N \}</script><p>在垃圾邮件检测器示例中，特征可能包括：</p><ul><li>电子邮件文本中的字词</li><li>发件人的地址</li><li>发送电子邮件的时段</li><li>电子邮件中包含“一种奇怪的把戏”这样的短语。</li></ul><h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>样本是指数据的特定实例：x。（我们采用粗体 x 表示它是一个矢量。）我们将样本分为以下两类：</p><ul><li>有标签样本</li><li>无标签样本</li></ul><p>有标签样本同时包含特征和标签，常用于训练模型。。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labeled examples: &#123;features, label&#125;: (x, y)</span><br></pre></td></tr></table></figure></p><p>无标签样本包含特征，但不包含标签，常用于模型预测。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlabeled examples: &#123;features, ?&#125;: (x, ?)</span><br></pre></td></tr></table></figure></p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>模型定义了特征与标签之间的关系。例如，垃圾邮件检测模型可能会将某些特征与“垃圾邮件”紧密联系起来。我们来重点介绍一下模型生命周期的两个阶段：</p><ul><li><p>训练表示创建或学习模型。向模型展示有标签样本，让模型逐渐学习特征与标签之间的关系。</p></li><li><p>推断表示将训练后的模型应用于无标签样本。使用训练后的模型来做出有用的预测 (y’)。</p></li></ul><h2 id="回归与分类"><a href="#回归与分类" class="headerlink" title="回归与分类"></a>回归与分类</h2><p>回归模型可预测连续值。例如，回归模型做出的预测可回答如下问题：</p><ul><li><p>加利福尼亚州一栋房产的价值是多少？</p></li><li><p>用户点击此广告的概率是多少？</p></li></ul><p>分类模型可预测离散值。例如，分类模型做出的预测可回答如下问题：</p><ul><li><p>某个指定电子邮件是垃圾邮件还是非垃圾邮件？</p></li><li><p>这是一张狗、猫还是仓鼠图片？</p></li></ul><h2 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h2><p>训练模型表示通过有标签样本来学习（确定）所有权重和偏差的理想值。在监督式学习中，机器学习算法通过以下方式构建模型：检查多个样本并尝试找出可最大限度地减少损失的模型；这一过程称为经验风险最小化。</p><p>损失是对糟糕预测的惩罚。也就是说，损失是一个数值，表示对于单个样本而言模型预测的准确程度。如果模型的预测完全准确，则损失为零，否则损失会较大。训练模型的目标是从所有样本中找到一组平均损失“较小”的权重和偏差。</p><p>平方损失：又称为 $L_2$ 损失,一种常见的损失函数。例如单个样本的平方损失如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">= the square of the difference between the label and the prediction</span><br><span class="line">= (observation - prediction(x))^2</span><br><span class="line">= (y - y&apos;)^2</span><br></pre></td></tr></table></figure></p><p>均方误差 (MSE) 指的是每个样本的平均平方损失。要计算 MSE，请求出各个样本的所有平方损失之和，然后除以样本数量：</p><script type="math/tex; mode=display">MSE = \frac{1}{N} \sum_{(x,y)\in D} (y - prediction(x))^2</script><p>其中：</p><ul><li>(x,y)指的是样本，其中<ul><li>x指的是模型进行预测时使用的特征集（例如，温度、年龄和交配成功率）。</li><li>y指的是样本的标签（例如，每分钟的鸣叫次数）。</li></ul></li><li>prediction(x)指的是权重和偏差与特征集 x 结合的函数。</li><li>D指的是包含多个有标签样本（即 (x,y)）的数据集。</li><li>N指的是D中的样本数量。</li></ul><h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2><p>下图显示了机器学习算法用于训练模型的迭代试错过程：</p><p></p><p align="center">    <img src="images/GradientDescentDiagram.svg" width="90%" alt="用于训练模型的迭代方法"></p><p></p><center>图1 用于训练模型的迭代方法</center><h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><p>计算参数更新的目标是在模型的迭代试错过程中，使损失越来越小。而常用的方法就是梯度下降法。</p><p></p><p align="center">    <img src="images/convex.svg" width="90%" alt="回归问题产生的损失与权重图为凸形"></p><p></p><center>图2 回归问题产生的损失与权重图为凸形</center><p>对于图2所示的凸形问题，刚好存在一个斜率正好为 0 的位置，即是损失函数的收敛之处。梯度下降法的第一个阶段是为$w_1$ 选择一个起始值（起点）。</p><p>然后，梯度下降法算法会计算损失曲线在起点处的梯度。简而言之，梯度是偏导数的矢量；它可以让您了解哪个方向距离目标“更近”或“更远”。</p><p>请注意，梯度是一个矢量，因此具有以下两个特征：</p><ul><li>方向</li><li>大小</li></ul><p>梯度始终指向损失函数中增长最为迅猛的方向。梯度下降法算法会沿着负梯度的方向走一步，以便尽快降低损失。</p><p>为了确定损失函数曲线上的下一个点，梯度下降法算法会将梯度大小的一部分与起点相加，如图3所示：</p><p></p><p align="center">    <img src="images/GradientDescentGradientStep.svg" width="90%" alt="一个梯度步长将我们移动到损失曲线上的下一个点"></p><p></p><center>图3 一个梯度步长将我们移动到损失曲线上的下一个点</center><p>然后，梯度下降法会重复此过程，逐渐接近最低点。</p><h3 id="学习速率"><a href="#学习速率" class="headerlink" title="学习速率"></a>学习速率</h3><p>梯度下降法算法用梯度乘以一个称为<strong>学习速率</strong>（有时也称为步长）的标量，以确定下一个点的位置。例如，如果梯度大小为 2.5，学习速率为 0.01，则梯度下降法算法会选择距离前一个点 0.025 的位置作为下一个点。</p><p><strong>超参数</strong>是编程人员在机器学习算法中用于调整的旋钮。大多数机器学习编程人员会花费相当多的时间来调整学习速率。如果您选择的学习速率过小，就会花费太长的学习时间。如果您指定的学习速率过大，下一个点将永远在 U 形曲线的底部随意弹跳。</p><h3 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h3><p>在梯度下降法中，<strong>批量</strong>指的是用于在单次迭代中计算梯度的样本总数。到目前为止，我们一直假定批量是指整个数据集。就 Google 的规模而言，数据集通常包含数十亿甚至数千亿个样本。此外，Google 数据集通常包含海量特征。因此，一个批量可能相当巨大。如果是超大批量，则单次迭代就可能要花费很长时间进行计算。</p><p>通过从我们的数据集中随机选择样本，我们可以通过小得多的数据集估算（尽管过程非常杂乱）出较大的平均值。 随机梯度下降法 (SGD) 将这种想法运用到极致，它每次迭代只使用一个样本（批量大小为 1）。如果进行足够的迭代，SGD 也可以发挥作用，但过程会非常杂乱。“随机”这一术语表示构成各个批量的一个样本都是随机选择的。</p><p>小批量随机梯度下降法（小批量 SGD）是介于全批量迭代与 SGD 之间的折衷方案。小批量通常包含 10-1000 个随机选择的样本。小批量 SGD 可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。</p><h2 id="泛化-Generalization"><a href="#泛化-Generalization" class="headerlink" title="泛化(Generalization)"></a>泛化(Generalization)</h2><p>泛化是指机器学习对从真实概率分布（已隐藏）中抽取的新数据做出良好预测的能力。要取得良好的泛化能力，机器学习必须满足以下基本假设，同时防止过拟合。</p><ul><li><p>机器学习的基本假设：</p><ul><li>从分布中随机抽取独立同分布 (i.i.d) 的样本。换言之，样本之间不会互相影响。（另一种解释：i.i.d. 是表示变量随机性的一种方式）。</li><li>分布是平稳的；即分布在数据集内不会发生变化。</li><li>从同一分布的数据划分中抽取样本。</li></ul></li><li><p><strong>过拟合</strong>模型在训练过程中产生的损失很低，但在预测新数据方面的表现却非常糟糕。</p></li></ul><h2 id="训练集与测试集"><a href="#训练集与测试集" class="headerlink" title="训练集与测试集"></a>训练集与测试集</h2><p>机器学习模型旨在根据以前未见过的新数据做出良好预测。但是，如果您要根据数据集构建模型，如何获得以前未见过的数据呢？一种方法是将您的数据集分成两个子集：</p><ul><li>训练集 - 用于训练模型的子集。</li><li>测试集 - 用于测试模型的子集。</li></ul><p>测试集应满足以下两个条件：</p><ul><li>规模足够大，可产生具有统计意义的结果。</li><li>能代表整个数据集。换言之，挑选的测试集的特征应该与训练集的特征相同。</li></ul><h2 id="验证集"><a href="#验证集" class="headerlink" title="验证集"></a>验证集</h2><p>将数据集划分为训练集和测试集两个子集是个不错的想法，但不是万能良方。通过将数据集划分为训练集、验证集、测试集三个子集，可以大幅降低过拟合的发生几率。</p><p>使用验证集评估训练集的效果。然后，在模型“通过”验证集之后，使用测试集再次检查评估结果。图4展示了这一新工作流程：</p><p></p><p align="center">    <img src="images/WorkflowWithValidationSet.svg" width="90%" alt="使用验证集的工作流程"></p><p></p><center>图4 使用验证集的工作流程</center><h2 id="特征表示"><a href="#特征表示" class="headerlink" title="特征表示"></a>特征表示</h2><p>特征工程指的是将原始数据转换为特征矢量。进行特征工程预计需要大量时间。</p><ul><li>映射数值: 机器学习模型根据浮点值进行训练，因此整数和浮点原始数据不需要特殊编码。</li><li>映射字符串值: 首先为要表示的所有特征的字符串值定义一个词汇表。然后使用该词汇表创建一个独热编码，用于将指定字符串值表示为二元矢量。</li><li>映射分类（枚举）值</li></ul><p></p><p align="center">    <img src="images/OneHotEncoding.svg" width="90%" alt="通过独热编码映射字符串值"></p><p></p><center>图5 通过独热编码映射字符串值</center><h3 id="良好特征的特点"><a href="#良好特征的特点" class="headerlink" title="良好特征的特点"></a>良好特征的特点</h3><ul><li>避免很少使用的离散特征值。</li></ul><p>良好的特征值应该在数据集中出现大约 5 次以上。这样一来，模型就可以学习该特征值与标签是如何关联的。</p><ul><li>最好具有清晰明确的含义。</li></ul><p>每个特征对于项目中的任何人来说都应该具有清晰明确的含义。例如，下面的房龄适合作为特征，可立即识别为年龄：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">house_age: 27</span><br></pre></td></tr></table></figure></p><ul><li>不要将“神奇”的值与实际数据混为一谈</li></ul><p>良好的浮点特征不包含超出范围的异常断点或“神奇”的值。例如，假设一个特征具有 0 到 1 之间的浮点值。那么，如下值是可以接受的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quality_rating: 0.82</span><br><span class="line">quality_rating: 0.37</span><br></pre></td></tr></table></figure></p><p>不过，如果用户没有输入 quality_rating，则数据集可能使用如下神奇值来表示不存在该值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quality_rating: -1</span><br></pre></td></tr></table></figure></p><p>为解决神奇值的问题，需将该特征转换为两个特征：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个特征只存储质量评分，不含神奇值。</span><br><span class="line"></span><br><span class="line">一个特征存储布尔值，表示是否提供了 quality_rating。为该布尔值特征指定一个名称，例如 is_quality_rating_defined。</span><br></pre></td></tr></table></figure></p><ul><li>考虑上游不稳定性</li></ul><p>特征的定义不应随时间发生变化。例如，下列值是有用的，因为城市名称一般不会改变。（注意，我们仍然需要将“br/sao_paulo”这样的字符串转换为独热矢量。）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city_id: &quot;br/sao_paulo&quot;</span><br></pre></td></tr></table></figure></p><p>但收集由其他模型推理的值会产生额外成本。可能值“219”目前代表圣保罗，但这种表示在未来运行其他模型时可能轻易发生变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inferred_city_cluster: &quot;219&quot;</span><br></pre></td></tr></table></figure></p><h3 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h3><p>即使是非常少量的坏样本会破坏掉一个大规模数据集，因此需花费大量的时间挑出坏样本并加工可以挽救的样本。</p><ol><li><p>缩放特征值: 缩放是指将浮点特征值从自然范围（例如 100 到 900）转换为标准范围（例如 0 到 1 或 -1 到 +1）。如果特征集包含多个特征，则缩放特征可以带来以下优势：</p><ul><li>帮助梯度下降法更快速地收敛。</li><li>帮助避免“NaN 陷阱”。</li><li>帮助模型为每个特征确定合适的权重。</li></ul></li><li><p>处理极端离群值</p><ul><li>对每个值取对数</li><li>将最大值“限制”为某个任意值</li></ul></li><li>分箱</li><li>清查</li></ol><p>数据集中的很多样本是不可靠的，原因有以下一种或多种：</p><ul><li>遗漏值。 例如，有人忘记为某个房屋的年龄输入值。</li><li>重复样本。 例如，服务器错误地将同一条记录上传了两次。</li><li>不良标签。 例如，有人错误地将一颗橡树的图片标记为枫树。</li><li>不良特征值。 例如，有人输入了多余的位数，或者温度计被遗落在太阳底下。</li></ul><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><p>图6泛化曲线显示的是训练集和验证集相对于训练迭代次数的损失。</p><p></p><p align="center">    <img src="images/RegularizationTwoLossFunctions.svg" width="90%" alt="训练集和验证集损失"></p><p></p><center>图6 训练集和验证集损失</center><p>图6显示的是某个模型的训练损失逐渐减少，但验证损失最终增加。换言之，该泛化曲线显示该模型与训练集中的数据过拟合。根据奥卡姆剃刀定律，或许我们可以通过降低复杂模型的复杂度来防止过拟合，这种原则称为正则化。</p><p>正则化以最小化损失和复杂度为目标，这称为结构风险最小化：</p><script type="math/tex; mode=display">\text{minimize(Loss(Data|Model) + complexity(Model))}</script><p>现在，训练优化算法是一个由两项内容组成的函数：一个是损失项，用于衡量模型与数据的拟合度，另一个是正则化项，用于衡量模型复杂度。</p><p>有两种常用衡量模型复杂度的方法：</p><ul><li>将模型复杂度作为模型中所有特征的权重的函数。</li><li>将模型复杂度作为具有非零权重的特征总数的函数。</li></ul><p>如果模型复杂度是权重的函数，则特征权重的绝对值越高，对模型复杂度的贡献就越大。</p><h3 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a>L2正则化</h3><p>可以使用 L2 正则化公式来量化复杂度，该公式将正则化项定义为所有特征权重的平方和：</p><script type="math/tex; mode=display">L_2\text{ regularization term} = ||\boldsymbol w||_2^2 = {w_1^2 + w_2^2 + ... + w_n^2}</script><p>在这个公式中，接近于 0 的权重对模型复杂度几乎没有影响，而离群值权重则可能会产生巨大的影响。</p><p>模型开发者通过以下方式来调整正则化项的整体影响：用正则化项的值乘以名为 lambda（又称为正则化率）的标量。也就是说，模型开发者会执行以下运算：</p><script type="math/tex; mode=display">\text{minimize(Loss(Data|Model)} + \lambda \text{ complexity(Model))}</script><p>执行 L2 正则化对模型具有以下影响:</p><ul><li>使权重值接近于 0（但并非正好为 0）</li><li>使权重的平均值接近于 0，且呈正态（钟形曲线或高斯曲线）分布。</li></ul><p>在选择 lambda 值时，目标是在简单化和训练数据拟合之间达到适当的平衡：</p><ul><li><p>如果您的 lambda 值过高，则模型会非常简单，但是您将面临数据欠拟合的风险。您的模型将无法从训练数据中获得足够的信息来做出有用的预测。</p></li><li><p>如果您的 lambda 值过低，则模型会比较复杂，并且您将面临数据过拟合的风险。您的模型将因获得过多训练数据特点方面的信息而无法泛化到新数据。</p></li></ul><h3 id="L1正则化"><a href="#L1正则化" class="headerlink" title="L1正则化"></a>L1正则化</h3><p>稀疏矢量通常包含许多维度。创建特征组合会导致包含更多维度。由于使用此类高维度特征矢量，因此模型可能会非常庞大，并且需要大量的 RAM。</p><p>在高维度稀疏矢量中，最好尽可能使权重正好降至 0。正好为 0 的权重基本上会使相应特征从模型中移除。 将特征设为 0 可节省 RAM 空间，且可以减少模型中的噪点。</p><p>L1 正则化使模型中很多信息缺乏的系数正好为 0，从而在推理时节省 RAM，同时具有凸优化的优势，可有效进行计算。</p><p>L2 和 L1 采用不同的方式降低权重：</p><ul><li>L2 会降低权重<sup>2</sup>。</li><li>L1 会降低 |权重|。</li></ul><p>因此，L2 和 L1 具有不同的导数：</p><ul><li>L2 的导数为 2 * 权重。</li><li>L1 的导数为 k（一个常数，其值与权重无关）。</li></ul><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>许多问题需要将概率估算值作为输出。逻辑回归是一种极其高效的概率计算机制。实际上，您可以通过下两种方式之一使用返回的概率：</p><ul><li>“按原样”</li><li>转换成二元类别。</li></ul><p>在很多情况下，您会将逻辑回归输出映射到二元分类问题的解决方案，该二元分类问题的目标是正确预测两个可能的标签（例如，“垃圾邮件”或“非垃圾邮件”）中的一个。</p><p>您可能想知道逻辑回归模型如何确保输出值始终落在 0 和 1 之间。巧合的是，S 型函数生成的输出值正好具有这些特性，其定义如下：</p><script type="math/tex; mode=display">y = \frac{1}{1 + e^{-z}}</script><p>S 型函数会产生以下曲线图：</p><p></p><p align="center">    <img src="images/SigmoidFunction.png" width="90%" alt="S 型函数"></p><p></p><center>图7 S 型函数</center><p>如果 z 表示使用逻辑回归训练的模型的线性层的输出，则 S 型(z) 函数会生成一个介于 0 和 1 之间的值（概率）。用数学方法表示为：</p><script type="math/tex; mode=display">y' = \frac{1}{1 + e^{-(z)}}</script><p>其中：</p><ul><li>y’ 是逻辑回归模型针对特定样本的输出。</li><li>z 是 b + w<sub>1</sub>x<sub>1</sub> + w<sub>2</sub>x<sub>2</sub> + … w<sub>N</sub>x<sub>N</sub><ul><li>“w”值是该模型学习的权重和偏差。</li><li>“x”值是特定样本的特征值。</li></ul></li></ul><p>请注意，z 也称为对数几率，因为 S 型函数的反函数表明，z 可定义为标签“1”（例如“狗叫”）的概率除以标签“0”（例如“狗不叫”）的概率得出的值的对数：</p><script type="math/tex; mode=display">z = log(\frac{y}{1-y})</script><h3 id="逻辑回归模型训练"><a href="#逻辑回归模型训练" class="headerlink" title="逻辑回归模型训练"></a>逻辑回归模型训练</h3><p>线性回归的损失函数是平方损失。逻辑回归的损失函数是对数损失函数，定义如下：</p><script type="math/tex; mode=display">Log Loss = \sum_{(x,y)\in D} -ylog(y') - (1 - y)log(1 - y')</script><p>其中：</p><ul><li>(xy)ϵD 是包含很多有标签样本 (x,y) 的数据集。</li><li>“y”是有标签样本中的标签。由于这是逻辑回归，因此“y”的每个值必须是 0 或 1。</li><li>“y’”是对于特征集“x”的预测值（介于 0 和 1 之间）。</li></ul><p>对数损失函数的方程式与 Shannon 信息论中的熵测量密切相关。它也是似然函数的负对数（假设“y”属于伯努利分布）。实际上，最大限度地降低损失函数的值会生成最大的似然估计值。</p><p>正则化在逻辑回归建模中极其重要。如果没有正则化，逻辑回归的渐近性会不断促使损失在高维度空间内达到 0。因此，大多数逻辑回归模型会使用以下两个策略之一来降低模型复杂性：</p><ul><li>L2 正则化。</li><li>早停法，即，限制训练步数或学习速率。</li></ul><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><h3 id="指定阈值"><a href="#指定阈值" class="headerlink" title="指定阈值"></a>指定阈值</h3><p>为了将逻辑回归值映射到二元类别，您必须指定分类阈值（也称为判定阈值）。如果值高于该阈值，则表示“垃圾邮件”；如果值低于该阈值，则表示“非垃圾邮件”。人们往往会认为分类阈值应始终为 0.5，但阈值取决于具体问题，因此您必须对其进行调整。</p><h3 id="真与假以及正类别与负类别"><a href="#真与假以及正类别与负类别" class="headerlink" title="真与假以及正类别与负类别"></a>真与假以及正类别与负类别</h3><ul><li>真正例是指模型将正类别样本正确地预测为正类别。</li><li>真负例是指模型将负类别样本正确地预测为负类别。</li><li>假正例是指模型将负类别样本错误地预测为正类别</li><li>假负例是指模型将正类别样本错误地预测为负类别。</li></ul><h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><p>准确率是一个用于评估分类模型的指标。通俗来说，准确率是指我们的模型预测正确的结果所占的比例。正式点说，准确率的定义如下：</p><script type="math/tex; mode=display">\text{Accuracy} = \frac{\text{Number of correct predictions}}{\text{Total number of predictions}}</script><p>对于二元分类，也可以根据正类别和负类别按如下方式计算准确率：</p><script type="math/tex; mode=display">\text{Accuracy} = \frac{TP+TN}{TP+TN+FP+FN}</script><p>其中，TP = 真正例，TN = 真负例，FP = 假正例，FN = 假负例。</p><h3 id="精确率和召回率"><a href="#精确率和召回率" class="headerlink" title="精确率和召回率"></a>精确率和召回率</h3><p>当使用分类不平衡的数据集（比如正类别标签和负类别标签的数量之间存在明显差异）时，单单准确率一项并不能反映全面情况。这时需要能够更好地评估分类不平衡问题的指标：精确率和召回率。</p><p>精确率的定义如下：</p><script type="math/tex; mode=display">\text{Precision} = \frac{TP}{TP+FP}</script><p>从数学上讲，召回率的定义如下：</p><script type="math/tex; mode=display">\text{Recall} = \frac{TP}{TP+FN}</script><p>要全面评估模型的有效性，必须同时检查精确率和召回率。遗憾的是，精确率和召回率往往是此消彼长的情况。</p><h3 id="ROC-和曲线下面积"><a href="#ROC-和曲线下面积" class="headerlink" title="ROC 和曲线下面积"></a>ROC 和曲线下面积</h3><p>ROC 曲线（接收者操作特征曲线）是一种显示分类模型在所有分类阈值下的效果的图表。该曲线绘制了以下两个参数：</p><ul><li>真正例率</li><li>假正例率</li></ul><p>真正例率 (TPR) 是召回率的同义词，因此定义如下：</p><script type="math/tex; mode=display">TPR = \frac{TP} {TP + FN}</script><p>假正例率 (FPR) 的定义如下：</p><script type="math/tex; mode=display">FPR = \frac{FP} {FP + TN}</script><p>ROC 曲线用于绘制采用不同分类阈值时的 TPR 与 FPR。降低分类阈值会导致将更多样本归为正类别，从而增加假正例和真正例的个数。下图显示了一个典型的 ROC 曲线。</p><p></p><p align="center">    <img src="images/ROCCurve.svg" width="90%" alt="不同分类阈值下的 TP 率与 FP 率"></p><p></p><center>图8 不同分类阈值下的 TP 率与 FP 率</center><p>曲线下面积表示“ROC 曲线下面积”。也就是说，曲线下面积测量的是从 (0,0) 到 (1,1) 之间整个 ROC 曲线以下的整个二维面积（参考积分学）。</p><p></p><p align="center">    <img src="images/AUC.svg" width="90%" alt="曲线下面积（ROC 曲线下面积）"></p><p></p><center>图9 曲线下面积（ROC 曲线下面积）</center><p>曲线下面积对所有可能的分类阈值的效果进行综合衡量。曲线下面积的一种解读方式是看作模型将某个随机正类别样本排列在某个随机负类别样本之上的概率。</p><p>曲线下面积的取值范围为 0-1。预测结果 100% 错误的模型的曲线下面积为 0.0；而预测结果 100% 正确的模型的曲线下面积为 1.0。</p><p>曲线下面积因以下两个原因而比较实用：</p><ul><li>曲线下面积的尺度不变。它测量预测的排名情况，而不是测量其绝对值。</li><li>曲线下面积的分类阈值不变。它测量模型预测的质量，而不考虑所选的分类阈值。</li></ul><p>不过，这两个原因都有各自的局限性，这可能会导致曲线下面积在某些用例中不太实用：</p><ul><li><p>并非总是希望尺度不变。 例如，有时我们非常需要被良好校准的概率输出，而曲线下面积无法告诉我们这一结果。</p></li><li><p>并非总是希望分类阈值不变。 在假负例与假正例的代价存在较大差异的情况下，尽量减少一种类型的分类错误可能至关重要。例如，在进行垃圾邮件检测时，您可能希望优先考虑尽量减少假正例（即使这会导致假负例大幅增加）。对于此类优化，曲线下面积并非一个实用的指标。</p></li></ul><h2 id="预测偏差"><a href="#预测偏差" class="headerlink" title="预测偏差"></a>预测偏差</h2><p>逻辑回归预测应当无偏差。即:</p><script type="math/tex; mode=display">\text{预测平均值}\approx\text{观察平均值}</script><p>预测偏差指的是这两个平均值之间的差值。即：</p><script type="math/tex; mode=display">\text{预测偏差} = \text{预测平均值} - \text{数据集中相应标签的平均值}</script><p>造成预测偏差的可能原因包括：</p><ul><li>特征集不完整</li><li>数据集混乱</li><li>模型实现流水线中有错误？</li><li>训练样本有偏差</li><li>正则化过强</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/机器学习" target="_blank" rel="noopener">机器学习</a>，by wikipedia.</li><li><a href="https://developers.google.com/machine-learning/crash-course/ml-intro?hl=zh-cn" target="_blank" rel="noopener">机器学习速成课程</a>，by google.</li><li><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">MathJax使用LaTeX语法编写数学公式教程</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。&lt;/p&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉之相机成像原理与坐标系转换</title>
    <link href="https://huangwang.github.io/2018/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B9%8B%E7%9B%B8%E6%9C%BA%E6%88%90%E5%83%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E8%BD%AC%E6%8D%A2/"/>
    <id>https://huangwang.github.io/2018/11/19/计算机视觉之相机成像原理与坐标系转换/</id>
    <published>2018-11-19T08:02:41.000Z</published>
    <updated>2018-11-19T15:44:42.918Z</updated>
    
    <content type="html"><![CDATA[<p>计算机视觉是一门研究用摄影机和计算机代替人眼对目标进行识别、跟踪和测量的学科。为了解该门学科，首先应掌握投影原理和世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换关系。</p><h1 id="三维投影"><a href="#三维投影" class="headerlink" title="三维投影"></a>三维投影</h1><p>计算机3D图形学中，三维投影是将三维空间中的点映射到二维平面上的方法。常用三维投影有正交投影和透视投影。正交投影通常用于对现实物品的三维建模，而透视投影与人的视觉系统类似，常用于在二维平面呈现三维世界。</p><h2 id="正交投影原理"><a href="#正交投影原理" class="headerlink" title="正交投影原理"></a>正交投影原理</h2><p>正交投影是一系列用于显示三维物体的轮廓、细节或精确测量结果的变换方法。通常又称作截面图、鸟瞰图或立面图。</p><p>当视平面的法向（即摄像机的朝向）平行于笛卡尔坐标系三根坐标轴中的一根，数学变换定义如下： 若使用一个平行于y轴（侧视图）的正交投影将三维点 $a<em>{x}$, $a</em>{y}$,$a<em>{z}$投影到二维平面上得到二维点 $b</em>{x}$,$b_{y}$，可以使用如下公式</p><script type="math/tex; mode=display">b_x=s_xa_x+c_x</script><script type="math/tex; mode=display">b_y=s_za_z+c_z</script><p>其中向量s是一个任意的缩放因子，而c是一个任意的偏移量。这些常量可自由选择，通常用于将视口调整到一个合适的位置。该投影变换同样可以使用矩阵表示（为清晰起见引入临时向量d）</p><script type="math/tex; mode=display">\begin{bmatrix}    d_x  \\    d_y  \\\end{bmatrix}=\begin{bmatrix}    1 & 0 & 0 \\    0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}    a_x \\    a_y \\    a_z \\\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}    b_x\\    b_y\\\end{bmatrix}=\begin{bmatrix}    s_x & 0 \\    0     & s_z \\\end{bmatrix}\begin{bmatrix}    d_x\\    d_y\\\end{bmatrix}+\begin{bmatrix}    c_x\\    c_z\\\end{bmatrix}</script><p>虽然正交投影产生的图像在一定程度上反映了物体的三维特性，但此类投影图像和实际观测到的并不相同。特别是对于相同长度的平行线段，无论离虚拟观察者（摄像机）远近与否，它们都会在正交投影中显示为相同长度。这会导致较近的线段看起来被缩短了。</p><h2 id="透视投影原理"><a href="#透视投影原理" class="headerlink" title="透视投影原理"></a>透视投影原理</h2><p>透视投影是为了获得接近真实三维物体的视觉效果而在二维的纸或者画布平面上绘图或者渲染的一种方法，它也称为透视图。透视投影的绘制必须根据已有的几何规则进行。</p><p>常用的透视投影视椎体模型如图1所示。设视点E位于原点，视平面P垂直于Z轴，且四边分别平行于x轴和y轴，视椎体的近截面离视点的距离为n，远截面离视点的距离为f，且一般取近截面为视平面。</p><p></p><p align="center">    <img src="images/perspective_model.jpg" width="90%" alt="透视投影的标准视椎体模型"></p><p></p><center>图1 透视投影的标准视椎体模型</center><h1 id="坐标系之间的转换"><a href="#坐标系之间的转换" class="headerlink" title="坐标系之间的转换"></a>坐标系之间的转换</h1><p>计算机视觉通常涉及到四个坐标系：像素平面坐标系（u,v）、像平面坐标系（图像物理坐标第（x,y）、相机坐标系（Xc,Yc,Zc）和世界坐标系（Xw,Yw,Zw），如图2所示。</p><p></p><p align="center">    <img src="images/four_axis.png" width="90%" alt="四个坐标系"></p><p></p><center>图2 四个坐标系</center><p>1 : 世界坐标系：根据情况而定，可以表示任何物体。单位m。</p><p>2：相机坐标系：以摄像机光心为原点（在针孔模型中也就是针孔为光心），z轴与光轴重合也就是z轴指向相机的前方（也就是与成像平面垂直），x轴与y轴的正方向与物体坐标系平行，其中上图中的f为摄像机的焦距。单位m</p><p>3：图像物理坐标系（也叫平面坐标系）：用物理单位表示像素的位置，坐标原点为摄像机光轴与图像物理坐标系的交点位置。坐标系为图上o-xy。单位是mm。单位毫米的原因是此时由于相机内部的CCD传感器是很小的，比如8mm x 6mm。但是最后图像照片是也像素为单位比如640x480.这就涉及到了图像物理坐标系与像素坐标系的变换了。下面的像素坐标系将会讲到。</p><p>4：像素坐标系：以像素为单位，坐标原点在左上角。这也是一些opencv，OpenGL等库的坐标原点选在左上角的原因。当然明显看出CCD传感器以mm单位到像素中间有转换的。举个例子，CCD传感上上面的8mm x 6mm，转换到像素大小是640x480. 假如dx表示像素坐标系中每个像素的物理大小就是1/80. 也就是说毫米与像素点的之间关系是piexl/mm.</p><h2 id="世界坐标系到相机坐标系的转换"><a href="#世界坐标系到相机坐标系的转换" class="headerlink" title="世界坐标系到相机坐标系的转换"></a>世界坐标系到相机坐标系的转换</h2><p>物体之间的坐标系变换都可以表示坐标系的旋转变换加上平移变换，则世界坐标系到相机坐标系的转换关系也是如此，他们之间的变换如图3所示。</p><p></p><p align="center">    <img src="images/worldtocamera.jpg" width="90%" alt="世界坐标系到相机坐标系的转换"></p><p></p><center>图3 世界坐标系到相机坐标系的转换</center><p>可以得到P点在相机坐标系下的坐标:</p><script type="math/tex; mode=display">\begin{bmatrix}    X_c\\    Y_c\\    Z_c\\\end{bmatrix}=R\begin{bmatrix}    X_w\\    Y_w\\    Z_w\\\end{bmatrix}+T\Rightarrow \begin{bmatrix}    X_c\\    Y_c\\    Z_c\\    1\\\end{bmatrix}=\begin{bmatrix}    R & T\\    \vec{0} & 1\\\end{bmatrix}\begin{bmatrix}    X_w\\    Y_w\\    Z_w\\    1\\\end{bmatrix},R:3*3,T:3*1</script><h2 id="相机坐标系到图像物理坐标系的转换"><a href="#相机坐标系到图像物理坐标系的转换" class="headerlink" title="相机坐标系到图像物理坐标系的转换"></a>相机坐标系到图像物理坐标系的转换</h2><p>从相机坐标系到图像坐标系，属于透视投影关系，从3D转换到2D。 也可以看成是针孔模型的变种。该转换满足三角形的相似定理，如图4所示。</p><p></p><p align="center">    <img src="images/3dto2d.jpg" width="90%" alt="相机坐标系到图像物理坐标系的转换"></p><p></p><center>图4 相机坐标系到图像物理坐标系的转换</center><h2 id="图像物理坐标系到像素坐标系的转换"><a href="#图像物理坐标系到像素坐标系的转换" class="headerlink" title="图像物理坐标系到像素坐标系的转换"></a>图像物理坐标系到像素坐标系的转换</h2><p>图像物理坐标系到像素坐标系的转换不涉及旋转变换，但是坐标原点位置不一致，大小不一致，涉及伸缩变换及平移变换，如图5所示。</p><p></p><p align="center">    <img src="images/image2uv.jpg" width="90%" alt="图像物理坐标系到像素坐标系的转换"></p><p></p><center>图5 图像物理坐标系到像素坐标系的转换</center><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>四个坐标系之间存在着下述关系 ( 矩阵依次左乘 )，如图6所示:</p><p></p><p align="center">    <img src="images/summary1.jpg" width="90%" alt="世界坐标系到像素坐标系的转换"></p><p></p><p></p><p align="center">    <img src="images/summary2.jpg" width="90%"></p><p></p><center>图6 世界坐标系到像素坐标系的转换</center><p>其中相机的内参和外参可以通过张正友标定获取。通过最终的转换关系来看，一个三维中的坐标点，的确可以在图像中找到一个对应的像素点，但是反过来，通过图像中的一个点找到它在三维中对应的点就很成了一个问题，因为我们并不知道等式左边的Z<sub>c</sub>的值。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki三维投影" target="_blank" rel="noopener">三维投影</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/Goncely/article/details/5397729" target="_blank" rel="noopener">透视投影的原理和实现</a>,by Goncely.</li><li><a href="https://blog.csdn.net/chentravelling/article/details/53558096" target="_blank" rel="noopener">计算机视觉：相机成像原理：世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换</a>,by 生活没有if-else</li><li><a href="https://blog.csdn.net/lyl771857509/article/details/79633412" target="_blank" rel="noopener">【相机标定】四个坐标系之间的变换关系</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机视觉是一门研究用摄影机和计算机代替人眼对目标进行识别、跟踪和测量的学科。为了解该门学科，首先应掌握投影原理和世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换关系。&lt;/p&gt;
&lt;h1 id=&quot;三维投影&quot;&gt;&lt;a href=&quot;#三维投影&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="透视投影" scheme="https://huangwang.github.io/tags/%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>生活中的统计学之购买车展黄牛票</title>
    <link href="https://huangwang.github.io/2018/11/17/%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%8B%E8%B4%AD%E4%B9%B0%E8%BD%A6%E5%B1%95%E9%BB%84%E7%89%9B%E7%A5%A8/"/>
    <id>https://huangwang.github.io/2018/11/17/生活中的统计学之购买车展黄牛票/</id>
    <published>2018-11-17T10:54:07.000Z</published>
    <updated>2018-11-18T09:56:24.133Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间去看车展，一出地铁口，就有黄牛兜售车展门票，只需30元一张，而从车展正规窗口购买需要50元一张，那么买黄牛票还是买正规车展门票呢？</p><p>黄牛票有可能是真的，这样我就只需30元就可以参观车展，也有可能是假的，这样我就得花80元才能参观车展。假设黄牛票为真的概率是p<sub>1</sub>，根据概率论的知识，我参观车展花费的期望是：</p><script type="math/tex; mode=display">E = 30*p_1+80*(1-p_1)</script><p>在没有任何先验知识的前提下，假设黄牛票为真的概率是0.5，于是每次买黄牛票参观车展的花费期望是55，而每次买正规门票参观车展的花费期望是50，因此不建议买黄牛票，而应该去买正规车展门票。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="noopener">Cmd Markdown 公式指导手册</a></li><li><a href="http://jzqt.github.io/2015/06/30/Markdown中写数学公式/" target="_blank" rel="noopener">Markdown中写数学公式</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间去看车展，一出地铁口，就有黄牛兜售车展门票，只需30元一张，而从车展正规窗口购买需要50元一张，那么买黄牛票还是买正规车展门票呢？&lt;/p&gt;
&lt;p&gt;黄牛票有可能是真的，这样我就只需30元就可以参观车展，也有可能是假的，这样我就得花80元才能参观车展。假设黄牛票为真的概
      
    
    </summary>
    
    
      <category term="概率论" scheme="https://huangwang.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>中国电信光猫华为HG8245C开启IPV6的方法</title>
    <link href="https://huangwang.github.io/2018/11/11/%E4%B8%AD%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%85%89%E7%8C%AB%E5%8D%8E%E4%B8%BAHG8245C%E5%BC%80%E5%90%AFIPV6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/11/11/中国电信光猫华为HG8245C开启IPV6的方法/</id>
    <published>2018-11-11T12:50:15.000Z</published>
    <updated>2018-11-11T14:14:44.897Z</updated>
    
    <content type="html"><![CDATA[<p>据报道，目前中国电信已成功创建了IP骨干网全面支持IPv6，并且在4G网络开启了IPv6服务，在100多个城域网提供了IPv6服务<sup>[1]</sup>。那么如何使家里宽带用上IPv6服务呢？这个问题最关键是设置入户光猫使其支持IPv6。以如何光猫华为HG8245C为例，说明设置过程。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="IPv6简介"><a href="#IPv6简介" class="headerlink" title="IPv6简介"></a>IPv6简介</h2><p>网际协议第6版（英文：Internet Protocol version 6，缩写：IPv6）是网际协议（IP）的最新版本，用作互联网的网上层协议，用它来取代IPv4主要是为了解决IPv4地址枯竭问题，不过它也在其他很多方面对IPv4有所改进。</p><h2 id="IPv6格式"><a href="#IPv6格式" class="headerlink" title="IPv6格式"></a>IPv6格式</h2><p>IPv6二进位制下为128位长度，以16位为一组，每组以冒号“:”隔开，可以分为8组，每组以4位十六进制方式表示。例如：2001:0db8:85a3:08d3:1319:8a2e:0370:7344 是一个合法的IPv6地址。</p><p>同时IPv6在某些条件下可以省略：</p><ol><li><p>每项数字前导的0可以省略，省略后前导数字仍是0则继续，例如下组IPv6是等价的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2001:0DB8:02de:0000:0000:0000:0000:0e13</span><br><span class="line">2001:DB8:2de:0000:0000:0000:0000:e13</span><br><span class="line">2001:DB8:2de:000:000:000:000:e13</span><br><span class="line">2001:DB8:2de:00:00:00:00:e13</span><br><span class="line">2001:DB8:2de:0:0:0:0:e13</span><br></pre></td></tr></table></figure></li><li><p>可以用双冒号“::”表示一组0或多组连续的0，但只能出现一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 2001:DB8:2de:0:0:0:0:e13</span><br><span class="line">   2001:DB8:2de::e13</span><br><span class="line">* 2001:0DB8:0000:0000:0000:0000:1428:57ab</span><br><span class="line">   2001:0DB8:0000:0000:0000::1428:57ab</span><br><span class="line">   2001:0DB8:0:0:0:0:1428:57ab</span><br><span class="line">   2001:0DB8:0::0:1428:57ab</span><br><span class="line">   2001:0DB8::1428:57ab</span><br></pre></td></tr></table></figure></li><li><p>如果这个地址实际上是IPv4的地址，后32位可以用10进制数表示；因此::ffff:192.168.89.9 相等于::ffff:c0a8:5909。</p></li></ol><h2 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h2><h3 id="常用地址"><a href="#常用地址" class="headerlink" title="常用地址"></a>常用地址</h3><p>IPv6地址可分为三种:</p><ul><li>单播（unicast）地址：单播地址标示一个网上接口。协议会把送往地址的数据包送往给其接口。</li><li>任播（anycast）地址: Anycast是IPv6特有的数据发送方式，它像是IPv4的Unicast（单点传播）与Broadcast（多点广播）的综合。</li><li>多播（multicast）地址: 多播地址也称组播地址。多播地址也被指定到一群不同的接口，送到多播地址的数据包会被发送到所有的地址。</li></ul><h3 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h3><h4 id="未指定地址"><a href="#未指定地址" class="headerlink" title="未指定地址"></a>未指定地址</h4><ul><li>::/128－所有比特皆为零的地址称作未指定地址。</li></ul><h4 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h4><ul><li>::1/128－是一种单播绕回地址。如果一个应用程序将数据包送到此地址，IPv6堆栈会转送这些数据包绕回到同样的虚拟接口（相当于IPv4中的127.0.0.1/8）。</li><li>fe80::/10－这些链路本地地址指明，这些地址只在区域连线中是合法的，这有点类似于IPv4中的169.254.0.0/16。</li></ul><h4 id="唯一区域位域"><a href="#唯一区域位域" class="headerlink" title="唯一区域位域"></a>唯一区域位域</h4><ul><li>fc00::/7－唯一区域地址（ULA，unique local address）只可在一群网站中绕送。</li></ul><h4 id="多播地址"><a href="#多播地址" class="headerlink" title="多播地址"></a>多播地址</h4><ul><li>ff00::/8－这个前置表明定义在”IP Version 6 Addressing Architecture”（RFC 4291）中的多播地址[</li></ul><h4 id="IPv4转译地址"><a href="#IPv4转译地址" class="headerlink" title="IPv4转译地址"></a>IPv4转译地址</h4><ul><li>::ffff:x.x.x.x/96－用于IPv4映射地址。</li><li>2001::/32－用于Teredo隧道。</li><li>2002::/16－用于6to4。</li></ul><h2 id="IPv6优势"><a href="#IPv6优势" class="headerlink" title="IPv6优势"></a>IPv6优势</h2><ul><li>巨大的地址空间</li><li>新的协议头格式，加快路由速度</li><li>有效地、分级的寻址和路由结构</li><li>有状态和无状态的地址配置</li><li>内置的安全性</li><li>更好的支持Qos</li><li>用新协议处理邻节点的交互</li><li>可扩展性</li></ul><h1 id="设置华为光猫HG8245C开启IPv6步骤"><a href="#设置华为光猫HG8245C开启IPv6步骤" class="headerlink" title="设置华为光猫HG8245C开启IPv6步骤"></a>设置华为光猫HG8245C开启IPv6步骤</h1><p>在设置华为光猫HG8245C开启IPv6之前，一是要确保所在电信已支持IPv6服务。二是获取华为HG8245C隐藏管理员帐号telecomadmin的密码。</p><p>以隐藏管理员帐号telecomadmin登录华为HG8245C的Web管理控制台后，选择“网络-&gt;宽带设置”，选择连接”2<em>INTERNET_R_VID</em>“,设置协议类型为“IPv4/IPv6”，设置前缀获取方式为“DHCPv6-PD”,再点应用即可。</p><p align="center">    <img src="images/open_ipv6.png" width="90%" alt="开启IPv6"></p><p>在Debian Linux中打开终端，输入如下命令或者浏览网站<a href="http://test-ipv6.com/验证IPv6。" target="_blank" rel="noopener">http://test-ipv6.com/验证IPv6。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether e4:70:b8:30:f1:5b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.100/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0</span><br><span class="line">       valid_lft 251566sec preferred_lft 251566sec</span><br><span class="line">    inet6 240e:bc:e60:3d00:ea5b:f704:6b65:fab1/64 scope global dynamic noprefixroute </span><br><span class="line">       valid_lft 258984sec preferred_lft 172584sec</span><br><span class="line">    inet6 fe80::4e2c:4397:f016:3eb4/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.c114.com.cn/news/117/a1059059.html" target="_blank" rel="noopener">中国电信：IPv6在线用户已超千万 年底将完成端到端服务能力</a>.2018-07-16</li><li>维基百科.<a href="https://zh.wikipedia.org/wiki/IPv6" target="_blank" rel="noopener">IPv6</a></li><li><a href="http://network.51cto.com/art/201006/204898.htm" target="_blank" rel="noopener">掌握IPv6网络协议的优势</a>,2010-06-10</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;据报道，目前中国电信已成功创建了IP骨干网全面支持IPv6，并且在4G网络开启了IPv6服务，在100多个城域网提供了IPv6服务&lt;sup&gt;[1]&lt;/sup&gt;。那么如何使家里宽带用上IPv6服务呢？这个问题最关键是设置入户光猫使其支持IPv6。以如何光猫华为HG8245C为
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="IPv6" scheme="https://huangwang.github.io/tags/IPv6/"/>
    
  </entry>
  
  <entry>
    <title>树莓派学习之SFTP管理文件</title>
    <link href="https://huangwang.github.io/2018/11/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BSFTP%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6/"/>
    <id>https://huangwang.github.io/2018/11/09/树莓派学习之SFTP管理文件/</id>
    <published>2018-11-09T13:53:11.000Z</published>
    <updated>2018-11-09T14:39:13.065Z</updated>
    
    <content type="html"><![CDATA[<p>当需要向树莓派发送文件时，可使用SFTP上传下载文件。下面介绍如何使用SFTP向树莓派发送下载文件。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>SFTP是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。</p><p>SFTP 为 SSH的其中一部分，是一种传输文件至服务器的安全方式。在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作。</p><p>SFTP传输使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。</p><h2 id="SFTP客户端程序"><a href="#SFTP客户端程序" class="headerlink" title="SFTP客户端程序"></a>SFTP客户端程序</h2><p>在Windows平台，常用的SFTP客户端程序有：</p><ul><li>FileZilla</li><li>WinSCP</li><li>Xftp</li><li>Core FTP</li></ul><p>在Linux平台，可直接使用sftp命令进行连接服务器。</p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>下面介绍在Debian平台使用sftp命令连接树莓派，<strong>在此之前应配置树莓派开启ssh服务</strong>。</p><ol><li>建立连接</li></ol><p>使用如下命令连接树莓派：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp pi@192.168.0.103</span><br></pre></td></tr></table></figure></p><ol><li>查看帮助</li></ol><p>通过help查看在sftp连接下能使用的命令。从帮助中可知，在命令前加前缀“l”或者“！”即可在本地操作系统shell执行命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; help</span><br><span class="line">Available commands:</span><br><span class="line">bye                                Quit sftp</span><br><span class="line">cd path                            Change remote directory to &apos;path&apos;</span><br><span class="line">chgrp grp path                     Change group of file &apos;path&apos; to &apos;grp&apos;</span><br><span class="line">chmod mode path                    Change permissions of file &apos;path&apos; to &apos;mode&apos;</span><br><span class="line">chown own path                     Change owner of file &apos;path&apos; to &apos;own&apos;</span><br><span class="line">df [-hi] [path]                    Display statistics for current directory or</span><br><span class="line">                                   filesystem containing &apos;path&apos;</span><br><span class="line">exit                               Quit sftp</span><br><span class="line">get [-afPpRr] remote [local]       Download file</span><br><span class="line">reget [-fPpRr] remote [local]      Resume download file</span><br><span class="line">reput [-fPpRr] [local] remote      Resume upload file</span><br><span class="line">help                               Display this help text</span><br><span class="line">lcd path                           Change local directory to &apos;path&apos;</span><br><span class="line">lls [ls-options [path]]            Display local directory listing</span><br><span class="line">lmkdir path                        Create local directory</span><br><span class="line">ln [-s] oldpath newpath            Link remote file (-s for symlink)</span><br><span class="line">lpwd                               Print local working directory</span><br><span class="line">ls [-1afhlnrSt] [path]             Display remote directory listing</span><br><span class="line">lumask umask                       Set local umask to &apos;umask&apos;</span><br><span class="line">mkdir path                         Create remote directory</span><br><span class="line">progress                           Toggle display of progress meter</span><br><span class="line">put [-afPpRr] local [remote]       Upload file</span><br><span class="line">pwd                                Display remote working directory</span><br><span class="line">quit                               Quit sftp</span><br><span class="line">rename oldpath newpath             Rename remote file</span><br><span class="line">rm path                            Delete remote file</span><br><span class="line">rmdir path                         Remove remote directory</span><br><span class="line">symlink oldpath newpath            Symlink remote file</span><br><span class="line">version                            Show SFTP version</span><br><span class="line">!command                           Execute &apos;command&apos; in local shell</span><br><span class="line">!                                  Escape to local shell</span><br><span class="line">?                                  Synonym for help</span><br></pre></td></tr></table></figure></p><ol><li>下载远程文件到本地主机<br>使用get命令下载远程文件到本地主机：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; get README.TXT </span><br><span class="line">Fetching /home/pi/wiringPi/README.TXT to README.TXT</span><br><span class="line">/home/pi/wiringPi/README.TXT                  100%  606    39.1KB/s   00:00</span><br></pre></td></tr></table></figure></li></ol><p>get命令还有一些有用参数，如递归选项“ -r ”来递归的复制一个文件夹里面的内容，“ -P ”或者“ -p ”参数来告诉 SFTP 保持文件的权限访问位的设置和访问时间。</p><ol><li>上传本地文件到远程主机<br>使用“ put ”命令将文件上传到远程主机：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; put README.TXT </span><br><span class="line">Uploading README.TXT to /home/pi/README.TXT</span><br><span class="line">README.TXT                                    100%  606    33.6KB/s   00:00</span><br></pre></td></tr></table></figure></li></ol><p>” put “具有类似“ get ”的参数。例如，递归选项“ -r ”可以上传整个文件夹。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li>华华. <a href="https://linuxstory.org/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server/" target="_blank" rel="noopener">手把手教你使用 SFTP 安全地传输文件</a>.2015-12-5.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当需要向树莓派发送文件时，可使用SFTP上传下载文件。下面介绍如何使用SFTP向树莓派发送下载文件。&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;SFTP
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Cesium摄像头跟踪飞机实体时晃动问题分析</title>
    <link href="https://huangwang.github.io/2018/11/08/Cesium%E6%91%84%E5%83%8F%E5%A4%B4%E8%B7%9F%E8%B8%AA%E9%A3%9E%E6%9C%BA%E5%AE%9E%E4%BD%93%E6%97%B6%E6%99%83%E5%8A%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>https://huangwang.github.io/2018/11/08/Cesium摄像头跟踪飞机实体时晃动问题分析/</id>
    <published>2018-11-08T01:41:32.000Z</published>
    <updated>2018-11-14T04:54:50.429Z</updated>
    
    <content type="html"><![CDATA[<p>在3D场景下使用Cesium跟踪飞机时会出现摄像头晃动问题，导致地图背景不断晃动，影响观看。下面以最新的Cesium1.51源码为例，解析Cesium 渲染过程原理，分析跟踪实体时摄像头晃动的原因，找出可能的解决方法。</p><h1 id="Cesium渲染过程分析"><a href="#Cesium渲染过程分析" class="headerlink" title="Cesium渲染过程分析"></a>Cesium渲染过程分析</h1><p>使用Cesium最简单示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;);</span><br></pre></td></tr></table></figure></p><p>Viewer是Cesium构建应用的最基础的组件。它又是其他组件的容器，包括：</p><ul><li>animation:控制时间前进、倒退、暂停以及前进和倒退速度的组件</li><li>baseLayerPicker：图层选择组件</li><li>fullscreenButton：控制是否全屏的组件</li><li>vrButton：控制是否VR显示的组件</li><li>geocoder：地理位置搜索组件</li><li>homeButton：返回摄像头默认位置按钮组建</li><li>infoBox：信息框组件</li><li>sceneModePicker：场景模式选择组件</li><li>selectionIndicator：选择指示组件</li><li>timeline：时间线组件</li><li>navigationHelpButton：导航帮助按钮，告诉使用者如何使用鼠标和触摸屏操纵虚拟地球</li><li>CesiumWidget：虚拟地球组件</li></ul><p>其中，虚拟地球组件CesiumWidget是Viewer包含核心组件，在Viewer中创建CesiumWidget对象时，将设置其useDefaultRenderLoop属性。设置该属性将启动渲染函数startRenderLoop。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//from Source/Widgets/CesiumWidget/CesiumWidget.js</span><br><span class="line">useDefaultRenderLoop : &#123;</span><br><span class="line">    get : function() &#123;</span><br><span class="line">        return this._useDefaultRenderLoop;</span><br><span class="line">    &#125;,</span><br><span class="line">    set : function(value) &#123;</span><br><span class="line">        if (this._useDefaultRenderLoop !== value) &#123;</span><br><span class="line">            this._useDefaultRenderLoop = value;</span><br><span class="line">            if (value &amp;&amp; !this._renderLoopRunning) &#123;</span><br><span class="line">                startRenderLoop(this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>函数startRenderLoop是Cesium渲染的开始，其代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function startRenderLoop(widget) &#123;</span><br><span class="line">    widget._renderLoopRunning = true;</span><br><span class="line"></span><br><span class="line">    var lastFrameTime = 0;</span><br><span class="line">    function render(frameTime) &#123;</span><br><span class="line">        if (widget.isDestroyed()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (widget._useDefaultRenderLoop) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                var targetFrameRate = widget._targetFrameRate;</span><br><span class="line">                if (!defined(targetFrameRate)) &#123;</span><br><span class="line">                    widget.resize();</span><br><span class="line">                    widget.render();</span><br><span class="line">                    requestAnimationFrame(render);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    var interval = 1000.0 / targetFrameRate;</span><br><span class="line">                    var delta = frameTime - lastFrameTime;</span><br><span class="line"></span><br><span class="line">                    if (delta &gt; interval) &#123;</span><br><span class="line">                        widget.resize();</span><br><span class="line">                        widget.render();</span><br><span class="line">                        lastFrameTime = frameTime - (delta % interval);</span><br><span class="line">                    &#125;</span><br><span class="line">                    requestAnimationFrame(render);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            widget._renderLoopRunning = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(render);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CesiumWidget组建的render方法随后调用Scene的render方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Scene.prototype.render = function(time) &#123;</span><br><span class="line">        if (!defined(time)) &#123;</span><br><span class="line">            time = JulianDate.now();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var frameState = this._frameState;</span><br><span class="line">        this._jobScheduler.resetBudgets();</span><br><span class="line"></span><br><span class="line">        var cameraChanged = this._view.checkForCameraUpdates(this);</span><br><span class="line">        var shouldRender = !this.requestRenderMode || this._renderRequested || cameraChanged || this._logDepthBufferDirty || (this.mode === SceneMode.MORPHING);</span><br><span class="line">        if (!shouldRender &amp;&amp; defined(this.maximumRenderTimeChange) &amp;&amp; defined(this._lastRenderTime)) &#123;</span><br><span class="line">            var difference = Math.abs(JulianDate.secondsDifference(this._lastRenderTime, time));</span><br><span class="line">            shouldRender = shouldRender || difference &gt; this.maximumRenderTimeChange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (shouldRender) &#123;</span><br><span class="line">            this._lastRenderTime = JulianDate.clone(time, this._lastRenderTime);</span><br><span class="line">            this._renderRequested = false;</span><br><span class="line">            this._logDepthBufferDirty = false;</span><br><span class="line">            var frameNumber = CesiumMath.incrementWrap(frameState.frameNumber, 15000000.0, 1.0);</span><br><span class="line">            updateFrameNumber(this, frameNumber, time);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Update</span><br><span class="line">        this._preUpdate.raiseEvent(this, time);</span><br><span class="line">        tryAndCatchError(this, update);</span><br><span class="line">        this._postUpdate.raiseEvent(this, time);</span><br><span class="line"></span><br><span class="line">        if (shouldRender) &#123;</span><br><span class="line">            // Render</span><br><span class="line">            this._preRender.raiseEvent(this, time);</span><br><span class="line">            tryAndCatchError(this, render);</span><br><span class="line"></span><br><span class="line">            RequestScheduler.update();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        updateDebugShowFramesPerSecond(this, shouldRender);</span><br><span class="line">        callAfterRenderFunctions(this);</span><br><span class="line"></span><br><span class="line">        if (shouldRender) &#123;</span><br><span class="line">            this._postRender.raiseEvent(this, time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><p>Scene的render方法中tryAndCatchError函数将调用render函数。在该render函数中，地球的主要要素（地形&amp;影像）的渲染，将在Globe的beginFrame和endFrame之间完成的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function render(scene) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    if (defined(scene.globe)) &#123;</span><br><span class="line">        scene.globe.beginFrame(frameState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateEnvironment(scene);</span><br><span class="line">    updateAndExecuteCommands(scene, passState, backgroundColor);</span><br><span class="line">    resolveFramebuffers(scene, passState);</span><br><span class="line"></span><br><span class="line">    passState.framebuffer = undefined;</span><br><span class="line">    executeOverlayCommands(scene, passState);</span><br><span class="line"></span><br><span class="line">    if (defined(scene.globe)) &#123;</span><br><span class="line">        scene.globe.endFrame(frameState);</span><br><span class="line"></span><br><span class="line">        if (!scene.globe.tilesLoaded) &#123;</span><br><span class="line">            scene._renderRequested = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中updateAndExecuteCommands负责数据的调度，比如哪些Tile需要创建，这些Tile相关的地形数据，以及涉及到的影像数据之间的调度，都是在该函数中维护。而scene.globe.endFrame中，会对该帧所涉及的GlobeTile的下载，解析等进行处理。</p><h1 id="Cesium跟踪实体"><a href="#Cesium跟踪实体" class="headerlink" title="Cesium跟踪实体"></a>Cesium跟踪实体</h1><p>在Viewer组件构造函数内，Viewer订阅了场景组件Scene的渲染后事件postRender，以执行Viewer自己的_postRender函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventHelper.add(scene.postRender, Viewer.prototype._postRender, this);</span><br></pre></td></tr></table></figure></p><p>Viewer的_postRender函数代码如下，其中updateTrackedEntity函数将更新被跟踪实体的摄像头位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Viewer.prototype._postRender = function() &#123;</span><br><span class="line">    updateZoomTarget(this);</span><br><span class="line">    updateTrackedEntity(this);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>updateTrackedEntity函数代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">function updateTrackedEntity(viewer) &#123;</span><br><span class="line">    if (!viewer._needTrackedEntityUpdate) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var trackedEntity = viewer._trackedEntity;</span><br><span class="line">    var currentTime = viewer.clock.currentTime;</span><br><span class="line"></span><br><span class="line">    //Verify we have a current position at this time. This is only triggered if a position</span><br><span class="line">    //has become undefined after trackedEntity is set but before the boundingSphere has been</span><br><span class="line">    //computed. In this case, we will track the entity once it comes back into existence.</span><br><span class="line">    var currentPosition = Property.getValueOrUndefined(trackedEntity.position, currentTime);</span><br><span class="line"></span><br><span class="line">    if (!defined(currentPosition)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var scene = viewer.scene;</span><br><span class="line"></span><br><span class="line">    var state = viewer._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch);</span><br><span class="line">    if (state === BoundingSphereState.PENDING) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var sceneMode = scene.mode;</span><br><span class="line">    if (sceneMode === SceneMode.COLUMBUS_VIEW || sceneMode === SceneMode.SCENE2D) &#123;</span><br><span class="line">        scene.screenSpaceCameraController.enableTranslate = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (sceneMode === SceneMode.COLUMBUS_VIEW || sceneMode === SceneMode.SCENE3D) &#123;</span><br><span class="line">        scene.screenSpaceCameraController.enableTilt = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var bs = state !== BoundingSphereState.FAILED ? boundingSphereScratch : undefined;</span><br><span class="line">    viewer._entityView = new EntityView(trackedEntity, scene, scene.mapProjection.ellipsoid);</span><br><span class="line">    viewer._entityView.update(currentTime, bs);</span><br><span class="line">    viewer._needTrackedEntityUpdate = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此之外，Viewer组件订阅了Clock组建的onTick事件，以执行其自身的_onTick事件处理函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventHelper.add(clock.onTick, Viewer.prototype._onTick, this);</span><br></pre></td></tr></table></figure></p><p>在Viewer组件的_onTick事件处理函数中，同样会更新被跟踪实体的摄像头位置。而Cesium摄像头跟踪飞机实体时产生晃动的根源即在此处。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Viewer.prototype._onTick = function(clock) &#123;</span><br><span class="line">        var time = clock.currentTime;</span><br><span class="line"></span><br><span class="line">        var isUpdated = this._dataSourceDisplay.update(time);</span><br><span class="line">        if (this._allowDataSourcesToSuspendAnimation) &#123;</span><br><span class="line">            this._clockViewModel.canAnimate = isUpdated;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var entityView = this._entityView;</span><br><span class="line">        if (defined(entityView)) &#123;</span><br><span class="line">            var trackedEntity = this._trackedEntity;</span><br><span class="line">            var trackedState = this._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch);</span><br><span class="line">            if (trackedState === BoundingSphereState.DONE) &#123;</span><br><span class="line">                entityView.update(time, boundingSphereScratch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><h1 id="可行的解决方案"><a href="#可行的解决方案" class="headerlink" title="可行的解决方案"></a>可行的解决方案</h1><p>在Viewer组件的_onTick函数做如下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Viewer.prototype._onTick = function(clock) &#123;</span><br><span class="line">        var time = clock.currentTime;</span><br><span class="line"></span><br><span class="line">        var isUpdated = this._dataSourceDisplay.update(time);</span><br><span class="line">        if (this._allowDataSourcesToSuspendAnimation) &#123;</span><br><span class="line">            this._clockViewModel.canAnimate = isUpdated;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var entityView = this._entityView;</span><br><span class="line">        if (defined(entityView)) &#123;</span><br><span class="line">            var trackedEntity = this._trackedEntity;</span><br><span class="line">            var trackedState = this._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch);</span><br><span class="line">            if (trackedState === BoundingSphereState.DONE) &#123;</span><br><span class="line">                //entityView.update(time, boundingSphereScratch);</span><br><span class="line">                var range=this.camera.distanceToBoundingSphere(boundingSphereScratch);</span><br><span class="line">                var targetRange=range&gt;boundingSphereScratch.radius*10?range:boundingSphereScratch.radius*10;</span><br><span class="line">                var offset=new HeadingPitchRange(0.0,-Math.toRadians(45.0),targetRange);</span><br><span class="line">                this.camera.viewBoundingSphere(boundingSphereScratch,offset)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://www.cnblogs.com/fuckgiser/p/5744509.html" target="_blank" rel="noopener">http://www.cnblogs.com/fuckgiser/p/5744509.html</a>, by 法克鸡丝</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在3D场景下使用Cesium跟踪飞机时会出现摄像头晃动问题，导致地图背景不断晃动，影响观看。下面以最新的Cesium1.51源码为例，解析Cesium 渲染过程原理，分析跟踪实体时摄像头晃动的原因，找出可能的解决方法。&lt;/p&gt;
&lt;h1 id=&quot;Cesium渲染过程分析&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>树莓派学习之远程登录</title>
    <link href="https://huangwang.github.io/2018/11/07/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>https://huangwang.github.io/2018/11/07/树莓派学习之远程登录/</id>
    <published>2018-11-07T14:41:31.000Z</published>
    <updated>2018-11-24T13:36:27.072Z</updated>
    
    <content type="html"><![CDATA[<p>每次通过USB转串口登录树莓派比较麻烦，可以设置树莓派开启ssh和vnc服务，以便通过ssh或vnc远程登录树莓派。下面介绍在Debian中通过ssh或vnc远程登录树莓派的过程。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。</p><h3 id="SSH基本用法"><a href="#SSH基本用法" class="headerlink" title="SSH基本用法"></a>SSH基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 以用户名user，登录远程主机host</span><br><span class="line">$ ssh user@host</span><br><span class="line"># SSH的默认端口是22。使用p参数，可以修改这个端口。</span><br><span class="line">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure><h3 id="SSH通信过程及风险"><a href="#SSH通信过程及风险" class="headerlink" title="SSH通信过程及风险"></a>SSH通信过程及风险</h3><p>SSH采用了公钥加密保证安全。</p><p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p><p>这个过程本身是安全的，但是实施的时候存在”中间人攻击”风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p>VNC（Virtual Network Computing），为一种使用RFB协议的显示屏画面分享及远程操作软件。此软件借由网上，可发送键盘与鼠标的动作及即时的显示屏画面。</p><p>VNC与操作系统无关，因此可跨平台使用，例如可用Windows连线到某Linux的计算机，反之亦同。甚至在没有安装客户端程序的计算机中，只要有支持JAVA的浏览器，也可使用。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>VNC系统由客户端，服务端和一个协议组成</p><p>VNC的服务端目的是分享其所运行机器的屏幕，服务端被动的允许客户端控制它。VNC客户端（或Viewer）观察控制服务端，与服务端交互。VNC协议Protocol（RFB）是一个简单的协议，传送服务端的原始图像到客户端（一个X,Y位置上的正方形的点阵数据），客户端传送事件消息到服务端。</p><p>服务器发送小方块的帧缓存给客户端，在最简单的情况，VNC协议使用大量的带宽，因此各种各样的方法被发明出来减少通讯的开支，举例来说，有各种各样的编码方法来决定最有效率的方法来传送这些点阵方块。</p><p>VNC默认使用TCP端口5900至5906，而JAVA的VNC客户端使用5800至5806。一个服务端可以在5900端口用“监听模式”连接一个客户端，使用监听模式的一个好处是服务端不需要设置防火墙。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>VNC并非是安全的协议，虽然VNC伺服程序需设置密码才可接受外来连线，且VNC客户端与VNC伺服程序之间的密码传输经过加密，但仍可被轻易的拦截到并使用暴力破解法破解。不过VNC可设计以SSH或VPN传输，以增加安全性。</p><h3 id="VNC软件"><a href="#VNC软件" class="headerlink" title="VNC软件"></a>VNC软件</h3><p>由于VNC以GPL授权，派生出了几个VNC软件：</p><ul><li>RealVNC：由VNC团队部分成员开发，分为全功能商业版及免费版。</li><li>TightVNC：强调节省带宽使用。</li><li>UltraVNC：加入了TightVNC的部分程序及加强性能的图型映射驱动程序，并结合Active Directory及NTLM的账号密码认证，但仅有Windows版本。</li><li>Vine Viewer：MacOSX的VNC客户端。</li></ul><h1 id="配置树莓派支持SSH和VNC"><a href="#配置树莓派支持SSH和VNC" class="headerlink" title="配置树莓派支持SSH和VNC"></a>配置树莓派支持SSH和VNC</h1><p>通过USB转串口登录树莓派后，按如下步骤开启SSH和VNC：</p><ol><li><p>运行命令raspi-config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure></li><li><p>选择第五项Interfacing Options</p></li><li>选择enable SSH</li><li>启用SSH，重复步骤一和二，再选择enable VNC。  </li></ol><h1 id="通过SSH或VNC连接树莓派"><a href="#通过SSH或VNC连接树莓派" class="headerlink" title="通过SSH或VNC连接树莓派"></a>通过SSH或VNC连接树莓派</h1><p>debian主机与树莓派在同一个局域网内，则按如下步骤通过SSH或VNC连接树莓派。</p><h2 id="通过nmap命令获取树莓派ip地址"><a href="#通过nmap命令获取树莓派ip地址" class="headerlink" title="通过nmap命令获取树莓派ip地址"></a>通过nmap命令获取树莓派ip地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ nmap 192.168.0.1/24</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-11-08 13:08 CST</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.0.103</span><br><span class="line">Host is up (0.041s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">5900/tcp open  vnc</span><br><span class="line"></span><br><span class="line">Nmap done: 256 IP addresses (6 hosts up) scanned in 35.77 seconds</span><br></pre></td></tr></table></figure><p>开启22和5900端口的主机即是树莓派。</p><h2 id="通过ssh远程登录树莓派"><a href="#通过ssh远程登录树莓派" class="headerlink" title="通过ssh远程登录树莓派"></a>通过ssh远程登录树莓派</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 首次登录会给出主机认证不能建立的提示，输入yes可继续，再输入用户密码即可远程登录树莓派</span><br><span class="line">$ ssh pi@192.168.0.103</span><br></pre></td></tr></table></figure><h2 id="通过vnc远程登录树莓派"><a href="#通过vnc远程登录树莓派" class="headerlink" title="通过vnc远程登录树莓派"></a>通过vnc远程登录树莓派</h2><ol><li><p>通过ssh登录树莓派后查看其使用的vnc程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ apt list --installed | grep vnc</span><br><span class="line">realvnc-vnc-server/now 6.3.1.36657 armhf [已安装，可升级至：6.3.2.39069]</span><br><span class="line"># 可知，树莓派上使用realvnc程序</span><br></pre></td></tr></table></figure></li><li><p>在Debian上安装realvnc客户端程序realvnc-vnc-viewer</p></li><li><p>在终端输入vncviewer，输入树莓派ip、用户名、密码即可登录树莓派</p></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html，" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html，</a> by 阮一峰</li><li><a href="https://zh.wikipedia.org/zh-hans/Secure_Shell，" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/Secure_Shell，</a> by wikipedia</li><li><a href="https://zh.wikipedia.org/zh-hans/VNC，" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/VNC，</a> by wikipedia</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次通过USB转串口登录树莓派比较麻烦，可以设置树莓派开启ssh和vnc服务，以便通过ssh或vnc远程登录树莓派。下面介绍在Debian中通过ssh或vnc远程登录树莓派的过程。&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派学习之USB转串口</title>
    <link href="https://huangwang.github.io/2018/11/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3/"/>
    <id>https://huangwang.github.io/2018/11/05/树莓派学习之USB转串口/</id>
    <published>2018-11-05T14:46:43.000Z</published>
    <updated>2018-11-15T11:16:40.132Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究树莓派，需要通过usb转串口去连接树莓派，然后设置其wifi连接。于是将用到计算机硬件知识整理一下，并记录通过usb转串口设置树莓派wifi连接的过程。</p><h1 id="硬件知识"><a href="#硬件知识" class="headerlink" title="硬件知识"></a>硬件知识</h1><p>计算机硬件常用接口有并口和串口，对应串行通信和并行通信。串行通信（英语：Serial communication）是指在计算机总线或其他数据信道上，每次传输一个比特数据，并连续进行以上单次过程的通信方式。与之对应的是并行通信，它在串行端口上通过一次同时传输若干比特数据的方式进行通信。</p><p>串行通信被用于长距离通信以及大多数计算机网络，在这些应用场合里，电缆和同步化使并行通信实际应用面临困难。凭借着其改善的信号完整性和传播速度，串行通信总线正在变得越来越普遍，甚至在短程距离的应用中，其优越性已经开始超越并行总线不需要串行化组件(serializer)，并解决了诸如时钟偏移（Clock skew）、互联密度（interconnect density）等缺点。PCI到PCI Express的升级就一个例子。</p><h2 id="并口"><a href="#并口" class="headerlink" title="并口"></a>并口</h2><p>并行接口，简称并口。并口采用的是25针D形接头。所谓“并行”，是指8位数据同时通过并行线进行传送，这样数据传送速度大大提高，但并行传送的线路长度受到限制，因为长度增加，干扰就会增加，数据也就容易出错，目前，并行接口主要作为打印机端口等。</p><h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><p>串口叫做串行接口，也称串行通信接口，即COM口。按电气标准及协议来分包括RS-232-C、RS-422、RS485、USB等。 RS-232-C、RS-422与RS-485标准只对接口的电气特性做出规定，不涉及接插件、电缆或协议。</p><p>串行端口可以用于连接外置调制解调器、绘图仪或串行打印机。它也可以控制台连接的方式连接网络设备，例如路由器和交换机，主要用来配置它们。</p><ul><li>RS-232-C</li></ul><p>也称标准接口，是目前最常用的一种串行通讯接口。它是在1970年由美国电子工业协会（EIA）联合贝尔系统、 调制解调器厂家及计算机终端生产厂家共同制定的用于串行通讯的标准。</p><p>传统的RS-232-C接口标准有22根线，采用标准25芯D型插头座。自IBM PC/AT开始使用简化了的9芯D型插座。计算机一般有两个串行口：COM1和COM2，9针D形接口通常在计算机后面能看到。现在有很多手机数据线或者物流接收器都采用COM口与计算机相连。</p><ul><li>RS-422</li></ul><p>为改进RS-232通信距离短、速率低的缺点，RS-422定义了一种平衡通信接口，将传输速率提高到10Mb/s，传输距离延长到4000英尺（速率低于100kb/s时），并允许在一条平衡总线上连接最多10个接收器。</p><ul><li>RS-485</li></ul><p>为扩展应用范围，EIA又于1983年在RS-422基础上制定了RS-485 标准，增加了多点、双向通信能力，即允许多个发送器连接到同一条总线上，同时增加了发送器的驱动能力和冲突保护特性，扩展了总线共模范围，后命名为 TIA/EIA-485-A标准。</p><ul><li>Universal Serial Bus（通用串行总线）</li></ul><p>简称USB，是目前计算机上应用较广泛的接口规范，由Intel、Microsoft、Compaq、IBM、NEC、Northern Telcom等几家大厂商发起的新型外设接口标准。USB接口是计算机主板上的一种四针接口，其中中间两个针传输数据，两边两个针给外设供电。USB接口速度快、连接简单、不需要外接电源，传输速度12Mbps，新的USB 2.0可达480Mbps；电缆最大长度5米，USB电缆有4条线：2条信号线，2条电源线，可提供5伏特电源，USB电缆还分屏蔽和非屏蔽两种，屏蔽电缆传输速度可达12Mbps，价格较贵，非屏蔽电缆速度为1.5Mbps，但价格便宜；USB通过串联方式最多可串接127个设备；支持热插拔。最新的规格是USB 3.1。</p><ul><li>RJ-45接口</li></ul><p>是以太网最为常用的接口，RJ45是一个常用名称，指的是由IEC(60)603-7标准化，使用由国际性的接插件标准定义的8个位置（8针）的模块化插孔或者插头。</p><h1 id="USB转串口原理"><a href="#USB转串口原理" class="headerlink" title="USB转串口原理"></a>USB转串口原理</h1><h2 id="硬件接口电气特性"><a href="#硬件接口电气特性" class="headerlink" title="硬件接口电气特性"></a>硬件接口电气特性</h2><ul><li><p>TTL电平：一般用作数字芯片的电平，例如芯片的供电电压是5V，那么高电平就是5V，低电平就是0V，这里所说的电平，就是TTL电平。</p></li><li><p>232电平：232电平特制电脑串口的电平，-12V左右为正电平，+12V左右为低电平。我们刚才所见到的“USB转串口线”和电脑原生的串口，就是232电平。</p></li></ul><h2 id="USB转串口方法"><a href="#USB转串口方法" class="headerlink" title="USB转串口方法"></a>USB转串口方法</h2><p>PC的串口电气特性是232电平，单片机的串口电气特性是TTL电平，这两个就不一样，肯定需要某个芯片或者电路来进行转换匹配才可以通信。这个时候我们就需要TTL转232芯片了，常见的是MAX232,MAX3232等。连接方式如下:</p><p align="center">    <img src="images/convert1.jpg" width="100%" alt="232转TTL"></p><p>但是随着USB接口的普及，当前计算机已经取消了串口。为实现232到TTL的转换，又需要USB转232。连接方式如下：</p><p align="center">    <img src="images/convert2.jpg" width="100%" alt="USB转232"></p><p>为简化，可将USB转232和232转TTL集成到一个芯片上。这样的芯片常见的有CH340、PL2303。连接方式如下：</p><p align="center">    <img src="images/convert3.jpg" width="100%" alt="USB转TTL"></p><p>常见的CH340芯片如下图所示：</p><p align="center">    <img src="images/usb2ttl.jpg" width="90%" alt="USB转TTL"></p><h1 id="通过USB转串口连接树莓派"><a href="#通过USB转串口连接树莓派" class="headerlink" title="通过USB转串口连接树莓派"></a>通过USB转串口连接树莓派</h1><p>下面介绍在Debian Linux主机通过USB转串口连接树莓派的过程。</p><h2 id="通过USB转串口物理连接树莓派"><a href="#通过USB转串口物理连接树莓派" class="headerlink" title="通过USB转串口物理连接树莓派"></a>通过USB转串口物理连接树莓派</h2><p>通过将USB转串口将Debian主机和树莓派物理连接好之后，给树莓派加电启动。</p><h2 id="查看Debian系统能否识别ch340芯片"><a href="#查看Debian系统能否识别ch340芯片" class="headerlink" title="查看Debian系统能否识别ch340芯片"></a>查看Debian系统能否识别ch340芯片</h2><p>在官方Linux内核版本中自Kernel2.6以后就默认包含了对CH340/CH341芯片的驱动支持。在系统的默认驱动目录/lib/modules/$(uname -r)/kernel/drivers内可找到ch340芯片的驱动文件ch341.ko。</p><p>使用命令lsusb或dmesg查看linux系统是否识别USB转串口硬件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~$ lsusb</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 005: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller</span><br><span class="line">Bus 001 Device 004: ID 8087:0a2a Intel Corp. </span><br><span class="line">Bus 001 Device 003: ID 1bcf:2b8a Sunplus Innovation Technology Inc. </span><br><span class="line">Bus 001 Device 006: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapter</span><br><span class="line">Bus 001 Device 002: ID 046d:c062 Logitech, Inc. M-UAS144 [LS1 Laser Mouse]</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure></p><p>Bus 001 Device 006: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapter表明Linux系统识别了usb转串口线缆，芯片类型为HL-340。</p><p>‘dmesg’命令显示linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。运行dmesg，输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~$ sudo dmesg | tail</span><br><span class="line">[ 4248.441104] usbcore: registered new interface driver usbserial_generic</span><br><span class="line">[ 4248.441112] usbserial: USB Serial support registered for generic</span><br><span class="line">[ 4248.456079] usbcore: registered new interface driver ch341</span><br><span class="line">[ 4248.456088] usbserial: USB Serial support registered for ch341-uart</span><br><span class="line">[ 4248.456097] ch341 1-3:1.0: ch341-uart converter detected</span><br><span class="line">[ 4248.456464] usb 1-3: ch341-uart converter now attached to ttyUSB0</span><br><span class="line">[ 4284.405593] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535)</span><br><span class="line">[ 4284.407844] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535)</span><br><span class="line">[ 4657.772761] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535)</span><br><span class="line">[ 4657.774969] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535)</span><br></pre></td></tr></table></figure></p><p>[ 4248.456097] ch341 1-3:1.0: ch341-uart converter detected;<br>[ 4248.456464] usb 1-3: ch341-uart converter now attached to ttyUSB0说明linux系统识别了usb转串口适配器，并附加到ttyUSB0文件上。</p><h2 id="使用minicom连接树莓派"><a href="#使用minicom连接树莓派" class="headerlink" title="使用minicom连接树莓派"></a>使用minicom连接树莓派</h2><p>minicom是linux平台的串行通信程序，类似于windows的超级终端程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#首次运行minicom使用-s选项，用于设置串行通信参数</span><br><span class="line">$ minicom -s</span><br><span class="line">+-----[configuration]------+</span><br><span class="line">| Filenames and paths      |</span><br><span class="line">| File transfer protocols  |</span><br><span class="line">| Serial port setup        |</span><br><span class="line">| Modem and dialing        |</span><br><span class="line">| Screen and keyboard      |</span><br><span class="line">| Save setup as dfl        |</span><br><span class="line">| Save setup as..          |</span><br><span class="line">| Exit                     |</span><br><span class="line">| Exit from Minicom        |</span><br><span class="line">+--------------------------+</span><br><span class="line">#通过上下键选择Serial port setup</span><br><span class="line">+----------------------------------- +</span><br><span class="line">| A -    Serial Device      : /dev/ttyUSB0   |</span><br><span class="line">| B - Lockfile Location     : /var/lock     |</span><br><span class="line">| C -   Callin Program      :             |</span><br><span class="line">| D -  Callout Program      :             |</span><br><span class="line">| E -    Bps/Par/Bits       : 115200 8N1  |</span><br><span class="line">| F - Hardware Flow Control : Yes         |</span><br><span class="line">| G - Software Flow Control : No          |</span><br><span class="line">|                                         |</span><br><span class="line">|    Change which setting?                |</span><br><span class="line">+----------------------------------+</span><br><span class="line"># 设置Serial Device为/dev/ttyUSB0，然后推出到上一界面，使用enter键Save setup as dfl，保存配置。下次即可直接运行minicom使用之前保存的配置进行串口通信 </span><br><span class="line"># 这时候要选择单独Exit（退出），不要选择Exit from Minicom（退出Minicom），不然你就把minicom关了。</span><br><span class="line"># 这时即可连接树莓派。</span><br></pre></td></tr></table></figure></p><p>连接上树莓派后，输入用户名pi和密码raspberry，即可进入系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Raspbian GNU/Linux 9 raspberrypi ttyS0                                       </span><br><span class="line">raspberrypi login: pi                                                        </span><br><span class="line">Password:                                                                    </span><br><span class="line">Last login: Tue Oct  9 13:12:40 UTC 2018 on tty1                             </span><br><span class="line">Linux raspberrypi 4.14.71-v7+ #1145 SMP Fri Sep 21 15:38:35 BST 2018 armv7l</span><br><span class="line">                                        </span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line">                                        </span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line"></span><br><span class="line">Wi-Fi is disabled because the country is not set.                               </span><br><span class="line">Use raspi-config to set the country before use.                                 </span><br><span class="line">                                                                                </span><br><span class="line">pi@raspberrypi:~$</span><br></pre></td></tr></table></figure></p><p>退出minicom，按Ctrl＋A，再按下X键，会提示你是否退出，yes就可以了。</p><h2 id="配置树莓派wifi连接"><a href="#配置树莓派wifi连接" class="headerlink" title="配置树莓派wifi连接"></a>配置树莓派wifi连接</h2><h3 id="查看周围wifi热点信息"><a href="#查看周围wifi热点信息" class="headerlink" title="查看周围wifi热点信息"></a>查看周围wifi热点信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~$ iwlist scan</span><br></pre></td></tr></table></figure><h3 id="配置连接到wifi热点"><a href="#配置连接到wifi热点" class="headerlink" title="配置连接到wifi热点"></a>配置连接到wifi热点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 编辑wifi文件</span><br><span class="line">pi@raspberrypi:~$ sudo vi /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class="line"># 在该文件最后添加下面的话</span><br><span class="line">network=&#123;</span><br><span class="line">  ssid=&quot;WIFINAME&quot;</span><br><span class="line">  psk=&quot;password&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 引号部分分别为wifi的名字和密码</span><br><span class="line"># 重启系统</span><br><span class="line">pi@raspberrypi:~$ sudo init 6</span><br><span class="line"># 登录后查看是否连接成功</span><br><span class="line">pi@raspberrypi:~$  ip addr</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.cnblogs.com/zcshan/archive/2010/12/03/com.html" target="_blank" rel="noopener">https://www.cnblogs.com/zcshan/archive/2010/12/03/com.html</a> ,by 水寒</li><li><a href="https://zh.wikipedia.org/wiki串行端口" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki串行端口</a> , by wikipedia</li><li><a href="https://blog.csdn.net/he_wen_jie/article/details/50983076" target="_blank" rel="noopener">https://blog.csdn.net/he_wen_jie/article/details/50983076</a>. by hwj666</li><li><a href="https://linux.cn/article-3587-1.html" target="_blank" rel="noopener">https://linux.cn/article-3587-1.html</a> , by linux中国</li><li><a href="https://blog.csdn.net/JAZZSOLDIER/article/details/70170466" target="_blank" rel="noopener">https://blog.csdn.net/JAZZSOLDIER/article/details/70170466</a> ， by SoldierJazz2018</li><li><a href="http://blog.51cto.com/irinilu/289622" target="_blank" rel="noopener">http://blog.51cto.com/irinilu/289622</a>, by feng9422</li><li>Pipci. Linux 串口终端调试工具minicom[EB/OL].<a href="https://blog.csdn.net/Pipcie/article/details/79379451" target="_blank" rel="noopener">https://blog.csdn.net/Pipcie/article/details/79379451</a>, 2018-02-26.</li><li><a href="https://blog.csdn.net/huayucong/article/details/51376279，" target="_blank" rel="noopener">https://blog.csdn.net/huayucong/article/details/51376279，</a> by huayucong</li><li><a href="https://blog.csdn.net/wangjiaweiwei/article/details/49612207" target="_blank" rel="noopener">USB转串口CH340接线方法</a>,2015-11-03.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究树莓派，需要通过usb转串口去连接树莓派，然后设置其wifi连接。于是将用到计算机硬件知识整理一下，并记录通过usb转串口设置树莓派wifi连接的过程。&lt;/p&gt;
&lt;h1 id=&quot;硬件知识&quot;&gt;&lt;a href=&quot;#硬件知识&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="硬件" scheme="https://huangwang.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>树莓派操作系统镜像烧录方法指南</title>
    <link href="https://huangwang.github.io/2018/11/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%83%A7%E5%BD%95%E6%96%B9%E6%B3%95%E6%8C%87%E5%8D%97/"/>
    <id>https://huangwang.github.io/2018/11/03/树莓派操作系统镜像烧录方法指南/</id>
    <published>2018-11-03T10:10:16.000Z</published>
    <updated>2018-11-04T10:05:54.651Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派是一个微型计算机硬件平台，为使其正常工作还需要安装操作系统。通常将树莓派操作系统烧录到SD卡上，再将SD卡插到树莓派上。加电启动后，树莓派就会从SD卡引导启动操作系统，开始工作。这里SD卡就相当于普通计算机的硬盘。下面记录在Debian Linux下烧录树莓派操作系统到SD卡的方法。</p><h1 id="镜像烧录工具"><a href="#镜像烧录工具" class="headerlink" title="镜像烧录工具"></a>镜像烧录工具</h1><h2 id="Etcher"><a href="#Etcher" class="headerlink" title="Etcher"></a>Etcher</h2><p>Etcher是树莓派官方推荐的镜像烧录工具。它采用图形界面，支持Windows、Linux、Mac，使用简单方便，推荐普通用户使用。</p><h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>Linux的dd命令用于复制文件并对原文件的内容进行转换和格式化处理。dd命令功能很强大的，对于一些比较底层的问题，使用dd命令往往可以得到出人意料的效果。用的比较多的还是用dd来备份裸设备。同样也可用dd命令烧录系统镜像。</p><p>使用dd命令必须非常小心，如果输出指定了错误分区，将摧毁该分区的所有数据。</p><h1 id="Linux下镜像烧录过程"><a href="#Linux下镜像烧录过程" class="headerlink" title="Linux下镜像烧录过程"></a>Linux下镜像烧录过程</h1><p>使用Etcher烧录镜像比较简单，重点介绍使用dd命令烧录镜像的方法。</p><h2 id="查找sd卡设备"><a href="#查找sd卡设备" class="headerlink" title="查找sd卡设备"></a>查找sd卡设备</h2><p>可使用lsblk或者fdisk命令查找sd卡存储设备。需要注意的是：</p><ul><li>块设备以/dev/sdX命名，其中X是小写字母，例如/dev/sda。</li><li>测试时发现当计算机只有usb3.0接口时，将不识别usb2.0的sd读卡器。</li></ul><h2 id="烧录镜像到sd卡"><a href="#烧录镜像到sd卡" class="headerlink" title="烧录镜像到sd卡"></a>烧录镜像到sd卡</h2><h3 id="将镜像烧录到sd卡"><a href="#将镜像烧录到sd卡" class="headerlink" title="将镜像烧录到sd卡"></a>将镜像烧录到sd卡</h3><p>使用如下dd命令将树莓派镜像少量到sd卡：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd bs=4M if=2018-10-09-raspbian-stretch.img of=/dev/sdX conv=fsync</span><br></pre></td></tr></table></figure></p><p>其中：</p><ul><li>if=文件名：输入文件名，缺省为标准输入。即指定源文件。</li><li>of=文件名：输出文件名，缺省为标准输出。即指定目的文件。</li><li>bs=bytes：同时设置读入/输出的块大小为bytes个字节。</li><li>conv=conversion：用指定的参数转换文件。</li></ul><h3 id="将压缩镜像烧录到sd卡"><a href="#将压缩镜像烧录到sd卡" class="headerlink" title="将压缩镜像烧录到sd卡"></a>将压缩镜像烧录到sd卡</h3><p>当文件系统不支持大于4GB的文件时，可使用利用管道技术烧录镜像，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -p 2018-10-09-raspbian-stretch.zip | sudo dd of=/dev/sdX bs=4M conv=fsync</span><br></pre></td></tr></table></figure></p><h3 id="检查烧录进度"><a href="#检查烧录进度" class="headerlink" title="检查烧录进度"></a>检查烧录进度</h3><p>默认情况下dd命令不给出烧录进度信息，最新的dd提供status=progress选项给出进度信息，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd bs=4M if=2018-10-09-raspbian-stretch.img of=/dev/sdX status=progress conv=fsync</span><br></pre></td></tr></table></figure></p><p>或者可使用dcfldd命令替换dd进行烧录操作。</p><h2 id="检查镜像是否正确的烧录到sd卡"><a href="#检查镜像是否正确的烧录到sd卡" class="headerlink" title="检查镜像是否正确的烧录到sd卡"></a>检查镜像是否正确的烧录到sd卡</h2><p>先使用dd命令将sd卡中内容复制到硬盘，在使用diff或者md5sum检查镜像文件与sd卡内容镜像之间的一致性。</p><p>之前dd命令烧录镜像到sd卡完成后会在shell中输出如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx+0 records in</span><br><span class="line">yyy+0 records out</span><br><span class="line">yyyyyyyyyy bytes (yyy kB, yyy KiB) copied, 0.00144744 s, 283 MB/s</span><br></pre></td></tr></table></figure></p><p>xxx是我们需要的，表示读取xxx块记录烧录到sd卡，xxx乘以bs=4M应该等于原始镜像的大小。</p><p>使用如下命令复制sd卡内容到硬盘上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 经测试count命令没有其作用，该命令将整个sd内容复制到了硬盘，但我们期望只复制之前烧录到sd卡内容</span><br><span class="line">dd bs=4M if=/dev/sdX of=from-sd-card.img count=xxx</span><br></pre></td></tr></table></figure></p><p>如果from-sd-card.img文件大于原始镜像文件，那么先使用truncate命令将from-sd-card.img缩小到原始镜像文件的大小，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate --reference 2018-10-09-raspbian-stretch.img from-sd-card.img</span><br></pre></td></tr></table></figure></p><p>使用diff命令比较两者直接的一致性，如果不一致，可能烧录过程中有错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -s from-sd-card.img 2018-10-09-raspbian-stretch.img</span><br></pre></td></tr></table></figure></p><p>使用sync命令强制将缓存写入硬盘，然后umount sd卡文件系统，最后移除sd卡。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.raspberrypi.org/documentation/installation/installing-images/linux.md" target="_blank" rel="noopener">https://www.raspberrypi.org/documentation/installation/installing-images/linux.md</a>, by raspberrypi.</li><li><a href="https://blog.csdn.net/liumang_D/article/details/3899462" target="_blank" rel="noopener">https://blog.csdn.net/liumang_D/article/details/3899462</a>, by liumang_d.</li><li><a href="https://linux.cn/article-8024-1.html" target="_blank" rel="noopener">https://linux.cn/article-8024-1.html</a>, by linux中国</li><li><a href="https://www.jianshu.com/p/ff09ceffa816" target="_blank" rel="noopener">https://www.jianshu.com/p/ff09ceffa816</a>, by 二石兄.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树莓派是一个微型计算机硬件平台，为使其正常工作还需要安装操作系统。通常将树莓派操作系统烧录到SD卡上，再将SD卡插到树莓派上。加电启动后，树莓派就会从SD卡引导启动操作系统，开始工作。这里SD卡就相当于普通计算机的硬盘。下面记录在Debian Linux下烧录树莓派操作系统
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="硬件" scheme="https://huangwang.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>树莓派学习笔记</title>
    <link href="https://huangwang.github.io/2018/11/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/11/03/树莓派学习笔记/</id>
    <published>2018-11-03T04:41:24.000Z</published>
    <updated>2018-11-03T10:10:46.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WiringPi简介"><a href="#WiringPi简介" class="headerlink" title="WiringPi简介"></a>WiringPi简介</h1><p>WiringPi是应用于树莓派平台的GPIO控制库函数，WiringPi遵守GUN Lv3。wiringPi使用C或者C++开发并且可以被其他语言包转，例如python、ruby或者PHP等。WiringPi中的函数类似于Arduino的wiring系统，这使得熟悉arduino的用户使用wringPi更为方便。</p><p>树莓派具有26个普通输入和输出引脚。在这26个引脚中具有8个普通输入和输出管脚，这8个引脚既可以作为输入管脚也可以作为输出管脚。除此之外，树莓派还有一个2线形式的I2C、一个4线形式的SPI和一个UART接口。树莓派上的I2C和SPI接口也可以作为普通端口使用。如果串口控制台被关闭便可以使用树莓派上的UART功能。如果不使用I2C，SPI和UART等复用接口，那么树莓派总共具有8+2+5+2 =17个普通IO。</p><p>wiringPi包括一套gpio控制命令，使用gpio命令可以控制树莓派GPIO管脚。用户可以利用gpio命令通过shell脚本控制或查询GPIO管脚。wiringPi是可以扩展的，可以利用wiringPi的内部模块扩展模拟量输入芯片，可以使用MCP23x17/MCP23x08（I2C 或者SPI）扩展GPIO接口。另外可通过树莓派上的串口和Atmega（例如arduino等）扩展更多的GPIO功能。另外，用户可以自己编写扩展模块并把自定义的扩展模块集成到wiringPi中。WiringPi支持模拟量的读取和设置功能，不过在树莓派上并没有模拟量设备。但是使用WiringPi中的软件模块却可以轻松地应用AD或DA芯片。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>1.<a href="https://blog.csdn.net/xukai871105/article/details/17737005" target="_blank" rel="noopener">https://blog.csdn.net/xukai871105/article/details/17737005</a>, by xukai871105.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WiringPi简介&quot;&gt;&lt;a href=&quot;#WiringPi简介&quot; class=&quot;headerlink&quot; title=&quot;WiringPi简介&quot;&gt;&lt;/a&gt;WiringPi简介&lt;/h1&gt;&lt;p&gt;WiringPi是应用于树莓派平台的GPIO控制库函数，WiringPi遵守
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="硬件" scheme="https://huangwang.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Debian下编译QGroundControl源码</title>
    <link href="https://huangwang.github.io/2018/11/01/Debian%E4%B8%8B%E7%BC%96%E8%AF%91QGroundControl%E6%BA%90%E7%A0%81/"/>
    <id>https://huangwang.github.io/2018/11/01/Debian下编译QGroundControl源码/</id>
    <published>2018-11-01T14:41:44.000Z</published>
    <updated>2018-11-01T15:04:10.755Z</updated>
    
    <content type="html"><![CDATA[<p>MAVLink（Micro Air Vehicle Link，微型空中飞行器链路通讯协议）是无人飞行器与地面站之间通讯，以及无人飞行器之间通讯最常用的协议。它已经在PX4、APM、PIXHAWK和Parrot AR.Drone飞控平台上进行了大量测试。</p><p>QGroundControl则是一种操纵基于MAVLink通信协议的无人机的跨平台地面站开源软件。下面记录在Debian Linux下从源码编译QGroundControl的过程。</p><h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 下载QGroundControl源码</span><br><span class="line">git clone --recursive https://github.com/mavlink/qgroundcontrol.git</span><br><span class="line"># 更新子模块</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><ol><li>下载Qt社区版在线安装器，安装5.11.0版本的Qt，安装路径可在/opt下。</li><li><p>安装必要的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install speech-dispatcher libudev-dev libsdl2-dev</span><br></pre></td></tr></table></figure></li><li><p>解决编译时libQt5PositioningQuick.so.5不存在的bug</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libqt5positioningquick5</span><br><span class="line">sudo find /usr/ -name libQt5PositioningQuick.so.5</span><br><span class="line">cp /usr/lib/x86_64-linux-gnu/libQt5PositioningQuick.so.5 /opt/Qt/5.10.0/gcc_64/lib/libQt5PositioningQuick.so.5</span><br></pre></td></tr></table></figure></li><li><p>将当前用户添加到dialout组，获取串口访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 运行QGroundControl需要当前用户拥有串口访问权限</span><br><span class="line">sudo usermod -a -G dialout $USER</span><br></pre></td></tr></table></figure></li></ol><h1 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h1><p>打开Qt Creater，打开qgroundcontrol.pro工程，构建后运行，即可打开QGroundControl地面站软件。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/hebbely/article/details/79022799" target="_blank" rel="noopener">https://blog.csdn.net/hebbely/article/details/79022799</a>,  by hebbely</li><li><a href="https://dev.qgroundcontrol.com/en/getting_started/" target="_blank" rel="noopener">https://dev.qgroundcontrol.com/en/getting_started/</a>, by Dronecode</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MAVLink（Micro Air Vehicle Link，微型空中飞行器链路通讯协议）是无人飞行器与地面站之间通讯，以及无人飞行器之间通讯最常用的协议。它已经在PX4、APM、PIXHAWK和Parrot AR.Drone飞控平台上进行了大量测试。&lt;/p&gt;
&lt;p&gt;QGr
      
    
    </summary>
    
    
      <category term="linux" scheme="https://huangwang.github.io/tags/linux/"/>
    
      <category term="无人机" scheme="https://huangwang.github.io/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令用法总结</title>
    <link href="https://huangwang.github.io/2018/11/01/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://huangwang.github.io/2018/11/01/Linux常用命令用法总结/</id>
    <published>2018-11-01T13:44:27.000Z</published>
    <updated>2018-11-24T12:19:49.166Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常用的linux命令用法，以备查询。</p><ol><li><p>查找文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># find基本语法：find [PATH] [option] [action]</span><br><span class="line"></span><br><span class="line">find /usr/lib -name libQt5Xml.so</span><br><span class="line"># 使用通配符</span><br><span class="line">find /usr/lib -name &quot;*ssl*&quot;</span><br></pre></td></tr></table></figure></li><li><p>批量转换文件格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 将png格式图像转换为jpg</span><br><span class="line"># -1 – 告诉 ls 每行列出一个图像名称的选项标识</span><br><span class="line"># -n – 指定最多参数个数，例子中为 1</span><br><span class="line"># -c – 指示 bash 运行给定的命令</span><br><span class="line"># $&#123;0%.png&#125;.jpg – 设置新转换的图像文件的名字，% 符号用来删除源文件的扩展名</span><br><span class="line"></span><br><span class="line">ls -1 *.png | xargs -n 1 bash -c &apos;convert &quot;$0&quot; &quot;$&#123;0%.png&#125;.jpg&quot;&apos;</span><br></pre></td></tr></table></figure></li><li><p>修改用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将用户$USER添加到dialout用户组，以获取串口访问权限</span><br><span class="line">sudo usermod -a -G dialout $USER</span><br></pre></td></tr></table></figure></li><li><p>校验文件</p></li></ol><p>下载的文件最好校验完整性，防止被人篡改。以sha256sum为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#以下命令将生成树莓派映像的sha256哈希码，从树莓派官网复制该映像sha256哈希码，以便校验。当然通常应该会提供映像的哈希码校验文件。</span><br><span class="line">sha256sum 2018-10-09-raspbian-stretch.zip &gt;2018-10-09-raspbian-stretch.zip.sha256sum</span><br><span class="line">#使用下面校验文件的完整性，如果成功则映像与官方一致，未被篡改。注意被校验文件与校验文件应放在同一个目录。</span><br><span class="line">sha256sum -c 2018-10-09-raspbian-stretch.zip.sha256sum</span><br></pre></td></tr></table></figure><ol><li>特殊符号用法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#| 管道 (pipeline)，是 UNIX 系统，基础且重要的观念。连结上个指令的标准输出，做为下个指令的标准输入。</span><br><span class="line">who | wc -l</span><br><span class="line"></span><br><span class="line">#! 惊叹号(negate or reverse)，通常它代表反逻辑的作用，譬如条件侦测中，用 != 来代表&quot;不等于&quot;</span><br><span class="line">#下例代表显示除了a0, a1 .... a9 这几个文件的其他文件。</span><br><span class="line">ls a[!0-9]</span><br><span class="line"></span><br><span class="line">#&amp; 后台工作，单一个&amp; 符号，且放在完整指令列的最后端，即表示将该指令列放入后台中工作。</span><br><span class="line">tar cvfz data.tar.gz data &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一些常用的linux命令用法，以备查询。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查找文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/
      
    
    </summary>
    
    
      <category term="linux" scheme="https://huangwang.github.io/tags/linux/"/>
    
      <category term="shell" scheme="https://huangwang.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用tensorflow_object_detection_api训练自定义模型</title>
    <link href="https://huangwang.github.io/2018/10/20/%E4%BD%BF%E7%94%A8tensorflow-object-detection-api%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B/"/>
    <id>https://huangwang.github.io/2018/10/20/使用tensorflow-object-detection-api训练自定义模型/</id>
    <published>2018-10-20T09:30:30.000Z</published>
    <updated>2018-10-21T09:20:42.966Z</updated>
    
    <content type="html"><![CDATA[<p>近期研究目标对象检测和识别，发现谷歌开源的基于tensorflow的object detection api模型效果不错，于是git clone下来测试一下。下面记录我在debian linux上安装配置object detection api模型，构建自定义数据集，训练和测试object detection api模型的过程，以及整个过程中遇到的一下问题，需要注意的事项。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>TensorFlow 程序在 GPU 上的运行速度通常要比在 CPU 上快得多，在系统满足NVIDIA 软件要求的前提下，推荐使用支持 GPU 的 TensorFlow。</p><p>官方推荐使用Docker简化TensorFlow的GPU支持配置，这样只需要linux主机安装好Nvidia GPU驱动即可。</p><ol><li><p>安装docker<br>安装docker的方法可参考链接1。</p></li><li><p>安装nvidia-docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Add the package repositories</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/debian9/nvidia-docker.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># Install nvidia-docker2 and reload the Docker daemon configuration</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure></li><li><p>下载最新支持GPU和Python3的tensorflow映像<sup>[2]</sup></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow:latest-gpu-py3</span><br></pre></td></tr></table></figure></li><li><p>测试tensorflow映像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --runtime=nvidia -it --rm tensorflow/tensorflow:latest-gpu-py3 \</span><br><span class="line">    python -c &quot;import tensorflow as tf; print(tf.contrib.eager.num_gpus())&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="下载TFModel库及其相关库"><a href="#下载TFModel库及其相关库" class="headerlink" title="下载TFModel库及其相关库"></a>下载TFModel库及其相关库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 基于tensorflow的模型和例子</span><br><span class="line">git clone https://github.com/tensorflow/models.git</span><br><span class="line"># raccoon数据集，可参考其中生成TFRecord格式数据的方法</span><br><span class="line">git clone https://github.com/datitran/raccoon_dataset.git</span><br></pre></td></tr></table></figure><h2 id="安装Python虚拟环境管理工具"><a href="#安装Python虚拟环境管理工具" class="headerlink" title="安装Python虚拟环境管理工具"></a>安装Python虚拟环境管理工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 具体安装配置过程参见链接3</span><br><span class="line">sudo pip3 install virtualenv</span><br><span class="line">sudo pip3 install virtualenvwrapper</span><br><span class="line">mkvirtualenv object-detection --python=/usr/bin/python3# 创建python3虚拟环境</span><br></pre></td></tr></table></figure><h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><p>以分类几何形状为例，收集相关图片后，需要对它们进行标注。推荐使用 LabelImg 进行标注，生成的文件是 PASCAL VOC 的 xml 格式。这个工具还可以加载标注文件，检查标注结果<sup>[3]</sup>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tzutalin/labelImg.git</span><br><span class="line">workon object-detection</span><br><span class="line"># 启动python3虚拟环境</span><br><span class="line">workon object-detection</span><br><span class="line"># 安装配置labelImg</span><br><span class="line">sudo apt-get install pyqt5-dev-tools</span><br><span class="line">sudo pip3 install -r requirements/requirements-linux-python3.txt</span><br><span class="line">make qt5py3</span><br><span class="line">python3 labelImg.py</span><br></pre></td></tr></table></figure></p><p>除了标注图片，还需创建一个 .pbtxt 文件用来说明标注的分类。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">  id: 1</span><br><span class="line">  name: &apos;circle&apos;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">  id: 2</span><br><span class="line">  name: &apos;square&apos;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">  id: 3</span><br><span class="line">  name: &apos;triangle&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要特别注意以下两点：</p><ul><li>name 不支持直接写中文，需要 UTF-8 编码</li><li>id 从 1 开始编号，不能从 0 开始编号。</li></ul><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>标注好的数据是图片文件（<em>.jpg）和标注文件（</em>.xml），而 TensorFlow 不能直接用这些数据作为输入，还需要转成 TFRecord 格式。可采用两种方法生成TFRecord格式数据：</p><ul><li>tensorflow/models中方法</li></ul><p>项目中使用create_pascal_tf_record.py, create_pet_tf_record.py生成TFrecord 格式数据</p><ul><li>raccoon_dataset中方法</li></ul><p>项目中使用xml_to_csv.py把xml合并成一个CSV文件，使用split labels.ipynb 随机划分训练集和测试集，以及使用generate_tfrecord.py 生成相对应的 TFRecord 训练集和测试集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">workon object-detection</span><br><span class="line"># 将生成geometry_labels.csv</span><br><span class="line">python xml_to_csv.py</span><br><span class="line"># 打开split labels.ipynb生产训练集train_labels.csv和测试集test_labels.csv</span><br><span class="line">jupyter notebook</span><br><span class="line"># 创建训练用TFRecord文件:</span><br><span class="line">python generate_tfrecord.py --csv_input=data/train_labels.csv  --output_path=training/geometry_train.record</span><br><span class="line"># 创建测试用TFRecord文件:</span><br><span class="line">python generate_tfrecord.py --csv_input=data/test_labels.csv  --output_path=training/geometry_test.record</span><br></pre></td></tr></table></figure></p><p>第二种方法比较直观，因此我采用第二种方法生产TFRecord数据。</p><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="安装TFModel依赖"><a href="#安装TFModel依赖" class="headerlink" title="安装TFModel依赖"></a>安装TFModel依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">workon object-detection</span><br><span class="line"># For CPU</span><br><span class="line">pip install tensorflow</span><br><span class="line"># For GPU</span><br><span class="line">pip install tensorflow-gpu</span><br><span class="line"></span><br><span class="line">pip install --user Cython</span><br><span class="line">pip install --user contextlib2</span><br><span class="line">pip install --user pillow</span><br><span class="line">pip install --user lxml</span><br><span class="line">pip install --user jupyter</span><br><span class="line">pip install --user matplotlib</span><br></pre></td></tr></table></figure><h2 id="安装COCO-API"><a href="#安装COCO-API" class="headerlink" title="安装COCO API"></a>安装COCO API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cocodataset/cocoapi.git</span><br><span class="line">cd cocoapi/PythonAPI</span><br><span class="line">make</span><br><span class="line">cp -r pycocotools &lt;path_to_tensorflow&gt;/models/research/</span><br></pre></td></tr></table></figure><h2 id="编译Protobuf"><a href="#编译Protobuf" class="headerlink" title="编译Protobuf"></a>编译Protobuf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip</span><br><span class="line">unzip protobuf.zip</span><br><span class="line"></span><br><span class="line"># From tensorflow/models/research/</span><br><span class="line">./bin/protoc object_detection/protos/*.proto --python_out=.</span><br></pre></td></tr></table></figure><h2 id="添加库到PYTHONPATH"><a href="#添加库到PYTHONPATH" class="headerlink" title="添加库到PYTHONPATH"></a>添加库到PYTHONPATH</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line"># 每次调用TFModel的Object Detection API之前都要设置</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># if all tests is ok, the installation is no problem.</span><br><span class="line">python object_detection/builders/model_builder_test.py</span><br></pre></td></tr></table></figure><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h2><ol><li><p>将label_map文件、训练用TFRecord文件、测试用TFRecord文件复制到tensorflow/models/research/object_detection/data文件夹下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 推荐的数据目录结构</span><br><span class="line">+ data</span><br><span class="line">  - geometry.pbtxt</span><br><span class="line">  - geometry_test.record</span><br><span class="line">  - geometry_train.record</span><br></pre></td></tr></table></figure></li><li><p>下载COCO预训练模型用于迁移学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/object-detection</span><br><span class="line">wget http://download.tensorflow.org/models/object_detection/ssd_mobilenet_v1_coco_2018_01_28.tar.gz</span><br><span class="line">tar -xvf ssd_mobilenet_v1_coco_2018_01_28.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改解压后模型文件夹中pipeline.config</p></li></ol><p>解压ssd_mobilenet_v1_coco_2018_01_28模型后会看到一个 .config 文件，里面包含有模型的参数，训练的参数，评估的参数等。这里需要修改到的有，</p><ul><li>模型参数中的 num_classes，改成你的类别数，</li><li>训练参数中的 fine_tune_checkpoint，采用迁移学习，这里路径的指向刚才下载的Pre-train模型，比如 ssd_mobilenet_v1_coco_11_06_2017/model.ckpt</li><li>train_input_reader 下面的 input_path，改成你的训练数据，例如 data/train.record。label_map_path，改成你的 pbtxt 文件路径，例如 data/object.pbtxt</li><li>eval_input_reader 下面的 input_path，也需要改成你的测试集，例如 data/test.record。同样，label_map_path，也改成你的 pbtxt 文件路径，例如 data/object.pbtxt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//pipeline.config修改示例</span><br><span class="line">model &#123;</span><br><span class="line">  ssd &#123;</span><br><span class="line">    num_classes: 3</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">train_config &#123;</span><br><span class="line">  ...</span><br><span class="line">  fine_tune_checkpoint: &quot;object_detection/ssd_mobilenet_v1_coco_2018_01_28/model.ckpt&quot;</span><br><span class="line">  from_detection_checkpoint: true</span><br><span class="line">  num_steps: 50000</span><br><span class="line">&#125;</span><br><span class="line">train_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;object_detection/data/geometry.pbtxt&quot;</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;object_detection/data/geometry_train.record&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">eval_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;object_detection/data/geometry.pbtxt&quot;</span><br><span class="line">  shuffle: false</span><br><span class="line">  num_epochs: 1</span><br><span class="line">  num_readers: 1</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;object_detection/data/geometry_test.record&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  sample_1_of_n_examples: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h2><p>在GPU上训练TFModel，与在CPU上训练TFModel相比，要快五倍左右，因此推荐在GPU上训练TFModel。</p><ol><li><p>启动docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动docker，并使用-v参数将目录/home/$USER挂载到容器上</span><br><span class="line">docker run --runtime=nvidia -v /home/$USER:/home/$USER -it tensorflow/tensorflow:latest-gpu-py3 bash</span><br></pre></td></tr></table></figure></li><li><p>执行训练</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br><span class="line"># 开始训练</span><br><span class="line">python object_detection/model_main.py --pipeline_config_path=object_detection/ssd_mobilenet_v1_coco_2018_01_28/pipeline.config --model_dir=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/ --num_train_steps=50000 --alsologtostderr</span><br></pre></td></tr></table></figure></li><li><p>使用tensorboard查看训练进度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">tensorboard --logdir=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/</span><br></pre></td></tr></table></figure></li></ol><p>在CPU上训练只需执行第二步和第三步。</p><h2 id="导出模型"><a href="#导出模型" class="headerlink" title="导出模型"></a>导出模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">python object_detection/export_inference_graph.py --input_type=image_tensor --pipeline_config_path=object_detection/ssd_mobilenet_v1_coco_2018_01_28/pipeline.config --trained_checkpoint_prefix=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/model.ckpt-50000 --output_directory=../../../../ssd_mobilenet_v1_coco_2018_01_28</span><br></pre></td></tr></table></figure><p>运行完命令后模型就导出到 ssd_mobilenet_v1_coco_2018_01_28 文件夹中，其中的frozen_inference_graph.pb即是所需模型。 需要注意的是，参数中的 –trained_checkpoint_prefix 是需要指定到单个模型的，例如 model.ckpt-50000，这个50000就是训练了 50000 步后自动保存模型。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/，">https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/，</a> by jack huang</li><li><a href="https://www.tensorflow.org/install/docker?hl=zh-cn" target="_blank" rel="noopener">https://www.tensorflow.org/install/docker?hl=zh-cn</a> , by tensorflow.</li><li><a href="https://huangwang.github.io/2018/10/09/Virtualenv简易教程/">https://huangwang.github.io/2018/10/09/Virtualenv简易教程/</a> , by jack huang</li><li><a href="https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html" target="_blank" rel="noopener">https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html</a> , by 菁菁者莪</li><li><a href="https://blog.csdn.net/xunan003/article/details/78720189?utm_source=blogxgwz2" target="_blank" rel="noopener">https://blog.csdn.net/xunan003/article/details/78720189?utm_source=blogxgwz2</a>, by xunan003</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期研究目标对象检测和识别，发现谷歌开源的基于tensorflow的object detection api模型效果不错，于是git clone下来测试一下。下面记录我在debian linux上安装配置object detection api模型，构建自定义数据集，训练和
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="tensorflow" scheme="https://huangwang.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Docker使用帮助</title>
    <link href="https://huangwang.github.io/2018/10/19/Docker%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <id>https://huangwang.github.io/2018/10/19/Docker使用帮助/</id>
    <published>2018-10-19T01:57:21.000Z</published>
    <updated>2018-10-20T13:42:29.964Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p><p>Docker与传统虚拟机如virtualbox、vmware相比，占用资源少，更加轻便，启动快，更适用于解决软件环境配置难题。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol><li><p>镜像</p><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p></li><li><p>容器</p></li></ol><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><ol><li>仓库</li></ol><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p><p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>Docker Hub 上有大量的高质量的镜像可以用，使用docker pull命令拉取镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 拉取镜像</span><br><span class="line">$ docker pull ubuntu:16.04</span><br><span class="line">// 以该镜像启动容器</span><br><span class="line">$ docker run -it --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure></p><p>docker run 就是运行容器的命令,其参数含义如下：</p><ul><li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li>—rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。</li><li>ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。</li><li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li></ul><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>删除本地镜像格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure></p><p>以删除hello-world镜像为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm hello-world</span><br></pre></td></tr></table></figure></p><h2 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 新建并启动容器</span><br><span class="line">docker run ubuntu:14.04 /bin/echo &apos;Hello world&apos;</span><br><span class="line">// 启动已终止容器</span><br><span class="line">docker container start</span><br></pre></td></tr></table></figure><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 后台运行容器</span><br><span class="line">$ docker run -d ubuntu:17.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br><span class="line">// 通过 docker container ls 命令来查看容器信息</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">// 通过 docker container logs 命令获取容器的输出信息</span><br><span class="line">$ docker container logs [container ID or NAMES]</span><br></pre></td></tr></table></figure><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>在使用 -d 参数时，容器启动后会进入后台。</p><p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">$ docker container ls</span><br><span class="line">$ docker exec -i 69d1 bash</span><br><span class="line">$ docker exec -it 69d1 bash</span><br></pre></td></tr></table></figure></p><p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 删除一个处于终止状态的容器</span><br><span class="line">$ docker container rm  trusting_newton</span><br><span class="line"></span><br><span class="line">// 清理所有处于终止状态的容器</span><br><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://yeasy.gitbooks.io/docker_practice/introduction/what.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/introduction/what.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a> ，by 阮一峰</li><li><a href="https://zh.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Docker</a> ,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。&lt;/p&gt;
&lt;p&gt;Docker与传统虚拟机如virtualbox、vmware相比，占用资源少，更加
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Debian_Linux下安装Docker的方法</title>
    <link href="https://huangwang.github.io/2018/10/18/Debian-Linux%E4%B8%8B%E5%AE%89%E8%A3%85Docker%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/</id>
    <published>2018-10-18T13:42:00.000Z</published>
    <updated>2018-10-18T14:53:35.891Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p><p>Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心名字空间（name space），来创建独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机造成的额外负担。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网上、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、存储器、block I/O与网上。</p><p>下面即记录在Debian Linux下按照Docker社区版的方法。</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>添加Docker的pgp key。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></p><p>配置Docker的Apt仓库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;deb https://download.docker.com/linux/debian stretch stable&apos; | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure></p><p>更新Apt仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 清除之前安装的Docker版本</span><br><span class="line">apt-get remove docker docker-engine docker.io</span><br><span class="line">// 在安装最新的Docker社区版</span><br><span class="line">apt-get install docker-ce</span><br><span class="line">// 测试docker</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h1 id="以非root用户管理docker"><a href="#以非root用户管理docker" class="headerlink" title="以非root用户管理docker"></a>以非root用户管理docker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://zh.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Docker</a> ,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。&lt;/p&gt;
&lt;p&gt;Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow学习笔记</title>
    <link href="https://huangwang.github.io/2018/10/14/tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/10/14/tensorflow学习笔记/</id>
    <published>2018-10-14T05:10:24.000Z</published>
    <updated>2018-10-14T06:07:26.317Z</updated>
    
    <content type="html"><![CDATA[<p>TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。</p><h1 id="tensorflow入门"><a href="#tensorflow入门" class="headerlink" title="tensorflow入门"></a>tensorflow入门</h1><p>tensorflow实现机器学习的基本步骤如下：</p><ol><li>定义模型，建立数据流图</li><li>定义loss，并指定优化器 </li><li>传入数据并进行训练 </li><li>使用测试集进行评测</li></ol><h2 id="通用代码框架"><a href="#通用代码框架" class="headerlink" title="通用代码框架"></a>通用代码框架</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># 初始化变量和模型参数，定义训练闭环中的运算</span><br><span class="line"></span><br><span class="line">def inference(X):</span><br><span class="line">    # 计算推断模型在数据X上的输出，并将结果返回</span><br><span class="line"></span><br><span class="line">def loss(X,Y):</span><br><span class="line">    # 依据训练数据X及其期望输出Y计算损失</span><br><span class="line"></span><br><span class="line">def inputs():</span><br><span class="line">    # 读取或生成训练数据X及其期望输出Y</span><br><span class="line"></span><br><span class="line">def train(total_loss):</span><br><span class="line">    # 依据计算的总损失训练或调整模型参数</span><br><span class="line"></span><br><span class="line">def evaluate(sess,X,Y):</span><br><span class="line">    # 对训练得到的模型进行评估</span><br><span class="line"></span><br><span class="line"># 在一个会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    </span><br><span class="line">    X,Y=inputs()</span><br><span class="line">    </span><br><span class="line">    total_loss=loss(X,Y)</span><br><span class="line">    train_op=train(total_loss)</span><br><span class="line">    </span><br><span class="line">    coord=tf.train.Coordinator()</span><br><span class="line">    threads=tf.train.start_queue_runners(sess=sess,coord=coord)</span><br><span class="line"></span><br><span class="line">    # 实际的训练迭代次数</span><br><span class="line">    training_steps=1000</span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line">        # 出于调试和学习的目的，查看损失在训练过程中递减的情况</span><br><span class="line">        if step % 10 =0:</span><br><span class="line">            print &quot;loss: &quot;,sess,run([total_loss])</span><br><span class="line"></span><br><span class="line">    evalute(sess,X,Y)</span><br><span class="line"></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure><h2 id="保存训练检查点"><a href="#保存训练检查点" class="headerlink" title="保存训练检查点"></a>保存训练检查点</h2><p>借助tf.train.Saver类可创建检查点文件，将数据流图中变量保存至其中。修改后框架如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 模型定义代码</span><br><span class="line"># 创建一个Saver对象</span><br><span class="line">saver=tf.train.Saver()</span><br><span class="line"></span><br><span class="line"># 在会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    # 模型设置</span><br><span class="line"></span><br><span class="line">    # 实际的训练闭环</span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line"></span><br><span class="line">        if step % 1000 ==0</span><br><span class="line">            # 将创建遵循命名模板为my-model-&#123;step&#125;的检查点文件，默认保存最近的5个文件</span><br><span class="line">            saver.save(sess,&apos;my-model&apos;,global_step=step)</span><br><span class="line">    </span><br><span class="line">    # 模型评估</span><br><span class="line"></span><br><span class="line">    saver.save(sess,&apos;my-model&apos;,global_step=training_steps)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure></p><p>如果希望从检查点恢复，则使用tf.train.get_checkpoint_state方法验证检查点文件的存在，并使用tf.train.Saver.restore方法恢复变量值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">with tf.Session() as sess:</span><br><span class="line">    # 模型设置</span><br><span class="line"></span><br><span class="line">    initial_step=0</span><br><span class="line"></span><br><span class="line">    # 验证之前是否已经保存了检查点文件</span><br><span class="line">    ckpt=tf.train.get_checkpoint_state(os.path.dirname(__file__))</span><br><span class="line">    if ckpt and ckpt.model_checkpoint_path:</span><br><span class="line">        # 从检查点恢复模型参数</span><br><span class="line">        saver.restore(sess,ckpt.model_checkpoint_path)</span><br><span class="line">        initial_step=int(ckpt.model_checkpoint_path.rsplite(&apos;_&apos;,1)[1])</span><br><span class="line"></span><br><span class="line">    # 实际的训练闭环</span><br><span class="line">    for step in range(initial_step, training_steps):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.tensorflow.org/?hl=zh-cn" target="_blank" rel="noopener">https://www.tensorflow.org/?hl=zh-cn</a> .</li><li>面向机器智能的TensorFlow实践, by Sam Abrahams, Danijar Hafner,etc.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
