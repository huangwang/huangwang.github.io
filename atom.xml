<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-11-16T15:44:53.642Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>经纬高与北天东坐标之间的转换方法</title>
    <link href="https://huangwang.github.io/2019/11/16/%E7%BB%8F%E7%BA%AC%E9%AB%98%E4%B8%8E%E5%8C%97%E5%A4%A9%E4%B8%9C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/11/16/经纬高与北天东坐标之间的转换方法/</id>
    <published>2019-11-16T15:41:38.000Z</published>
    <updated>2019-11-16T15:44:53.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%BF%83%E5%9C%B0%E5%9B%BA%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">地心地固坐标系</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E6%A4%AD%E7%90%83" target="_blank" rel="noopener">地球椭球</a>,by wikipedia.</li><li><a href="http://qiancy.com/2017/01/07/datum-spheroid-parameters-equation/" target="_blank" rel="noopener">椭球体的重要参数和公式</a>,by 一灯.</li><li><a href="https://stackoverflow.com/questions/4679876/how-do-i-translate-of-lon-lat-coordinate-by-some-n-e-meters-distance-on-earth-su" target="_blank" rel="noopener">how do I translate of lon/lat coordinate by some N-E meters distance on earth surface?</a>,by stackoverflow.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%BF%8
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>CMake使用入门教程</title>
    <link href="https://huangwang.github.io/2019/11/16/CMake%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/11/16/CMake使用入门教程/</id>
    <published>2019-11-16T14:49:15.000Z</published>
    <updated>2019-11-16T15:39:07.887Z</updated>
    
    <content type="html"><![CDATA[<p>近几年美国对中国的科技封杀十分严重，说不定哪天Windows操作系统就不让我们用了。因此，在构建C/C++项目时应考虑跨平台，哪天不让用Windows了，可以请容易的将项目移植到Linux上。不同系统平台有不同的C/C++编译器，不同编译器有不同的构建规则，针对每个平台的不同编译器编写构建规则十分复杂，幸好有CMake可简化构建规则的编写，实现一次编写，不同平台适用。下面简单介绍CMake的使用。</p><h1 id="CMake简介"><a href="#CMake简介" class="headerlink" title="CMake简介"></a>CMake简介</h1><p>代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。</p><p>Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。</p><p>Make工具有很多，例如 GNU Make ，QT 的 qmake ，微软的 MS nmake，BSD Make（pmake），Makepp，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。</p><p>CMake就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 VTK、ITK、KDE、OpenCV、OSG 等。</p><h1 id="CMake教程入门"><a href="#CMake教程入门" class="headerlink" title="CMake教程入门"></a>CMake教程入门</h1><h2 id="给工程起个名字"><a href="#给工程起个名字" class="headerlink" title="给工程起个名字"></a>给工程起个名字</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project(&lt;PROJECT-NAME&gt; [LANGUAGES] [&lt;language-name&gt;...])</span><br></pre></td></tr></table></figure><p>该指令定义工程名称。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project(UtilTool)</span><br></pre></td></tr></table></figure><h2 id="添加头文件目录INCLUDE-DIRECTORIES"><a href="#添加头文件目录INCLUDE-DIRECTORIES" class="headerlink" title="添加头文件目录INCLUDE_DIRECTORIES"></a>添加头文件目录INCLUDE_DIRECTORIES</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])</span><br></pre></td></tr></table></figure><p>它相当于g++选项中的-I参数的作用，也相当于环境变量中增加路径到CPLUS_INCLUDE_PATH变量的作用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/include)</span><br></pre></td></tr></table></figure><h2 id="添加需要链接的库文件目录LINK-DIRECTORIES"><a href="#添加需要链接的库文件目录LINK-DIRECTORIES" class="headerlink" title="添加需要链接的库文件目录LINK_DIRECTORIES"></a>添加需要链接的库文件目录LINK_DIRECTORIES</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link_directories(directory1 directory2 ...)</span><br></pre></td></tr></table></figure><p>它相当于g++命令的-L选项的作用，也相当于环境变量中增加LD_LIBRARY_PATH的路径的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/lib)</span><br></pre></td></tr></table></figure><h2 id="设置要链接的库文件的名称TARGET-LINK-LIBRARIES"><a href="#设置要链接的库文件的名称TARGET-LINK-LIBRARIES" class="headerlink" title="设置要链接的库文件的名称TARGET_LINK_LIBRARIES"></a>设置要链接的库文件的名称TARGET_LINK_LIBRARIES</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target_link_libraries(&lt;target&gt; [item1 [item2 [...]]]</span><br><span class="line">                      [[debug|optimized|general] &lt;item&gt;] ...)</span><br></pre></td></tr></table></figure><p>该指令的作用为将目标文件与库文件进行链接。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TARGET_LINK_LIBRARIES(utiltool-example utiltool)</span><br></pre></td></tr></table></figure><h2 id="为工程生成目标文件"><a href="#为工程生成目标文件" class="headerlink" title="为工程生成目标文件"></a>为工程生成目标文件</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE]</span><br><span class="line">               [EXCLUDE_FROM_ALL]</span><br><span class="line">               source1 [source2 ...])</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD_EXECUTABLE(utiltool-example examples/ConverterTest.cpp)</span><br></pre></td></tr></table></figure><h2 id="为工程生成共享库"><a href="#为工程生成共享库" class="headerlink" title="为工程生成共享库"></a>为工程生成共享库</h2><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_library(&lt;name&gt; [STATIC | SHARED | MODULE]</span><br><span class="line">            [EXCLUDE_FROM_ALL]</span><br><span class="line">            [source1] [source2] [...])</span><br></pre></td></tr></table></figure><p>该指令的主要作用就是将指定的源文件生成链接文件，然后添加到工程中去。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD_LIBRARY(utiltool SHARED $&#123;UTILTOOL_SOURCES&#125;)</span><br></pre></td></tr></table></figure><h2 id="为工程制作简单的安装脚本"><a href="#为工程制作简单的安装脚本" class="headerlink" title="为工程制作简单的安装脚本"></a>为工程制作简单的安装脚本</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">install(TARGETS targets... [EXPORT &lt;export-name&gt;]</span><br><span class="line">          [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|</span><br><span class="line">            PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]</span><br><span class="line">           [DESTINATION &lt;dir&gt;]</span><br><span class="line">           [PERMISSIONS permissions...]</span><br><span class="line">           [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">           [COMPONENT &lt;component&gt;]</span><br><span class="line">           [OPTIONAL] [NAMELINK_ONLY|NAMELINK_SKIP]</span><br><span class="line">          ] [...])</span><br></pre></td></tr></table></figure><p>该命令为一个工程生成安装规则。TARGETS格式的install命令规定了安装工程中的目标（targets）的规则。有5中可以被安装的目标文件：ARCHIVE，LIBRARY，RUNTIME，FRAMEWORK，和BUNDLE。静态链接的库文件总是被当做ARCHIVE目标。模块库总是被当做LIBRARY目标。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">install(TARGETS utiltool </span><br><span class="line">        RUNTIME DESTINATION bin</span><br><span class="line">        ARCHIVE DESTINATION lib </span><br><span class="line">        LIBRARY DESTINATION lib)</span><br><span class="line">install(FILES $&#123;UTILTOOL_HEADERS&#125; DESTINATION include)</span><br></pre></td></tr></table></figure><h2 id="为工程设置变量"><a href="#为工程设置变量" class="headerlink" title="为工程设置变量"></a>为工程设置变量</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set(&lt;variable&gt; &lt;value&gt;</span><br><span class="line">    [[CACHE &lt;type&gt; &lt;docstring&gt; [FORCE]] | PARENT_SCOPE])</span><br></pre></td></tr></table></figure><p>该指令用于给一般变量，缓存变量，环境变量赋值。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># set up versioning.</span><br><span class="line">set(BUILD_MAJOR &quot;1&quot;)</span><br><span class="line">set(BUILD_MINOR &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION $&#123;BUILD_MAJOR&#125;.$&#123;BUILD_MINOR&#125;.$&#123;BUILD_VERSION&#125;)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_HEADERS</span><br><span class="line">src/GeodeticConverter.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_SOURCES</span><br><span class="line">src/GeodeticConverter.cpp</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="为工程设置预定义宏"><a href="#为工程设置预定义宏" class="headerlink" title="为工程设置预定义宏"></a>为工程设置预定义宏</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_definitions(-DFOO -DBAR ...)</span><br></pre></td></tr></table></figure><p>该指令添加编译参数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加WIN32宏定义</span><br><span class="line">add_definitions(-DWIN32)</span><br></pre></td></tr></table></figure><h2 id="OPTION变量"><a href="#OPTION变量" class="headerlink" title="OPTION变量"></a>OPTION变量</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">option(&lt;option_variable&gt; &quot;help string describing option&quot;</span><br><span class="line">            [initial value])</span><br></pre></td></tr></table></figure><p>该指令提供一个用户可以任选的选项，可在之后由用户通过CMake的GUI或者命令行进行更改。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTION(UTILTOOL_EXAMPLES &quot;Build the examples&quot; ON)</span><br></pre></td></tr></table></figure><h1 id="完整简单示例"><a href="#完整简单示例" class="headerlink" title="完整简单示例"></a>完整简单示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># CMakeList.txt: UtilTool 的 CMake 项目，在此处包括源代码并定义</span><br><span class="line"># 项目特定的逻辑。</span><br><span class="line">#</span><br><span class="line">cmake_minimum_required (VERSION 3.8)</span><br><span class="line"></span><br><span class="line">project(UtilTool)</span><br><span class="line"></span><br><span class="line"># set up versioning.</span><br><span class="line">set(BUILD_MAJOR &quot;1&quot;)</span><br><span class="line">set(BUILD_MINOR &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION $&#123;BUILD_MAJOR&#125;.$&#123;BUILD_MINOR&#125;.$&#123;BUILD_VERSION&#125;)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/include)</span><br><span class="line"></span><br><span class="line">link_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line">link_libraries(gsl)</span><br><span class="line"></span><br><span class="line"># OS and compiler checks. </span><br><span class="line">if(UNIX)</span><br><span class="line">    # linux / normal unix</span><br><span class="line">    add_definitions(-D_LINUX)</span><br><span class="line">    if(CYGWIN)</span><br><span class="line">        # Special Cygwin stuff here</span><br><span class="line">    elseif(APPLE)</span><br><span class="line">        # Special Apple stuff here</span><br><span class="line">        remove_definitions(-D_LINUX)</span><br><span class="line">        add_definitions(-D_DARWIN)</span><br><span class="line">    endif()</span><br><span class="line">elseif(WIN32)</span><br><span class="line">    add_definitions(-DWIN32)</span><br><span class="line">    add_definitions(-D UtilTool_EXPORTS)</span><br><span class="line">    if(MINGW)</span><br><span class="line">        # Special MINGW stuff here</span><br><span class="line">    elseif(MSVC)</span><br><span class="line">        # Special MSVC stuff here</span><br><span class="line">        add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)</span><br><span class="line">    else()</span><br><span class="line">        # No idea what it is, but there&apos;s a good chance it&apos;s too weird.</span><br><span class="line">        MESSAGE( FATAL_ERROR &quot;Using unknown WIN32 compiler... NOT. Please add to build system.&quot; )</span><br><span class="line">    endif()</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_HEADERS</span><br><span class="line">src/GeodeticConverter.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_SOURCES</span><br><span class="line">src/GeodeticConverter.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># mark headers as headers...</span><br><span class="line">SET_SOURCE_FILES_PROPERTIES( $&#123;UTILTOOL_HEADERS&#125; PROPERTIES HEADER_FILE_ONLY TRUE )</span><br><span class="line"># append to sources so that dependency checks work on headers</span><br><span class="line">LIST(APPEND UTILTOOL_SOURCES $&#123;UTILTOOL_HEADERS&#125;)</span><br><span class="line"></span><br><span class="line">OPTION(UTILTOOL_SHARED &quot;Build utiltool lib as shared.&quot; ON)</span><br><span class="line">OPTION(UTILTOOL_DEP_ONLY &quot;Build for use inside other CMake projects as dependency.&quot; OFF)</span><br><span class="line"></span><br><span class="line"># 将源代码添加到此项目的共享库中。</span><br><span class="line">if(UTILTOOL_SHARED)</span><br><span class="line">    ADD_LIBRARY(utiltool SHARED $&#123;UTILTOOL_SOURCES&#125;)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"># install into configured prefix</span><br><span class="line">if(NOT UTILTOOL_DEP_ONLY)</span><br><span class="line">    install(TARGETS utiltool </span><br><span class="line">        RUNTIME DESTINATION bin</span><br><span class="line">        ARCHIVE DESTINATION lib </span><br><span class="line">        LIBRARY DESTINATION lib)</span><br><span class="line">    install(FILES $&#123;UTILTOOL_HEADERS&#125; DESTINATION include)</span><br><span class="line">else()</span><br><span class="line"></span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"># TODO: 如有需要，请添加测试并安装目标。</span><br><span class="line">OPTION(UTILTOOL_EXAMPLES &quot;Build the examples&quot; ON)</span><br><span class="line"></span><br><span class="line">if(UTILTOOL_EXAMPLES)</span><br><span class="line">    ADD_EXECUTABLE(utiltool-example examples/ConverterTest.cpp)</span><br><span class="line">    TARGET_LINK_LIBRARIES(utiltool-example utiltool)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2019/03/20/Linux%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95JSBSim/">Linux平台编译安装测试JSBSim</a>,by jackhuang.</li><li><a href="https://zhuanlan.zhihu.com/p/59450618" target="_blank" rel="noopener">干货：构建C/C++良好的工程结构</a>,by Froser.</li><li><a href="https://blog.csdn.net/yzx_zjut/article/details/80831900" target="_blank" rel="noopener">基于CMake构建系统的C++工程框架</a>,by  zhongxiao_yao.</li><li><a href="https://www.cnblogs.com/coderfenghc/archive/2012/08/12/2627561.html" target="_blank" rel="noopener">CMake 手册详解（十九）install指令</a>,by SirDigit.</li><li><a href="https://murphypei.github.io/blog/2018/10/cmake-variable" target="_blank" rel="noopener">CMake中变量总结</a>,by 拾荒志.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近几年美国对中国的科技封杀十分严重，说不定哪天Windows操作系统就不让我们用了。因此，在构建C/C++项目时应考虑跨平台，哪天不让用Windows了，可以请容易的将项目移植到Linux上。不同系统平台有不同的C/C++编译器，不同编译器有不同的构建规则，针对每个平台的不
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++常用库简介</title>
    <link href="https://huangwang.github.io/2019/11/15/CPlusCPlus%E5%B8%B8%E7%94%A8%E5%BA%93%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/11/15/CPlusCPlus常用库简介/</id>
    <published>2019-11-15T13:48:55.000Z</published>
    <updated>2019-11-17T03:37:31.765Z</updated>
    
    <content type="html"><![CDATA[<p>为熟练使用C++创建项目，应掌握常用的C++库。现总结常用的C++库如下：</p><h1 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h1><h2 id="gsl（GNU-Scientific-Library）-GUN科学运算库"><a href="#gsl（GNU-Scientific-Library）-GUN科学运算库" class="headerlink" title="gsl（GNU Scientific Library）:GUN科学运算库"></a>gsl（GNU Scientific Library）:GUN科学运算库</h2><h2 id="Blitz-高效率的数值计算函数库"><a href="#Blitz-高效率的数值计算函数库" class="headerlink" title="Blitz++:高效率的数值计算函数库"></a>Blitz++:高效率的数值计算函数库</h2><p>它的设计目的是希望建立一套既具像C++ 一样方便，同时又比Fortran速度更快的数值计算环境。通常，用C++所写出的数值程序， 比 Fortran慢20%左右，因此Blitz++正是要改掉这个缺点。方法是利用C++的template 技术，程序执行甚至可以比Fortran更快。</p><h2 id="MTL-Matrix-Template-Library-矩阵模板库"><a href="#MTL-Matrix-Template-Library-矩阵模板库" class="headerlink" title="MTL(Matrix Template Library):矩阵模板库"></a>MTL(Matrix Template Library):矩阵模板库</h2><p>专注于线性代数相关的计算任务，如各种形式矩阵的生成(对角，共轭，稀疏，对称等)，相关的计算，变换，以及与一维向量的运算。</p><h2 id="POOMA"><a href="#POOMA" class="headerlink" title="POOMA"></a>POOMA</h2><p>一个免费的高性能的C++库，用于处理并行式科学计算。POOMA的面向对象设计方便了快速的程 序开发，对并行机器进行了优化以达到最高的效率，方便在工业和研究环境中使用。</p><h2 id="CGAL：计算几何算法库"><a href="#CGAL：计算几何算法库" class="headerlink" title="CGAL：计算几何算法库"></a>CGAL：计算几何算法库</h2><p>Computational Geometry Algorithms Library的目的是把在计 算几何方面的大部分重要的解决方案和方法以C++库的形式提供给工业和学术界的用户。<br>是一个大型C + +库的几何数据结构和算法，如Delaunay三角网，网格生成，布尔运算的多边形，以及各种几何处理算法。 CGAL是用来在各个领域：计算机图形学，科学可视化，计算机辅助设计与建模，地理信息系统，分子生物学，医学影像学，机器人学和运动规划，和数值方法。</p><h2 id="Matlab的开源高仿-Octave"><a href="#Matlab的开源高仿-Octave" class="headerlink" title="Matlab的开源高仿 Octave"></a>Matlab的开源高仿 Octave</h2><p>旨在解决线性和非线性的数值计算问题。也是跨平台的，源码中用了大量m4语言。</p><h2 id="C-符号计算库-GiNaC"><a href="#C-符号计算库-GiNaC" class="headerlink" title="C++符号计算库 GiNaC"></a>C++符号计算库 GiNaC</h2><h2 id="Eigen-目前较活跃"><a href="#Eigen-目前较活跃" class="headerlink" title="Eigen -目前较活跃"></a>Eigen -目前较活跃</h2><p>线性代数、矩阵、向量操作等运算的C++库。推荐使用。</p><h2 id="C-C-数值计算库-mygsl"><a href="#C-C-数值计算库-mygsl" class="headerlink" title="C/C++数值计算库 mygsl"></a>C/C++数值计算库 mygsl</h2><p>mygsl是一个基于GSL库的个性化开源数值计算项目.</p><h2 id="IMSL"><a href="#IMSL" class="headerlink" title="IMSL"></a>IMSL</h2><p>软件名称 IMSL C Numerical Library(不兼容vc6 编译器)。</p><p>分为统计库和数学库两部分。数学库包含应用数学和特殊函数。IMSL 程序库已成为数值分析解决方案的工业标准。 IMSL 程序库提供最完整与最值得信赖的函数库。 IMSL 数值程序库提供目前世界上最广泛被使用的 IMSL 算法，有超过 370 验证过、最正确与 thread-safe 的数学与统计程序。 IMSL FORTRAN 程序库提供新一代以 FORTRAN 90 为程序库基础的程序，能展现出最佳化的演算法能力应用于多处理器与其它高效能运算系统。</p><h1 id="网络库"><a href="#网络库" class="headerlink" title="网络库"></a>网络库</h1><h2 id="ACE"><a href="#ACE" class="headerlink" title="ACE"></a>ACE</h2><p>庞大、复杂，适合大型项目。开源、免费，不依赖第三方库，支持跨平台。</p><h2 id="Asio"><a href="#Asio" class="headerlink" title="Asio"></a>Asio</h2><p>Asio基于Boost开发的异步IO库，封装了Socket，简化基于socket程序的开发。</p><p>开源、免费，支持跨平台。</p><h2 id="POCO"><a href="#POCO" class="headerlink" title="POCO"></a>POCO</h2><p>POCO C++ Libraries 提供一套 C++ 的类库用以开发基于网络的可移植的应用程序，功能涉及线程、线程同步、文件系统访问、流操作、共享库和类加载、套接字以及网络协议包括：HTTP、 FTP、SMTP 等；其本身还包含一个 HTTP 服务器，提供 XML 的解析和 SQL 数据库的访问接口。POCO库的模块化、高效的设计及实现使得POCO特别适合嵌入式开发。在嵌入式开发领域，由于C++既适合底层（设备I/O、中断处理等）和高层面向对象开发，越来越流行。</p><h2 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h2><p>Libevent是一个轻量级的开源高性能网络库，从它的官网标题：libevent-an event notification library就能知道它的机制是采用事件触发，封装了以下三种事件的响应:IO事件,定时器事件,信号事件。select模型来实现跨平台的操作，Windows环境下支持IOCP。Google的开源WEB浏览器Chromium在Mac和Linux版本中，也使用了Libevent，足见该库的质量。</p><h2 id="libev"><a href="#libev" class="headerlink" title="libev"></a>libev</h2><p>libev和libevent很像，按照作者的介绍，可以作为libevent的替代者，能够提供更高的性能。</p><p>libev是一个高性能事件循环，所实现的功能就是一个强大的reactor。</p><h2 id="c-sockets-library"><a href="#c-sockets-library" class="headerlink" title="c++ sockets library"></a>c++ sockets library</h2><p>封装了sockets C API的C++类库。</p><p>支持SSL, IPv6, tcp 和 udp sockets, sctp sockets, http协议, 高度可定制的错误处理。</p><h2 id="libcurl"><a href="#libcurl" class="headerlink" title="libcurl"></a>libcurl</h2><p>libcurl是免费的轻量级的客户端网络库，支持DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet, TFTP. 支持SSL, HTTP POST, HTTP PUT, FTP上传, HTTP form上传，代理，cookies, 用户名与密码认证。</p><p>如果你开发的是客户端，libcurl是一个不错的选择。</p><h2 id="clsocket"><a href="#clsocket" class="headerlink" title="clsocket"></a>clsocket</h2><p>clsocket是一组轻量级的类，允许开发人员实现基于IP的网络程序。这个编译简单而且用起来也简单，推荐使用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jianshu.com/p/2ba19ad64211" target="_blank" rel="noopener">C++数学库</a>,by xigua1234.</li><li><a href="https://blog.csdn.net/SSYITwin/article/details/83016844" target="_blank" rel="noopener">c++中关于M_PI，M_E的解释和使用，以及参考值</a>,by SYITwin.</li><li><a href="https://github.com/ampl/gsl" target="_blank" rel="noopener">GSL with CMake build support</a>,by ampl.</li><li><a href="https://th0masxu.gq/index.php/archives/224" target="_blank" rel="noopener">在Visual Studio中使用GNU Scientific Library (GSL)</a>,by NULL_BOT.</li><li><a href="https://blog.csdn.net/weiwangchao_/article/details/8730199" target="_blank" rel="noopener">开源免费的C/C++网络库(c/c++ sockets library) 七剑下天山</a>,by 工程师WWW.</li><li><a href="https://www.jianshu.com/p/ee5b34870eba" target="_blank" rel="noopener">值得推荐的C/C++框架和库 (真的很强大)</a>,by tibet889.</li><li><a href="https://zhuanlan.zhihu.com/p/71707672" target="_blank" rel="noopener">有哪些值得推荐的c/c++开源框架与库</a>,by 零声学院.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为熟练使用C++创建项目，应掌握常用的C++库。现总结常用的C++库如下：&lt;/p&gt;
&lt;h1 id=&quot;数学库&quot;&gt;&lt;a href=&quot;#数学库&quot; class=&quot;headerlink&quot; title=&quot;数学库&quot;&gt;&lt;/a&gt;数学库&lt;/h1&gt;&lt;h2 id=&quot;gsl（GNU-Scientif
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Web应用压力测试方法</title>
    <link href="https://huangwang.github.io/2019/11/12/Web%E5%BA%94%E7%94%A8%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/11/12/Web应用压力测试方法/</id>
    <published>2019-11-12T10:26:50.000Z</published>
    <updated>2019-11-25T13:59:14.816Z</updated>
    
    <content type="html"><![CDATA[<p>Web应用在部署前，最好进行压力测试，以衡量其是否达到设计指标，判断其在何种极限条件下应用功能会失效。下面即介绍软件测试中压力测试，尤其是Web应用压力测试的相关知识。</p><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p>压力测试（英语：Stress testing）是针对特定系统或是组件，为要确认其稳定性而特意进行的严格测试。会让系统在超过正常使用条件下运作，然后再确认其结果。进行压力测试的原因可能包括：</p><ul><li>确认系统在什么条件下会损坏，以及安全使用条件。</li><li>确认预测系统在什么条件下会损坏或其安全使用条件的数学模型是否准确。</li><li>确认是否符合预期的规格。</li><li>确认失效原因。</li><li>确认系统在正常工作条件以外，是否可以正常运作。</li></ul><p>软件测试中的压力测试是在超过正常运作条件以外的条件下运作系统，以确认健壮性的方式。压力测试对于关键任务软件格外的重要，但可以适用于各种的软件。压力测试一般较强调软件在高负载下的健壮性、可用性及异常处理，以及哪些在一般使用环境下算是正常行为。</p><p>例如一个网站设计容量是100个人同时点击，压力测试就要是采用120个同时点击的条件测试。</p><h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>web应用的性能指标主要有响应时间，吞吐量，并发量，性能计数器。</p><h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><p>响应时间指应用执行一个操作需要的时间，即从发出请求到最后收到响应数据所需要的时间。例如：打开一个网站的响应时间、数据库查询一条记录（有索引）的响应时间等等。</p><p>实践中通常采用的办法是重复请求，比如一个请求操作重复执行1万次，测试一万次执行的总响应时间之和，然后除以1万，就得到单次请求的响应时间。</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>吞吐量指单位时间内系统处理的请求数量，体现系统的整体处理能力。对于网站，可用“请求数/秒”、“页面数/秒”或“访问人数/天”、“处理业务数/小时”等来衡量。重要指标有TPS(每秒处理的事物数)、QPS(每秒查询的请求数)、HPS（每秒HTTP请求数）等。</p><h2 id="并发量"><a href="#并发量" class="headerlink" title="并发量"></a>并发量</h2><p>并发量指系统能够同时处理的请求的数目，这个数字反映了系统的负载性能。对于网站而言，并发数指网站用户同时提交请求的用户数目。</p><h2 id="性能计数器"><a href="#性能计数器" class="headerlink" title="性能计数器"></a>性能计数器</h2><p>性能计数器描述服务器或操作系统性能的一些数据指标。如System Load、对象与线程数、内存使用、CPU使用、磁盘与网络I/O等使用情况。通过对这些指标设置报警阈值，当监控系统发现性能计数器超过阈值时，就向开发人员和运维报警，及时发现异常并处理。</p><h1 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h1><p>压力测试工具有http_load、apache ab、siege。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">压力测试</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6_(%E8%BB%9F%E9%AB%94" target="_blank" rel="noopener">压力测试 (软件)</a>),by wikipedia.</li><li><a href="https://www.cnblogs.com/sunshineliulu/p/7509810.html" target="_blank" rel="noopener">网站性能测试指标及网站压力测试</a>,by 呦呦鹿鸣.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Web应用在部署前，最好进行压力测试，以衡量其是否达到设计指标，判断其在何种极限条件下应用功能会失效。下面即介绍软件测试中压力测试，尤其是Web应用压力测试的相关知识。&lt;/p&gt;
&lt;h1 id=&quot;压力测试&quot;&gt;&lt;a href=&quot;#压力测试&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Axios请求超时处理方法</title>
    <link href="https://huangwang.github.io/2019/11/11/Axios%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/11/11/Axios请求超时处理方法/</id>
    <published>2019-11-11T12:30:30.000Z</published>
    <updated>2019-11-11T12:52:36.785Z</updated>
    
    <content type="html"><![CDATA[<p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。Vue2官方推荐使用Axios执行HTTP请求和处理HTTP响应。Axios具有如下特征：</p><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><p>下面介绍使用Axios的拦截功能实现Axios超时错误的统一处理。</p><h1 id="Axios基本用法"><a href="#Axios基本用法" class="headerlink" title="Axios基本用法"></a>Axios基本用法</h1><p>执行 GET 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 为给定 ID 的 user 创建请求</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// 可选地，上面的请求可以这样做</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行 POST 请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;,</span><br><span class="line">    lastName: &apos;Flintstone&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345/permissions&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // 两个请求现在都执行完成</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h1 id="Axios拦截器"><a href="#Axios拦截器" class="headerlink" title="Axios拦截器"></a>Axios拦截器</h1><p>自定义 axios 实例添加拦截器，在请求或响应被 then 或 catch 处理前拦截它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// create an axios instance</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url</span><br><span class="line">  // withCredentials: true, // send cookies when cross-domain requests</span><br><span class="line">  timeout: 5000 // request timeout</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 添加请求拦截器</span><br><span class="line">service.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// 添加响应拦截器</span><br><span class="line">service.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="拦截timeout错误"><a href="#拦截timeout错误" class="headerlink" title="拦截timeout错误"></a>拦截timeout错误</h1><p>在Axios响应拦截器中，处理timeout错误，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    if(error.message.includes(&apos;timeout&apos;))&#123;   // 判断请求异常信息中是否含有超时timeout字符串</span><br><span class="line">      console.log(&quot;错误回调&quot;, error);</span><br><span class="line">      alert(&quot;网络超时&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">Axios使用说明</a>,by yunye.</li><li><a href="https://www.cnblogs.com/hcxy/p/10052465.html" target="_blank" rel="noopener">axios超时timeout拦截</a>,by 亲爱的混蛋.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。Vue2官方推荐使用Axios执行HTTP请求和处理HTTP响应。Axios具有如下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从浏览器中创建 XMLHttpRequests&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>C++标准模板库STL入门</title>
    <link href="https://huangwang.github.io/2019/11/10/CPlusPlus%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/11/10/CPlusPlus标准模板库STL入门/</id>
    <published>2019-11-10T04:26:15.000Z</published>
    <updated>2019-11-10T09:53:15.433Z</updated>
    
    <content type="html"><![CDATA[<p>最近C++编程中需要管理多个由同一个类实例化的对象，于是想到了C++的标准模板库STL，在此将STL的相关知识记录一下。</p><h1 id="STL的来龙去脉"><a href="#STL的来龙去脉" class="headerlink" title="STL的来龙去脉"></a>STL的来龙去脉</h1><p>STL 历史可以追溯到 1972 年 C 语言在 UNIX 计算机上的首次使用。直到 1994 年，STL 才被正式纳入 C++ 标准中。</p><p>标准模板库（STL）是 C ++编程语言的软件库，影响了C ++标准库的许多部分。它提供了四个组件，分别称为<strong>算法，容器，仿函数和迭代器</strong>。</p><p>STL为 C ++提供了一组通用类，例如容器和关联数组，可以与任何内置类型和支持某些基本操作（例如复制和赋值）的任何用户定义类型一起使用。 STL算法独立于容器，从而大大降低了库的复杂性。</p><p>STL通过使用模板来实现其结果。这种方法提供的编译时多态性通常比传统的运行时多态性更有效。对现代 C ++编译器进行了调整，以最大程度地减少由于大量使用STL而引起的抽象损失。</p><p>STL是创建的第一个C ++通用算法和数据结构库，它牢记四个想法：通用编程，不损失效率的抽象性，冯·诺依曼计算模型和值语义。</p><h1 id="STL-组件"><a href="#STL-组件" class="headerlink" title="STL 组件"></a>STL 组件</h1><p>STL 将“在数据上执行的操作”与“要执行操作的数据分开”，分别以如下概念指代：</p><ul><li>容器：包含、放置数据的地方。</li><li>迭代器：在容器中指出一个位置、或成对使用以划定一个区域，用来限定操作所涉及到的数据范围。</li><li>算法：要执行的操作。</li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器即用来存储并管理某类对象的集合。例如鱼缸是用来盛放金鱼的容器。标准模板库中容器主要分为序列容器（sequence containers）与关系容器（associative containers）。</p><p>序列容器包括：</p><ul><li>vector</li><li>list</li><li>forward_list</li><li>deque</li><li>array</li></ul><p>关联容器包括：</p><ul><li>set</li><li>multiset</li><li>map</li><li>multimap</li><li>unordered_set</li><li>unordered_multiset</li><li>unordered_map</li><li>unordered_multimap</li></ul><p>其他类型的容器包括：</p><ul><li>bitset</li><li>valarray</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器用于在一个对象群集的元素上进行遍历动作。对象群集可能是容器，也可能是容器的一部分。</p><p>迭代器的主要用途是为容器提供一组很小的公共接口。利用这个接口，某项操作可以行进至群集内的下一个元素。</p><p>每种容器都提供了各自的迭代器。迭代器了解该容器的内部结构，所以能够正确行进。迭代器的接口和一般指针类似。</p><p>迭代器的作用就是提供一个遍历容器内部所有元素的接口，因此迭代器的内部必须保存一个与容器相关联的指针，然后重载各种运算操作来方便遍历，其中最重要的就是∗运算符和-&gt;运算符，以及++，–等可能需要的运算符重载。</p><p>根据迭代器的操作方式的不同，迭代器分为五种：</p><ul><li>输入迭代器</li><li>输出迭代器</li><li>前向迭代器</li><li>双向迭代器</li><li>随机访问迭代器</li></ul><p>迭代器的示例代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; v;        // 定义一个vector容器</span><br><span class="line"></span><br><span class="line">    v.push_back(1);        // 向容器中添加3个元素</span><br><span class="line">    v.push_back(2);</span><br><span class="line">    v.push_back(3);</span><br><span class="line"></span><br><span class="line">    // 遍历向量的元素</span><br><span class="line">    vector&lt;int&gt;::iterator b = v.begin();        // 指向容器的第一个元素</span><br><span class="line">    vector&lt;int&gt;::iterator e = v.end();            // 指向容器尾元素的下一个位置</span><br><span class="line"></span><br><span class="line">    // C++11新标准的写法, auto关键字为类型推断，由编译器自动完成</span><br><span class="line">    // auto b = v.begin();</span><br><span class="line">    // auto e = v.end();</span><br><span class="line"></span><br><span class="line">    for (vector&lt;int&gt;::iterator iter = b; iter != e; ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *iter &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法用来处理群集内的元素，可以出于不同目的搜寻、排序、修改、使用那些元素。所有容器的迭代器都提供一致的接口，通过迭代器的协助，算法程序可以用于任意容器。</p><p>STL 的一个特性是将数据和操作分离。数据由容器类别加以管理，操作则由可定制的算法定义。迭代器在两者之间充当“粘合剂”，以使算法可以和容器交互运作。</p><p>STL 的另一个特性即组件可以针对任意型别运作。“标准模板库”这一名称即表示“可接受任意型别”的模板，并且这些型别均可执行必要操作。</p><h2 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h2><p>STL中大量运用了仿函数。仿函数具有泛型编程强大的威力，是纯粹抽象概念的例证。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://c.biancheng.net/stl/" target="_blank" rel="noopener">STL教程：C++ STL快速入门</a>,by C语言中文网.</li><li><a href="http://c.biancheng.net/view/1436.html" target="_blank" rel="noopener">STL是什么（STL简介）</a>,by C语言中文网.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93" target="_blank" rel="noopener">标准模板库</a>,by wikipedia.</li><li><a href="https://www.jianshu.com/p/77d0dd2fa3ee" target="_blank" rel="noopener">C++ STL初识及整理</a>,by thinkChao.</li><li><a href="https://blog.csdn.net/wutao1530663/article/details/64922389" target="_blank" rel="noopener">C++标准模板库(STL)迭代器的原理与实现</a>,by wutao02.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近C++编程中需要管理多个由同一个类实例化的对象，于是想到了C++的标准模板库STL，在此将STL的相关知识记录一下。&lt;/p&gt;
&lt;h1 id=&quot;STL的来龙去脉&quot;&gt;&lt;a href=&quot;#STL的来龙去脉&quot; class=&quot;headerlink&quot; title=&quot;STL的来龙去脉
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>异常处理的一些理解</title>
    <link href="https://huangwang.github.io/2019/11/02/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>https://huangwang.github.io/2019/11/02/异常处理的一些理解/</id>
    <published>2019-11-02T03:42:10.000Z</published>
    <updated>2019-11-02T04:07:48.497Z</updated>
    
    <content type="html"><![CDATA[<p>在编程过程，经常遇到的一个问题是如何优雅地处理异常。下面给出一些对这个问题的答案。</p><h1 id="异常处理定义"><a href="#异常处理定义" class="headerlink" title="异常处理定义"></a>异常处理定义</h1><p>异常处理，是编程语言或计算机硬件里的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行流程的某些特殊条件）。</p><h2 id="异常处理与错误检测的区别"><a href="#异常处理与错误检测的区别" class="headerlink" title="异常处理与错误检测的区别"></a>异常处理与错误检测的区别</h2><p>错误检测与异常处理区别在于：<strong>错误检测是在正常的程序流中，处理不可预见问题的代码，例如一个调用操作未能成功结束。</strong></p><p>某些编程语言有这样的函数：当输入存在非法数据时不能被安全地调用，或者返回值不能与异常进行有效的区别。例如，C语言中的atoi函数（ASCII串到整数的转换）在输入非法时可以返回0。在这种情况下编程者需要另外进行错误检测（可能通过某些辅助全局变量如C的errno），或进行输入检验（如通过正则表达式），或者共同使用这两种方法。</p><p>通过异常处理，我们可以对用户在程序中的非法输入进行控制和提示，以防程序崩溃。从进程的视角，硬件中断相当于可恢复异常，虽然中断一般与程序流本身无关。从子程序编程者的视角，异常是很有用的一种机制，用于通知外界该子程序不能正常执行。如输入的数据无效（例如除数是0），或所需资源不可用（例如文件丢失）。如果系统没有异常机制，则编程者需要用返回值来标示发生了哪些错误。</p><h1 id="异常处理的原则"><a href="#异常处理的原则" class="headerlink" title="异常处理的原则"></a>异常处理的原则</h1><p>为了更好的处理异常，应遵循以下三个原则：</p><ul><li>具体明确</li><li>提早抛出</li><li>延迟捕获</li></ul><h2 id="具体明确"><a href="#具体明确" class="headerlink" title="具体明确"></a>具体明确</h2><p>捕获异常时具体明确有利于对异常进行恰当的处理。例如在Java中对同一try块定义多个catch块，以便对每种异常分别进行恰当的处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">File prefsFile = new File(prefsFilename);</span><br><span class="line"> </span><br><span class="line">try&#123;</span><br><span class="line">    readPreferences(prefsFile);</span><br><span class="line">&#125;</span><br><span class="line">catch (FileNotFoundException e)&#123;</span><br><span class="line">    // alert the user that the specified file</span><br><span class="line">    // does not exist</span><br><span class="line">&#125;</span><br><span class="line">catch (EOFException e)&#123;</span><br><span class="line">    // alert the user that the end of the file</span><br><span class="line">    // was reached</span><br><span class="line">&#125;</span><br><span class="line">catch (ObjectStreamException e)&#123;</span><br><span class="line">     // alert the user that the file is corrupted</span><br><span class="line">&#125;</span><br><span class="line">catch (IOException e)&#123;</span><br><span class="line">    // alert the user that some other I/O</span><br><span class="line">    // error occurred</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提早抛出"><a href="#提早抛出" class="headerlink" title="提早抛出"></a>提早抛出</h2><p>异常堆栈信息提供了导致异常出现的方法调用链的精确顺序，包括每个方法调用的类名，方法名，代码文件名甚至行数，以此来精确定位异常出现的现场。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException</span><br><span class="line">at java.io.FileInputStream.open(Native Method)</span><br><span class="line">at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:103)</span><br><span class="line">at jcheckbook.JCheckbook.readPreferences(JCheckbook.java:225)</span><br><span class="line">at jcheckbook.JCheckbook.startup(JCheckbook.java:116)</span><br><span class="line">at jcheckbook.JCheckbook.&lt;init&gt;(JCheckbook.java:27)</span><br><span class="line">at jcheckbook.JCheckbook.main(JCheckbook.java:318)</span><br></pre></td></tr></table></figure><p>通过逐步回退跟踪堆栈信息并检查代码，可以确定错误原因。</p><h2 id="延迟捕获"><a href="#延迟捕获" class="headerlink" title="延迟捕获"></a>延迟捕获</h2><p>捕获异常后怎么处理？最不该做的就是什么都不做。空的catch块等于把整个异常丢进黑洞，能够说明何时何处为何出错的所有信息都会永远丢失。把异常写到日志中还稍微好点，至少还有记录可查。但我们总不能指望用户去阅读或者理解日志文件和异常信息。</p><p>因此，不要过早捕获异常，而是在合适的层面捕获异常，以便你的程序要么可以从异常中有意义地恢复并继续下去，而不导致更深入的错误；要么能够为用户提供明确的信息，包括引导他们从错误中恢复过来。如果你的方法无法胜任，那么就不要处理异常，把它留到后面捕获和在恰当的层面处理。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" target="_blank" rel="noopener">异常处理</a>,by wikipedia.</li><li><a href="https://www.zhihu.com/question/28254987" target="_blank" rel="noopener">如何优雅的处理异常（java）？</a>,by zhihu.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编程过程，经常遇到的一个问题是如何优雅地处理异常。下面给出一些对这个问题的答案。&lt;/p&gt;
&lt;h1 id=&quot;异常处理定义&quot;&gt;&lt;a href=&quot;#异常处理定义&quot; class=&quot;headerlink&quot; title=&quot;异常处理定义&quot;&gt;&lt;/a&gt;异常处理定义&lt;/h1&gt;&lt;p&gt;异常处理，
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux防SYN_Flood攻击的方法</title>
    <link href="https://huangwang.github.io/2019/10/30/Linux%E9%98%B2SYN-Flood%E6%94%BB%E5%87%BB%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/10/30/Linux防SYN-Flood攻击的方法/</id>
    <published>2019-10-30T14:41:31.000Z</published>
    <updated>2019-10-31T13:00:31.749Z</updated>
    
    <content type="html"><![CDATA[<p>最近管理的Linux服务器遭遇了SYN Flood攻击，因此研究一下防范该攻击的方法。</p><h1 id="SYN-Flood攻击的表现"><a href="#SYN-Flood攻击的表现" class="headerlink" title="SYN Flood攻击的表现"></a>SYN Flood攻击的表现</h1><p>使用ssh登录Linux服务器，在终端中输入netstat -antp能查看到有大量的链接时SYN_RECV状态，说明Linux服务器遭遇了SYN Flood攻击。</p><h2 id="netstat常用参数"><a href="#netstat常用参数" class="headerlink" title="netstat常用参数"></a>netstat常用参数</h2><p>netstat常用参数如下：</p><ul><li>-a (all)显示所有选项，默认不显示LISTEN相关</li><li>-t (tcp)仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-n 拒绝显示别名，能显示数字的全部转化成数字。</li><li>-l 仅列出有在 Listen (监听) 的服務状态</li><li>-p 显示建立相关链接的程序名</li><li>-r 显示路由信息，路由表</li><li>-e 显示扩展信息，例如uid等</li><li>-s 按各个协议进行统计</li><li>-c 每隔一个固定时间，执行该netstat命令。</li></ul><h2 id="TCP连接状态"><a href="#TCP连接状态" class="headerlink" title="TCP连接状态"></a>TCP连接状态</h2><ul><li>ESTABLISHED </li></ul><p>指TCP连接已建立，双方可以进行方向数据传递</p><ul><li>CLOSE_WAIT</li></ul><p>这种状态的含义其实是表示在等待关闭。当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。</p><ul><li>LISTENING</li></ul><p>指TCP正在监听端口，可以接受链接</p><ul><li>TIME_WAIT</li></ul><p>指连接已准备关闭。表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。</p><ul><li>FIN_WAIT_1</li></ul><p>FIN_WAIT_1和 FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报 文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN 报文，此时该SOCKET即进入到FIN_WAIT_1 状态。而当对方回应ACK 报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况 下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2 状态还有时常常可以用 netstat看到。</p><ul><li>FIN_WAIT_2</li></ul><p>FIN_WAIT_2 状态下的SOCKET，表示半连接，也即有一方要求close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。</p><ul><li>LAST_ACK</li></ul><p>是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了</p><ul><li>SYNC_RECEIVED</li></ul><p>表示接受到了SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat你是很难看到这种状态的，除非你特意写了一个客户端测试程序，故意将三次TCP握手过程中最后一个ACK报文不予发送。</p><ul><li>SYNC_SEND</li></ul><p>已经主动发出连接建立请求。与SYN_RCVD遥想呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，因此也随即它会进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。</p><h1 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h1><p>首先确保ssh登录密码没有泄露，再修改系统相关配置。</p><h2 id="剔出其他登录用户"><a href="#剔出其他登录用户" class="headerlink" title="剔出其他登录用户"></a>剔出其他登录用户</h2><p>当ssh登录密码泄露，会有其他用户登录，所以需要剔出其他登录用户，再修改密码和系统相关配置。剔出其他登录用户的方法如下：</p><ul><li>查看系统在线用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]# w </span><br><span class="line">14:15:41 up 42 days, 56 min,  2 users,  load average: 0.07, 0.02, 0.00 </span><br><span class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT </span><br><span class="line">root     pts/0    116.204.64.165   14:15    0.00s  0.06s  0.04s w </span><br><span class="line">root     pts/1    116.204.64.165   14:15    2.00s  0.02s  0.02s –bash</span><br></pre></td></tr></table></figure><ul><li>查看当前自己占用终端，防止把自己干掉了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]# who am i </span><br><span class="line">root     pts/0        2013-01-16 14:15 (116.204.64.165)</span><br></pre></td></tr></table></figure><ul><li>用pkill 命令剔除对方</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 信号代码 -9 ，表示强制终止</span><br><span class="line">[root@apache ~]# pkill -9 -t pts/1</span><br></pre></td></tr></table></figure><ul><li>用w命令在看看干掉没。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@apache ~]# w </span><br><span class="line">14:19:47 up 42 days,  1:00,  1 user,  load average: 0.00, 0.00, 0.00 </span><br><span class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT </span><br><span class="line">root     pts/0    116.204.64.165   14:15    0.00s  0.03s  0.00s w</span><br></pre></td></tr></table></figure><h2 id="抵御SYN攻击的方法"><a href="#抵御SYN攻击的方法" class="headerlink" title="抵御SYN攻击的方法"></a>抵御SYN攻击的方法</h2><p>SYN攻击是利用TCP/IP协议3次握手的原理，发送大量的建立连接的网络包，但不实际建立连接，最终导致被攻击服务器的网络队列被占满，无法被正常用户访问。</p><h3 id="修改SYN相关系统配置"><a href="#修改SYN相关系统配置" class="headerlink" title="修改SYN相关系统配置"></a>修改SYN相关系统配置</h3><p>Linux内核提供了若干SYN相关的配置，用命令： sysctl -a | grep syn 看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_max_syn_backlog = 1024 </span><br><span class="line">net.ipv4.tcp_syncookies = 0</span><br><span class="line">net.ipv4.tcp_synack_retries = 5 </span><br><span class="line">net.ipv4.tcp_syn_retries = 5</span><br></pre></td></tr></table></figure><p>tcp_max_syn_backlog是SYN队列的长度，tcp_syncookies是一个开关，是否打开SYN Cookie 功能，该功能可以防止部分SYN攻击tcp_synack_retries和tcp_syn_retries定义SYN 的重试次数。　　</p><p>加大SYN队列长度可以容纳更多等待连接的网络连接数，打开SYN Cookie功能可以阻止部分 SYN攻击，降低重试次数也有一定效果。</p><p>调整上述设置的方法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 增加SYN队列长度到2048：</span><br><span class="line">sysctl -w net.ipv4.tcp_max_syn_backlog=2048</span><br><span class="line"></span><br><span class="line"># 打开SYN COOKIE功能：</span><br><span class="line">sysctl -w net.ipv4.tcp_syncookies=1</span><br><span class="line"></span><br><span class="line"># 降低重试次数：</span><br><span class="line">sysctl -w net.ipv4.tcp_synack_retries=3 </span><br><span class="line">sysctl -w net.ipv4.tcp_syn_retries=3</span><br></pre></td></tr></table></figure><p>为了系统重启动时保持上述配置，可将上述命令加入到/etc/rc.d/rc.local文件中。</p><h3 id="iptables阻止syn-flood攻击"><a href="#iptables阻止syn-flood攻击" class="headerlink" title="iptables阻止syn flood攻击"></a>iptables阻止syn flood攻击</h3><p>防止同步包洪水（Sync Flood）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># –limit 1/s 限制syn并发数每秒1次，可以根据自己的需要修改</span><br><span class="line">iptables -A FORWARD -p tcp –syn -m limit –limit 1/s -j ACCEPT</span><br></pre></td></tr></table></figure><p>防止各种端口扫描:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p tcp –tcp-flags SYN,ACK,FIN,RST RST -m limit –limit 1/s -j ACCEPT</span><br></pre></td></tr></table></figure><p>Ping洪水攻击（Ping of Death）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p icmp –icmp-type echo-request -m limit –limit 1/s -j ACCEPT</span><br></pre></td></tr></table></figure><p>屏蔽 SYN_RECV 的连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -m tcp –tcp-flags SYN,RST,ACK SYN -m limit –limit 1/sec -j ACCEPT</span><br></pre></td></tr></table></figure><p>禁止某IP访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s xxx.xxx.xxx.xx -j DROP</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/derekchen/archive/2011/02/26/1965850.html" target="_blank" rel="noopener">LINUX 服务器遭到SYN FLOOD攻击</a>,by 晓风残梦.</li><li><a href="https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316661.HTML" target="_blank" rel="noopener">Linux netstat命令详解</a>,by ggjucheng.</li><li><a href="https://linux.cn/article-2434-1.html" target="_blank" rel="noopener">netstat 的10个基本用法</a>,by  LCTT bazz2.</li><li><a href="https://www.cnblogs.com/vigarbuaa/archive/2012/03/07/2383064.html" target="_blank" rel="noopener">netstat用法及TCP state解析</a>,by vigarbuaa.</li><li><a href="https://www.cnblogs.com/wjoyxt/p/7905354.html" target="_blank" rel="noopener">Linux踢出其他正在SSH登陆用户</a>,by 艾欧里亚.</li><li><a href="https://www.cnblogs.com/rsky/p/4886043.html" target="_blank" rel="noopener">[Linux] killall 、kill 、pkill 命令详解</a>,by 骑着蜗牛游世界.</li><li><a href="https://blog.csdn.net/simongeek/article/details/46429243" target="_blank" rel="noopener">Linux中kill，pkill，killall和xkill命令汇总讲解</a>,by simonGeek.</li><li><a href="http://www.sphinxsearch.org/archives/10" target="_blank" rel="noopener">Linux防止syn flood攻击，屏蔽 SYN_RECV 的连接</a>,by Sphinx 中文站.</li><li><a href="https://wangchujiang.com/linux-command/c/iptables.html" target="_blank" rel="noopener">iptables</a>,by wangchujiang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近管理的Linux服务器遭遇了SYN Flood攻击，因此研究一下防范该攻击的方法。&lt;/p&gt;
&lt;h1 id=&quot;SYN-Flood攻击的表现&quot;&gt;&lt;a href=&quot;#SYN-Flood攻击的表现&quot; class=&quot;headerlink&quot; title=&quot;SYN Flood攻击的表
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="linux" scheme="https://huangwang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>不同语言的计时方法</title>
    <link href="https://huangwang.github.io/2019/10/27/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%A1%E6%97%B6%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/10/27/不同语言的计时方法/</id>
    <published>2019-10-27T13:57:46.000Z</published>
    <updated>2019-10-27T14:02:21.822Z</updated>
    
    <content type="html"><![CDATA[<p>剖析代码性能时通常需要计时。下面记录不同语言的各种计时方法。</p><h1 id="C-计时方法"><a href="#C-计时方法" class="headerlink" title="C++计时方法"></a>C++计时方法</h1><p>传统计时方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;ctime&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">clock_t start = clock();</span><br><span class="line">// do something...</span><br><span class="line">clock_t end   = clock();</span><br><span class="line">cout &lt;&lt; &quot;花费了&quot; &lt;&lt; (double)(end - start) / CLOCKS_PER_SEC &lt;&lt; &quot;秒&quot; &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>C++11 标准的”最佳计时方法“的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;chrono&gt;   </span><br><span class="line">using namespace std;</span><br><span class="line">using namespace chrono;</span><br><span class="line"></span><br><span class="line">auto start = system_clock::now();</span><br><span class="line">// do something...</span><br><span class="line">auto end   = system_clock::now();</span><br><span class="line">auto duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line">cout &lt;&lt;  &quot;花费了&quot; </span><br><span class="line">     &lt;&lt; double(duration.count())</span><br><span class="line">     &lt;&lt; &quot;微秒&quot; &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1 id="Python计时方法"><a href="#Python计时方法" class="headerlink" title="Python计时方法"></a>Python计时方法</h1><p>在Jupyter Notebook中，计时使用一个magic command：%timeit。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/u013390476/article/details/50209603" target="_blank" rel="noopener">C++11 新的计时方法——std::chrono 大法好</a>,by sicolex.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;剖析代码性能时通常需要计时。下面记录不同语言的各种计时方法。&lt;/p&gt;
&lt;h1 id=&quot;C-计时方法&quot;&gt;&lt;a href=&quot;#C-计时方法&quot; class=&quot;headerlink&quot; title=&quot;C++计时方法&quot;&gt;&lt;/a&gt;C++计时方法&lt;/h1&gt;&lt;p&gt;传统计时方法的代码如下：&lt;/
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++高性能网络编程</title>
    <link href="https://huangwang.github.io/2019/10/26/CPlusPlus%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/10/26/CPlusPlus高性能网络编程/</id>
    <published>2019-10-26T03:31:54.000Z</published>
    <updated>2019-11-02T04:50:17.202Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要用C++编写一个网络程序，因此将网络编程的相关知识整理学习一下。</p><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>Socket 是对 TCP/IP 协议族的一种封装，是应用层与TCP/IP协议族通信的中间软件抽象层。从设计模式的角度看来，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><p>Socket 还可以认为是一种网络间不同计算机上的进程通信的一种方法，利用三元组（ip地址，协议，端口）就可以唯一标识网络中的进程，网络中的进程通信可以利用这个标志与其它进程进行交互。</p><p>Socket 起源于 Unix ，Unix/Linux 基本哲学之一就是“一切皆文件”，都可以用“打开(open) –&gt; 读写(write/read) –&gt; 关闭(close)”模式来进行操作。因此 Socket 也被处理为一种特殊的文件。</p><h2 id="Socket类型"><a href="#Socket类型" class="headerlink" title="Socket类型"></a>Socket类型</h2><p>创建 socket 的时候需要指定 socket 的类型，一般有三种：</p><ul><li>SOCK_STREAM：面向连接的稳定通信，底层是 TCP 协议，我们会一直使用这个。</li><li>SOCK_DGRAM：无连接的通信，底层是 UDP 协议，需要上层的协议来保证可靠性。</li><li>SOCK_RAW：更加灵活的数据控制，能让你指定 IP 头部</li></ul><h2 id="Socket编程接口"><a href="#Socket编程接口" class="headerlink" title="Socket编程接口"></a>Socket编程接口</h2><ul><li>socket()：创建socket</li><li>bind()：绑定socket到本地地址和端口，通常由服务端调用</li><li>listen()：TCP专用，开启监听模式</li><li>accept()：TCP专用，服务器等待客户端连接，一般是阻塞态</li><li>connect()：TCP专用，客户端主动连接服务器</li><li>send()：TCP专用，发送数据</li><li>recv()：TCP专用，接收数据</li><li>sendto()：UDP专用，发送数据到指定的IP地址和端口</li><li>recvfrom()：UDP专用，接收数据，返回数据远端的IP地址和端口</li><li>closesocket()：关闭socket</li></ul><h2 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a>Socket通信流程</h2><p></p><p align="center">    <img src="images/tcp.jpg" width="60%" alt="TCP通信流程"></p><p></p><center>图1 TCP通信流程</center><p></p><p align="center">    <img src="images/udp.png" width="60%" alt="UDP通信流程"></p><p></p><center>图2 UDP通信流程</center><h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>不同的计算机对数据的存储格式不一样，比如 32 位的整数 0x12345678，可以在内存里从高到低存储为 12-34-56-78 或者从低到高存储为 78-56-34-12。</p><p>但是这对于网络中的数据来说就带来了一个严重的问题，当机器从网络中收到 12-34-56-78 的数据时，它怎么知道这个数据到底是什么意思？</p><p>解决的方案也比较简单，在传输数据之前和接受数据之后，必须调用 htonl/htons 或 ntohl/ntohs 先把数据转换成网络字节序或者把网络字节序转换为机器的字节序。</p><ul><li>TCP 和 UDP 的端口是互不干扰的，也就是说系统可以同时开启 TCP 80 端口和 UDP 80 端口。</li><li>socket 不属于任何一层网络协议，它是对 TCP 层的封装，方便网络编程。</li></ul><h1 id="网络编程模型"><a href="#网络编程模型" class="headerlink" title="网络编程模型"></a>网络编程模型</h1><h2 id="同步阻塞迭代模型"><a href="#同步阻塞迭代模型" class="headerlink" title="同步阻塞迭代模型"></a>同步阻塞迭代模型</h2><p>同步阻塞迭代模型是最简单的一种IO模型，其核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)</span><br><span class="line">&#123;</span><br><span class="line">    clifd = accept(srvfd,...); //开始接受客户端来的连接</span><br><span class="line">    read(clifd,buf,...); //从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)//发送数据到客户端</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程序存在如下一些弊端：</p><ol><li>如果没有客户端的连接请求，进程会阻塞在accept系统调用处，程序不能执行其他任何操作。(系统调用使得程序从用户态陷入内核态）</li><li>在与客户端建立好一条链路后，通过read系统调用从客户端接受数据，而客户端合适发送数据过来是不可控的。如果客户端迟迟不发生数据过来，则程序同样会阻塞在read调用，此时，如果另外的客户端来尝试连接时，都会失败。</li><li>同样的道理，write系统调用也会使得程序出现阻塞(例如：客户端接受数据异常缓慢，导致写缓冲区满，数据迟迟发送不出)。</li></ol><h2 id="多进程并发模型"><a href="#多进程并发模型" class="headerlink" title="多进程并发模型"></a>多进程并发模型</h2><p>多进程并发模型在同步阻塞迭代模型的基础上进行了一些改进，以避免是程序阻塞在read系统调用上。核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)&#123;</span><br><span class="line">clifd = accept(srvfd,...); //开始接受客户端来的连接</span><br><span class="line">ret = fork();</span><br><span class="line">switch( ret )</span><br><span class="line">&#123;</span><br><span class="line">    case -1 :</span><br><span class="line">        do_err_handler();</span><br><span class="line">        break;</span><br><span class="line">    case 0: // 子进程</span><br><span class="line">        client_handler(clifd);</span><br><span class="line">        break ;</span><br><span class="line">    default : // 父进程</span><br><span class="line">        close(clifd);</span><br><span class="line">        continue ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void client_handler(clifd)</span><br><span class="line">&#123;</span><br><span class="line">    read(clifd,buf,...); //从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)//发送数据到客户端</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序在accept系统调用时，如果没有客户端来建立连接，会阻塞在accept处。一旦某个客户端连接建立起来，则立即开启一个新的进程来处理与这个客户的数据交互。避免程序阻塞在read调用，而影响其他客户端的连接。</p><h2 id="多线程并发模型"><a href="#多线程并发模型" class="headerlink" title="多线程并发模型"></a>多线程并发模型</h2><p>在多进程并发模型中，每一个客户端连接开启fork一个进程，若客户端连接较大，则系统依然将不堪负重。通过多线程(或线程池)并发模型，可以在一定程度上改善这一问题。</p><p>在服务端的线程模型实现方式一般有三种：</p><ul><li>按需生成(来一个连接生成一个线程)</li><li>线程池(预先生成很多线程)</li><li>Leader follower（LF）</li></ul><p>以第一种为例，其核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void *thread_callback( void *args ) //线程回调函数</span><br><span class="line">&#123;</span><br><span class="line">    int clifd = *(int *)args ;</span><br><span class="line">    client_handler(clifd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void client_handler(clifd)</span><br><span class="line">&#123;</span><br><span class="line">    read(clifd,buf,...); //从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)//发送数据到客户端</span><br><span class="line">&#125;</span><br><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)</span><br><span class="line">&#123;</span><br><span class="line">    clifd = accept();</span><br><span class="line">    pthread_create(...,thread_callback,&amp;clifd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端分为主线程和工作线程，主线程负责accept()连接，而工作线程负责处理业务逻辑和流的读取等。因此，即使在工作线程阻塞的情况下，也只是阻塞在线程范围内，对继续接受新的客户端连接不会有影响。</p><p>第二种实现方式，通过线程池的引入可以避免频繁的创建、销毁线程，能在很大程序上提升性能。</p><p>但多线程模型先天具有如下缺点：</p><ul><li>稳定性相对较差。一个线程的崩溃会导致整个程序崩溃。</li><li>临界资源的访问控制，在加大程序复杂性的同时，锁机制的引入会是严重降低程序的性能。性能上可能会出现“辛辛苦苦好几年，一夜回到解放前”的情况。</li></ul><h2 id="IO多路复用模型"><a href="#IO多路复用模型" class="headerlink" title="IO多路复用模型"></a>IO多路复用模型</h2><p>多进程模型和多线程(线程池)模型每个进程/线程只能处理一路IO，在服务器并发数较高的情况下，过多的进程/线程会使得服务器性能下降。而通过多路IO复用，能使得一个进程同时处理多路IO，提升服务器吞吐量。这是一种进程预先告知内核的能力，让内核发现进程指定的一个或多个IO条件就绪了，就通知进程。使得一个进程能在一连串的事件上等待。</p><p>IO复用的实现方式目前主要有select、poll和epoll。</p><p>select和poll的原理基本相同：</p><ul><li><p>注册待侦听的fd(这里的fd创建时最好使用非阻塞)</p></li><li><p>每次调用都去检查这些fd的状态，当有一个或者多个fd就绪的时候返回</p></li><li><p>返回结果中包括已就绪和未就绪的fd</p></li></ul><p>相比select，poll解决了单个进程能够打开的文件描述符数量有限制这个问题：select受限于FD_SIZE的限制，如果修改则需要修改这个宏重新编译内核；而poll通过一个pollfd数组向内核传递需要关注的事件，避开了文件描述符数量限制。此外，select和poll共同具有的一个很大的缺点就是包含大量fd的数组被整体复制于用户态和内核态地址空间之间，开销会随着fd数量增多而线性增大。</p><p>epoll的出现，解决了select、poll的缺点：</p><ul><li><p>基于事件驱动的方式，避免了每次都要把所有fd都扫描一遍。</p></li><li><p>epoll_wait只返回就绪的fd。</p></li><li><p>epoll使用nmap内存映射技术避免了内存复制的开销。</p></li><li><p>epoll的fd数量上限是操作系统的最大文件句柄数目,这个数目一般和内存有关，通常远大于1024。</p></li></ul><p>总结：</p><ul><li>select：支持注册 FD_SETSIZE(1024) 个 socket。</li><li>poll： poll 作为 select 的替代者，最大的区别就是，poll 不再限制 socket 数量。</li><li>epoll：epoll 能直接返回具体的准备好的通道，时间复杂度 O(1)。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/u010913001/article/details/52487938" target="_blank" rel="noopener">C++网络框架和库</a>,by 帝王铠.</li><li><a href="https://juejin.im/post/59e47ce36fb9a0451f2ffee8" target="_blank" rel="noopener">C++ 高性能服务器网络框架设计细节</a>,by 范蠡.</li><li><a href="https://www.jianshu.com/p/ee5b34870eba" target="_blank" rel="noopener">值得推荐的C/C++框架和库 (真的很强大)</a>,by tibet889.</li><li><a href="https://zhuanlan.zhihu.com/p/71707672" target="_blank" rel="noopener">有哪些值得推荐的c/c++开源框架与库</a>,by 零声学院.</li><li><a href="https://www.zhihu.com/question/20124494" target="_blank" rel="noopener">有什么适合提高 C/C++ 网络编程能力的开源项目推荐？</a>,by zhihu.</li><li><a href="https://blog.csdn.net/lijinqi1987/article/details/71214974" target="_blank" rel="noopener">网络库libevent、libev、libuv对比</a>,by 小麒麟666.</li><li><a href="https://blog.csdn.net/tjm1017/article/details/88219576" target="_blank" rel="noopener">libevent、libev、libuv、IOCP、asio、muduo优劣分析、QT下编译libevent静态库</a>,by 雒珣.</li><li><a href="https://lotabout.me/2018/reactor-pattern/" target="_blank" rel="noopener">Reactor 模式简介</a>,by lotabou.</li><li><a href="https://segmentfault.com/a/1190000002715832" target="_blank" rel="noopener">IO设计模式：Reactor和Proactor对比</a>,by 大CC.</li><li><a href="https://www.jianshu.com/p/96c0b04941e2" target="_blank" rel="noopener">Proactor和Reactor模型</a>,by wiseAaron.</li><li><a href="https://www.zhihu.com/question/26943938" target="_blank" rel="noopener">如何深刻理解reactor和proactor？</a>,by zhihu.</li><li><a href="http://senlinzhan.github.io/2017/08/12/libevent/" target="_blank" rel="noopener">Libevent 编程指南</a>,by senlin.</li><li><a href="https://zhuanlan.zhihu.com/p/20315482" target="_blank" rel="noopener">网络编程（三）：从libevent到事件通知机制</a>,by auxten.</li><li><a href="https://www.ibm.com/developerworks/cn/aix/library/au-libev/index.html" target="_blank" rel="noopener">使用 libevent 和 libev 提高网络应用性能</a>,by Martin C. Brown.</li><li><a href="https://zhuanlan.zhihu.com/p/50497450" target="_blank" rel="noopener">兄déi，libuv了解一下</a>,by 宋光宇.</li><li><a href="http://blog.tubumu.com/2017/03/11/libuv-analysis-02/" target="_blank" rel="noopener">Libuv 源码分析(2):源码一览</a>,by Tubumu.</li><li><a href="https://www.cnblogs.com/losophy/p/9202815.html" target="_blank" rel="noopener">IO设计模式：Actor、Reactor、Proactor</a>,by _raindrop.</li><li><a href="http://www.thinkingyu.com/articles/Proactor/" target="_blank" rel="noopener">Proactor网络编程模式歪解</a>,by WUYU.</li><li><a href="https://www.s0nnet.com/archives/deep-understanding-of-reactor-design-patterns" target="_blank" rel="noopener">深入理解Reactor模式</a>,by 独木の白帆.</li><li><a href="https://cizixs.com/2015/03/29/basic-socket-programming/" target="_blank" rel="noopener">socket 编程基础知识</a>,by cizixs.</li><li><a href="https://zhuanlan.zhihu.com/p/43933717" target="_blank" rel="noopener">一文读懂高性能网络编程中的I/O模型</a>,by Jack Jiang.</li><li><a href="https://blog.csdn.net/drdairen/article/details/53694550" target="_blank" rel="noopener">几种典型的服务器网络编程模型归纳(select poll epoll)</a>,by DrStream.</li><li><a href="https://www.cnblogs.com/wade-luffy/p/6106030.html" target="_blank" rel="noopener">Linux IO模型和网络编程模型</a>,by wade&amp;luffy.</li><li><a href="https://blog.csdn.net/weiwangchao_/article/details/8730199" target="_blank" rel="noopener">开源免费的C/C++网络库(c/c++ sockets library) 七剑下天山</a>,by 工程师WWW.</li><li><a href="https://www.cnblogs.com/DOMLX/p/9601511.html" target="_blank" rel="noopener">c++ 网络编程（一）TCP/UDP windows/linux 下入门级socket通信 客户端与服务端交互代码</a>,by aircraft.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近需要用C++编写一个网络程序，因此将网络编程的相关知识整理学习一下。&lt;/p&gt;
&lt;h1 id=&quot;Socket编程&quot;&gt;&lt;a href=&quot;#Socket编程&quot; class=&quot;headerlink&quot; title=&quot;Socket编程&quot;&gt;&lt;/a&gt;Socket编程&lt;/h1&gt;&lt;p&gt;So
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>地形数据格式总结</title>
    <link href="https://huangwang.github.io/2019/10/20/%E5%9C%B0%E5%BD%A2%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://huangwang.github.io/2019/10/20/地形数据格式总结/</id>
    <published>2019-10-20T11:42:06.000Z</published>
    <updated>2019-11-15T03:47:04.524Z</updated>
    
    <content type="html"><![CDATA[<p>地形数据是能够表示地球表面高低起伏状态的数据，即具有高程信息的数据。数字高程模型（DEM）是一种对空间起伏变化的连续表示方法，是一种特殊的 DatasetGrid 数据模型，每个网格的值为高程值，而且有标准的颜色表来表示，这对分幅 DEM 图像的合成很有帮助。</p><p>数字地面模型（digital terrain model，DTM）就是以数字的形式来表示实际地形特征的空间分布。有时所指的地形特征点仅指地面点的高程，就将这种数字地形描述称为数字高程模型（digital elevation model，DEM）。最初是于1958年由美国麻省理工学院Miller教授提出。数字地面模型广泛用于遥感，地理信息系统，大地测量和电子地图等领域。</p><p><strong>常用的地形数据主要有：etopo、GTOPO30、GEBCO以及SRTM。按照精度从低到高排序如下：</strong></p><ul><li>etopo5：GMT 网格数据之 etopo5</li><li>etopo2：GMT 网格数据之 ETOPO2v2</li><li>etopo1：GMT 网格数据之 ETOPO1</li><li>GEBCO：GEBCO：全球水深数据</li><li>GTOPO30：GMT 网格数据之 GTOPO30</li><li>SRTM30_PLUS：全球地形起伏数据：SRTM30_PLUS</li><li>SRTM15_PLUS：全球地形起伏数据：SRTM15_PLUS</li><li>SRTM3：高精度地形网格数据 SRTM</li><li>ASTER GDEM：全球数字高程数据：ASTER GDEM</li></ul><div class="table-container"><table><thead><tr><th>数据源</th><th>空间分辨率</th><th>覆盖范围</th><th>陆地/海洋</th></tr></thead><tbody><tr><td>etopo5</td><td>5 弧分</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>etopo2</td><td>2 弧分</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>etopo1</td><td>1 弧分</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>GEBCO</td><td>1 弧分 / 30 弧秒</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>GTOPO30</td><td>30 弧秒</td><td>全球</td><td>陆地</td></tr><tr><td>SRTM30_PLUS</td><td>30 弧秒 (约 1km)</td><td>纬度 [-81,81]</td><td>陆地 + 海洋</td></tr><tr><td>SRTM15_PLUS</td><td>15 弧秒 (约 500m)</td><td>纬度 [-81,81]</td><td>陆地 + 海洋</td></tr><tr><td>SRTM</td><td>3 弧秒 (约 90m)</td><td>纬度 [-60,60]</td><td>陆地</td></tr><tr><td>ASTER GDEM</td><td>1 弧秒 (约 30m)</td><td>纬度 [-83,83]</td><td>陆地</td></tr></tbody></table></div><h1 id="ETOPO"><a href="#ETOPO" class="headerlink" title="ETOPO"></a>ETOPO</h1><p>ETOPO是一种地形高程数据。该数据由NGDC美国地球物理中心发布（U.S. National Geophysical Data Center ）。与srtm、aster gdem一样，均为高程数据，所不同的是它还包括海洋海底地形数据。</p><p>ETOPO地形数据有五种规格， ETOPO1的效果最好，ETOPO2、ETOPO5数据尽管可以使用，但目前已不推荐采用。其中ETOPO1约三百多兆的压缩包， ETOPO2约九十兆。</p><h2 id="ETOPO1"><a href="#ETOPO1" class="headerlink" title="ETOPO1"></a>ETOPO1</h2><p>ETOPO1包含了全球地形和海洋深度，采样间隔为1弧分，是目前精度最高的global relief数据；其分为两个版本，Ice Surface和Bedrock，两个版本基本一致。不同之处在于在处理南极洲和Greenland地形时，前者给出的是加上冰盖层之后的高程，后者给出的是岩床的高程。</p><p>对于每个版本又细分为 grid-registered和cell-registered，其中grid-registered是权威版本，cell-registered是衍生版本，因而推荐下载使用grid-registered版本。</p><h1 id="GEBCO"><a href="#GEBCO" class="headerlink" title="GEBCO"></a>GEBCO</h1><p>GEBCO数据的全称是General Bathymetric Chart of the Oceans( 全球海洋通用水深数据) ，是由国际海道测量组织(IHO) 和政府间海洋学委员会(IOC) 联合发布的最全面的世界大洋海底地形数据，也是当今海洋模式中最常用的海洋水深数据之一。</p><h1 id="SRTM"><a href="#SRTM" class="headerlink" title="SRTM"></a>SRTM</h1><p>SRTM 即航天飞机雷达地形测绘使命。航天地形测绘是指以人造地球卫星、宇宙飞船、航天飞机等航天器为工作平台，对地球表面所进行的遥感测量。以往的航天测绘由于其精度有限，一般只能制作中、小比例尺地图。SRTM则是美国太空总署（NASA）和国防部国家测绘局（NIMA）以及德国与意大利航天机构共同合作完成联合测量,由美国发射的“奋进”号航天飞机上搭载SRTM系统完成。本次测图任务从2000年2月11日开始至22日结束，共进行了11天总计222小时23分钟的数据采集工作，获取北纬60度至南纬56度之间总面积超过1.19亿平方公里的雷达影像数据，覆盖地球80%以上的陆地表面。</p><p>SRTM系统获取的雷达影像的数据量约9.8万亿字节，经过两年多的数据处理，制成了数字地形高程模型（DEM）。SRTM产品2003年开始公开发布，经历多修订，目前最新的版本为V4.1版本。</p><p>SRTM地形数据主要包含两类数据：SRTM3和SRTM1。</p><ul><li>SRTM3精度为3弧秒，即90m一个点，包括非洲、北美、南美、欧亚、澳大利亚以及部分岛屿；</li><li>SRTM1精度为1弧秒，即30m一个点，仅限美国地区；</li></ul><p>所有的数据被分为1度<em>1度的单元，共计上万个数据文件。文件名代表了该单元左下角的位置；不同网站下载的数据文件名不同，但文件名类似N37W105的 数据文件，其单元左下角的坐标为(37N,105W)；每个SRTM3数据文件包含了1201</em>1201个采样点；高程数据单位为m，参考水准面为 WGS84大地水准面模型；网格划分采用gridline registration方式，因而单元的南北边及左右边与相邻单元的边重合。</p><h2 id="全国DEM-1km、500m和250m数据（SRTM-90m）"><a href="#全国DEM-1km、500m和250m数据（SRTM-90m）" class="headerlink" title="全国DEM 1km、500m和250m数据（SRTM 90m）"></a>全国DEM 1km、500m和250m数据（SRTM 90m）</h2><p>中国海拔高度（DEM）空间分布数据来源于美国奋进号航天飞机的雷达地形测绘SRTM（Shuttle Radar Topography Mission，SRTM）数据。SRTM数据有现实性强、免费获取等优点，全球许多应用研究都采用SRTM数据开展环境分析。该数据集为基于最新的SRTM V4.1数据经重采样生成，包括1km、500m和250m三种精度的全国一张图数据。数据采用WGS84椭球投影。</p><h2 id="hgt转tiff"><a href="#hgt转tiff" class="headerlink" title="hgt转tiff"></a>hgt转tiff</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal_translate -of GTiff N40E120.hgt N40E120.tif</span><br></pre></td></tr></table></figure><h1 id="ASTER-GDEM"><a href="#ASTER-GDEM" class="headerlink" title="ASTER GDEM"></a>ASTER GDEM</h1><p>ASTER GDEM，即先进星载热发射和反射辐射仪全球数字高程模型，与SRTM一样为数字高程DEM，其全球空间分辨率为30米。该数据是根据 NASA的新一代对地观测卫星Terra的详尽观测结果制作完成的。其数据覆盖范围为北纬83°到南纬83°之间的所有陆地区域，达到了地球陆地表面的99%。号称是“迄今最完整的全球地形数据”。</p><p>ASTER GDEM：空间分辨率：1弧度秒 （约30 米），精度：垂直精度20米，水平精度30米，SRTM数据的纬度覆盖范围是[-60,60]，ASTER GDEM数据的纬度覆盖范围为[-83,83]；SRTM的空间分辨率一般为90m，只有美国境内存在空间分辨率为30m的数据；ASTER GDEM的空间分辨率为30m；</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.resdc.cn/data.aspx?DATAID=123" target="_blank" rel="noopener">全国DEM 1km、500m和250m数据（SRTM 90m）</a>,by 资源环境数据云平台.</li><li><a href="https://en.wikipedia.org/wiki/Digital_elevation_model" target="_blank" rel="noopener">Digital_elevation_model</a>,by wikipedia.</li><li><a href="http://blog.sciencenet.cn/blog-2637373-974284.html" target="_blank" rel="noopener">GMT地形数据</a>,by YF2015.</li><li><a href="https://blog.seisman.info/global-relief-models/" target="_blank" rel="noopener">全球地形起伏数据总结</a>,by SeisMan.</li><li><a href="https://huangwang.github.io/2018/06/13/Cesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Cesium卫星地图和高程数据切片经验总结</a>,by jackhuang.</li><li><a href="https://blog.seisman.info/srtm/" target="_blank" rel="noopener">高精度地形网格数据 SRTM</a>,by seisman.</li><li><a href="https://blog.csdn.net/qq_36377037/article/details/86300330" target="_blank" rel="noopener">工具gdal2srtmtiles的安装使用</a>,by 四域公子.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E6%A4%AD%E7%90%83" target="_blank" rel="noopener">地球椭球</a>,by wikipedia.</li><li><a href="http://qiancy.com/2017/01/07/datum-spheroid-parameters-equation/" target="_blank" rel="noopener">椭球体的重要参数和公式</a>,by cyqian.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;地形数据是能够表示地球表面高低起伏状态的数据，即具有高程信息的数据。数字高程模型（DEM）是一种对空间起伏变化的连续表示方法，是一种特殊的 DatasetGrid 数据模型，每个网格的值为高程值，而且有标准的颜色表来表示，这对分幅 DEM 图像的合成很有帮助。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>GDAL处理地图栅格Tif黑边的方法</title>
    <link href="https://huangwang.github.io/2019/10/20/GDAL%E5%A4%84%E7%90%86%E5%9C%B0%E5%9B%BE%E6%A0%85%E6%A0%BCTif%E9%BB%91%E8%BE%B9%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/10/20/GDAL处理地图栅格Tif黑边的方法/</id>
    <published>2019-10-20T01:32:28.000Z</published>
    <updated>2019-10-20T04:34:43.296Z</updated>
    
    <content type="html"><![CDATA[<p>通过地图下载软件LocaSpaceViewer下载卫星影像拼接成Tif文件后，会出现黑边问题。此外在Cesium中浏览瓦片地图会出现蓝色区域。下面即分析这两个问题出现的原因和解决方法。</p><h1 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h1><p>LocaSpaceViewer中可选择行政区域下载卫星影像，这种方式拼接后的tif文件必然会出现黑边，如图1所示。</p><p></p><p align="center">    <img src="images/black1.jpg" width="60%" alt="黑边问题1"></p><p></p><center>图1 黑边问题1</center><p>推荐在LocaSpaceViewer中以瓦片矩形区域下载卫星影像。具体方法为：</p><ol><li>在该链接<a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" target="_blank" rel="noopener">google-maps-coordinates-tile-bounds-projection</a>处查询瓦片的经纬度。</li><li>在LocaSpaceViewer中绘制矩形，并将矩形顶点的经纬度设置为待下载瓦片的经纬度。</li><li>在LocaSpaceViewer下载指定瓦片。</li></ol><p>该方法也可能会出现黑边，如图2所示。</p><p></p><p align="center">    <img src="images/black2.jpg" width="60%" alt="黑边问题2"></p><p></p><center>图1 黑边问题2</center><p>此外，将tif文件转换成标准瓦片后，在Cesium中浏览瓦片地图会出现蓝色区域，如图3所示。</p><p></p><p align="center">    <img src="images/blue.jpg" width="90%" alt="蓝边问题"></p><p></p><center>图3 蓝边问题</center><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>对问题1，下载不规则边界的地图时，地图下载软件不会自动填充白色或变成透明，所以导致黑边问题1的产生。</p><p>对问题2，产生原因目前不清楚，但因黑边的产生很有规则，所以解决方法会比较简单。</p><p>对问题3，产生原因是蓝边对应的瓦片不存在。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>对问题1，可采用链接<a href="http://blog.locaspace.cn:81/?p=971" target="_blank" rel="noopener">用LSV下载的高清地图去黑边教程</a>指明的方法去除黑边，但使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal2tiles.py &lt;image&gt; &lt;tilesdir&gt;</span><br></pre></td></tr></table></figure><p>生成瓦片时会报错，因此建议采用瓦片矩形区域下载卫星影像，不要下载行政区域卫星地图。</p><p>对问题2，使用如下命令去除黑边：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看tif文件元数据信息</span><br><span class="line">gdalinfo 10.tif</span><br><span class="line">// 根据黑边位置使用如下命令去除</span><br><span class="line">gdal_translate -srcwin 0 0 4096 4096 10.tif test.tif</span><br></pre></td></tr></table></figure><p>对问题3，使用LocaSpaceViewer下载指定级别指定区域的卫星影像即可。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2018/06/13/Cesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Cesium卫星地图和高程数据切片经验总结</a>,by jackhuang.</li><li><a href="http://blog.locaspace.cn:81/?p=971" target="_blank" rel="noopener">用LSV下载的高清地图去黑边教程</a>,by LocaSpaceViewer.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过地图下载软件LocaSpaceViewer下载卫星影像拼接成Tif文件后，会出现黑边问题。此外在Cesium中浏览瓦片地图会出现蓝色区域。下面即分析这两个问题出现的原因和解决方法。&lt;/p&gt;
&lt;h1 id=&quot;下载方法&quot;&gt;&lt;a href=&quot;#下载方法&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>Qt集成OSG开发</title>
    <link href="https://huangwang.github.io/2019/10/13/Qt%E9%9B%86%E6%88%90OSG%E5%BC%80%E5%8F%91/"/>
    <id>https://huangwang.github.io/2019/10/13/Qt集成OSG开发/</id>
    <published>2019-10-13T14:07:38.000Z</published>
    <updated>2019-11-13T08:02:54.759Z</updated>
    
    <content type="html"><![CDATA[<p>Qt集成OSG开发是指使用Qt开发图形用户界面，封装OSG为Qt的Widget，然后由OSG负责三维展示的解决方案。具体方法如下：</p><h1 id="QT-OSG开发环境配置"><a href="#QT-OSG开发环境配置" class="headerlink" title="QT+OSG开发环境配置"></a>QT+OSG开发环境配置</h1><p>具体配置过程请参考<a href="https://huangwang.github.io/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">Windows下QT与OSG开发环境配置</a>。</p><h1 id="封装OSG为Widget"><a href="#封装OSG为Widget" class="headerlink" title="封装OSG为Widget"></a>封装OSG为Widget</h1><p>封装OSG为Widget可参考<a href="https://github.com/openscenegraph/osgQt" target="_blank" rel="noopener">osgQt</a>。osgQt的编译链接与OSG类似。</p><p>osgQt仅将OSG封装成简单的Widget，还需研究将OSG封装成自定义控件，从而在QT Designer里方便使用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.w3xue.com/exp/article/20196/40679.html" target="_blank" rel="noopener">OSG嵌入QT的简明总结</a>,by charlee44.</li><li><a href="https://blog.csdn.net/niu2212035673/article/details/72802055" target="_blank" rel="noopener">OSG和Qt结合</a>,by 先锋小牛.</li><li><a href="https://blog.csdn.net/xpg4321/article/details/72867596" target="_blank" rel="noopener">OSG中使用Qt做界面</a>,by 很菜但努力.</li><li><a href="https://blog.csdn.net/u013207966/article/details/51531023" target="_blank" rel="noopener">第1课时《Qt osgEarth 编程入门》</a>,by 汀兰左岸.</li><li><a href="https://www.cnblogs.com/boright88/p/6264642.html" target="_blank" rel="noopener">QT pro文件解析</a>, by 博弈right.</li><li><a href="https://huangwang.github.io/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">Windows下QT与OSG开发环境配置</a>,by jackhuang.</li><li><a href="https://blog.csdn.net/q_l_s/article/details/52458240" target="_blank" rel="noopener">window下查看dll, lib文件是32位还是64位</a>,by 剑西楼.</li><li><a href="https://blog.csdn.net/only_1/article/details/80760495" target="_blank" rel="noopener">使用VS工具查看dll是32位还是64位</a>,by 代码运输员.</li><li><a href="https://blog.csdn.net/panshun888/article/details/51923927" target="_blank" rel="noopener">Qt自定义控件的创建与初步使用（一）之自定义控件的创建步骤</a>,by 穿过记忆的河流.</li><li><a href="https://blog.csdn.net/panshun888/article/details/52074400" target="_blank" rel="noopener">Qt自定义控件的创建与初步使用（二）之图片上绘制文字、箭头、曲线</a>,by 穿过记忆的河流.</li><li><a href="https://my.oschina.net/jannn/blog/466994" target="_blank" rel="noopener">QT自定义控件(生成和使用)</a>,by jannn.</li><li><a href="https://blog.csdn.net/xuzheng11332/article/details/61618955" target="_blank" rel="noopener">QT学习笔记（5）：自定义控件</a>,by xuzheng11332.</li><li><a href="https://blog.csdn.net/AleutianSix/article/details/88288721" target="_blank" rel="noopener">QT自定义控件在QTCreator中不显示问题</a>,by AleutianSix.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Qt集成OSG开发是指使用Qt开发图形用户界面，封装OSG为Qt的Widget，然后由OSG负责三维展示的解决方案。具体方法如下：&lt;/p&gt;
&lt;h1 id=&quot;QT-OSG开发环境配置&quot;&gt;&lt;a href=&quot;#QT-OSG开发环境配置&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>SQLServer2008中日期类型数据的存储</title>
    <link href="https://huangwang.github.io/2019/10/13/SQLServer2008%E4%B8%AD%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>https://huangwang.github.io/2019/10/13/SQLServer2008中日期类型数据的存储/</id>
    <published>2019-10-13T10:15:02.000Z</published>
    <updated>2019-11-06T13:58:49.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期类型比较"><a href="#日期类型比较" class="headerlink" title="日期类型比较"></a>日期类型比较</h1><p>SQL Server 2008中有datetime、datetime2、datetimeoffset三种数据类型用于存储时间类型数据。它们之间的差别主要有：</p><ul><li>datetime、datetime2不存储时区信息，datetimeoffset存储时区信息。</li><li>datetime与datetime2区别是两者存储字节大小和精度不同，后者优于前者。</li></ul><p>因此，在存储时间信息时，优先使用datetimeoffset数据类型。当使用datetime和datetime2数据类型时，因没有时区信息，很多客户端链接库会将存储的时间默认为UTC时间。例如：</p><p>SQL Server2008中存储某人的出生日期为“1970-01-01 00:00:00”，通过sequelizejs框架读取得到出生日期将是“1970-01-01T00:00:00Z”，<strong>这里 T 仅仅是分隔日期和时间的符号，没有其他含义，而 Z 表示 UTC 时间。</strong></p><p>这时需要根据自己所在时区对时间进行修正。最简单的方法是在SQL语句中进行修正，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select birthday1, dateadd(hour,-8,birthday) from students</span><br></pre></td></tr></table></figure><h1 id="日期转换"><a href="#日期转换" class="headerlink" title="日期转换"></a>日期转换</h1><p>有时时间会以字符串类型存储在数据库中，当需要对时间进行比较时，需要先将字符串类型时间转换成日期类型，可使用convert函数进行转换，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select convert(varchar, getdate(), 1)</span><br></pre></td></tr></table></figure><p>其中varchar是要转换的数据的类型，getdate()是被转换的数据，1表示被转换数据的格式。</p><h1 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h1><p>在mssql中比较两个日期的大小，可采用DATEDIFF函数，其语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATEDIFF ( datepart , startdate , enddate )</span><br></pre></td></tr></table></figure><p>其中，datepart是时间单位，startdate和enddate是合法的日期表达式。datediff用法示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATEDIFF(year,        &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(quarter,     &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(month,       &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(dayofyear,   &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(day,         &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(week,        &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(hour,        &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(minute,      &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(second,      &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(millisecond, &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br><span class="line">SELECT DATEDIFF(microsecond, &apos;2005-12-31 23:59:59.9999999&apos;, &apos;2006-01-01 00:00:00.0000000&apos;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://stackoverflow.com/questions/18518290/how-to-add-hours-to-current-date-in-sql-server/18518412" target="_blank" rel="noopener">How to add hours to current date in SQL Server?</a>,by stackoverflow.</li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime" target="_blank" rel="noopener">Choosing between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo</a>,by microsoft.</li><li><a href="https://blog.csdn.net/happymagic/article/details/45065321" target="_blank" rel="noopener">datetime、datetime2的区别</a>,by happymagic.</li><li><a href="https://www.cnblogs.com/Gin-23333/p/5066823.html" target="_blank" rel="noopener">DateTime , DateTime2 ,DateTimeOffset 之间的小区别</a>,by 神崎橙.</li><li><a href="https://segmentfault.com/a/1190000004292140" target="_blank" rel="noopener">关于“时间”的一次探索</a>,by KohPoll.</li><li><a href="https://www.mssqltips.com/sqlservertip/1145/date-and-time-conversions-using-sql-server/" target="_blank" rel="noopener">Date and Time Conversions Using SQL Server</a>,by Edgewood Solutions.</li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/datediff-transact-sql?view=sql-server-ver15" target="_blank" rel="noopener">DATEDIFF (Transact-SQL)</a>,by microsoft.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日期类型比较&quot;&gt;&lt;a href=&quot;#日期类型比较&quot; class=&quot;headerlink&quot; title=&quot;日期类型比较&quot;&gt;&lt;/a&gt;日期类型比较&lt;/h1&gt;&lt;p&gt;SQL Server 2008中有datetime、datetime2、datetimeoffset三种数据
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数据库" scheme="https://huangwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象深度克隆</title>
    <link href="https://huangwang.github.io/2019/10/10/JavaScript%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/"/>
    <id>https://huangwang.github.io/2019/10/10/JavaScript对象深度克隆/</id>
    <published>2019-10-10T13:10:21.000Z</published>
    <updated>2019-10-10T13:37:32.701Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript并没有提供对象的复制方法，只能借助第三方库或自己实现对象的深度克隆。具体方法如下：</p><h1 id="第三方库实现"><a href="#第三方库实现" class="headerlink" title="第三方库实现"></a>第三方库实现</h1><p>实现JavaScript库的深度克隆的第三方库主要有：</p><ul><li>Underscore —— _.clone()</li><li>jQuery —— $.clone() / $.extend()</li><li>lodash —— <em>.clone() / </em>.cloneDeep()</li><li>借助 JSON 全局对象</li></ul><h2 id="Underscore-——-clone"><a href="#Underscore-——-clone" class="headerlink" title="Underscore —— _.clone()"></a>Underscore —— _.clone()</h2><p>在 Underscore 中有这样一个方法：_.clone()，这个方法实际上是一种浅复制 (shallow-copy)，所有嵌套的对象和数组都是直接复制引用而并没有进行深复制。其代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Create a (shallow-cloned) duplicate of an object.</span><br><span class="line">_.clone = function(obj) &#123;</span><br><span class="line">  if (!_.isObject(obj)) return obj;</span><br><span class="line">  return _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="jQuery-——-clone-extend"><a href="#jQuery-——-clone-extend" class="headerlink" title="jQuery —— $.clone() / $.extend()"></a>jQuery —— $.clone() / $.extend()</h2><p>在 jQuery 中也有这么一个叫 $.clone() 的方法，可是它并不是用于一般的 JS 对象的深复制，而是用于 DOM 对象。与 Underscore 类似，可以通过 $.extend() 方法来完成深复制。值得庆幸的是，在 jQuery 中可以通过添加一个参数来实现递归extend。调用$.extend(true, {}, …)就可以实现深复制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var x = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</span><br><span class="line">    c: [ 1, 2, 3 ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var y = $.extend(&#123;&#125;, x),          //shallow copy</span><br><span class="line">    z = $.extend(true, &#123;&#125;, x);    //deep copy</span><br><span class="line"></span><br><span class="line">y.b.f === x.b.f       // true</span><br><span class="line">z.b.f === x.b.f       // false</span><br></pre></td></tr></table></figure><h2 id="lodash-——-clone-cloneDeep"><a href="#lodash-——-clone-cloneDeep" class="headerlink" title="lodash —— .clone() / .cloneDeep()"></a>lodash —— <em>.clone() / </em>.cloneDeep()</h2><p>在lodash中关于复制的方法有两个，分别是<em>.clone()和</em>.cloneDeep()。其中<em>.clone(obj, true)等价于</em>.cloneDeep(obj)。</p><h2 id="借助-JSON-全局对象"><a href="#借助-JSON-全局对象" class="headerlink" title="借助 JSON 全局对象"></a>借助 JSON 全局对象</h2><p>针对纯 JSON 数据对象的深复制，使用 JSON 全局对象的 parse 和 stringify 方法来实现深复制也算是一个简单讨巧的方法，但它能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function jsonClone(obj) &#123;</span><br><span class="line">    return JSON.parse(JSON.stringify(obj));</span><br><span class="line">&#125;</span><br><span class="line">var clone = jsonClone(&#123; a:1 &#125;);</span><br></pre></td></tr></table></figure><h1 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h1><p>下面是递归实现对象深度克隆的可用方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function clone(obj) &#123;</span><br><span class="line">  // Handle the 3 simple types, and null or undefined</span><br><span class="line">  if (null == obj || &quot;object&quot; != typeof obj) return obj;</span><br><span class="line"> </span><br><span class="line">  // Handle Date</span><br><span class="line">  if (obj instanceof Date) &#123;</span><br><span class="line">    var copy = new Date();</span><br><span class="line">    copy.setTime(obj.getTime());</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  // Handle Array</span><br><span class="line">  if (obj instanceof Array) &#123;</span><br><span class="line">    var copy = [];</span><br><span class="line">    for (var i = 0, var len = obj.length; i &lt; len; ++i) &#123;</span><br><span class="line">      copy[i] = clone(obj[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  // Handle Object</span><br><span class="line">  if (obj instanceof Object) &#123;</span><br><span class="line">    var copy = &#123;&#125;;</span><br><span class="line">    for (var attr in obj) &#123;</span><br><span class="line">      if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);</span><br><span class="line">    &#125;</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  throw new Error(&quot;Unable to copy obj! Its type isn&apos;t supported.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/" target="_blank" rel="noopener">深入剖析 JavaScript 的深复制</a>,by 咀嚼之味.</li><li><a href="https://www.jb51.net/article/84541.htm" target="_blank" rel="noopener">深入理解JavaScript中的对象复制(Object Clone)</a>,by jingxian.</li><li><a href="https://book.douban.com/subject/11874748/" target="_blank" rel="noopener">JavaScript语言精粹（修订版）</a>,by Douglas Crockford著.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript并没有提供对象的复制方法，只能借助第三方库或自己实现对象的深度克隆。具体方法如下：&lt;/p&gt;
&lt;h1 id=&quot;第三方库实现&quot;&gt;&lt;a href=&quot;#第三方库实现&quot; class=&quot;headerlink&quot; title=&quot;第三方库实现&quot;&gt;&lt;/a&gt;第三方库实现&lt;/h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://huangwang.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>图片或多媒体大文件的存储与管理</title>
    <link href="https://huangwang.github.io/2019/10/10/%E5%9B%BE%E7%89%87%E6%88%96%E5%A4%9A%E5%AA%92%E4%BD%93%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <id>https://huangwang.github.io/2019/10/10/图片或多媒体大文件的存储与管理/</id>
    <published>2019-10-10T00:45:27.000Z</published>
    <updated>2019-10-11T14:07:39.267Z</updated>
    
    <content type="html"><![CDATA[<p>图片、声音、视频等大文件在后台数据库中的存储管理方式通常有两种:</p><ul><li>文件存储到数据库中</li><li>文件存储到文件系统中,数据库中保存文件路径</li></ul><p>这两种文件存储管理方式有各自优缺点, 选择哪种方法存储大文件应根据具体情况而定。</p><h1 id="文件系统存储管理方式"><a href="#文件系统存储管理方式" class="headerlink" title="文件系统存储管理方式"></a>文件系统存储管理方式</h1><p>文件系统存储管理方式将文件存储到磁盘中，在数据库中使用varchar类型记录文件路径。该方法的缺点主要有：</p><ul><li>文件不支持DELETE</li></ul><p>当删除文件路径时，不支持自动删除对应文件。</p><ul><li>文件不支持事务隔离</li></ul><p>如果改变文件内容或删除文件，这些操作将立刻被其他客户端看到。</p><ul><li>文件不支持回滚</li></ul><p>数据库记录能够恢复，但文件删除不能。</p><ul><li><p>文件不支持数据库的备份工具</p></li><li><p>文件不支持SQL的访问权限设置</p></li><li><p>文件不是SQL数据类型</p></li></ul><p>数据库不会验证文件路径是否有效。当文件移动、重命名、删除时，数据不会自动更新路径。</p><h1 id="数据库中存储文件"><a href="#数据库中存储文件" class="headerlink" title="数据库中存储文件"></a>数据库中存储文件</h1><p>数据库通常支持BLOB类型，可用于存储任何二进制数据。数据库中存储文件，其优点对应文件系统管理存储方式的缺点。同样，数据库中存储文件也存在一些缺点：</p><ul><li>对数据库的读/写的速度永远都赶不上文件系统处理的速度</li><li>数据库备份变的巨大，越来越耗时间</li><li>对文件的访问需要穿越你的应用层和数据库层</li></ul><h1 id="多媒体大文件存储建议"><a href="#多媒体大文件存储建议" class="headerlink" title="多媒体大文件存储建议"></a>多媒体大文件存储建议</h1><p>当只涉及较小规模图片、音频的存储时，建议直接存放到数据库中。当涉及视频大文件存储时，建议还是用文件系统存储。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://gitee.com/jkxqj/java_wiki/blob/master/SQL%E5%8F%8D%E6%A8%A1%E5%BC%8F.pdf" target="_blank" rel="noopener">SQL反模式</a>,by Bill karwin著, 谭振林, Push Chen译.</li><li><a href="https://www.cnblogs.com/hellojesson/p/6295797.html" target="_blank" rel="noopener">特殊格式文件(视频、声音等) 在数据库中的存储方式</a>,by Jesson.</li><li><a href="https://www.cnblogs.com/wangtao_20/p/3440570.html" target="_blank" rel="noopener">关于图片或者文件在数据库的存储方式归纳</a>,by 王滔.</li><li><a href="https://www.cnblogs.com/studyzy/archive/2009/02/23/1396712.html" target="_blank" rel="noopener">SQL Server 2008新特性——FILESTREAM</a>,by 曾毅.</li><li><a href="https://www.iteye.com/blog/lxy2330-961266" target="_blank" rel="noopener">oracle对大对象类型操作：blob，clob，nclob，bfile</a>,by lxy2330.</li><li><a href="https://www.zhihu.com/question/22128674" target="_blank" rel="noopener">类似优酷土豆视频网站的视频源文件一般是存储在什么样系统上？</a>,by zhihu.</li><li><a href="https://stackoverflow.com/questions/18518290/how-to-add-hours-to-current-date-in-sql-server/18518412" target="_blank" rel="noopener">How to add hours to current date in SQL Server?</a>,by stackoverflow.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图片、声音、视频等大文件在后台数据库中的存储管理方式通常有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件存储到数据库中&lt;/li&gt;
&lt;li&gt;文件存储到文件系统中,数据库中保存文件路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种文件存储管理方式有各自优缺点, 选择哪种方法存储大文件应根据具体情
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数据库" scheme="https://huangwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Windows下QT与OSG开发环境配置</title>
    <link href="https://huangwang.github.io/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://huangwang.github.io/2019/10/10/Windows下QT与OSG开发环境配置/</id>
    <published>2019-10-10T00:18:23.000Z</published>
    <updated>2019-10-13T10:17:54.166Z</updated>
    
    <content type="html"><![CDATA[<p>最近想尝试使用QT开发图形用户界面，OSG负责三维展示的解决方案，于是研究了一下Windows下OSG的编译安装配置，以及在QT中集成OSG的配置过程。过程记录如下：</p><h1 id="QT-OSG开发环境配置"><a href="#QT-OSG开发环境配置" class="headerlink" title="QT+OSG开发环境配置"></a>QT+OSG开发环境配置</h1><p>QT+OSG开发环境配置将使用QT Creator集成环境进行图形用户界面开发，使用Desktop Qt 5.9.8 MSVC2017 64构建套件编译链接调试C++程序。</p><h2 id="Visual-Studio-Community-2017-下载安装"><a href="#Visual-Studio-Community-2017-下载安装" class="headerlink" title="Visual Studio Community 2017 下载安装"></a>Visual Studio Community 2017 下载安装</h2><p>下载安装Visual Studio Community 2017的“使用C++的桌面开发”工作负载。这将为QT提供MSVC2017 64bit编译套件。</p><h2 id="CDB-调试器下载安装"><a href="#CDB-调试器下载安装" class="headerlink" title="CDB 调试器下载安装"></a>CDB 调试器下载安装</h2><p>没有安装CDB调试器，QT的Desktop Qt 5.9.8 MSVC2017 64构建套件前会出现感叹号，并且使用该构建套件调试时会报“Unable to create a debugging engine”错误。CDB调试器下载安装方法参考<a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a></p><h2 id="QT-5-9-8-下载安装"><a href="#QT-5-9-8-下载安装" class="headerlink" title="QT 5.9.8 下载安装"></a>QT 5.9.8 下载安装</h2><p>QT 5.9.8是 LTS 版本，其下载安装请参考<a href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/">Qt5配置开源GSL数学库</a>。<strong>需要注意的是，QT 5.9.8安装过程，选择MSVC2017 64bit编译组件，如图1所示。</strong></p><p></p><p align="center">    <img src="images/qt_install.jpg" width="60%" alt="QT 5.9.8安装选择MSVC2017 64bit编译组件"></p><p></p><center>图1 QT 5.9.8安装选择MSVC2017 64bit编译组件</center><h2 id="cmake下载安装"><a href="#cmake下载安装" class="headerlink" title="cmake下载安装"></a>cmake下载安装</h2><p>到 cmake 官网下载安装 cmake，用于osg的编译安装。</p><h1 id="下载编译安装OSG"><a href="#下载编译安装OSG" class="headerlink" title="下载编译安装OSG"></a>下载编译安装OSG</h1><h2 id="下载OSG及相关软件"><a href="#下载OSG及相关软件" class="headerlink" title="下载OSG及相关软件"></a>下载OSG及相关软件</h2><p>Windows平台编译安装OSG需下载从OSG官网以下资料：</p><ul><li>OpenSceneGraph 3.6.4源代码</li><li>OpenSceneGraph-Data-3.4.0，因为找不到3.6.4版本的数据</li><li>3rdParty_VS2017_v141_x64_V11_full</li></ul><h2 id="配置OSG"><a href="#配置OSG" class="headerlink" title="配置OSG"></a>配置OSG</h2><p>打开cmake，选择osg源代码路径和osg源代码构建的路径，再点击“configure”按钮，选择Visual Studio 15 2017 Win64编译套件，配置osg如图2所示。</p><p></p><p align="center">    <img src="images/cmake_config.jpg" width="100%" alt="cmake编译osg配置"></p><p></p><center>图2 cmake编译osg配置</center><p>需要配置的地方主要有：</p><ul><li>ACTUAL_3rdparty_DIR：配置第三方库的目录</li><li>Build_OSG_EXAMPLES：选中即编译安装OSG的示例。</li><li>CMAKE_INSTALL_PREFIX：设置OSG的安装目录，通常放到C盘以外的地方，防止因权限问题安装失败。</li></ul><p>配置完成后，再持续点击“configure”按钮，知道红色警告消失。然后点击“Generate”按钮生成vs2017工程。</p><h2 id="编译OSG"><a href="#编译OSG" class="headerlink" title="编译OSG"></a>编译OSG</h2><p>在cmake中点击“Open Project”按钮，即使用 VS2017 打开 build 文件夹下的工程，点击：生成 -&gt; 批生成 -&gt; 生成 Debug 和 Release 版本的 All_BUILD 即可。</p><h2 id="安装OSG"><a href="#安装OSG" class="headerlink" title="安装OSG"></a>安装OSG</h2><p>右击解决方案的 Install 项目，点击生成，然后 Debug 平台的库文件就开始安装了，同理选择 Release 平台再重复安装。之后就可以在安装路径中看到编译的库文件了，安装路径由变量CMAKE_INSTALL_PREFIX的配置决定。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>OSG官方文档 <a href="http://www.openscenegraph.org/index.php/documentation/platform-specifics/windows/37-visual-studio" target="_blank" rel="noopener">Windows Compiling with Visual Studio</a>指出，OSG安装完成后需要配置如下环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OSG_ROOT points to the base of the OSG file structure (the directory that contains include, src etc. subdirectories)</span><br><span class="line">OSG_BIN_PATH = %OSG_ROOT%\bin</span><br><span class="line">OSG_INCLUDE_PATH = %OSG_ROOT%\include</span><br><span class="line">OSG_LIB_PATH = %OSG_ROOT%\lib</span><br><span class="line">OSG_SAMPLES_PATH = %OSG_ROOT%\share\OpenSceneGraph\bin</span><br><span class="line">OSG_FILE_PATH = ???\OpenSceneGraph-Data-X.X</span><br><span class="line">OPENSCENEGRAPH_VERSION = 3.6.4 </span><br><span class="line">PATH 添加：%OSG_ROOT%\bin;%OSG_ROOT%\bin\osgPlugins-%OPENSCENEGRAPH_VERSION%; 这两个是配置 bin 和插件的路径。</span><br></pre></td></tr></table></figure><h1 id="OSG测试"><a href="#OSG测试" class="headerlink" title="OSG测试"></a>OSG测试</h1><h2 id="命令行测试"><a href="#命令行测试" class="headerlink" title="命令行测试"></a>命令行测试</h2><p>打开 cmd 命令行，输入osgversion，输出当前 osg 版本说明环境变量配置成功了，再来看看能不能导入模型文件，接着键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osgviewer cow.osg</span><br></pre></td></tr></table></figure><p>这里可能会提示系统缺少 zlibd.dll，解决方法很简单：</p><ul><li>拷贝第三方库的 dll 目录下的 zlib.dll 和 zlibd.dll 到 OSG 安装目录的 bin 目录中。</li><li>拷贝第三方库的 lib 目录下的 zlib.dll 和 zlibd.dll 到 OSG 安装目录的 lib 目录中。</li></ul><p>这时重新键入上面的命令，就可以看到一头经典的 3D 牛了，说明 OSG 安装成功了。</p><h2 id="QT-配置-OSG-库路径"><a href="#QT-配置-OSG-库路径" class="headerlink" title="QT 配置 OSG 库路径"></a>QT 配置 OSG 库路径</h2><p>新建一个 QT 的控制台项目，编辑 .pro 文件，加入 OSG 库的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">win32:CONFIG(release, debug|release): LIBS += -L$$PWD/../../../OpenSceneGraph/lib/ -lOpenThreads -losg -losgDB -losgUtil -losgGA  -losgViewer -losgText</span><br><span class="line">else:win32:CONFIG(debug, debug|release): LIBS += -L$$PWD/../../../OpenSceneGraph/lib/ -lOpenThreadsd -losgd -losgDBd -losgUtild -losgGAd -losgViewerd -losgTextd</span><br><span class="line">else:unix: LIBS += -L$$PWD/../../../OpenSceneGraph/lib/ -lOpenThreads -losg -losgDB -losgUtil -losgGA -losgViewer -losgText</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD/../../../OpenSceneGraph/include</span><br><span class="line">DEPENDPATH += $$PWD/../../../OpenSceneGraph/lib</span><br></pre></td></tr></table></figure><p>main.cpp 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;osgViewer/Viewer&gt;</span><br><span class="line">#include &lt;osgDB/ReadFile&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    osgViewer::Viewer viewer;</span><br><span class="line">    viewer.setSceneData(osgDB::readNodeFile(&quot;cow.osg&quot;));</span><br><span class="line">    return viewer.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，出来一头 3D 牛，即配置成功。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a>,by 程序小哥.</li><li><a href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/">Qt5配置开源GSL数学库</a>,by jackhuang.</li><li><a href="https://huangwang.github.io/2019/09/14/Ubuntu16-04%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OSG/">Ubuntu16.04编译安装OSG</a>,by jackhuang.</li><li><a href="http://www.openscenegraph.org/index.php/documentation/platform-specifics/windows/37-visual-studio" target="_blank" rel="noopener">Windows Compiling with Visual Studio</a>,by OpenSceneGraph.</li><li><a href="https://huangwang.github.io/2018/06/21/Visual-Studio-Community-2017%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/">Visual_Studio_Community_2017离线安装</a>,by jackhuang.</li><li><a href="https://blog.csdn.net/u013745174/article/details/53691589" target="_blank" rel="noopener">Qt-Creator常见问题</a>,by XenonSec.</li><li><a href="https://stackoverflow.com/questions/31457306/visual-studio-msb3073-error-exited-with-code-1" target="_blank" rel="noopener">Visual Studio: MSB3073 error exited with code 1</a>,by stackoverflow.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近想尝试使用QT开发图形用户界面，OSG负责三维展示的解决方案，于是研究了一下Windows下OSG的编译安装配置，以及在QT中集成OSG的配置过程。过程记录如下：&lt;/p&gt;
&lt;h1 id=&quot;QT-OSG开发环境配置&quot;&gt;&lt;a href=&quot;#QT-OSG开发环境配置&quot; cla
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机图形学" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Windows忘记密码无法登录的解决方案</title>
    <link href="https://huangwang.github.io/2019/10/09/Windows%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://huangwang.github.io/2019/10/09/Windows忘记密码无法登录的解决方案/</id>
    <published>2019-10-09T04:09:44.000Z</published>
    <updated>2019-10-10T00:25:02.437Z</updated>
    
    <content type="html"><![CDATA[<p>突然需要在一台很久不用的Win7计算机上差一点资料，可忘记了登录密码，只能重置密码。过程记录如下：</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>借助手头的一张linux live cd，从光盘启动，进入linux系统，然后找到windows系统盘分区，在C:\Windows\System32下，将cmd.exe重命名为Magnify.exe，然后系统重启，登录Windows操作系统，在登录界面中，调用辅助工具放大镜，即打开命令提示符，输入如下命令重置Windows账户密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查看Windows账户</span><br><span class="line">net user</span><br><span class="line">// 修改Windows账户密码</span><br><span class="line">net user Administrator 123456</span><br><span class="line">// 重启系统用Administrator账户登录</span><br><span class="line">shutdown -r -t 00</span><br></pre></td></tr></table></figure><p>或者采用如下命令新建登录账户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建用户</span><br><span class="line">net user test 123456 /add</span><br><span class="line">// 用户提权，加入管理员组</span><br><span class="line">net localgroup Administrators test /add</span><br><span class="line">// 使用完删除用户</span><br><span class="line">net user test /delete</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/cx1990820/article/details/72628241" target="_blank" rel="noopener">关闭windows默认共享</a>,by Blue_sky90.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然需要在一台很久不用的Win7计算机上差一点资料，可忘记了登录密码，只能重置密码。过程记录如下：&lt;/p&gt;
&lt;h1 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h1&gt;&lt;p&gt;借助手头的
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机安全" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
    
      <category term="网络安全" scheme="https://huangwang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Qt5配置开源GSL数学库</title>
    <link href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/"/>
    <id>https://huangwang.github.io/2019/10/07/Qt5配置开源GSL数学库/</id>
    <published>2019-10-07T01:22:55.000Z</published>
    <updated>2019-11-15T02:19:55.390Z</updated>
    
    <content type="html"><![CDATA[<p>GNU科学库（英语：GSL - GNU Scientific Library），是一套为 C语言和 C++开发者提供的数值计算函数库，多用于应用数学和科学。软件属于自由软件，在 GNU 通用公共许可证下发布。</p><p>这套数值计算函数库提供了大量的数学运算功能，比如随机数生成器，特殊函数以及最小二乘拟合。有超过1000个函数包含在该数值计算库和扩展的测试包中。</p><p>下面介绍在Qt5环境中搭载GSL库的方法和步骤。</p><h1 id="下载并安装Qt5"><a href="#下载并安装Qt5" class="headerlink" title="下载并安装Qt5"></a>下载并安装Qt5</h1><p>下载Qt5请参考<a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>。<strong>将下载并安装Qt5.9.8 LTS。</strong></p><p>安装Qt5请参考<a href="http://c.biancheng.net/view/3858.html" target="_blank" rel="noopener">图解Qt安装（Windows平台）</a>。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="MinGW环境配置"><a href="#MinGW环境配置" class="headerlink" title="MinGW环境配置"></a>MinGW环境配置</h2><p>MinGW（Minimalist GNU for Windows），又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件（Win32API）、库和可执行文件。</p><p>另有可用于产生32位及64位Windows可执行文件的MinGW-w64项目，是从原本MinGW产生的分支。如今已经独立发展。</p><p>MinGW是从Cygwin（1.3.3版）基础上发展而来。Qt5.9.8使用MinGW 5.3编译器编译程序。</p><p>将mingw的bin目录添加进系统的环境变量，告诉系统已经安装了mingw编译器，并且可以被使用。Qt5自带的mingw的安装路径为C:\Qt\Qt5.9.8\5.9.8\mingw53_32，这里我们需要将C:\Qt\Qt5.9.8\5.9.8\mingw53_32\bin目录添加进入系统环境变量。</p><p>系统环境变量的设置方法为：【计算机】-&gt;【属性】-&gt;【高级系统设置】-&gt;【环境变量】-&gt;【系统变量】-&gt;【Path】。</p><h2 id="MSYS环境配置"><a href="#MSYS环境配置" class="headerlink" title="MSYS环境配置"></a>MSYS环境配置</h2><p>MSYS是bash，make，gawk和grep等GNU实用程序的集合，以允许构建依赖于传统UNIX工具的应用程序和程序。 它旨在补充MinGW和cmd shell的缺陷。</p><p>一个示例是构建一个使用自动工具构建系统的库。 用户通常会先运行“ ./configure”，然后运行“ make”来构建它。 配置外壳程序脚本需要Windows系统上不存在的外壳程序脚本解释器，但由MSYS提供。</p><p>一个常见的误解是MSYS是“ Windows上的UNIX”，MSYS本身不包含编译器或C库，因此不能将UNIX程序神奇地移植到Windows上，也不能提供任何特定于UNIX的功能，例如case- 敏感文件名。 寻找此类功能的用户应改用Cygwin或Microsoft的Interix。</p><p>msys的下载网址为：</p><p><a href="https://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/" target="_blank" rel="noopener">msys+7za+wget+svn+git+mercurial+cvs-rev13.7z</a></p><p>上述网址给出的是一个压缩包，直接解压就可以使用。</p><p>将msys+7za+wget+svn+git+mercurial+cvs-rev13.7z解压到C:\Qt\Qt5.9.8\5.9.8\mingw53_32。</p><p>仅将msys解压后并不能直接使用，因为对于msys而言，它还不知道mingw编译器所处位置，因此需要对msys的环境进行配置。首先需要在msys的路径下创建一个名为mingw的空文件夹，路径为C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys\mingw。然后修改<br>C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys\etc\fstab中的内容,如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/Qt/Qt5.9.8/Tools/mingw530_32 /mingw</span><br></pre></td></tr></table></figure><p>通过上述环境配置，当启动msys时，将Qt5的mingw编译直接挂载到/mingw目录下。</p><p>双击msys文件夹下msys.bat即可运行msys，使用cd命令进入/mingw目录下，我们就会发现此目录下文件就是C:\Qt\Qt5.9.8\Tools\mingw530_32对应的文件。</p><p>跳转到gsl-2.6文件夹，即可开始编译链接gsl。</p><h1 id="下载并编译安装GSL"><a href="#下载并编译安装GSL" class="headerlink" title="下载并编译安装GSL"></a>下载并编译安装GSL</h1><p>从此处 <a href="http://ftpmirror.gnu.org/gsl/" target="_blank" rel="noopener">http://ftpmirror.gnu.org/gsl/</a> 下载最新的GSL-2.6。然后采用如下步骤编译GSL：</p><ol><li>运行msys，进入GSL源文件所在目录</li><li>./configure</li><li>make -j8</li><li>make install</li></ol><h1 id="Qt调用GSL库"><a href="#Qt调用GSL库" class="headerlink" title="Qt调用GSL库"></a>Qt调用GSL库</h1><h2 id="创建Qt工程"><a href="#创建Qt工程" class="headerlink" title="创建Qt工程"></a>创建Qt工程</h2><p>为了测试GSL数学库能够在Qt环境中运行，新建一个控制台工程进行测试。</p><p>新建控制台应用程序的步骤为：【Welcome】-&gt;【New Project】-&gt;【Application】-&gt;【Qt Console Application】-&gt;【Choose】-&gt;【将工程命名为GslTest】。</p><h2 id="引用GSL库"><a href="#引用GSL库" class="headerlink" title="引用GSL库"></a>引用GSL库</h2><p>在GslTest项目的工程目录内，新建名为gsl的文件夹。该文件夹的内容如图1所示。</p><p></p><p align="center">    <img src="images/gsl.jpg" width="60%" alt="gsl文件夹结构"></p><p></p><center>图1 gsl文件夹结构</center><p>gsl文件夹下lib、include、bin中内容为编译安装GSL过程中生成的头文件、库文件及生成的相关exe文件，主要从C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys路径下提取。</p><p>此外，在gsl目录下新建gsl.pro文件，其内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 宏定义项，指明采用GSL，因为有些函数需要使用dll</span><br><span class="line">DEFINES += GSL_DLL</span><br><span class="line">INCLUDEPATH += $$PWD\include</span><br><span class="line">LIBS += -L$$PWD\lib -llibgsl</span><br><span class="line">LIBS += -L$$PWD\lib -llibgslcblas</span><br></pre></td></tr></table></figure><p>然后在GslTest的项目文件GslTest.pro末尾引用gsl.pro文件，如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include($$PWD/gsl/gsl.pro)</span><br></pre></td></tr></table></figure><h2 id="修改GslTest的main-cpp"><a href="#修改GslTest的main-cpp" class="headerlink" title="修改GslTest的main.cpp"></a>修改GslTest的main.cpp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QCoreApplication&gt;</span><br><span class="line">#include &lt;gsl/gsl_sf_bessel.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QCoreApplication a(argc, argv);</span><br><span class="line">    double x=10.0;</span><br><span class="line">    double y=gsl_sf_bessel_J0(x);</span><br><span class="line">    std::cout&lt;&lt;&quot;J0(&quot;&lt;&lt;x&lt;&lt;&quot;)=&quot;&lt;&lt;y&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行GslTest"><a href="#运行GslTest" class="headerlink" title="运行GslTest"></a>运行GslTest</h2><p></p><p align="center">    <img src="images/result.jpg" width="60%" alt="GslTest运行结果"></p><p></p><center>图2 GslTest运行结果</center><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>,by C语言中文网.</li><li><a href="http://c.biancheng.net/view/3858.html" target="_blank" rel="noopener">图解Qt安装（Windows平台）</a>,by C语言中文网.</li><li><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL - GNU Scientific Library</a>,by gnu.</li><li><a href="https://blog.csdn.net/xiaop5140/article/details/76712413" target="_blank" rel="noopener">QT5环境下配置GSL数学库</a>,by 木小猿.</li><li><a href="https://zh.wikipedia.org/wiki/GNU%E7%A7%91%E5%AD%A6%E5%BA%93" target="_blank" rel="noopener">GNU科学库</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/chenguolinblog/article/details/8164632" target="_blank" rel="noopener">【ICPC-455】C++ 常用数学函数库</a>,by 陈国林.</li><li><a href="https://zh.wikipedia.org/wiki/MinGW" target="_blank" rel="noopener">MinGW</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/FreeApe/article/details/50555003" target="_blank" rel="noopener">MinGW和MSYS区别和关系以及MinGW&amp;MSYS在Win7中安装并编译x264</a>,by FreeApe.</li><li><a href="https://blog.csdn.net/czyt1988/article/details/39178975" target="_blank" rel="noopener">最强数学库GSL(GNU Scientific Library) Qt环境下部署</a>,by 尘中远.</li><li><a href="https://blog.csdn.net/KirkSong/article/details/80874766" target="_blank" rel="noopener">Qt5.9.6使用MSVC（VS2017）开发环境搭建</a>,by KirkSong.</li><li><a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a>,by 程序小哥.</li><li><a href="https://github.com/ampl/gsl" target="_blank" rel="noopener">GSL with CMake build support</a>,by ampl.</li><li><a href="https://th0masxu.gq/index.php/archives/224" target="_blank" rel="noopener">在Visual Studio中使用GNU Scientific Library (GSL)</a>,by NULL_BOT.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GNU科学库（英语：GSL - GNU Scientific Library），是一套为 C语言和 C++开发者提供的数值计算函数库，多用于应用数学和科学。软件属于自由软件，在 GNU 通用公共许可证下发布。&lt;/p&gt;
&lt;p&gt;这套数值计算函数库提供了大量的数学运算功能，比如随
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
      <category term="Qt" scheme="https://huangwang.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>C++多继承的优缺点</title>
    <link href="https://huangwang.github.io/2019/10/05/CPlusPlus%E5%A4%9A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://huangwang.github.io/2019/10/05/CPlusPlus多继承的优缺点/</id>
    <published>2019-10-05T13:21:47.000Z</published>
    <updated>2019-10-05T13:40:20.160Z</updated>
    
    <content type="html"><![CDATA[<p>C++中子类可继承多个父类。多继承对父类的个数没有限制，继承方式可以是公共继承、保护继承和私有继承，不写继承方式，默认是private继承。C++多继承语法非常灵活，使用得当可极大提高编程效率，但同时不能其潜在的缺点：</p><ul><li>如果一个类继承多个父类，如果父类中的方法名如果相同，那么就会产生歧义。</li><li>如果父类中的方法同名，子类中没有覆盖，同样会产生上面的错误。</li></ul><p>针对上述缺点，C#和Java中都不支持类多继承，而是使用类单继承和接口多继承设计替代类多继承。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/leotsai/p/csharp-multi-inheritance.html" target="_blank" rel="noopener">论C#之多继承</a>,by Leo.</li><li><a href="https://www.zhihu.com/question/20149818" target="_blank" rel="noopener">接口和抽象类有什么区别？</a>,by zhihu.</li><li><a href="https://blog.csdn.net/fengzijinliang/article/details/51439368" target="_blank" rel="noopener">java类单继承，接口多继承设计的原因</a>,by xiaoxiang-chen.</li><li><a href="https://blog.csdn.net/hudfang/article/details/50556277" target="_blank" rel="noopener">C++学习之继承篇（多继承与多重继承）</a>,by hudfang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++中子类可继承多个父类。多继承对父类的个数没有限制，继承方式可以是公共继承、保护继承和私有继承，不写继承方式，默认是private继承。C++多继承语法非常灵活，使用得当可极大提高编程效率，但同时不能其潜在的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个类继承多个父类，如果
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
</feed>
