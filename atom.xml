<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-08-17T10:12:58.853Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关系数据库中存储树结构及前端还原的方法</title>
    <link href="https://huangwang.github.io/2019/08/17/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%82%A8%E6%A0%91%E7%BB%93%E6%9E%84%E5%8F%8A%E5%89%8D%E7%AB%AF%E8%BF%98%E5%8E%9F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/08/17/关系数据库中存储树结构及前端还原的方法/</id>
    <published>2019-08-17T00:04:48.000Z</published>
    <updated>2019-08-17T10:12:58.853Z</updated>
    
    <content type="html"><![CDATA[<p>树形结构很常见，例如组织结构图、线性化讨论等。树形结构中，实例被称为节点（node），每个节点有多个子节点和一个父节点。最上层的节点叫根（root）节点，它没有父节点。最底层的节点叫叶（leaf）节点，它没有子节点。本文主要介绍如何在关系数据库中存储树结构，以及如何从关系数据库中恢复树结构。</p><h1 id="关系数据库中存储树结构的方法"><a href="#关系数据库中存储树结构的方法" class="headerlink" title="关系数据库中存储树结构的方法"></a>关系数据库中存储树结构的方法</h1><h2 id="层级数据设计方案"><a href="#层级数据设计方案" class="headerlink" title="层级数据设计方案"></a>层级数据设计方案</h2><p>在关系数据库中存储树结构主要有以下几种方案：</p><ul><li>邻接表模型</li></ul><p>最常见的解决方案，在数据库表中添加parent_id字段，再引用同一张表中的其他记录的id。可通过一个外键约束维护这种关系。</p><p>优点：增加叶节点、修改节点或子树位置很方便。</p><p>缺点：查询节点的所有后代、删除子树很困难。</p><ul><li>路径枚举</li></ul><p>路径枚举是一个由连续的直接层级关系组成的完整路径。例如/usr/local/lib。</p><p>优点：查询节点所有后代、插入新节点很方便。<br>缺点：依赖应用程序逻辑代码维护路径字符串，验证字符串正确性开销大。受限于字符串长度，树结构无法无限扩展。</p><ul><li>嵌套集</li></ul><p>嵌套集解决方案是存储子孙节点的相关信息，而不是节点的直接祖先。通常使用两个数字nsleft和nsright编码每个节点，以表示子孙节点信息。</p><p>nsleft的数值小于该节点所有后代的ID，同时nsright的值大于该节点所有后代的ID。</p><p>确定这三个值（nsleft，ID，nsright）的简单方法是对树进行一次深度优先遍历，在逐层深入过程中依次递增地分配nsleft的值，并在返回时依次递增地分配nsright的值。</p><p>优点：查询给定节点祖先和后代很容易，删除非叶子节点，其后代会自动代替被删除节点成为其祖先节点的直接后代。</p><p>缺点：不易理解，插入和移动节点复杂。</p><ul><li>闭包表</li></ul><p>闭包表通过额外的数据库表记录树中节点间父子的关系，包括直接的父子关系、间接的父子关系和指向自己的关系。</p><h2 id="层级数据设计比较"><a href="#层级数据设计比较" class="headerlink" title="层级数据设计比较"></a>层级数据设计比较</h2><center>层级数据设计比较</center><div class="table-container"><table><thead><tr><th>设计</th><th>表</th><th>查询子</th><th>查询树</th><th>插入</th><th>删除</th><th>引用完整性</th></tr></thead><tbody><tr><td>邻接表</td><td>1</td><td>简单</td><td>困难</td><td>简单</td><td>简单</td><td>是</td></tr><tr><td>邻接表+递归查询</td><td>1</td><td>简单</td><td>简单</td><td>简单</td><td>简单</td><td>否</td></tr><tr><td>路径枚举</td><td>1</td><td>简单</td><td>简单</td><td>简单</td><td>简单</td><td>否</td></tr><tr><td>嵌套集</td><td>1</td><td>困难</td><td>简单</td><td>困难</td><td>困难</td><td>否</td></tr><tr><td>闭包集</td><td>2</td><td>简单</td><td>简单</td><td>简单</td><td>简单</td><td>是</td></tr></tbody></table></div><ul><li>邻接表设计最简单，如果使用的数据库支持WITH或CONNECT BY PRIOR的递归查询，将使得邻接表查询更为高效。</li></ul><h1 id="前端从关系数据库中还原树结构"><a href="#前端从关系数据库中还原树结构" class="headerlink" title="前端从关系数据库中还原树结构"></a>前端从关系数据库中还原树结构</h1><p>表结构，使用sequelize的对象表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">module.exports = (sequelize, DataTypes) =&gt; &#123;</span><br><span class="line">  const Role = sequelize.define(&apos;Role&apos;, &#123;</span><br><span class="line">    id: &#123;</span><br><span class="line">      type: DataTypes.STRING(50),</span><br><span class="line">      primaryKey: true</span><br><span class="line">    &#125;,</span><br><span class="line">    roleName: &#123;</span><br><span class="line">      type: DataTypes.STRING(128),</span><br><span class="line">      allowNull: false</span><br><span class="line">    &#125;,</span><br><span class="line">    path: &#123;</span><br><span class="line">      type: DataTypes.STRING(512),</span><br><span class="line">      allowNull: false,</span><br><span class="line">      unique: true,</span><br><span class="line">      comment: &apos;角色路径唯一！&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteFlag:&#123;</span><br><span class="line">      type: DataTypes.BOOLEAN,</span><br><span class="line">      defaultValue: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  Role.associate = function(models) &#123;</span><br><span class="line">    // associations can be defined here</span><br><span class="line">    Role.hasMany(models.User)</span><br><span class="line">  &#125;;</span><br><span class="line">  return Role;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>递归生成角色树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 获取第一层节点</span><br><span class="line">function getFirstLevel(recordList)&#123;</span><br><span class="line">    var firstLevelList=[];</span><br><span class="line">    for(let i=0;i&lt; recordList.length;i++)&#123;</span><br><span class="line">        let record=recordList[i]</span><br><span class="line">        if (record.path.length === 2 &amp;&amp; record.path.split(&apos;&apos;)[1] === &apos;/&apos; &amp;&amp; parseInt(record.path.split(&apos;&apos;)[0])&gt;=0)&#123;</span><br><span class="line">            record.label=record.roleName</span><br><span class="line">            firstLevelList.push(record)</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    return firstLevelList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指定根节点，递归生成角色树</span><br><span class="line">function recursiveTree(parentRecord,recordList)&#123;</span><br><span class="line">    for (let i = 0; i &lt; recordList.length; i++)&#123;</span><br><span class="line">        let record = recordList[i]</span><br><span class="line">        if(parentRecord.path==record.path.slice(0,-2))&#123;</span><br><span class="line">            record=recursiveTree(record,recordList)</span><br><span class="line">            if (parentRecord.children==undefined)&#123;</span><br><span class="line">                parentRecord.children=[]</span><br><span class="line">            &#125;</span><br><span class="line">            parentRecord.children.push(record)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    parentRecord.label = parentRecord.roleName</span><br><span class="line">    return parentRecord</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生成角色树</span><br><span class="line">export function parseRoleTree(recordList)&#123;</span><br><span class="line">    var result = getFirstLevel(recordList);</span><br><span class="line"></span><br><span class="line">    for (let i=0;i&lt;result.length;i++)&#123;</span><br><span class="line">        parent = result[i]</span><br><span class="line">        parent = recursiveTree(parent, recordList)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/LDY1016/article/details/85784001" target="_blank" rel="noopener">java递归生成树形结构菜单</a>,by 伊宇紫.</li><li>Bill Karwin著,谭振林,Push Chen译. SQL反模式[M].人民邮电出版社.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树形结构很常见，例如组织结构图、线性化讨论等。树形结构中，实例被称为节点（node），每个节点有多个子节点和一个父节点。最上层的节点叫根（root）节点，它没有父节点。最底层的节点叫叶（leaf）节点，它没有子节点。本文主要介绍如何在关系数据库中存储树结构，以及如何从关系数
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数据库" scheme="https://huangwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>网页布局方法入门</title>
    <link href="https://huangwang.github.io/2019/08/10/%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/08/10/网页布局方法入门/</id>
    <published>2019-08-10T00:56:46.000Z</published>
    <updated>2019-08-11T13:14:31.528Z</updated>
    
    <content type="html"><![CDATA[<p>使用CSS对网页布局进行设计是前端工程师的重要工作。下面即介绍各种CSS网页布局的方法，以及相应的技术。</p><h1 id="居中方法"><a href="#居中方法" class="headerlink" title="居中方法"></a>居中方法</h1><p>居中在布局中很常见，假设DOM文档结构如下，子元素要在父元素中居中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><p>子元素为行内元素还是块状元素，宽度一定还是宽度未定，采取的布局方案不同。以下即根据子元素的类型给出对应水平居中方法：</p><ul><li><strong>行内元素</strong>：对父元素设置text-align:center;</li><li><strong>定宽块状元素</strong>: 设置左右margin值为auto;</li><li><strong>不定宽块状元素</strong>: 设置子元素为display:inline,然后在父元素上设置text-align:center;</li><li><strong>通用方案</strong>: flex布局，对父元素设置display:flex;justify-content:center;</li></ul><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>垂直居中对于子元素是单行内联文本、多行内联文本以及块状元素采用的方案是不同的。具体方法如下：</p><ul><li><strong>父元素一定，子元素为单行内联文本</strong>：设置父元素的height等于行高line-height</li><li><strong>父元素一定，子元素为多行内联文本</strong>：设置父元素的display:table-cell或inline-block，再设置vertical-align:middle;</li><li><strong>块状元素</strong>:设置子元素position:absolute 并设置top、bottom为0，父元素要设置定位为static以外的值，margin:auto;</li></ul><h1 id="单列布局"><a href="#单列布局" class="headerlink" title="单列布局"></a>单列布局</h1><p>单列布局如图1所示，可分成两种类型，有定宽、水平居中的特点。</p><ul><li>一种是header、content、footer宽度都相同，其一般不会占满浏览器的最宽宽度，但当浏览器宽度缩小低于其最大宽度时，宽度会自适应。</li><li>一种是header、footer宽度为浏览器宽度，但content以及header和footer里的内容却不会占满浏览器宽度。</li></ul><center>![单列布局的两种形式](https://pic4.zhimg.com/80/v2-12cd0eddc97721987b9f6e41e5a1fc4b_hd.png "单列布局的两种形式")图1  单列布局的两种形式</center><p>对于第一种，对header、content、footer统一设置width或max-width，并通过margin:auto实现居中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;header&quot;&gt;头部&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;content&quot;&gt;内容&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;footer&quot;&gt;尾部&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.layout&#123;</span><br><span class="line">  /*   width: 960px; *//*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span><br><span class="line">    max-width: 960px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对于第二种，header、footer的内容宽度为100%，但header、footer的内容区以及content统一设置width 或 max-width，并通过margin:auto实现居中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;header&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;layout&quot;&gt;头部&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;content&quot; class=&quot;layout&quot;&gt;内容&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;footer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;layout&quot;&gt;尾部&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.layout&#123;</span><br><span class="line">  /*   width: 960px; *//*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span><br><span class="line">    max-width: 960px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="二列-amp-三列布局"><a href="#二列-amp-三列布局" class="headerlink" title="二列&amp;三列布局"></a>二列&amp;三列布局</h1><p><strong>二列布局的特征是侧栏固定宽度，主栏自适应宽度。三列布局的特征是两侧两列固定宽度，中间列自适应宽度。</strong> 之所以将二列布局和三列布局写在一起，是因为二列布局可以看做去掉一个侧栏的三列布局，其布局的思想有异曲同工之妙。</p><p>对于传统的实现方法，主要讨论上图2中前三种布局，经典的带有侧栏的二栏布局以及带有左右侧栏的三栏布局。使用flex技术，可实现图2的五种布局。</p><center>![二列&三列布局](https://pic2.zhimg.com/80/v2-784022577a47ea5fc449b06de53c4651_hd.png "二列&三列布局")图2  二列&三列布局</center><p>实现二列&amp;三列布局的CSS技术主要有：</p><h2 id="float-margin"><a href="#float-margin" class="headerlink" title="float+margin"></a>float+margin</h2><p>原理说明：设置两个侧栏分别向左向右浮动，中间列通过外边距给两个侧栏腾出空间，中间列的宽度根据浏览器窗口自适应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;sub&quot;&gt;sub&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;extra&quot;&gt;extra&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.sub&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.extra&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    float: right;</span><br><span class="line">&#125;</span><br><span class="line">.main&#123;</span><br><span class="line">    margin-left: 100px; </span><br><span class="line">    margin-right: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>DOM文档的书写顺序，先写两侧栏，再写主面板，更换后则侧栏会被挤到下一列（圣杯布局和双飞翼布局都会用到）。 　</li><li>这种布局方式比较简单明了，但缺点是渲染时先渲染了侧边栏，而不是比较重要的主面板。</li></ul><h2 id="position-margin"><a href="#position-margin" class="headerlink" title="position+margin"></a>position+margin</h2><p>原理说明：通过绝对定位将两个侧栏固定，同样通过外边距给两个侧栏腾出空间，中间列自适应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;sub&quot;&gt;left&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;extra&quot;&gt;right&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.sub, .extra &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0; </span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.sub &#123; </span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.extra &#123; </span><br><span class="line">    right: 0; </span><br><span class="line">&#125;</span><br><span class="line">.main &#123; </span><br><span class="line">    margin: 0 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>本方法不限制DOM书写顺序，先写主面板会使主面板部分优先渲染（一般主面板会比侧栏内容重要）。</li><li>与上一种方法相比，本种方法是通过定位来实现侧栏的位置固定。</li><li>如果中间栏含有最小宽度限制，或是含有宽度的内部元素，则浏览器窗口小到一定程度，主面板与侧栏会发生重叠。</li></ul><h2 id="圣杯布局-float-负margin"><a href="#圣杯布局-float-负margin" class="headerlink" title="圣杯布局(float + 负margin)"></a>圣杯布局(float + 负margin)</h2><p>原理说明：</p><p>主面板设置宽度为100%，主面板与两个侧栏都设置浮动，常见为左浮动，这时两个侧栏会被主面板挤下去。通过负边距将浮动的侧栏拉上来，左侧栏的负边距为100%，刚好是窗口的宽度，因此会从主面板下面的左边跑到与主面板对齐的左边，右侧栏此时浮动在主面板下面的左边，设置负边距为负的自身宽度刚好浮动到主面板对齐的右边。为了避免侧栏遮挡主面板内容，在外层设置左右padding值为左右侧栏的宽度，给侧栏腾出空间，此时主面板的宽度减小。由于侧栏的负margin都是相对主面板的，两个侧栏并不会像我们理想中的停靠在左右两边，而是跟着缩小的主面板一起向中间靠拢。此时使用相对布局，调整两个侧栏到相应的位置。</p><h2 id="双飞翼布局-float-负margin"><a href="#双飞翼布局-float-负margin" class="headerlink" title="双飞翼布局(float + 负margin )"></a>双飞翼布局(float + 负margin )</h2><p>原理说明：</p><p>双飞翼布局和圣杯布局的思想有些相似，都利用了浮动和负边距，但双飞翼布局在圣杯布局上做了改进，在main元素上加了一层div, 并设置margin,由于两侧栏的负边距都是相对于main-wrap而言，main的margin值变化便不会影响两个侧栏，因此省掉了对两侧栏设置相对布局的步骤。</p><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>与之前所讲的几种传统布局方案相比，flex布局的代码可谓异常简洁，而且非常通用，利用简单的三行CSS即实现了常见的五种布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;主内容栏宽度自适应&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;主内容栏宽度自适应&lt;/div&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;左侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;主内容栏宽度自适应&lt;/div&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;右侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;第1个侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;第2个侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;主内容栏宽度自适应&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;主内容栏宽度自适应&lt;/div&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;第1个侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">    &lt;aside class=&quot;aside&quot;&gt;第2个侧边栏宽度固定&lt;/aside&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.layout &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">.aside &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自适应与响应式布局"><a href="#自适应与响应式布局" class="headerlink" title="自适应与响应式布局"></a>自适应与响应式布局</h1><p>自适应是为了解决如何才能在不同大小的设备上呈现同样的网页，实现一次设计，普遍适用而提出的技术，以避免维护多个版本的针对不同分辨率设备的网页。</p><p>但自适应存在一个问题，如果屏幕太小，即使网页能够根据屏幕大小进行适配，但是会感觉在小屏幕上查看，内容过于拥挤。响应式正是为了解决这个问题而衍生出来的概念。它可以自动识别屏幕宽度、并做出相应调整的网页设计，布局和展示的内容可能会有所变动。</p><p>目前网页的响应式布局解决方案成为当前主流，并因 twitter 开源的 bootstrap 而被大家熟知。响应式布局的实现原理如下：</p><ul><li>允许网页宽度自动调整</li></ul><p>网页代码的头部，加入一行viewport元标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;</span><br></pre></td></tr></table></figure><p>viewport是网页默认的宽度和高度，上面这行代码的意思是，网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。</p><ul><li>尽量少使用绝对宽度</li></ul><p>由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用具有绝对宽度的元素。这一条非常重要。具体说，CSS代码不能指定像素宽度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width:xxx px;</span><br></pre></td></tr></table></figure><p>通过指定百分比宽度来替代：同时还可以配合css的cal，进行计算宽度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width: xx%;</span><br><span class="line">width:auto;</span><br></pre></td></tr></table></figure></p><ul><li>相对大小的字体</li></ul><p>字体也不能使用绝对大小（px），而只能使用相对大小（em）或者高清方案（rem）,rem不局限于字体大小，前面的宽度width也可以使用，代替百分比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  font: normal 100% Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码指定，字体大小是页面默认大小的100%，即16像素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">　　font-size: 1.5em; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，h1的大小是默认大小的1.5倍，即24像素（24/16=1.5）。</p><ul><li>流动布局（fluid grid）</li></ul><p>“流动布局”的含义是，各个区块的位置都是浮动的，不是固定不变的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.main &#123;</span><br><span class="line">　　float: right;</span><br><span class="line">　　width: 70%; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.leftBar &#123;</span><br><span class="line">　　float: left;</span><br><span class="line">　　width: 25%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>float的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。</p><ul><li>选择加载CSS</li></ul><p>“自适应网页设计”的核心，就是CSS3引入的Media Query模块。</p><p>它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;</span><br><span class="line">　　　　media=&quot;screen and (max-device-width: 400px)&quot;</span><br><span class="line">　　　　href=&quot;tinyScreen.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;</span><br><span class="line">　　　　media=&quot;screen and (min-width: 400px) and (max-device-width: 600px)&quot;</span><br><span class="line">　　　　href=&quot;smallScreen.css&quot; /&gt;</span><br></pre></td></tr></table></figure><p>除了用html标签加载CSS文件，还可以在现有CSS文件中加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import  url(&quot;tinyScreen.css&quot;) screen and (max-device-width: 400px);</span><br></pre></td></tr></table></figure><ul><li>CSS的@media规则</li></ul><p>同一个CSS文件中，也可以根据不同的屏幕分辨率，选择应用不同的CSS规则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@media  screen and (max-device-width: 400px) &#123;</span><br><span class="line">　　.column &#123;</span><br><span class="line">　　　　float: none;</span><br><span class="line">　　　　width:auto;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　#sidebar &#123;</span><br><span class="line">　　　　display:none;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>图片的自适应（fluid image）</li></ul><p>除了布局和文本，”自适应网页设计”还必须实现图片的自动缩放。这只要一行CSS代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img &#123; max-width: 100%;&#125;</span><br></pre></td></tr></table></figure><h1 id="布局相关CSS"><a href="#布局相关CSS" class="headerlink" title="布局相关CSS"></a>布局相关CSS</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>display CSS 属性指定了元素的显示类型，它包含两类基础特征，用于指定元素怎样生成盒模型——<strong>外部显示类型</strong>定义了元素怎样参与流式布局的处理，<strong>内部显示类型</strong>定义了元素内子元素的布局方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/* &lt;display-outside&gt; values */</span><br><span class="line">display: block;</span><br><span class="line">display: inline;</span><br><span class="line">display: run-in;</span><br><span class="line"></span><br><span class="line">/* &lt;display-inside&gt; values */</span><br><span class="line">display: flow;</span><br><span class="line">display: flow-root;</span><br><span class="line">display: table;</span><br><span class="line">display: flex;</span><br><span class="line">display: grid;</span><br><span class="line">display: ruby;</span><br><span class="line"></span><br><span class="line">/* &lt;display-outside&gt; plus &lt;display-inside&gt; values */</span><br><span class="line">display: block flow;</span><br><span class="line">display: inline table;</span><br><span class="line">display: flex run-in;</span><br><span class="line"></span><br><span class="line">/* &lt;display-listitem&gt; values */</span><br><span class="line">display: list-item;</span><br><span class="line">display: list-item block;</span><br><span class="line">display: list-item inline;</span><br><span class="line">display: list-item flow;</span><br><span class="line">display: list-item flow-root;</span><br><span class="line">display: list-item block flow;</span><br><span class="line">display: list-item block flow-root;</span><br><span class="line">display: flow list-item block;</span><br><span class="line"></span><br><span class="line">/* &lt;display-internal&gt; values */</span><br><span class="line">display: table-row-group;</span><br><span class="line">display: table-header-group;</span><br><span class="line">display: table-footer-group;</span><br><span class="line">display: table-row;</span><br><span class="line">display: table-cell;</span><br><span class="line">display: table-column-group;</span><br><span class="line">display: table-column;</span><br><span class="line">display: table-caption;</span><br><span class="line">display: ruby-base;</span><br><span class="line">display: ruby-text;</span><br><span class="line">display: ruby-base-container;</span><br><span class="line">display: ruby-text-container;</span><br><span class="line"></span><br><span class="line">/* &lt;display-box&gt; values */</span><br><span class="line">display: contents;</span><br><span class="line">display: none;</span><br><span class="line"></span><br><span class="line">/* &lt;display-legacy&gt; values */</span><br><span class="line">display: inline-block;</span><br><span class="line">display: inline-table;</span><br><span class="line">display: inline-flex;</span><br><span class="line">display: inline-grid;</span><br><span class="line"></span><br><span class="line">/* Global values */</span><br><span class="line">display: inherit;</span><br><span class="line">display: initial;</span><br><span class="line">display: unset;</span><br></pre></td></tr></table></figure><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。position 属性被指定为从下面的值列表中选择的单个关键字：</p><ul><li>static</li></ul><p>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p><ul><li>relative</li></ul><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p><ul><li>absolute</li></ul><p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><ul><li>fixed</li></ul><p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。</p><ul><li>sticky </li></ul><p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性（与绝对定位相反）。float 属性的值被指定为单一的关键字，值从下面的值列表中选择:</p><ul><li>left</li></ul><p>表明元素必须浮动在其所在的块容器左侧的关键字。</p><ul><li>right</li></ul><p>表明元素必须浮动在其所在的块容器右侧的关键字。</p><ul><li>none</li></ul><p>表明元素不进行浮动的关键字。</p><ul><li>inline-start</li></ul><p>关键字，表明元素必须浮动在其所在块容器的开始一侧，在ltr脚本中是左侧，在rtl脚本中是右侧。</p><ul><li>inline-end</li></ul><p>关键字，表明元素必须浮动在其所在块容器的结束一侧，在ltr脚本中是右侧，在rtl脚本中是左侧。</p><p>float属性具有<strong>包裹性和高度欺骗</strong>两个特性。</p><h3 id="包裹性"><a href="#包裹性" class="headerlink" title="包裹性"></a>包裹性</h3><p>block元素不指定width的话，默认是100%，一旦让该div浮动起来，立刻会像inline元素一样产生包裹性，宽度会跟随内容自适应。（这也是通常float元素需要手动指定width的原因）。</p><center>![float的包裹性](https://upload-images.jianshu.io/upload_images/1959053-1b1dda5d416c60eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/395/format/webp "float的包裹性")图3  float的包裹性</center><p>效果非常近似于display:inline-block。但相比之下，浮动能设定为左浮和右浮，但display:inline-block都是从左到右排列的。（还有些细微差别，两个display:inline-block间会有空隙，但两个float间没有。）</p><h3 id="高度欺骗性"><a href="#高度欺骗性" class="headerlink" title="高度欺骗性"></a>高度欺骗性</h3><center>![float的高度欺骗性](https://upload-images.jianshu.io/upload_images/1959053-5170f426197de08b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/394/format/webp "float的高度欺骗性")图4  float的高度欺骗性</center><p>外层div在没有手动设定height的前提下，其高度是由内部content的最大高度决定的，由于img的float使得img具有高度塌陷的欺骗性，让div误以为img的line-height为0，因此div的高度就是文字的匿名inline-box的inline-height。</p><h3 id="闭合浮动"><a href="#闭合浮动" class="headerlink" title="闭合浮动"></a>闭合浮动</h3><p>闭合浮动的实现方法很多，最合理的方法是用:after伪元素，思路是用:after元素在div后面插入一个隐藏文本”.”，隐藏文本用clear来实现闭合浮动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">    content: &quot;.&quot;;   //你头可以改成其他任意文本如“abc”</span><br><span class="line">    display: block;</span><br><span class="line">    height: 0;      //高度为0且hidden让该文本彻底隐藏</span><br><span class="line">    visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;border:4px solid blue;&quot; class=&quot;clearfix&quot;&gt;</span><br><span class="line">    &lt;div style=&quot;width:200px; border:4px solid red; float:left;&quot;&gt;</span><br><span class="line">        我是浮动元素1</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;width:200px; border:4px solid yellow; float:left;&quot;&gt;</span><br><span class="line">        我是浮动元素2</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;border:4px solid gray;&quot;&gt;我是页脚&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/25565751" target="_blank" rel="noopener">CSS布局十八般武艺都在这里了</a>,by Shelley Lee.</li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">Flex 布局教程：语法篇</a>,by 阮一峰.</li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">Flex 布局教程：实例篇</a>,by 阮一峰.</li><li><a href="http://www.ruanyifeng.com/blog/2018/10/flexbox-form.html" target="_blank" rel="noopener">Flexbox 布局的最简单表单</a>,by 阮一峰.</li><li><a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html" target="_blank" rel="noopener">自适应网页设计（Responsive Web Design）</a>,by 阮一峰.</li><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid 网格布局教程</a>,by 阮一峰.</li><li><a href="https://juejin.im/entry/58b6414a128fe1006421bfa7" target="_blank" rel="noopener">响应式和自适应的区别</a>,by LorinLuo.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener">display</a>,by mozilla.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener">position</a>,by mozilla.</li><li><a href="https://www.jianshu.com/p/07eb19957991" target="_blank" rel="noopener">CSS浮动float详解</a>,by 张歆琳.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/float" target="_blank" rel="noopener">float</a>,by mozilla.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用CSS对网页布局进行设计是前端工程师的重要工作。下面即介绍各种CSS网页布局的方法，以及相应的技术。&lt;/p&gt;
&lt;h1 id=&quot;居中方法&quot;&gt;&lt;a href=&quot;#居中方法&quot; class=&quot;headerlink&quot; title=&quot;居中方法&quot;&gt;&lt;/a&gt;居中方法&lt;/h1&gt;&lt;p&gt;居中
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Mockjs入门简介</title>
    <link href="https://huangwang.github.io/2019/08/09/Mockjs%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/08/09/Mockjs入门简介/</id>
    <published>2019-08-09T03:14:04.000Z</published>
    <updated>2019-08-09T03:27:51.231Z</updated>
    
    <content type="html"><![CDATA[<p>Mock.js可生成随机数据，拦截Ajax请求，实现前后端分离的目的。Mockjs支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等数据类型，增加了单元测试的真实性，具有用法简单，方便扩展和开发无侵入的特点。下面简单介绍Mockjs的用法。</p><h1 id="开始-amp-安装"><a href="#开始-amp-安装" class="headerlink" title="开始 &amp; 安装"></a>开始 &amp; 安装</h1><h2 id="Node-CommonJS"><a href="#Node-CommonJS" class="headerlink" title="Node (CommonJS)"></a>Node (CommonJS)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 使用 Mock</span><br><span class="line">var Mock = require(&apos;mockjs&apos;)</span><br><span class="line">var data = Mock.mock(&#123;</span><br><span class="line">    // 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span><br><span class="line">    &apos;list|1-10&apos;: [&#123;</span><br><span class="line">        // 属性 id 是一个自增数，起始值为 1，每次增 1</span><br><span class="line">        &apos;id|+1&apos;: 1</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">// 输出结果</span><br><span class="line">console.log(JSON.stringify(data, null, 4))</span><br></pre></td></tr></table></figure><h1 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h1><p>Mock.js 的语法规范包括两部分：</p><ul><li>数据模板定义规范（Data Template Definition，DTD）</li><li>数据占位符定义规范（Data Placeholder Definition，DPD）</li></ul><h2 id="数据模板定义规范-DTD"><a href="#数据模板定义规范-DTD" class="headerlink" title="数据模板定义规范 DTD"></a>数据模板定义规范 DTD</h2><p>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 属性名   name</span><br><span class="line">// 生成规则 rule</span><br><span class="line">// 属性值   value</span><br><span class="line">&apos;name|rule&apos;: value</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>属性名 和 生成规则 之间用竖线 | 分隔。</li><li>生成规则 是可选的。</li><li>生成规则 有 7 种格式：<ul><li>‘name|min-max’: value</li><li>‘name|count’: value</li><li>‘name|min-max.dmin-dmax’: value</li><li>‘name|min-max.dcount’: value</li><li>‘name|count.dmin-dmax’: value</li><li>‘name|count.dcount’: value</li><li>‘name|+step’: value</li></ul></li><li>生成规则 的 含义 需要依赖 属性值的类型 才能确定。</li><li>属性值 中可以含有 @占位符。</li><li>属性值 还指定了最终值的初始值和类型。</li></ul><h2 id="数据占位符定义规范-DPD"><a href="#数据占位符定义规范-DPD" class="headerlink" title="数据占位符定义规范 DPD"></a>数据占位符定义规范 DPD</h2><p>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。</p><p>占位符 的格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@占位符</span><br><span class="line">@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>用 @ 来标识其后的字符串是 占位符。</li><li>占位符 引用的是 Mock.Random 中的方法。</li><li>通过 Mock.Random.extend() 来扩展自定义占位符。</li><li>占位符 也可以引用 数据模板 中的属性。</li><li>占位符 会优先引用 数据模板 中的属性。</li><li>占位符 支持 相对路径 和 绝对路径。</li></ul><h1 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock.Random"></a>Mock.Random</h1><p>Mock.Random 是一个工具类，用于生成各种随机数据。</p><p><strong>Mock.Random 的方法在数据模板中称为『占位符』，书写格式为 @占位符(参数 [, 参数]) 。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Random = Mock.Random</span><br><span class="line">Random.email()</span><br><span class="line">// =&gt; &quot;n.clark@miller.io&quot;</span><br><span class="line">Mock.mock(&apos;@email&apos;)</span><br><span class="line">// =&gt; &quot;y.lee@lewis.org&quot;</span><br><span class="line">Mock.mock( &#123; email: &apos;@email&apos; &#125; )</span><br><span class="line">// =&gt; &#123; email: &quot;v.lewis@hall.gov&quot; &#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mockjs</a>,by nuysoft.</li><li><a href="https://github.com/nuysoft/Mock/wiki/Syntax-Specification" target="_blank" rel="noopener">Mockjs语法规范</a>,by nuysoft.</li><li><a href="https://github.com/nuysoft/Mock/wiki/Mock.Random" target="_blank" rel="noopener">Mock.Random</a>,by nuysoft.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mock.js可生成随机数据，拦截Ajax请求，实现前后端分离的目的。Mockjs支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等数据类型，增加了单元测试的真实性，具有用法简单，方便扩展和开发无侵入的特点。下面简单介绍Mockjs的用法。&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式简介</title>
    <link href="https://huangwang.github.io/2019/08/06/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/08/06/软件设计模式简介/</id>
    <published>2019-08-06T15:25:47.000Z</published>
    <updated>2019-08-06T15:28:44.745Z</updated>
    
    <content type="html"><![CDATA[<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。下面重点介绍各种经典的设计模式。</p><ul><li>创建型模式<ol><li>简单工厂模式( Simple Factory Pattern )</li><li>工厂方法模式(Factory Method Pattern)</li><li>抽象工厂模式(Abstract Factory)</li><li>建造者模式</li><li>单例模式</li></ol></li><li>结构型模式<ol><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ol></li><li>行为型模式<ol><li>命令模式</li><li>中介者模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li></ol></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">图说设计模式</a>,by me115.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。下面重点介绍各种经典的设计模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>UML类图中类之间关系</title>
    <link href="https://huangwang.github.io/2019/08/06/UML%E7%B1%BB%E5%9B%BE%E4%B8%AD%E7%B1%BB%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB/"/>
    <id>https://huangwang.github.io/2019/08/06/UML类图中类之间关系/</id>
    <published>2019-08-06T14:40:17.000Z</published>
    <updated>2019-08-06T15:17:11.106Z</updated>
    
    <content type="html"><![CDATA[<p>UML类图中类之间的关系主要有六种：泛化、实现、聚合、组合、依赖、关联。如图1所示。</p><center>![UML类图](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg "UML类图")</center><ul><li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；</abstract></li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li><li>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为关联关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li></ul><p>熟悉这六种关系及其符号表示，有利于我们设计类图和同行之间交流。下面介绍这六种关系。</p><h1 id="泛化关系-generalization"><a href="#泛化关系-generalization" class="headerlink" title="泛化关系(generalization)"></a>泛化关系(generalization)</h1><p>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：</p><p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p><p>例如：自行车是车、猫是动物。</p><p>泛化关系用一条带空心箭头的直接表示；如下图表示；</p><center>![泛化关系](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalize.jpg)</center><p>汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；<strong>最终代码中，泛化关系表现为继承非抽象类；</strong></p><h1 id="实现关系-realize"><a href="#实现关系-realize" class="headerlink" title="实现关系(realize)"></a>实现关系(realize)</h1><p>实现关系用一条带空心箭头的虚线表示；</p><p>例如：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）</p><center>![实现关系](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_realize.jpg)</center><p><strong>最终代码中，实现关系表现为继承抽象类；</strong></p><h1 id="聚合关系-aggregation"><a href="#聚合关系-aggregation" class="headerlink" title="聚合关系(aggregation)"></a>聚合关系(aggregation)</h1><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p><center>![聚合关系](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_aggregation.jpg)</center><p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p><p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p><h1 id="组合关系-composition"><a href="#组合关系-composition" class="headerlink" title="组合关系(composition)"></a>组合关系(composition)</h1><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p><center>![组合关系](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_composition.jpg)</center><p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p><p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p><h1 id="关联关系-association"><a href="#关联关系-association" class="headerlink" title="关联关系(association)"></a>关联关系(association)</h1><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p><p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p><p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A<br>知道B，但 B不知道A；</p><center>![关联关系](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_association.jpg)</center><p><strong>在最终代码中，关联对象通常是以成员变量的形式实现的；</strong></p><h1 id="依赖关系-dependency"><a href="#依赖关系-dependency" class="headerlink" title="依赖关系(dependency)"></a>依赖关系(dependency)</h1><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p><center>![依赖关系](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_dependency.jpg)</center><p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p><p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p><p><strong>在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</strong></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html" target="_blank" rel="noopener">看懂UML类图和时序图</a>,by me115.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UML类图中类之间的关系主要有六种：泛化、实现、聚合、组合、依赖、关联。如图1所示。&lt;/p&gt;
&lt;center&gt;

![UML类图](https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_s
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>提高效率的在线工具</title>
    <link href="https://huangwang.github.io/2019/08/06/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"/>
    <id>https://huangwang.github.io/2019/08/06/提高效率的在线工具/</id>
    <published>2019-08-06T10:11:42.000Z</published>
    <updated>2019-08-06T10:17:32.636Z</updated>
    
    <content type="html"><![CDATA[<p>在此记录一些常用在线工具，提高工作效率。</p><h1 id="百度文库在线下载"><a href="#百度文库在线下载" class="headerlink" title="百度文库在线下载"></a>百度文库在线下载</h1><p>在某个文档页面的网址域名后面加上 vvv 三个字母，访问后就可以快捷下载。    </p><p>比如：</p><p><a href="https://wenku.baidu.com/view/3e6d30b2fd0a79563c1e72bd.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/3e6d30b2fd0a79563c1e72bd.html</a>    </p><p>加上 vvv 为：</p><p><a href="https://wenku.baiduvvv.com/view/3e6d30b2fd0a79563c1e72bd.html" target="_blank" rel="noopener">https://wenku.baiduvvv.com/view/3e6d30b2fd0a79563c1e72bd.html</a></p><h1 id="商品历史价格查询"><a href="#商品历史价格查询" class="headerlink" title="商品历史价格查询"></a>商品历史价格查询</h1><p>在电商网站商品详情页的网址域名后面加入vvv三个字母访问后即可查询该商品的历史价格。</p><p>例如：</p><p><a href="https://detail.tmall.com/item.htm?id=527080261251" target="_blank" rel="noopener">https://detail.tmall.com/item.htm?id=527080261251</a> </p><p>添加vvv后变为：</p><p><a href="https://detail.tmallvvv.com/item.htm?id=527080261251" target="_blank" rel="noopener">https://detail.tmallvvv.com/item.htm?id=527080261251</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://wenku.baiduvvv.com/doc/" target="_blank" rel="noopener">VVV文档在线导出工具</a>,by vvv.</li><li><a href="http://www.hisprice.cn/" target="_blank" rel="noopener">商品历史价格查询</a>,by hisprice.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在此记录一些常用在线工具，提高工作效率。&lt;/p&gt;
&lt;h1 id=&quot;百度文库在线下载&quot;&gt;&lt;a href=&quot;#百度文库在线下载&quot; class=&quot;headerlink&quot; title=&quot;百度文库在线下载&quot;&gt;&lt;/a&gt;百度文库在线下载&lt;/h1&gt;&lt;p&gt;在某个文档页面的网址域名后面加上 v
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="常用工具" scheme="https://huangwang.github.io/tags/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs调试入门</title>
    <link href="https://huangwang.github.io/2019/07/31/Nodejs%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/07/31/Nodejs调试入门/</id>
    <published>2019-07-31T14:01:28.000Z</published>
    <updated>2019-07-31T14:16:03.625Z</updated>
    
    <content type="html"><![CDATA[<p>调试是每个程序员必备的技能，因此选择合适的调试工具能极大地方便我们调试代码。Node.js 的调试方式也有很多，常见的有：</p><ol><li>万能的 console.log</li><li>debugger</li><li>node —inspect + chrome devtools</li></ol><p>本文重点介绍最有用的node —inspect方法。具体步骤如下：</p><ol><li>node —inspect app.js</li><li>打开 Chrome 浏览器，访问 chrome://inspect，选择第一步的调试目标。</li><li>在chrome访问源代码，设置断点调试。</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/nswbmw/node-in-debugging" target="_blank" rel="noopener">《Node.js 调试指南》</a>,by nswbmw.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;调试是每个程序员必备的技能，因此选择合适的调试工具能极大地方便我们调试代码。Node.js 的调试方式也有很多，常见的有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;万能的 console.log&lt;/li&gt;
&lt;li&gt;debugger&lt;/li&gt;
&lt;li&gt;node —inspect + chr
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Mock数据</title>
    <link href="https://huangwang.github.io/2019/07/28/Mock%E6%95%B0%E6%8D%AE/"/>
    <id>https://huangwang.github.io/2019/07/28/Mock数据/</id>
    <published>2019-07-28T15:38:30.000Z</published>
    <updated>2019-08-08T12:56:08.391Z</updated>
    
    <content type="html"><![CDATA[<p>在实际开发中，最理想的前后端交互方式当然是后端先帮前端 mock 数据，然后前端开发，但现实很骨感，总会因为种种原因，前端需要自己来 mock 假数据。常用的伪造假数据的库有：Mockjs和easy-mock。这两个库有各自问题，因此需要一种新的 mock 假数据方案。</p><h1 id="Mockjs"><a href="#Mockjs" class="headerlink" title="Mockjs"></a>Mockjs</h1><p>原理是: 拦截了所有的请求并代理到本地，然后进行数据模拟，所以你会发现 network 中没有发出任何的请求。</p><p>但它的最大的问题是就是它的实现机制。它会重写浏览器的XMLHttpRequest对象，从而才能拦截所有请求，代理到本地。</p><p>大部分情况下用起来还是蛮方便的，但就因为它重写了XMLHttpRequest对象，所以比如progress方法，或者一些底层依赖XMLHttpRequest的库都会和它发生不兼容。</p><p>另外，因为是它是本地模拟数据，实际上不会走任何网络请求。所以本地调试起来很蛋疼，只能通过console.log来调试。</p><h1 id="easy-mock"><a href="#easy-mock" class="headerlink" title="easy-mock"></a>easy-mock</h1><p>天然支持跨域，还是支持MockJs的所有语法。但因为用的人多了，它的免费服务会经常的挂，可以说天天挂。官方的建议是自己搭建服务。如果你的公司整体搭建一个这样的 mock 服务的话也是一个不错的选择。但大部分人可能还是没有这个技术条件的。</p><h1 id="新的Mock假数据方案"><a href="#新的Mock假数据方案" class="headerlink" title="新的Mock假数据方案"></a>新的Mock假数据方案</h1><p>本地会启动一个mock-server来模拟数据，线上环境还是继续使用mockjs来进行模拟(因为本项目是一个纯前端项目，你也可以自己搭建一个线上 server 来提供数据)。不管是本地还是线上所以的数据模拟都是基于mockjs生成的，所以只要写一套 mock 数据，就可以在多环境中使用。</p><p>该方案的好处是，在保留 mockjs 的优势的同时，解决之前的痛点。由于我们的 mock 是完全基于webpack-dev-serve来实现的，所以在你启动前端服务的同时，mock-server就会自动启动，这里还通过 chokidar 来观察 mock 文件夹内容的变化。在发生变化时会清除之前注册的mock-api接口，重新动态挂载新的接口，从而支持热更新。有兴趣的可以自己看一下代码 mock-server.js。由于是一个真正的server，所以你可以通过控制台中的network，清楚的知道接口返回的数据结构。并且同时解决了之前mockjs会重写 XMLHttpRequest对象，导致很多第三方库失效的问题。</p><p>vue.config.js中配置本地mock-server服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port: port,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      // change xxx-api/login =&gt; mock/login</span><br><span class="line">      // detail: https://cli.vuejs.org/config/#devserver-proxy</span><br><span class="line">      [process.env.VUE_APP_BASE_API]: &#123;</span><br><span class="line">        target: `http://127.0.0.1:$&#123;port&#125;/mock`,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          [&apos;^&apos; + process.env.VUE_APP_BASE_API]: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 输入app为exress实例，即var app = express();</span><br><span class="line">    // after: function(app, server) &#123;</span><br><span class="line">       // do fancy stuff</span><br><span class="line">    // &#125;</span><br><span class="line">    after: require(&apos;./mock/mock-server.js&apos;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://juejin.im/post/5c92ff94f265da6128275a85#heading-5" target="_blank" rel="noopener">手摸手，带你用vue撸后台 系列五(v4.0新版本)</a>,by 花裤衩.</li><li><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started" target="_blank" rel="noopener">Getting Started</a>,by mockjs.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际开发中，最理想的前后端交互方式当然是后端先帮前端 mock 数据，然后前端开发，但现实很骨感，总会因为种种原因，前端需要自己来 mock 假数据。常用的伪造假数据的库有：Mockjs和easy-mock。这两个库有各自问题，因此需要一种新的 mock 假数据方案。&lt;/
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript最新语法学习笔记</title>
    <link href="https://huangwang.github.io/2019/07/28/JavaScript%E6%9C%80%E6%96%B0%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/07/28/JavaScript最新语法学习笔记/</id>
    <published>2019-07-28T08:33:13.000Z</published>
    <updated>2019-07-31T14:00:43.671Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript目前发展很快，明年都会出一些新的语法特性。为了便于学习，本文对一些遇到的JavaScript语法特性做一些笔记。</p><h1 id="JavaScript版本简介"><a href="#JavaScript版本简介" class="headerlink" title="JavaScript版本简介"></a>JavaScript版本简介</h1><p>JavaScript 由 Brendan Eich 于 1995 年发明，并于 1997 年成为 ECMA 标准。</p><p>ECMAScript 是该语言的官方名称。</p><p>从 2015 年起，ECMAScript 按年命名（ECMAScript 2015）。</p><center>ECMAScript 版本</center><div class="table-container"><table><thead><tr><th>版本</th><th>官方名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>ECMAScript 1 (1997)</td><td>第一版。</td></tr><tr><td>2</td><td>ECMAScript 2 (1998)</td><td>只改变编辑方式。</td></tr><tr><td>3</td><td>ECMAScript 3 (1999)</td><td>添加了正则表达式。添加了 try/catch。</td></tr><tr><td>4</td><td>ECMAScript 4</td><td>从未发布过。</td></tr><tr><td>5</td><td>ECMAScript 5 (2009)</td><td>添加了“严格模式”。添加了 JSON 支持。添加了 String.trim()。添加了 Array.isArray()。添加了数组迭代方法。</td></tr><tr><td>5.1</td><td>ECMAScript 5.1 (2011)</td><td>编辑改变。</td></tr><tr><td>6</td><td>ECMAScript 2015</td><td>添加了 let 和 const。添加了默认参数值。添加了 Array.find()。添加了 Array.findIndex()</td></tr><tr><td>7</td><td>ECMAScript 2016</td><td>添加了指数运算符（**）。添加了 Array.prototype.includes。</td></tr><tr><td>8</td><td>ECMAScript 2017</td><td>添加了字符串填充。添加了新的 Object 属性。添加了异步功能。添加了共享内存。</td></tr><tr><td>9</td><td>ECMAScript 2018</td><td>添加了 rest / spread 属性。添加了异步迭代。添加了 Promise.finally()。增加 RegExp。</td></tr></tbody></table></div><h1 id="JavaScript新语法特性"><a href="#JavaScript新语法特性" class="headerlink" title="JavaScript新语法特性"></a>JavaScript新语法特性</h1><h2 id="…运算符"><a href="#…运算符" class="headerlink" title="…运算符"></a>…运算符</h2><p>es6中引入扩展运算符（…），它用于把一个数组转化为用逗号分隔的参数序列，它常用在不定参数个数时的函数调用，数组合并等情形。</p><ul><li>将实现了 Iterator 接口的对象转为数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var nodeList = document.querySelectorAll(&apos;div&apos;);  </span><br><span class="line">var array = [...nodeList];</span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;a, b, ...rest&#125; = &#123;a: 10, b: 20, c: 30, d: 40&#125;</span><br><span class="line">a; // 10 </span><br><span class="line">b; // 20 </span><br><span class="line">rest; // &#123; c: 30, d: 40 &#125;</span><br></pre></td></tr></table></figure><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><p>async函数是最新的javascript异步操作方式，初始定义于ES2017。async函数声明用于定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 获取用户信息 */</span><br><span class="line">async function userInfoRoute(req, res, next) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        var decoded = jwt.verify(req.body.token.split(&apos; &apos;)[1], appConfig.secretOrPrivateKey);</span><br><span class="line">        var user = await models.User.findByPk(decoded.userId);</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            code: 20000,</span><br><span class="line">            data: user</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        res.send(406, &#123;</span><br><span class="line">            message: &apos;Account and password are incorrect.&apos;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 获取用户信息 */</span><br><span class="line">router.post(&apos;/user_info&apos;, userInfoRoute);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.w3school.com.cn/js/js_versions.asp" target="_blank" rel="noopener">JavaScript 版本</a>,by w3school.</li><li><a href="https://www.jianshu.com/p/86cbabeda999" target="_blank" rel="noopener">ES6 扩展运算符 三个点（…）</a>,by ten5743.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">解构赋值</a>,by MDN web docs.</li><li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener">async 函数的含义和用法</a>,by 阮一峰.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async function</a>,by MDN web docs.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript目前发展很快，明年都会出一些新的语法特性。为了便于学习，本文对一些遇到的JavaScript语法特性做一些笔记。&lt;/p&gt;
&lt;h1 id=&quot;JavaScript版本简介&quot;&gt;&lt;a href=&quot;#JavaScript版本简介&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="JavaScript" scheme="https://huangwang.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs调试入门</title>
    <link href="https://huangwang.github.io/2019/07/28/Vuejs%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/07/28/Vuejs调试入门/</id>
    <published>2019-07-28T04:54:03.000Z</published>
    <updated>2019-07-28T07:54:37.011Z</updated>
    
    <content type="html"><![CDATA[<p>每个应用，不论大小，都需要理解程序是如何运行失败的。下面将探讨调试浏览器中运行的通过 Vue CLI 生成的 Vue.js 应用程序。</p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><ul><li>Chrome </li><li>Vue CLI</li><li>Vue Devtools</li></ul><h1 id="浏览器中展示源代码"><a href="#浏览器中展示源代码" class="headerlink" title="浏览器中展示源代码"></a>浏览器中展示源代码</h1><p>在可以从 VS Code 调试你的 Vue 组件之前，你需要更新 webpack 配置以构建 source map。做了这件事之后，我们的调试器就有机会将一个被压缩的文件中的代码对应回其源文件相应的位置。这会确保你可以在一个应用中调试，即便你的资源已经被 webpack 优化过了也没关系。</p><p>打开 config/index.js 并找到 devtool 属性。将其更新为：</p><p>如果你使用的是 Vue CLI 2，请设置并更新 config/index.js 内的 devtool 属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: &apos;source-map&apos;,</span><br></pre></td></tr></table></figure><p>如果你使用的是 Vue CLI 3，请设置并更新 vue.config.js 内的 devtool 属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    devtool: &apos;source-map&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h1><h2 id="在Chrome浏览器中调试"><a href="#在Chrome浏览器中调试" class="headerlink" title="在Chrome浏览器中调试"></a>在Chrome浏览器中调试</h2><p>利用Chrome浏览器的开发工具，在Vuejs应用源代码中设置断点，进行调试。</p><p></p><p align="center">    <img src="images/debug.jpg" width="100%" alt="在Chrome浏览器中调试"></p><p></p><center>图1 在Chrome浏览器中调试</center><h2 id="简单的-debugger-语句"><a href="#简单的-debugger-语句" class="headerlink" title="简单的 debugger 语句"></a>简单的 debugger 语句</h2><p>可以直接在代码中使用原生的 debugger 语句。如果你选择了这种方式，请千万记得当你调试完毕之后把这个语句移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    const hello = &apos;Hello World!&apos;</span><br><span class="line">    debugger</span><br><span class="line">    this.message = hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html" target="_blank" rel="noopener">在 VS Code 中调试</a>,by vuejs.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个应用，不论大小，都需要理解程序是如何运行失败的。下面将探讨调试浏览器中运行的通过 Vue CLI 生成的 Vue.js 应用程序。&lt;/p&gt;
&lt;h1 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>ESLint工具入门教程</title>
    <link href="https://huangwang.github.io/2019/07/27/ESLint%E5%B7%A5%E5%85%B7%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/07/27/ESLint工具入门教程/</id>
    <published>2019-07-27T09:48:09.000Z</published>
    <updated>2019-07-27T09:57:19.667Z</updated>
    
    <content type="html"><![CDATA[<p>ESLint最初是由Nicholas C. Zakas 于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p><p>ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。在许多方面，它和 JSLint、JSHint 相似，除了少数的例外：</p><ul><li>ESLint 使用 Espree 解析 JavaScript。</li><li>ESLint 使用 AST 去分析代码中的模式</li><li>ESLint 是完全插件化的。每一个规则都是一个插件并且你可以在运行时添加更多的规则。</li></ul><h1 id="用户指南"><a href="#用户指南" class="headerlink" title="用户指南"></a>用户指南</h1><p>先决条件：Node.js (&gt;=6.14), npm version 3+。</p><p>你可以使用 npm 安装 ESLint：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br></pre></td></tr></table></figure><p>紧接着你应该设置一个配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure><p>之后，你可以在任何文件或目录上运行ESLint如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/eslint yourfile.js</span><br></pre></td></tr></table></figure><p>也可以在全局而不是本地安装 ESLint (使用 npm install eslint —global)。但是，你使用的任何插件或可共享配置都必须安装在本地。</p><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>命令行工具有几个选项，你可以通过运行 eslint -h 查看所有选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">eslint [options] file.js [file.js] [dir]</span><br><span class="line"></span><br><span class="line">Basic configuration:</span><br><span class="line">  --no-eslintrc                  Disable use of configuration from .eslintrc.*</span><br><span class="line">  -c, --config path::String      Use this configuration, overriding .eslintrc.* config options if present</span><br><span class="line">  --env [String]                 Specify environments</span><br><span class="line">  --ext [String]                 Specify JavaScript file extensions - default: .js</span><br><span class="line">  --global [String]              Define global variables</span><br><span class="line">  --parser String                Specify the parser to be used</span><br><span class="line">  --parser-options Object        Specify parser options</span><br><span class="line">  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default</span><br><span class="line"></span><br><span class="line">Specifying rules and plugins:</span><br><span class="line">  --rulesdir [path::String]      Use additional rules from this directory</span><br><span class="line">  --plugin [String]              Specify plugins</span><br><span class="line">  --rule Object                  Specify rules</span><br><span class="line"></span><br><span class="line">Fixing problems:</span><br><span class="line">  --fix                          Automatically fix problems</span><br><span class="line">  --fix-dry-run                  Automatically fix problems without saving the changes to the file system</span><br><span class="line">  --fix-type Array               Specify the types of fixes to apply (problem, suggestion, layout)</span><br><span class="line"></span><br><span class="line">Ignoring files:</span><br><span class="line">  --ignore-path path::String     Specify path of ignore file</span><br><span class="line">  --no-ignore                    Disable use of ignore files and patterns</span><br><span class="line">  --ignore-pattern [String]      Pattern of files to ignore (in addition to those in .eslintignore)</span><br><span class="line"></span><br><span class="line">Using stdin:</span><br><span class="line">  --stdin                        Lint code provided on &lt;STDIN&gt; - default: false</span><br><span class="line">  --stdin-filename String        Specify filename to process STDIN as</span><br><span class="line"></span><br><span class="line">Handling warnings:</span><br><span class="line">  --quiet                        Report errors only - default: false</span><br><span class="line">  --max-warnings Int             Number of warnings to trigger nonzero exit code - default: -1</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">  -o, --output-file path::String  Specify file to write report to</span><br><span class="line">  -f, --format String            Use a specific output format - default: stylish</span><br><span class="line">  --color, --no-color            Force enabling/disabling of color</span><br><span class="line"></span><br><span class="line">Inline configuration comments:</span><br><span class="line">  --no-inline-config             Prevent comments from changing config or rules</span><br><span class="line">  --report-unused-disable-directives  Adds reported errors for unused eslint-disable directives</span><br><span class="line"></span><br><span class="line">Caching:</span><br><span class="line">  --cache                        Only check changed files - default: false</span><br><span class="line">  --cache-file path::String      Path to the cache file. Deprecated: use --cache-location - default: .eslintcache</span><br><span class="line">  --cache-location path::String  Path to the cache file or directory</span><br><span class="line"></span><br><span class="line">Miscellaneous:</span><br><span class="line">  --init                         Run config initialization wizard - default: false</span><br><span class="line">  --debug                        Output debugging information</span><br><span class="line">  -h, --help                     Show help</span><br><span class="line">  -v, --version                  Output the version number</span><br><span class="line">  --print-config path::String    Print the configuration for the given file</span><br></pre></td></tr></table></figure><h2 id="修复警告和错误"><a href="#修复警告和错误" class="headerlink" title="修复警告和错误"></a>修复警告和错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --fix file.js [file.js] [dir]</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://cn.eslint.org/" target="_blank" rel="noopener">ESLint 可组装的JavaScript和JSX检查工具</a>,by ESLint homepage.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ESLint最初是由Nicholas C. Zakas 于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。&lt;/p&gt;
&lt;p&gt;ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue-js入门简介</title>
    <link href="https://huangwang.github.io/2019/07/26/Vue-js%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/26/Vue-js入门简介/</id>
    <published>2019-07-26T09:55:53.000Z</published>
    <updated>2019-07-27T02:04:32.995Z</updated>
    
    <content type="html"><![CDATA[<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h1 id="Vue实例生命周期图示"><a href="#Vue实例生命周期图示" class="headerlink" title="Vue实例生命周期图示"></a>Vue实例生命周期图示</h1><p align="center">    <img src="https://cn.vuejs.org/images/lifecycle.png" width="90%" alt="Vue实例生命周期图示"></p><h1 id="核心插件Vuex"><a href="#核心插件Vuex" class="headerlink" title="核心插件Vuex"></a>核心插件Vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p align="center">    <img src="https://vuex.vuejs.org/vuex.png" width="90%" alt="Vuex工作原理示意图"></p><h2 id="Vuex核心store"><a href="#Vuex核心store" class="headerlink" title="Vuex核心store"></a>Vuex核心store</h2><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：</p><ol><li><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p></li><li><p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p></li></ol><p>安装 Vuex 之后，让我们来创建一个 store。创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutation：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在，你可以通过 store.state 来获取状态对象，以及通过 store.commit 方法触发状态变更：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;)</span><br><span class="line"></span><br><span class="line">console.log(store.state.count) // -&gt; 1</span><br></pre></td></tr></table></figure><h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p><p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">      &lt;counter&gt;&lt;/counter&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。</p><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>Getter 接受 state 作为其第一个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: state =&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneTodos // -&gt; [&#123; id: 1, text: &apos;...&apos;, done: true &#125;]</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;)</span><br></pre></td></tr></table></figure><p><strong>注意，Mutation必须是同步函数。</strong></p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Action 通过 store.dispatch 方法触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&apos;increment&apos;)</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue.js 教程</a>,by Vue.js Homepage.</li><li><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">Vuex教程</a>,by Vue.js Homepage.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Lodash入门简介</title>
    <link href="https://huangwang.github.io/2019/07/25/Lodash%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/25/Lodash入门简介/</id>
    <published>2019-07-25T05:24:08.000Z</published>
    <updated>2019-07-25T05:27:17.611Z</updated>
    
    <content type="html"><![CDATA[<p>Lodash是一个一致性、模块化、高性能的 JavaScript 实用工具库。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>浏览器环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;lodash.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过 npm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g npm</span><br><span class="line">$ npm i --save lodash</span><br></pre></td></tr></table></figure><p>Node.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Load the full build.</span><br><span class="line">var _ = require(&apos;lodash&apos;);</span><br><span class="line">// Load the core build.</span><br><span class="line">var _ = require(&apos;lodash/core&apos;);</span><br><span class="line">// Load the FP build for immutable auto-curried iteratee-first data-last methods.</span><br><span class="line">var fp = require(&apos;lodash/fp&apos;);</span><br><span class="line"> </span><br><span class="line">// Load method categories.</span><br><span class="line">var array = require(&apos;lodash/array&apos;);</span><br><span class="line">var object = require(&apos;lodash/fp/object&apos;);</span><br><span class="line"> </span><br><span class="line">// Cherry-pick methods for smaller browserify/rollup/webpack bundles.</span><br><span class="line">var at = require(&apos;lodash/at&apos;);</span><br><span class="line">var curryN = require(&apos;lodash/fp/curryN&apos;);</span><br></pre></td></tr></table></figure><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>Lodash 通过降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。</p><p>Lodash 的模块化方法 非常适用于：</p><ul><li>遍历 array、object 和 string</li><li>对值进行操作和检测</li><li>创建符合功能的函数</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.defaults(&#123; &apos;a&apos;: 1 &#125;, &#123; &apos;a&apos;: 3, &apos;b&apos;: 2 &#125;);</span><br><span class="line">// → &#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;</span><br><span class="line">_.partition([1, 2, 3, 4], n =&gt; n % 2);</span><br><span class="line">// → [[1, 3], [2, 4]]</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">Lodash</a>,by lodash homepage.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lodash是一个一致性、模块化、高性能的 JavaScript 实用工具库。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;浏览器环境：&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>express-jwt使用帮助</title>
    <link href="https://huangwang.github.io/2019/07/25/express-jwt%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <id>https://huangwang.github.io/2019/07/25/express-jwt使用帮助/</id>
    <published>2019-07-25T02:42:14.000Z</published>
    <updated>2019-07-31T13:53:21.546Z</updated>
    
    <content type="html"><![CDATA[<p>express-jwt是一个验证JsonWebTokens并设置req.user的connect/express中间件。此模块允许您使用Node.js应用程序中的JWT令牌验证HTTP请求。 JWT通常用于保护API端点，通常使用OpenID Connect发布。</p><h1 id="Json-web-token结构"><a href="#Json-web-token结构" class="headerlink" title="Json web token结构"></a>Json web token结构</h1><p>JWT 的三个部分依次如下：</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>ignature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><h1 id="基于JWT的身份验证流程"><a href="#基于JWT的身份验证流程" class="headerlink" title="基于JWT的身份验证流程"></a>基于JWT的身份验证流程</h1><p>使用基于 JWT 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li></ol><h1 id="jsonwebtoken的使用"><a href="#jsonwebtoken的使用" class="headerlink" title="jsonwebtoken的使用"></a>jsonwebtoken的使用</h1><p>jsonwebtoken是JSON Web Tokens在Nodejs平台的实现。它可以与express-jwt模块配合，在expressjs中实现基于JWT的身份验证。</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken --save</span><br></pre></td></tr></table></figure><h2 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h2><p>在expressjs中主要使用该模块生成JSON Web Tokens。其接口定义为：</p><ul><li>jwt.sign(payload, secretOrPrivateKey, [options, callback])</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var token = jwt.sign(&#123;</span><br><span class="line">    userId: users[0].id</span><br><span class="line">  &#125;,</span><br><span class="line">  appConfig.secretOrPrivateKey, &#123;</span><br><span class="line">    expiresIn: 60 * 60 * 6</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>jwt.verify(token, secretOrPublicKey, [options, callback])</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// verify a token symmetric - synchronous</span><br><span class="line">var decoded = jwt.verify(req.body.token.split(&apos; &apos;)[1], appConfig.secretOrPrivateKey);</span><br><span class="line">var user = await models.User.findByPk(decoded.userId);</span><br></pre></td></tr></table></figure><ul><li>jwt.decode(token [, options])</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// get the decoded payload ignoring signature, no secretOrPrivateKey needed</span><br><span class="line">var decoded = jwt.decode(token);</span><br><span class="line"></span><br><span class="line">// get the decoded payload and header</span><br><span class="line">var decoded = jwt.decode(token, &#123;complete: true&#125;);</span><br><span class="line">console.log(decoded.header);</span><br><span class="line">console.log(decoded.payload)</span><br></pre></td></tr></table></figure><h1 id="express-jwt的使用"><a href="#express-jwt的使用" class="headerlink" title="express-jwt的使用"></a>express-jwt的使用</h1><h2 id="安装帮助"><a href="#安装帮助" class="headerlink" title="安装帮助"></a>安装帮助</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-jwt --save</span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(expressJWT(&#123;</span><br><span class="line">    secret: appConfig.secretOrPrivateKey</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    if (err.name === &apos;UnauthorizedError&apos;) &#123;</span><br><span class="line">        res.status(err.status || 401).send(err.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">什么是 JWT — JSON WEB TOKEN</a>, by Dearmadman</li><li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token 入门教程</a>,by 阮一峰.</li><li><a href="https://huangwang.github.io/2018/07/08/Cookie-Session%E5%92%8CToken%E4%BC%9A%E8%AF%9D%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/">Cookie,Session和Token会话知识整理</a>,by jack huang.</li><li><a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="noopener">node-jsonwebtoken</a>,by auth0.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;express-jwt是一个验证JsonWebTokens并设置req.user的connect/express中间件。此模块允许您使用Node.js应用程序中的JWT令牌验证HTTP请求。 JWT通常用于保护API端点，通常使用OpenID Connect发布。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Expressjs组件morgan保存日志到文件的方法</title>
    <link href="https://huangwang.github.io/2019/07/24/Expressjs%E7%BB%84%E4%BB%B6morgan%E4%BF%9D%E5%AD%98%E6%97%A5%E5%BF%97%E5%88%B0%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/07/24/Expressjs组件morgan保存日志到文件的方法/</id>
    <published>2019-07-24T15:57:27.000Z</published>
    <updated>2019-07-24T16:00:48.775Z</updated>
    
    <content type="html"><![CDATA[<p>morgan是express默认的日志中间件，也可以脱离express，作为node.js的日志组件单独使用。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="将日志打印到本地文件"><a href="#将日志打印到本地文件" class="headerlink" title="将日志打印到本地文件"></a>将日志打印到本地文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">var morgan = require(&apos;morgan&apos;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">var accessLogStream = fs.createWriteStream(path.join(__dirname, &apos;access.log&apos;), &#123;flags: &apos;a&apos;&#125;);</span><br><span class="line"></span><br><span class="line">app.use(morgan(&apos;short&apos;, &#123;stream: accessLogStream&#125;));</span><br><span class="line">app.use(function(req, res, next)&#123;</span><br><span class="line">    res.send(&apos;ok&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h2><p>一个线上应用，如果所有的日志都落地到同一个本地文件，时间久了，文件会变得非常大，既影响性能，又不便于查看。这时候，就需要用到日志分割了。</p><p>借助file-stream-rotator插件，可以轻松完成日志分割的工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var FileStreamRotator = require(&apos;file-stream-rotator&apos;)</span><br><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line">var morgan = require(&apos;morgan&apos;)</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">var app = express()</span><br><span class="line">var logDirectory = path.join(__dirname, &apos;log&apos;)</span><br><span class="line"></span><br><span class="line">// ensure log directory exists</span><br><span class="line">fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)</span><br><span class="line"></span><br><span class="line">// create a rotating write stream</span><br><span class="line">var accessLogStream = FileStreamRotator.getStream(&#123;</span><br><span class="line">  date_format: &apos;YYYYMMDD&apos;,</span><br><span class="line">  filename: path.join(logDirectory, &apos;access-%DATE%.log&apos;),</span><br><span class="line">  frequency: &apos;daily&apos;,</span><br><span class="line">  verbose: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// setup the logger</span><br><span class="line">app.use(morgan(&apos;combined&apos;, &#123;stream: accessLogStream&#125;))</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">  res.send(&apos;hello, world!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/chyingp/p/node-learning-guide-express-morgan.html" target="_blank" rel="noopener">Node 进阶：express 默认日志组件 morgan 从入门使用到源码剖析</a>,by 程序猿小卡.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;morgan是express默认的日志中间件，也可以脱离express，作为node.js的日志组件单独使用。&lt;/p&gt;
&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;h2 id=&quot;将日
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Expressjs cors入门简介</title>
    <link href="https://huangwang.github.io/2019/07/24/Expressjs-cors%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/24/Expressjs-cors入门简介/</id>
    <published>2019-07-24T14:50:35.000Z</published>
    <updated>2019-07-24T15:06:59.607Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs+expressjs+vuejs的解决方案中，服务器端应用开发和前端应用的开发是独立的。不过前端应用调用服务器端应用的RESTful API时涉及跨域资源访问，因此需要添加expressjs的cors模块。下面简要介绍cors模块的使用方法。</p><h1 id="跨域资源共享简介"><a href="#跨域资源共享简介" class="headerlink" title="跨域资源共享简介"></a>跨域资源共享简介</h1><p>跨域资源共享（CORS）是一种机制，允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。网页可以自由嵌入跨源图像，样式表，脚本，iframe和视频。但某些“跨域”请求，尤其是Ajax请求，默认情况下是由同源安全策略禁止的。</p><p>CORS定义了一种浏览器和服务器可以交互的方式，以确定允许跨源请求是否安全。它允许比纯粹的同源请求更多的自由和功能，但比简单地允许所有跨源请求更安全。 CORS规范最初是作为W3C建议书发布的，但该文件已经过时。目前主动维护的CORS定义规范是WHATWG的Fetch Living Standard。</p><p>CORS标准描述了新的HTTP标头，它为浏览器提供了一种仅在获得许可时才能请求远程URL的方法。 尽管服务器可以执行某些验证和授权，但浏览器通常负责支持这些标头并遵守它们所施加的限制。</p><p>对于可以修改数据的Ajax和HTTP请求方法（通常是GET以外的HTTP方法，或者某些MIME类型的POST用法），规范要求浏览器“预检”请求，通过HTTP OPTIONS请求从服务器请求支持的方法 方法，然后，在服务器“批准”时，使用实际的HTTP请求方法发送实际请求。 服务器还可以通知客户端是否应该随请求一起发送“凭证”（包括Cookie和HTTP身份验证数据）。</p><p></p><p align="center">    <img src="images/Flowchart_showing_Simple_and_Preflight_XHR.png" width="90%" alt="跨域资源共享流程图"></p><p></p><center>图1 跨域资源共享流程图</center><h1 id="CORS安装"><a href="#CORS安装" class="headerlink" title="CORS安装"></a>CORS安装</h1><p>CORS是一个node.js包，用于提供Connect / Express中间件，可用于启用具有各种选项的CORS。使用如下方式安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cors --save</span><br></pre></td></tr></table></figure><h1 id="CORS示例"><a href="#CORS示例" class="headerlink" title="CORS示例"></a>CORS示例</h1><ul><li>简单示例，允许所有跨域请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var cors = require(&apos;cors&apos;)</span><br><span class="line">var app = express()</span><br><span class="line"></span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line">app.get(&apos;/products/:id&apos;, function (req, res, next) &#123;</span><br><span class="line">  res.json(&#123;msg: &apos;This is CORS-enabled for all origins!&apos;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(80, function () &#123;</span><br><span class="line">  console.log(&apos;CORS-enabled web server listening on port 80&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">Cross-origin resource sharing</a>,by wikipedia.</li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a>,by 阮一峰.</li><li><a href="https://expressjs.com/en/resources/middleware/cors.html" target="_blank" rel="noopener">cors</a>,by expressjs.com.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在nodejs+expressjs+vuejs的解决方案中，服务器端应用开发和前端应用的开发是独立的。不过前端应用调用服务器端应用的RESTful API时涉及跨域资源访问，因此需要添加expressjs的cors模块。下面简要介绍cors模块的使用方法。&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>nodemon入门简介</title>
    <link href="https://huangwang.github.io/2019/07/23/nodemon%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/23/nodemon入门简介/</id>
    <published>2019-07-23T13:43:14.000Z</published>
    <updated>2019-07-23T13:49:39.066Z</updated>
    
    <content type="html"><![CDATA[<p>Nodemon是一个用于nodejs开发的工具程序，它将监视nodejs源中的任何更改并自动重新启动服务器。</p><p>nodemon不需要对代码或开发方法进行任何其他更改。 nodemon是node的替换包装器，在执行脚本时使用nodemon替换命令行上的单词node即可。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon [your node app]</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a>,by remy.</li><li><a href="https://bubkoo.com/2014/12/02/use-nodemon-with-node-applications/" target="_blank" rel="noopener">在 Express 开发中使用 nodemon</a>,by bubkoo.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nodemon是一个用于nodejs开发的工具程序，它将监视nodejs源中的任何更改并自动重新启动服务器。&lt;/p&gt;
&lt;p&gt;nodemon不需要对代码或开发方法进行任何其他更改。 nodemon是node的替换包装器，在执行脚本时使用nodemon替换命令行上的单词node
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>RESTful_API设计及测试入门</title>
    <link href="https://huangwang.github.io/2019/07/23/RESTful-API%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/07/23/RESTful-API设计及测试入门/</id>
    <published>2019-07-23T09:01:34.000Z</published>
    <updated>2019-07-24T14:27:50.164Z</updated>
    
    <content type="html"><![CDATA[<p>RESTful API是目前比较成熟的一套互联网应用程序的API设计理论，提供了一种统一的机制，方便不同的前端设备与后端进行通信，以应对前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）的状况。同时对开发人员而言，提供了一种规范，方便协作开发，降低了API接口设计的难度。</p><h1 id="RESTful-API设计规范"><a href="#RESTful-API设计规范" class="headerlink" title="RESTful API设计规范"></a>RESTful API设计规范</h1><p>请参考阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>。</p><h1 id="RESTful-API的测试方法"><a href="#RESTful-API的测试方法" class="headerlink" title="RESTful API的测试方法"></a>RESTful API的测试方法</h1><p>RESTful API设计好了之后，需要测试其可用性。常用的API测试工具有Postman。简单入门可参考<a href="https://www.cnblogs.com/mafly/p/postman.html" target="_blank" rel="noopener">Postman 安装及使用入门教程</a>。</p><p>Postman中使用HTTP POST方法测试RESTful API时，需要了解POST提交数据的方法。</p><h2 id="POST提交数据的方法"><a href="#POST提交数据的方法" class="headerlink" title="POST提交数据的方法"></a>POST提交数据的方法</h2><p>POST 几种请求主要包括 application/x-www-form-urlencoded、 multipart/form-data、 application/json、text/xml 四种的方法。</p><p>服务端通常是根据请求头（Request Headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。<br>POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。</p><ul><li>application/x-www-form-urlencoded (默认常用)</li></ul><p>这是最常见的 POST 提交数据的方式。浏览器的原生表单，如果不设置Content-type属性，就会默认该方式提交数据，并且提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。</p><ul><li>multipart/form-data</li></ul><p>这是另一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让表单的enctyped等于 multipart/form-data。</p><ul><li>application/json</li></ul><p>application/json 这种方案，可以方便的提交复杂的结构化数据，这种POST提交方式越来越多，用来告诉服务端消息主体是序列化后的 JSON 字符串。</p><p>由于JSON规范的流行，出了低版本的IE之外，各大浏览器都支持 JSON.stringify 将JSON数据字符串化（编码）传到服务器，还可以通过  JSON.parse 将字符串转化（解码）为JSON数据供前端渲染或者其他处理。</p><ul><li>text/xml</li></ul><p>现在基本不用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>,by 阮一峰.</li><li><a href="https://juejin.im/entry/59e460c951882542f578f2f0" target="_blank" rel="noopener">RESTful API 设计最佳实践</a>,by Philipp Hauer.</li><li><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">restful-api-design-references</a>,by aisuhua.</li><li><a href="https://learning.getpostman.com/docs/postman/launching_postman/installation_and_updates/" target="_blank" rel="noopener">Postman Doc</a>,by postman homepage.</li><li><a href="https://www.cnblogs.com/mafly/p/postman.html" target="_blank" rel="noopener">Postman 安装及使用入门教程</a>,by Mafly.</li><li><a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="noopener">四种常见的 POST 提交数据方式</a>,by Jerry Qu.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RESTful API是目前比较成熟的一套互联网应用程序的API设计理论，提供了一种统一的机制，方便不同的前端设备与后端进行通信，以应对前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）的状况。同时对开发人员而言，提供了一种规范，方便协作开发，降低了API接口设计的
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HTML_DOM文档对象模型简介</title>
    <link href="https://huangwang.github.io/2019/07/22/HTML-DOM%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/22/HTML-DOM文档对象模型简介/</id>
    <published>2019-07-22T13:21:52.000Z</published>
    <updated>2019-07-23T00:18:02.972Z</updated>
    
    <content type="html"><![CDATA[<p>最近要写一些八股文，上网一搜，好多范例，正想下载下来借鉴以下，可惜不让复制粘贴。不过难不倒我，直接使用文档对象模型(Document Object Model，DOM)提供编程接口，将整篇文章下来。</p><h1 id="DOM概述"><a href="#DOM概述" class="headerlink" title="DOM概述"></a>DOM概述</h1><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。</p><p>一个web页面是一个文档。这个文档可以在浏览器窗口或作为HTML源码显示出来。但上述两个情况中都是同一份文档。文档对象模型（DOM）提供了对同一份文档的另一种表现，存储和操作的方式。 DOM是web页面的完全的面向对象表述，它能够使用如 JavaScript等脚本语言进行修改。</p><h2 id="DOM-和-JavaScript"><a href="#DOM-和-JavaScript" class="headerlink" title="DOM 和 JavaScript"></a>DOM 和 JavaScript</h2><p>开始的时候，JavaScript和DOM是交织在一起的，但它们最终演变成了两个独立的实体。JavaScript可以访问和操作存储在DOM中的内容，因此我们可以写成这个近似的等式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API (web 或 XML 页面) = DOM + JS (脚本语言)</span><br></pre></td></tr></table></figure><p>DOM 被设计成与特定编程语言相独立，使文档的结构化表述可以通过单一，一致的API获得。尽管通常使用JavaScript操作DOM， 但DOM 也可以使用其他的语言来实现。</p><h2 id="DOM访问"><a href="#DOM访问" class="headerlink" title="DOM访问"></a>DOM访问</h2><p>在使用DOM时，您不需要做任何其他特殊的操作。不同的浏览器都有对DOM不同的实现， 这些实现对当前的DOM标准而言，都会呈现出不同程度的一致性，每个web浏览器都会使用一些文档对象模型，从而使页面可以被脚本语言访问。</p><p>当您在创建一个脚本时-无论是使用内嵌 \<script\>元素或者使用在web页面脚本加载的方法— 您都可以使用 document或 window 元素的API来操作文档本身或获取文档的子类（web页面中的各种元素）。</script\></p><p>您的DOM编程代码可能会像下面例子一样非常简单，如使用 window对象的alert()函数显示一个警告信息，或者使用比较复杂的方法来创建一个新的内容，如下面内容较长的实例所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;window.alert(&apos;welcome to my home page!&apos;);&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="重要的数据类型"><a href="#重要的数据类型" class="headerlink" title="重要的数据类型"></a>重要的数据类型</h2><p>为简单起见，在API参考文档中的语法实例通常会使用element(s) 指代节点，使用nodeList（s）或 element(s)来指代节点数组，使用 attribute(s)来指代属性节点。</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>解释</th></tr></thead><tbody><tr><td>document</td><td>当一个成员返回 document 对象 （例如，元素的 ownerDocument 属性返回它所属于 document ) ，这个对象就是root document 对象本身。 DOM document Reference 一章对 document 对象进行了描述。</td></tr><tr><td>element</td><td>element 是指由 DOM API 中成员返回的类型为 element 的一个元素或节点。 例如， document.createElement() 方法会返回一个 node 的对象引用，也就是说这个方法返回了在DOM中创建的 element。 element 对象实现了 DOM Element 接口以及更基本的 Node 接口，参考文档将两者都包含在内。</td></tr><tr><td>nodeList</td><td>nodeList 是一个元素的数组，如从 document.getElementsByTagName() 方法返回的就是这种类型。 nodeList 中的条目由通过下标有两种方式进行访问：list.item(1)和list[1]。两种方式是等价的，第一种方式中 item() 是 nodeList 对象中的单独方法。 后面的方式则使用了经典的数组语法来获取列表中的第二个条目。</td></tr><tr><td>attribute</td><td>当 attribute 通过成员函数 (例如，通过 createAttribute()方法) 返回时，它是一个为属性暴露出专门接口的对象引用。DOM中的属性也是节点，就像元素一样，只不过您可能会很少使用它。</td></tr><tr><td>namedNodeMap</td><td>namedNodeMap 和数组类似，但是条目是由name或index访问的，虽然后一种方式仅仅是为了枚举方便，因为在 list 中本来就没有特定的顺序。 出于这个目的，  namedNodeMap 有一个 item() 方法，你也可以从  namedNodeMap 添加或移除条目。</td></tr></tbody></table></div><p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p><p>节点的类型有七种。</p><ul><li>Document：整个文档树的顶层节点</li><li>DocumentType：doctype标签（比如\&lt;!DOCTYPE html>）</li><li>Element：网页的各种HTML标签（比如\<body\>、\<a\>等）</a\></body\></li><li>Attribute：网页元素的属性（比如class=”right”）</li><li>Text：标签之间或标签包含的文本</li><li>Comment：注释</li><li>DocumentFragment：文档的片段</li></ul><p>浏览器提供一个原生的节点对象Node，上面这七种节点都继承了Node，因此具有一些共同的属性和方法。</p><h2 id="DOM中核心接口"><a href="#DOM中核心接口" class="headerlink" title="DOM中核心接口"></a>DOM中核心接口</h2><p>在DOM编程时，通常使用的最多的就是 Document 和 window 对象。简单的说， window 对象表示浏览器中的内容，而 document 对象是文档本身的根节点。Element 继承了通用的 Node 接口,  将这两个接口结合后就提供了许多方法和属性可以供单个元素使用。在处理这些元素所对应的不同类型的数据时，这些元素可能会有专用的接口，如上节中的  table  对象的例子。</p><p>下面是在web和XML页面脚本中使用DOM时，一些常用的API简要列表。</p><ul><li>document.getElementById(id)</li><li>document.getElementsByTagName(name)</li><li>document.createElement(name)</li><li>parentNode.appendChild(node)</li><li>element.innerHTML</li><li>element.style.left</li><li>element.setAttribute()</li><li>element.getAttribute()</li><li>element.addEventListener()</li><li>window.content</li><li>window.onload</li><li>window.dump()</li><li>window.scrollTo()</li></ul><h1 id="文档下载实战"><a href="#文档下载实战" class="headerlink" title="文档下载实战"></a>文档下载实战</h1><p>以<a href="http://www.gwyxiezuo.com/cailiao/pouxi/2018-11-23/486dbfad4cf89816bef7921d14a11311.html" target="_blank" rel="noopener">示例范文</a>为例，提取其中内容。</p><h2 id="禁止复制粘贴的原理"><a href="#禁止复制粘贴的原理" class="headerlink" title="禁止复制粘贴的原理"></a>禁止复制粘贴的原理</h2><ul><li>阻止默认的事件响应</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">// 禁止右键菜单</span><br><span class="line">document.oncontextmenu = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止文字选择</span><br><span class="line">document.onselectstart = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止复制</span><br><span class="line">document.oncopy = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止剪切</span><br><span class="line">document.oncut = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止粘贴</span><br><span class="line">document.onpaste = function()&#123; return false; &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>CSS阻止用户选择</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.style &#123;</span><br><span class="line">    user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="破解禁止复制粘贴"><a href="#破解禁止复制粘贴" class="headerlink" title="破解禁止复制粘贴"></a>破解禁止复制粘贴</h2><p>使用chrome打开该网页，在使用快捷键ctrl+shift+i，打开开发者工具，找到文档节点DIV的id为article，使用如下代码提取文章内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var node=document.getElementById(&apos;article&apos;)</span><br><span class="line">console.log(node.innerText)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://javascript.ruanyifeng.com/dom/node.html" target="_blank" rel="noopener">DOM 模型概述</a>,by 阮一峰.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">DOM概述</a>,by MDN web DOC.</li><li><a href="http://blog.haoji.me/disable-html-copy-and-paste.html?from=xa" target="_blank" rel="noopener">网页上如何实现禁止复制粘贴以及如何破解</a>,by 小茗同学.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近要写一些八股文，上网一搜，好多范例，正想下载下来借鉴以下，可惜不让复制粘贴。不过难不倒我，直接使用文档对象模型(Document Object Model，DOM)提供编程接口，将整篇文章下来。&lt;/p&gt;
&lt;h1 id=&quot;DOM概述&quot;&gt;&lt;a href=&quot;#DOM概述&quot; c
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="https://huangwang.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli-3集成jQWidgets</title>
    <link href="https://huangwang.github.io/2019/07/19/Vue-cli-3%E9%9B%86%E6%88%90jQWidgets/"/>
    <id>https://huangwang.github.io/2019/07/19/Vue-cli-3集成jQWidgets/</id>
    <published>2019-07-19T14:19:28.000Z</published>
    <updated>2019-07-19T14:26:16.770Z</updated>
    
    <content type="html"><![CDATA[<p>jQWidgets是一个软件框架，包含小部件，主题，输入验证，拖放插件，数据适配器，内置WAI-ARIA可访问性，国际化和MVVM支持。它建立在开放标准和技术HTML5，CSS，JavaScript和jQuery之上。该库用于开发响应式Web和移动应用程序。下面介绍在Vuejs中集成jQWidgets。</p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul><li>node.js: v10.16.0</li><li>npm: 6.9.0</li><li>vue: 2.6.10</li><li>cesium: 1.45.0</li><li>vue-cli: 3.9.2</li><li>webpack: 4.28.4</li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul><li>安装vue-cli</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ul><li>创建应用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create jqwidgets-vue-cli-app   //Choose the default preset</span><br></pre></td></tr></table></figure><ul><li>导航到应用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd jqwidgets-vue-cli-app</span><br></pre></td></tr></table></figure><ul><li>安装jQWidgets依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jqwidgets-scripts --save--dev</span><br></pre></td></tr></table></figure><ul><li><p>从node_modules/jqwidgets-scripts/jqwidgets复制styles文件夹到public文件夹。</p></li><li><p>在index.html链接 jqx.base.css 文件。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./styles/jqx.base.css&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>修改App.vue如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;JqxBarGauge ref=&quot;barGaugeReference&quot;</span><br><span class="line">        :width=&quot;600&quot; :height=&quot;600&quot; </span><br><span class="line">        :values=&quot;values&quot; :formatFunction=&quot;formatFunction&quot; </span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import JqxBarGauge from &apos;jqwidgets-scripts/jqwidgets-vue/vue_jqxbargauge.vue&apos;;</span><br><span class="line"> </span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            JqxBarGauge</span><br><span class="line">        &#125;,</span><br><span class="line">        data: function () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                values: [10, 20, 30, 40, 50]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            formatFunction: function (value, index, color) &#123;</span><br><span class="line">                return color;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>运行Vue Cli开发服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><ul><li>在浏览器中输入 localhost:8080 查看结果。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jqwidgets.com/vue-components-documentation/documentation/vue-cli/vue-cli.htm" target="_blank" rel="noopener">Vue CLI with jQWidgets</a>,by jQWidgets.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jQWidgets是一个软件框架，包含小部件，主题，输入验证，拖放插件，数据适配器，内置WAI-ARIA可访问性，国际化和MVVM支持。它建立在开放标准和技术HTML5，CSS，JavaScript和jQuery之上。该库用于开发响应式Web和移动应用程序。下面介绍在Vue
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
  </entry>
  
</feed>
