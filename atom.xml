<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-07-24T16:00:48.775Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Expressjs组件morgan保存日志到文件的方法</title>
    <link href="https://huangwang.github.io/2019/07/24/Expressjs%E7%BB%84%E4%BB%B6morgan%E4%BF%9D%E5%AD%98%E6%97%A5%E5%BF%97%E5%88%B0%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/07/24/Expressjs组件morgan保存日志到文件的方法/</id>
    <published>2019-07-24T15:57:27.000Z</published>
    <updated>2019-07-24T16:00:48.775Z</updated>
    
    <content type="html"><![CDATA[<p>morgan是express默认的日志中间件，也可以脱离express，作为node.js的日志组件单独使用。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="将日志打印到本地文件"><a href="#将日志打印到本地文件" class="headerlink" title="将日志打印到本地文件"></a>将日志打印到本地文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">var morgan = require(&apos;morgan&apos;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">var accessLogStream = fs.createWriteStream(path.join(__dirname, &apos;access.log&apos;), &#123;flags: &apos;a&apos;&#125;);</span><br><span class="line"></span><br><span class="line">app.use(morgan(&apos;short&apos;, &#123;stream: accessLogStream&#125;));</span><br><span class="line">app.use(function(req, res, next)&#123;</span><br><span class="line">    res.send(&apos;ok&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h2><p>一个线上应用，如果所有的日志都落地到同一个本地文件，时间久了，文件会变得非常大，既影响性能，又不便于查看。这时候，就需要用到日志分割了。</p><p>借助file-stream-rotator插件，可以轻松完成日志分割的工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var FileStreamRotator = require(&apos;file-stream-rotator&apos;)</span><br><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line">var morgan = require(&apos;morgan&apos;)</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">var app = express()</span><br><span class="line">var logDirectory = path.join(__dirname, &apos;log&apos;)</span><br><span class="line"></span><br><span class="line">// ensure log directory exists</span><br><span class="line">fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)</span><br><span class="line"></span><br><span class="line">// create a rotating write stream</span><br><span class="line">var accessLogStream = FileStreamRotator.getStream(&#123;</span><br><span class="line">  date_format: &apos;YYYYMMDD&apos;,</span><br><span class="line">  filename: path.join(logDirectory, &apos;access-%DATE%.log&apos;),</span><br><span class="line">  frequency: &apos;daily&apos;,</span><br><span class="line">  verbose: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// setup the logger</span><br><span class="line">app.use(morgan(&apos;combined&apos;, &#123;stream: accessLogStream&#125;))</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">  res.send(&apos;hello, world!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/chyingp/p/node-learning-guide-express-morgan.html" target="_blank" rel="noopener">Node 进阶：express 默认日志组件 morgan 从入门使用到源码剖析</a>,by 程序猿小卡.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;morgan是express默认的日志中间件，也可以脱离express，作为node.js的日志组件单独使用。&lt;/p&gt;
&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;h2 id=&quot;将日
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Expressjs cors入门简介</title>
    <link href="https://huangwang.github.io/2019/07/24/Expressjs-cors%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/24/Expressjs-cors入门简介/</id>
    <published>2019-07-24T14:50:35.000Z</published>
    <updated>2019-07-24T15:06:59.607Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs+expressjs+vuejs的解决方案中，服务器端应用开发和前端应用的开发是独立的。不过前端应用调用服务器端应用的RESTful API时涉及跨域资源访问，因此需要添加expressjs的cors模块。下面简要介绍cors模块的使用方法。</p><h1 id="跨域资源共享简介"><a href="#跨域资源共享简介" class="headerlink" title="跨域资源共享简介"></a>跨域资源共享简介</h1><p>跨域资源共享（CORS）是一种机制，允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。网页可以自由嵌入跨源图像，样式表，脚本，iframe和视频。但某些“跨域”请求，尤其是Ajax请求，默认情况下是由同源安全策略禁止的。</p><p>CORS定义了一种浏览器和服务器可以交互的方式，以确定允许跨源请求是否安全。它允许比纯粹的同源请求更多的自由和功能，但比简单地允许所有跨源请求更安全。 CORS规范最初是作为W3C建议书发布的，但该文件已经过时。目前主动维护的CORS定义规范是WHATWG的Fetch Living Standard。</p><p>CORS标准描述了新的HTTP标头，它为浏览器提供了一种仅在获得许可时才能请求远程URL的方法。 尽管服务器可以执行某些验证和授权，但浏览器通常负责支持这些标头并遵守它们所施加的限制。</p><p>对于可以修改数据的Ajax和HTTP请求方法（通常是GET以外的HTTP方法，或者某些MIME类型的POST用法），规范要求浏览器“预检”请求，通过HTTP OPTIONS请求从服务器请求支持的方法 方法，然后，在服务器“批准”时，使用实际的HTTP请求方法发送实际请求。 服务器还可以通知客户端是否应该随请求一起发送“凭证”（包括Cookie和HTTP身份验证数据）。</p><p></p><p align="center">    <img src="images/Flowchart_showing_Simple_and_Preflight_XHR.png" width="90%" alt="跨域资源共享流程图"></p><p></p><center>图1 跨域资源共享流程图</center><h1 id="CORS安装"><a href="#CORS安装" class="headerlink" title="CORS安装"></a>CORS安装</h1><p>CORS是一个node.js包，用于提供Connect / Express中间件，可用于启用具有各种选项的CORS。使用如下方式安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cors --save</span><br></pre></td></tr></table></figure><h1 id="CORS示例"><a href="#CORS示例" class="headerlink" title="CORS示例"></a>CORS示例</h1><ul><li>简单示例，允许所有跨域请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var cors = require(&apos;cors&apos;)</span><br><span class="line">var app = express()</span><br><span class="line"></span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line">app.get(&apos;/products/:id&apos;, function (req, res, next) &#123;</span><br><span class="line">  res.json(&#123;msg: &apos;This is CORS-enabled for all origins!&apos;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(80, function () &#123;</span><br><span class="line">  console.log(&apos;CORS-enabled web server listening on port 80&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">Cross-origin resource sharing</a>,by wikipedia.</li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a>,by 阮一峰.</li><li><a href="https://expressjs.com/en/resources/middleware/cors.html" target="_blank" rel="noopener">cors</a>,by expressjs.com.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在nodejs+expressjs+vuejs的解决方案中，服务器端应用开发和前端应用的开发是独立的。不过前端应用调用服务器端应用的RESTful API时涉及跨域资源访问，因此需要添加expressjs的cors模块。下面简要介绍cors模块的使用方法。&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>nodemon入门简介</title>
    <link href="https://huangwang.github.io/2019/07/23/nodemon%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/23/nodemon入门简介/</id>
    <published>2019-07-23T13:43:14.000Z</published>
    <updated>2019-07-23T13:49:39.066Z</updated>
    
    <content type="html"><![CDATA[<p>Nodemon是一个用于nodejs开发的工具程序，它将监视nodejs源中的任何更改并自动重新启动服务器。</p><p>nodemon不需要对代码或开发方法进行任何其他更改。 nodemon是node的替换包装器，在执行脚本时使用nodemon替换命令行上的单词node即可。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon [your node app]</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a>,by remy.</li><li><a href="https://bubkoo.com/2014/12/02/use-nodemon-with-node-applications/" target="_blank" rel="noopener">在 Express 开发中使用 nodemon</a>,by bubkoo.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nodemon是一个用于nodejs开发的工具程序，它将监视nodejs源中的任何更改并自动重新启动服务器。&lt;/p&gt;
&lt;p&gt;nodemon不需要对代码或开发方法进行任何其他更改。 nodemon是node的替换包装器，在执行脚本时使用nodemon替换命令行上的单词node
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>RESTful_API设计及测试入门</title>
    <link href="https://huangwang.github.io/2019/07/23/RESTful-API%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/07/23/RESTful-API设计及测试入门/</id>
    <published>2019-07-23T09:01:34.000Z</published>
    <updated>2019-07-24T14:27:50.164Z</updated>
    
    <content type="html"><![CDATA[<p>RESTful API是目前比较成熟的一套互联网应用程序的API设计理论，提供了一种统一的机制，方便不同的前端设备与后端进行通信，以应对前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）的状况。同时对开发人员而言，提供了一种规范，方便协作开发，降低了API接口设计的难度。</p><h1 id="RESTful-API设计规范"><a href="#RESTful-API设计规范" class="headerlink" title="RESTful API设计规范"></a>RESTful API设计规范</h1><p>请参考阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>。</p><h1 id="RESTful-API的测试方法"><a href="#RESTful-API的测试方法" class="headerlink" title="RESTful API的测试方法"></a>RESTful API的测试方法</h1><p>RESTful API设计好了之后，需要测试其可用性。常用的API测试工具有Postman。简单入门可参考<a href="https://www.cnblogs.com/mafly/p/postman.html" target="_blank" rel="noopener">Postman 安装及使用入门教程</a>。</p><p>Postman中使用HTTP POST方法测试RESTful API时，需要了解POST提交数据的方法。</p><h2 id="POST提交数据的方法"><a href="#POST提交数据的方法" class="headerlink" title="POST提交数据的方法"></a>POST提交数据的方法</h2><p>POST 几种请求主要包括 application/x-www-form-urlencoded、 multipart/form-data、 application/json、text/xml 四种的方法。</p><p>服务端通常是根据请求头（Request Headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。<br>POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。</p><ul><li>application/x-www-form-urlencoded (默认常用)</li></ul><p>这是最常见的 POST 提交数据的方式。浏览器的原生表单，如果不设置Content-type属性，就会默认该方式提交数据，并且提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。</p><ul><li>multipart/form-data</li></ul><p>这是另一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让表单的enctyped等于 multipart/form-data。</p><ul><li>application/json</li></ul><p>application/json 这种方案，可以方便的提交复杂的结构化数据，这种POST提交方式越来越多，用来告诉服务端消息主体是序列化后的 JSON 字符串。</p><p>由于JSON规范的流行，出了低版本的IE之外，各大浏览器都支持 JSON.stringify 将JSON数据字符串化（编码）传到服务器，还可以通过  JSON.parse 将字符串转化（解码）为JSON数据供前端渲染或者其他处理。</p><ul><li>text/xml</li></ul><p>现在基本不用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>,by 阮一峰.</li><li><a href="https://juejin.im/entry/59e460c951882542f578f2f0" target="_blank" rel="noopener">RESTful API 设计最佳实践</a>,by Philipp Hauer.</li><li><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">restful-api-design-references</a>,by aisuhua.</li><li><a href="https://learning.getpostman.com/docs/postman/launching_postman/installation_and_updates/" target="_blank" rel="noopener">Postman Doc</a>,by postman homepage.</li><li><a href="https://www.cnblogs.com/mafly/p/postman.html" target="_blank" rel="noopener">Postman 安装及使用入门教程</a>,by Mafly.</li><li><a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="noopener">四种常见的 POST 提交数据方式</a>,by Jerry Qu.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RESTful API是目前比较成熟的一套互联网应用程序的API设计理论，提供了一种统一的机制，方便不同的前端设备与后端进行通信，以应对前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）的状况。同时对开发人员而言，提供了一种规范，方便协作开发，降低了API接口设计的
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HTML_DOM文档对象模型简介</title>
    <link href="https://huangwang.github.io/2019/07/22/HTML-DOM%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/07/22/HTML-DOM文档对象模型简介/</id>
    <published>2019-07-22T13:21:52.000Z</published>
    <updated>2019-07-23T00:18:02.972Z</updated>
    
    <content type="html"><![CDATA[<p>最近要写一些八股文，上网一搜，好多范例，正想下载下来借鉴以下，可惜不让复制粘贴。不过难不倒我，直接使用文档对象模型(Document Object Model，DOM)提供编程接口，将整篇文章下来。</p><h1 id="DOM概述"><a href="#DOM概述" class="headerlink" title="DOM概述"></a>DOM概述</h1><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。</p><p>一个web页面是一个文档。这个文档可以在浏览器窗口或作为HTML源码显示出来。但上述两个情况中都是同一份文档。文档对象模型（DOM）提供了对同一份文档的另一种表现，存储和操作的方式。 DOM是web页面的完全的面向对象表述，它能够使用如 JavaScript等脚本语言进行修改。</p><h2 id="DOM-和-JavaScript"><a href="#DOM-和-JavaScript" class="headerlink" title="DOM 和 JavaScript"></a>DOM 和 JavaScript</h2><p>开始的时候，JavaScript和DOM是交织在一起的，但它们最终演变成了两个独立的实体。JavaScript可以访问和操作存储在DOM中的内容，因此我们可以写成这个近似的等式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API (web 或 XML 页面) = DOM + JS (脚本语言)</span><br></pre></td></tr></table></figure><p>DOM 被设计成与特定编程语言相独立，使文档的结构化表述可以通过单一，一致的API获得。尽管通常使用JavaScript操作DOM， 但DOM 也可以使用其他的语言来实现。</p><h2 id="DOM访问"><a href="#DOM访问" class="headerlink" title="DOM访问"></a>DOM访问</h2><p>在使用DOM时，您不需要做任何其他特殊的操作。不同的浏览器都有对DOM不同的实现， 这些实现对当前的DOM标准而言，都会呈现出不同程度的一致性，每个web浏览器都会使用一些文档对象模型，从而使页面可以被脚本语言访问。</p><p>当您在创建一个脚本时-无论是使用内嵌 \<script\>元素或者使用在web页面脚本加载的方法— 您都可以使用 document或 window 元素的API来操作文档本身或获取文档的子类（web页面中的各种元素）。</script\></p><p>您的DOM编程代码可能会像下面例子一样非常简单，如使用 window对象的alert()函数显示一个警告信息，或者使用比较复杂的方法来创建一个新的内容，如下面内容较长的实例所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;window.alert(&apos;welcome to my home page!&apos;);&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="重要的数据类型"><a href="#重要的数据类型" class="headerlink" title="重要的数据类型"></a>重要的数据类型</h2><p>为简单起见，在API参考文档中的语法实例通常会使用element(s) 指代节点，使用nodeList（s）或 element(s)来指代节点数组，使用 attribute(s)来指代属性节点。</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>解释</th></tr></thead><tbody><tr><td>document</td><td>当一个成员返回 document 对象 （例如，元素的 ownerDocument 属性返回它所属于 document ) ，这个对象就是root document 对象本身。 DOM document Reference 一章对 document 对象进行了描述。</td></tr><tr><td>element</td><td>element 是指由 DOM API 中成员返回的类型为 element 的一个元素或节点。 例如， document.createElement() 方法会返回一个 node 的对象引用，也就是说这个方法返回了在DOM中创建的 element。 element 对象实现了 DOM Element 接口以及更基本的 Node 接口，参考文档将两者都包含在内。</td></tr><tr><td>nodeList</td><td>nodeList 是一个元素的数组，如从 document.getElementsByTagName() 方法返回的就是这种类型。 nodeList 中的条目由通过下标有两种方式进行访问：list.item(1)和list[1]。两种方式是等价的，第一种方式中 item() 是 nodeList 对象中的单独方法。 后面的方式则使用了经典的数组语法来获取列表中的第二个条目。</td></tr><tr><td>attribute</td><td>当 attribute 通过成员函数 (例如，通过 createAttribute()方法) 返回时，它是一个为属性暴露出专门接口的对象引用。DOM中的属性也是节点，就像元素一样，只不过您可能会很少使用它。</td></tr><tr><td>namedNodeMap</td><td>namedNodeMap 和数组类似，但是条目是由name或index访问的，虽然后一种方式仅仅是为了枚举方便，因为在 list 中本来就没有特定的顺序。 出于这个目的，  namedNodeMap 有一个 item() 方法，你也可以从  namedNodeMap 添加或移除条目。</td></tr></tbody></table></div><p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p><p>节点的类型有七种。</p><ul><li>Document：整个文档树的顶层节点</li><li>DocumentType：doctype标签（比如\&lt;!DOCTYPE html>）</li><li>Element：网页的各种HTML标签（比如\<body\>、\<a\>等）</a\></body\></li><li>Attribute：网页元素的属性（比如class=”right”）</li><li>Text：标签之间或标签包含的文本</li><li>Comment：注释</li><li>DocumentFragment：文档的片段</li></ul><p>浏览器提供一个原生的节点对象Node，上面这七种节点都继承了Node，因此具有一些共同的属性和方法。</p><h2 id="DOM中核心接口"><a href="#DOM中核心接口" class="headerlink" title="DOM中核心接口"></a>DOM中核心接口</h2><p>在DOM编程时，通常使用的最多的就是 Document 和 window 对象。简单的说， window 对象表示浏览器中的内容，而 document 对象是文档本身的根节点。Element 继承了通用的 Node 接口,  将这两个接口结合后就提供了许多方法和属性可以供单个元素使用。在处理这些元素所对应的不同类型的数据时，这些元素可能会有专用的接口，如上节中的  table  对象的例子。</p><p>下面是在web和XML页面脚本中使用DOM时，一些常用的API简要列表。</p><ul><li>document.getElementById(id)</li><li>document.getElementsByTagName(name)</li><li>document.createElement(name)</li><li>parentNode.appendChild(node)</li><li>element.innerHTML</li><li>element.style.left</li><li>element.setAttribute()</li><li>element.getAttribute()</li><li>element.addEventListener()</li><li>window.content</li><li>window.onload</li><li>window.dump()</li><li>window.scrollTo()</li></ul><h1 id="文档下载实战"><a href="#文档下载实战" class="headerlink" title="文档下载实战"></a>文档下载实战</h1><p>以<a href="http://www.gwyxiezuo.com/cailiao/pouxi/2018-11-23/486dbfad4cf89816bef7921d14a11311.html" target="_blank" rel="noopener">示例范文</a>为例，提取其中内容。</p><h2 id="禁止复制粘贴的原理"><a href="#禁止复制粘贴的原理" class="headerlink" title="禁止复制粘贴的原理"></a>禁止复制粘贴的原理</h2><ul><li>阻止默认的事件响应</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">// 禁止右键菜单</span><br><span class="line">document.oncontextmenu = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止文字选择</span><br><span class="line">document.onselectstart = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止复制</span><br><span class="line">document.oncopy = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止剪切</span><br><span class="line">document.oncut = function()&#123; return false; &#125;;</span><br><span class="line">// 禁止粘贴</span><br><span class="line">document.onpaste = function()&#123; return false; &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>CSS阻止用户选择</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.style &#123;</span><br><span class="line">    user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="破解禁止复制粘贴"><a href="#破解禁止复制粘贴" class="headerlink" title="破解禁止复制粘贴"></a>破解禁止复制粘贴</h2><p>使用chrome打开该网页，在使用快捷键ctrl+shift+i，打开开发者工具，找到文档节点DIV的id为article，使用如下代码提取文章内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var node=document.getElementById(&apos;article&apos;)</span><br><span class="line">console.log(node.innerText)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://javascript.ruanyifeng.com/dom/node.html" target="_blank" rel="noopener">DOM 模型概述</a>,by 阮一峰.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">DOM概述</a>,by MDN web DOC.</li><li><a href="http://blog.haoji.me/disable-html-copy-and-paste.html?from=xa" target="_blank" rel="noopener">网页上如何实现禁止复制粘贴以及如何破解</a>,by 小茗同学.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近要写一些八股文，上网一搜，好多范例，正想下载下来借鉴以下，可惜不让复制粘贴。不过难不倒我，直接使用文档对象模型(Document Object Model，DOM)提供编程接口，将整篇文章下来。&lt;/p&gt;
&lt;h1 id=&quot;DOM概述&quot;&gt;&lt;a href=&quot;#DOM概述&quot; c
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="https://huangwang.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli-3集成jQWidgets</title>
    <link href="https://huangwang.github.io/2019/07/19/Vue-cli-3%E9%9B%86%E6%88%90jQWidgets/"/>
    <id>https://huangwang.github.io/2019/07/19/Vue-cli-3集成jQWidgets/</id>
    <published>2019-07-19T14:19:28.000Z</published>
    <updated>2019-07-19T14:26:16.770Z</updated>
    
    <content type="html"><![CDATA[<p>jQWidgets是一个软件框架，包含小部件，主题，输入验证，拖放插件，数据适配器，内置WAI-ARIA可访问性，国际化和MVVM支持。它建立在开放标准和技术HTML5，CSS，JavaScript和jQuery之上。该库用于开发响应式Web和移动应用程序。下面介绍在Vuejs中集成jQWidgets。</p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul><li>node.js: v10.16.0</li><li>npm: 6.9.0</li><li>vue: 2.6.10</li><li>cesium: 1.45.0</li><li>vue-cli: 3.9.2</li><li>webpack: 4.28.4</li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul><li>安装vue-cli</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ul><li>创建应用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create jqwidgets-vue-cli-app   //Choose the default preset</span><br></pre></td></tr></table></figure><ul><li>导航到应用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd jqwidgets-vue-cli-app</span><br></pre></td></tr></table></figure><ul><li>安装jQWidgets依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jqwidgets-scripts --save--dev</span><br></pre></td></tr></table></figure><ul><li><p>从node_modules/jqwidgets-scripts/jqwidgets复制styles文件夹到public文件夹。</p></li><li><p>在index.html链接 jqx.base.css 文件。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./styles/jqx.base.css&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>修改App.vue如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;JqxBarGauge ref=&quot;barGaugeReference&quot;</span><br><span class="line">        :width=&quot;600&quot; :height=&quot;600&quot; </span><br><span class="line">        :values=&quot;values&quot; :formatFunction=&quot;formatFunction&quot; </span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import JqxBarGauge from &apos;jqwidgets-scripts/jqwidgets-vue/vue_jqxbargauge.vue&apos;;</span><br><span class="line"> </span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            JqxBarGauge</span><br><span class="line">        &#125;,</span><br><span class="line">        data: function () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                values: [10, 20, 30, 40, 50]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            formatFunction: function (value, index, color) &#123;</span><br><span class="line">                return color;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>运行Vue Cli开发服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><ul><li>在浏览器中输入 localhost:8080 查看结果。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jqwidgets.com/vue-components-documentation/documentation/vue-cli/vue-cli.htm" target="_blank" rel="noopener">Vue CLI with jQWidgets</a>,by jQWidgets.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jQWidgets是一个软件框架，包含小部件，主题，输入验证，拖放插件，数据适配器，内置WAI-ARIA可访问性，国际化和MVVM支持。它建立在开放标准和技术HTML5，CSS，JavaScript和jQuery之上。该库用于开发响应式Web和移动应用程序。下面介绍在Vue
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli 3集成Cesium</title>
    <link href="https://huangwang.github.io/2019/07/18/Vue-cli-3%E9%9B%86%E6%88%90Cesium/"/>
    <id>https://huangwang.github.io/2019/07/18/Vue-cli-3集成Cesium/</id>
    <published>2019-07-18T15:48:35.000Z</published>
    <updated>2019-07-18T16:23:55.367Z</updated>
    
    <content type="html"><![CDATA[<p>之前记录了在Vue-Cli 2的基础上集成了Cesium，但现在Vue-Cli已更新到3，之前方法已不适用。在参考<a href="https://www.jianshu.com/p/0815c76d949f" target="_blank" rel="noopener">Vue-cli 3.0 + cesium 构建</a>的基础上，验证记录Vue-Cli 3脚手架工具中集成Cesium的过程。</p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul><li>node.js: v10.16.0</li><li>npm: 6.9.0</li><li>vue: 2.6.10</li><li>cesium: 1.45.0</li><li>vue-cli: 3.9.2</li><li>webpack: 4.28.4</li></ul><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><ul><li><p>安装nodejs</p></li><li><p>安装vue-cli脚手架</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">vue create my-project</span><br><span class="line">cd my-project</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><ul><li>安装 cesium</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cesium --save</span><br></pre></td></tr></table></figure><ul><li>新建 vue.config.js 文件，配置内容如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">const debug = process.env.NODE_ENV !== &apos;production&apos;</span><br><span class="line">let cesiumSource = &apos;./node_modules/cesium/Source&apos;</span><br><span class="line">let cesiumWorkers = &apos;../Build/Cesium/Workers&apos;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    baseUrl: &apos;&apos;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: 9999</span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        output: &#123;</span><br><span class="line">            sourcePrefix: &apos; &apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        amd: &#123;</span><br><span class="line">            toUrlUndefined: true</span><br><span class="line">        &#125;,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">            alias: &#123;</span><br><span class="line">                &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">                &apos;@&apos;: path.resolve(&apos;src&apos;),</span><br><span class="line">                &apos;cesium&apos;: path.resolve(__dirname, cesiumSource)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, cesiumWorkers), to: &apos;Workers&apos;&#125;]),</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &apos;Assets&apos;), to: &apos;Assets&apos;&#125;]),</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &apos;Widgets&apos;), to: &apos;Widgets&apos;&#125;]),</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &apos;ThirdParty/Workers&apos;), to: &apos;ThirdParty/Workers&apos;&#125;]),</span><br><span class="line">            new webpack.DefinePlugin(&#123;</span><br><span class="line">                CESIUM_BASE_URL: JSON.stringify(&apos;./&apos;)</span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">        module: &#123;</span><br><span class="line">            unknownContextCritical: /^.\/.*$/,</span><br><span class="line">            unknownContextCritical: false</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 src/components 下新建 CesiumViewer.vue 文件，内容如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;cesiumContainer&quot; class=&quot;fullSize&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;CesiumViewer&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.fullSize &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    border: none;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>修改 router.js ，引入 CesiumViewer组件，内容如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import CesiumViewer from &apos;./components/CesiumViewer.vue&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;CesiumViewer&apos;,</span><br><span class="line">      component: CesiumViewer</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>修改App.vue ，内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">  html, body, #cesiumContainer &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  #app &#123;</span><br><span class="line">    font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #2c3e50;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>最后修改 main.js 内容如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line">import store from &apos;./store&apos;</span><br><span class="line">import Cesium from &apos;cesium/Cesium&apos;</span><br><span class="line">// noinspection ES6UnusedImports</span><br><span class="line">import widget from &apos;cesium/Widgets/widgets.css&apos;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure><ul><li>最后 npm serve ，打开浏览器输入localhost:8080查看效果。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jianshu.com/p/0815c76d949f" target="_blank" rel="noopener">Vue-cli 3.0 + cesium 构建</a>,by QingMings.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前记录了在Vue-Cli 2的基础上集成了Cesium，但现在Vue-Cli已更新到3，之前方法已不适用。在参考&lt;a href=&quot;https://www.jianshu.com/p/0815c76d949f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js开发入门简易教程</title>
    <link href="https://huangwang.github.io/2019/07/18/Vue-js%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/07/18/Vue-js开发入门简易教程/</id>
    <published>2019-07-18T10:41:32.000Z</published>
    <updated>2019-07-18T11:29:48.798Z</updated>
    
    <content type="html"><![CDATA[<p>Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。Vue与React、Angular一起成为当前三大最流行的Web应用框架。下面简单介绍使用Vue CLI脚手架工具创建简单的Web应用。</p><h1 id="Vue-CLI简介"><a href="#Vue-CLI简介" class="headerlink" title="Vue CLI简介"></a>Vue CLI简介</h1><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p><ul><li>通过 @vue/cli 搭建交互式的项目脚手架。</li><li>通过 @vue/cli + @vue/cli-service-global 快速开始零配置原型开发。</li><li>一个运行时依赖 (@vue/cli-service)，该依赖：<ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；</li><li>可以通过项目内的配置文件进行配置；</li><li>可以通过插件进行扩展。</li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</li></ul><p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p><p>Vue CLI 有几个独立的部分:</p><ul><li>CLI</li></ul><p>CLI (@vue/cli) 是一个全局安装的 npm 包，提供了终端里的 vue 命令。它可以通过 vue create 快速创建一个新项目的脚手架，或者直接通过 vue serve 构建新想法的原型。你也可以通过 vue ui 通过一套图形化界面管理你的所有项目。</p><ul><li>CLI 服务</li></ul><p>CLI 服务 (@vue/cli-service) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 @vue/cli 创建的项目中。</p><p>CLI 服务是构建于 webpack 和 webpack-dev-server 之上的。它包含了：</p><pre><code>* 加载其它 CLI 插件的核心服务；* 一个针对绝大部分应用优化过的内部的 webpack 配置；* 项目内部的 vue-cli-service 命令，提供 serve、build 和 inspect 命令。</code></pre><p>如果你熟悉 create-react-app 的话，@vue/cli-service 实际上大致等价于 react-scripts，尽管功能集合不一样。</p><ul><li>CLI 插件</li></ul><p>CLI 插件是向你的 Vue 项目提供可选功能的 npm 包，例如 Babel/TypeScript 转译、ESLint 集成、单元测试和 end-to-end 测试等。Vue CLI 插件的名字以 @vue/cli-plugin- (内建插件) 或 vue-cli-plugin- (社区插件) 开头，非常容易使用。</p><p>当你在项目内部运行 vue-cli-service 命令时，它会自动解析并加载 package.json 中列出的所有 CLI 插件。</p><p>插件可以作为项目创建过程的一部分，或在后期加入到项目中。它们也可以被归成一组可复用的 preset。</p><h1 id="Vue-CLI安装"><a href="#Vue-CLI安装" class="headerlink" title="Vue CLI安装"></a>Vue CLI安装</h1><blockquote><p>Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>安装之后，你就可以在命令行中访问 vue 命令。你可以通过简单运行 vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>运行以下命令来创建一个新项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><p>在一个 Vue CLI 项目中，@vue/cli-service 安装了一个名为 vue-cli-service 的命令。你可以在 npm scripts 中以 vue-cli-service、或者从终端中以 ./node_modules/.bin/vue-cli-service 访问这个命令。</p><p>这是你使用默认 preset 的项目的 package.json：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vue-cli-service build&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你可以通过 npm 调用这些 script：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/Vue.js" target="_blank" rel="noopener">Vue.js</a>,by wikipedia.</li><li><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">vue cli</a>,by vuejs homepage.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。Vue与React、Angular一起成为当前三大最流行的Web应用框架。下面简单介绍使用Vue CLI脚手架工具创建简单的Web应用。&lt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="vuejs" scheme="https://huangwang.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Expressjs框架的安装使用</title>
    <link href="https://huangwang.github.io/2019/07/18/Expressjs%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://huangwang.github.io/2019/07/18/Expressjs框架的安装使用/</id>
    <published>2019-07-18T05:18:54.000Z</published>
    <updated>2019-07-18T05:28:46.211Z</updated>
    
    <content type="html"><![CDATA[<p>Express是高度包容、快速而极简的 Node.js Web 框架。下面简单介绍Express框架的安装和使用。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装最新Nodejs长期支持版"><a href="#安装最新Nodejs长期支持版" class="headerlink" title="安装最新Nodejs长期支持版"></a>安装最新Nodejs长期支持版</h2><p>前往<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">nodejs官方网站</a>下载其最新长期支持版，并安装。</p><h2 id="安装Express生成器"><a href="#安装Express生成器" class="headerlink" title="安装Express生成器"></a>安装Express生成器</h2><p>Express生成器是一个脚手架工具，能够快速生成标准的Express Web框架，简化开发过程。具体安装方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express-generator@4</span><br></pre></td></tr></table></figure><p>创建APP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express /tmp/foo &amp;&amp; cd /tmp/foo</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>启动Web服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接启动</span><br><span class="line">npm start</span><br><span class="line"># 调试启动</span><br><span class="line">SET DEBUG=server:* &amp; npm start</span><br></pre></td></tr></table></figure><p>访问网站： <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://expressjs.com/zh-cn/" target="_blank" rel="noopener">Express</a>,by Express homepage.</li><li><a href="https://github.com/expressjs/express" target="_blank" rel="noopener">Express github</a>,by Express github.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Express是高度包容、快速而极简的 Node.js Web 框架。下面简单介绍Express框架的安装和使用。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Excel宏编程简易教程</title>
    <link href="https://huangwang.github.io/2019/07/16/Excel%E5%AE%8F%E7%BC%96%E7%A8%8B%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/07/16/Excel宏编程简易教程/</id>
    <published>2019-07-16T12:00:15.000Z</published>
    <updated>2019-07-17T04:41:44.609Z</updated>
    
    <content type="html"><![CDATA[<p>期末了，媳妇计算学生平时成绩好辛苦，于是准备编写Excel宏程序提高媳妇工作的效率，节省时间。于是简单记录Excel宏编程的相关知识。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>为了编写Excel宏，首先需要了解一些基本概念：</p><h2 id="工作簿"><a href="#工作簿" class="headerlink" title="工作簿"></a>工作簿</h2><p>工作簿相关概念有：Workbooks、Workbook、ActiveWorkbook、ThisWorkbook。</p><ul><li><p>Workbooks集合包含excel中所有当前打开的excel工作簿，亦即所有打开的excel文件；</p></li><li><p>Workbook对应Workbooks中的成员，即其中的excel文件；</p></li><li><p>ActiveWorkbook代表当前处于活动状态的工作簿，即当前显示的excel文件；</p></li><li><p>ThisWorkbook代表其中有Visual Basic代码正在运行的工作簿。</p></li></ul><p>在具体使用中可用Workbooks(index)来引用Workbook对象，其中index为工作簿名称或编号，如Workbooks(1)、 Workbooks(“年度报表.xls”)。而编号按照创建或打开工作簿的顺序来确定，第一个打开的工作簿编号为1，第二个打开的工作簿为2……。</p><h2 id="工作表"><a href="#工作表" class="headerlink" title="工作表"></a>工作表</h2><p>工作表相关概念有：Worksheets、Worksheet、ActiveSheet。</p><ul><li><p>Worksheets集合包含工作簿中所有的工作表，即一个excel文件中的所有数据表页；</p></li><li><p>Worksheet则代表其中的一个工作表；</p></li><li><p>ActiveSheet代表当前处于的活动状态工作表，即当前显示的一个工作表。</p></li></ul><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>图表相关概念有：Chart 、Charts、ChartObject、ChartObjects、ActiveChart。</p><ul><li><p>Chart代表工作簿中的图表。该图表既可为嵌入式图表（包含在ChartObject中），也可为一个分开的（单独的）图表工作表。</p></li><li><p>Charts代表指定工作簿或活动工作簿中所有图表工作表的集合，但不包括嵌入式在工作表或对话框编辑表中的图表。使用Charts(index) 可引用单个Chart图表，其中index是该图表工作表的索引号或名称；如Charts(1)、Charts(“销售图表”)。</p></li><li><p>ChartObject代表工作表中的嵌入式图表，其作用是作为Chart对象的容器。利用ChartObject可以控制工作表上嵌入式图表的外观和尺寸。</p></li><li><p>ChartObjects代表指定的图表工作表、对话框编辑表或工作表上所有嵌入式图表的集合。</p></li></ul><h2 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h2><p>单元格相关概念有：Cells、ActiveCell、Range、Areas。</p><ul><li><p>Cells(row,column)代表单个单元格，其中row为行号，column为列号。如可以用Cells(1,1)、Cells(10,4)来引用”A1”、”D10” 单元格。</p></li><li><p>ActiveCell代表活动工作表的活动单元格，或指定工作表的活动单元格。</p></li><li><p>Range代表工作表中的某一单元格、某一行、某一列、某一选定区域（该选定区域可包含一个或若干连续单元格区域）或者某一三维区域。可用Range(arg)来引用单元格或单元格区域，其中arg可为单元格号、单元格号范围、单元格区域名称。如Range(“A5”)、 Range(“A1:H8”)、Range(“Criteria”)。虽然可用Range(“A1”)返回单元格A1，但用Cells更方便，因为此时可 用变量指定行和列。</p></li><li><p>Areas 为选定区域内的连续单元格块的集合，其成员是Range对象。</p></li></ul><h2 id="行与列"><a href="#行与列" class="headerlink" title="行与列"></a>行与列</h2><p>行与列相关概念有：Rows、Columns、Row、Column。</p><p>Rows、Columns分别代表活动工作表、单元格区域范围Range、指定工作表中的所有行数、列数。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Visual Basic for Applications（VBA）是一种Visual Basic的一种宏语言，主要能用来扩展Windows的应用程序功能，特别是Microsoft Office软件。也可说是一种应用程序视觉化的Basic Sc​​ript。 1994年发行的Excel 5.0版本中，即具备了VBA的宏功能。Excel宏编程主要使用VBA。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>即Primary Type Data，下述列表的括号内为字节数：</p><ul><li>Byte (1)：无符号类型，取值范围0-255</li><li>Boolean (2)</li><li>Integer (2)</li><li>Long (4)</li><li>Single (4)</li><li>Double (8)</li><li>Currency (8)</li><li>Decimal (14)</li><li>Date (8)</li><li>String</li><li>Object (4)</li><li>Variant （根据分配确定）</li></ul><h3 id="自定义的数据类型"><a href="#自定义的数据类型" class="headerlink" title="自定义的数据类型"></a>自定义的数据类型</h3><p>相当于C语言的struct，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Type 自定义类型名</span><br><span class="line">     元素名  As 类型</span><br><span class="line">      …</span><br><span class="line">     [元素名 As 类型]</span><br><span class="line">End Type</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Option Base 0 &apos;數組索引值從0開始</span><br><span class="line">Option Base 1 &apos;數組索引值從1開始</span><br><span class="line">Dim MyArray(10) &apos;聲明一個數組變量，10是最大的可用的數組索引值</span><br><span class="line">MyArray(5) = 101 &apos;給數組的元素賦值</span><br><span class="line">Dim Data(10,5) &apos;聲明一個二維數組變量</span><br><span class="line">Data(1,1) = &quot;A001&quot; &apos;給數組元素賦值</span><br><span class="line">Dim cArr(-11 To 20, 1 To 3) As String &apos;聲明一個數組，定義數組索引值的上下界</span><br><span class="line">Dim dArr() As String &apos;聲明動態數組</span><br><span class="line">ReDim dArr(0 To 5, 1 To 2) &apos;改變動態數組的尺寸默認把原數據清除。如果保留原來的數據，必須加上參數Preserve。</span><br><span class="line">                                &apos;使用Preserve參數時只能改變最後一維的大小</span><br><span class="line">If UBound(vTemp) = -1 Then</span><br><span class="line">     &apos;判斷數組變量vTemp是否為 空數組</span><br><span class="line">End If</span><br><span class="line">Erase MyArrar, Data &apos;Eras​​e語句清除數組元素，釋放變量佔用的空間</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>日期常量由符号“#”将字符括起来，如#2012-1-1#。</p><p>系统定义常量有3个：True、False和Null。</p><p>固有常量是编程时引用的对象库定义的常量。所有固有常量都可以在宏或VBA代码中使用。通常，固有常量通过前两个字母来指明定义该常量。来自VB库的常量则以“vb”开头。来自Access的常量以“ac”开头。可以使用对象浏览器来查看所有对象库中的固有常量列表。</p><p>可以自行定义常量。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Global Const 符号常量名称 = 常量值</span><br></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if 條件1 then</span><br><span class="line">   語句1</span><br><span class="line">elseif 條件2 then</span><br><span class="line">   語句2</span><br><span class="line">elseif ...</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">   語句n</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><h3 id="Select-Case-语句"><a href="#Select-Case-语句" class="headerlink" title="Select Case 语句"></a>Select Case 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Select Case 表達式</span><br><span class="line">   Case 表達式列表1</span><br><span class="line">       語句1</span><br><span class="line">   Case 表達式列表2</span><br><span class="line">       語句2</span><br><span class="line">       ...</span><br><span class="line">   Case 表達式列表n</span><br><span class="line">       語句n</span><br><span class="line">End Select</span><br></pre></td></tr></table></figure><h3 id="Do…Loop-语句"><a href="#Do…Loop-语句" class="headerlink" title="Do…Loop 语句"></a>Do…Loop 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Do While或Until 條件</span><br><span class="line">   語句塊1</span><br><span class="line">   Exit Do</span><br><span class="line">   語句塊2</span><br><span class="line">Loop</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Do</span><br><span class="line">   語句塊1</span><br><span class="line">   Exit Do</span><br><span class="line">   語句塊2</span><br><span class="line">Loop While或Until 條件</span><br></pre></td></tr></table></figure><h3 id="For…Next语句"><a href="#For…Next语句" class="headerlink" title="For…Next语句"></a>For…Next语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For 循環控制變量=初值To 終值Step 步長</span><br><span class="line">   語句塊 ‘Exit For語句可以跳出循環體</span><br><span class="line">Next</span><br></pre></td></tr></table></figure><h3 id="For-Each-…-Next语句"><a href="#For-Each-…-Next语句" class="headerlink" title="For Each … Next语句"></a>For Each … Next语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For Each 循環控制變量 In 集合變量</span><br><span class="line">   語句塊 </span><br><span class="line">   Exit For語句可以跳出循環體</span><br><span class="line">Next 循環控制變量</span><br></pre></td></tr></table></figure><h3 id="跳出本次循环的continue语句"><a href="#跳出本次循环的continue语句" class="headerlink" title="跳出本次循环的continue语句"></a>跳出本次循环的continue语句</h3><p>VBA没有类似C语言的continue语句。通常可如此写程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">For 循環控制變量=初值 To 終值 Step 步長</span><br><span class="line">   Do &apos;用于模拟continue</span><br><span class="line">       語句塊 </span><br><span class="line">       If 条件 Then Exit Do &apos;用于模拟continue</span><br><span class="line">       語句塊 </span><br><span class="line">   Loop While False &apos;用于模拟continue</span><br><span class="line">Next</span><br></pre></td></tr></table></figure><h3 id="With语句"><a href="#With语句" class="headerlink" title="With语句"></a>With语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">With 對象引用</span><br><span class="line">   語句塊</span><br><span class="line">End With</span><br></pre></td></tr></table></figure><h3 id="On-Error语句"><a href="#On-Error语句" class="headerlink" title="On Error语句"></a>On Error语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On Error Goto 出錯處理語句的label &apos;跳轉到出錯處理語句</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On Error Resume Next &apos;遇到錯誤，不管錯誤，繼續往下執行</span><br></pre></td></tr></table></figure></p><h2 id="过程与函数"><a href="#过程与函数" class="headerlink" title="过程与函数"></a>过程与函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sub 過程名(參數表)</span><br><span class="line">    語句塊</span><br><span class="line">    Exit Sub</span><br><span class="line">    語句塊</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function 函數名(參數表) As Type</span><br><span class="line">   語句塊</span><br><span class="line">   函數名=表達式</span><br><span class="line">   Exit Function</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure><h2 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h2><p>VBA的常用内置函数列表:</p><ul><li>MsgBox</li><li>InputBox</li><li>舍入函数：Fix 向0取整,Int向下取整, Round四舍五入</li><li>Rnd 返回0-1内的单精度随机数</li><li>字符串函数：<ul><li>Filter：对字符串的一维数组的过滤</li><li>InStr([Start, ]<str1>,<str2>[, Compare])与InStrRev： 查找子串</str2></str1></li><li>Len 字符串长度</li><li>Join：连接一维数组中的所有子字符串</li><li>Left,Right,Mid 截取子字符串</li><li>Space(数值) 生成空格字符串</li><li>Ucase,Lcase 大小写转换函数</li><li>Ltrim, Rtrim,Trim 删除首尾空格</li><li>Replace</li><li>Split：分割一个字符串成为一维数组</li><li>StrComp：字符串比较</li><li>StrConv：字符串转换</li><li>String(number, character)：制定字符重复若干次</li><li>StrReverse</li></ul></li><li>日期/时间有关函数：<ul><li>Year, Month, Day, WeekDay,Hour,Minute,Second 截取日期时间分量</li><li>DateAdd 日期/时间增量函数</li><li>DateDiff(&lt;间隔类型&gt;,&lt;日期1&gt;,&lt;日期2&gt;[,W1][,W2])日期/时间的距离函数</li><li>DatePart(&lt;分割类型&gt;,&lt;日期&gt;[,w1][,w2])时间分割函数</li><li>DateSerial(&lt;表达式1&gt;,&lt;表达式2&gt;,&lt;表达式3&gt;) 合成日期；DateValue(“字符串表达式”)返回日期；</li><li>Date,Time,Now,Timer 返回日期时间</li><li>DateValue</li><li>TimeSerial：由时间序列得到时间对象</li><li>TimeValue：由时间字符串得到时间对象</li><li>Weekday：获得日期的周几</li><li>WeekdayName</li></ul></li><li>转换函数：CBool、CByte、CCur、 CDate、 CDbl、CDec、CInt、 CLng、CLngLng、CLngPtr、CSng、CStr、CVar、CVErr、Asc(&lt;字符串表达式&gt;)返回第一个字符的Ascii编码值、Chr(ASCII码)返回字符、Hex、Oct、Str(&lt;数值表达式&gt;)返回字符串、Val(string)、Format、FormatCurrency、FormatDateTime、FormatNumber、FormatPercent、MonthName</li><li>Nz(表达式或字段属性值[,规定值])如果是空，则返回0或者””或者函数的第二个参数值</li><li>验证函数：isNumeric、isDate、isNull、isEmpty IsArray、IsError、IsMissing、IsObject</li><li>数学函数：Abs、Sqr、Tan、Atn（即atan）、Sin、Cos、Exp（e为基的指数）、Log自然对数</li><li>Array:构造一个Array对象</li><li>CallByName: get or set a property, or invoke a method at run time using a string name.</li><li>控制流：Choose:类似于C语言的select语句、IIf相当于IF-ELSE语句、Switch</li><li>Command：获取命令行参数</li><li>CreateObject：创建ActiveX对象</li><li>CurDir：返回指定驱动器的当前工作路径</li><li>由基本数学函数导出的函数：Sec、Cosec、Cotangent、Cotan、Arcsin、Arccos、Arcsec、Arccosec、Arccotan、HSin、HCos、HTan、HSec、HCosec、HCotan、HArcsin、HArccos、HArctan、HArcsec、HArccosec、HArccotan、LogN</li><li>DoEvents：暂时把CPU控制权交回给系统。</li><li>Environ：返回环境变量的值</li><li>文件操作：<ul><li>Dir：返回满足条件的所有文件、目录的名字</li><li>EOF</li><li>FileAttr</li><li>FileDateTime</li><li>FileLen</li><li>FreeFile Function</li><li>GetAttr：返回文件、目录的属性值</li><li>Input：读取文件</li><li>Loc：文件指针位置</li><li>LOF：文件打开时的指针位置</li><li>Seek：文件指针定位</li><li>Spc：使用Print做position output</li><li>Tab：用于Print函数</li><li>Error:错误号对应的错误消息</li><li>Windows Registry中的数据：GetAllSettings、SaveSetting、DeleteSetting、GetSetting</li><li>GetObject：ActiveX组建的引用</li><li>IMEStatus：返回当前Input Method Editor (IME)。</li><li>Macintosh平台：MacID、MacScript</li></ul></li><li>金融函数：<ul><li>DDB：使用double-declining balance计算贬值</li><li>FV:计算固定利率的年金</li><li>IPmt：计算利率</li><li>IRR：计算利率</li><li>MIRR：计算利率</li><li>NPer：计算周期数</li><li>NPV：计算net present value</li><li>Pmt：计算支付数</li><li>PPmt：计算本金支付数</li><li>PV：计算present value</li><li>Rate：利息率</li><li>SLN：straight-line depreciation</li><li>SYD：计算sum-of-years’ digits depreciation</li></ul></li><li>Partition：返回字符串，表示一个数值名字落在各个range内。常用于SQL select语句</li><li>QBColor：颜色值</li><li>RGB：颜色值</li><li>TypeName：得到变量的类型名</li><li>VarType：得到变量的类型数</li></ul><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>比较特殊的运算符有指数运算^，浮点除法/，整数除法\，取模运算Mod，不等逻辑比较运算&lt;&gt;</p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>在Excel开发工具中点击录制宏，生成一个VBA过程，创建如下代码计算学生平均成绩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Sub 计算平均成绩()</span><br><span class="line">&apos;</span><br><span class="line">&apos; 计算平均成绩 宏</span><br><span class="line">&apos; 计算平均成绩</span><br><span class="line">&apos;</span><br><span class="line">&apos; 快捷键: Ctrl+l</span><br><span class="line">&apos;</span><br><span class="line">    Application.Goto Reference:=&quot;计算平均成绩&quot;</span><br><span class="line">    </span><br><span class="line">    Dim count As Integer &apos; 统计学生总数</span><br><span class="line">    count = Range(&quot;A1&quot;).CurrentRegion.Rows.count &apos; 统计学生总数</span><br><span class="line">    </span><br><span class="line">    ActiveSheet.Cells(1, &quot;E&quot;).Value = &quot;平均成绩&quot;</span><br><span class="line">    Dim workSocre  As Double &apos; 课程分</span><br><span class="line">    Dim videoScore As Double &apos; 视频分</span><br><span class="line">    Dim discussScore As Double &apos; 讨论分</span><br><span class="line">    </span><br><span class="line">    For i = 2 To count</span><br><span class="line">        &apos; 计算学生平均成绩</span><br><span class="line">        workSocre = ActiveSheet.Cells(i, &quot;A&quot;).Value</span><br><span class="line">        videoScore = ActiveSheet.Cells(i, &quot;B&quot;).Value</span><br><span class="line">        discussScore = Discuss(ActiveSheet.Cells(i, &quot;C&quot;).Value)</span><br><span class="line">        ActiveSheet.Cells(i, &quot;E&quot;).Value = workSocre * 0.6 + videoScore * 100 * 0.2 + discussScore * 0.2</span><br><span class="line">    Next</span><br><span class="line">    MsgBox (&quot;平均成绩计算完成!&quot;)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function Discuss(discussCount As Integer) As Integer</span><br><span class="line">    Dim score As Integer</span><br><span class="line">    Select Case discussCount</span><br><span class="line">        Case Is &gt;= 20</span><br><span class="line">        score = 100</span><br><span class="line">        Case Is &gt;= 15</span><br><span class="line">        score = 80</span><br><span class="line">        Case Is &gt;= 10</span><br><span class="line">        score = 60</span><br><span class="line">        Case Is &gt;= 5</span><br><span class="line">        score = 40</span><br><span class="line">        Case Is &gt; 0</span><br><span class="line">        score = 20</span><br><span class="line">        Case Is = 0</span><br><span class="line">        score = 0</span><br><span class="line">    End Select</span><br><span class="line">    Discuss = score</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/lyhdream/article/details/9060801" target="_blank" rel="noopener">Excel宏教程 (宏的介绍与基本使用)</a>,by 远洪.</li><li><a href="https://zh.wikipedia.org/wiki/Visual_Basic_for_Applications" target="_blank" rel="noopener">Visual Basic for Applications</a>,by wikipedia.</li><li><a href="https://www.jianshu.com/p/bd760f3c82fd" target="_blank" rel="noopener">VBA——Range操作</a>,by 风之工程师.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;期末了，媳妇计算学生平时成绩好辛苦，于是准备编写Excel宏程序提高媳妇工作的效率，节省时间。于是简单记录Excel宏编程的相关知识。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="语法" scheme="https://huangwang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="VBA" scheme="https://huangwang.github.io/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>小波变换学习笔记</title>
    <link href="https://huangwang.github.io/2019/07/14/%E5%B0%8F%E6%B3%A2%E5%8F%98%E6%8D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/07/14/小波变换学习笔记/</id>
    <published>2019-07-14T07:52:21.000Z</published>
    <updated>2019-07-14T07:59:07.290Z</updated>
    
    <content type="html"><![CDATA[<p>小波分析（英语：wavelet analysis）或小波变换（英语：wavelet transform）是指用有限长或快速衰减的“母小波”（mother wavelet）的振荡波形来表示信号。该波形被缩放和平移以匹配输入的信号。</p><p>小波变化的发展，承袭Gabor transform的局部化思想，并且克服了傅里叶和Gabor transform的部分缺陷，小波变换提供了一个可以调变的时频窗口，窗口的宽度(width)随着频率变化，频率增高时，时间窗口的宽度就会变窄，以提高分辨率．小波在整个时间范围内的振幅平均值为0，具有有限的持续时间和突变的频率与震幅，可以是不规则，或不对称的信号。</p><p>小波变换分成两个大类：离散小波变换（DWT） 和连续小波变换（CWT）。两者的主要区别在于，连续变换在所有可能的缩放和平移上操作，而离散变换采用所有缩放和平移值的特定子集。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/22864189" target="_blank" rel="noopener">能不能通俗的讲解下傅立叶分析和小波分析之间的关系？</a>,by zhihu.</li><li><a href="https://www.zhihu.com/question/278337954" target="_blank" rel="noopener">什么是线性平稳信号和非线性非平稳信号？</a>,by zhihu.</li><li><a href="https://zhuanlan.zhihu.com/p/22450818" target="_blank" rel="noopener">形象易懂讲解算法I——小波变换</a>,by 咚懂咚懂咚.</li><li><a href="https://zhuanlan.zhihu.com/p/66189212" target="_blank" rel="noopener">从傅里叶变换进阶到小波变换（一）</a>,by 1335.</li><li><a href="https://zhuanlan.zhihu.com/p/34989414" target="_blank" rel="noopener">信号频域分析方法的理解（频谱、能量谱、功率谱、倒频谱、小波分析）</a>,by Mr.括号.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E6%B3%A2%E5%88%86%E6%9E%90" target="_blank" rel="noopener">小波分析</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小波分析（英语：wavelet analysis）或小波变换（英语：wavelet transform）是指用有限长或快速衰减的“母小波”（mother wavelet）的振荡波形来表示信号。该波形被缩放和平移以匹配输入的信号。&lt;/p&gt;
&lt;p&gt;小波变化的发展，承袭Gabor
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>信号与线性系统学习笔记</title>
    <link href="https://huangwang.github.io/2019/07/05/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/07/05/信号与线性系统学习笔记/</id>
    <published>2019-07-05T01:24:25.000Z</published>
    <updated>2019-07-08T05:02:29.551Z</updated>
    
    <content type="html"><![CDATA[<p>信号与线性系统是学习自动控制理论的前置专业基础课，可惜当年就学得似懂非懂，过了这么多年，知识早就忘了，现在捡起来温习一下，算是温故而知新吧。</p><h1 id="信号与系统基础"><a href="#信号与系统基础" class="headerlink" title="信号与系统基础"></a>信号与系统基础</h1><p>连续的或离散的动态系统，按其基本特性可分为线性的与非线性的；时变的与时不变的；因果的与非因果的；稳定与非稳定的。</p><h1 id="连续系统的时域分析"><a href="#连续系统的时域分析" class="headerlink" title="连续系统的时域分析"></a>连续系统的时域分析</h1><p>对单输入与单输出的线性时不变连续系统，通常适用n阶常系数线性微分方程表示：</p><script type="math/tex; mode=display">y^{(n)}(t)+a_{n-1}y^{(n-1)}(t)+...+a_1y^{(1)}(t)+a_0y(t) \\=b_mf^{(m)}(t)+b_{m-1}f^{(m-1)}(t)+...+b_1f^{(1)}(t)+b_0f(t) \tag{1}</script><p>或缩写为</p><script type="math/tex; mode=display">\sum_{i=0}^{n}a_iy^{(i)}(t)=\sum_{j=0}^{m}b_jy^{(j)}(t)</script><p>其中$f(t)$为激励，$y(t)$为响应，$a_i(i=0,1,…,n)$和$b_j(j=0,1,…,n)$均为常数，$a_n=1$。</p><p>该微分方程的全解由齐次解$y_h(t)$和特解$y_p(t)$组成，即</p><script type="math/tex; mode=display">y(t)=y_h(t)+y_p(t)</script><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/31383909" target="_blank" rel="noopener">1. 信号与线性系统—-究竟在学啥？</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/31921889" target="_blank" rel="noopener">2. 信号与线性系统——信号的分解</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/32205610" target="_blank" rel="noopener">3. 信号与线性系统——啥？卷积？</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/32963217" target="_blank" rel="noopener">4. 信号与线性系统——你好，傅里叶</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/33291443" target="_blank" rel="noopener">5. 信号与线性系统——F.T&amp;L.T</a>,by Dean Rossi.</li><li><a href="https://zhuanlan.zhihu.com/p/35533240" target="_blank" rel="noopener">7. 信号与线性系统——系统的分析方法</a>,by Dean Rossi.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;信号与线性系统是学习自动控制理论的前置专业基础课，可惜当年就学得似懂非懂，过了这么多年，知识早就忘了，现在捡起来温习一下，算是温故而知新吧。&lt;/p&gt;
&lt;h1 id=&quot;信号与系统基础&quot;&gt;&lt;a href=&quot;#信号与系统基础&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="控制理论" scheme="https://huangwang.github.io/tags/%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>傅里叶级数和变换学习笔记</title>
    <link href="https://huangwang.github.io/2019/07/01/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E5%92%8C%E5%8F%98%E6%8D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/07/01/傅里叶级数和变换学习笔记/</id>
    <published>2019-07-01T12:50:33.000Z</published>
    <updated>2019-07-13T04:10:02.806Z</updated>
    
    <content type="html"><![CDATA[<p>在数学中，<strong>傅里叶级数（Fourier series）</strong>能将任何周期函数或周期信号分解成一个（可能由无穷个元素组成的）简单振荡函数的集合，即正弦函数和余弦函数（或者，等价地使用复指数）。<strong>傅里叶变换（Fourier transform）</strong>是一种线性积分变换，用于信号在时域（或空域）和频域之间的变换，在物理学和工程学中有许多应用。傅里叶变换就像化学分析，确定物质的基本成分；信号来自自然界，也可对其进行分析，确定其基本成分。</p><h1 id="傅里叶级数公式"><a href="#傅里叶级数公式" class="headerlink" title="傅里叶级数公式"></a>傅里叶级数公式</h1><p>傅里叶级数的公式：</p><script type="math/tex; mode=display">f(t) =\frac{a_{0}}{2}+a_{1}cos(\omega t)+b_{1}sin(\omega t) \\+a_{2}cos(2\omega t)+b_{2}sin(2\omega t) +...\\ =\frac{a_{0}}{2}+\sum_{n=1}^{\infty}{[a_{n}cos(n\omega t)+b_{n}sin(n\omega t)]}  \tag{1}</script><p>其中：</p><script type="math/tex; mode=display">a_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)cos(n\omega t)dt \tag{2}</script><script type="math/tex; mode=display">b_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)sin(n\omega t)dt \tag{3}</script><h1 id="傅里叶级数的收敛性"><a href="#傅里叶级数的收敛性" class="headerlink" title="傅里叶级数的收敛性"></a>傅里叶级数的收敛性</h1><p>若傅里叶级数不收敛于$f(t)$，则不能在两者之间画等号。关于傅里叶级数的收敛性，最常用的为狄利克雷条件：</p><blockquote><p>对于一个周期为$2\pi$的函数$f(x)$，如果它满足：</p><p>（1）在一个周期内连续或只有有限个第一类间断点；</p><p>（2）在一个周期内只有有限个极值点。</p><p>那么$f(x)$的傅里叶级数收敛于$\frac{f(x+0)+f(x-0)}{2}$。</p></blockquote><p>狄利克雷条件只是傅里叶级数收敛的充分条件，而非必要条件，级数收敛不代表该条件成立。</p><p>下面给出一个周期函数的傅里叶级数的计算示例。</p><p>周期为$2\pi$的函数$f(x)$，在$(-\pi,\pi)$上$f(x)=x$，求$f(x)$的傅里叶级数。</p><script type="math/tex; mode=display">a_n=\frac{1}{\pi}\int_{-\pi}^{\pi}x\mathrm{cos}nx\mathrm{d}x=0</script><script type="math/tex; mode=display">b_n=\frac{1}{\pi}\int_{-\pi}^{\pi}x\mathrm{sin}nx\mathrm{d}x=(-1)^{n+1}\frac{2}{n}</script><p>狄利克雷条件显然成立，所以</p><script type="math/tex; mode=display">f(x)=\sum^{\infty}_{n=1}(-1)^{n+1}\frac{2}{n}\mathrm{sin}nx</script><h1 id="傅里叶级数的指数形式"><a href="#傅里叶级数的指数形式" class="headerlink" title="傅里叶级数的指数形式"></a>傅里叶级数的指数形式</h1><p>令$i$表示虚数单位，傅里叶级数的指数形式为:</p><script type="math/tex; mode=display">f(t)=\sum^{\infty}_{n=-\infty}c_ne^{in\omega t}</script><p>其中,</p><script type="math/tex; mode=display">c_n=\frac{1}{T}\int^{T}_{0}f(t)e^{-in\omega t}\mathrm{d}t</script><p>指数形式与三角形式是相等的，推导如下:</p><script type="math/tex; mode=display">\begin{aligned}&\quad\sum^{\infty}_{n=-\infty}c_ne^{in\omega t}\\ &=c_0+\sum^{\infty}_{n=1}(c_ne^{in\omega t}+c_{-n}e^{-in\omega t}） \\ &=c_0+\sum^{\infty}_{n=1}[(c_n+c_{-n})\mathrm{cos}n\omega t+i(c_n-c_{-n})\mathrm{sin}n\omega t] \\ &=\frac{a_0}{2}+\sum_{n=1}^{\infty}(a_n \mathrm{cos}n \omega t+b_n \mathrm{sin}n \omega t)     \end{aligned}</script><h1 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h1><p>傅里叶变换是傅里叶级数在非周期函数上的推广。对非周期函数$f(x)$，其周期$T\rightarrow\infty$。因为$\omega_0=\frac{2\pi}{T}$，则$\omega_0\rightarrow0$。</p><p>观察傅里叶级数的指数形式</p><script type="math/tex; mode=display">f(t)=\sum^{\infty}_{n=-\infty}c_ne^{in\omega t} \tag{1}</script><p>其中,</p><script type="math/tex; mode=display">c_n=\frac{1}{T}\int^{T}_{0}f(t)e^{-in\omega t}\mathrm{d}t \tag{2}</script><p>当 $\omega_0\rightarrow0$ 时， $n\omega_0$ 从原本的离散变化变成了连续变化， $c_n$ 也就可以表示为关于 $n\omega_0$ 的函数 $F(n\omega_0)$ 。</p><p>傅里叶级数中公式（2）的积分的上下限不一定是$0$到$T$，只需要$f(t)$的一个周期就可以了。即对于任意的$x_0$, 公式(2)可表示为：</p><script type="math/tex; mode=display">c_n=\frac{1}{T}\int^{x_0+T}_{x_0}f(t)e^{-in\omega_0 t}\mathrm{d}t \tag{3}</script><p>这个积分需要积一整个周期，而此时的周期为无穷大，也就是整个定义域上都需要积，所以要从$-\infin$积分到$\infin$。</p><p>只需要让上式中的 $T\rightarrow\infty$ ， $\omega_0\rightarrow0$ ，便可以得到 $F(n\omega_0)$ 的表达式。不妨令 $\omega=n\omega_0$ ，就得到了 </p><script type="math/tex; mode=display">F(\omega)=\frac{1}{T}\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t \tag{4}</script><p>由于$\frac{1}{T}\rightarrow0$，我们先丢弃$\frac{1}{T}$，之后用到$F(\omega)$在乘回来，于是令：</p><script type="math/tex; mode=display">F(\omega)=\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t \tag{5}</script><p>将公式（5）代入公式（1），并代入$\frac{1}{T}=\frac{\omega_0}{2\pi}$，则有：</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\sum^{\infty}_{n=-\infty}F(n\omega_0)e^{in\omega_0 t}\omega_0 \tag{6}</script><p>因为 $\omega=n\omega_0$ ，每次 $\omega$ 的增量 $d\omega$ 都是由于 $n$ 变为 $n+1$ 造成的，所以</p><script type="math/tex; mode=display">\mathrm{d}\omega=(n+1)\omega_0-n\omega_0=\omega_0</script><p>同时 $n\omega_0$ 连续变化，原本的离散意义下的求和就该变为连续意义下的积分，于是公式（6）变形为：</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}\mathrm{d}\omega \tag{7}</script><p>至此得到傅里叶变换的两个公式：</p><script type="math/tex; mode=display">F(\omega)=ℱ[f(t)]=\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t</script><script type="math/tex; mode=display">f(t)=ℱ^{-1}[F(\omega)]=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}\mathrm{d}\omega</script><h1 id="傅里叶变换条件"><a href="#傅里叶变换条件" class="headerlink" title="傅里叶变换条件"></a>傅里叶变换条件</h1><p>由于傅里叶变换是从傅里叶级数推导得来的，所以还是狄利克雷条件，不过此时还要加上第三条，  $f(t)$ 在一个周期内绝对可积。</p><p>这一个条件在 $f(t)$ 为周期函数时，可以由前两个条件推出来，因为周期和函数值均为有限值，所以在一个周期内一定绝对可积。但是推广到傅里叶变换后，这个推导就不成立了，需要单独判定第三个条件。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/19763358" target="_blank" rel="noopener">傅里叶分析之掐死教程</a>,by Heinrich.</li><li><a href="https://zhuanlan.zhihu.com/p/32341301" target="_blank" rel="noopener">傅里叶级数和傅里叶变换</a>,by 木不shi丁.</li><li><a href="https://www.zhihu.com/question/21665935" target="_blank" rel="noopener">傅里叶级数和傅里叶变换是什么关系？</a>,by 马同学.</li><li><a href="https://zhuanlan.zhihu.com/p/52158237" target="_blank" rel="noopener">傅里叶级数与傅里叶变换推导</a>,by 令狐哦打.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0" target="_blank" rel="noopener">傅里叶级数</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2" target="_blank" rel="noopener">傅里叶变换</a>,by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/41455378" target="_blank" rel="noopener">傅里叶系列（一）傅里叶级数的推导</a>,by ElPsyCongree.</li><li><a href="https://zhuanlan.zhihu.com/p/55566705" target="_blank" rel="noopener">傅里叶变换（一） 傅里叶级数</a>,by<br>misaka.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在数学中，&lt;strong&gt;傅里叶级数（Fourier series）&lt;/strong&gt;能将任何周期函数或周期信号分解成一个（可能由无穷个元素组成的）简单振荡函数的集合，即正弦函数和余弦函数（或者，等价地使用复指数）。&lt;strong&gt;傅里叶变换（Fourier transfo
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>使用python3+PyQt5+PyCharm桌面GUI开发</title>
    <link href="https://huangwang.github.io/2019/06/29/%E4%BD%BF%E7%94%A8python3-PyQt5-pycharm%E6%A1%8C%E9%9D%A2GUI%E5%BC%80%E5%8F%91/"/>
    <id>https://huangwang.github.io/2019/06/29/使用python3-PyQt5-pycharm桌面GUI开发/</id>
    <published>2019-06-29T13:18:34.000Z</published>
    <updated>2019-06-29T13:32:59.309Z</updated>
    
    <content type="html"><![CDATA[<p>下面简单介绍基于Python3、PyQt5和PyCharm进行桌面GUI开发。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h2><p>PyQt5所支持的python版本是从3.5开始的，因此安装的Python3版本必须大于3.5。</p><h2 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install PyQt5</span><br><span class="line">pip3 install PyQt5-tools</span><br></pre></td></tr></table></figure><h2 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装PyCharm</h2><p>安装完PyCharm后，需要配置Qt Designer和PyUIC，前者用于设计UI，后者用于将UI转成Py文件。</p><p>具体步骤请参考<a href="https://www.cnblogs.com/zhoug2020/p/9039993.html" target="_blank" rel="noopener">程序员之路：python3+PyQt5+pycharm桌面GUI开发</a>。</p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># Form implementation generated from reading ui file &apos;clearWaterPrintGui.ui&apos;</span><br><span class="line">#</span><br><span class="line"># Created by: PyQt5 UI code generator 5.11.3</span><br><span class="line">#</span><br><span class="line"># WARNING! All changes made in this file will be lost!</span><br><span class="line"></span><br><span class="line">from PyQt5 import QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line">class Ui_Form(object):</span><br><span class="line">    def setupUi(self, Form):</span><br><span class="line">        Form.setObjectName(&quot;Form&quot;)</span><br><span class="line">        Form.resize(400, 300)</span><br><span class="line">        self.label_DirPath = QtWidgets.QLabel(Form)</span><br><span class="line">        self.label_DirPath.setGeometry(QtCore.QRect(16, 52, 72, 15))</span><br><span class="line">        self.label_DirPath.setObjectName(&quot;label_DirPath&quot;)</span><br><span class="line">        self.label_ExtName = QtWidgets.QLabel(Form)</span><br><span class="line">        self.label_ExtName.setGeometry(QtCore.QRect(31, 112, 72, 15))</span><br><span class="line">        self.label_ExtName.setObjectName(&quot;label_ExtName&quot;)</span><br><span class="line">        self.buttonBox = QtWidgets.QDialogButtonBox(Form)</span><br><span class="line">        self.buttonBox.setGeometry(QtCore.QRect(190, 260, 193, 28))</span><br><span class="line">        self.buttonBox.setInputMethodHints(QtCore.Qt.ImhNone)</span><br><span class="line">        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)</span><br><span class="line">        self.buttonBox.setObjectName(&quot;buttonBox&quot;)</span><br><span class="line">        self.lineEdit_DirPath = QtWidgets.QLineEdit(Form)</span><br><span class="line">        self.lineEdit_DirPath.setGeometry(QtCore.QRect(100, 50, 281, 21))</span><br><span class="line">        self.lineEdit_DirPath.setObjectName(&quot;lineEdit_DirPath&quot;)</span><br><span class="line">        self.lineEdit_ExtName = QtWidgets.QLineEdit(Form)</span><br><span class="line">        self.lineEdit_ExtName.setGeometry(QtCore.QRect(100, 112, 281, 21))</span><br><span class="line">        self.lineEdit_ExtName.setObjectName(&quot;lineEdit_ExtName&quot;)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">    def retranslateUi(self, Form):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(&quot;Form&quot;, &quot;Form&quot;))</span><br><span class="line">        self.label_DirPath.setText(_translate(&quot;Form&quot;, &quot;文件路径：&quot;))</span><br><span class="line">        self.label_ExtName.setText(_translate(&quot;Form&quot;, &quot;扩展名：&quot;))</span><br><span class="line"></span><br><span class="line"># 下面代码是手动添加的</span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    import sys</span><br><span class="line">    from PyQt5.QtGui import QIcon</span><br><span class="line">    app=QtWidgets.QApplication(sys.argv)</span><br><span class="line">    widget=QtWidgets.QWidget()</span><br><span class="line">    ui=Ui_Form()</span><br><span class="line">    ui.setupUi(widget)</span><br><span class="line">    # widget.setWindowIcon(QIcon(&apos;web.png&apos;))#增加icon图标，如果没有图片可以没有这句</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/zhoug2020/p/9039993.html" target="_blank" rel="noopener">程序员之路：python3+PyQt5+pycharm桌面GUI开发</a>,by 莫水千流.</li><li><a href="http://www.futantan.com/2015/11/22/use-pyqt-develop-gui/" target="_blank" rel="noopener">使用PyQt快速开发GUI应用</a>,by Prayer.</li><li><a href="https://zh.wikipedia.org/wiki/PyQt" target="_blank" rel="noopener">PyQt</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面简单介绍基于Python3、PyQt5和PyCharm进行桌面GUI开发。&lt;/p&gt;
&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;h2 id=&quot;安装python3&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序打包成exe</title>
    <link href="https://huangwang.github.io/2019/06/29/Python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe/"/>
    <id>https://huangwang.github.io/2019/06/29/Python程序打包成exe/</id>
    <published>2019-06-29T03:18:51.000Z</published>
    <updated>2019-06-29T03:38:29.315Z</updated>
    
    <content type="html"><![CDATA[<p>大部分人是普通人，不知道如何运行Python脚本程序，因此有必要将Python脚本程序打包成可执行文件，免去安装Python环境，提高Python脚本程序的可用性。</p><h1 id="打包方法"><a href="#打包方法" class="headerlink" title="打包方法"></a>打包方法</h1><p>Python脚本程序的发布有三种方法：</p><ul><li>.py文件：对于开源项目或者源码没那么重要的，直接提供源码，需要使用者自行安装Python并且安装依赖的各种库。</li><li>.pyc文件：有些公司或个人因为机密或者各种原因，不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</li><li>可执行文件：对于非码农用户，最简单的方式就是提供一个可执行文件，只需要把用法告诉他即可。比较麻烦的是需要针对不同平台需要打包不同的可执行文件（Windows, Linux, Mac,…）。</li></ul><p>下面介绍将Python脚本程序打包成可执行程序的各种工具。</p><center>表1 各种打包工具的对比</center><div class="table-container"><table><thead><tr><th>Solution</th><th>Windows</th><th>Linux</th><th>OS X</th><th>Python 3</th><th>One file mode</th><th>Zipfile import</th><th>Eggs</th><th>pkg_resources support</th></tr></thead><tbody><tr><td>bbFreeze</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>py2exe</td><td>yes</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>pyInstaller</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>no</td></tr><tr><td>cx_Freeze</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>py2app</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table></div><p>从上述对Python脚本程序打包工具对比可知，推荐使用pyInstaller。</p><h1 id="PyInstaller打包示例"><a href="#PyInstaller打包示例" class="headerlink" title="PyInstaller打包示例"></a>PyInstaller打包示例</h1><h2 id="安装PyInstaller"><a href="#安装PyInstaller" class="headerlink" title="安装PyInstaller"></a>安装PyInstaller</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h2 id="打包Python脚本"><a href="#打包Python脚本" class="headerlink" title="打包Python脚本"></a>打包Python脚本</h2><p>打包Python脚本成单独的 .exe 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F yourprogram.py</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/45288707" target="_blank" rel="noopener">如何将 Python 程序打包成 .exe 文件？</a>,by 刘哈哈.</li><li><a href="https://blog.csdn.net/zengxiantao1994/article/details/76578421" target="_blank" rel="noopener">Python程序打包成exe可执行文件</a>,by 知行流浪.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大部分人是普通人，不知道如何运行Python脚本程序，因此有必要将Python脚本程序打包成可执行文件，免去安装Python环境，提高Python脚本程序的可用性。&lt;/p&gt;
&lt;h1 id=&quot;打包方法&quot;&gt;&lt;a href=&quot;#打包方法&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python命令行参数解析示例</title>
    <link href="https://huangwang.github.io/2019/06/29/Python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E7%A4%BA%E4%BE%8B/"/>
    <id>https://huangwang.github.io/2019/06/29/Python命令行参数解析示例/</id>
    <published>2019-06-29T01:03:23.000Z</published>
    <updated>2019-06-29T11:06:28.789Z</updated>
    
    <content type="html"><![CDATA[<p>最新需要一个小程序实现解析命令行参数、遍历指定文件夹，处理指定扩展名的文件。于是简单用python实现一下。</p><h1 id="库选择"><a href="#库选择" class="headerlink" title="库选择"></a>库选择</h1><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><h3 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h3><p>解析Python中命令行参数的最传统的方法是通过sys.argv。但这种方法比较古老，灵活性很差，同时解析出来的参数都是str类型。但在编写简单脚本，参数较少且固定时比较方便。</p><h3 id="getopt模块"><a href="#getopt模块" class="headerlink" title="getopt模块"></a>getopt模块</h3><p>getopt模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（—）。</p><h3 id="optparse模块"><a href="#optparse模块" class="headerlink" title="optparse模块"></a>optparse模块</h3><p>optparse，功能强大，易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。但在Python2.7后就已经弃用不再维护。</p><h3 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h3><p>argparse模块是Python内置的参数解析模块，使用起来比较简单且功能强大。</p><p>ArgumentParser类创建时的参数如下：</p><ul><li>prog - 程序的名字（默认：sys.argv[0]）</li><li>usage - 描述程序用法的字符串（默认：从解析器的参数生成）</li><li>description - 参数帮助信息之前的文本（默认：空）</li><li>epilog - 参数帮助信息之后的文本（默认：空）</li><li>parents - ArgumentParser 对象的一个列表，这些对象的参数应该包括进去</li><li>formatter_class - 定制化帮助信息的类</li><li>prefix_chars - 可选参数的前缀字符集（默认：‘-‘）</li><li>fromfile_prefix_chars - 额外的参数应该读取的文件的前缀字符集（默认：None）</li><li>argument_default - 参数的全局默认值（默认：None）</li><li>conflict_handler - 解决冲突的可选参数的策略（通常没有必要）</li><li>add_help - 给解析器添加-h/–help 选项（默认：True）</li></ul><p>add_argument函数的参数如下：</p><ul><li>name or flags - 选项字符串的名字或者列表，例如foo 或者-f, –foo。</li><li>action - 在命令行遇到该参数时采取的基本动作类型。</li><li>nargs - 应该读取的命令行参数数目。</li><li>const - 某些action和nargs选项要求的常数值。</li><li>default - 如果命令行中没有出现该参数时的默认值。</li><li>type - 命令行参数应该被转换成的类型。</li><li>choices - 参数可允许的值的一个容器。</li><li>required - 该命令行选项是否可以省略（只针对可选参数）。</li><li>help - 参数的简短描述。</li><li>metavar - 参数在帮助信息中的名字。</li><li>dest - 给parse_args()返回的对象要添加的属性名称。</li></ul><h3 id="参数解析模块比较"><a href="#参数解析模块比较" class="headerlink" title="参数解析模块比较"></a>参数解析模块比较</h3><ul><li>getopt，只能简单的处理命令行参数，无法解析一个参数多个值的情况，如 —file file1 file2 file3。</li><li>optparse，功能强大，易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。但在Python2.7后就已经弃用不再维护。</li><li>argparse，使其更加容易的编写用户友好的命令行接口。它所需的程序进程了参数定义，argparse将更好的解析sys.argv。同时argparse模块还能自动生成帮助及用户输入错误参数时的提示信息。</li></ul><h2 id="文件夹遍历"><a href="#文件夹遍历" class="headerlink" title="文件夹遍历"></a>文件夹遍历</h2><p>文件夹遍历有两种方法：</p><ul><li>使用os.walk</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line">import os </span><br><span class="line">def Test1(rootDir): </span><br><span class="line">    list_dirs = os.walk(rootDir) </span><br><span class="line">    for root, dirs, files in list_dirs: </span><br><span class="line">        for d in dirs: </span><br><span class="line">            print os.path.join(root, d)      </span><br><span class="line">        for f in files: </span><br><span class="line">            print os.path.join(root, f)</span><br></pre></td></tr></table></figure><ul><li>使用os.listdir</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line">import os </span><br><span class="line">def Test2(rootDir): </span><br><span class="line">    for lists in os.listdir(rootDir): </span><br><span class="line">        path = os.path.join(rootDir, lists) </span><br><span class="line">        print path </span><br><span class="line">        if os.path.isdir(path): </span><br><span class="line">            Test2(path)</span><br></pre></td></tr></table></figure><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>Python内置了读写文件的函数，用法和C是兼容的。本节介绍内容大致有：文件的打开/关闭、文件对象、文件的读写等。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line"># 遍历文件夹</span><br><span class="line">def traverse(pathName,extName):</span><br><span class="line">    extNameList=extName.split(&apos; &apos;) </span><br><span class="line">    print(extNameList)</span><br><span class="line">    list_dirs = os.walk(pathName) </span><br><span class="line">    for root, dirs, files in list_dirs:   </span><br><span class="line">        for f in files:</span><br><span class="line">            targetExt=os.path.splitext(f)[-1]</span><br><span class="line">            if targetExt.lower() in extNameList:</span><br><span class="line">                clearWaterPrint(os.path.join(root, f))</span><br><span class="line"></span><br><span class="line">def clearWaterPrint(fileName):</span><br><span class="line">    print(fileName)</span><br><span class="line">    fileOrgin=open(fileName,&apos;rb&apos;)</span><br><span class="line">    fileTarget=open(fileName+&apos;.exe&apos;,&apos;wb&apos;)</span><br><span class="line">    fileTarget.write(fileOrgin.read())</span><br><span class="line">    fileOrgin.close()</span><br><span class="line">    os.remove(fileName)</span><br><span class="line">    fileTarget.close()</span><br><span class="line">    os.rename(fileName+&apos;.exe&apos;,fileName)</span><br><span class="line">  </span><br><span class="line"># Driver Code </span><br><span class="line">if __name__ == &apos;__main__&apos;: </span><br><span class="line">    # 首先创建一个ArgumentParser对象</span><br><span class="line">    parser = argparse.ArgumentParser(description=&apos;Process the water print!&apos;)   </span><br><span class="line">    # 添加--path设置文件目录</span><br><span class="line">    parser.add_argument(&apos;-p&apos;,&apos;--path&apos;, type = str,dest=&apos;pathName&apos;, help=&apos;give the path of directory&apos;,</span><br><span class="line">    default = &apos;./&apos;)    </span><br><span class="line">    # 添加--ext设置文件目录</span><br><span class="line">    parser.add_argument(&apos;-e&apos;,&apos;--ext&apos;, type = str,dest=&apos;extName&apos;, help=&apos;give the extension name of file&apos;,</span><br><span class="line">    default = &apos;.doc .docx .wav .txt .xml .dot .html .jpg .png&apos;,nargs = &apos;*&apos;)    </span><br><span class="line">    #返回一个命名空间,如果想要使用变量,可用args.attr</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    # Calling traverse() function </span><br><span class="line">    traverse(args.pathName,args.extName)</span><br></pre></td></tr></table></figure><p>使用方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 clearWaterPrint.py -h</span><br><span class="line">python3 clearWaterPrint.py -p /home/test -e .doc .ppt</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://noahsnail.com/2017/09/13/2017-09-13-Python%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">Python的命令行参数解析</a>,by Tyan.</li><li><a href="https://zhuanlan.zhihu.com/p/56961708" target="_blank" rel="noopener">Python中最好用的命令行参数解析工具</a>,by Mingle Wong.</li><li><a href="https://blog.51cto.com/laocao/525140" target="_blank" rel="noopener">Python遍历文件夹的两种方法比较</a>,by likecao.</li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c05/p04_read_write_binary_data.html" target="_blank" rel="noopener">读写字节数据</a>,by python3-cookbook.</li><li><a href="http://funhacks.net/explore-python/File-Directory/binary_file_io.html" target="_blank" rel="noopener">读写二进制文件</a>,by funhacks.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最新需要一个小程序实现解析命令行参数、遍历指定文件夹，处理指定扩展名的文件。于是简单用python实现一下。&lt;/p&gt;
&lt;h1 id=&quot;库选择&quot;&gt;&lt;a href=&quot;#库选择&quot; class=&quot;headerlink&quot; title=&quot;库选择&quot;&gt;&lt;/a&gt;库选择&lt;/h1&gt;&lt;h2 id=
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C++标准演化简介</title>
    <link href="https://huangwang.github.io/2019/06/26/CPlusPlus%E6%A0%87%E5%87%86%E6%BC%94%E5%8C%96%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/06/26/CPlusPlus标准演化简介/</id>
    <published>2019-06-26T11:45:12.000Z</published>
    <updated>2019-06-26T12:36:16.066Z</updated>
    
    <content type="html"><![CDATA[<p>最近阅读采用C++编写的MAVROS源码，遇到很多C++语言的新特性，理解起来很费劲，因此，特地分析一下C++标准演变过程，学习其进化过程中引入的新特性，提高C++源码阅读效率。</p><h1 id="C-标准演变"><a href="#C-标准演变" class="headerlink" title="C++标准演变"></a>C++标准演变</h1><p>2017年12月05日，ISO C++ 委员会正式发布了 C++ 17 标准，官方名称为 ISO/IEC 14882:2017。之前发布的C++标准有C++14、C++11、C++03、C++98。</p><h2 id="C-98"><a href="#C-98" class="headerlink" title="C++98"></a>C++98</h2><p>C++98是第一个C++标准。它分为两个部分：核心语言和C++标准程序库；后者包含了大部分标准模板库和C标准程序库的稍加修改版本。存在许多不属于标准部分的C++程序库，且使用外部链接，程序库甚至可以用C撰写。</p><p>C++标准程序库充分吸收了C标准程序库，并佐以少许的修改，使其与C++良好的运作。另一个大型的程序库部分，是以标准模板库（STL）为基础，STL于1994年2月正式成为ANSI/ISO C++。它提供了实用的工具，如容器类（如：Array和Vector），迭代器（广义指针）提供容器以类似数组的访问方式，以及泛型算法进行搜索和排序的运算。此外还提供了(multi)map和(multi)set，它们都共享相似的成员函数。因此，以下成为可能，使用模板撰写泛型算法，它可以和任何容器或在任何以迭代器定义的序列上运作。如同C，使用#include指令包含标准表头，即可访问程序库里的功能。C++提供69个标准表头，其中19个不再赞成使用。</p><p>使用标准模板库（例如：使用std::vector或std::string来取代C风格的数组或字符数组）有助于导向更安全和更灵活的软件。</p><p>在STL在纳入C++标准以前，是来自HP和后来的SGI的第三方程式库，标准中并未称之为“STL”，它只是标准库中的一部分，但仍有许多人使用这个名称，以别于其它的标准库（输入／输出流、国际化、诊断、C程序库子集，等等）。 另外，如std::basic_string此类标准委员会添加的接口，有时也被误认为STL；实际上它们并不存在于原始的SGI STL中，在标准化后SGI STL才从标准库吸收加入其中。</p><h2 id="C-03"><a href="#C-03" class="headerlink" title="C++03"></a>C++03</h2><p>C++03 是 C++ 语言国际标准的一个版本，正式名称是 ISO/IEC 14882:2003。该标准由国际标准化组织（ISO）和国际电工委员会（IEC）共同制定。</p><p>C++03 取代了 C++ 标准的前一个版本 C++98，后被 C++11 所取代。C++03 主要是在前一个版本的基础上针对实现方的一些问题进行了修复，从而在各个实现间达到一致、保持了可移植性。该版本共涉及 92 项核心语言缺陷报告、125 项库缺陷报告，所提供的新特性只有一项：值初始化（英语：value initialization）。</p><p>C++03 的第 69 号库缺陷报告非常值得一提，为了解决该问题，标准中加入了“std::vector 中的元素必须连续存储”的要求。</p><h2 id="C-11"><a href="#C-11" class="headerlink" title="C++11"></a>C++11</h2><p>C++11，先前被称作C++0x，即ISO/IEC 14882:2011，是C++编程语言的一个标准。它取代第二版标准ISO/IEC 14882:2003（第一版ISO/IEC 14882:1998公开于1998年，第二版于2003年更新，分别通称C++98以及C++03，两者差异很小），且已被C++14取代。相比于C++03，C++11标准包含核心语言的新机能，而且扩展C++标准程序库，并入了大部分的C++ Technical Report 1程序库（数学的特殊函数除外）。 ISO／IEC JTC1/SC22/WG21 C++标准委员会计划在2010年8月之前完成对最终委员会草案的投票，以及于2011年3月召开的标准会议完成国际标准的最终草案。然而，WG21预期ISO将要花费六个月到一年的时间才能正式发布新的C++标准。为了能够如期完成，委员会决定致力于直至2006年为止的提案，忽略新的提案。最终于2011年8月12日公布，并于2011年9月出版。</p><p>2012年2月28日的国际标准草案是最接近于C++11标准的草案，差异仅有编辑上的修正。</p><p>像C++这样的编程语言，透过一种演化的的过程来发展其定义。这个过程不可避免地将引发与现有代码的兼容问题，在C++的发展过程中偶尔会发生。不过根据比雅尼·斯特劳斯特鲁普（C++的创始人并且是委员会的一员）表示，新的标准将几乎100%兼容于现有标准。</p><h2 id="C-14"><a href="#C-14" class="headerlink" title="C++14"></a>C++14</h2><p>C++14是C++的现行标准的非正式名称，正式名称为”International Standard ISO/IEC 14882:2014(E) Programming Language C++”。C++14旨在作为C++11的一个小扩展，主要提供漏洞修复和小的改进。C++14标准的委员会草案（Committee Draft）N3690于2013年5月15日发表。工作草案（Working Draft）N3936已于2014年3月2日完成。最终的投票期结束于2014年8月15日，结果（一致通过）已于8月18日公布。</p><h2 id="C-17"><a href="#C-17" class="headerlink" title="C++17"></a>C++17</h2><p>C++17又称C++1z，是C++的现行标准的非正式名称，正式名称为”International Standard ISO/IEC Programming Language C++”。C++17旨在作为大型扩展，最终的投票期将于2017年结束。</p><p>当前不少著名C++编译器已支持C++17仍未定案的草案（draft），例如最新的GCC6已支持C++ concept的C++事务型内存（Transactional Memory），Visual Studio与Clang当前都提供了modules。</p><h1 id="C-新语言特性"><a href="#C-新语言特性" class="headerlink" title="C++新语言特性"></a>C++新语言特性</h1><h2 id="Lambda函数与表示式"><a href="#Lambda函数与表示式" class="headerlink" title="Lambda函数与表示式"></a>Lambda函数与表示式</h2><p>在标准C++，特别是当使用C++标准程序库算法函数诸如sort和find，用户经常希望能够在算法函数调用的附近定义一个临时的述部函数（又称谓词函数，predicate function）。由于语言本身允许在函数内部定义类别，可以考虑使用函数对象，然而这通常既麻烦又冗赘，也阻碍了代码的流程。此外，标准C++不允许定义于函数内部的类别被用于模板，所以前述的作法是不可行的。</p><p><strong>C++11对lambda（即匿名函数）的支持可以解决上述问题</strong>。</p><p>一个lambda函数可以用如下的方式定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](int x, int y) &#123; return x + y; &#125;</span><br></pre></td></tr></table></figure><p>这个不具名函数的回返类型是decltype(x+y)。只有在lambda函数匹配”return expression”的形式下，它的回返类型才能被忽略。在前述的情况下，lambda函数仅能为一个述句。</p><p>在一个更为复杂的例子中，回返类型可以被明确的指定如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](int x, int y) -&gt; int &#123; int z = x + y; return z + x; &#125;</span><br></pre></td></tr></table></figure><p>本例中，一个临时的参数z被创建用来存储中间结果。如同一般的函数，z的值不会保留到下一次该不具名函数再次被调用时。</p><p>如果lambda函数没有传回值（例如void），其回返类型可被完全忽略。</p><p>定义在与lambda函数相同作用域的参数引用也可以被使用。这种的参数集合一般被称作closure（闭包）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[]      // 沒有定义任何变量。使用未定义变量会引发错误。</span><br><span class="line">[x, &amp;y] // x以传值方式传入（默认），y以引用方式传入。</span><br><span class="line">[&amp;]     // 任何被使用到的外部变量都隐式地以引用方式加以引用。</span><br><span class="line">[=]     // 任何被使用到的外部变量都隐式地以传值方式加以引用。</span><br><span class="line">[&amp;, x]  // x显式地以传值方式加以引用。其余变量以引用方式加以引用。</span><br><span class="line">[=, &amp;z] // z显式地以引用方式加以引用。其余变量以传值方式加以引用。</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C++</a>,by wikipedia.</li><li><a href="https://zh.cppreference.com/w/cpp/language/history" target="_blank" rel="noopener">C++ 的历史</a>,by cppreference.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B03" target="_blank" rel="noopener">C++03</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="noopener">C++11</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B14" target="_blank" rel="noopener">C++14</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/C%2B%2B17" target="_blank" rel="noopener">C++17</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近阅读采用C++编写的MAVROS源码，遇到很多C++语言的新特性，理解起来很费劲，因此，特地分析一下C++标准演变过程，学习其进化过程中引入的新特性，提高C++源码阅读效率。&lt;/p&gt;
&lt;h1 id=&quot;C-标准演变&quot;&gt;&lt;a href=&quot;#C-标准演变&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>有趣的数学游戏</title>
    <link href="https://huangwang.github.io/2019/06/23/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6%E6%B8%B8%E6%88%8F/"/>
    <id>https://huangwang.github.io/2019/06/23/有趣的数学游戏/</id>
    <published>2019-06-23T15:29:58.000Z</published>
    <updated>2019-06-23T16:11:12.284Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些有趣的数学游戏，与小伙伴分享。</p><h1 id="三门问题"><a href="#三门问题" class="headerlink" title="三门问题"></a>三门问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。</p><p>问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？</p><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p><a href="https://zhuanlan.zhihu.com/p/70217002" target="_blank" rel="noopener">漫画：反直觉的 “三门问题”</a></p><h1 id="海盗分金币问题"><a href="#海盗分金币问题" class="headerlink" title="海盗分金币问题"></a>海盗分金币问题</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>经济学上有个“海盗分金”模型：是说5个海盗抢得100枚金币，他们按抽签的顺序依次提方案：首先由1号提出分配方案，然后5人表决，投票要超过半数同意方案才被通过，否则他将被扔入大海喂鲨鱼，依此类推。</p><p>“海盗分金”其实是一个高度简化和抽象的模型，体现了博弈的思想。在“海盗分金”模型中，任何“分配者”想让自己的方案获得通过的关键是事先考虑清楚“挑战者”的分配方案是什么，并用最小的代价获取最大收益，拉拢“挑战者”分配方案中最不得意的人们。</p><h2 id="问题解答-1"><a href="#问题解答-1" class="headerlink" title="问题解答"></a>问题解答</h2><p><a href="https://zhuanlan.zhihu.com/p/55273946" target="_blank" rel="noopener">漫画：有趣的海盗问题</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/70217002" target="_blank" rel="noopener">漫画：反直觉的 “三门问题”</a>,by 小灰.</li><li><a href="https://zhuanlan.zhihu.com/p/55273946" target="_blank" rel="noopener">漫画：有趣的海盗问题</a>,by 小灰.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一些有趣的数学游戏，与小伙伴分享。&lt;/p&gt;
&lt;h1 id=&quot;三门问题&quot;&gt;&lt;a href=&quot;#三门问题&quot; class=&quot;headerlink&quot; title=&quot;三门问题&quot;&gt;&lt;/a&gt;三门问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数学" scheme="https://huangwang.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="游戏" scheme="https://huangwang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>gdb调试入门</title>
    <link href="https://huangwang.github.io/2019/06/23/gdb%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/06/23/gdb调试入门/</id>
    <published>2019-06-23T06:26:54.000Z</published>
    <updated>2019-06-23T15:17:40.600Z</updated>
    
    <content type="html"><![CDATA[<p>GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。 对于一名Linux下工作的c++程序员，gdb是必不可少的工具。</p><h1 id="启动gdb"><a href="#启动gdb" class="headerlink" title="启动gdb"></a>启动gdb</h1><p>对C/C++程序的调试，需要在编译前就加上-g选项。对大型项目，一般选择Debug选项进行编译以 方便gdb调试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -g hello.cpp -o hello</span><br></pre></td></tr></table></figure><p>调试可执行文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$gdb &lt;program&gt;</span><br></pre></td></tr></table></figure><p>program也就是你的执行文件，一般在当前目录下。</p><h1 id="gdb交互命令"><a href="#gdb交互命令" class="headerlink" title="gdb交互命令"></a>gdb交互命令</h1><p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>run：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li><li>continue （简写c ）：继续执行，到下一个断点处（或运行结束）</li><li>next：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li><li>step （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li><li>until：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li><li>until+行号： 运行至某行，不仅仅用来跳出循环</li><li>finish： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li><li><strong>call 函数(参数)：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)</strong></li><li>quit：简记为 q ，退出gdb</li></ul><h2 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h2><ul><li><strong>break n （简写b n）:在第n行处设置断点</strong><br>（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）</li><li>b fn1 if a＞b：条件断点设置</li><li>break func（break缩写为b）：在函数func()的入口处设置断点，如：break cb_button</li><li>delete 断点号n：删除第n个断点</li><li>disable 断点号n：暂停第n个断点</li><li>enable 断点号n：开启第n个断点</li><li>clear 行号n：清除第n行的断点</li><li>info b （info breakpoints） ：显示当前程序的断点设置情况</li><li>delete breakpoints：清除所有断点</li></ul><h2 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h2><ul><li>list ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li><li>list 行号：将显示当前文件以“行号”为中心的前后10行代码，如：list 12</li><li>list 函数名：将显示“函数名”所在函数的源代码，如：list main</li><li>list ：不带参数，将接着上一次 list 命令的，输出下边的内容。</li></ul><h2 id="打印表达式"><a href="#打印表达式" class="headerlink" title="打印表达式"></a>打印表达式</h2><ul><li>print 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。</li><li>print a：将显示整数 a 的值</li><li>print ++a：将把 a 中的值加1,并显示出来</li><li>print name：将显示字符串 name 的值</li><li>print gdb_test(22)：将以整数22作为参数调用 gdb_test() 函数</li><li>print gdb_test(a)：将以变量 a 作为参数调用 gdb_test() 函数</li><li>display 表达式：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li><li>watch 表达式：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a</li><li>whatis ：查询变量或函数</li><li>info function： 查询函数</li><li>扩展info locals： 显示当前堆栈页的所有变量</li></ul><h2 id="查询运行信息"><a href="#查询运行信息" class="headerlink" title="查询运行信息"></a>查询运行信息</h2><ul><li>where/bt ：当前运行的堆栈列表；</li><li>bt backtrace 显示当前调用堆栈</li><li>up/down 改变堆栈显示的深度</li><li><strong>set args 参数:指定运行时的参数</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set args -l a -C abc</span><br><span class="line">set args -l=a -C=abc</span><br></pre></td></tr></table></figure><ul><li>show args：查看设置好的参数</li><li>info program： 来查看程序的是否在运行，进程号，被暂停的原因。</li></ul><h2 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h2><ul><li>layout：用于分割窗口，可以一边查看代码，一边测试：</li><li>layout src：显示源代码窗口</li><li>layout asm：显示反汇编窗口</li><li>layout regs：显示源代码/反汇编和CPU寄存器窗口</li><li>layout split：显示源代码和反汇编窗口</li><li>Ctrl + L：刷新窗口</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">gdb 调试利器</a>,by Linux Tools Quick Tutorial.</li><li><a href="https://blog.csdn.net/blacet/article/details/52385955" target="_blank" rel="noopener">GDB调试带参数的程序（转载＋整理+实践）</a>,by blacet.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。 对于一名Linux下工作的c++程序员，gdb是必不可少的工具。&lt;/p&gt;
&lt;h1 id=&quot;启动gdb&quot;&gt;&lt;a href=&quot;#启动gdb&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>随机抽样一致</title>
    <link href="https://huangwang.github.io/2019/06/23/%E9%9A%8F%E6%9C%BA%E6%8A%BD%E6%A0%B7%E4%B8%80%E8%87%B4/"/>
    <id>https://huangwang.github.io/2019/06/23/随机抽样一致/</id>
    <published>2019-06-23T01:26:08.000Z</published>
    <updated>2019-06-23T03:23:28.719Z</updated>
    
    <content type="html"><![CDATA[<p>随机抽样一致算法（RANdom SAmple Consensus，RANSAC）。它采用迭代的方式从一组包含离群(outlier)的被观测数据中估算出数学模型的参数。 RANSAC是一个非确定性算法，在某种意义上说，它会产生一个在一定概率下合理的结果，而更多次的迭代会使这一概率增加。此RANSAC算法在1981年由Fischler和Bolles首次提出。</p><p>RANSAC的基本假设是</p><ul><li>“内群”(inlier)数据可以通过几组模型的参数来叙述其分布，而“离群”(outlier)数据则是不适合模型化的数据。</li><li>数据会受噪声影响，噪声指的是离群，例如从极端的噪声或错误解释有关数据的测量或不正确的假设。</li><li>RANSAC假定，给定一组（通常很小）的内群，存在一个程序，这个程序可以估算最佳解释或最适用于这一数据模型的参数。</li></ul><h1 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h1><p>这里用一个简单的例子来说明，在一组数据点中找到一条最适合的线。假设，此有一组集合包含了内群以及离群，其中内群为可以被拟合到线段上的点，而离群则是无法被拟合的点。如果我们用简单的最小二乘法来找此线，我们将无法得到一条适合于内群的线，因为最小二乘法会受离群影响而影响其结果。而RANSAC，可以只由内群来计算出模型，而且概率还够高。然而，RANSAC无法保证结果一定最好，所以必须小心选择参数，使其能有足够的概率。</p><div style="display:flex">    <div style="width: 45%;margin: 0 2.5%;">        <img display="block" src="images/255px-Line_with_outliers.svg.png" width="100%" alt="包含许多离群的一组数据">        <div>包含许多离群的一组数据，要找一条最适合的线。</div>    </div>    <div style="width: 45%;margin: 0 2.5%;">        <img display="block" src="images/255px-Fitted_line.svg.png" width="100%" alt="RANSAC找到的线">        <div>RANSAC找到的线，离群值对结果没影响（蓝色点为内群，红色点为离群）</div>    </div>   </div><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>RANSAC算法是一个学习的技巧，通过使用观测数据的随机样本来估计模型参数。RANSAC使用投票机制来寻找优化的拟合结果。每个数据元被用来投票一或多个模型。投票机制基于两点假设：</p><ul><li><p>噪音大的特征并不能一直单独为某个模型投票</p></li><li><p>有足够多的特征来拟合一个好的模型</p></li></ul><p>一般RANSAC算法由两步骤迭代计算：</p><ul><li><p>一个样本子集，包含数据选取（随机选取）。通过使用这些数据得到一个拟合模型和相关的模型参数。样本子集的数量是最小充分的得到模型参数。</p></li><li><p>算法检查数据集中的哪些元素是一直在第一步估计到的模型当中的。如果在阈值（相对噪声的最大偏离度）外的话，该模型元素不能拟合估计到的模型便会被当做outlier。</p></li></ul><p>inliers的设置称作“一致性设置”RANSAC算法会一直迭代直到获得足够的inliers。</p><p>RANSAC的输入是一些观测数据和一些“可信度”参数，实现步骤：</p><ol><li>随机选择一些原始数据，叫作假设inliers子集</li><li>建立模型拟合</li><li>用其他数据来验证，根据模型特定的loss-function来计算是否符合该模型</li><li>如果足够的点都算是“一致性”设置里则该模型算是好模型</li><li>比较所有的“一致性”设置（就是建立的所有模型）看看哪个inliers多就是我们要的。</li></ol><h2 id="参数决定"><a href="#参数决定" class="headerlink" title="参数决定"></a>参数决定</h2><p>假设每个点是真正内群的几率是 $w$ :</p><script type="math/tex; mode=display">w = 真正內群的數目 / 數據總共的數量</script><p>通常我们不知道 $w$ 是多少, $w^n$ 是所选择的n个点都是内群的几率, $1-w^n$ 是所选择的n个点至少有一个不是内群的几率, $(1 − w^n)^k$ 是表示重复k次都没有全部的n个点都是内群的几率, 这边定算法跑k次以后成功的几率是p，那么,</p><script type="math/tex; mode=display">1 − p =(1 − w^n)^k</script><script type="math/tex; mode=display">p = 1 −(1 − w^n)^k</script><p>所以如果希望成功几率高，p = 0.99, 当n不变时，k越大,p越大, 当w不变时，n越大，所需的k就越大, 通常w未知，所以n选小一点比较好。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>RANSAC常被用在计算机视觉，例如，对应点问题和 估算立体摄影机双眼相对点的基本矩阵。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/36301702" target="_blank" rel="noopener">随机抽样一致RANSAC: Random Sample Consensus</a>,by 江知季.</li><li><a href="https://zh.wikipedia.org/wiki/%E9%9A%A8%E6%A9%9F%E6%8A%BD%E6%A8%A3%E4%B8%80%E8%87%B4" target="_blank" rel="noopener">随机抽样一致</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随机抽样一致算法（RANdom SAmple Consensus，RANSAC）。它采用迭代的方式从一组包含离群(outlier)的被观测数据中估算出数学模型的参数。 RANSAC是一个非确定性算法，在某种意义上说，它会产生一个在一定概率下合理的结果，而更多次的迭代会使这一
      
    
    </summary>
    
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="统计学" scheme="https://huangwang.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
</feed>
