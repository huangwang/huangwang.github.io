<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2018-12-31T03:56:57.985Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TL-WR703N版本v1.7刷openwrt教程</title>
    <link href="https://huangwang.github.io/2018/12/31/TL-WR703N%E7%89%88%E6%9C%ACv1-7%E5%88%B7openwrt%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2018/12/31/TL-WR703N版本v1-7刷openwrt教程/</id>
    <published>2018-12-31T03:49:39.000Z</published>
    <updated>2018-12-31T03:56:57.985Z</updated>
    
    <content type="html"><![CDATA[<p>我的TL-WR703N路由器运行不稳定，就准备尝试刷最新的OpenWRT，看看能否好一点。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -o - -b &quot;subType=pcSub; Authorization=Basic%20YWRtaW46cmVkaGF0MTIz; ChgPwdSubTag=true&quot; &quot;http://192.168.1.1/&quot;</span><br><span class="line">curl -o - -b &apos;subType=pcSub; Authorization=Basic%20YWRtaW46cmVkaGF0MTIz; ChgPwdSubTag=&apos; --referer &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm&apos; &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?ctrl_enable=1&amp;parent_mac_addr=00-00-00-00-00-02&amp;Page=1&apos;</span><br><span class="line">curl -o - -b &apos;subType=pcSub; Authorization=Basic%20YWRtaW46cmVkaGF0MTIz; ChgPwdSubTag=&apos; --referer &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?Modify=0&amp;Page=1&apos; &apos;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?child_mac=00-00-00-00-00-01&amp;lan_lists=888&amp;url_comment=test&amp;url_0=;cd%20/tmp;&amp;url_1=;tftp%20-gl%20aa%20192.168.1.101;&amp;url_2=;sh%20aa;&amp;url_3=&amp;url_4=&amp;url_5=&amp;url_6=&amp;url_7=&amp;scheds_lists=255&amp;enable=1&amp;Changed=1&amp;SelIndex=0&amp;Page=1&amp;rule_mode=0&amp;Save=%B1%A3+%B4%E6&apos;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://cubicpill.me/2018/03/17/wr703n-openwrt.html" target="_blank" rel="noopener">给 v1.7 版本的 TL-WR703N 刷 openwrt</a>,by Cubic Zone.</li><li><a href="https://juejin.im/entry/5a2f92df6fb9a0450d110c14" target="_blank" rel="noopener">TL-WR703N v1.7刷openwrt</a>,by 梦里茶.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的TL-WR703N路由器运行不稳定，就准备尝试刷最新的OpenWRT，看看能否好一点。&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机网络" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Debian安装配置使用TFTP</title>
    <link href="https://huangwang.github.io/2018/12/30/Debian%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8TFTP/"/>
    <id>https://huangwang.github.io/2018/12/30/Debian安装配置使用TFTP/</id>
    <published>2018-12-30T12:50:23.000Z</published>
    <updated>2018-12-30T13:30:27.716Z</updated>
    
    <content type="html"><![CDATA[<p>简单文件传输协议也称小型文件传输协议（Trivial File Transfer Protocol, TFTP），是一种简化的文件传输协议（FTP），通过少量存储器就能轻松实现。</p><h1 id="TFTP技术信息"><a href="#TFTP技术信息" class="headerlink" title="TFTP技术信息"></a>TFTP技术信息</h1><p>小型文件传输协议的一些详细资料：</p><ul><li>使用UDP（端口69）作为其传输协议（不像FTP使用TCP端口21）。</li><li>不能列出目录内容。</li><li>无验证或加密机制。</li><li>被用于在远程服务器上读取或写入文件。</li><li>支持三种不同的传输模式：”netascii”,”octet”和”mail”，前两种匹配FTP协议中的”ASCII”和”image（binary）”模式；第三种从来很少使用，当前已经废弃。</li></ul><h1 id="TFTP安装"><a href="#TFTP安装" class="headerlink" title="TFTP安装"></a>TFTP安装</h1><p>安装TFTP的客户端和服务器端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install atftp atftpd</span><br></pre></td></tr></table></figure></p><h1 id="TFTP配置"><a href="#TFTP配置" class="headerlink" title="TFTP配置"></a>TFTP配置</h1><ol><li>创建TFTP服务器目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /tftpboot</span><br><span class="line">sudo chmod 777 /tftpboot</span><br><span class="line">sudo chmod 777 /tftpboot/*</span><br></pre></td></tr></table></figure><ol><li>编辑TFTP配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/default/atftpd</span><br><span class="line"></span><br><span class="line"># 修改内容如下，主要是修改目录</span><br><span class="line">USE_INETD=false</span><br><span class="line">OPTIONS=&quot;--daemon --port 69 --retry-timeout 5 --mcast-port 1758 --mcast-addr 239.239.239.0-255 --mcast-ttl 1 --maxthread 100 --verbose=5 /tftpboot&quot;</span><br></pre></td></tr></table></figure><ol><li>重启TFTP守护程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/atftpd restart</span><br></pre></td></tr></table></figure><h1 id="TFTP测试"><a href="#TFTP测试" class="headerlink" title="TFTP测试"></a>TFTP测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ sudo tftp 192.168.43.116</span><br><span class="line">tftp&gt; status</span><br><span class="line">Connected to 192.168.43.116.</span><br><span class="line">Mode: netascii Verbose: off Tracing: off</span><br><span class="line">Rexmt-interval: 5 seconds, Max-timeout: 25 seconds</span><br><span class="line">tftp&gt; get iproad.txt</span><br><span class="line">Received 959 bytes in 0.0 seconds</span><br><span class="line">tftp&gt; put upload.txt</span><br><span class="line">Sent 13 bytes in 0.0 seconds</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/小型文件传输协议" target="_blank" rel="noopener">TFTP</a>,by wikipedia.</li><li><a href="https://null-byte.wonderhowto.com/how-to/hack-like-pro-using-tftp-install-malicious-software-target-0157547/" target="_blank" rel="noopener">Using TFTP to Install Malicious Software on the Target</a>,by kail forum.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单文件传输协议也称小型文件传输协议（Trivial File Transfer Protocol, TFTP），是一种简化的文件传输协议（FTP），通过少量存储器就能轻松实现。&lt;/p&gt;
&lt;h1 id=&quot;TFTP技术信息&quot;&gt;&lt;a href=&quot;#TFTP技术信息&quot; class
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Linux" scheme="https://huangwang.github.io/tags/Linux/"/>
    
      <category term="计算机安全" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Cesium中3D模型的驱动方法</title>
    <link href="https://huangwang.github.io/2018/12/26/Cesium%E4%B8%AD3D%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/12/26/Cesium中3D模型的驱动方法/</id>
    <published>2018-12-26T12:43:21.000Z</published>
    <updated>2018-12-26T14:13:15.630Z</updated>
    
    <content type="html"><![CDATA[<p>Cesium中3D模型的运动可以使用CZML直接驱动，但使用该方法前提是能事先计算出3D模型的运动轨迹，具有很大的局限性。那么如何实时驱动3D模型呢？</p><h1 id="Cesium渲染过程分析"><a href="#Cesium渲染过程分析" class="headerlink" title="Cesium渲染过程分析"></a>Cesium渲染过程分析</h1><p>Cesium渲染过程的分析可以参考链接1。Cesium的渲染始于虚拟地球组件CesiumWidget的startRenderLoop方法，在该方法中将调用requestAnimationFrame函数开始渲染。</p><p>虚拟地球组件CesiumWidget包含Scene组件，在其render方法随后调用Scene的render方法。在场景组件Scene的render方法中提供了preUpdate、postUpdate、preRender、postRender四个事件对象，这四个事件对象将是我们实时驱动3D模型的关键。</p><h2 id="preUpdate事件"><a href="#preUpdate事件" class="headerlink" title="preUpdate事件"></a>preUpdate事件</h2><p>在Cesium更新渲染周期开始之前以目标帧率触发preUpdate事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scene.postUpdate.addEventListener(function() &#123;</span><br><span class="line">    // This code will run at 60 FPS</span><br><span class="line">    if (changeToPromptRender) &#123;</span><br><span class="line">        scene.requestRender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="postUpdate事件"><a href="#postUpdate事件" class="headerlink" title="postUpdate事件"></a>postUpdate事件</h2><p>在场景更新之后，新帧渲染之前以目标帧率触发postUpdate事件。</p><h2 id="preRender事件"><a href="#preRender事件" class="headerlink" title="preRender事件"></a>preRender事件</h2><p>在场景更新之后，新帧渲染之前触发preRender事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scene.preRender.addEventListener(function() &#123;</span><br><span class="line">    // This code will run when a new frame is rendered</span><br><span class="line">    // including when changeToPromptRender is true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="postRender事件"><a href="#postRender事件" class="headerlink" title="postRender事件"></a>postRender事件</h2><p>在新帧渲染之后触发postRender事件。</p><h1 id="实时驱动3D模型"><a href="#实时驱动3D模型" class="headerlink" title="实时驱动3D模型"></a>实时驱动3D模型</h1><p>从上一节对Cesium渲染过程分析可知，要实时驱动3D模型，应订阅场景Scene的preUpdate事件，在preUpdate事件的处理函数中改变3D模型的位置和姿态。</p><h2 id="订阅preUpdate事件"><a href="#订阅preUpdate事件" class="headerlink" title="订阅preUpdate事件"></a>订阅preUpdate事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//订阅场景的preUpdate事件</span><br><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    speedVector = Cesium.Cartesian3.multiplyByScalar(Cesium.Cartesian3.UNIT_X, speed / 10, speedVector);</span><br><span class="line">    position = Cesium.Matrix4.multiplyByPoint(planePrimitive.modelMatrix, speedVector, position);</span><br><span class="line">    pathPosition.addSample(Cesium.JulianDate.now(), position);</span><br><span class="line">    Cesium.Transforms.headingPitchRollToFixedFrame(position, hpRoll, Cesium.Ellipsoid.WGS84, fixedFrameTransform, planePrimitive.modelMatrix);</span><br><span class="line"></span><br><span class="line">    if (fromBehind.checked) &#123;</span><br><span class="line">        // Zoom to model</span><br><span class="line">        Cesium.Matrix4.multiplyByPoint(planePrimitive.modelMatrix, planePrimitive.boundingSphere.center, center);</span><br><span class="line">        hpRange.heading = hpRoll.heading;</span><br><span class="line">        hpRange.pitch = hpRoll.pitch;</span><br><span class="line">        camera.lookAt(center, hpRange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="获取czml实体的参数"><a href="#获取czml实体的参数" class="headerlink" title="获取czml实体的参数"></a>获取czml实体的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    //target是czml实体对象</span><br><span class="line">    //获取time时刻target的位置参数</span><br><span class="line">    target.position.getValue(time,position)</span><br><span class="line">    console.log(position)</span><br><span class="line">    </span><br><span class="line">    target.orientation.getValue(time,orientation)</span><br><span class="line">    console.log(orientation)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    var pos=target.position.getValue(time)</span><br><span class="line">    console.log(pos.toString())</span><br><span class="line">    //世界坐标转经纬高</span><br><span class="line">    var cartographicPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(pos);</span><br><span class="line">    console.log(cartographicPosition.toString())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用Entity-API加载3D模型"><a href="#使用Entity-API加载3D模型" class="headerlink" title="使用Entity API加载3D模型"></a>使用Entity API加载3D模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;);</span><br><span class="line">var center=Cesium.Cartesian3.fromDegrees(-123.0744619, 44.0503706,100);</span><br><span class="line">var hpr=Cesium.HeadingPitchRoll.fromDegrees(90,-90,0);</span><br><span class="line">//从headingPitchRoll转四元数</span><br><span class="line">var quatern=Cesium.Transforms.headingPitchRollQuaternion(center,hpr);</span><br><span class="line"></span><br><span class="line">var entity = viewer.entities.add(&#123;</span><br><span class="line">    position :center ,    </span><br><span class="line">    orientation:quatern ,</span><br><span class="line">    model : &#123;</span><br><span class="line">        uri : &apos;../../../../Apps/SampleData/models/missile.glb&apos;,</span><br><span class="line">        scale: 0.1,</span><br><span class="line">        minimumPixelSize:50,</span><br><span class="line">        maximumScale:5000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">viewer.trackedEntity = entity;</span><br></pre></td></tr></table></figure><h2 id="使用Primitive-API加载3d模型"><a href="#使用Primitive-API加载3d模型" class="headerlink" title="使用Primitive API加载3d模型"></a>使用Primitive API加载3d模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;);</span><br><span class="line"></span><br><span class="line">var center1=Cesium.Cartesian3.fromDegrees(-123.0744619, 44.0503706,100);</span><br><span class="line">var hpr1=Cesium.HeadingPitchRoll.fromDegrees(90,-90,100);</span><br><span class="line">//计算模式矩阵，实现本地坐标系坐标到世界坐标系坐标的转换</span><br><span class="line">var modelMatrix=Cesium.Transforms.headingPitchRollToFixedFrame(center1, hpr1)</span><br><span class="line"></span><br><span class="line">var model = viewer.scene.primitives.add(Cesium.Model.fromGltf(&#123;</span><br><span class="line">    url : &apos;../../../../Apps/SampleData/models/missile.glb&apos;,</span><br><span class="line">    modelMatrix : modelMatrix,</span><br><span class="line">    scale : 1.0</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2018/11/08/Cesium摄像头跟踪飞机实体时晃动问题分析/">Cesium摄像头跟踪飞机实体时晃动问题分析</a>,by jack huang.</li><li><a href="https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/" target="_blank" rel="noopener">Improving Performance with Explicit Rendering</a>, by Gabby Getz.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cesium中3D模型的运动可以使用CZML直接驱动，但使用该方法前提是能事先计算出3D模型的运动轨迹，具有很大的局限性。那么如何实时驱动3D模型呢？&lt;/p&gt;
&lt;h1 id=&quot;Cesium渲染过程分析&quot;&gt;&lt;a href=&quot;#Cesium渲染过程分析&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>网络安全攻防技术探讨</title>
    <link href="https://huangwang.github.io/2018/12/22/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF%E6%8E%A2%E8%AE%A8/"/>
    <id>https://huangwang.github.io/2018/12/22/Web安全攻防技术探讨/</id>
    <published>2018-12-22T05:16:18.000Z</published>
    <updated>2018-12-22T05:52:57.918Z</updated>
    
    <content type="html"><![CDATA[<p>网络安全（英语：network security）包含网络设备安全、网络信息安全、网络软件安全。在此重点探讨网络软件安全中的Web安全。当前Web安全面临的压力越来越大，一方面是Web应用一统江湖，君临天下，另一方面针对Web应用的攻击越来越多，攻击方法越来越成熟。下面重点介绍常见的Web攻击方法。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS (Cross Site Script，跨站脚本攻击)的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p><h2 id="非持久型-XSS"><a href="#非持久型-XSS" class="headerlink" title="非持久型 XSS"></a>非持久型 XSS</h2><h2 id="持久型-XSS"><a href="#持久型-XSS" class="headerlink" title="持久型 XSS"></a>持久型 XSS</h2><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF（Cross-Site Request Forgery,跨站请求伪造攻击）可以盗用你的登陆信息，以你的身份模拟发送各种请求。</p><h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p>SQL 注入漏洞（SQL Injection）是 Web 开发中最常见的一种安全漏洞。可以用它来从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限。</p><h1 id="命令行注入"><a href="#命令行注入" class="headerlink" title="命令行注入"></a>命令行注入</h1><p>命令行注入漏洞，指的是攻击者能够通过 HTTP 请求直接侵入主机，执行攻击者预设的 shell 命令。</p><h1 id="DDoS-攻击"><a href="#DDoS-攻击" class="headerlink" title="DDoS 攻击"></a>DDoS 攻击</h1><p>DDoS 又叫分布式拒绝服务，全称 Distributed Denial of Service，其原理就是利用大量的请求造成资源过载，导致服务不可用。</p><h2 id="网络层-DDoS"><a href="#网络层-DDoS" class="headerlink" title="网络层 DDoS"></a>网络层 DDoS</h2><h2 id="应用层-DDoS"><a href="#应用层-DDoS" class="headerlink" title="应用层 DDoS"></a>应用层 DDoS</h2><h1 id="流量劫持"><a href="#流量劫持" class="headerlink" title="流量劫持"></a>流量劫持</h1><p>流量劫持是黑产行业的一大经济支柱。</p><h2 id="DNS-劫持"><a href="#DNS-劫持" class="headerlink" title="DNS 劫持"></a>DNS 劫持</h2><h2 id="HTTP-劫持"><a href="#HTTP-劫持" class="headerlink" title="HTTP 劫持"></a>HTTP 劫持</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.georgovassilis.com/2016/04/16/advanced-web-security-topics/" target="_blank" rel="noopener">Advanced web security topics</a>,by George.</li><li><a href="https://zh.wikipedia.org/wiki/网络安全" target="_blank" rel="noopener">网络安全</a>,by wikipedia.</li><li><a href="https://zoumiaojiang.com/article/common-web-security/" target="_blank" rel="noopener">常见 Web 安全攻防总结</a>,by zoumiaojiang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络安全（英语：network security）包含网络设备安全、网络信息安全、网络软件安全。在此重点探讨网络软件安全中的Web安全。当前Web安全面临的压力越来越大，一方面是Web应用一统江湖，君临天下，另一方面针对Web应用的攻击越来越多，攻击方法越来越成熟。下面重点
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机安全" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
    
      <category term="网络安全" scheme="https://huangwang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>科学研究中阅读论文的方法</title>
    <link href="https://huangwang.github.io/2018/12/20/%E7%A7%91%E5%AD%A6%E7%A0%94%E7%A9%B6%E4%B8%AD%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/12/20/科学研究中阅读论文的方法/</id>
    <published>2018-12-20T15:44:44.000Z</published>
    <updated>2018-12-20T16:07:08.593Z</updated>
    
    <content type="html"><![CDATA[<p>在科学研究的过程中，选题十分重要。因此在初步确定好选题方向后，应对该选题方向进行调研。调研的主要工作就是寻找该方向的论文，进行阅读、分析、总结，了解该方向的过去和现在，并预测未来可能的发展方向。对于刚上研究生的同学，该采用什么样的方法来整理选题方向上的论文，使之符合逻辑，并且条理清晰呢？偶尔拜读了Flood Sung写的文章”深度学习论文阅读路线图“，觉得深受启发，将其所提出的深度学习论文阅读路线图构建原则记录备忘一下。</p><h1 id="路线图的构建原则"><a href="#路线图的构建原则" class="headerlink" title="路线图的构建原则"></a>路线图的构建原则</h1><p>有以下四个原则：</p><ul><li>从整体到局部。即从Survey的文章，影响大局的文章到具体子问题子领域的文章。</li><li>从过去到最前沿。即每个topic的文章是按照时间顺序排列的，这样大家就可以清楚的看到这个方向的研究发展脉络。</li><li>从通用到应用。即有些深度学习的文章是面向深度学习通用理论，比如Resnet，可以用在任意的神经网络中，而有些文章则是具体应用，比如Image Caption。</li><li>面向最前沿。收集的文章会有很多是最新的，甚至就是几天前出来的，这样能保证路线图是最新的。</li></ul><p>每一种topic只选择最有代表性的几篇文章，比如深度增强学习（Deep Reinforcement Learning），这个领域现在有几十篇文章，但只选择几篇，要深入了解甚至做为自己的研究方向，还需要进一步的阅读该领域的文章。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/23080129" target="_blank" rel="noopener">深度学习论文阅读路线图 Deep Learning Papers Reading Roadmap</a>,by Flood Sung.</li><li><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap" target="_blank" rel="noopener">Deep Learning Papers Reading Roadmap</a>,by Flood Sung.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在科学研究的过程中，选题十分重要。因此在初步确定好选题方向后，应对该选题方向进行调研。调研的主要工作就是寻找该方向的论文，进行阅读、分析、总结，了解该方向的过去和现在，并预测未来可能的发展方向。对于刚上研究生的同学，该采用什么样的方法来整理选题方向上的论文，使之符合逻辑，并
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="科研" scheme="https://huangwang.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>系统仿真中一些问题的思考</title>
    <link href="https://huangwang.github.io/2018/12/18/%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F%E4%B8%AD%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/12/18/系统仿真中一些问题的思考/</id>
    <published>2018-12-18T10:41:42.000Z</published>
    <updated>2018-12-18T14:49:50.923Z</updated>
    
    <content type="html"><![CDATA[<p>系统仿真（system simulation）就是根据系统分析的目的，在分析系统各要素性质及其相互关系的基础上，建立能描述系统结构或行为过程的、且具有一定逻辑关系或数量关系的仿真模型，据此进行试验或定量分析，以获得正确决策所需的各种信息。</p><h1 id="系统仿真与仿真游戏的区别"><a href="#系统仿真与仿真游戏的区别" class="headerlink" title="系统仿真与仿真游戏的区别"></a>系统仿真与仿真游戏的区别</h1><p>系统仿真与仿真游戏本质上没有区别，都是计算机程序对现实的模拟，所不同的是各自对仿真保真度（Simulation Fidelity）的要求不同。</p><p>仿真保真度（Simulation Fidelity）用于描述仿真精度，模拟真实对应物有多近似：</p><ul><li>低保真：对系统的最小模拟，接受输入产生输出</li><li>中等保真：对刺激能自动响应，有限精度</li><li>高保真：接近不可辨识或者尽可能地接近真实系统</li></ul><p>通常系统仿真对仿真保真度的要求比仿真游戏要高。</p><h1 id="计算步长与采样周期"><a href="#计算步长与采样周期" class="headerlink" title="计算步长与采样周期"></a>计算步长与采样周期</h1><p>采用计算机进行数值模拟或系统仿真时，经常需要采用数值解法求解模型方程。系统模型一般采用微分方程描述（也有其它形式），采用数值方法求解，就是采用迭代法逐步逼近。</p><h2 id="计算步长"><a href="#计算步长" class="headerlink" title="计算步长"></a>计算步长</h2><p>积分与微分是互逆。对一个曲线（包括直线）方程求积分，其实就是求曲线与横轴围成的面积。该面积可以用一系列间隔很小的面积块相加得到。这些小间隔的宽度就是计算步长。显然，纯粹从精度的角度考虑，步长越小越精确，因为近似面积更接近实际图形面积。</p><h2 id="采样周期"><a href="#采样周期" class="headerlink" title="采样周期"></a>采样周期</h2><p>采样周期是对一个实际信号测量时，相邻两次测量之间的时间间隔。有时候，采样周期和计算步长相似，但采样周期要考虑实际限制，且是时间单位，而计算步长不一定是时间单位，且相对自由些。两者在数值上没必然联系。<strong>对于同一问题，且都是时间量纲的话，采样周期大于等于计算步长，前者是后者的整数倍</strong>。</p><p>系统仿真包含系统模型求解，也就是在每个采样周期内，要解出模型方程。控制系统仿真时在采样周期内要解出两个模型方程：控制器模型和系统模型。</p><p><strong>一个采样周期内可对系统模型迭代求解一次或多次</strong>。</p><h2 id="计算步长和采样周期大小的选择"><a href="#计算步长和采样周期大小的选择" class="headerlink" title="计算步长和采样周期大小的选择"></a>计算步长和采样周期大小的选择</h2><p>关于采样周期和计算步长的选择，一般考虑以下因素：</p><ul><li><p>从求解精度考虑，越小越好。</p></li><li><p>从计算量考虑，越大越好。</p></li></ul><h2 id="采样周期与每秒帧数-Frames-Per-Second，FPS"><a href="#采样周期与每秒帧数-Frames-Per-Second，FPS" class="headerlink" title="采样周期与每秒帧数(Frames Per Second，FPS)"></a>采样周期与每秒帧数(Frames Per Second，FPS)</h2><p>采样周期以秒为单位，则</p><script type="math/tex; mode=display">FPS=\frac{1}{采样周期}</script><p>FPS是指每秒画面重绘的次数，用于衡量画面切换速度。FPS越大，则动画效果越平滑，当FPS小于20时，一般就能明显感受到画面的卡滞现象。</p><p>当FPS足够大(比如达到60)，再增加帧数人眼也不会感受到明显的变化，反而相应地就要消耗更多资源(比如电影的胶片就需要更长了，或是电脑刷新画面需要消耗计算资源等等)。因此，选择一个适中的FPS即可。</p><p>NTSC标准的电视FPS是30，PAL标准的电视FPS是25，电影的FPS标准为24。</p><h1 id="WebGL动画"><a href="#WebGL动画" class="headerlink" title="WebGL动画"></a>WebGL动画</h1><p>WebGL是一种JavaScript API，用于在不使用插件的情况下在任何兼容的网页浏览器中呈现交互式2D和3D图形。但要产生WebGL动画，需要对运动的场景不停的采样，即不停地拍照。JavaScript的采样函数主要有setInterval方法和requestAnimationFrame方法。</p><h2 id="setInterval方法"><a href="#setInterval方法" class="headerlink" title="setInterval方法"></a>setInterval方法</h2><blockquote><p>如果要设置特定的FPS(虽然严格来说，即使使用这种方法，JavaScript也不能保证帧数精确性)，可以使用JavaScript DOM定义的方法：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(fn,mesc)</span><br></pre></td></tr></table></figure><p>其中，fn是每过msec毫秒执行的函数，如果将fn定义为重绘画面的函数，就能实现动画效果。setInterval函数返回一个变量timer，如果需要停止重绘，需要使用clearInterval方法，并传入该变量timer。</p><h2 id="requestAnimationFrame方法"><a href="#requestAnimationFrame方法" class="headerlink" title="requestAnimationFrame方法"></a>requestAnimationFrame方法</h2><blockquote><p>大多数时候，我们并不在意多久重绘一次，这时候就适合用requestAnimationFrame方法了。它告诉浏览器在合适的时候调用指定函数，通常可能达到60FPS。</p></blockquote><ul><li>requestAnimationFrame同样有对应的cancelAnimationFrame取消动画</li><li>和setInterval不同的是，由于requestAnimationFrame只请求一帧画面，因此，除了在init函数中需要调用，在被其调用的函数中需要再次调用requestAnimationFrame</li></ul><h2 id="使用stat-js记录FPS"><a href="#使用stat-js记录FPS" class="headerlink" title="使用stat.js记录FPS"></a>使用stat.js记录FPS</h2><p>stat.js是Three.js的作者Mr.Doob的另一个有用的JavaScript库。很多情况下，我们希望知道实时的FPS信息，从而更好地监测动画效果。这时候，stat.js就能提供一个很好的帮助，它占据屏幕中的一小块位置(如左上角)，显示实时的FPS信息。</p><p>在HTML中引用stat.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//mrdoob.github.io/stats.js/build/stats.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>再使用如下代码监视实时FPS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var stats = new Stats();</span><br><span class="line">stats.showPanel( 1 ); // 0: fps, 1: ms, 2: mb, 3+: custom</span><br><span class="line">document.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line">function animate() &#123;</span><br><span class="line"></span><br><span class="line">stats.begin();</span><br><span class="line"></span><br><span class="line">// monitored code goes here</span><br><span class="line"></span><br><span class="line">stats.end();</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.sciencenet.cn/blog-341979-776318.html" target="_blank" rel="noopener">计算步长和采样周期</a>,by 王永林.</li><li><a href="http://www.ufgame.com/5951.html" target="_blank" rel="noopener">离散和连续模拟之间的实际区别是什么？</a>,by UF Game.</li><li><a href="https://baike.baidu.com/item/系统仿真" target="_blank" rel="noopener">系统仿真</a>,by 百度百科.</li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-physicsengines/index.html" target="_blank" rel="noopener">开源的物理引擎</a>,by M. Jones.</li><li><a href="https://zh.wikipedia.org/wiki/数值分析" target="_blank" rel="noopener">数值分析</a>,by wikipedia.</li><li><a href="https://segmentfault.com/a/1190000012238927" target="_blank" rel="noopener">three.js 入门详解(二)</a>,by Levi.</li><li><a href="https://zh.wikipedia.org/wiki/WebGL" target="_blank" rel="noopener">WebGL</a>,by wikipedia.</li><li><a href="https://github.com/mrdoob/stats.js" target="_blank" rel="noopener">stats.js</a>, by mydoob.</li><li><a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener">详解JavaScript中的Event Loop（事件循环）机制</a>,by 暮雨清秋.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统仿真（system simulation）就是根据系统分析的目的，在分析系统各要素性质及其相互关系的基础上，建立能描述系统结构或行为过程的、且具有一定逻辑关系或数量关系的仿真模型，据此进行试验或定量分析，以获得正确决策所需的各种信息。&lt;/p&gt;
&lt;h1 id=&quot;系统仿真与
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="WebGL" scheme="https://huangwang.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>撰写学术论文的思考</title>
    <link href="https://huangwang.github.io/2018/12/17/%E6%92%B0%E5%86%99%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/12/17/撰写学术论文的思考/</id>
    <published>2018-12-17T12:25:20.000Z</published>
    <updated>2018-12-20T16:05:22.366Z</updated>
    
    <content type="html"><![CDATA[<p>迫于学业和工作的压力，撰写了不少的学术论文。但是并没有对如何撰写学术论文进行思考。看到清华大学的肖寒<br>博士在某个问题下的回答后，感觉茅塞顿开：</p><blockquote><p> 不过，一般注水的作者相对而言都是新手，因为比较有经验的研究者都知道：“<strong>论文的一切都在于贡献，不在于结果</strong>”</p><p> 你的结果只是一个说明你贡献的例证，多那么点少那么点，大家看了毫无区别。你注水除了恶心我们这些后来实验的人，就没什么别的用处了。有那些<strong>疯狂调参和使劲弄技巧</strong>的时间，真不如<strong>拿来整理好你自己的思路，把论文的论述过程做到有理有据</strong>！因为 80.2 和 80.3 正常人都没法记住其间区别，但你<strong>循循善诱的精致论述会让所有人印象深刻</strong>。我希望新手不要本末倒置！</p></blockquote><p>论文重在贡献，迫于学业和工作的压力造的注水论文实在无趣！</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/22520434" target="_blank" rel="noopener">看图说话的AI小朋友——图像标注趣谈（下）</a>, by 杜客.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迫于学业和工作的压力，撰写了不少的学术论文。但是并没有对如何撰写学术论文进行思考。看到清华大学的肖寒&lt;br&gt;博士在某个问题下的回答后，感觉茅塞顿开：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 不过，一般注水的作者相对而言都是新手，因为比较有经验的研究者都知道：“&lt;stron
      
    
    </summary>
    
    
      <category term="科研" scheme="https://huangwang.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="感悟" scheme="https://huangwang.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>node-gyp使用帮助</title>
    <link href="https://huangwang.github.io/2018/12/16/node-gyp%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <id>https://huangwang.github.io/2018/12/16/node-gyp使用帮助/</id>
    <published>2018-12-16T05:27:18.000Z</published>
    <updated>2018-12-16T16:19:14.031Z</updated>
    
    <content type="html"><![CDATA[<p>node-gyp是为了编译nodejs addon模块而构建的跨平台命令行工具。nodejs addon模块使用c++语言编写，在源代码级别进行分发，通过node-gyp实现跨平台的编译安装。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>node-gyp源于gyp。gyp是一个用来生成项目文件的工具，刚开始设计给chromium项目使用的。它可以从平台无关的配置生成平台相关的Visual Studio、Xcode、Makefile的项目文件，然后调用 vsbuild、xcode、gcc等编译平台来编译。这就不需要花额外的时间处理每个平台不同的项目配置以及项目之间的依赖关系。</p><p>nodejs addon模块采用源代码分发，安装需要根据不同平台采用合适的编译器编译安装，这就是node-gyp项目诞生的原由。</p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装node-gyp"><a href="#安装node-gyp" class="headerlink" title="安装node-gyp"></a>安装node-gyp</h2><p>在上线情况下，使用如下命令安装node-gyp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g node-gyp</span><br></pre></td></tr></table></figure></p><h2 id="安装C-编译器"><a href="#安装C-编译器" class="headerlink" title="安装C++编译器"></a>安装C++编译器</h2><p>根据操作系统平台的不同，需安装对应的编译器，以方便node-gyp调用。以Windows平台为例，安装VC++编译器有两种方法：</p><ul><li><p>直接安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 以管理员身份打开cmd或powershell</span><br><span class="line"></span><br><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure></li><li><p>手动安装</p><ul><li>安装Visual C++构建环境： 使用Visual Studio Build Tools的Visual C++ build tools工作负载或者Visual Studio 2017 Community的Desktop development with C++工作负载。</li><li>安装Python 2.7，不支持python3，然后运行npm config set python python2.7</li><li>在cmd中运行npm config set msvs_version 2017</li></ul></li></ul><p>手动安装Visual C++构建环境的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 使用Visual Studio Build Tools的Visual C++ build tools工作负载，确保安装win10sdk，编译nodejs源码时需要</span><br><span class="line"></span><br><span class="line">.\vs_buildtools__2041717674.1536666005.exe --layout d:\vc2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended</span><br><span class="line"></span><br><span class="line"># 使用Visual Studio 2017 Community的Desktop development with C++工作负载</span><br><span class="line"></span><br><span class="line">.\vs_community__208176120.1522073957.exe --layout e:\vs2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.CoreEditor --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended</span><br></pre></td></tr></table></figure></p><h2 id="node-gyp编译测试"><a href="#node-gyp编译测试" class="headerlink" title="node-gyp编译测试"></a>node-gyp编译测试</h2><p>以在Win10平台编译nodejs addon模块为例，在离线情况使用如下命令测试node-gyp是否工作正常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node-gyp configure --nodedir=d:\node-v8.11.3</span><br><span class="line"></span><br><span class="line">node-gyp build</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/36291768" target="_blank" rel="noopener">node-gyp的作用是什么?</a>,by zhihu.</li><li><a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener">node-gyp</a>, by nodejs</li><li><a href="https://github.com/felixrieseberg/windows-build-tools" target="_blank" rel="noopener">Windows-Build-Tools</a>, by felixrieseberg.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node-gyp是为了编译nodejs addon模块而构建的跨平台命令行工具。nodejs addon模块使用c++语言编写，在源代码级别进行分发，通过node-gyp实现跨平台的编译安装。&lt;/p&gt;
&lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>树莓派使用lirc进行红外遥控测试</title>
    <link href="https://huangwang.github.io/2018/12/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8lirc%E8%BF%9B%E8%A1%8C%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7%E6%B5%8B%E8%AF%95/"/>
    <id>https://huangwang.github.io/2018/12/15/树莓派使用lirc进行红外遥控测试/</id>
    <published>2018-12-15T11:14:42.000Z</published>
    <updated>2018-12-18T10:45:52.341Z</updated>
    
    <content type="html"><![CDATA[<p>在树莓派上使用lirc进行红外遥控测试的步骤比较繁琐，记录一下以备忘。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="lirc库"><a href="#lirc库" class="headerlink" title="lirc库"></a>lirc库</h2><p>LIRC (Linux Infrared remote control,Linux红外线遥控)是一个开放源代码的包。这个包可以让你的Linux系统能够接收及发送红外线信号。</p><p>Microsoft Windows上有个功能相同的软件叫WinLIRC。</p><p>利用LIRC和红外线接收器，你就几乎可以用所有的红外线遥控器（例如：电视遥控器）来控制你的计算机。举例来说，你可以用遥控器来控制DVD或音乐的播放。</p><h3 id="lirc配置文件说明"><a href="#lirc配置文件说明" class="headerlink" title="lirc配置文件说明"></a>lirc配置文件说明</h3><ul><li>/etc/lirc/lircd.conf为遥控器配置文件</li><li>/etc/lirc/lircmd.conf为lircmd配置文件，后者可以将遥控器用作鼠标。</li><li>/etc/lirc/lircrc为irexec配置文件，后者可以在收到遥控器信号号运行设定的程序。</li></ul><h3 id="制作遥控器配置文件"><a href="#制作遥控器配置文件" class="headerlink" title="制作遥控器配置文件"></a>制作遥控器配置文件</h3><p>使用irrecord命令制作遥控器配置文件lircd.conf。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 首先停止lirc服务</span><br><span class="line">sudo service lirc stop</span><br><span class="line"></span><br><span class="line"># 制作遥控器配置文件</span><br><span class="line">irrecord -d /dev/lirc0 &lt;model&gt;.conf</span><br></pre></td></tr></table></figure></p><h1 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul><li>树莓派3B+</li><li>红外接收器</li><li>红外遥控器</li><li>杜邦线 </li></ul><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>红外接收器都有三个引脚：VCC、GND、Data。其中：<br>VCC：连接5V的引脚<br>GND：连接接地的引脚<br>Data：连接GPIO23</p><h2 id="lirc配置"><a href="#lirc配置" class="headerlink" title="lirc配置"></a>lirc配置</h2><ol><li><p>安装lirc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lirc -y</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/modules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># /etc/modules: kernel modules to load at boot time.</span><br><span class="line">#</span><br><span class="line"># This file contains the names of kernel modules that should be loaded</span><br><span class="line"># at boot time, one per line. Lines beginning with &quot;#&quot; are ignored.</span><br><span class="line"></span><br><span class="line">i2c-dev</span><br><span class="line"># 添加如下代码</span><br><span class="line">lirc_dev</span><br><span class="line">lirc_rpi gpio_in_pin=23 gpio_out_pin=22</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/lirc/lirc_options.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 修改如下两项</span><br><span class="line">driver          = default </span><br><span class="line">device          = /dev/lirc0</span><br></pre></td></tr></table></figure></li><li><p>修改/boot/config.txt<br>在/boot/config.txt文件中找到#dtoverlay=lirc-rpi，将其修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtoverlay=lirc-rpi:gpio_in_pin=23,gpio_out_pin=22</span><br></pre></td></tr></table></figure></li><li><p>重启测试</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo init 6</span><br><span class="line"># 查看lirc是否加载成功</span><br><span class="line">lsmod | grep lirc</span><br><span class="line">ls /dev/lirc0</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/zh-hans/LIRC" target="_blank" rel="noopener">LIRC</a>,by wikipedia.</li><li><a href="https://blog.newnius.com/raspberry-3b-setup-lirc.html" target="_blank" rel="noopener">树莓派—-红外遥控设置</a>,by 逍遥游.</li><li><a href="https://cnly.github.io/2016/07/30/raspi-lirc.html" target="_blank" rel="noopener">配置树莓派上的lirc(Raspbian, 2016)</a>,by Cnly.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在树莓派上使用lirc进行红外遥控测试的步骤比较繁琐，记录一下以备忘。&lt;/p&gt;
&lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;h2 id=&quot;lirc库&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>飞行力学中坐标系定义</title>
    <link href="https://huangwang.github.io/2018/12/10/%E9%A3%9E%E8%A1%8C%E5%8A%9B%E5%AD%A6%E4%B8%AD%E5%9D%90%E6%A0%87%E7%B3%BB%E5%AE%9A%E4%B9%89/"/>
    <id>https://huangwang.github.io/2018/12/10/飞行力学中坐标系定义/</id>
    <published>2018-12-10T15:32:27.000Z</published>
    <updated>2018-12-19T13:02:50.183Z</updated>
    
    <content type="html"><![CDATA[<p>建立飞机的运动学模型的前提是建立合适的坐标系，在此基础上才能定义各种参数描述飞机的状态。下面介绍常用的坐标系及常用描述飞机状态的参数。</p><h1 id="常用坐标系"><a href="#常用坐标系" class="headerlink" title="常用坐标系"></a>常用坐标系</h1><h2 id="地面固定坐标轴系-AX-gY-gZ-g"><a href="#地面固定坐标轴系-AX-gY-gZ-g" class="headerlink" title="地面固定坐标轴系($AX_gY_gZ_g$)"></a>地面固定坐标轴系($AX_gY_gZ_g$)</h2><p>将地球视为椭球体，则地面固定坐标轴系定义为：</p><p>以椭球面上一点为坐标系原点$A$，$Z_g$轴与椭球法线重合，向下为正，$X_g$与$Y_g$轴位于过坐标原地的椭球切平面上,按右手法则建立，$X_g$轴与椭球短半轴重合（北向），$Y_g$轴与地球椭球的长半轴重合（东向）。</p><p>在研究坐标转换关系时，<strong>常使用飞机牵连铅垂地面固定坐标系$OX_gY_gZ_g$</strong>。其原点$O$位于飞机质心，三坐标轴平行于地面固定坐标轴系$AX_gY_gZ_g$的各个轴。飞机姿态——偏航、俯仰、滚转的定义即与飞机牵连铅垂地面固定坐标系有关。</p><h2 id="机体坐标系-体轴系-OXYZ"><a href="#机体坐标系-体轴系-OXYZ" class="headerlink" title="机体坐标系(体轴系$OXYZ$)"></a>机体坐标系(体轴系$OXYZ$)</h2><p>机体坐标系定义为：</p><p>原点$O$位于质心，$O_X$平行于机身轴线或对称面机翼弦线指向前方（机头方向）；$O_Y$垂直于对称面指向右翼；$O_Z$在飞机对称面内，垂直于$O_X$指向下方。符合右手系建立规定。</p><p></p><p align="center">    <img src="images/plane_axis.png" width="90%" alt="机体坐标系"></p><p></p><center>图1  飞机牵连铅垂地面固定坐标系（OXgYgZg）与体轴系（OXYZ）</center><h2 id="航迹坐标系-OX-kY-kZ-k"><a href="#航迹坐标系-OX-kY-kZ-k" class="headerlink" title="航迹坐标系($OX_kY_kZ_k$)"></a>航迹坐标系($OX_kY_kZ_k$)</h2><p>航迹坐标系定义：</p><p>原点$O$位于飞机质心，$OX_k$沿飞机速度方向；$OZ_k$在$OX_k$所在铅垂平面内，垂直于$OX_k$指向下方；$OY_k$垂直于$OX_k$、$OZ_k$ 所在平面指向右方；符合右手系建立规定。</p><p></p><p align="center">    <img src="images/track_axis.png" width="90%" alt="航迹坐标系"></p><p></p><center>图2  航迹坐标系（OXkYkZk）</center><h2 id="气流坐标轴系-风轴系-OX-aY-aZ-a"><a href="#气流坐标轴系-风轴系-OX-aY-aZ-a" class="headerlink" title="气流坐标轴系(风轴系$OX_aY_aZ_a$)"></a>气流坐标轴系(风轴系$OX_aY_aZ_a$)</h2><p>气流坐标轴系又称速度坐标轴系，定义为：</p><p>原点$O$位于飞机质心，$OX_a$沿飞机速度方向；$OZ_a$在飞机对称面内，垂直于$OX_a$指向下方；$OY_a$垂直于$OX_a$、$OZ_a$ 所在平面指向右方；符合右手系建立规定。</p><p>气动力三个分量（升力、阻力、侧力）是根据风轴系定义的，其中升力与阻力分别沿$OZ_a$、$OX_a$的负向。</p><h2 id="半机体坐标系-OX-iY-iZ-i"><a href="#半机体坐标系-OX-iY-iZ-i" class="headerlink" title="半机体坐标系($OX_iY_iZ_i$)"></a>半机体坐标系($OX_iY_iZ_i$)</h2><p>半机体坐标系定义为：</p><p>原点$O$位于质心，$OX_i$沿飞机速度向飞机对称面内投影方向；$OZ_i$在飞机对称面内，垂直于$OX_i$指向下方；$OY_i$垂直于$OX_i$、$OZ_i$ 所在平面指向右方；符合右手系建立规定。</p><p></p><p align="center">    <img src="images/half_plane_axis.png" width="90%" alt="半机体坐标"></p><p></p><center>图3  风轴系（OXaYaZa）与半机体坐标系（OXiYiZi）</center><h2 id="稳定性坐标系-OX-sY-sZ-s"><a href="#稳定性坐标系-OX-sY-sZ-s" class="headerlink" title="稳定性坐标系($OX_sY_sZ_s$)"></a>稳定性坐标系($OX_sY_sZ_s$)</h2><p>稳定性坐标系定义为：</p><p>原点$O$位于质心，$OX_s$沿未受扰动的速度在对称面内的投影方向；$OY_s$在飞机对称面内，指向右；$OZ_s$对称平面内垂直于$OX_s$向下；符合右手系建立规定。</p><p></p><p align="center">    <img src="images/stable_axis.png" width="90%" alt="半机体坐标"></p><p></p><center>图4  稳定性坐标系（OXsYsZs）</center><h1 id="常用飞参"><a href="#常用飞参" class="headerlink" title="常用飞参"></a>常用飞参</h1><ul><li><p>机体坐标系相对于飞机牵连铅垂地面固定坐标系的夹角</p><ul><li>偏航角：机体坐标系$x$轴在水平面内投影与$x_g$的夹角，以$\psi$表示</li><li>俯仰角：机体坐标系$x$轴与水平面的夹角，以$\theta$表示</li><li>滚转角：过机体坐标系$x$轴的铅垂面与机体坐标系$z$轴的夹角，以$\phi$表示</li></ul></li><li><p>飞行速度矢量相对于体轴系的夹角</p><ul><li>迎角：速度矢量在飞机纵向对称面内投影与机体坐标系$x$轴夹角，以$\alpha$表示</li><li>侧滑角：速度矢量与飞机纵向对称面的夹角，以$\beta$表示</li></ul></li><li><p>飞行速度矢量相对于地面的夹角</p><ul><li>爬升角：速度与地面水平面夹角，以$\gamma$表示</li><li>航迹方位角：速度在地面水平面的投影与$x_g$夹角，以$\chi$表示</li></ul></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/23722074" target="_blank" rel="noopener">无人机飞控通俗演义之 纷繁复杂的飞行力学</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/25150076" target="_blank" rel="noopener">一起写飞行仿真之 六自由度动力学方程</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/20926052" target="_blank" rel="noopener">飞行器飞行动力学（二）坐标系与夹角们</a>, by 萝卜.</li><li><a href="https://huangwang.github.io/2018/06/10/Cesium中飞行器姿态控制/">Cesium中飞行器姿态控制</a>,by jack huang.</li><li><a href="https://blog.csdn.net/liyuanbhu/article/details/51474290" target="_blank" rel="noopener">MathJax 支持的 Latex 符号总结(希腊字母和希伯来字母)</a>,by liyuanbhu</li><li><a href="https://blog.csdn.net/tina_ttl/article/details/51279530" target="_blank" rel="noopener">空间中三维矢量</a>,by tina_ttl.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建立飞机的运动学模型的前提是建立合适的坐标系，在此基础上才能定义各种参数描述飞机的状态。下面介绍常用的坐标系及常用描述飞机状态的参数。&lt;/p&gt;
&lt;h1 id=&quot;常用坐标系&quot;&gt;&lt;a href=&quot;#常用坐标系&quot; class=&quot;headerlink&quot; title=&quot;常用坐标系&quot;&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行力学" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E5%8A%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Debian系统安装NVIDIA驱动支持双显卡切换</title>
    <link href="https://huangwang.github.io/2018/12/10/Debian%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85NVIDIA%E9%A9%B1%E5%8A%A8%E6%94%AF%E6%8C%81%E5%8F%8C%E6%98%BE%E5%8D%A1%E5%88%87%E6%8D%A2/"/>
    <id>https://huangwang.github.io/2018/12/10/Debian系统安装NVIDIA驱动支持双显卡切换/</id>
    <published>2018-12-10T12:27:27.000Z</published>
    <updated>2018-12-10T13:36:51.168Z</updated>
    
    <content type="html"><![CDATA[<p>购买笔记本拥有Intel集成显卡和NVIDIA显卡，如何在Debian Linux下启用NVIDIA显卡是一个难题。幸运的是，通过bumblebee软件可在Linux下支持NVIDIA Optimus技术，实现Intel集成显卡和NVIDIA显卡之间的切换使用。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="NVIDIA-Optimus"><a href="#NVIDIA-Optimus" class="headerlink" title="NVIDIA Optimus"></a>NVIDIA Optimus</h2><p>Optimus是NVIDIA针对笔记本电脑的显示切换技术。它可以实现笔记本电脑中独立显卡与主板内置显卡之间无缝、自动、实时的切换（用户无需重启或手动调整），从而实现能源的节约。</p><p>利用Optimus技术后，计算机的显示输出永远都只会通过集成式芯片组的显示核心。独立显卡的显示输出将会被废掉，有关的输出亦会发送到前者。由于显示输出的设备是固定的，所以黑屏现象将会被解决。额外的切换线路亦变得不需要，因为在不需要独立显示核心的时候，系统会索性断绝其电源供应。当系统的显示负载轻的时候，就会完全利用内置的显示核心。当负载增加后，系统就会打开独立显示核心作计算之用。协议分工方面由驱动程序负责，NVIDIA声称可以兼容所有的API。</p><h2 id="Bumblebee"><a href="#Bumblebee" class="headerlink" title="Bumblebee"></a>Bumblebee</h2><p>Bumblebee 致力于使 NVIDIA Optimus 在 GNU/Linux 系统上可用，实现两块不同的供电配置的显卡同时插入使用，共享同一个 framebuffer。</p><h1 id="安装配置过程"><a href="#安装配置过程" class="headerlink" title="安装配置过程"></a>安装配置过程</h1><h2 id="禁止加载开源驱动nouveau"><a href="#禁止加载开源驱动nouveau" class="headerlink" title="禁止加载开源驱动nouveau"></a>禁止加载开源驱动nouveau</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/modprobe.d/nvidia-installer-disable-nouveau.conf</span><br><span class="line"></span><br><span class="line">#上述文件不存在则新建，在文件中添加下面两行文字</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset = 0</span><br><span class="line"></span><br><span class="line">#系统重启后使用以下命令查看nouveau驱动是否被禁止</span><br><span class="line">lsmod |grep -i nouveau</span><br></pre></td></tr></table></figure><h2 id="安装内核头文件"><a href="#安装内核头文件" class="headerlink" title="安装内核头文件"></a>安装内核头文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y linux-headers-$(uname -r)</span><br></pre></td></tr></table></figure><h2 id="安装NVIDIA驱动"><a href="#安装NVIDIA驱动" class="headerlink" title="安装NVIDIA驱动"></a>安装NVIDIA驱动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 关于是否生存xorg.conf文件，选no</span><br><span class="line">$ sudo apt-get install  nvidia-driver nvidia-xconfig nvidia-kernel-dkms</span><br></pre></td></tr></table></figure><h2 id="安装双显卡切换解决方案包"><a href="#安装双显卡切换解决方案包" class="headerlink" title="安装双显卡切换解决方案包"></a>安装双显卡切换解决方案包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install bumblebee-nvidia primus</span><br></pre></td></tr></table></figure><h2 id="添加当前用户到bumblebee用户组"><a href="#添加当前用户到bumblebee用户组" class="headerlink" title="添加当前用户到bumblebee用户组"></a>添加当前用户到bumblebee用户组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adduser $USER bumblebee</span><br></pre></td></tr></table></figure><h2 id="修改bumblebee配置"><a href="#修改bumblebee配置" class="headerlink" title="修改bumblebee配置"></a>修改bumblebee配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/bumeblebee/bumblebee.conf</span><br><span class="line">: Driver=nvidia</span><br><span class="line"></span><br><span class="line">#将/etc/bumeblebee/bumblebee.conf文件中的Driver=* 改成 =nvidia</span><br><span class="line"></span><br><span class="line">$ vi /etc/bumblebee/xorg.conf.nvidia</span><br><span class="line">:BusID &quot;PCI:01:00:0&quot; </span><br><span class="line"></span><br><span class="line">#在/etc/bumblebee/xorg.conf.nvidia文件中，将Section“Device”部分添加PCI ID</span><br><span class="line"></span><br><span class="line"># 可使用如下命令查看NVIDIA显卡的BUS ID</span><br><span class="line">nvidia-xconfig --query-gpu-info | grep &apos;BusID : &apos; | cut -d &apos; &apos; -f6</span><br></pre></td></tr></table></figure><h2 id="重启进入桌面"><a href="#重启进入桌面" class="headerlink" title="重启进入桌面"></a>重启进入桌面</h2><p>如果无法进入桌面环境，则安装失败，进入高级修复使用如下命令进行清理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge nvidia* bumblebee* prime*</span><br></pre></td></tr></table></figure></p><p>bumblebee服务开机不会启动，设置开机启动即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-rc.d -f bumblebee defaults</span><br></pre></td></tr></table></figure></p><h1 id="使用独显运行程序"><a href="#使用独显运行程序" class="headerlink" title="使用独显运行程序"></a>使用独显运行程序</h1><p>bumblebee不能做到集显和独显之间自动切换，系统运行时默认使用集显，当你需要使用独显运行某个程序或者游戏的时候，终端执行如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ optirum command #使用独显运行command程序</span><br><span class="line">$ optirum -b primus command #使用独显运行command程序，提升性能</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/37252268" target="_blank" rel="noopener">kali 在支持双显卡切换机器宏碁（Acer）V3下安装NVIDIA驱动</a>, by 不梦君.</li><li><a href="https://github.com/europa502/Installing-Nvidia-drivers-on-Kali-Linux" target="_blank" rel="noopener">Installing-Nvidia-drivers-on-Kali-Linux</a>, by europa502.</li><li><a href="https://zh.wikipedia.org/wiki/NVIDIA_Optimus" target="_blank" rel="noopener">NVIDIA Optimus</a>, by wikipedia.</li><li><a href="https://linux.cn/article-3946-1.html" target="_blank" rel="noopener">在Ubuntu上安装和配置Nvidia Optimus驱动</a>, by Linux中国.</li><li><a href="https://wiki.archlinux.org/index.php/Bumblebee(简体中文" target="_blank" rel="noopener">Bumblebee</a>),by archlinux.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;购买笔记本拥有Intel集成显卡和NVIDIA显卡，如何在Debian Linux下启用NVIDIA显卡是一个难题。幸运的是，通过bumblebee软件可在Linux下支持NVIDIA Optimus技术，实现Intel集成显卡和NVIDIA显卡之间的切换使用。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="https://huangwang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux图形界面基础知识</title>
    <link href="https://huangwang.github.io/2018/12/09/Linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://huangwang.github.io/2018/12/09/Linux图形界面基础知识/</id>
    <published>2018-12-09T11:55:24.000Z</published>
    <updated>2018-12-10T13:34:24.304Z</updated>
    
    <content type="html"><![CDATA[<p>Linux初学者经常分不清楚linux和X之间，X和Xfree86之间，X和KDE，GNOME等之间是什么关系。常常混淆概念，下面以易于理解的方式解释X，X11，XFREE，WM，KDE，GNOME等之间的关系。</p><h1 id="Linux内核没有图形用户界面"><a href="#Linux内核没有图形用户界面" class="headerlink" title="Linux内核没有图形用户界面"></a>Linux内核没有图形用户界面</h1><p>与Windows操作系统内核集成图形用户界面不同，Linux内核没有图形用户界面，是一个基于命令行的操作系统。</p><p>linux和Xfree的关系就相当于当年的DOS和 WINDOWS3.0一样，windows3.0不是独立的操作系统，它只是DOS的扩充，是DOS下的应用程序级别的系统，不是独立的操作系统，同样 XFree只是linux下的一个应用程序而已。不是系统的一部分，但是X的存在可以方便用户使用电脑。</p><p>WINDOWS95及以后的版本就不一样了，他们 的图形界面是操作系统的一部分，图形界面在系统内核中就实现了，没有了图形界面windows就不成为windows了，但linux却不一样，没有图形 界面linux还是linux，很多装linux的WEB服务器就根本不装X服务器.这也WINDOWS和linux的重要区别之一。</p><h1 id="X是协议，不是具体的某个软件"><a href="#X是协议，不是具体的某个软件" class="headerlink" title="X是协议，不是具体的某个软件"></a>X是协议，不是具体的某个软件</h1><p>X 是协议，就像HTTP协议，IP协议一样。一个基于X的应用程序需要运行并显示内容时他就联 接到X服务器，开始用X协议和服务器交谈。</p><p>比如一个X应用程序要在屏幕上输出一个圆那么他就用X协议对X服务器说：喂!我需要在屏幕上画一个圆.X应用程 序只负责告诉X服务器在屏幕的什么地方用什么颜色画一个多大的圆，而具体的”画”的动作，比如这个圆如何生成，用什么显卡的驱动程序去指挥显卡完成等等工作是由X服务器来完成的。</p><p>X服务器还负责捕捉键盘和鼠标的动作，假设X服务器捕捉到鼠标的左键被按下了，他就告诉X应用程序：亲爱的应用程序先生，我发现 鼠标被按下了，您有什么指示吗?如果X应用程序被设计成当按下鼠标左健后再在屏幕上画一个正方形的话，X应用程序就对X服务器说：请再画一个正方形，当然 他会告诉服务器在什么地方用什么颜色画多大的正方形，但不关心具体怎么画—那是服务器的事情。</p><h1 id="XFree86和Xorg是实现X协议的服务器程序"><a href="#XFree86和Xorg是实现X协议的服务器程序" class="headerlink" title="XFree86和Xorg是实现X协议的服务器程序"></a>XFree86和Xorg是实现X协议的服务器程序</h1><p>Xfree86就是这样一个去根据法规实现协议的 “交警”。他按照X协议的规定来完成X应用程序提交的在屏幕上显示的任务。当然不仅仅是某个特定的交警才可以去维护和实现这个法规，比如还可以由交通协管 员来实现交通法规，必要的时候警察也可以介入，当然前提是他们都要懂得交通法规，也就是要懂得协议。</p><p>所以实现X协议的软件也并不只有 XFree86，XFree86只是实现X协议的一个免费X服务器软件.商业上常用MOTIF，现在还有XORG，还有很多很小的由爱好者写的小的X服务器软件。</p><h1 id="X和X11R6的关系"><a href="#X和X11R6的关系" class="headerlink" title="X和X11R6的关系"></a>X和X11R6的关系</h1><p>X11R6 实际上是 X Protocol version 11 Release 6<br>(X协议第11版第六次发行)的意思，就是说目前用的X协议是第11版的，然后经过了6次小的修正。</p><p><strong>不同版本的X协议是不能通信的</strong>。就象我们现在IPV4和IPV6不能通信一样，不过不用担心，现在的X服务器软件和X应用程序都遵循X11R6。</p><h1 id="X服务器和WM-window-manager-窗口管理器-的关系"><a href="#X服务器和WM-window-manager-窗口管理器-的关系" class="headerlink" title="X服务器和WM(window manager 窗口管理器)的关系"></a>X服务器和WM(window manager 窗口管理器)的关系</h1><p> 窗口管理器是一种X应用程序，它负责窗口最大化，最小化，移动，关闭窗口等。这些不是X服务器负责完成的。</p><h1 id="KDE和GNOME"><a href="#KDE和GNOME" class="headerlink" title="KDE和GNOME"></a>KDE和GNOME</h1><p>KDE 和GNOME是LINUX里最常用的图形界面操作环境，他们不仅仅是一个窗口管理器那么简单， KDE是K Desktop Environment 的缩写。他不仅是一个窗口管理器，还有很多配套的应用软件和方便使用的桌面环境，比如任务栏，开始菜单，桌面图标等等。</p><p>GNOME是GNU Network Object Model Environment 的缩写。和KDE一样，也是一个功能强大的综合环境。</p><p>另外在其它UNIX系统中，常常使用CDE作为这样一个环境。</p><p>其它的小型窗口管理器有: window maker，after step，blackbox，fvwm，fvwm2，等等都是常用的优秀窗口管理器。</p><h1 id="linux图形界面层次关系总结"><a href="#linux图形界面层次关系总结" class="headerlink" title="linux图形界面层次关系总结"></a>linux图形界面层次关系总结</h1><p>linux本身—&gt;X服务器&lt;-[通过X协议交谈]-&gt;窗口管理器(综合桌面环境)—&gt;X应用程序。</p><p>Xfree86服务器的实现包括两个部分，一部分是和显卡直接打交道的低层，一部分是和X应用程序打交道的上层。</p><p>上层负责接收应用程序的请求和鼠标 键盘的动作。而和显卡直接打交道的底层负责指挥显卡生成图形，其实就是显卡驱动。上层接收到应用程序的请求后，将请求内容做适当处理，然后交给显卡驱动来 指挥 显卡完成画图的动作。</p><p>另外，上层的捕捉键盘和鼠标动作的部分会向应用程序提供鼠标和键盘的状态信息，应用程序接收到这些信息后决定是否再有相应的动作。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/huang_xw/article/details/9224683" target="_blank" rel="noopener">linux图形界面基本知识(X、X11、Xfree86、Xorg、GNOME、KDE)</a>, by  huang_xw.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux初学者经常分不清楚linux和X之间，X和Xfree86之间，X和KDE，GNOME等之间是什么关系。常常混淆概念，下面以易于理解的方式解释X，X11，XFREE，WM，KDE，GNOME等之间的关系。&lt;/p&gt;
&lt;h1 id=&quot;Linux内核没有图形用户界面&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="linux" scheme="https://huangwang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>家用电器安全使用年限与折旧</title>
    <link href="https://huangwang.github.io/2018/12/08/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8%E5%AE%89%E5%85%A8%E4%BD%BF%E7%94%A8%E5%B9%B4%E9%99%90%E4%B8%8E%E6%8A%98%E6%97%A7/"/>
    <id>https://huangwang.github.io/2018/12/08/家用电器安全使用年限与折旧/</id>
    <published>2018-12-08T13:42:07.000Z</published>
    <updated>2018-12-08T14:44:12.743Z</updated>
    
    <content type="html"><![CDATA[<p>家用电器都有一定的安全使用年限，超过安全使用年限，家用电器因产品老化将产生如下问题，造成安全隐患：</p><ul><li>绝缘体老化，产生漏电，导致电磁污染</li><li>元器件技术指标严重下降，导致有害物质泄漏，耗电量增加</li></ul><p>那么家用电器的安全使用年限是多少呢？购买二手家用电器时如何折旧呢？</p><h1 id="家用电器安全使用年限"><a href="#家用电器安全使用年限" class="headerlink" title="家用电器安全使用年限"></a>家用电器安全使用年限</h1><p>有关家电安全使用年限的标准通则早已出台，但是针对不同产品的具体年限细则却迟迟未发布。原因主要在于不同产品的使用年限评估难度较大，不同地区的使用差异性也较大，因此就目前而言国内尚无明确的家电使用年限方面的规定，国际通行年限可作参考：</p><ul><li>电吹风：4年</li><li>电热毯：6年</li><li>电脑：6年</li><li>吸尘器：8年</li><li>煤气灶：8年</li><li>电热水器：8年</li><li>洗衣机：8年</li><li>电视：8-10年</li><li>空调：8-10年</li><li>微波炉：10年</li><li>电饭煲：10年</li><li>电风扇：10年</li><li>冰箱：12-16年</li></ul><p>家用电器安全使用年限只是最高限定，<strong>如果在使用过程中不注意保养维护，也有可能缩减家用电器的使用寿命</strong>，这就要求用户在日常生活中需要注重维护保养，使家电处于良好的工作环境，确保家电安全“服役”。</p><h2 id="家用电器老化特征"><a href="#家用电器老化特征" class="headerlink" title="家用电器老化特征"></a>家用电器老化特征</h2><p>家用电器也有各自的老化特征，当出现以下老化特征时，建议及时保养或更换：</p><ol><li><p>空调：如果使用多年的空调开始出现制冷或制热变慢，噪音过大，在开机时会出现霉味且出风伴有灰尘，流出黑水，那么用户就应该考虑更换一台新空调。老旧空调此时不仅耗费更多电量，出风还会带有细菌污垢，影响身体健康。</p></li><li><p>冰箱：平时运行良好的冰箱开始出现制冷效果差，噪音过大，甚至发生轻微颤动时，说明已经老化。若继续使用，耗电量将会加大，食物的储鲜功能也会退化，有时还会出现冰箱制冷剂泄露，污染食材环境的问题。</p></li><li><p>洗衣机：洗衣机使用超龄的现象在用户中最为常见，判断它已经超龄的方式也最为简单。通常来说，洗衣机出现渗水、漏水、漏电，噪音过大，衣物清洗不净等问题都是达到使用年限的表现，严重时甚至会发生爆炸事件。</p></li><li><p>电视机：虽然各种类型的平板、投影仪的市场占有率越来越高，但电视机仍然是每个家庭不可或缺的电器之一。日常使用电视时，屏幕色彩暗淡，画面模糊抖动，除了要考虑电视自身质量问题，还要查看电视使用时长是否已经超出使用年限。超龄服役的电视机除了耗电量增加外，自燃或爆炸事故也时有发生。</p></li><li><p>热水器：热水器超出使用年限后，在运行时会出现异常声音，安全装置也会发生功能异常问题，再加上内胆中日积月累的杂质污垢，不仅会污染水质，还可能因漏电对人体造成伤害。除此之外，超龄热水器还易出现漏水、保温性差以及因内部电器元件老化导致的短路、冒烟等故障。</p></li></ol><p><strong>一旦发现家中电器存在以上类似的老化特征时，最好提前更换产品，以免带来严重后果</strong>。据媒体公开报道，每年我国因家电触电伤亡人数超过1000人，因家电引起的火灾损失更加惊人，而这其中最典型的原因就是家电超龄“使用”。</p><h1 id="家用电器折旧"><a href="#家用电器折旧" class="headerlink" title="家用电器折旧"></a>家用电器折旧</h1><p><strong>家用电器折旧可简单按固定资产折旧方法中的直线法，根据家用电器安全使用年限逐年折旧</strong>。</p><h2 id="固定资产折旧方法"><a href="#固定资产折旧方法" class="headerlink" title="固定资产折旧方法"></a>固定资产折旧方法</h2><p>固定资产折旧方法（Fixed-assets Depreciation Method），指将应提折旧总额在固定资产各使用期间进行分配时所采用的具体计算方法。折旧是指固定资产由于使用而逐渐磨损所减少的那部分价值。</p><p>固定资产的损耗有两种：</p><ul><li>有形损耗，也称作物质磨损，是由于使用而发生的机械磨损，以及由于自然力的作用所引起的自然损耗。</li><li>无形损耗，也称精神磨损，是指科学进步以及劳动生产率提高等原因而引起的固定资产价值的损失。</li></ul><p>一般情况下，当计算固定资产折旧时，要同时考虑这两种损耗。</p><p>固定资产折旧方法可分为三类：</p><h3 id="直线法"><a href="#直线法" class="headerlink" title="直线法"></a>直线法</h3><p>直线法（straight-line method）根据固定资产在整个使用寿命中的磨损状态而确定的成本分配结构。直线法依据是，固定资产的使用强度比较平均，而且各期所取得的收入差距不大。在直线法下，折旧金额是时间的线性函数。</p><p><strong>直线法折旧公式如下</strong>：</p><p>年折旧率 = （1 － 预计净残值率）÷ 预计使用寿命（年）× 100%</p><p>月折旧额 = 固定资产原价× 年折旧率 ÷ 12</p><p>其中，<strong>净残值是指预计固定资产清理报废时可收回的残值扣除清理费用后的数额</strong>。企业应根据固定资产的性质和使用方式，合理估计固定资产的净残值。</p><h3 id="加速折旧法"><a href="#加速折旧法" class="headerlink" title="加速折旧法"></a>加速折旧法</h3><p>加速折旧法也称为快速折旧法或递减折旧法。其特点是：在固定资产有效使用年限的前期多提折旧，后期则少提折旧。从而相对加快折旧的速度，以使固定资产成本在有效使用年限中加快得到补偿。在具体实务中，加速折旧方法又包括年数总和法和双倍余额递减法两种。</p><p><strong>年数总和法计算公式如下</strong>：</p><p>年折旧率 = 尚可使用寿命/ 预计使用寿命的年数总和 × 100 %</p><p>月折旧额 = （固定资产原价 － 预计净残值 ）× 年折旧率 ÷ 12</p><p>某设备预计使用5年，则预计使用寿命的年数总和为15（5+4+3+2+1）。第2年时尚可使用寿命为4，此年的年折旧率为4/15。</p><p><strong>双倍余额递减法计算公式如下</strong>：</p><p>年折旧率 =2÷　预计使用寿命（年）× 100%</p><p>月折旧额 = 固定资产净值 × 年折旧率 ÷ 12</p><h3 id="产量法"><a href="#产量法" class="headerlink" title="产量法"></a>产量法</h3><p>产量法（production method）根据固定资产的产出量分配其成本的方法。产量法的依据是固定资产的使用寿命主要是受其使用量影响，其合理性取决于三个条件：</p><p>（1）固定资产的每期用量波动较大；</p><p>（2）固定资产使用期内的产出的每期用量波动较大；</p><p>（3）固定资产服务潜力的下降与其使用程序密切相关。</p><p>如果符合这三个条件，产量法是最符合配比原则的。反对产量法的人认为，估计固定资产的产出量比估计固定资产的使用年限更加困难，而且很难考虑功能损耗因素。</p><p><strong>产量法计算公式如下</strong>：</p><p>单位工作量折旧额 = 固定资产原价 × （ 1 － 预计净残值率 ）/ 预计总工作量</p><p>某项固定资产月折旧额 = 该项固定资产当月工作量 × 单位工作量折旧额</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/64552198/answer/225583540" target="_blank" rel="noopener">家用电器的使用年限是多久？如何尽可能延长其寿命？</a>,by 海尔智慧生活.</li><li><a href="https://baike.baidu.com/item/固定资产折旧方法" target="_blank" rel="noopener">固定资产折旧方法</a>,by 百度百科.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;家用电器都有一定的安全使用年限，超过安全使用年限，家用电器因产品老化将产生如下问题，造成安全隐患：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝缘体老化，产生漏电，导致电磁污染&lt;/li&gt;
&lt;li&gt;元器件技术指标严重下降，导致有害物质泄漏，耗电量增加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么家用电器
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="生活常识" scheme="https://huangwang.github.io/tags/%E7%94%9F%E6%B4%BB%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>空战类游戏仿真的一些思考</title>
    <link href="https://huangwang.github.io/2018/12/08/%E7%A9%BA%E6%88%98%E7%B1%BB%E6%B8%B8%E6%88%8F%E4%BB%BF%E7%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/12/08/空战类游戏仿真的一些思考/</id>
    <published>2018-12-08T02:21:24.000Z</published>
    <updated>2018-12-18T10:42:33.260Z</updated>
    
    <content type="html"><![CDATA[<p>空战类游戏仿真涉及飞机、导弹、诱饵弹三种关键元素。为了使游戏仿真接近真实，一方面要使飞机、导弹、诱饵弹的模型及其特效（如尾焰）尽量逼真，另一方面要使飞机、导弹、诱饵弹的运动控制模型尽量接近真实。飞机、导弹、诱饵弹的模型可以用3d建模软件构建，尾焰也可以用粒子系统进行模拟，但飞机、导弹、诱饵弹的运动控制模型比较复杂，是实现空战类游戏仿真的关键。下面分别介绍飞机、导弹、诱饵弹的建模仿真。</p><h1 id="飞机的建模仿真"><a href="#飞机的建模仿真" class="headerlink" title="飞机的建模仿真"></a>飞机的建模仿真</h1><p>飞机的运动模型基于牛顿第二运动定律，即物体所受到的外力等于此物体的质量与加速度的乘积，而加速度与外力同方向。根据外部受力和力矩计算出各种惯性坐标系下的加速度和角加速度。将加速度和角加速度分别进行积分，则可以得出飞机在某个时间段内的速度变化量和角速度变化量，进一步积分便可得到位置变化量和角度的变化量，再通过积分过程中的坐标变换以及初始时刻的状态参数，便可获得任意时刻飞机的姿态、位置、速度等参数。</p><p>飞行员通过油门杆和操纵杆控制飞机的运动。油门杆决定飞机的推力，操纵杆则控制飞机的副翼、襟翼、尾翼，改变飞机所受合力矩，从而改变飞机姿态。飞行仿真采用同样原理，油门杆和操作杆的位移经过非线性函数变换改变飞机所受合力和合力矩，经飞机运动模型获得加速度和角加速度，再经积分获得任意时刻飞机的姿态、位置、速度等参数。</p><p>当使用键盘输入控制飞机时，应将键盘输入先虚拟成油门杆和操作杆。另外需要注意的是，油门杆不回中，操作杆则自动回中。</p><h1 id="导弹的建模仿真"><a href="#导弹的建模仿真" class="headerlink" title="导弹的建模仿真"></a>导弹的建模仿真</h1><p>根据导弹的工作原理，导弹的建模仿真应分成三个方面：</p><ul><li>探测模型</li><li>目标识别算法</li><li>运动控制模型</li></ul><h1 id="诱饵弹的建模仿真"><a href="#诱饵弹的建模仿真" class="headerlink" title="诱饵弹的建模仿真"></a>诱饵弹的建模仿真</h1><p>诱饵弹的运动模型比较简单，可运用牛顿第二运动定律分析得出。比较有难度的是诱饵弹的视觉特效建模。诱饵弹是一个变质量、不规则的发光体，如何3D建模有难度，不能像太阳一样直接用图片代替。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/23722074" target="_blank" rel="noopener">无人机飞控通俗演义之 纷繁复杂的飞行力学</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/25150076" target="_blank" rel="noopener">一起写飞行仿真之 六自由度动力学方程</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/34555581" target="_blank" rel="noopener">飞行仿真—1.三维建模篇</a>, by WFYX.</li><li><a href="https://zhuanlan.zhihu.com/p/23788458" target="_blank" rel="noopener">无人机飞控通俗演义之 无人机导航制导与控制</a>, by WFYX.</li><li><a href="http://home.flightgear.org/" target="_blank" rel="noopener">FLIGHTGEAR FLIGHT SIMULATOR</a>, by flightgear.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;空战类游戏仿真涉及飞机、导弹、诱饵弹三种关键元素。为了使游戏仿真接近真实，一方面要使飞机、导弹、诱饵弹的模型及其特效（如尾焰）尽量逼真，另一方面要使飞机、导弹、诱饵弹的运动控制模型尽量接近真实。飞机、导弹、诱饵弹的模型可以用3d建模软件构建，尾焰也可以用粒子系统进行模拟，但
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉研究范畴简介</title>
    <link href="https://huangwang.github.io/2018/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%A0%94%E7%A9%B6%E8%8C%83%E7%95%B4%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2018/12/07/计算机视觉研究范畴简介/</id>
    <published>2018-12-07T02:17:57.000Z</published>
    <updated>2018-12-07T14:58:16.416Z</updated>
    
    <content type="html"><![CDATA[<p>计算机视觉是一个跨领域的交叉学科，包括计算机科学（图形、算法、理论、系统、体系结构），数学（信息检索、机器学习），工程学（机器人、语音、自然语言处理、图像处理），物理学（光学 ），生物学（神经科学）和心理学（认知科学）等等。那么什么是计算机视觉呢？这里给出了几个比较严谨的定义：</p><ol><li>“对图像中的客观对象构建明确而有意义的描述”（Ballard＆Brown，1982）</li><li>“从一个或多个数字图像中计算三维世界的特性”（Trucco＆Verri，1998）</li><li>“基于感知图像做出对客观对象和场景有用的决策”（Sockman＆Shapiro，2001）</li></ol><h1 id="研究范畴"><a href="#研究范畴" class="headerlink" title="研究范畴"></a>研究范畴</h1><p>视觉识别是计算机视觉的关键组成部分，如图像分类、定位和检测。神经网络和深度学习的最新进展极大地推动了这些最先进的视觉识别系统的发展。下面介绍 5 种主要的计算机视觉技术：</p><ul><li>图像分类</li></ul><p>给定一组各自被标记为单一类别的图像，我们对一组新的测试图像的类别进行预测，并测量预测的准确性结果，这就是图像分类问题。图像分类问题需要面临以下几个挑战：</p><p>视点变化，尺度变化，类内变化，图像变形，图像遮挡，照明条件和背景杂斑</p><ul><li>对象检测</li></ul><p>识别图像中的对象这一任务，通常会涉及到为各个对象输出边界框和标签。这不同于分类/定位任务——对很多对象进行分类和定位，而不仅仅是对个主体对象进行分类和定位。在对象检测中，你只有 2 个对象分类类别，即对象边界框和非对象边界框。例如，在汽车检测中，你必须使用边界框检测所给定图像中的所有汽车。</p><ul><li>目标跟踪</li></ul><p>目标跟踪，是指在特定场景跟踪某一个或多个特定感兴趣对象的过程。传统的应用就是视频和真实世界的交互，在检测到初始对象之后进行观察。现在，目标跟踪在无人驾驶领域也很重要，例如 Uber 和特斯拉等公司的无人驾驶。</p><ul><li>语义分割</li></ul><p>计算机视觉的核心是分割，它将整个图像分成一个个像素组，然后对其进行标记和分类。特别地，语义分割试图在语义上理解图像中每个像素的角色（比如，识别它是汽车、摩托车还是其他的类别）。</p><ul><li>实例分割</li></ul><p>除了语义分割之外，实例分割将不同类型的实例进行分类，比如用 5 种不同颜色来标记 5 辆汽车。分类任务通常来说就是识别出包含单个对象的图像是什么，但在分割实例时，我们需要执行更复杂的任务。我们会看到多个重叠物体和不同背景的复杂景象，我们不仅需要将这些不同的对象进行分类，而且还要确定对象的边界、差异和彼此之间的关系！</p><h1 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h1><p>计算机视觉领域已经衍生出了一大批快速成长的、有实际作用的应用，例如：</p><ul><li>人脸识别： Snapchat 和 Facebook 使用人脸检测算法来识别人脸。</li><li>图像检索：Google Images 使用基于内容的查询来搜索相关图片，算法分析查询图像中的内容并根据最佳匹配内容返回结果。</li><li>游戏和控制：使用立体视觉较为成功的游戏应用产品是：微软 Kinect。</li><li>监测：用于监测可疑行为的监视摄像头遍布于各大公共场所中。</li><li>生物识别技术：指纹、虹膜和人脸匹配仍然是生物识别领域的一些常用方法。</li><li>智能汽车：计算机视觉仍然是检测交通标志、灯光和其他视觉特征的主要信息来源。</li></ul><h1 id="前沿研究"><a href="#前沿研究" class="headerlink" title="前沿研究"></a>前沿研究</h1><ul><li>超分辨率重建 (Image Super-Resolution)</li><li>图像着色 (Image Colorization)</li><li>“看图说话” (Image Caption)</li><li>人像复原 (Sketch Inversion)</li><li>图像自动生成</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/80016353" target="_blank" rel="noopener">详解计算机视觉五大技术：图像分类、对象检测、目标跟踪、语义分割和实例分割…</a>, by AI科技大本营</li><li><a href="https://zhuanlan.zhihu.com/p/21341440" target="_blank" rel="noopener">「无中生有」计算机视觉探奇</a>, by 魏秀参</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机视觉是一个跨领域的交叉学科，包括计算机科学（图形、算法、理论、系统、体系结构），数学（信息检索、机器学习），工程学（机器人、语音、自然语言处理、图像处理），物理学（光学 ），生物学（神经科学）和心理学（认知科学）等等。那么什么是计算机视觉呢？这里给出了几个比较严谨的定
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>三维建模方法简介</title>
    <link href="https://huangwang.github.io/2018/12/05/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2018/12/05/三维建模方法简介/</id>
    <published>2018-12-05T13:17:42.000Z</published>
    <updated>2018-12-05T13:39:26.700Z</updated>
    
    <content type="html"><![CDATA[<p>三维建模是一种常用技术，奈何心向往之，却没有时间去系统学习，也没有做出过一个作品。下面将我看到的一些好的有关三维建模的资料记录一下，以做备忘。</p><h1 id="三维建模方法"><a href="#三维建模方法" class="headerlink" title="三维建模方法"></a>三维建模方法</h1><h2 id="选择软件"><a href="#选择软件" class="headerlink" title="选择软件"></a>选择软件</h2><p>当前三维软件层出不穷，既有商业级的3ds MAX、MAYA、Creator，也有免费使用的Blender、MilkShape。</p><h2 id="下载蓝图"><a href="#下载蓝图" class="headerlink" title="下载蓝图"></a>下载蓝图</h2><p>飞行仿真的三维模型主要有飞行器、机场建筑等。和大多数虚拟现实中使用的模型一样，并不需要CAD级别的精度，一般是下载一些图片或飞机整体蓝图作为蓝本，采用多边形建模的方法分部建模。蓝图下载网址首推：</p><p><a href="http://www.the-blueprints.com/" target="_blank" rel="noopener">the‑blueprints.com</a></p><p>这里免费提供各种汽车、国内外飞机、船舶的三视图图纸下载。</p><h2 id="多边形建模"><a href="#多边形建模" class="headerlink" title="多边形建模"></a>多边形建模</h2><p>采用下载的蓝图，作为贴图放置在相应的投影平面上，然后采用多边形建模的方法画出各部分细节。多边形建模的思想就是采用一个诸如一个最接近的多边形，进行点线面的操作就可以绘制出复杂的飞机外形。</p><p>多边形建模从最基本的外形开始变形，可以从点线面及整体四个级别的操作，在越需要突出外形细节处用越多的点，通过建立网格模型，然后使用网格平滑功能生成平滑的曲面模型。</p><p>建模时不能有重复的点线面等几何体，否则即使表面上已经贴好了材质，但载入程序后，往往会因为Z向深度冲突的原因产生闪烁效果。其细节取决于您的需求，需要花费大量的时间。</p><h2 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h2><p>真实世界的模型带有各种彩色并具有光泽度。完成了几何体的建模对于一个模型来说只完成了一小半工作，还需要给模型添加材质。</p><p>与一般的模型不同，飞行器出于气动设计的考虑，其表面模型一般成流线型的曲面，且部件组成复杂，界线较难区分，即使是UVW贴图也难以胜任。因此，对飞行器的贴图主要采用3ds MAX的UVW展开贴图技术贴图。</p><p>一个模型最好只有一个贴图，因为贴图数目过多零散会影响计算机载入三维模型时间和效率。因此，一般将整个模型各个部件组合为一个多边形，各部件为元素，待完成UVW贴图后再分离成单独的部件。UVW展开贴图有多重形式，如长方体展开（即按六个视图投影）、平面展开等，按需选择。</p><p>在一张贴图上展开整个模型的UV坐标显然是有限的，需要根据现实精度调整各个部分的贴图大小。保存这些展开的贴图坐标并渲染输出UV模板图像文件。UV模板图像其实就是整个模型的贴图的界线图像，通过Photoshop等图像处理软件处理，采用尽可能真实的图像放置在对应的区域。最后将材质赋给对象即完成贴图渲染。</p><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><p>直接采用3ds MAX绘制的三维模型当然是<em>.max格式，它不能为外界程序读取。这时就需要根据自己的开发环境选择导出的数据格式，比如用开源的OSG做仿真开发，就需要OSGExp插件的支持，导成</em>.ive、<em>.osg、</em>.osgb等格式即可。但无论导出何种格式，<strong>切记保证模型质心与建模的原点不能相差不远，还要注意光照、贴图格式以及单位问题</strong>。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/34555581" target="_blank" rel="noopener">飞行仿真—1.三维建模篇</a>,by WFYX.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三维建模是一种常用技术，奈何心向往之，却没有时间去系统学习，也没有做出过一个作品。下面将我看到的一些好的有关三维建模的资料记录一下，以做备忘。&lt;/p&gt;
&lt;h1 id=&quot;三维建模方法&quot;&gt;&lt;a href=&quot;#三维建模方法&quot; class=&quot;headerlink&quot; title=&quot;三
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>深度强化学习研究笔记</title>
    <link href="https://huangwang.github.io/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/11/26/深度强化学习研究笔记/</id>
    <published>2018-11-26T02:07:07.000Z</published>
    <updated>2018-12-22T13:19:17.511Z</updated>
    
    <content type="html"><![CDATA[<p>深度强化学习Deep Reinforcement Learning是将深度学习与强化学习结合起来，从而实现从Perception感知到Action动作的端对端学习End-to-End Learning的一种全新的算法。深度强化学习具备使机器人实现真正完全自主地学习一种甚至多种技能的潜力。</p><h1 id="深度强化学习的起源"><a href="#深度强化学习的起源" class="headerlink" title="深度强化学习的起源"></a>深度强化学习的起源</h1><p>深度强化学习是深度学习与强化学习相结合的产物。</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>深度学习（deep learning）是机器学习的分支，是一种试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。</p><p>深度学习是机器学习中一种基于对数据进行表征学习的算法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的向量，或者更抽象地表示成一系列边、特定形状的区域等。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是用非监督式或半监督式的特征学习和分层特征提取高效算法来替代手工获取特征。</p><p>表征学习的目标是寻求更好的表示方法并创建更好的模型来从大规模未标记数据中学习这些表示方法。表示方法来自神经科学，并松散地创建在类似神经系统中的信息处理和对通信模式的理解上，如神经编码，试图定义拉动神经元的反应之间的关系以及大脑中的神经元的电活动之间的关系。</p><p>至今已有数种深度学习框架，如深度神经网络、卷积神经网络和深度置信网络和递归神经网络已被应用在计算机视觉、语音识别、自然语言处理、音频识别与生物信息学等领域并获取了极好的效果。</p><p>另外，“深度学习”已成为类似术语，或者说是神经网络的品牌重塑。</p><h3 id="深度神经网络"><a href="#深度神经网络" class="headerlink" title="深度神经网络"></a>深度神经网络</h3><p>深度神经网络是一种具备至少一个隐层的神经网络。与浅层神经网络类似，深度神经网络也能够为复杂非线性系统提供建模，但多出的层次为模型提供了更高的抽象层次，因而提高了模型的能力。</p><p>深度神经网络（Deep Neural Networks, DNN）是一种判别模型，可以使用反向传播算法进行训练。权重更新可以使用下式进行随机梯度下降法求解：</p><script type="math/tex; mode=display">\Delta w_{ij}(t+1)=\Delta w_{ij}(t) +  \eta\frac{\partial C}{\partial w_{ij}}</script><p>其中，$\eta$为学习率，$C$为代价函数。这一函数的选择与学习的类型（例如监督学习、无监督学习、增强学习）以及激活函数相关。例如，为了在一个多分类问题上进行监督学习，通常的选择是使用ReLU作为激活函数，而使用交叉熵作为代价函数。Softmax函数定义为${\displaystyle p<em>{j}={\frac {\exp(x</em>{j})}{\sum <em>{k}\exp(x</em>{k})}}}$，其中 ${\displaystyle p<em>{j}}$代表类别 ${\displaystyle j}$的概率，而 ${\displaystyle x</em>{j}}$和 ${\displaystyle x<em>{k}}$分别代表对单元 ${\displaystyle j}$ 和 ${\displaystyle k}$的输入。交叉熵定义为 $C = -\sum_j d_j \log(p_j)$ ，其中 ${\displaystyle d</em>{j}}$代表输出单元${\displaystyle j}$的目标概率， ${\displaystyle p_{j}}$代表应用了激活函数后对单元 ${\displaystyle j}$的概率输出。</p><h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>在人工智能领域，一般用智能体Agent表示一个具备行为能力的物体，比如机器人，无人车等等。而强化学习则研究智能体Agent和环境Environment之间交互过程如何取得任务的成功。</p><p>强化学习与环境的交互过程如图1所示。在某个时间点，智能体Agent会获得观察值(Observation)和反馈值(Reward)，然后根据这些选择下一步的动作(Action)。</p><p></p><p align="center">    <img src="images/reinforce_learning.png" width="90%" alt="强化学习示意图"></p><p></p><center>图1 强化学习示意图</center><p>在整个过程中，任务的目标是获取尽可能多的Reward，这是任务的目标。而在每个时间片，Agent都是根据当前的观察来确定下一步的动作。观察Observation的集合就作为Agent的所处的状态State，因此，状态State和动作Action存在映射关系，也就是一个state可以对应一个action，或者对应不同动作的概率（常常用概率来表示，概率最高的就是最值得执行的动作）。状态与动作的关系其实就是输入与输出的关系，而状态State到动作Action的过程就称之为一个策略Policy，一般用 $\pi$  表示，也就是需要找到以下关系：</p><script type="math/tex; mode=display">a=\pi(s)</script><p>或者</p><script type="math/tex; mode=display">\pi(a|s)</script><p>其中a是action，s是state。第一种是一一对应的表示，第二种是概率的表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">强化学习的任务就是找到一个最优的策略Policy从而使Reward最多。</span><br></pre></td></tr></table></figure></p><p>强化学习的训练一开始从采用随机策略进行试验开始，可获得一系列的状态,动作和反馈：</p><script type="math/tex; mode=display">\{s_1,a_1,r_1,s_2,a_2,r_2,...,s_t,a_t,r_t\}</script><p>根据这一系列样本，强化学习从中改进策略，使得任务反馈Reward越来越多。</p><h3 id="强化学习模型假设"><a href="#强化学习模型假设" class="headerlink" title="强化学习模型假设"></a>强化学习模型假设</h3><p>强化学习的研究建立在经典物理学基础上，基于以下两种假设：</p><ol><li>时间是可以分割成一个一个时间片的，并且有完全的先后顺序。</li><li>上帝不掷筛子！如果输入是确定的，那么输出也一定是确定的。</li></ol><h3 id="强化学习与马尔科夫决策过程"><a href="#强化学习与马尔科夫决策过程" class="headerlink" title="强化学习与马尔科夫决策过程"></a>强化学习与马尔科夫决策过程</h3><p>MDP基于这样一种假设：未来只取决于当前。</p><p>一个状态$S_t$是Markov当且仅当</p><script type="math/tex; mode=display">P(s_{t+1}|s_t)=P(s_{t+1}|s_t,s_{t-1},...s_1,s_0)</script><p>P为概率。简单的说就是下一个状态仅取决于当前的状态和当前的动作。注意这里的状态是完全可观察的全部的环境状态（也就是上帝视角）。</p><p>增强学习的问题都可以模型化为MDP的问题。</p><p>一个基本的MDP可以用（S,A,P）来表示，S表示状态，A表示动作，P表示状态转移概率，也就是根据当前的状态$s<em>t$和$a_t$转移到$s</em>{t+1}$的概率。如果我们知道了转移概率P，也就是称为我们获得了模型Model，有了模型，未来就可以求解，那么获取最优的动作也就有可能，这种通过模型来获取最优动作的方法也就称为Model-based的方法。但是现实情况下，很多问题是很难得到准确的模型的，因此就有Model-free的方法来寻找最优的动作。</p><h3 id="强化学习的回报Result"><a href="#强化学习的回报Result" class="headerlink" title="强化学习的回报Result"></a>强化学习的回报Result</h3><p>既然一个状态对应一个动作，或者动作的概率，而有了动作，下一个状态也就确定了。这就意味着每个状态可以用一个确定的值来进行描述。可以由此判断一个状态是好的状态还是不好的状态。</p><p>状态的好坏其实等价于对未来回报的期望。因此，引入回报Return来表示某个时刻t的状态将具备的回报：</p><script type="math/tex; mode=display">G_t = R_{t+1} + \lambda R_{t+2} + ... = \sum_{k=0}^\infty\lambda^kR_{t+k+1}</script><p>上面R是Reward反馈，λ是discount factor折扣因子，一般小于1，就是说一般当下的反馈是比较重要的，时间越久，影响越小。</p><p>那么实际上除非整个过程结束，否则显然我们无法获取所有的reward来计算出每个状态的Return，因此，再引入一个概念价值函数Value Function,用value function $v(s)$来表示一个状态未来的潜在价值。</p><p>从定义上看，value function就是回报的期望：</p><script type="math/tex; mode=display">v(s) = \mathbb E[G_t|S_t = s]</script><p>引出价值函数，对于获取最优的策略Policy这个目标，我们就会有两种方法：</p><ul><li>直接优化策略$\pi(a|s)$或者$a = \pi(s)$使得回报更高</li><li>通过估计value function来间接获得优化的策略。道理很简单，既然我知道每一种状态的优劣，那么我就知道我应该怎么选择了，而这种选择就是我们想要的策略。</li></ul><p>把值函数展开：</p><script type="math/tex; mode=display">\begin{aligned}    v(s) & = \mathbb E[G_t|S_t = s] \\\\      & = \mathbb E[R_{t+1}+\lambda R_{t+2} + \lambda ^2R_{t+3} + ...|S_t = s] \\\\       & = \mathbb E[R_{t+1}+\lambda (R_{t+2} + \lambda R_{t+3} + ...)|S_t = s] \\\\      & = \mathbb E[R_{t+1} + \lambda G_{t+1}|S_t = s] \\\\       & = \mathbb E[R_{t+1} + \lambda v(S_{t+1})|S_t = s]\end{aligned}</script><p>因此：</p><script type="math/tex; mode=display">v(s) = \mathbb E[R_{t+1} + \lambda v(S_{t+1})|S_t = s]</script><p>上面这个公式就是Bellman方程的基本形态。从公式上看，当前状态的价值和下一步的价值以及当前的反馈Reward有关。它表明Value Function是可以通过迭代来进行计算的!!!</p><h3 id="Action-Value-function-动作价值函数"><a href="#Action-Value-function-动作价值函数" class="headerlink" title="Action-Value function 动作价值函数"></a>Action-Value function 动作价值函数</h3><p>前面我们引出了价值函数，考虑到每个状态之后都有多种动作可以选择，每个动作之下的状态又多不一样，我们更关心在某个状态下的不同动作的价值。显然。如果知道了每个动作的价值，那么就可以选择价值最大的一个动作去执行了。这就是Action-Value function  $Q^\pi(s,a)$。那么同样的道理，也是使用reward来表示，只是这里的reward和之前的reward不一样，这里是执行完动作action之后得到的reward，之前state对应的reward则是多种动作对应的reward的期望值。显然，动作之后的reward更容易理解。</p><p>动作价值函数就为如下表示：</p><script type="math/tex; mode=display">\begin{aligned}Q^\pi(s,a) & =  \mathbb E[r_{t+1} + \lambda r_{t+2} + \lambda^2r_{t+3} + ... |s,a] \\\\& = \mathbb E_{s^\prime}[r+\lambda Q^\pi(s^\prime,a^\prime)|s,a]\end{aligned}</script><p>这里要说明的是动作价值函数的定义，加了$\pi$,也就是说是在策略下的动作价值。因为对于每一个动作而已，都需要由策略根据当前的状态生成，因此必须有策略的支撑。而前面的价值函数则不一定依赖于策略。当然，如果定义$v^\pi(s)$则表示在策略$\pi$下的价值。</p><h3 id="Optimal-value-function-最优价值函数"><a href="#Optimal-value-function-最优价值函数" class="headerlink" title="Optimal value function 最优价值函数"></a>Optimal value function 最优价值函数</h3><p>能计算动作价值函数是不够的，因为我们需要的是最优策略，现在求解最优策略等价于求解最优的value function，找到了最优的value function，自然而然策略也就是找到。（当然，这只是求解最优策略的一种方法，也就是value-based approach，由于DQN就是value-based，因此这里只讲这部分，以后我们会看到还有policy-based和model-based方法。一个就是直接计算策略函数，一个是估计模型，也就是计算出状态转移函数，从而整个MDP过程得解）</p><p>这里以动作价值函数来分析。</p><p>首先是最优动作价值函数和一般的动作价值函数的关系：</p><script type="math/tex; mode=display">\begin{aligned}Q^*(s,a) &= \max_\pi Q^\pi(s,a)\\\\ & = \mathbb E_{s^\prime}[r+\lambda \max _{a^\prime}Q^*(s^\prime,a^\prime)|s,a]\end{aligned}</script><p>也就是最优的动作价值函数就是所有策略下的动作价值函数的最大值。通过这样的定义就可以使最优的动作价值的唯一性，从而可以求解整个MDP。</p><p>下面介绍基于Bellman方程的两个最基本的算法，策略迭代和值迭代。</p><h3 id="策略迭代Policy-Iteration"><a href="#策略迭代Policy-Iteration" class="headerlink" title="策略迭代Policy Iteration"></a>策略迭代Policy Iteration</h3><p>Policy Iteration的目的是通过迭代计算value function 价值函数的方式来使policy收敛到最优。</p><p>Policy Iteration本质上就是直接使用Bellman方程而得到的：</p><script type="math/tex; mode=display">\begin{aligned}v_{k+1}(s) &\overset{.}{=} \mathbb E_{\pi}[R_{t+1}+\gamma v _{k}(S_{t+1})|S_t=s]\\\\&=\sum_{a}{\pi(a|s)}\sum_{s^\prime,r}{p(s^\prime,r|s,a)[r+\gamma v_k(s^\prime)]}\end{aligned}</script><p>那么Policy Iteration一般分成两步：</p><ol><li>Policy Evaluation 策略评估。目的是更新Value Function，或者说更好的估计基于当前策略的价值</li><li>Policy Improvement 策略改进。 使用 greedy policy 产生新的样本用于第一步的策略评估。</li></ol><p></p><p align="center">    <img src="images/policy_iteration.png" width="90%" alt="策略迭代算法示意图"></p><p></p><center>图2 策略迭代算法示意图</center><p>本质上就是使用当前策略产生新的样本，然后使用新的样本更好的估计策略的价值，然后利用策略的价值更新策略，然后不断反复。理论可以证明最终策略将收敛到最优。</p><p>具体算法：</p><p></p><p align="center">    <img src="images/policy_iteration_method.png" width="90%" alt="策略迭代算法"></p><p></p><center>图3 策略迭代算法</center><p>那么这里要注意的是policy evaluation部分。这里的迭代很重要的一点是需要知道state状态转移概率p。也就是说依赖于model模型。而且按照算法要反复迭代直到收敛为止。所以一般需要做限制。比如到某一个比率或者次数就停止迭代。那么需要特别说明的是不管是策略迭代还是值迭代都是在理想化的情况下（上帝视角）推导出来的算法，本质上并不能直接应用，因为依赖Model。</p><h3 id="Value-Iteration-价值迭代"><a href="#Value-Iteration-价值迭代" class="headerlink" title="Value Iteration 价值迭代"></a>Value Iteration 价值迭代</h3><p>Value Iteration则是使用Bellman 最优方程得到:</p><script type="math/tex; mode=display">\begin{aligned}v_{*}(s) & = \max_{a} \mathbb E_{\pi}[R_{t+1}+\gamma v _{*}(S_{t+1})|S_t=s,A_t=a]\\\\& = \max_{a} \sum_{s^\prime,r}p(s^\prime,r|s,a)[r+\gamma v_*(s^\prime)]\end{aligned}</script><p>然后改变成迭代形式:</p><script type="math/tex; mode=display">\begin{aligned}v_{k+1}(s) &\overset{.}{=} \max_{a} \mathbb E_{\pi}[R_{t+1}+\gamma v _{k}(S_{t+1})|S_t=s,A_t=a]\\\\& = \max_{a} \sum_{s^\prime,r}p(s^\prime,r|s,a)[r+\gamma v_k(s^\prime)]\end{aligned}</script><p>value iteration的算法如下：</p><p></p><p align="center">    <img src="images/policy_iteration_method.png" width="90%" alt="值迭代算法"></p><p></p><center>图4 值迭代算法</center><p>Policy Iteration和Value Iteration有什么本质区别？</p><p>policy iteration使用bellman方程来更新value，最后收敛的value 即$v_\pi$是当前policy下的value值（所以叫做对policy进行评估），目的是为了后面的policy improvement得到新的policy。</p><p>而value iteration是使用bellman 最优方程来更新value，最后收敛得到的value即$v_*$就是当前state状态下的最优的value值。因此，只要最后收敛，那么最优的policy也就得到的。因此这个方法是基于更新value的，所以叫value iteration。</p><p>从上面的分析看，value iteration较之policy iteration更直接。不过问题也都是一样，需要知道状态转移函数p才能计算。本质上依赖于模型，而且理想条件下需要遍历所有的状态，这在稍微复杂一点的问题上就基本不可能了。</p><h3 id="Q-Learning"><a href="#Q-Learning" class="headerlink" title="Q-Learning"></a>Q-Learning</h3><p>Q Learning的思想完全根据value iteration得到。但要明确一点是value iteration每次都对所有的Q值更新一遍，也就是所有的状态和动作。但事实上在实际情况下我们没办法遍历所有的状态，还有所有的动作，我们只能得到有限的系列样本。因此，只能使用有限的样本进行操作。那么，怎么处理？Q Learning提出了一种更新Q值的办法：</p><script type="math/tex; mode=display">Q(S_{t},A_{t}) \leftarrow Q(S_{t},A_{t})+\alpha({R_{t+1}+\lambda \max _aQ(S_{t+1},a)} - Q(S_t,A_t))</script><p>虽然根据value iteration计算出target Q值，但是这里并没有直接将这个Q值（是估计值）直接赋予新的Q，而是采用渐进的方式类似梯度下降，朝target迈近一小步，取决于α,这就能够减少估计误差造成的影响。类似随机梯度下降，最后可以收敛到最优的Q值。</p><p>具体的算法如下：</p><p></p><p align="center">    <img src="images/policy_iteration_method.png" width="90%" alt="Q学习算法"></p><p></p><center>图5 Q学习算法</center><h3 id="Exploration-and-Exploitation-探索与利用"><a href="#Exploration-and-Exploitation-探索与利用" class="headerlink" title="Exploration and Exploitation 探索与利用"></a>Exploration and Exploitation 探索与利用</h3><p>回到policy的问题，那么要选择怎样的policy来生成action呢？有两种做法：</p><ul><li><p>随机的生成一个动作</p></li><li><p>根据当前的Q值计算出一个最优的动作，这个policy\pi称之为greedy policy贪婪策略。也就是</p></li></ul><script type="math/tex; mode=display">\pi(S_{t+1}) = arg\max _aQ(S_{t+1},a)</script><p>使用随机的动作就是exploration，也就是探索未知的动作会产生的效果，有利于更新Q值，获得更好的policy。而使用greedy policy也就是target policy则是exploitation，利用policy，这个相对来说就不好更新出更好的Q值，但可以得到更好的测试效果用于判断算法是否有效。</p><p>将两者结合起来就是所谓的$\epsilon-greedy$策略，$\epsilon$一般是一个很小的值，作为选取随机动作的概率值。可以更改$\epsilon$的值从而得到不同的exploration和exploitation的比例。</p><p>这里需要说明的一点是使用$\epsilon-greedy$策略是一种极其简单粗暴的方法，对于一些复杂的任务采用这种方法来探索未知空间是不可取的。因此，最近有越来越多的方法来改进这种探索机制。</p><h2 id="深度强化学习"><a href="#深度强化学习" class="headerlink" title="深度强化学习"></a>深度强化学习</h2><p>深度强化学习始于DeepMind在NIPS 2013上发表的Playing Atari with Deep Reinforcement Learning一文，在该文中第一次提出Deep Reinforcement Learning 这个名称，并且提出DQN（Deep Q-Network）算法，实现从纯图像输入完全通过学习来玩Atari游戏的成果。</p><p>之后DeepMind在Nature上发表了改进版的DQN文章Human-level Control through Deep Reinforcement Learning，引起了广泛的关注，Deep Reinfocement Learning 从此成为深度学习领域的前沿研究方向。</p><h3 id="维度灾难"><a href="#维度灾难" class="headerlink" title="维度灾难"></a>维度灾难</h3><p>对简单问题可使用表格来表示Q(s,a)，但是这个在现实的很多问题上是几乎不可行的，因为状态实在是太多。使用表格的方式根本存不下。</p><p>以计算机玩Atari游戏为例，计算机玩Atari游戏的要求是输入原始图像数据，也就是210x160像素的图片，然后输出几个按键动作。总之就是和人类的要求一样，纯视觉输入，然后让计算机自己玩游戏。那么这种情况下，到底有多少种状态呢？有可能每一秒钟的状态都不一样。因为，从理论上看，如果每一个像素都有256种选择，那么就有：</p><script type="math/tex; mode=display">256^{210\times 160}</script><p>这简直是天文数字。所以，我们是不可能通过表格来存储状态的。我们有必要对状态的维度进行压缩，解决办法就是 价值函数近似Value Function Approximation</p><h3 id="价值函数近似Value-Function-Approximation"><a href="#价值函数近似Value-Function-Approximation" class="headerlink" title="价值函数近似Value Function Approximation"></a>价值函数近似Value Function Approximation</h3><p>什么是价值函数近似呢？说起来很简单，就是用一个函数来表示Q(s,a)。即</p><script type="math/tex; mode=display">Q(s,a) = f(s,a)</script><p>$f$可以是任意类型的函数，比如线性函数：</p><script type="math/tex; mode=display">Q(s,a) = w_1s + w_2a + b</script><p>其中$w_1$,$w_2$,$b$是函数$f$的参数。</p><p>通过函数表示，我们就可以无所谓s到底是多大的维度，反正最后都通过矩阵运算降维输出为单值的Q。</p><p>这就是价值函数近似的基本思路。</p><p>如果我们就用$w$来统一表示函数$f$的参数，那么就有</p><script type="math/tex; mode=display">Q(s,a) = f(s,a,w)</script><p>为什么叫近似，因为我们并不知道Q值的实际分布情况，本质上就是用一个函数来近似Q值的分布，所以，也可以说是</p><script type="math/tex; mode=display">Q(s,a)\approx f(s,a,w)</script><h3 id="Q值神经网络化——DQN算法"><a href="#Q值神经网络化——DQN算法" class="headerlink" title="Q值神经网络化——DQN算法"></a>Q值神经网络化——DQN算法</h3><p>意思很清楚，就是我们用一个深度神经网络来表示这个函数$f$。</p><p>以DQN为例，输入是经过处理的4个连续的84x84图像，然后经过两个卷积层，两个全连接层，最后输出包含每一个动作Q值的向量。</p><p>神经网络的训练是一个最优化问题，最优化一个损失函数loss function，也就是标签和网络输出的偏差，目标是让损失函数最小化。为此，我们需要有样本，巨量的有标签数据，然后通过反向传播使用梯度下降的方法来更新神经网络的参数。</p><p>如何为Q网络提供有标签的样本？答案就是利用Q-Learning算法。目标Q值作为标签，使Q值趋近于目标Q值。于是Q网络训练的损失函数就是：</p><p></p><p align="center">    <img src="images/loss_function.png" width="80%" alt="DQN损失函数"></p><p></p><center>图6 DQN损失函数</center><p>上面公式是$s^\prime$, $a^\prime$即下一个状态和动作。这里用了David Silver的表示方式，看起来比较清晰。<br>既然确定了损失函数，也就是cost，确定了获取样本的方式。那么DQN的整个算法也就成型了！</p><p>这里分析第一个版本的DQN，也就是NIPS 2013提出的DQN。</p><p></p><p align="center">    <img src="images/dqn_method.png" width="90%" alt="DQN算法"></p><p></p><center>图7 DQN算法</center><p>具体的算法主要涉及到Experience Replay，也就是经验池的技巧，就是如何存储样本及采样问题。</p><p>由于玩Atari采集的样本是一个时间序列，样本之间具有连续性，如果每次得到样本就更新Q值，受样本分布影响，效果会不好。因此，一个很直接的想法就是把样本先存起来，然后随机采样如何？这就是Experience Replay的意思。按照脑科学的观点，人的大脑也具有这样的机制，就是在回忆中学习。</p><p>那么上面的算法看起来那么长，其实就是反复试验，然后存储数据。接下来数据存到一定程度，就每次随机采用数据，进行梯度下降！</p><h3 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h3><p>Policy Gradient的方法的基本思想是通过评价动作action的好坏，来调整该action的出现概率。最基本的Policy Gradient的损失函数Loss就是：</p><script type="math/tex; mode=display">loss = -log(\pi)*Q</script><p>这里先以Q值来指代对动作的评价。</p><h1 id="Robot-Learning的发展路径"><a href="#Robot-Learning的发展路径" class="headerlink" title="Robot Learning的发展路径"></a>Robot Learning的发展路径</h1><p>Robot Learning从目前来看，经过了以下研究思路的发展：</p><p>（1）利用传统的控制算法结合深度学习来实现机器人端到端的控制。这个方法主要是以Guided Policy Search（GPS）为首。这个方法是Sergey Levine提出的，通过与传统方法结合，确实可以让机器人学习出一些有意思的技能，但是有个根本问题摆在面前，就是传统方法通常需要知道整个系统的模型，而这在实际的机器人中非常难以适用。就比如四轴飞行器的控制，我们可以通过外部的Vicon设备来精确的定位四轴飞行器的位置，从而实现对其精确控制，但是在户外，我们根本就做不到这点，也就无法精确建模。因此，还依赖传统方法是没有出路的，我们使用深度学习就是要抛弃传统方法的弊端。</p><p>（2）深度增强学习DRL。由于DeepMind在DRL取得了巨大成功，而DRL就是面向决策与控制问题，特别适用于机器人，因此想在机器人上使用DRL是一种必然的想法。Google Brain团队（依然以Sergey Levine为首）做出了一些进展，在我们之前的专栏文章中也有分析最前沿 之 谷歌的协作机械臂 - 知乎专栏 。但是在使用DRL之后，DRL的弊端也就显现出来了，那就是需要大量的尝试来获取数据。对于这个问题，在机器人仿真环境还好，但是在真实的机器人上就根本没办法这么做了。为了解决这个问题，也就引出来下面两个研究思路。</p><p>（3）迁移学习Transfer Learning。既然在真实环境不行，而仿真环境可以，那么是不是可以先在仿真环境中训练好，再把知识迁移到真实机器人上。Google Deepmind在这一块做了一些不错的工作，提出了Progressive Neural Net和PathNet，验证了迁移的可能性。而且很显然的，仿真环境越真实，迁移效果会越好。那么，搞一个非常仿真的环境就非常有意义了。这不，Nvidia 刚刚推出Isaac机器人模拟系统，确实是对Robot Learning的研究注入了一剂强心剂。</p><p>（4）Imitation Learning 模仿学习/Few Shot Learning 少样本学习/ Meta Learning 学会学习。这是另一条思路，那就是尽量减少数据的使用量。我们如果能够教机器人几次机器人就能学会技能那么问题也能解决。而这一块也就是OpenAI (依然是Sergey Levine）那帮人在如火如荼的研究的方向。而且特别是Meta Learning，直指通用人工智能的核心。如果能够在Meta Learning上取得突破，那么本身会是革命性的。</p><p>因此，Robot Learning发展到这里，把研究的方向就聚焦到第三和第四点上了，并且也取得了一定的成果，但是显然还有非常多的工作可以去做。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/深度学习" target="_blank" rel="noopener">深度学习</a>, by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/21262246?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃1 DQN与增强学习</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21292697?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃2 增强学习与MDP</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21340755?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃3 价值函数与Bellman方程</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21378532" target="_blank" rel="noopener">DQN 从入门到放弃4 动态规划与Q-Learning</a>,by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21421729" target="_blank" rel="noopener">DQN从入门到放弃5 深度解读DQN算法</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21547911" target="_blank" rel="noopener">DQN从入门到放弃6 DQN的各种改进</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21609472" target="_blank" rel="noopener">DQN从入门到放弃7 连续控制DQN算法-NAF</a>,by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/26988866" target="_blank" rel="noopener">最前沿：机器人学习Robot Learning的发展</a>,by Flood Sung.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深度强化学习Deep Reinforcement Learning是将深度学习与强化学习结合起来，从而实现从Perception感知到Action动作的端对端学习End-to-End Learning的一种全新的算法。深度强化学习具备使机器人实现真正完全自主地学习一种甚至多
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>wiringPi学习笔记</title>
    <link href="https://huangwang.github.io/2018/11/24/wiringPi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/11/24/wiringPi学习笔记/</id>
    <published>2018-11-24T12:26:31.000Z</published>
    <updated>2018-12-21T13:23:41.719Z</updated>
    
    <content type="html"><![CDATA[<p>wiringPi 库是由 Gordon Henderson 所编写并维护的一个用 C 语言写成的类库。起初,主要是作为 BCM2835 芯片的 GPIO 库。而现在,已经非常丰富,除了 GPIO 库,还包括了I2C 库、SPI 库、UART 库和软件 PWM 库等。</p><p>由于其与 Arduino 的“wiring”系统较为类似,故以此命名。它是采用 GNU LGPLv3许可证的,可以在 C 或 C++上使用,而且在其他编程语言上也有对应的扩展。</p><p>wiringPi 库包含了一个命令行工具 gpio,它可以用来设置 GPIO 管脚,可以用来读写GPIO 管脚,甚至可以在 Shell 脚本中使用来达到控制 GPIO 管脚的目的。</p><h1 id="下载、编译和测试wiringPi"><a href="#下载、编译和测试wiringPi" class="headerlink" title="下载、编译和测试wiringPi"></a>下载、编译和测试wiringPi</h1><ol><li><p>下载并编译wiringPi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.drogon.net/wiringPi</span><br><span class="line">cd wiringPi</span><br><span class="line">./build</span><br></pre></td></tr></table></figure></li><li><p>测试wiringPi是否安装成功<br>打开命令终端，可以通过 gpio 命令来检查 wiringPi 是否安装成功，运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpio –v</span><br><span class="line">gpio readall</span><br></pre></td></tr></table></figure></li></ol><p>运行上述第二条命令将得到树莓派的 GPIO 接口之间的对应关系。</p><p align="center">    <img src="images/gpio_map.png" width="100%" alt="gpio管脚定义"></p><h1 id="使用wiringPi"><a href="#使用wiringPi" class="headerlink" title="使用wiringPi"></a>使用wiringPi</h1><p>在使用wiringPi之前，应首先对wiringPi进行设置。</p><h2 id="wiringPi设置函数"><a href="#wiringPi设置函数" class="headerlink" title="wiringPi设置函数"></a>wiringPi设置函数</h2><p>wiringPi设置函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int wiringPiSetup (void) ;</span><br><span class="line">int wiringPiSetupGpio (void) ;</span><br><span class="line">int wiringPiSetupPhys (void) ;</span><br><span class="line">int wiringPiSetupSys (void) ;</span><br></pre></td></tr></table></figure></p><h3 id="wiringPiSetup-void-函数"><a href="#wiringPiSetup-void-函数" class="headerlink" title="wiringPiSetup (void) 函数"></a>wiringPiSetup (void) 函数</h3><p>该函数初始化wiringPi，假定程序将使用wiringPi的管脚定义图。具体管脚映射，可以通过gpio readall命令来查看。该函数需要root权限。</p><h3 id="wiringPiSetupGpio-void-函数"><a href="#wiringPiSetupGpio-void-函数" class="headerlink" title="wiringPiSetupGpio (void) 函数"></a>wiringPiSetupGpio (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于假定程序使用的是Broadcom的GPIO管脚定义，而没有重新映射。该函数需要root权限，需要注意v1和v2版本的树莓派是不同的。</p><h3 id="wiringPiSetupPhys-void-函数"><a href="#wiringPiSetupPhys-void-函数" class="headerlink" title="wiringPiSetupPhys (void) 函数"></a>wiringPiSetupPhys (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于允许程序使用物理管脚定义，但仅支持P1接口。该函数需要root权限。</p><h3 id="wiringPiSetupSys-void-函数"><a href="#wiringPiSetupSys-void-函数" class="headerlink" title="wiringPiSetupSys (void) 函数"></a>wiringPiSetupSys (void) 函数</h3><p>该函数初始化wiringPi，使用/sys/class/gpio接口，而不是直接通过操作硬件来实现。该函数可以使用非root权限用户，在此种模式下的管脚号是Broadcom的GPIO管脚号，不wiringPiSetupGpio函数类似，需要注意v1和v2板子的不同。</p><p>在此种模式下，在运行程序前，您需要通过/sys/class/gpio接口导出要使用的管脚。你可以在一个独立的shell脚本中来导出将要使用的管脚，或者使用系统的system()函数来调用GPIO命令。</p><h2 id="软件-PWM-库"><a href="#软件-PWM-库" class="headerlink" title="软件 PWM 库"></a>软件 PWM 库</h2><p>wiringPi 中包含了一个软件驱动的 PWM (Pulse Width Modulation, 脉冲宽度调节)处理库，可以在任意的树莓派 GPIO 上输出 PWM 信号。</p><p>但是也有一些限制。为了维护较低的 CPU 使用率，最小的脉冲宽度是 100 微秒，结合默认的建议值为 100，那么最小的 PWM 频率是 100Hz。如果需要更高的频率，可以使用更低的数值。如果看脉冲宽度的驱动代码，你会发现低于 100 微秒，wiringPi 是在软件循环中实现的，这就意味着 CPU 使用率将会动态增加，从而使得控制其他管脚成为不可能。</p><p>需要注意的是，当其他程序运行在更高的实时的优先级，Linux 可能会影响产生信号的精度。尽管有这些限制，控制 LED 或电机还是可以的。</p><p>使用前,需要包含相应的文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;wiringPi.h&gt;</span><br><span class="line">#include &lt;softPwm.h&gt;</span><br></pre></td></tr></table></figure></p><p>当编译程序时,必须加上 pthread 库,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc –o myprog myprog.c –lwiringPi –lpthread</span><br></pre></td></tr></table></figure></p><p>必须使用 wiringPiSetup()、 wiringPiSetupGpio()或者 wiringPiSetupPhys()函数来初始化 wiringPi。</p><p>wiringPiSetupSys()是不够快的，因此，必须使用 sudo 命令来运行程序。</p><h3 id="softPwmCreate-函数"><a href="#softPwmCreate-函数" class="headerlink" title="softPwmCreate 函数"></a>softPwmCreate 函数</h3><p>该函数的原型为：int softPwmCreate(int pin, int initialValue, int pwmRange);</p><p>该函数将会创建一个软件控制的 PWM 管脚。可以使用任何一个 GPIO 管脚 , pwmRange 参数可以为 0(关)~100(全开)。</p><p>返回值为 0，代表成功，其他值，代表失败。</p><h3 id="softPwmWrite-函数"><a href="#softPwmWrite-函数" class="headerlink" title="softPwmWrite 函数"></a>softPwmWrite 函数</h3><p>该函数的原型为: void softPwmWrite(int pin, int value);</p><p>该函数将会更新指定管脚的 PWM 值。value 参数的范围将会被检查,如果指定的管脚之前没有通过 softPwmCreate 初始化,将会被忽略。</p><h2 id="wiringPi核心函数"><a href="#wiringPi核心函数" class="headerlink" title="wiringPi核心函数"></a>wiringPi核心函数</h2><h3 id="pinMode函数"><a href="#pinMode函数" class="headerlink" title="pinMode函数"></a>pinMode函数</h3><p>该函数的原型为: void pinMode(int pin, int mode);</p><p>使用该函数可以将某个管脚讴置为 INPUT(输入)、 OUTPUT(输出)、 PWM_OUTPUT(脉冲输出)或者 GPIO_CLOCK(GPIO 时钟)。</p><p>需要注意的是仅有管脚 1(BCM_GPIO 18)支持 PWM_OUTPUT 模式,仅有管脚 7(BCM_GPIO 4)支持 CLOCK 输出模式。</p><p>在 Sys 模式下,返个函数没有影响。你可以通过调用 gpio 命令在 shell 脚本中来设置管脚的模式。</p><h3 id="digitalWrite-函数"><a href="#digitalWrite-函数" class="headerlink" title="digitalWrite 函数"></a>digitalWrite 函数</h3><p>该函数的原型为: void digitalWrite(int pin, int value);</p><p>使用该函数可以向指定的管脚写入 HIGH(高)或者 LOW(低),写入前,需要将管脚设置为输出模式。</p><p>wiringPi 将任何的非 0 值作为 HIGH (高)来对待,因此, 0 是唯一能够代表 LOW (低)的数值。</p><h3 id="digitalRead-函数"><a href="#digitalRead-函数" class="headerlink" title="digitalRead 函数"></a>digitalRead 函数</h3><p>该函数原型： digitalRead(int pin);</p><p>使用该函数可以读取指定管脚的值，读取到的值为HIGH（1）或者LOW（0），该值取决于该管脚的逻辑电平的高低。</p><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><h3 id="delay-函数"><a href="#delay-函数" class="headerlink" title="delay 函数"></a>delay 函数</h3><p>该函数的原型为：void delay(unsigned int howLong);</p><p>该函数将会中断程序执行至少 howLong 毫秒。因为 Linux 是多任务的原因，中断时间可能会更长。需要注意的是，最长的延迟值是一个无符号 32 位整数，其大约为 49 天。</p><h3 id="delayMicroseconds-函数"><a href="#delayMicroseconds-函数" class="headerlink" title="delayMicroseconds 函数"></a>delayMicroseconds 函数</h3><p>该函数的原型为：void delayMicroseconds(unsigned int howLong);</p><p>该函数将会中断程序执行至少 howLong 微秒。因为 Linux 是一个多任务的系统，因此中断时间可能会更长。需要注意的是，最长的延迟值是一个无符号 32 位整数，其大约为 71分钟。</p><p>延迟低于100 微秒，将会使用硬件循环来实现；超过 100 微秒，将会使用系统的nanosleep()函数来实现。</p><h2 id="优先级-时间-线程"><a href="#优先级-时间-线程" class="headerlink" title="优先级/时间/线程"></a>优先级/时间/线程</h2><h3 id="wiringPiISR-函数"><a href="#wiringPiISR-函数" class="headerlink" title="wiringPiISR 函数"></a>wiringPiISR 函数</h3><p>该函数的原型为：int wiringPiISR(int pin, int edgeType, void (*function)(void));</p><p>该函数会在指定管脚注册一个中断事件的函数，当指定管脚发生中断事件时，会自动调用该函数。</p><p>edgeType 参数可以为 INT_EDGE_FALLING（下降沿）、INT_EDGE_RISING（上升沿）、INT_EDGE_BOTH（上升沿或者下降沿）或者 INT_EDGE_SETUP。如果是INT_EDGE_SETUP，将不会初始化该管脚，因为它假定已经在别处设置过该管脚（比如使用 gpio 命令），但是，如果指定另外的类型，指定管脚将会被导出并初始化。完成此操作使用的是 gpio 命令，所以，必须保证 gpio 命令是可用的。</p><p>注册函数在中断触发时，将会被调用。在调用注册函数前，中断事件将会从分配器中清除，所以，即使有后续的触发发生，在处理完成前，也不会错过此次触发。（当然，如果在正在处理触发时，有不止一个的中断发生，已经发生的中断将会被忽略）。</p><h2 id="I2C库"><a href="#I2C库" class="headerlink" title="I2C库"></a>I2C库</h2><p>wiringPi 包含了一个 I2C 库，来让您能够更轻松的使用树莓派的板上 I2C 接口。在使用 I2C 接口之前，您可能需要使用 gpio 命令来加载 I2C 驱劢到内核中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpio load i2c</span><br></pre></td></tr></table></figure></p><p>如果你需要的波特率是 100Kbps，那么您可以使用如下命令设置波特率为1000Kbps：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpio load i2c 1000</span><br></pre></td></tr></table></figure></p><p>使用 I2C 库，需要包含 wiringPiI2C.h 文件。并且编译时，同样需要使用-lwiringPi 来连接到 wiringPi 库。</p><p>您仍然可以使用标准的系统命令来检测 I2C 设备，如 i2cdetect 命令，需要注意的是，在 v1 版本的树莓派上是 0，v2 版本上是 1，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls /dev/i2c-1</span><br><span class="line"># 注意i2c-1后面的编码1</span><br><span class="line">i2cdetect –y 1</span><br></pre></td></tr></table></figure><p>当然，您也可以使用 gpio 命令来调用 i2cdetect 命令，从而检测 I2C 讴备，返样就不用在乎您的树莓派版本了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpio i2cdetect</span><br></pre></td></tr></table></figure></p><h3 id="wiringPiI2CSetup-函数"><a href="#wiringPiI2CSetup-函数" class="headerlink" title="wiringPiI2CSetup 函数"></a>wiringPiI2CSetup 函数</h3><p>该函数的原型为：int wiringPiI2CSetup(int devId);</p><p>该函数使用指定设备标示号来初始化 I2C 系统。参数 devId 是 I2C 设备的地址，可以通过 i2cdetect 命令可以查到该地址。该函数会获取树莓派的版本并依据此打开/dev 目录下对应的讴备。</p><p>返回值是标准的 Linux 文件句柄，如果有错误，则返回-1。</p><p>比如，流行的 MCP23017 GPIO 扩展器的设备 ID 是 0x20，所以，你需要将这个数值传递给 wiringPiI2CSetup()。</p><h3 id="wiringPiI2CWrite-函数"><a href="#wiringPiI2CWrite-函数" class="headerlink" title="wiringPiI2CWrite 函数"></a>wiringPiI2CWrite 函数</h3><p>该函数的原型为：int wiringPiI2CWrite(int fd, int data)；</p><p>简单的设备写操作。一些设备可以接受数据，而不需要发送任何内部寄存器地址。</p><h3 id="wiringPiI2CRead-函数"><a href="#wiringPiI2CRead-函数" class="headerlink" title="wiringPiI2CRead 函数"></a>wiringPiI2CRead 函数</h3><p>该函数的原型为：int wiringPiI2CRead(int fd)；</p><p>简单的设备读操作。一些设备可以直接读取，而不需要发送任何寄存器地址。</p><h3 id="wiringPiI2CWriteReg8-和-wiringPiI2CWriteReg16-函数"><a href="#wiringPiI2CWriteReg8-和-wiringPiI2CWriteReg16-函数" class="headerlink" title="wiringPiI2CWriteReg8 和 wiringPiI2CWriteReg16 函数"></a>wiringPiI2CWriteReg8 和 wiringPiI2CWriteReg16 函数</h3><p>该函数的原型为：</p><p>int wiringPiI2CWriteReg8(int fd, int reg, int data); int wiringPiI2CWriteReg16(int fd, int reg, int data);</p><p>使用返两个函数，可以写一个 8 位或 16 位数值到指定的设备寄存器。</p><h3 id="wiringPiI2CReadReg8-和-wiringPiI2CReadReg16-函数"><a href="#wiringPiI2CReadReg8-和-wiringPiI2CReadReg16-函数" class="headerlink" title="wiringPiI2CReadReg8 和 wiringPiI2CReadReg16 函数"></a>wiringPiI2CReadReg8 和 wiringPiI2CReadReg16 函数</h3><p>该函数的原型为：</p><p>int wiringPiI2CReadReg8(int fd, int reg); int wiringPiI2CReadReg16(int fd, int reg);</p><p>使用返两个函数，可以从指定的设备寄存器读取一个 8 位或 16 位的数值。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.lxx1.com/树莓派-wiringpi-用户手册" target="_blank" rel="noopener">树莓派 wiringPi 用户手册</a>, by 科技爱好者博客</li><li><a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a></li><li><a href="https://hanbingyan.github.io/2016/03/07/pthread_on_linux/" target="_blank" rel="noopener">Pthreads 入门教程</a>,by hanbingyan.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;wiringPi 库是由 Gordon Henderson 所编写并维护的一个用 C 语言写成的类库。起初,主要是作为 BCM2835 芯片的 GPIO 库。而现在,已经非常丰富,除了 GPIO 库,还包括了I2C 库、SPI 库、UART 库和软件 PWM 库等。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>人工智能——人类科技再次飞跃的门槛</title>
    <link href="https://huangwang.github.io/2018/11/21/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E2%80%94%E2%80%94%E4%BA%BA%E7%B1%BB%E7%A7%91%E6%8A%80%E5%86%8D%E6%AC%A1%E9%A3%9E%E8%B7%83%E7%9A%84%E9%97%A8%E6%A7%9B/"/>
    <id>https://huangwang.github.io/2018/11/21/人工智能——人类科技再次飞跃的门槛/</id>
    <published>2018-11-21T02:13:10.000Z</published>
    <updated>2018-11-26T02:03:54.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h1><h1 id="问题的分析"><a href="#问题的分析" class="headerlink" title="问题的分析"></a>问题的分析</h1><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;问题的提出&lt;/h1&gt;&lt;h1 id=&quot;问题的分析&quot;&gt;&lt;a href=&quot;#问题的分析&quot; class=&quot;headerlink&quot; title=&quot;问题的
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之神经网络</title>
    <link href="https://huangwang.github.io/2018/11/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://huangwang.github.io/2018/11/20/机器学习之神经网络/</id>
    <published>2018-11-20T15:36:43.000Z</published>
    <updated>2018-11-26T02:07:26.598Z</updated>
    
    <content type="html"><![CDATA[<p>人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。</p><p>神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统，通俗的讲就是具备学习功能。<strong>现代神经网络是一种非线性统计性数据建模工具</strong>。</p><h1 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h1><p>神经元示意图：</p><p></p><p align="center">    <img src="images/Ncell.png" width="90%" alt="神经元示意图"></p><p></p><center>图1 神经元示意图</center><ul><li>a1~an为输入向量的各个分量</li><li>w1~wn为神经元各个突触的权值</li><li>b为偏置</li><li>f为传递函数，通常为非线性函数。一般有Sigmoid(), ReLU(), Softmax()。</li><li>t为神经元输出</li></ul><p>神经元的数学表示是：$t=f(\vec{W^{‘}}\vec{A}+b)$</p><ul><li>$\vec{W}$为权向量，$\vec{W^{‘}}$为$\vec{W}$的转置</li><li>$\vec{A}$为输入向量</li><li>$b$为偏置</li><li>$f$为传递函数</li></ul><p>可见，一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果。</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><ul><li>Sigmoid函数</li></ul><p>Sigmoid函数也称S型激活函数，其将加权和转换为介于 0 和 1 之间的值。</p><script type="math/tex; mode=display">F(x)=\frac{1} {1+e^{-x}}</script><p>曲线图如下：</p><p></p><p align="center">    <img src="images/sigmoid.svg" width="90%" alt="S 型激活函数"></p><p></p><center>图2 S 型激活函数</center><ul><li>ReLU函数</li></ul><p>相较于 S 型函数等平滑函数，以下修正线性单元激活函数（简称为 ReLU）的效果通常要好一点，同时还非常易于计算。</p><script type="math/tex; mode=display">F(x)=max(0,x)</script><p>ReLU 的优势在于它基于实证发现（可能由 ReLU 驱动），拥有更实用的响应范围。S 型函数的响应性在两端相对较快地减少。</p><p></p><p align="center">    <img src="images/relu.svg" width="90%" alt="ReLU 激活函数"></p><p></p><center>图3 ReLU 激活函数</center><ul><li>Softmax函数</li></ul><p>Softmax函数用于多类别神经网络。在多类别问题中，Softmax 会为每个类别分配一个用小数表示的概率。这些用小数表示的概率相加之和必须是 1.0。</p><p>Softmax 方程式如下所示：</p><script type="math/tex; mode=display">p(y = j|\textbf{x})  = \frac{e^{(\textbf{w}_j^{T}\textbf{x} + b_j)}}{\sum_{k\in K} {e^{(\textbf{w}_k^{T}\textbf{x} + b_k)}} }</script><p>请注意，此公式本质上是将逻辑回归公式延伸到了多类别。</p><p>Softmax 层是紧挨着输出层之前的神经网络层。Softmax 层必须和输出层拥有一样的节点数。</p><p></p><p align="center">    <img src="images/SoftmaxLayer.svg" width="90%" alt="神经网络中的 Softmax 层"></p><p></p><center>图4 神经网络中的 Softmax 层</center><h1 id="神经元网络"><a href="#神经元网络" class="headerlink" title="神经元网络"></a>神经元网络</h1><p>神经元网络可分为单层神经元网络和多层神经元网络。而常用的是多层神经元网络。</p><h2 id="多层神经元网络"><a href="#多层神经元网络" class="headerlink" title="多层神经元网络"></a>多层神经元网络</h2><p>一种常见的多层结构的前馈网络（Multilayer Feedforward Network）由三部分组成，如图2所示：</p><p></p><p align="center">    <img src="images/activation.svg" width="90%" alt="包含激活函数的三层模型的图表"></p><p></p><center>图5 包含激活函数的三层模型的图表</center><ul><li>输入层（Input layer），众多神经元（Neuron）接受大量非线形输入消息。输入的消息称为输入向量。</li><li>输出层（Output layer），消息在神经元链接中传输、分析、权衡，形成输出结果。输出的消息称为输出向量。</li><li>隐藏层（Hidden layer），简称“隐层”，是输入层和输出层之间众多神经元和链接组成的各个层面。隐层可以有一层或多层。隐层的节点（神经元）数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性（robustness）（控制系统在一定结构、大小等的参数摄动下，维持某些性能的特性）更显著。习惯上会选输入节点1.2至1.5倍的节点。</li></ul><p>这种网络一般称为感知器（对单隐藏层）或多层感知器（对多隐藏层），神经网络的类型已经演变出很多种，这种分层的结构也并不是对所有的神经网络都适用。</p><h1 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h1><p>通常使用方向传播算法训练神经网络<sup>[3]</sup>，但一些常见情况都会导致反向传播算法出错。</p><ul><li>梯度消失</li></ul><p>较低层（更接近输入）的梯度可能会变得非常小。在深度网络中，计算这些梯度时，可能涉及许多小项的乘积。</p><p>当较低层的梯度逐渐消失到 0 时，这些层的训练速度会非常缓慢，甚至不再训练。</p><p>ReLU 激活函数有助于防止梯度消失。</p><ul><li>梯度爆炸</li></ul><p>如果网络中的权重过大，则较低层的梯度会涉及许多大项的乘积。在这种情况下，梯度就会爆炸：梯度过大导致难以收敛。</p><p>批标准化可以降低学习速率，因而有助于防止梯度爆炸。</p><ul><li>ReLU 单元消失</li></ul><p>一旦 ReLU 单元的加权和低于 0，ReLU 单元就可能会停滞。它会输出对网络输出没有任何贡献的 0 激活，而梯度在反向传播算法期间将无法再从中流过。由于梯度的来源被切断，ReLU 的输入可能无法作出足够的改变来使加权和恢复到 0 以上。</p><p>降低学习速率有助于防止 ReLU 单元消失。</p><ul><li>丢弃正则化</li></ul><p>这是称为丢弃的另一种形式的正则化，可用于神经网络。其工作原理是，在梯度下降法的每一步中随机丢弃一些网络单元。丢弃得越多，正则化效果就越强。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/人工神经网络" target="_blank" rel="noopener">人工神经网络</a>,by wikipedia.</li><li><a href="https://developers.google.com/machine-learning/crash-course/introduction-to-neural-networks/anatomy?hl=zh-cn" target="_blank" rel="noopener">神经网络简介</a>,by google.</li><li><a href="https://www.leiphone.com/news/201705/TMsNCqjpOIfN3Bjr.html" target="_blank" rel="noopener">一文详解神经网络 BP 算法原理及 Python 实现</a>,by AI研习社.</li><li><a href="https://google-developers.appspot.com/machine-learning/crash-course/backprop-scroll/?hl=zh-CN" target="_blank" rel="noopener">反向传播算法动态演示</a>, by google.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://huangwang.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
