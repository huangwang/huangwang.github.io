<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2018-10-21T05:11:24.897Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用tensorflow_object_detection_api训练自定义模型</title>
    <link href="https://huangwang.github.io/2018/10/20/%E4%BD%BF%E7%94%A8tensorflow-object-detection-api%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B/"/>
    <id>https://huangwang.github.io/2018/10/20/使用tensorflow-object-detection-api训练自定义模型/</id>
    <published>2018-10-20T09:30:30.000Z</published>
    <updated>2018-10-21T05:11:24.897Z</updated>
    
    <content type="html"><![CDATA[<p>近期研究目标对象检测和识别，发现谷歌开源的基于tensorflow的object detection api模型效果不错，于是git clone下来测试一下。下面记录我在debian linux上安装配置object detection api模型，构建自定义数据集，训练和测试object detection api模型的过程，以及整个过程中遇到的一下问题，需要注意的事项。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>TensorFlow 程序在 GPU 上的运行速度通常要比在 CPU 上快得多，在系统满足NVIDIA 软件要求的前提下，推荐使用支持 GPU 的 TensorFlow。</p><p>官方推荐使用Docker简化TensorFlow的GPU支持配置，这样只需要linux主机安装好Nvidia GPU驱动即可。</p><ol><li><p>安装docker<br>安装docker的方法可参考链接1。</p></li><li><p>安装nvidia-docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Add the package repositories</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/debian9/nvidia-docker.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># Install nvidia-docker2 and reload the Docker daemon configuration</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure></li><li><p>下载最新支持GPU和Python3的tensorflow映像<sup>[2]</sup></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow:latest-gpu-py3</span><br></pre></td></tr></table></figure></li><li><p>测试tensorflow映像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --runtime=nvidia -it --rm tensorflow/tensorflow:latest-gpu-py3 \</span><br><span class="line">    python -c &quot;import tensorflow as tf; print(tf.contrib.eager.num_gpus())&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="下载TFModel库及其相关库"><a href="#下载TFModel库及其相关库" class="headerlink" title="下载TFModel库及其相关库"></a>下载TFModel库及其相关库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 基于tensorflow的模型和例子</span><br><span class="line">git clone https://github.com/tensorflow/models.git</span><br><span class="line"># raccoon数据集，可参考其中生成TFRecord格式数据的方法</span><br><span class="line">git clone https://github.com/datitran/raccoon_dataset.git</span><br></pre></td></tr></table></figure><h2 id="安装Python虚拟环境管理工具"><a href="#安装Python虚拟环境管理工具" class="headerlink" title="安装Python虚拟环境管理工具"></a>安装Python虚拟环境管理工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 具体安装配置过程参见链接3</span><br><span class="line">sudo pip3 install virtualenv</span><br><span class="line">sudo pip3 install virtualenvwrapper</span><br><span class="line">mkvirtualenv object-detection --python=/usr/bin/python3# 创建python3虚拟环境</span><br></pre></td></tr></table></figure><h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><p>以分类几何形状为例，收集相关图片后，需要对它们进行标注。推荐使用 LabelImg 进行标注，生成的文件是 PASCAL VOC 的 xml 格式。这个工具还可以加载标注文件，检查标注结果<sup>[3]</sup>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tzutalin/labelImg.git</span><br><span class="line">workon object-detection</span><br><span class="line"># 启动python3虚拟环境</span><br><span class="line">workon object-detection</span><br><span class="line"># 安装配置labelImg</span><br><span class="line">sudo apt-get install pyqt5-dev-tools</span><br><span class="line">sudo pip3 install -r requirements/requirements-linux-python3.txt</span><br><span class="line">make qt5py3</span><br><span class="line">python3 labelImg.py</span><br></pre></td></tr></table></figure></p><p>除了标注图片，还需创建一个 .pbtxt 文件用来说明标注的分类。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">  id: 1</span><br><span class="line">  name: &apos;circle&apos;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">  id: 2</span><br><span class="line">  name: &apos;square&apos;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">  id: 3</span><br><span class="line">  name: &apos;triangle&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要特别注意以下两点：</p><ul><li>name 不支持直接写中文，需要 UTF-8 编码</li><li>id 从 1 开始编号，不能从 0 开始编号。</li></ul><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>标注好的数据是图片文件（<em>.jpg）和标注文件（</em>.xml），而 TensorFlow 不能直接用这些数据作为输入，还需要转成 TFRecord 格式。可采用两种方法生成TFRecord格式数据：</p><ul><li>tensorflow/models中方法</li></ul><p>项目中使用create_pascal_tf_record.py, create_pet_tf_record.py生成TFrecord 格式数据</p><ul><li>raccoon_dataset中方法</li></ul><p>项目中使用xml_to_csv.py把xml合并成一个CSV文件，使用split labels.ipynb 随机划分训练集和测试集，以及使用generate_tfrecord.py 生成相对应的 TFRecord 训练集和测试集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">workon object-detection</span><br><span class="line"># 将生成geometry_labels.csv</span><br><span class="line">python xml_to_csv.py</span><br><span class="line"># 打开split labels.ipynb生产训练集train_labels.csv和测试集test_labels.csv</span><br><span class="line">jupyter notebook</span><br><span class="line"># 创建训练用TFRecord文件:</span><br><span class="line">python generate_tfrecord.py --csv_input=data/train_labels.csv  --output_path=training/geometry_train.record</span><br><span class="line"># 创建测试用TFRecord文件:</span><br><span class="line">python generate_tfrecord.py --csv_input=data/test_labels.csv  --output_path=training/geometry_test.record</span><br></pre></td></tr></table></figure></p><p>第二种方法比较直观，因此我采用第二种方法生产TFRecord数据。</p><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="安装TFModel依赖"><a href="#安装TFModel依赖" class="headerlink" title="安装TFModel依赖"></a>安装TFModel依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">workon object-detection</span><br><span class="line"># For CPU</span><br><span class="line">pip install tensorflow</span><br><span class="line"># For GPU</span><br><span class="line">pip install tensorflow-gpu</span><br><span class="line"></span><br><span class="line">pip install --user Cython</span><br><span class="line">pip install --user contextlib2</span><br><span class="line">pip install --user pillow</span><br><span class="line">pip install --user lxml</span><br><span class="line">pip install --user jupyter</span><br><span class="line">pip install --user matplotlib</span><br></pre></td></tr></table></figure><h2 id="安装COCO-API"><a href="#安装COCO-API" class="headerlink" title="安装COCO API"></a>安装COCO API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cocodataset/cocoapi.git</span><br><span class="line">cd cocoapi/PythonAPI</span><br><span class="line">make</span><br><span class="line">cp -r pycocotools &lt;path_to_tensorflow&gt;/models/research/</span><br></pre></td></tr></table></figure><h2 id="编译Protobuf"><a href="#编译Protobuf" class="headerlink" title="编译Protobuf"></a>编译Protobuf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip</span><br><span class="line">unzip protobuf.zip</span><br><span class="line"></span><br><span class="line"># From tensorflow/models/research/</span><br><span class="line">./bin/protoc object_detection/protos/*.proto --python_out=.</span><br></pre></td></tr></table></figure><h2 id="添加库到PYTHONPATH"><a href="#添加库到PYTHONPATH" class="headerlink" title="添加库到PYTHONPATH"></a>添加库到PYTHONPATH</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line"># 每次调用TFModel的Object Detection API之前都要设置</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># if all tests is ok, the installation is no problem.</span><br><span class="line">python object_detection/builders/model_builder_test.py</span><br></pre></td></tr></table></figure><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h2><ol><li><p>将label_map文件、训练用TFRecord文件、测试用TFRecord文件复制到tensorflow/models/research/object_detection/data文件夹下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 推荐的数据目录结构</span><br><span class="line">+ data</span><br><span class="line">  - geometry.pbtxt</span><br><span class="line">  - geometry_test.record</span><br><span class="line">  - geometry_train.record</span><br></pre></td></tr></table></figure></li><li><p>下载COCO预训练模型用于迁移学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/object-detection</span><br><span class="line">wget http://download.tensorflow.org/models/object_detection/ssd_mobilenet_v1_coco_2018_01_28.tar.gz</span><br><span class="line">tar -xvf ssd_mobilenet_v1_coco_2018_01_28.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改解压后模型文件夹中pipeline.config</p></li></ol><p>解压ssd_mobilenet_v1_coco_2018_01_28模型后会看到一个 .config 文件，里面包含有模型的参数，训练的参数，评估的参数等。这里需要修改到的有，</p><ul><li>模型参数中的 num_classes，改成你的类别数，</li><li>训练参数中的 fine_tune_checkpoint，采用迁移学习，这里路径的指向刚才下载的Pre-train模型，比如 ssd_mobilenet_v1_coco_11_06_2017/model.ckpt</li><li>train_input_reader 下面的 input_path，改成你的训练数据，例如 data/train.record。label_map_path，改成你的 pbtxt 文件路径，例如 data/object.pbtxt</li><li>eval_input_reader 下面的 input_path，也需要改成你的测试集，例如 data/test.record。同样，label_map_path，也改成你的 pbtxt 文件路径，例如 data/object.pbtxt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//pipeline.config修改示例</span><br><span class="line">model &#123;</span><br><span class="line">  ssd &#123;</span><br><span class="line">    num_classes: 3</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">train_config &#123;</span><br><span class="line">  ...</span><br><span class="line">  fine_tune_checkpoint: &quot;object_detection/ssd_mobilenet_v1_coco_2018_01_28/model.ckpt&quot;</span><br><span class="line">  from_detection_checkpoint: true</span><br><span class="line">  num_steps: 50000</span><br><span class="line">&#125;</span><br><span class="line">train_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;object_detection/data/geometry.pbtxt&quot;</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;object_detection/data/geometry_train.record&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">eval_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;object_detection/data/geometry.pbtxt&quot;</span><br><span class="line">  shuffle: false</span><br><span class="line">  num_epochs: 1</span><br><span class="line">  num_readers: 1</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;object_detection/data/geometry_test.record&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  sample_1_of_n_examples: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h2><p>在GPU上训练TFModel，与在CPU上训练TFModel相比，要快五倍左右，因此推荐在GPU上训练TFModel。</p><ol><li><p>启动docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动docker，并使用-v参数将目录/home/$USER挂载到容器上</span><br><span class="line">docker run --runtime=nvidia -v /home/$USER:/home/$USER -it tensorflow/tensorflow:latest-gpu-py3 bash</span><br></pre></td></tr></table></figure></li><li><p>执行训练</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br><span class="line"># 开始训练</span><br><span class="line">python object_detection/model_main.py --pipeline_config_path=object_detection/ssd_mobilenet_v1_coco_2018_01_28/pipeline.config --model_dir=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/ --num_train_steps=50000 --alsologtostderr</span><br></pre></td></tr></table></figure></li><li><p>使用tensorboard查看训练进度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">tensorboard --logdir=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/</span><br></pre></td></tr></table></figure></li></ol><p>在CPU上训练只需执行第二步和第三步。</p><h2 id="导出模型"><a href="#导出模型" class="headerlink" title="导出模型"></a>导出模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">python object_detection/export_inference_graph.py --input_type=image_tensor --pipeline_config_path=object_detection/ssd_mobilenet_v1_coco_2018_01_28/pipeline.config --trained_checkpoint_prefix=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/model.ckpt-50000 --output_directory=../../../../ssd_mobilenet_v1_coco_2018_01_28</span><br></pre></td></tr></table></figure><p>运行完命令后模型就导出到 ssd_mobilenet_v1_coco_2018_01_28 文件夹中，其中saved_model/saved_model.pb即是所需模型。 需要注意的是，参数中的 –trained_checkpoint_prefix 是需要指定到单个模型的，例如 model.ckpt-50000，这个50000就是训练了 50000 步后自动保存模型。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/，">https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/，</a> by jack huang</li><li><a href="https://www.tensorflow.org/install/docker?hl=zh-cn" target="_blank" rel="noopener">https://www.tensorflow.org/install/docker?hl=zh-cn</a> , by tensorflow.</li><li><a href="https://huangwang.github.io/2018/10/09/Virtualenv简易教程/">https://huangwang.github.io/2018/10/09/Virtualenv简易教程/</a> , by jack huang</li><li><a href="https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html" target="_blank" rel="noopener">https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html</a> , by 菁菁者莪</li><li><a href="https://blog.csdn.net/xunan003/article/details/78720189?utm_source=blogxgwz2" target="_blank" rel="noopener">https://blog.csdn.net/xunan003/article/details/78720189?utm_source=blogxgwz2</a>, by xunan003</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期研究目标对象检测和识别，发现谷歌开源的基于tensorflow的object detection api模型效果不错，于是git clone下来测试一下。下面记录我在debian linux上安装配置object detection api模型，构建自定义数据集，训练和
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="tensorflow" scheme="https://huangwang.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Docker使用帮助</title>
    <link href="https://huangwang.github.io/2018/10/19/Docker%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <id>https://huangwang.github.io/2018/10/19/Docker使用帮助/</id>
    <published>2018-10-19T01:57:21.000Z</published>
    <updated>2018-10-20T13:42:29.964Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p><p>Docker与传统虚拟机如virtualbox、vmware相比，占用资源少，更加轻便，启动快，更适用于解决软件环境配置难题。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol><li><p>镜像</p><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p></li><li><p>容器</p></li></ol><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><ol start="3"><li>仓库</li></ol><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p><p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>Docker Hub 上有大量的高质量的镜像可以用，使用docker pull命令拉取镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 拉取镜像</span><br><span class="line">$ docker pull ubuntu:16.04</span><br><span class="line">// 以该镜像启动容器</span><br><span class="line">$ docker run -it --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure></p><p>docker run 就是运行容器的命令,其参数含义如下：</p><ul><li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。</li><li>ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。</li><li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li></ul><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>删除本地镜像格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure></p><p>以删除hello-world镜像为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm hello-world</span><br></pre></td></tr></table></figure></p><h2 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 新建并启动容器</span><br><span class="line">docker run ubuntu:14.04 /bin/echo &apos;Hello world&apos;</span><br><span class="line">// 启动已终止容器</span><br><span class="line">docker container start</span><br></pre></td></tr></table></figure><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 后台运行容器</span><br><span class="line">$ docker run -d ubuntu:17.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br><span class="line">// 通过 docker container ls 命令来查看容器信息</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">// 通过 docker container logs 命令获取容器的输出信息</span><br><span class="line">$ docker container logs [container ID or NAMES]</span><br></pre></td></tr></table></figure><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>在使用 -d 参数时，容器启动后会进入后台。</p><p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">$ docker container ls</span><br><span class="line">$ docker exec -i 69d1 bash</span><br><span class="line">$ docker exec -it 69d1 bash</span><br></pre></td></tr></table></figure></p><p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 删除一个处于终止状态的容器</span><br><span class="line">$ docker container rm  trusting_newton</span><br><span class="line"></span><br><span class="line">// 清理所有处于终止状态的容器</span><br><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://yeasy.gitbooks.io/docker_practice/introduction/what.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/introduction/what.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a> ，by 阮一峰</li><li><a href="https://zh.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Docker</a> ,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。&lt;/p&gt;
&lt;p&gt;Docker与传统虚拟机如virtualbox、vmware相比，占用资源少，更加
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Debian_Linux下安装Docker的方法</title>
    <link href="https://huangwang.github.io/2018/10/18/Debian-Linux%E4%B8%8B%E5%AE%89%E8%A3%85Docker%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/</id>
    <published>2018-10-18T13:42:00.000Z</published>
    <updated>2018-10-18T14:53:35.891Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p><p>Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心名字空间（name space），来创建独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机造成的额外负担。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网上、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、存储器、block I/O与网上。</p><p>下面即记录在Debian Linux下按照Docker社区版的方法。</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>添加Docker的pgp key。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></p><p>配置Docker的Apt仓库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;deb https://download.docker.com/linux/debian stretch stable&apos; | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure></p><p>更新Apt仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 清除之前安装的Docker版本</span><br><span class="line">apt-get remove docker docker-engine docker.io</span><br><span class="line">// 在安装最新的Docker社区版</span><br><span class="line">apt-get install docker-ce</span><br><span class="line">// 测试docker</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h1 id="以非root用户管理docker"><a href="#以非root用户管理docker" class="headerlink" title="以非root用户管理docker"></a>以非root用户管理docker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://zh.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Docker</a> ,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。&lt;/p&gt;
&lt;p&gt;Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow学习笔记</title>
    <link href="https://huangwang.github.io/2018/10/14/tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/10/14/tensorflow学习笔记/</id>
    <published>2018-10-14T05:10:24.000Z</published>
    <updated>2018-10-14T06:07:26.317Z</updated>
    
    <content type="html"><![CDATA[<p>TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。</p><h1 id="tensorflow入门"><a href="#tensorflow入门" class="headerlink" title="tensorflow入门"></a>tensorflow入门</h1><p>tensorflow实现机器学习的基本步骤如下：</p><ol><li>定义模型，建立数据流图</li><li>定义loss，并指定优化器 </li><li>传入数据并进行训练 </li><li>使用测试集进行评测</li></ol><h2 id="通用代码框架"><a href="#通用代码框架" class="headerlink" title="通用代码框架"></a>通用代码框架</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># 初始化变量和模型参数，定义训练闭环中的运算</span><br><span class="line"></span><br><span class="line">def inference(X):</span><br><span class="line">    # 计算推断模型在数据X上的输出，并将结果返回</span><br><span class="line"></span><br><span class="line">def loss(X,Y):</span><br><span class="line">    # 依据训练数据X及其期望输出Y计算损失</span><br><span class="line"></span><br><span class="line">def inputs():</span><br><span class="line">    # 读取或生成训练数据X及其期望输出Y</span><br><span class="line"></span><br><span class="line">def train(total_loss):</span><br><span class="line">    # 依据计算的总损失训练或调整模型参数</span><br><span class="line"></span><br><span class="line">def evaluate(sess,X,Y):</span><br><span class="line">    # 对训练得到的模型进行评估</span><br><span class="line"></span><br><span class="line"># 在一个会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    </span><br><span class="line">    X,Y=inputs()</span><br><span class="line">    </span><br><span class="line">    total_loss=loss(X,Y)</span><br><span class="line">    train_op=train(total_loss)</span><br><span class="line">    </span><br><span class="line">    coord=tf.train.Coordinator()</span><br><span class="line">    threads=tf.train.start_queue_runners(sess=sess,coord=coord)</span><br><span class="line"></span><br><span class="line">    # 实际的训练迭代次数</span><br><span class="line">    training_steps=1000</span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line">        # 出于调试和学习的目的，查看损失在训练过程中递减的情况</span><br><span class="line">        if step % 10 =0:</span><br><span class="line">            print &quot;loss: &quot;,sess,run([total_loss])</span><br><span class="line"></span><br><span class="line">    evalute(sess,X,Y)</span><br><span class="line"></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure><h2 id="保存训练检查点"><a href="#保存训练检查点" class="headerlink" title="保存训练检查点"></a>保存训练检查点</h2><p>借助tf.train.Saver类可创建检查点文件，将数据流图中变量保存至其中。修改后框架如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 模型定义代码</span><br><span class="line"># 创建一个Saver对象</span><br><span class="line">saver=tf.train.Saver()</span><br><span class="line"></span><br><span class="line"># 在会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    # 模型设置</span><br><span class="line"></span><br><span class="line">    # 实际的训练闭环</span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line"></span><br><span class="line">        if step % 1000 ==0</span><br><span class="line">            # 将创建遵循命名模板为my-model-&#123;step&#125;的检查点文件，默认保存最近的5个文件</span><br><span class="line">            saver.save(sess,&apos;my-model&apos;,global_step=step)</span><br><span class="line">    </span><br><span class="line">    # 模型评估</span><br><span class="line"></span><br><span class="line">    saver.save(sess,&apos;my-model&apos;,global_step=training_steps)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure></p><p>如果希望从检查点恢复，则使用tf.train.get_checkpoint_state方法验证检查点文件的存在，并使用tf.train.Saver.restore方法恢复变量值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">with tf.Session() as sess:</span><br><span class="line">    # 模型设置</span><br><span class="line"></span><br><span class="line">    initial_step=0</span><br><span class="line"></span><br><span class="line">    # 验证之前是否已经保存了检查点文件</span><br><span class="line">    ckpt=tf.train.get_checkpoint_state(os.path.dirname(__file__))</span><br><span class="line">    if ckpt and ckpt.model_checkpoint_path:</span><br><span class="line">        # 从检查点恢复模型参数</span><br><span class="line">        saver.restore(sess,ckpt.model_checkpoint_path)</span><br><span class="line">        initial_step=int(ckpt.model_checkpoint_path.rsplite(&apos;_&apos;,1)[1])</span><br><span class="line"></span><br><span class="line">    # 实际的训练闭环</span><br><span class="line">    for step in range(initial_step, training_steps):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.tensorflow.org/?hl=zh-cn" target="_blank" rel="noopener">https://www.tensorflow.org/?hl=zh-cn</a> .</li><li>面向机器智能的TensorFlow实践, by Sam Abrahams, Danijar Hafner,etc.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python常用库简介</title>
    <link href="https://huangwang.github.io/2018/10/14/Python%E5%B8%B8%E7%94%A8%E5%BA%93%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2018/10/14/Python常用库简介/</id>
    <published>2018-10-14T03:22:09.000Z</published>
    <updated>2018-10-14T04:00:40.486Z</updated>
    
    <content type="html"><![CDATA[<p>Python的高效开发建立在大量常用库基础上，因此掌握常用的Python库十分必要。下面简单介绍Python的各类常用库。</p><h1 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h1><ul><li>os： 访问操作系统功能模块</li><li>sys： 访问一些环境变量和与 Python 解释器交互</li><li>datetime： 日期时间处理</li><li>collections： 高级数据结构，有序字典，队列等等</li><li>uuid： 生成 UUID 模块</li><li>random： 随机数生成模块</li><li>re： 正则表达式模块</li><li>json： JSON 处理模块</li><li>pdb： 单步调试模块</li></ul><h1 id="科学计算"><a href="#科学计算" class="headerlink" title="科学计算"></a>科学计算</h1><ul><li>scipy：基于Python的matlab实现，旨在实现matlab的所有功能。包含Numpy、Ipython、Pandas、Matplotlib、Sympy等常用库</li><li>numpy： 基于Python的科学计算第三方库，提供了矩阵，线性代数，傅立叶变换等等的解决方案</li><li>pandas： 支持表格等多维数据</li><li>matplotlib： 用Python实现的类matlab的第三方库，用以绘制一些高质量的数学二维图形</li></ul><h1 id="命令交互"><a href="#命令交互" class="headerlink" title="命令交互"></a>命令交互</h1><ul><li>ipython： 交互命令行，适合科学计算</li><li>jupyter： ipython notebook 的延伸，可以直接放在github上</li><li>argparse：(Python 标准库)用于命令项选项与参数解析的模块</li></ul><h1 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关"></a>爬虫相关</h1><ul><li>requests:人性化的HTTP请求库</li></ul><h1 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h1><ul><li>virtualenv：创建独立 Python 环境的工具</li><li>virtualenvwrapper：virtualenv 的一组扩展</li></ul><h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><ul><li>pip：Python 包和依赖关系管理工具</li><li>conda：跨平台，Python 二进制包管理工具</li></ul><h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><ul><li>threading：(Python 标准库)更高层的线程接口</li><li>multiprocessing：(Python 标准库) 基于进程的“线程”接口</li></ul><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><ul><li>logging：(Python 标准库) 为 Python 提供日志功能。</li></ul><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><ul><li>six：Python 2 和 3 的兼容性工具</li></ul><h1 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h1><ul><li>opencv</li></ul><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul><li>tensorflow</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.jianshu.com/p/886cbabbfe9e" target="_blank" rel="noopener">https://www.jianshu.com/p/886cbabbfe9e</a> ,by brandonxiang</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python的高效开发建立在大量常用库基础上，因此掌握常用的Python库十分必要。下面简单介绍Python的各类常用库。&lt;/p&gt;
&lt;h1 id=&quot;常用标准库&quot;&gt;&lt;a href=&quot;#常用标准库&quot; class=&quot;headerlink&quot; title=&quot;常用标准库&quot;&gt;&lt;/a&gt;常用
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Virtualenv简易教程</title>
    <link href="https://huangwang.github.io/2018/10/09/Virtualenv%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2018/10/09/Virtualenv简易教程/</id>
    <published>2018-10-09T13:08:13.000Z</published>
    <updated>2018-10-14T09:46:49.199Z</updated>
    
    <content type="html"><![CDATA[<p>virtualenv是一个创建隔离python环境的工具，主要用于解决包冲突问题。</p><h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install virtualenv</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="创建项目的虚拟环境"><a href="#创建项目的虚拟环境" class="headerlink" title="创建项目的虚拟环境"></a>创建项目的虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd my_project_folder</span><br><span class="line">$ virtualenv venv #venv是虚拟环境名称</span><br></pre></td></tr></table></figure><p>执行上述命令后，将生成一个与虚拟环境同名的文件夹，包含 Python 可执行文件和 pip 库的拷贝，可用于安装其他包。</p><p>但是默认情况下，虚拟环境中不会包含也无法使用系统环境的global site-packages。比如系统环境里安装了 requests 模块，在虚拟环境里import requests会提示ImportError。如果想使用系统环境的第三方软件包，可以在创建虚拟环境时使用参数–system-site-packages。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --system-site-packages venv</span><br></pre></td></tr></table></figure></p><p>此外可以指定虚拟环境所使用的 Python 版本，但前提是系统中已经安装了该版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p /usr/bin/python2.7 venv</span><br></pre></td></tr></table></figure></p><h2 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h2><p>启动虚拟环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd venv</span><br><span class="line">source bin/activate </span><br><span class="line">python -V</span><br></pre></td></tr></table></figure></p><p>退出虚拟环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><h1 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h1><p>virtualenvwrapper是virtualenv 的扩展工具，提供了一系列命令行命令，可以方便地创建、删除、复制、切换不同的虚拟环境。同时，使用该扩展后，所有虚拟环境都会被放置在同一个目录下。</p><h2 id="安装方法-1"><a href="#安装方法-1" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>在$home/.bashrc文件中添加如下几行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># bash -f file检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true</span><br><span class="line">if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then</span><br><span class="line">   export WORKON_HOME=$HOME/.virtualenvs </span><br><span class="line">   source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h2 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h2><p>mkvirtualenv 也可以使用 virtualenv 的参数，比如 –python 来指定 Python 版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv venv # 创建虚拟环境，虚拟环境目录都在 WORKON_HOME 里</span><br><span class="line"></span><br><span class="line">lsvirtualenv -b # 列出虚拟环境</span><br><span class="line"></span><br><span class="line">workon [虚拟环境名称] # 切换虚拟环境</span><br><span class="line"></span><br><span class="line">lssitepackages # 查看环境里安装了哪些包</span><br><span class="line"></span><br><span class="line">cdvirtualenv [子目录名] # 进入当前环境的目录</span><br><span class="line"></span><br><span class="line">cpvirtualenv [source] [dest] # 复制虚拟环境</span><br><span class="line"></span><br><span class="line">deactivate # 退出虚拟环境</span><br><span class="line"></span><br><span class="line">rmvirtualenv [虚拟环境名称] # 删除虚拟环境</span><br></pre></td></tr></table></figure></p><h1 id="conda-vs-pip-vs-virtualenv"><a href="#conda-vs-pip-vs-virtualenv" class="headerlink" title="conda vs. pip vs. virtualenv"></a>conda vs. pip vs. virtualenv</h1><p>Conda是一个开源包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 它适用于Linux，OS X和Windows，是为Python程序创建的，但可以打包和分发任何软件。</p><p>Pip是一个以Python计算机程序语言写成的软件包管理系统，用于安装和管理软件包。</p><p>它们直接的区别如下：</p><p align="center"><br>    <img src="images/conda_compare.png" width="90%" alt="conda vs. pip vs. virtualenv"><br></p><h1 id="pip使用方法"><a href="#pip使用方法" class="headerlink" title="pip使用方法"></a>pip使用方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 导出python安装包环境</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"># 导入requirements文件</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://codingpy.com/article/virtualenv-must-have-tool-for-python-development/" target="_blank" rel="noopener">http://codingpy.com/article/virtualenv-must-have-tool-for-python-development/</a>.</li><li><a href="https://conda.io/docs/commands.html#conda-vs-pip-vs-virtualenv-commands" target="_blank" rel="noopener">https://conda.io/docs/commands.html#conda-vs-pip-vs-virtualenv-commands</a>.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;virtualenv是一个创建隔离python环境的工具，主要用于解决包冲突问题。&lt;/p&gt;
&lt;h1 id=&quot;安装方法&quot;&gt;&lt;a href=&quot;#安装方法&quot; class=&quot;headerlink&quot; title=&quot;安装方法&quot;&gt;&lt;/a&gt;安装方法&lt;/h1&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Blender简易教程</title>
    <link href="https://huangwang.github.io/2018/09/19/Blender%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2018/09/19/Blender简易教程/</id>
    <published>2018-09-19T00:48:48.000Z</published>
    <updated>2018-09-19T01:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要用Blender建3D模型，试用了半天，将经验简单总结一下。</p><h1 id="3D建模流程"><a href="#3D建模流程" class="headerlink" title="3D建模流程"></a>3D建模流程</h1><ul><li>建立3D模型：通常在Blender的3D视图窗口对物体进行建模。</li><li>拆分制作纹理：设置缝合边，再展开。打开U/V图像编辑器窗口即可看到拆分效果。导出图片后制作纹理。</li><li>使用材质贴图：设置材质着色，添加纹理。</li></ul><h1 id="Blender快捷键"><a href="#Blender快捷键" class="headerlink" title="Blender快捷键"></a>Blender快捷键</h1><p>Blender快捷键很多，熟练使用可加速3D模型的建立。</p><h2 id="3D视图窗口"><a href="#3D视图窗口" class="headerlink" title="3D视图窗口"></a>3D视图窗口</h2><h3 id="字母键"><a href="#字母键" class="headerlink" title="字母键"></a>字母键</h3><ul><li>T：打开左侧工具栏</li><li>Tab：编辑模式和物体模式切换</li><li>N：打开物体属性</li><li>A：全选、取消选择</li><li>B：框选，进行多选</li><li>C：刷选，加Shift取消选择，按Esc退出选择</li><li>X：删除</li><li>Shift+A：增加物件，新建的物件会出现在准星的位置</li><li>Ctrl+Alt+Q：切换四视图</li><li>Ctrl+Space：调出三维坐标系操纵物体</li><li>H：隐藏对象（Hide）</li><li>Alt+H：显示对象</li><li>Z：线框模式与实体模式之间切换</li><li>Ctrl+U：用户的内置设置</li><li>Ctrl+Tab：进行点、线、面的编辑模式</li><li>Shift+空格键：放大视图</li><li>F12：计算结果（算图模式），如果是黑色的，需要把摄像机和光源放在同一个图层中，或者选择摄像机和光源的图层。</li><li>G：移动选中对象</li><li>R: 旋转</li><li>S: 缩放</li><li>Alt+S：法向缩放</li><li>E：挤出选中对象</li><li>Ctrl+R: 环切并滑动</li></ul><h3 id="数字键"><a href="#数字键" class="headerlink" title="数字键"></a>数字键</h3><p>数字键主要用于视角切换</p><ul><li>1：前视图</li><li>3：侧视图</li><li>7：俯视图</li></ul><h3 id="鼠标键"><a href="#鼠标键" class="headerlink" title="鼠标键"></a>鼠标键</h3><ul><li>右键：选择物体</li><li>shift+中键：平移</li><li>滚轴/（Ctrl+中键拖拽）：缩放</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li>JinunMeng. Blender常用快捷键. <a href="https://blog.csdn.net/u010670734/article/details/64538633" target="_blank" rel="noopener">https://blog.csdn.net/u010670734/article/details/64538633</a>.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近需要用Blender建3D模型，试用了半天，将经验简单总结一下。&lt;/p&gt;
&lt;h1 id=&quot;3D建模流程&quot;&gt;&lt;a href=&quot;#3D建模流程&quot; class=&quot;headerlink&quot; title=&quot;3D建模流程&quot;&gt;&lt;/a&gt;3D建模流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;建立3D模型
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Windows下将cmd命令添加到右键菜单</title>
    <link href="https://huangwang.github.io/2018/09/11/Windows%E4%B8%8B%E5%B0%86cmd%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <id>https://huangwang.github.io/2018/09/11/Windows下将cmd命令添加到右键菜单/</id>
    <published>2018-09-11T02:35:30.000Z</published>
    <updated>2018-09-11T03:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>经常需要使用cmd命令，如果打开cmd窗口后在cd到目标路径，则非常麻烦。可使用如下方法将cmd添加到右键菜单，这样一打开cmd窗口就到了目标路径。设置方法如下：</p><ol><li>打开注册表</li><li>添加注册项<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a) 找到[HKEY_CLASSESS_ROOT\Folder\shell]子键，在其下新建“cmdPrompt”子项，在窗口右侧名称列上点击右键修改，将数值数据改为“CMD快速通道”。</span><br><span class="line"></span><br><span class="line">b) 再在这个项下，新建名为“command”子项，同样修改数值数据修改为c:\windows\system32\cmd.exe /k cd &quot;%1&quot;</span><br></pre></td></tr></table></figure></li></ol><p>设置完成后即可在目标路径文件夹上右键单击，选择“CMD快速通道”命令，打开cmd窗口的同时，已跳转到目标路径下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经常需要使用cmd命令，如果打开cmd窗口后在cd到目标路径，则非常麻烦。可使用如下方法将cmd添加到右键菜单，这样一打开cmd窗口就到了目标路径。设置方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开注册表&lt;/li&gt;
&lt;li&gt;添加注册项&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Windows平台Python安装与配置教程</title>
    <link href="https://huangwang.github.io/2018/09/07/Windows%E5%B9%B3%E5%8F%B0Python%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2018/09/07/Windows平台Python安装与配置教程/</id>
    <published>2018-09-07T14:37:06.000Z</published>
    <updated>2018-09-07T14:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面记录在Windows平台安装配置Python的过程。</p><ol><li>去Python官网下载最新的Python3，当前最新版本为3.7。</li><li>双击Python3.7的安装包进行安装，设置安装路径为C:\Python\Python37，同时将Python路径加入系统Path变量中。</li><li>使用如下命令安装ipython。加参数–trusted-host，否则会报错误：SSLError(SSLCertVerificationError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed。加参数-i，制定国内pip源，显著提高下载速度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面记录在Windows平台安装配置Python的过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去Python官网下载最新的Python3，当前最新版本为3.7。&lt;/li&gt;
&lt;li&gt;双击Python3.7的安装包进行安装，设置安装路径为C:\Python\Python37，同时将Pyt
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Python" scheme="https://huangwang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows与Linux双系统Grub引导修复</title>
    <link href="https://huangwang.github.io/2018/09/06/Windows%E4%B8%8ELinux%E5%8F%8C%E7%B3%BB%E7%BB%9FGrub%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/"/>
    <id>https://huangwang.github.io/2018/09/06/Windows与Linux双系统Grub引导修复/</id>
    <published>2018-09-06T08:38:26.000Z</published>
    <updated>2018-09-09T13:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为个人爱好，我再笔记本中安装了Windows和Linux的双系统。最近因为Windows系统故障原因，重装Windows系统，导致无法引导Linux启动。</p><p>故障原因是之前安装双系统时，先安装Windows，再安装Linux，这样将由Grub2来引导Linux和Windows的启动。而重装Windows的过程中，将覆盖Grub2引导程序，导致无法Linux的启动。</p><p>故障解决方法是重新在硬盘中写入Grub2引导程序。具体步骤如下：</p><ol><li>使用Linux安装盘，使用Live CD方式进行Linux系统。</li><li>使用fdisk -l命令查看硬盘信息。</li><li>使用grub-install –root-directory=/media/boot /dev/sda将grub2引导程序写入硬盘。/media/boot为引导分区所在位置，grub-install写入grub2引导程序时需要使用引导分区所在linux映像。</li><li>使用update-grub2更新引导配置。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为个人爱好，我再笔记本中安装了Windows和Linux的双系统。最近因为Windows系统故障原因，重装Windows系统，导致无法引导Linux启动。&lt;/p&gt;
&lt;p&gt;故障原因是之前安装双系统时，先安装Windows，再安装Linux，这样将由Grub2来引导Linux
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Linux" scheme="https://huangwang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>中文文献免费下载方法</title>
    <link href="https://huangwang.github.io/2018/08/26/%E4%B8%AD%E6%96%87%E6%96%87%E7%8C%AE%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/08/26/中文文献免费下载方法/</id>
    <published>2018-08-26T14:45:03.000Z</published>
    <updated>2018-09-09T13:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面记录经过验证可用的中文文献下载方法:</p><ol><li><p>idata中国知网 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">idata中国知网网址：https://www.cn-ki.net/</span><br><span class="line">进入系统，注册账号，登陆就可以每天免费下载五篇知网论文。</span><br><span class="line">额度用完之后，第二天可以继续下载。</span><br><span class="line">每天五篇的额度基本能满足需要，这样还不够的话，可以多注册几个账号。</span><br></pre></td></tr></table></figure></li><li><p>全国图书馆参考咨询联盟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">全国图书馆参考咨询联盟网址：http://www.ucdrs.superlib.net/</span><br><span class="line">很全，可以查图书，查期刊，报纸等。还有硕士，博士的毕业论文。不仅有中文，还有外文。</span><br><span class="line">网站无需注册，通过文献传递服务，即通过邮箱接收全文。最快一两分钟，最慢三四个小时即可接收到全文。</span><br></pre></td></tr></table></figure></li><li><p>上海研发公共服务平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上海研发公共服务平台网址：http://www.sgst.cn/。</span><br><span class="line">注册后可直接下载，论文、文献数量直接匹配知网和万方数据。</span><br><span class="line">下载速度较快，但有数量限制，可注册多个用户名。</span><br></pre></td></tr></table></figure></li><li><p>库问搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">库问搜索网址：http://www.koovin.com/。</span><br><span class="line">库问搜索提供千万级文献免费下载。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面记录经过验证可用的中文文献下载方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;idata中国知网 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>C++跨平台移植开发思考</title>
    <link href="https://huangwang.github.io/2018/07/16/CPP%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%A7%BB%E6%A4%8D%E5%BC%80%E5%8F%91%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/07/16/CPP跨平台移植开发思考/</id>
    <published>2018-07-16T03:13:31.000Z</published>
    <updated>2018-09-09T13:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要将一份C++代码通过Emscripten编译成asm.js，结果失败，因为这份C++代码使用MFC GUI库，导致Emscripten编译失败。这引起了我对C++跨平台移植的思考。</p><p>C++代码理论上能实现源代码级别的跨平台移植，即同一份代码可以不加修改的在不同的平台上编译运行且表现一致。这要求编写的C++代码符合跨平台移植的规范，如链接[1]所指出的那样，它给出了很多实现C++代码跨平台移植的编码细节，在编写跨平台的底层库方面十分有用。但在编写跨平台的C++应用方面，应使用经过长期实践证明能用的跨平台库来帮助编码，建立在巨人的肩膀上，使跨平台C++代码编写工作变得简单容易。下面给出一些常用的跨平台C++库供参考：</p><ol><li>语言及基础库</li></ol><ul><li>标准 C++：标准 c++ 是98年制定的，现在主流的 c++ 编译器都能够比较好的支持了。这里建议使用VC7.1和GCC4.0及以上版本。在Linux中，glibc是标准C的实现，libstdc++则是标准C++的实现。在Windows中，VS2015之前MSVCRT.DLL是标准C/C++的实现，之后UCRTBASE.DLLz则是标准C/C++的实现。</li><li>boost：boost 则是 C++ 标准委员会的一群人弄起来的一个 C++ 库集合，其中不少库以经进入 C++ TR1，可以说是准标准。使用这里的库我们有着充分的理由。象字符串的操作可以用 boost 的 String algorithms 库，格式化操作可以用 boost::format，正则式可用 boost::regex 等等。</li></ul><ol start="2"><li>网络</li></ol><ul><li>ACE（Adaptive Communication Environment）：ACE是一个以C++的Template技术所做成的开放源代码的可跨平台的网络应用程序的程式库套件。ACE自适配通信环境（ADAPTIVE Communication Environment）是可以自由使用、开放源码的面向对象（OO）框架（Framework），在其中实现了许多用于并发通信软件的核心模式。ACE提供了一组丰富的可复用C++ Wrapper Facade（包装外观）和框架组件，可跨越多种平台完成通用的通信软件任务，其中包括：事件多路分离和事件处理器分派、信号处理、服务初始化、进程间通信、共享内存管理、消息路由、分布式服务动态（重）配置、并发执行和同步，等等。</li><li>Boost.Asio：用于网络和底层I/O编程的跨平台的C++库</li></ul><ol start="3"><li>数据库</li></ol><ul><li>OTL (Oracle, Odbc and DB2-CLI Template Library)：<br>不但支持跨平台，还跨数据库。OTL支持以下面的数据库 : OTL Oracle ,SQL Server, Access, MySQL。还有其它的库如DTL，这个库不但支持ODBC，它还支持数据库的原生接口，可以有更佳的性能。</li></ul><ol start="4"><li>GUI</li></ol><ul><li>QT：QT是双认证的，当你的程序免费时它就免费，你的程序打算卖钱时，它也要，而且要价很高。所以，如果有版权，成本上的考虑的话，则可以考虑wxWidgets。</li><li>wxWidgets：wxWidgets（/wɪksˈwɪdʒɪts/，原名wxWindows）是一个开放源代码且跨平台的对象工具集（widget toolkit），其库可用来创建基本的图形用户界面（GUI）。wxWidgets由Julian Smart于1992年首先开发。</li></ul><ol start="5"><li>科学计算</li></ol><ul><li>GSL：GNU科学库。</li></ul><ol start="6"><li>游戏开发</li></ol><ul><li>Cocos2d-x：一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。</li></ul><ol start="7"><li>视频</li></ol><ul><li>FFmpeg：一个完整的，跨平台的解决方案，用于记录，转换视频和音频流</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://hongbomin.com/2017/03/08/cpp-cross-platform-guide/" target="_blank" rel="noopener">http://hongbomin.com/2017/03/08/cpp-cross-platform-guide/</a>. by 洪柏敏.</li><li><a href="http://developer.51cto.com/art/201002/181960.htm" target="_blank" rel="noopener">http://developer.51cto.com/art/201002/181960.htm</a>. by 博客园.</li><li><a href="https://zh.wikipedia.org/wiki/ACE自适配通信环境" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/ACE自适配通信环境</a>. by wikipedia.</li><li><a href="https://blog.csdn.net/weiwangchao_/article/details/51130863" target="_blank" rel="noopener">https://blog.csdn.net/weiwangchao_/article/details/51130863</a>. by 工程师WWW.</li><li><a href="https://zhuanlan.zhihu.com/p/25443704" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25443704</a>, by zhihu.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近需要将一份C++代码通过Emscripten编译成asm.js，结果失败，因为这份C++代码使用MFC GUI库，导致Emscripten编译失败。这引起了我对C++跨平台移植的思考。&lt;/p&gt;
&lt;p&gt;C++代码理论上能实现源代码级别的跨平台移植，即同一份代码可以不加修改
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Emscripten教程</title>
    <link href="https://huangwang.github.io/2018/07/15/Emscripten%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2018/07/15/Emscripten教程/</id>
    <published>2018-07-15T09:00:04.000Z</published>
    <updated>2018-09-09T13:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Emscripten是一种基于LLVM的编译器，理论上能够将任何能够生成LLVM位码的代码编译成javascript的严格子集asm.js，实际上主要用于将C/C++代码编译成asm.js。本文主要介绍Emscripten的安装过程。</p><h1 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h1><p>从源码编译安装十分麻烦，推荐安装核心的Emscripten SDK。以Windows为例，先使用如下命令下载emsdk。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Get the emsdk repo</span><br><span class="line">git clone https://github.com/juj/emsdk.git</span><br><span class="line"></span><br><span class="line"># Enter that directory</span><br><span class="line">cd emsdk</span><br></pre></td></tr></table></figure></p><p>再使用如下命令安装配置Emscripten。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Fetch the latest registry of available tools.</span><br><span class="line">.\emsdk.bat update</span><br><span class="line"></span><br><span class="line"># Download and install the latest SDK tools. Need install Python first. </span><br><span class="line">.\emsdk.bat install latest</span><br><span class="line"></span><br><span class="line"># Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes ~/.emscripten file)</span><br><span class="line">.\emsdk.bat activate latest</span><br><span class="line"></span><br><span class="line"># Activate PATH and other environment variables in the current terminal</span><br><span class="line">.\emsdk_env.bat</span><br></pre></td></tr></table></figure></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>使用如下命令验证Emscripten是否安装配置正确。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Enter that directory</span><br><span class="line">cd emsdk</span><br><span class="line"></span><br><span class="line"># Activate PATH and other environment variables in the current terminal</span><br><span class="line">.\emsdk_env.bat</span><br><span class="line"></span><br><span class="line"># Verifying Emscripten</span><br><span class="line">emcc.bat -v</span><br></pre></td></tr></table></figure></p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>如果验证通过，即可使用Emscripten编译C/C++代码到asm.js。</p><p>创建名为helloWorld.cpp的文件，其内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  printf(&quot;hello, world!\n&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用如下命令编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc.bat helloWorld.cpp</span><br></pre></td></tr></table></figure></p><p>编译后将生成a.out.js和a.out.wasm两个文件。后者是包含编译后代码的WebAssembly文件，前者是用于加载和执行后者的Javascipt文件。使用如下命令测试编译后生成的代码，将输出“hello,world!”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node a.out.js</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html" target="_blank" rel="noopener">http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html</a>. by kripken.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Emscripten是一种基于LLVM的编译器，理论上能够将任何能够生成LLVM位码的代码编译成javascript的严格子集asm.js，实际上主要用于将C/C++代码编译成asm.js。本文主要介绍Emscripten的安装过程。&lt;/p&gt;
&lt;h1 id=&quot;下载和安装&quot;&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>浏览器中运行3D游戏的思考</title>
    <link href="https://huangwang.github.io/2018/07/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C3D%E6%B8%B8%E6%88%8F%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/07/10/浏览器中运行3D游戏的思考/</id>
    <published>2018-07-10T13:02:56.000Z</published>
    <updated>2018-07-15T08:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Web技术突飞猛进，几乎无所不能，无所不在。然而在3D游戏领域，web技术乏善可陈，性能瓶颈问题制约其发展。但是开发者们没有放弃这个梦想，不断努力，孜孜不倦地改进和增强浏览器中运行3D游戏性能的方法和技术，目前已能看到一丝曙光。</p><p>对C/S架构的3D游戏而言，渲染和计算通常都在客户端，服务器端负责用户状态的管理和分发。同样对B/S架构的运行在浏览器中的3D游戏，所有的渲染和计算也应该在浏览器端。如果渲染和计算放在服务器端，将导致可怕的延迟，并严重损害3D游戏的可伸缩性。</p><p>当前很多3D游戏使用C/C++语言编写，如果能够将C/C++语言编译成JavaScript语言，可大大促进Web 3D游戏的开发。而编译器项目Emscripten正是一个这样的工具。它能将C/C++代码编译成一种叫做asm.js的Javascript变体。需要指出的是，Emscripten的输入，即C/C++代码最好是开放源代码的，因为Emscripten不支持闭源代码的编译。例如Emscripten不支持mfc程序的转换，因为mfc是闭源的<sup>[4]</sup>。</p><p>asm.js是一个JavaScript的严格子集，它只提供32位带符号整数和64位带符号浮点数两种数据类型，其他Javascript类型如字符串、布尔值等以数值形式存在，保存在内存中，通过TypedArray调用。另外asm.js没有垃圾回收机制，所有内存操作都由程序员自己控制。asm.js是优化后的JavaScript，它在浏览器中的运行速度大约是原生代码的一倍左右<sup>[1]</sup>。</p><p>asm.js虽然比原生javascript运行速度快了一倍左右，但是相比C/C++代码，运行速度还是有差距。幸运的是出现了名为WebAssembly的技术。WebAssembly或称wasm是一个实验性的低级编程语言，应用于浏览器内的客户端<sup>[5]</sup>。WebAssembly是便携式的抽象语法树，被设计来提供比JavaScript更快速的编译及运行。WebAssembly将让开发者能运用自己熟悉的编程语言（最初以C/C++作为实现目标）编译，再藉虚拟机引擎在浏览器内运行。WebAssembly的开发团队分别来自Mozilla、Google、Microsoft、Apple，代表着四大网络浏览器Firefox、Chrome、Microsoft Edge、Safari。2017年11月，所有以上四个浏览器都开始实验性的支持WebAssembly。目前，最新版本的Emscripten已支持将C/C++代码编译成wasm。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a>. by 阮一峰.</li><li><a href="https://www.cnblogs.com/slly/p/6639173.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6639173.html</a>. by 李某龙.</li><li><a href="http://kripken.github.io/emscripten-site/" target="_blank" rel="noopener">http://kripken.github.io/emscripten-site/</a>. by emscripten.</li><li><a href="https://github.com/kripken/emscripten/issues/941" target="_blank" rel="noopener">https://github.com/kripken/emscripten/issues/941</a>. by emscripten.</li><li><a href="https://zh.wikipedia.org/wiki/WebAssembly" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/WebAssembly</a>. by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Web技术突飞猛进，几乎无所不能，无所不在。然而在3D游戏领域，web技术乏善可陈，性能瓶颈问题制约其发展。但是开发者们没有放弃这个梦想，不断努力，孜孜不倦地改进和增强浏览器中运行3D游戏性能的方法和技术，目前已能看到一丝曙光。&lt;/p&gt;
&lt;p&gt;对C/S架构的3D游戏而言，渲
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D游戏" scheme="https://huangwang.github.io/tags/3D%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Cookie,Session和Token会话知识整理</title>
    <link href="https://huangwang.github.io/2018/07/08/Cookie-Session%E5%92%8CToken%E4%BC%9A%E8%AF%9D%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://huangwang.github.io/2018/07/08/Cookie-Session和Token会话知识整理/</id>
    <published>2018-07-08T02:50:44.000Z</published>
    <updated>2018-09-09T13:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP是一种无状态的协议，然而当服务器端需要判断用户能否访问某些资源，记录用户的购物车内容等场景时，就需要一种机制维护会话状态，这时候Cookie、Session和Token就派上了用场。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>Cookie技术最早用于解决HTTP的会话问题， 它是 http 协议的一部分，它的处理分为如下几步：</p><ul><li>服务器向客户端发送 cookie。<ul><li>通常使用 HTTP 协议规定的 set-cookie 头操作。</li><li>规范规定 cookie 的格式为 name = value 格式，且必须包含这部分。</li></ul></li><li>浏览器将 cookie 保存。</li><li>每次请求浏览器都会将 cookie 发向服务器。</li></ul><h2 id="可选的Cookie参数"><a href="#可选的Cookie参数" class="headerlink" title="可选的Cookie参数"></a>可选的Cookie参数</h2><p>其他可选的 cookie 参数会影响将 cookie 发送给服务器端的过程，主要有以下几种：</p><ul><li>path：表示 cookie 影响到的路径，匹配该路径才发送这个 cookie。</li><li>expires 和 maxAge：告诉浏览器这个 cookie 什么时候过期，expires 是 UTC 格式时间，maxAge 是 cookie 多久后过期的相对时间。当不设置这两个选项时，会产生 session cookie，session cookie 是 transient 的，当用户关闭浏览器时，就被清除。一般用来保存 session 的 session_id。</li><li>secure：当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。</li><li>httpOnly：浏览器不允许脚本操作 document.cookie 去更改 cookie。一般情况下都应该设置这个为 true，这样可以避免被 xss 攻击拿到 cookie。</li></ul><h2 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h2><p>当给Cookie设置expires和maxAge后，在未到期前，浏览器端的Cookie不会因为浏览器的关闭而消失。该特性常用于自动登录，记录用户浏览信息。例如很多购物网站常用该特性记录用户的喜好和购买的物品。</p><h2 id="Cookie安全隐患"><a href="#Cookie安全隐患" class="headerlink" title="Cookie安全隐患"></a>Cookie安全隐患</h2><p>Cookie提供了一种手段使得HTTP请求可以附加当前状态， 大多数网站就是靠Cookie来标识用户的登录状态的，例如：</p><ol><li>用户提交用户名和密码的表单，这通常是一个POST HTTP请求。</li><li>服务器验证用户名与密码，如果合法则返回200（OK）并设置Set-Cookie为authed=true。</li><li>浏览器存储该Cookie。</li><li>浏览器发送请求时，设置Cookie字段为authed=true。</li><li>服务器收到第二次请求，从Cookie字段得知该用户已经登录。 按照已登录用户的权限来处理此次请求。</li></ol><p>上述认证流程存在安全隐患，因为Cookie是可以被篡改的。如果使用一些HTTP客户端软件，设置Cookie字段为authed=true并发送该HTTP请求，服务器就会被欺骗。</p><h2 id="Cookie防篡改机制"><a href="#Cookie防篡改机制" class="headerlink" title="Cookie防篡改机制"></a>Cookie防篡改机制</h2><p>服务器为每个Cookie项生成签名，可有效地防止Cookie被篡改。因为用户篡改Cookie后无法生成对应的签名， 服务器便可得知用户对Cookie进行了篡改。一个简单的校验过程可能是这样的：</p><ol><li>在服务器中配置一个不为人知的字符串（我们叫它Secret），比如：x$sfz32。</li><li>当服务器需要设置Cookie时（比如authed=false），不仅设置authed的值为false， 在值的后面进一步设置一个签名，最终设置的Cookie是authed=false|6hTiBl7lVpd1P。</li><li>签名6hTiBl7lVpd1P是这样生成的：Hash(‘x$sfz32’+’false’)。 要设置的值与Secret相加再取哈希。</li><li>用户收到HTTP响应并发现头字段Set-Cookie: authed=false|6hTiBl7lVpd1P。</li><li>用户在发送HTTP请求时，篡改了authed值，设置头字段Cookie: authed=true|???。 因为用户不知道Secret，无法生成签名，只能随便填一个。</li><li>服务器收到HTTP请求，发现Cookie: authed=true|???。服务器开始进行校验： Hash(‘true’+’x$sfz32’)，便会发现用户提供的签名不正确。</li></ol><p>通过给Cookie添加签名，使得服务器得以知道Cookie被篡改。然而故事并未结束。</p><p>因为Cookie是明文传输的， 只要服务器设置过一次authed=true|xxxx我不就知道true的签名是xxxx了么， 以后就可以用这个签名来欺骗服务器了。因此Cookie中最好不要放敏感数据。 一般来讲Cookie中只会放一个Session Id，而Session存储在服务器端。</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>为了解决Cookie的安全隐患，Session机制应运而生。session机制是一种服务器端的机制，它存储在服务器端的，避免了在客户端Cookie中存储敏感数据。Session可以存储在HTTP服务器的内存中，也可以存在内存数据库（如redis）中， 对于重量级的应用甚至可以存储在数据库中。 </p><p>客户端对服务端请求时,服务端会检查请求中是否包含一个session标识( 称为session id ).</p><ul><li>如果没有,那么服务端就生成一个随机的session以及和它匹配的session id,并将session id返回给客户端.</li><li>如果有,那么服务器就在存储中根据session id 查找到对应的session.</li></ul><h2 id="基于Session的登录流程"><a href="#基于Session的登录流程" class="headerlink" title="基于Session的登录流程"></a>基于Session的登录流程</h2><p>一个简单的使用Session机制的登录流程可能是这样的：</p><ol><li>用户提交包含用户名和密码的表单，发送HTTP请求。</li><li>服务器验证用户发来的用户名密码。</li><li>如果正确则把当前用户名（通常是用户对象）存储到redis中，并生成它在redis中的ID。这个ID称为Session ID，通过Session ID可以从Redis中取出对应的用户对象， 敏感数据（比如authed=true）都存储在这个用户对象中。</li><li>设置Cookie为sessionId=xxxxxx|checksum并发送HTTP响应， 仍然为每一项Cookie都设置签名。</li><li>用户收到HTTP响应后，便看不到任何敏感数据了。在此后的请求中发送该Cookie给服务器。</li><li>服务器收到此后的HTTP请求后，发现Cookie中有SessionID，进行放篡改验证。</li><li>如果通过了验证，根据该ID从Redis中取出对应的用户对象， 查看该对象的状态并继续执行业务逻辑。</li></ol><h2 id="Session安全隐患"><a href="#Session安全隐患" class="headerlink" title="Session安全隐患"></a>Session安全隐患</h2><p>Session ID作为Cookie存储在浏览器端，因此存在被劫持的风险，尤其是开发者没有正确的关闭会话。用户关闭会话时，应删除传递 Session ID 的 Cookie，同时撤销服务器端的Session内容。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 普通用户登出 */</span><br><span class="line">router.post(&apos;/signout&apos;, function(req, res, next) &#123;</span><br><span class="line">    if (_.isEmpty(req.body) === false) &#123;</span><br><span class="line">        req.session.account = null; // 删除session</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            message: &apos;登出成功！&apos;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.send(406, &#123; message: &apos;The params is not correct!&apos; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p>Token是用户的验证方式,最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。</p><h2 id="基于Token的身份验证流程"><a href="#基于Token的身份验证流程" class="headerlink" title="基于Token的身份验证流程"></a>基于Token的身份验证流程</h2><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li></ol><h2 id="基于Token方法的优势"><a href="#基于Token方法的优势" class="headerlink" title="基于Token方法的优势"></a>基于Token方法的优势</h2><ul><li>JWT 方法允许我们进行AJAX调用任何服务器或域。由于HTTP头是用来传输用户信息的。</li><li>没必要在服务器存储一个单独的session。JWT本身传达全部的信息。</li><li>服务器端减少到只是一个API和可以通过CDN服务的静态资源（HTML，CSS，JS)。</li><li>认证系统是手机兼容的，任何设备上可以生成令牌。</li><li>由于已经消除了cookie的需要，也不再需要保护跨站请求。</li><li>API密钥提供非此即彼的解决方案，然而JWT提供更颗粒度的控制，它可以用于任何调试目的的检查。</li><li>API密钥依赖于中央存储和服务。JWT可以自发行或者外部服务在允许的范围和期限发布它。</li></ul><h2 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h2><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p><h1 id="Cookie、Session和Token对比"><a href="#Cookie、Session和Token对比" class="headerlink" title="Cookie、Session和Token对比"></a>Cookie、Session和Token对比</h1><h2 id="cookie与session的区别"><a href="#cookie与session的区别" class="headerlink" title="cookie与session的区别"></a>cookie与session的区别</h2><ol><li>cookie数据存放在客户端上，session数据放在服务器上。</li><li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗。考虑到安全应当使用session。</li><li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到减轻服务器性能方面，应当使用COOKIE。</li></ol><h2 id="session与token的区别"><a href="#session与token的区别" class="headerlink" title="session与token的区别"></a>session与token的区别</h2><p>作为身份认证token安全性比session好，因为每个请求都有签名还能防止监听以及重放攻击。</p><p>Session 是一种HTTP存储机制，目的是为无状态的HTTP提供的持久机制。Session 认证只是简单的把User 信息存储到Session 里，因为SID 的不可预测性，暂且认为是安全的。这是一种认证手段。 但是如果有了某个User的SID,就相当于拥有该User的全部权利.SID不应该共享给其他网站或第三方。</p><p>Token, 如果指的是OAuth Token 或类似的机制的话，提供的是 认证 和 授权，认证是针对用户，授权是针对App。其目的是让某App有权利访问某用户的信息。这里的Token是唯一的。不可以转移到其它App上，也不可以转到其它用户上。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html</a>, by 极客学院.</li><li><a href="https://harttle.land/2015/08/10/cookie-session.html" target="_blank" rel="noopener">https://harttle.land/2015/08/10/cookie-session.html</a>. by Harttle Land.</li><li><a href="https://python.freelycode.com/contribution/detail/84" target="_blank" rel="noopener">https://python.freelycode.com/contribution/detail/84</a>. by Python部落.</li><li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">https://www.jianshu.com/p/576dbf44b2ae</a>, by Dearmadman</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP是一种无状态的协议，然而当服务器端需要判断用户能否访问某些资源，记录用户的购物车内容等场景时，就需要一种机制维护会话状态，这时候Cookie、Session和Token就派上了用场。&lt;/p&gt;
&lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; cla
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>兼容前后端多种JS模块规范的代码</title>
    <link href="https://huangwang.github.io/2018/07/02/%E5%85%BC%E5%AE%B9%E5%89%8D%E5%90%8E%E7%AB%AF%E5%A4%9A%E7%A7%8DJS%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>https://huangwang.github.io/2018/07/02/兼容前后端多种JS模块规范的代码/</id>
    <published>2018-07-02T14:11:23.000Z</published>
    <updated>2018-07-05T01:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究如何在前后端调用同一份js代码。该问题本质是如何兼容前后端各类JS模块规范。上网一搜，已经有很多详细的解决方案和JS模块规范介绍，在这里简单记录一下。</p><h1 id="JS模块规范"><a href="#JS模块规范" class="headerlink" title="JS模块规范"></a>JS模块规范</h1><p>JS模块规范前端主要有AMD、CMD，后端主要有CommonJS。此外还有最新的ES2015模块规范。</p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD（异步模块定义，Asynchronous Module Definition）格式总体的目标是为现在的开发者提供一个可用的模块化 JavaScript 的解决方案。它诞生于 Dojo 在使用 XHR+eval 时的实践经验，其支持者希望未来的解决方案都可以免受由于过去方案的缺陷所带来的麻烦。</p><p>AMD风格模块定义通常包括：一个用来进行模块定义的 define 方法以及一个用来处理依赖项加载的 require 方法。define 根据如下的方法签名来定义具名或匿名的模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    module_id /*可选*/, </span><br><span class="line">    [dependencies] /*可选*/, </span><br><span class="line">    definition function /*用来初始化模块或对象的函数*/</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD(Common Module Definition)表示通用模块定义，该规范是国内发展出来的，由阿里的玉伯提出。就像AMD有个requireJS，CMD有个浏览器的实现SeaJS，SeaJS和requireJS一样，都是javascript的前端模块化解决方案。<br>CMD规范简单到只有一个API，即define函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line"></span><br><span class="line">  // The module code goes here</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>CMD 与 AMD 挺相近，二者区别如下： </p><ul><li>对于依赖的模块 CMD 是延迟执行，而 AMD 是提前执行（不过 RequireJS 从 2.0 开始，也改成可以延迟执行。 ）</li><li>CMD 推崇依赖就近，AMD 推崇依赖前置。</li><li>AMD 的 api 默认是一个当多个用，CMD 严格的区分推崇职责单一，其每个 API 都简单纯粹。例如：AMD 里 require 分全局的和局部的。CMD 里面没有全局的 require，提供 seajs.use() 来实现模块系统的加载启动。</li></ul><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommonJS是一个志愿性质的工作组，它致力于设计、规划并标准化 JavaScript API。至今为止他们已经尝试着认可了模块标准以及程序包标准。CommonJS 的模块提案为在服务器端声明模块指定了一个简单的 API。不像 AMD，它试图覆盖更宽泛的方面比如 IO、文件系统、promise 模式等等。CommonJS风格模块在nodejs中得到广泛的应用。</p><p>CommonJS风格模块是一段可重用的 JavaScript，它导出一系列特定的对象给依赖它的代码调用——通常来说这样的模块外围没有函数包裹（所以你在这里的例子中不会看到 define）。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// package/lib 是我们须要的一个依赖项</span><br><span class="line">var lib = require(&apos;package/lib&apos;);</span><br><span class="line"> </span><br><span class="line">// 我们的模块的一些行为</span><br><span class="line">function foo()&#123;</span><br><span class="line">    lib.log(&apos;hello world!&apos;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 把 foo 导出（暴露）给其它模块</span><br><span class="line">exports.foo = foo;</span><br></pre></td></tr></table></figure></p><h2 id="ES2015模块规范"><a href="#ES2015模块规范" class="headerlink" title="ES2015模块规范"></a>ES2015模块规范</h2><p>2015 年 6 月， ES2015（即 ECMAScript 6、ES6） 正式发布。ES2015 是该语言的一个显著更新，也是自 2009 年 ES5 标准确定后的第一个重大更新。</p><p>ES2015的模块规范如下：</p><ul><li>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。</li><li>export 命令用于规定模块的对外接口。</li><li>import 命令用于输入其他模块提供的功能。</li><li>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</li></ul><p>ES2015模块示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//circle.js</span><br><span class="line">//圆面积计算</span><br><span class="line">export function area(radius) &#123;</span><br><span class="line">  return Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//main.js</span><br><span class="line">import &#123;area&#125; from &apos;./hangge&apos;;</span><br><span class="line">console.log(&apos;圆面积：&apos; + area(10));</span><br></pre></td></tr></table></figure></p><h1 id="兼容多种模块规范"><a href="#兼容多种模块规范" class="headerlink" title="兼容多种模块规范"></a>兼容多种模块规范</h1><p>需要指出的是下面兼容多种JS模块规范的代码并不支持最新的ES2015模块规范。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">;(function (name, definition) &#123;</span><br><span class="line">  // 检测上下文环境是否为AMD或CMD</span><br><span class="line">  var hasDefine = typeof define === &apos;function&apos;,</span><br><span class="line">    // 检查上下文环境是否为Node</span><br><span class="line">    hasExports = typeof module !== &apos;undefined&apos; &amp;&amp; module.exports;</span><br><span class="line"></span><br><span class="line">  if (hasDefine) &#123;</span><br><span class="line">    // AMD环境或CMD环境</span><br><span class="line">    define(definition);</span><br><span class="line">  &#125; else if (hasExports) &#123;</span><br><span class="line">    // 定义为普通Node模块</span><br><span class="line">    module.exports = definition();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 将模块的执行结果挂在window变量中，在浏览器中this指向window对象</span><br><span class="line">    this[name] = definition();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class="line">  var hello = function () &#123;&#125;;</span><br><span class="line">  return hello;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://i.jakeyu.top/2017/09/14/兼容前后端共用模块代码/" target="_blank" rel="noopener">https://i.jakeyu.top/2017/09/14/兼容前后端共用模块代码/</a>. by Jake.</li><li><a href="https://segmentfault.com/a/1190000011633813" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011633813</a>. by CodeMan.</li><li><a href="http://justineo.github.io/singles/writing-modular-js/" target="_blank" rel="noopener">http://justineo.github.io/singles/writing-modular-js/</a>. by ADDY OSMANI.</li><li><a href="http://www.hangge.com/blog/cache/detail_1686.html" target="_blank" rel="noopener">http://www.hangge.com/blog/cache/detail_1686.html</a>. by hangge.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究如何在前后端调用同一份js代码。该问题本质是如何兼容前后端各类JS模块规范。上网一搜，已经有很多详细的解决方案和JS模块规范介绍，在这里简单记录一下。&lt;/p&gt;
&lt;h1 id=&quot;JS模块规范&quot;&gt;&lt;a href=&quot;#JS模块规范&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>sequelize-cli使用经验总结</title>
    <link href="https://huangwang.github.io/2018/06/22/sequelize-cli%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://huangwang.github.io/2018/06/22/sequelize-cli使用经验总结/</id>
    <published>2018-06-22T14:12:55.000Z</published>
    <updated>2018-06-23T02:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能<sup>[2]</sup>. 下面主要介绍如何使用sequelize-cli工具快速构建nodejs的数据访问层。</p><h1 id="基于express创建nodejs-web应用"><a href="#基于express创建nodejs-web应用" class="headerlink" title="基于express创建nodejs web应用"></a>基于express创建nodejs web应用</h1><p>基于express建立nodejs的web应用，在此基础上再使用sequlize建立数据访问层和数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br><span class="line">express</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><h1 id="基于sequelize创建数据访问层和数据库"><a href="#基于sequelize创建数据访问层和数据库" class="headerlink" title="基于sequelize创建数据访问层和数据库"></a>基于sequelize创建数据访问层和数据库</h1><h2 id="安装sequlize"><a href="#安装sequlize" class="headerlink" title="安装sequlize"></a>安装sequlize</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save sequelize</span><br><span class="line">npm install --save mysql2</span><br></pre></td></tr></table></figure><h2 id="安装sequelize-cli"><a href="#安装sequelize-cli" class="headerlink" title="安装sequelize-cli"></a>安装sequelize-cli</h2><p>首先应安装sequelize-cli工具，可以选择全局安装，也可以选择本地安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save sequelize-cli</span><br><span class="line">npm install -g sequelize-cli</span><br></pre></td></tr></table></figure></p><h2 id="建立初始的ORM引导框架"><a href="#建立初始的ORM引导框架" class="headerlink" title="建立初始的ORM引导框架"></a>建立初始的ORM引导框架</h2><p>使用如下命令在Nodejs Web应用中建立初始的数据访问层。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir db</span><br><span class="line">cd db</span><br><span class="line">../node_modules/.bin/sequelize init</span><br></pre></td></tr></table></figure></p><p>这将创建以下文件夹:</p><ul><li>config, 包含配置文件，它告诉CLI如何连接数据库</li><li>models,包含您的项目的所有模型</li><li>migrations, 包含所有迁移文件</li><li>seeders, 包含所有种子文件</li></ul><h2 id="修改配置文件以连接到数据库管理系统，并创建数据库"><a href="#修改配置文件以连接到数据库管理系统，并创建数据库" class="headerlink" title="修改配置文件以连接到数据库管理系统，并创建数据库"></a>修改配置文件以连接到数据库管理系统，并创建数据库</h2><p>在建立模型之前，应先修改config/config.json，以告诉 CLI 如何连接到数据库。config/config.json内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;development&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;database_development&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;pool&quot;:&#123;</span><br><span class="line">        &quot;max&quot;: 5,</span><br><span class="line">        &quot;min&quot;: 0,</span><br><span class="line">        &quot;idle&quot;: 10000</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timezone&quot;: &quot;+08:00&quot;,</span><br><span class="line">    &quot;define&quot;:&#123;</span><br><span class="line">      &quot;charset&quot;: &quot;utf8&quot;,</span><br><span class="line">      &quot;dialectOptions&quot;:&#123;</span><br><span class="line">          &quot;collate&quot;: &quot;utf8_general_ci&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;test&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;database_test&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;production&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;database_test&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;pool&quot;:&#123;</span><br><span class="line">        &quot;max&quot;: 5,</span><br><span class="line">        &quot;min&quot;: 0,</span><br><span class="line">        &quot;idle&quot;: 10000</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timezone&quot;: &quot;+08:00&quot;,</span><br><span class="line">    &quot;define&quot;:&#123;</span><br><span class="line">      &quot;charset&quot;: &quot;utf8&quot;,</span><br><span class="line">      &quot;dialectOptions&quot;:&#123;</span><br><span class="line">          &quot;collate&quot;: &quot;utf8_general_ci&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述配置修改了数据库的字符集，使之能支持中文。当然在创建数据库之前，应配置mysql数据库管理系，使其支持utf8字符集。可执行如下命令查看其支持的字符集，如果其不支持uft字符集，请按照参考链接[3]进行修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%char%&apos;;</span><br><span class="line">+--------------------------+---------------------------------------------------------+</span><br><span class="line">| Variable_name            | Value                                                   |</span><br><span class="line">+--------------------------+---------------------------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                                    |</span><br><span class="line">| character_set_connection | utf8                                                    |</span><br><span class="line">| character_set_database   | utf8                                                    |</span><br><span class="line">| character_set_filesystem | binary                                                  |</span><br><span class="line">| character_set_results    | utf8                                                    |</span><br><span class="line">| character_set_server     | utf8                                                    |</span><br><span class="line">| character_set_system     | utf8                                                    |</span><br><span class="line">| character_sets_dir       | C:\Program Files\MySQL\MySQL Server 5.5\share\charsets\ |</span><br><span class="line">+--------------------------+---------------------------------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>使用如下命令创建数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../node_modules/.bin/sequelize db:create</span><br></pre></td></tr></table></figure></p><h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>我们将使用 model:generate 命令。 此命令需要两个选项：</p><ul><li>name, 模型的名称</li><li>attributes, 模型的属性列表</li></ul><p>创建一个名叫 User 的模型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../node_modules/.bin/sequelize model:generate --name User --attributes firstName:string,lastName:string,email:string</span><br></pre></td></tr></table></figure></p><p>这将发生以下事情:</p><ul><li>在 models 文件夹中创建了一个 user 模型文件</li><li>在 migrations 文件夹中创建了一个名字像 XXXXXXXXXXXXXX-create-user.js 的迁移文件</li></ul><p><b>注意:</b> _Sequelize 将只使用模型文件，它是表描述。另一边，迁移文件是该模型的更改，或更具体的是说 CLI 所使用的表。 处理迁移，如提交或日志，以进行数据库的某些更改。</p><p>再创建一个名为Role的模型，它跟User是一对多的关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../node_modules/.bin/sequelize model:generate --name Role --attributes roleName:string</span><br></pre></td></tr></table></figure></p><h2 id="定义关系"><a href="#定义关系" class="headerlink" title="定义关系"></a>定义关系</h2><p>Role和User是一对多的关系，因此需要修改它们的模型定义。<br>修改migrations/20180622153726-create-role.js如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">module.exports = (sequelize, DataTypes) =&gt; &#123;</span><br><span class="line">  var Role = sequelize.define(&apos;Role&apos;, &#123;</span><br><span class="line">    roleName: DataTypes.STRING</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  Role.associate = function(models) &#123;</span><br><span class="line">    // associations can be defined here</span><br><span class="line">    Role.hasMany(models.User)</span><br><span class="line">  &#125;;</span><br><span class="line">  return Role;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>修改migrations/20180622153152-create-user.js如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">module.exports = (sequelize, DataTypes) =&gt; &#123;</span><br><span class="line">  var User = sequelize.define(&apos;User&apos;, &#123;</span><br><span class="line">    firstName: DataTypes.STRING,</span><br><span class="line">    lastName: DataTypes.STRING,</span><br><span class="line">    email: DataTypes.STRING</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  User.associate = function(models) &#123;</span><br><span class="line">    // associations can be defined here</span><br><span class="line">    User.belongsTo(models.Role, &#123;</span><br><span class="line">            onDelete: &quot;NULL&quot;,</span><br><span class="line">            foreignKey: &#123;</span><br><span class="line">                allowNull: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  return User;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="修改和运行迁移"><a href="#修改和运行迁移" class="headerlink" title="修改和运行迁移"></a>修改和运行迁移</h2><p>Role和User是一对多的关系，因此需要修改User迁移文件的定义。<br>修改models/user.js如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  up: (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    return queryInterface.createTable(&apos;Users&apos;, &#123;</span><br><span class="line">      id: &#123;</span><br><span class="line">        allowNull: false,</span><br><span class="line">        autoIncrement: true,</span><br><span class="line">        primaryKey: true,</span><br><span class="line">        type: Sequelize.INTEGER</span><br><span class="line">      &#125;,</span><br><span class="line">      roleId: &#123; // name of the key we&apos;re adding </span><br><span class="line">          type: Sequelize.INTEGER,</span><br><span class="line">          allowNull: false,</span><br><span class="line">          references: &#123;</span><br><span class="line">              model: &apos;Roles&apos;, // name of Target model</span><br><span class="line">              key: &apos;id&apos;, // key in Target model that we&apos;re referencing</span><br><span class="line">          &#125;,</span><br><span class="line">          onUpdate: &apos;CASCADE&apos;,</span><br><span class="line">          onDelete: &apos;CASCADE&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">      firstName: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">      &#125;,</span><br><span class="line">      lastName: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">      &#125;,</span><br><span class="line">      email: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">      &#125;,</span><br><span class="line">      createdAt: &#123;</span><br><span class="line">        allowNull: false,</span><br><span class="line">        type: Sequelize.DATE</span><br><span class="line">      &#125;,</span><br><span class="line">      updatedAt: &#123;</span><br><span class="line">        allowNull: false,</span><br><span class="line">        type: Sequelize.DATE</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  down: (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    return queryInterface.dropTable(&apos;Users&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><b>注意：</b>这里主要给User添加了外键字段，外键字段命名有规则：通常为小写的模型名加Id，即驼峰风格。例如这里加了roleId的外键字段。</p><p>直到目前为止，CLI没有将任何东西插入数据库。 刚刚为模型 User和Role创建了必需的模型和迁移文件。 现在要在数据库中实际创建该表，需要运行 db:migrate 命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../node_modules/.bin/sequelize db:migrate</span><br></pre></td></tr></table></figure></p><p>此命令将执行这些步骤：</p><ul><li>将在数据库中确保一个名为 SequelizeMeta 的表。 此表用于记录在当前数据库上运行的迁移</li><li>开始寻找尚未运行的任何迁移文件。 这可以通过检查 SequelizeMeta 表。 在这个例子中，它将运行创建的 XXXXXXXXXXXXXX-create-role.js和XXXXXXXXXXXXXX-create-user.js 迁移。</li><li>创建一个名为 Roles 的表，其中包含其迁移文件中指定的所有列。</li><li>创建一个名为 Users 的表，其中包含其迁移文件中指定的所有列。</li></ul><h2 id="创建种子，生成测试数据"><a href="#创建种子，生成测试数据" class="headerlink" title="创建种子，生成测试数据"></a>创建种子，生成测试数据</h2><p>假设我们希望在默认情况下将一些数据插入到几个表中。 例如创建几个用户和角色：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">../node_modules/.bin/sequelize seed:generate --name demo-role</span><br><span class="line">../node_modules/.bin/sequelize seed:generate --name demo-user</span><br></pre></td></tr></table></figure></p><p>这个命令将会在 seeders 文件夹中创建两个种子文件。文件名看起来像是 XXXXXXXXXXXXXX-demo-role.js和XXXXXXXXXXXXXX-demo-user.js，它遵循相同的 up/down 语义，如迁移文件。</p><p>现在我们应该编辑这两个文件，将演示角色插入Role表,将演示用户插入User表。修改XXXXXXXXXXXXXX-demo-role.js如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  up: (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">      return queryInterface.bulkInsert(&apos;Roles&apos;, [&#123;</span><br><span class="line">        roleName: &apos;管理员&apos;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        roleName: &apos;普通用户&apos;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;], &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  down: (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">      return queryInterface.bulkDelete(&apos;Roles&apos;, null, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>修改XXXXXXXXXXXXXX-demo-user.js如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  up: (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">      return queryInterface.bulkInsert(&apos;Users&apos;, [&#123;</span><br><span class="line">        roleId:1,</span><br><span class="line">        firstName: &apos;John&apos;,</span><br><span class="line">        lastName: &apos;Doe&apos;,</span><br><span class="line">        email: &apos;demo@demo.com&apos;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        roleId:1,</span><br><span class="line">        firstName: &apos;Jack&apos;,</span><br><span class="line">        lastName: &apos;Smith&apos;,</span><br><span class="line">        email: &apos;jack@demo.com&apos;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;], &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  down: (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">      return queryInterface.bulkDelete(&apos;Users&apos;, null, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>种子文件修改后，即可使用如下命令将演示数据插入数据库中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../node_modules/.bin/sequelize db:seed:all</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://docs.sequelizejs.com/，by" target="_blank" rel="noopener">http://docs.sequelizejs.com/，by</a> sequelizejs</li><li><a href="https://github.com/demopark/sequelize-docs-Zh-CN，by" target="_blank" rel="noopener">https://github.com/demopark/sequelize-docs-Zh-CN，by</a> demopark</li><li><a href="https://www.jianshu.com/p/b85cc8a05e53" target="_blank" rel="noopener">https://www.jianshu.com/p/b85cc8a05e53</a>, by 最怕认真</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能&lt;sup&gt;[2]&lt;/sup&gt;. 下面主
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Visual_Studio_Community_2017离线安装</title>
    <link href="https://huangwang.github.io/2018/06/21/Visual-Studio-Community-2017%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
    <id>https://huangwang.github.io/2018/06/21/Visual-Studio-Community-2017离线安装/</id>
    <published>2018-06-21T01:54:01.000Z</published>
    <updated>2018-06-26T02:31:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Visual Studio 2017版本采用模块化安装方式，根据用户选择模块按需安装。这种方式在用户能够上网的情况下十分方便，但在离线情况下就无法使用。下面介绍在离线情况下如何打包安装Visual Studio community 2017的方法。</p><h1 id="下载VS2017社区版安装包获取程序"><a href="#下载VS2017社区版安装包获取程序" class="headerlink" title="下载VS2017社区版安装包获取程序"></a>下载VS2017社区版安装包获取程序</h1><p>到官网下载最新版本的vs_community_xxxxxx.exe的下载器。</p><h1 id="运行命令下载所需安装包"><a href="#运行命令下载所需安装包" class="headerlink" title="运行命令下载所需安装包"></a>运行命令下载所需安装包</h1><p>运行如下命令获取VS2017的工作负载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vs_community__208176120.1522073957.exe --layout e:\vs2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.CoreEditor --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended --includeOptional</span><br></pre></td></tr></table></figure></p><p>可从参考链接[2]中获取工作负载ID。如需更多语言包或者更多安装指令，请参考官方离线安装命令指南，即参考链接[3]。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.microsoft.com/en-us/visualstudio/install/create-an-offline-installation-of-visual-studio" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/visualstudio/install/create-an-offline-installation-of-visual-studio</a>, by microsoft</li><li><a href="https://docs.microsoft.com/zh-cn/visualstudio/install/workload-component-id-vs-community" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/visualstudio/install/workload-component-id-vs-community</a>, by microsoft</li><li><a href="https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio</a>, by microsoft</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Visual Studio 2017版本采用模块化安装方式，根据用户选择模块按需安装。这种方式在用户能够上网的情况下十分方便，但在离线情况下就无法使用。下面介绍在离线情况下如何打包安装Visual Studio community 2017的方法。&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Node_C++_Addon插件编写方法</title>
    <link href="https://huangwang.github.io/2018/06/20/Node-Addon%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/06/20/Node-Addon插件编写方法/</id>
    <published>2018-06-20T13:34:38.000Z</published>
    <updated>2018-06-20T14:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究在Nodejs中调用DLL，上网搜索发现主要有两种方法：</p><ul><li>使用Nodeffi调用C风格接口的DLL，但是无法调用C++风格导出类的DLL。</li><li>使用Nodejs C++ Addon 插件，该方法可直接与C++代码交互，理论上可以调用C++风格导出类的DLL。</li></ul><p>下面研究Nodejs Addon C++插件的编写方法。</p><h1 id="什么是Nodejs-C-Addon"><a href="#什么是Nodejs-C-Addon" class="headerlink" title="什么是Nodejs C++ Addon"></a>什么是Nodejs C++ Addon</h1><p>Node.js插件（Addons）是C/C++编写的动态链接对象，这些对象可以被Node.js的require()函数引用，并可以像普通的Node.js模块一样使用。Addons主要用于提供一个Node.js中运行的JavaScript和C/C++库之间的接口。</p><p>插件（Addons）是动态链接的共享对象，它提供了C/C++类库的调用能力。实现插件的方法比较复杂，涉及到以下元组件及API:</p><ul><li>V8：C++库，Node.js用于提供JavaScript执行环境。V8提供了对象创建、函数调用等执行机制，V8相关API包含在了v8.h头文件中（位于Node.js源码树的deps/v8/include/v8.h），也可以查看在线文档。</li><li>libuv：C库，实现了Node.js中的事件循环、工作线程及在不同平台中异步行为的相关功能。也可以做为是一个跨平台的抽象库，提供了简单的、类POSIX的对主要操作系统的常见系统任务功能，如：与文件系统、套接字、计时器、系统事件的交互等。libuv还提供了一个类pthreads的线程池抽象对象，可用于更复杂的、超越标准事件循环的异步插件的控制功能。</li><li>内部Node.js库：Node.js自身提供了一定义数量的C/C++API的插件可以使用 - 其中最重要的可能是node::ObjectWrap类</li><li>Node.js静态链接库：Node.js自身还包含了一部分静态链接库，如OpenSSL。这些位于Node.js源码树的deps/目录下，只有V8和OpenSSL提供了符号出口，可以供Node.js和基它插件所使用。详见Node.js依赖链接</li></ul><h1 id="Node-Addon插件编写方法"><a href="#Node-Addon插件编写方法" class="headerlink" title="Node Addon插件编写方法"></a>Node Addon插件编写方法</h1><p>Node Addon插件的编写需要解决两个关键问题：</p><ul><li>当数据流向 javaScript -&gt; C++时，如何将javascript类型数据包装成C++类型数据，供C++代码使用。</li><li>当数据流向 C++ -&gt; JavaScript时，如何将C++类型数据包装成JavaScript类型数据，供JavaScript代码使用。</li></ul><p>这两个关键问题的分析请参见淘宝前端团队成员发表的文章“Node.js 和 C++ 之间的类型转换<sup>[3]</sup>”。解决这两个关键问题后，Node Addon插件编写难度就不大了。</p><h1 id="Node-Addon插件调用C-导出类DLL方法测试"><a href="#Node-Addon插件调用C-导出类DLL方法测试" class="headerlink" title="Node Addon插件调用C++导出类DLL方法测试"></a>Node Addon插件调用C++导出类DLL方法测试</h1><p>现有一个采用成熟方法导出类接口的DLL<sup>[4]</sup>，如何在Node Addon插件中调用该DLL呢?下面nodejs官网Node Addon插件例子Factory of wrapped objects为例进行讲解。</p><p>Factory of wrapped objects例子在Addon插件中包装了一个MyObject类，现在就在MyObject类调用DLL导出类的接口方法。修改MyObject.h代码，增加DLL导出类接口方法，增加类接口成员变量IExport和DLL句柄变量hDll，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// myobject.h</span><br><span class="line">#ifndef MYOBJECT_H</span><br><span class="line">#define MYOBJECT_H</span><br><span class="line"></span><br><span class="line">#include &lt;node.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;node_object_wrap.h&gt;</span><br><span class="line">#include &quot;MatureApproach.h&quot;</span><br><span class="line"></span><br><span class="line">namespace demo &#123;</span><br><span class="line">typedef IExport*(*TYPE_fnCreateExportObj) (void);//定义函数指针  </span><br><span class="line">typedef void(*TYPE_fnDestroyExportObj) (IExport*);//定义函数指针  </span><br><span class="line"></span><br><span class="line">class MyObject : public node::ObjectWrap &#123;</span><br><span class="line"> public:</span><br><span class="line">  static void Init(v8::Isolate* isolate);</span><br><span class="line">  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line"></span><br><span class="line"> private:</span><br><span class="line">  explicit MyObject(double value = 0);</span><br><span class="line">  ~MyObject();</span><br><span class="line"></span><br><span class="line">  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static void Hi(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static void Test(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static v8::Persistent&lt;v8::Function&gt; constructor;</span><br><span class="line">  HMODULE hDll;</span><br><span class="line">  IExport* pExport;</span><br><span class="line">  double value_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  // namespace demo</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p><p>接下来将在MyObject类的构造函数中动态加载DLL，创建DLL导出类对象，在析构函数中析构DLL导出类对象，动态卸载DLL,在MyObject成员方法中调用DLL导出类方法，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">// myobject.cc</span><br><span class="line">#include &lt;node.h&gt;</span><br><span class="line">#include &quot;myobject.h&quot;</span><br><span class="line"></span><br><span class="line">namespace demo &#123;</span><br><span class="line"></span><br><span class="line">using v8::Context;</span><br><span class="line">using v8::Function;</span><br><span class="line">using v8::FunctionCallbackInfo;</span><br><span class="line">using v8::FunctionTemplate;</span><br><span class="line">using v8::Isolate;</span><br><span class="line">using v8::Local;</span><br><span class="line">using v8::Number;</span><br><span class="line">using v8::Object;</span><br><span class="line">using v8::Persistent;</span><br><span class="line">using v8::String;</span><br><span class="line">using v8::Value;</span><br><span class="line"></span><br><span class="line">Persistent&lt;Function&gt; MyObject::constructor;</span><br><span class="line"></span><br><span class="line">MyObject::MyObject(double value) : value_(value)&#123;</span><br><span class="line">MyObject::hDll = LoadLibrary(&quot;MatureApproach.dll&quot;); //加载动态链接库DllDemo.dll文件；</span><br><span class="line">  TYPE_fnCreateExportObj fnCreateExportObj = (TYPE_fnCreateExportObj)GetProcAddress(MyObject::hDll, &quot;CreateExportObj&quot;);</span><br><span class="line">  MyObject::pExport = fnCreateExportObj();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyObject::~MyObject() &#123;</span><br><span class="line">  TYPE_fnDestroyExportObj fnDestroyExportObj = (TYPE_fnDestroyExportObj)GetProcAddress(MyObject::hDll, &quot;DestroyExportObj&quot;);</span><br><span class="line">  fnDestroyExportObj(MyObject::pExport);</span><br><span class="line">  FreeLibrary(MyObject::hDll);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::Init(Isolate* isolate) &#123;</span><br><span class="line">  // Prepare constructor template</span><br><span class="line">  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);</span><br><span class="line">  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));</span><br><span class="line">  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(3);</span><br><span class="line"></span><br><span class="line">  // Prototype</span><br><span class="line">  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);</span><br><span class="line">  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;hi&quot;, Hi);</span><br><span class="line">  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;test&quot;, Test);</span><br><span class="line"></span><br><span class="line">  constructor.Reset(isolate, tpl-&gt;GetFunction());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate = args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  if (args.IsConstructCall()) &#123;</span><br><span class="line">    // Invoked as constructor: `new MyObject(...)`</span><br><span class="line">    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();</span><br><span class="line">    MyObject* obj = new MyObject(value);</span><br><span class="line">    obj-&gt;Wrap(args.This());</span><br><span class="line">    args.GetReturnValue().Set(args.This());</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // Invoked as plain function `MyObject(...)`, turn into construct call.</span><br><span class="line">    const int argc = 1;</span><br><span class="line">    Local&lt;Value&gt; argv[argc] = &#123; args[0] &#125;;</span><br><span class="line">    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);</span><br><span class="line">    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();</span><br><span class="line">    Local&lt;Object&gt; instance =</span><br><span class="line">        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();</span><br><span class="line">    args.GetReturnValue().Set(instance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate = args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  const unsigned argc = 1;</span><br><span class="line">  Local&lt;Value&gt; argv[argc] = &#123; args[0] &#125;;</span><br><span class="line">  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);</span><br><span class="line">  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();</span><br><span class="line">  Local&lt;Object&gt; instance =</span><br><span class="line">      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(instance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate = args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());</span><br><span class="line">  obj-&gt;value_ += 1;</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::Hi(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate = args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());</span><br><span class="line">  Local&lt;String&gt; str=v8::String::NewFromUtf8(isolate, obj-&gt;pExport-&gt;Hi().data());</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::Test(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate = args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());</span><br><span class="line">  Local&lt;String&gt; str=v8::String::NewFromUtf8(isolate, obj-&gt;pExport-&gt;Test().data());</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  // namespace demo</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://itbilu.com/nodejs/core/4y4-Nrd5G.html，by" target="_blank" rel="noopener">https://itbilu.com/nodejs/core/4y4-Nrd5G.html，by</a> IT笔录</li><li><a href="https://nodejs.org/dist/latest-v8.x/docs/api/addons.html，by" target="_blank" rel="noopener">https://nodejs.org/dist/latest-v8.x/docs/api/addons.html，by</a> nodejs</li><li><a href="http://taobaofed.org/blog/2016/09/20/type-casts-between-node-and-cpp/，by" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/09/20/type-casts-between-node-and-cpp/，by</a> 淘宝前端团队</li><li><a href="https://huangwang.github.io/2018/06/15/DLL导出类和函数/,by">https://huangwang.github.io/2018/06/15/DLL导出类和函数/,by</a> jackhuang</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究在Nodejs中调用DLL，上网搜索发现主要有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Nodeffi调用C风格接口的DLL，但是无法调用C++风格导出类的DLL。&lt;/li&gt;
&lt;li&gt;使用Nodejs C++ Addon 插件，该方法可直接与C++代码交互，理论上可
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Nodejs" scheme="https://huangwang.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>如何在Vistual_Studio中调试Node_Addon_C++插件</title>
    <link href="https://huangwang.github.io/2018/06/18/%E5%A6%82%E4%BD%95%E5%9C%A8Vistual-Studio%E4%B8%AD%E8%B0%83%E8%AF%95Node-Addon-C-%E6%8F%92%E4%BB%B6/"/>
    <id>https://huangwang.github.io/2018/06/18/如何在Vistual-Studio中调试Node-Addon-C-插件/</id>
    <published>2018-06-18T13:59:53.000Z</published>
    <updated>2018-10-11T13:05:38.845Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究如何在Vistual Studio 2017社区版中调试Node addon C++插件，遇到很多问题，花费了不少时间，为防止遗忘，将方法记录下来。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>安装VS2017社区版</li><li>安装python 2.7</li><li>安装Nodejs 8.11.3 LTS</li><li>下载Nodejs 8.11.3 LTS源码</li></ol><h1 id="安装配置环境"><a href="#安装配置环境" class="headerlink" title="安装配置环境"></a>安装配置环境</h1><ol><li><p>安装node-gyp和nan<br>node-gyp和nan用于编译生成node addon 插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-gyp</span><br><span class="line">npm install -g nan</span><br></pre></td></tr></table></figure></li><li><p>编译nodejs源码<br>在nodejs源码解压后文件中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcbuild.bat debug x64</span><br></pre></td></tr></table></figure></li><li><p>创建nodejs addon c++插件示例工程<br>使用如下命名生成调试用的vs工程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-gyp configure rebuild --nodedir=&quot;D:\project\cpp_project\node-v8.11.3&quot; --debug</span><br></pre></td></tr></table></figure></li><li><p>修改测试用的index.js,使其调用上一步骤生成的调试用的插件  </p><pre><code>//该js调用生成的插件var addon = require(&apos;./build/Debug/max&apos;);var y=addon.max(2,3);console.log(y);</code></pre></li><li><p>使用VS2017打开插件示例工程的build文件夹下node-gyp生成的解决方案。右键单击工程，在上下文菜单中点击属性，配置其调试命令和命令参数，如下图所示。</p><p align="center"><br> <img src="images/debug_config.jpg" width="50%" alt="工程调试配置"><br></p></li><li><p>设置断点进行调试</p></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/zcyzsy/article/details/72821755" target="_blank" rel="noopener">https://blog.csdn.net/zcyzsy/article/details/72821755</a>, by Zmyths.</li><li><a href="https://computer-vision-talks.com/how-to-debug-nodejs-addons-in-visual-studio/" target="_blank" rel="noopener">https://computer-vision-talks.com/how-to-debug-nodejs-addons-in-visual-studio/</a>. </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究如何在Vistual Studio 2017社区版中调试Node addon C++插件，遇到很多问题，花费了不少时间，为防止遗忘，将方法记录下来。&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
</feed>
