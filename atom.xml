<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2020-02-28T04:55:19.743Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows下LaTeX安装及使用</title>
    <link href="https://huangwang.github.io/2020/02/27/Windows%E4%B8%8BLaTeX%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://huangwang.github.io/2020/02/27/Windows下LaTeX安装及使用/</id>
    <published>2020-02-27T09:51:28.000Z</published>
    <updated>2020-02-28T04:55:19.743Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备写大论文，为避免Word格式编排的麻烦，同时能够对大论文进行版本管理，决定使用LaTex。下面记录在Windows平台下安装LaTex的过程及其使用方法。</p><h1 id="Tex-Live-Vs-MiKTex-Vs-proTeXt"><a href="#Tex-Live-Vs-MiKTex-Vs-proTeXt" class="headerlink" title="Tex Live Vs MiKTex Vs proTeXt"></a>Tex Live Vs MiKTex Vs proTeXt</h1><p>TeX（/tɛx/，常被读作/tɛk/，音译“泰赫”，“泰克”，写作“TEX”），是一个由美国计算机教授高德纳（Donald Ervin Knuth）编写的排版软件。TeX的MIME类型为application/x-tex，是一款自由软件。它在学术界特别是数学、物理学和计算机科学界十分流行。TeX被普遍认为是一个优秀的排版工具，尤其是对于复杂数学公式的处理。利用LaTeX等终端软件，TeX就能够排版出精美的文本以帮助人们辨认和查找。</p><p>LaTeX（/ˈlɑːtɛx/，常被读作/ˈlɑːtɛk/或/ˈleɪtɛk/，写作“LATEX”），是一种基于TeX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使用户没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学、物理文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p><p>LaTex类似于Linux系统，它有多个发行版，例如 MiKTeX 、 proTeXt 和TeX Live，其中proTeXt是基于MiKTeX打包的。因此重点介绍MiKTex与TeX Live的区别。</p><blockquote><p>Texlive包比较全，Miktex占用空间比较小，遇到需要的包需要在线下载。所以，硬盘空间比较充足的，网络不太方便的电脑，可以选择Texlive，反之硬盘空间小，一直保持网络链接的可以选择Miktex。</p></blockquote><h1 id="LaTeX编辑器"><a href="#LaTeX编辑器" class="headerlink" title="LaTeX编辑器"></a>LaTeX编辑器</h1><p>LaTex编辑器大概分为两种，一种为WYSIWYG，所见即所得，实时预览，类似于Word，另一种是纯文本编辑器，有语法高亮，没有预览功能，编译成PDF后才能预览。</p><p>LaTeX编辑器的选择请参考<a href="https://www.zhihu.com/question/19954023" target="_blank" rel="noopener">有哪些好的 LaTeX 编辑器？</a>。本人倾向于使用VSCode+Latex Workshop，具体方法参考<a href="https://zhuanlan.zhihu.com/p/43133114" target="_blank" rel="noopener">编写中文Latex(VSCode+TexLive)</a>。</p><h1 id="Tex-Live安装"><a href="#Tex-Live安装" class="headerlink" title="Tex Live安装"></a>Tex Live安装</h1><p>Tex Live安装请参考<a href="https://zhuanlan.zhihu.com/p/41855480" target="_blank" rel="noopener">最新TeXLive 环境的安装与配置</a>。</p><h1 id="LaTeX转docx"><a href="#LaTeX转docx" class="headerlink" title="LaTeX转docx"></a>LaTeX转docx</h1><p>有时需要将LaTeX转成docx文档，可使用Pandoc，具体使用方法参考<br><a href="https://blog.csdn.net/yaoqi_isee/article/details/71125232" target="_blank" rel="noopener">Latex转word</a>。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.sciencenet.cn/blog-478347-1215384.html" target="_blank" rel="noopener">Latex编译器推荐（面向初学者或者懒得折腾的朋友，主要针对windows用户）</a>,by 郭令举.</li><li><a href="https://cn.soulmachine.me/2013-04-12-latex-distributions-and-editors/" target="_blank" rel="noopener">LaTeX的各种发行版和编辑器的比较</a>,by 灵魂机器.</li><li><a href="https://zh.wikipedia.org/wiki/TeX" target="_blank" rel="noopener">TeX</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/LaTeX" target="_blank" rel="noopener">LaTeX</a>,by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/41855480" target="_blank" rel="noopener">最新TeXLive 环境的安装与配置</a>,by cying.</li><li><a href="https://www.zhihu.com/question/19954023" target="_blank" rel="noopener">有哪些好的 LaTeX 编辑器？</a>,by zhihu.</li><li><a href="https://zhuanlan.zhihu.com/p/43133114" target="_blank" rel="noopener">编写中文Latex(VSCode+TexLive)</a>,by 踏歌.</li><li><a href="https://liam.page/2014/09/08/latex-introduction/" target="_blank" rel="noopener">一份其实很短的 LaTeX 入门文档</a>,by 始终.</li><li><a href="http://liuchengxu.org/blog-cn/posts/quick-latex/" target="_blank" rel="noopener">从零开始 LaTeX 快速入门</a>,by liuchengxu.</li><li><a href="https://liam.page/2015/01/23/literate-programming-in-latex/" target="_blank" rel="noopener">在 LaTeX 中进行文学编程</a>,by 始终.</li><li><a href="https://blog.csdn.net/yaoqi_isee/article/details/71125232" target="_blank" rel="noopener">Latex转word</a>,by yj_isee.</li><li><a href="https://zhuanlan.zhihu.com/p/50241899" target="_blank" rel="noopener">LaTeX + VSCode + Git 开发环境搭建</a>,by 李计芃.</li><li><a href="https://zh.wikipedia.org/wiki/BibTeX" target="_blank" rel="noopener">BibTeX</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近准备写大论文，为避免Word格式编排的麻烦，同时能够对大论文进行版本管理，决定使用LaTex。下面记录在Windows平台下安装LaTex的过程及其使用方法。&lt;/p&gt;
&lt;h1 id=&quot;Tex-Live-Vs-MiKTex-Vs-proTeXt&quot;&gt;&lt;a href=&quot;#Te
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="科研" scheme="https://huangwang.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo入门简介</title>
    <link href="https://huangwang.github.io/2020/02/24/Dubbo%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2020/02/24/Dubbo入门简介/</id>
    <published>2020-02-24T01:20:44.000Z</published>
    <updated>2020-02-24T02:00:07.348Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><h1 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a>应用背景</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/background.html" target="_blank" rel="noopener">背景</a>.</p><h1 id="应用需求"><a href="#应用需求" class="headerlink" title="应用需求"></a>应用需求</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/requirements.html" target="_blank" rel="noopener">需求</a>.</p><h1 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/architecture.html" target="_blank" rel="noopener">架构</a>.</p><h1 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/usage.html" target="_blank" rel="noopener">应用</a>.</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">Apache Dubbo</a>,by apache.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。&lt;/p&gt;
&lt;h1 id=&quot;应用背景&quot;&gt;&lt;a href=&quot;#应用背景&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Matlab树莓派硬件支持平台的搭建</title>
    <link href="https://huangwang.github.io/2020/02/19/Matlab%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E4%BB%B6%E6%94%AF%E6%8C%81%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://huangwang.github.io/2020/02/19/Matlab树莓派硬件支持平台的搭建/</id>
    <published>2020-02-19T02:09:39.000Z</published>
    <updated>2020-02-20T05:03:33.239Z</updated>
    
    <content type="html"><![CDATA[<p>在今天全球强调科研创新的年代，为何科学的进步与上个世纪相比，却明显进步缓慢呢？也许有人反驳，当今庞大的科研人员，层出不穷的科研成果，极大的物质财富，难道不是科学技术的进步带来的吗？与上个世纪相比，哪里进步缓慢了呢？诚然，当前科技在进步在繁荣，但这种进步繁荣是应用科学的繁荣，而不是基础科学的繁荣。如果将科学比作一棵大树，那么基础科学就是树干，枝干和树叶就是应用科学。树干的粗细决定了树枝和树叶的繁荣，不幸的是，当前基础科学已经很久没有大的进步了。基础科学的进步靠牛顿、麦克斯韦、爱因斯坦这样的天才，而应用科学的进步则靠广大的普通科研人员。那么作为一名普通的从事应用科学研究的科研人员，如何才能有所创新有所进步呢？</p><p>作为一名普通的科研人员，可能经常会有一闪而过的灵光。然而要将这一闪而过的灵光变成切实可行的创新是一个痛苦的过程。这一闪而过的灵光可能涉及很多学科知识，而大部分科研人员不是全才，可能仅在某一方面有过人之处，那么如何试验验证这一灵光就成了大难题。幸运的是，有了Matlab及其推广的基于模型的设计思想，未来应用科学方面的科研创新将不再困难。</p><p>有人说，Matlab除了不会生孩子，其他都能干。诚然，Matlab就是广大科研人员的神兵利器。Matlab或许比不上某些领域的专业软件，但胜在全面，该有的都有。科研人员只需掌握它，就可解决至少80%的问题，极大地提高科研效率。</p><p>最近在研究各种控制算法，需要安装树莓派和PX4的硬件支持包，发现最新的Matlab 2019b安装PX4硬件支持包比较方便，但无法安装树莓派硬件支持包，而Matlab 2018b则没有这样的问题。</p><p>Matlab 2019b无法下载树莓派硬件支持包的问题，可通过Matlab官方提供的下载工具解决，下载地址为<a href="https://www.mathworks.com/support/install/support-software-downloader.html" target="_blank" rel="noopener">Download Hardware Support Packages and Optional Features</a>。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/38194571" target="_blank" rel="noopener">Simulink与树莓派-HIL(硬件在环)平台搭建</a>,by Tomato.</li><li><a href="https://zhuanlan.zhihu.com/p/25198647" target="_blank" rel="noopener">AUTOSAR架构深度解析</a>,by 末离.</li><li><a href="https://www.mathworks.com/support/install/support-software-downloader.html" target="_blank" rel="noopener">Download Hardware Support Packages and Optional Features</a>,by mathworks.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在今天全球强调科研创新的年代，为何科学的进步与上个世纪相比，却明显进步缓慢呢？也许有人反驳，当今庞大的科研人员，层出不穷的科研成果，极大的物质财富，难道不是科学技术的进步带来的吗？与上个世纪相比，哪里进步缓慢了呢？诚然，当前科技在进步在繁荣，但这种进步繁荣是应用科学的繁荣，
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="感悟" scheme="https://huangwang.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>基于模型的设计思想</title>
    <link href="https://huangwang.github.io/2020/02/13/%E5%9F%BA%E4%BA%8E%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    <id>https://huangwang.github.io/2020/02/13/基于模型的设计思想/</id>
    <published>2020-02-13T03:04:28.000Z</published>
    <updated>2020-02-15T10:27:32.515Z</updated>
    
    <content type="html"><![CDATA[<p>基于模型的设计（Model-Based Design，简称MBD）是一种数学及可视化的方法，可以用来处理复杂控制系统、信号处理及通讯系统的设计。基于模型的设计可以用在运动控制、工业设计、航天以及车辆应用中。基于模型的设计也是嵌入式系统设计的方法论。</p><p>基于模型的设计类似于基于组件的图形用户界面开发，可极大地提高开发的效率，并保证程序的健壮性。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>基于模型的设计是一种较有效率的设计方式，在支援开发过程（V模型）的同时，在设计过程中建立了沟通用的共同框架。若用这种方式设计控制系统，开发会分为以下四步骤：</p><ul><li>为受控体建模。</li><li>配合受控体，分析及合成适合的控制器。</li><li>针对控制器及受控体进行仿真。</li><li>整合上述的步骤来布署控制器。</li></ul><p>基于模型的设计和传统的设计方法论有很大的不同。设计者在使用基于模型的设计时，不需使用复杂的架构以及繁多的软件代码，只需利用基于模型的设计来定义系统模型，再配合连续及离散的架构方块来产生进阶的机能特性。使用仿真工具建立的模型可以进行快速应用程序开发、软件测试和验证。不但强化了测试以及验证的程序。有些情形下，可以将这个新的设计方法配合硬件在环的仿真，测试系统的动态效应，不但速度更快，也比传统的设计方法论更加有效率。</p><h1 id="基于模型设计的步骤"><a href="#基于模型设计的步骤" class="headerlink" title="基于模型设计的步骤"></a>基于模型设计的步骤</h1><p>基于模型设计的主要步骤如下：</p><ol><li>受控体建模：受控体建模可以以资料驱动（data-driven）为基础，也可以依照首要原则（first principle）建模。资料驱动的建模会配合系统识别或是类似的技术。系统识别会先取得系统在真实世界中的输入输出资料，并进行处理，再配合数学算法来识别系统的模型。在系统识别后，就可以针对受控体设计适合的控制器。首要原则驱动的建模是先找到受控体的统御方程式，再创建方块图模型来实现上述的统御方程式。实体建模（physical modeling）就是一种首要原则驱动的驱动建模方式，模型中会包括许多互相连结的方块，对应实际受控体中的各个元件。</li><li>控制器分析及合成：会使用步骤1得到的数学模型来确认模型的动态特性，再依这些特性设计符合特性的控制器。</li><li>离线的仿真及实时仿真：会分析动态系统在复杂时变输入下的反应特性。这可以将受授体的简易线性非时变模型和控制器一起进行仿真，也可以用受授体的非线性模型和控制器进行仿真。仿真有助于找到规格、需求以及建模时的错误，而不是在之后实际设计控制器时才发现。实时仿真可以用步骤2的控制器进行代码自动生成（automatically generating code）来达到。代码可以布署在特殊的实时原型电脑中，这个电脑可以执行程式并且控制受控体的运作。假如无法取得受控体的原型，或是配合原型的测试有危险性或是太过昂贵，可以配合受控体模型进行自动代码生成。之后可以将代码布署到另一台电脑上，这台电脑和执行控制体的电脑相连。因此可以实时的测试控制器，不过控制的不是实际的受控体，而是实时仿真的受控体模型。</li><li>布署控制器：理想上让步骤2的控制器进行代码自动生成，即可布署控制器。不过一开始时，控制器在实际系统上的性能会和仿真时的性能不同，此时可以用迭代除错方式，分析实际系统上的结果，依分析结果更新控制器模型。配合基于模型设计的工具，可以在统一化可视环境下，进行上述的迭代除错。</li></ol><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>基于模型的设计相较于传统开发方式的优点有：</p><ul><li>基于模型的设计提供一个共同的开发环境，有助于不同的开发团队之间的一般性沟通、资料分析以及系统验证。</li><li>工程师可以在系统设计早期定位出错误并且修正错误，此时系统修改造成的时间冲击及财务影响都是最小的。</li><li>设计可以复用，有助于提升机能及衍生系统的扩充能力。</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>支持MBD开发的工具主要有：</p><ul><li>Matlab/Simulink</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%96%BC%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%A8%AD%E8%A8%88" target="_blank" rel="noopener">基于模型的设计</a>,by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/28834754" target="_blank" rel="noopener">Simulink代码生成C/C++</a>,by 小二黑.</li><li><a href="https://zhuanlan.zhihu.com/p/23149544" target="_blank" rel="noopener">基于模型设计——电力电子的利器</a>,by 陈老四.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于模型的设计（Model-Based Design，简称MBD）是一种数学及可视化的方法，可以用来处理复杂控制系统、信号处理及通讯系统的设计。基于模型的设计可以用在运动控制、工业设计、航天以及车辆应用中。基于模型的设计也是嵌入式系统设计的方法论。&lt;/p&gt;
&lt;p&gt;基于模型的
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>策略梯度方法笔记</title>
    <link href="https://huangwang.github.io/2020/02/10/%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2020/02/10/策略梯度方法笔记/</id>
    <published>2020-02-10T08:42:42.000Z</published>
    <updated>2020-02-17T08:51:44.205Z</updated>
    
    <content type="html"><![CDATA[<p>使用强化学习实现机器人的连续控制，策略梯度方法是首选。下面即对强化学习中策略梯度方法进行总结。</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="免模型学习（Model-Free）-vs-有模型学习（Model-Based）"><a href="#免模型学习（Model-Free）-vs-有模型学习（Model-Based）" class="headerlink" title="免模型学习（Model-Free） vs 有模型学习（Model-Based）"></a>免模型学习（Model-Free） vs 有模型学习（Model-Based）</h2><p>不同强化学习算法最重要的区分点之一就是<strong>智能体是否能完整了解或学习到所在环境的模型。</strong> 环境的模型是指一个预测状态转换和奖励的函数。</p><p>有模型学习最大的优势在于智能体能够 提前考虑来进行规划，走到每一步的时候，都提前尝试未来可能的选择，然后明确地从这些候选项中进行选择。智能体可以把预先规划的结果提取为学习策略。这其中最著名的例子就是 AlphaZero。这个方法起作用的时候，可以大幅度提升采样效率 —— 相对于那些没有模型的方法。</p><p>有模型学习最大的缺点就是智能体往往不能获得环境的真实模型。如果智能体想在一个场景下使用模型，那它必须完全从经验中学习，这会带来很多挑战。最大的挑战就是，智能体探索出来的模型和真实模型之间存在误差，而这种误差会导致智能体在学习到的模型中表现很好，但在真实的环境中表现得不好（甚至很差）。基于模型的学习从根本上讲是非常困难的，即使你愿意花费大量的时间和计算力，最终的结果也可能达不到预期的效果。</p><p>使用模型的算法叫做有模型学习，不基于模型的叫做免模型学习。虽然免模型学习放弃了有模型学习在样本效率方面的潜在收益，但是他们往往更加易于实现和调整。</p><h2 id="同策略（on-policy）-vs-异策略（off-policy）"><a href="#同策略（on-policy）-vs-异策略（off-policy）" class="headerlink" title="同策略（on-policy） vs 异策略（off-policy）"></a>同策略（on-policy） vs 异策略（off-policy）</h2><p>异策略（off-policy）的代表算法Q-learning，亦称SarasMax，其采样的策略（用于执行，behavior policy) 和更新Q值的策略（用于评估，target policy）不一样，行为策略为贪心策略，而target policy为确定性策略，即选择最Q值最优的action。</p><p>同策略（on-policy）的代表算法Sarsa，亦称on-line Q-learning，其采样的策略（用于执行，behavior policy) 和更新Q值的策略（用于评估，target policy）一样,行为策略和目标策略均为贪心策略。Sarsa的每次Q值更新需要知道前一步的状态（state）、前一步的动作（action）、奖赏值（reward）、当前状态（state）、将要执行的动作（action），由此得名Sarsa算法。</p><h2 id="在线（online）-vs-离线（offline）"><a href="#在线（online）-vs-离线（offline）" class="headerlink" title="在线（online） vs 离线（offline）"></a>在线（online） vs 离线（offline）</h2><p>在计算机科学中，在线机器学习是一种机器学习的方法，其中数据按顺序可用，并且用于在每个步骤中为将来的数据更新我们的最佳预测器，而不是通过学习生成最佳预测器的批处理学习技术 一次对整个训练数据集。 在线学习是机器学习领域中的一种常用技术，在该领域中，计算无法训练整个数据集是不可行的，因此需要核心算法。 它也用于算法必须动态适应数据中的新模式的情况下，或者在数据本身随时间而变的情况下（例如，股价预测）使用。 在线学习算法可能易于遭受灾难性干扰，这一问题可以通过增量学习方法来解决。</p><p>在机器学习中，采用离线学习的系统在初始训练阶段完成后不会改变其对目标函数的近似值。这些系统通常也是渴望学习的示例。</p><p>在在线学习中，只有一组可能的元素是已知的，而在离线学习中，学习者则知道这些元素的标识以及它们显示的顺序。</p><h1 id="强化学习分类"><a href="#强化学习分类" class="headerlink" title="强化学习分类"></a>强化学习分类</h1><p></p><p align="center">    <img src="images/rl_algorithms.svg" width="90%" alt="强化学习简单分类"></p><p></p><center>图1 强化学习简单分类</center><h1 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h1><p>下表给出强化学习常用符号定义。</p><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>$s \in \mathcal{S}$</td><td>状态。</td></tr><tr><td>$a \in \mathcal{A}$</td><td>动作。</td></tr><tr><td>$r \in \mathcal{R}$</td><td>回报。</td></tr><tr><td>$S<em>{t}, A</em>{t}, R_{t}$</td><td>一个轨迹中第t个时间步对应的状态、动作以及回报。我可能会偶尔使用$s_t,a_t,r_t$来代替。</td></tr><tr><td>$\gamma$</td><td>折扣因子；用于惩罚未来回报中的不确定性；$0&lt;γ≤1$。</td></tr><tr><td>$G_{t}$</td><td>累积回报；或者说累积折扣回报；$G<em>{t}=\sum</em>{k=0}^{\infty} \gamma^{k} R_{t+k+1}$。</td></tr><tr><td>$P\left(s^{\prime}, r\vert s, a\right)$</td><td>在当前状态s下采取动作a后转移到下一个状态 s′ 并得到回报 r 的概率。</td></tr><tr><td>$\pi(a\vert s)$</td><td>随机策略（智能体行为逻辑）；$\pi_{\theta}( .)$代表由θ参数化的策略。</td></tr><tr><td>$μ(s)$</td><td>确定性策略；虽然也可以把确定性策略记为$π(s)$，但是采用一个不同的字母可以让我们更容易分辨一个策略到底是确定性的还是随机的。π或者μ都是强化学习算法要学习的目标。</td></tr><tr><td>$V(s)$</td><td>状态-值函数衡量状态s的期望累积回报；$V_{w}( .)$代表由w参数化的状态-值函数。</td></tr><tr><td>$V^{\pi}(s)$</td><td>当智能体遵循策略π时状态s的期望累积回报；$V^{\pi}(s)=\mathbb{E}<em>{a \sim \pi}\left[G</em>{t}\vert S_{t}=s\right]$</td></tr><tr><td>$Q(s,a)$</td><td>动作-值函数，与状态-值函数类似，但是它衡量在状态s下采取动作a后的期望累积回报；$Q_{w}( .)$代表由w参数化的动作-值函数。</td></tr><tr><td>$Q^{\pi}(s, a)$</td><td>与$V^{\pi}(s)$类似，当智能体遵循策略π时，在状态s下采取动作a后的期望累积回报；$Q^{\pi}(s, a)=\mathbb{E}<em>{a \sim \pi}\left[G</em>{t}\vert S<em>{t}=s,A</em>{t}=a\right]$</td></tr><tr><td>$A(s, a)$</td><td>优势函数，$A(s,a)=Q(s,a)−V(s)$；可以认为优势函数是加强版本的动作-值函数，但是由于它采用状态-值函数作为基准使得它具有更小的方差。</td></tr></tbody></table></div><h1 id="策略梯度方法"><a href="#策略梯度方法" class="headerlink" title="策略梯度方法"></a>策略梯度方法</h1><p>强化学习的目标是为智能体找到一个最优的行为策略从而获取最大的回报。策略梯度方法主要特点在于直接对策略进行建模并优化。策略通常被建模为由θ参数化的函数$\pi_{\theta}(a | s)$。回报（目标）函数的值受到该策略的直接影响，因而可以采用很多算法来对θ进行优化来最大化回报（目标）函数。</p><p>回报（目标）函数定义如下：</p><script type="math/tex; mode=display">J(\theta)=E_{\tau \sim \pi_{\theta}} [R(\tau)]=\sum_{s \in \mathcal{S}} d^{\pi}(s) V^{\pi}(s)=\sum_{s \in \mathcal{S}} d^{\pi}(s) \sum_{a \in \mathcal{A}} \pi_{\theta}(a | s) Q^{\pi}(s, a)</script><p>其中$d^{\pi}(s)$代表由$\pi_{\theta}$引出的马尔科夫链的平稳分布（π下的在线策略状态分布）。</p><p>使用梯度上升方法，我们可以将参数 $\theta$ 往梯度 $\nabla<em>{\theta} J(\theta)$ 给出的方向进行改变从而去找到最优的 $\theta$ 使得其对应的策略 $\pi</em>{\theta}$ 能够给智能体带来最大的期望累积回报。</p><script type="math/tex; mode=display">\theta_{k+1} = \theta_k + \alpha \left. \nabla_{\theta} J(\pi_{\theta}) \right|_{\theta_k}.</script><p>策略性能的梯度 $\nabla<em>{\theta} J(\pi</em>{\theta})$ ，通常被称为 策略梯度 ，优化策略的算法通常被称为 策略算法 。</p><h2 id="策略梯度定理"><a href="#策略梯度定理" class="headerlink" title="策略梯度定理"></a>策略梯度定理</h2><script type="math/tex; mode=display">\begin{aligned} \nabla_\theta J(\theta) &\propto \sum_{s \in \mathcal{S}} d^\pi(s) \sum_{a \in \mathcal{A}} Q^\pi(s, a) \nabla_\theta \pi_\theta(a \vert s) &\\ &= \sum_{s \in \mathcal{S}} d^\pi(s) \sum_{a \in \mathcal{A}} \pi_\theta(a \vert s) Q^\pi(s, a) \frac{\nabla_\theta \pi_\theta(a \vert s)}{\pi_\theta(a \vert s)} &\\ &= \mathbb{E}_\pi [Q^\pi(s, a) \nabla_\theta \ln \pi_\theta(a \vert s)] & \scriptstyle{\text{; 因为 } (\ln x)’ = 1/x} \end{aligned}</script><p>$\mathbb{E}<em>{\pi}$代表$\mathbb{E}</em>{s \sim d<em>{\pi}, a \sim \pi</em>{\theta}}$，下标表示遵循策略$\pi_{\theta}$（在线策略）时状态以及动作的分布。</p><h2 id="深度确定性策略梯度-（DDPG）"><a href="#深度确定性策略梯度-（DDPG）" class="headerlink" title="深度确定性策略梯度 （DDPG）"></a>深度确定性策略梯度 （DDPG）</h2><p>DDPG（Lillicrap, et al., 2015）是深度确定性策略梯度（Deep Deterministic Policy Gradient）的缩写，是一个结合了DPG以及DQN的无模型离线演员-评论家算法。DQN（深度Q网络）通过经验回访以及冻结目标网络的方式来稳定Q函数的训练过程。原始的DQN算法只能在离散的动作空间上使用，DDPG算法在学习一个确定性策略的同时通过演员-评论家框架将其扩展到连续的动作空间中。</p><p></p><p align="center">    <img src="images/ddpg.svg" width="90%" alt="深度确定性策略梯度算法伪代码"></p><p></p><center>图2 深度确定性策略梯度算法伪代码</center><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://tomaxent.com/2019/04/14/%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">策略梯度方法</a>,by Abracadabra.</li><li><a href="https://lilianweng.github.io/lil-log/2018/02/19/a-long-peek-into-reinforcement-learning.html#key-concepts" target="_blank" rel="noopener">A (Long) Peek into Reinforcement Learning</a>,by Lilian Weng.</li><li><a href="https://spinningup.readthedocs.io/zh_CN/latest/spinningup/rl_intro3.html" target="_blank" rel="noopener">第三部分：策略优化介绍</a>,by spinningup.</li><li><a href="https://huangwang.github.io/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/">深度强化学习研究笔记</a>,by jackhuang.</li><li><a href="https://zhuanlan.zhihu.com/p/81437177" target="_blank" rel="noopener">异策略（Q-learning） v.s. 同策略（Sarsa）</a>,by MOMO.</li><li><a href="https://en.wikipedia.org/wiki/Online_machine_learning" target="_blank" rel="noopener">Online_machine_learning</a>,by wikipedia.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用强化学习实现机器人的连续控制，策略梯度方法是首选。下面即对强化学习中策略梯度方法进行总结。&lt;/p&gt;
&lt;h1 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h1&gt;&lt;h2 id=&quot;免模
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>科学研究的标准流程</title>
    <link href="https://huangwang.github.io/2020/02/09/%E7%A7%91%E5%AD%A6%E7%A0%94%E7%A9%B6%E7%9A%84%E6%A0%87%E5%87%86%E6%B5%81%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2020/02/09/科学研究的标准流程/</id>
    <published>2020-02-09T03:12:26.000Z</published>
    <updated>2020-02-09T03:52:28.643Z</updated>
    
    <content type="html"><![CDATA[<p>科学研究是每一个科研人必备的技能，那么科学研究应如何入手呢？通常科学研究应遵循如下标准流程：</p><h1 id="问题牵引"><a href="#问题牵引" class="headerlink" title="问题牵引"></a>问题牵引</h1><h2 id="形式化定义问题"><a href="#形式化定义问题" class="headerlink" title="形式化定义问题"></a>形式化定义问题</h2><h2 id="问题等价转换"><a href="#问题等价转换" class="headerlink" title="问题等价转换"></a>问题等价转换</h2><h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><h2 id="已有数学模型"><a href="#已有数学模型" class="headerlink" title="已有数学模型"></a>已有数学模型</h2><h2 id="类似数学模型"><a href="#类似数学模型" class="headerlink" title="类似数学模型"></a>类似数学模型</h2><h2 id="重建数学模型"><a href="#重建数学模型" class="headerlink" title="重建数学模型"></a>重建数学模型</h2><h1 id="模型求解"><a href="#模型求解" class="headerlink" title="模型求解"></a>模型求解</h1><h2 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h2><h2 id="求解模型"><a href="#求解模型" class="headerlink" title="求解模型"></a>求解模型</h2><h1 id="验证模型"><a href="#验证模型" class="headerlink" title="验证模型"></a>验证模型</h1><h2 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h2><h2 id="灵敏度分析"><a href="#灵敏度分析" class="headerlink" title="灵敏度分析"></a>灵敏度分析</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;科学研究是每一个科研人必备的技能，那么科学研究应如何入手呢？通常科学研究应遵循如下标准流程：&lt;/p&gt;
&lt;h1 id=&quot;问题牵引&quot;&gt;&lt;a href=&quot;#问题牵引&quot; class=&quot;headerlink&quot; title=&quot;问题牵引&quot;&gt;&lt;/a&gt;问题牵引&lt;/h1&gt;&lt;h2 id=&quot;形式化
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="科研" scheme="https://huangwang.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="感悟" scheme="https://huangwang.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>XML解析入门</title>
    <link href="https://huangwang.github.io/2020/01/30/XML%E8%A7%A3%E6%9E%90%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2020/01/30/XML解析入门/</id>
    <published>2020-01-30T04:14:19.000Z</published>
    <updated>2020-01-30T08:59:02.519Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究编写飞行动力学模型，发现需要使用很多用于插值的数据，这些数据可以是一维向量、二维表格或三维数据。在代码中直接硬编码存储是不合适的，降低程序的灵活性。直接使用文本文档存储也不合适，这些插值数据明显具有结构化的特征。于是想到用XML来存储表示这些数据。下面总结介绍XML解析相关知识。</p><h1 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h1><p>可扩展标记语言（英语：Extensible Markup Language，简称：XML）是一种标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。如何定义这些标记，既可以选择国际通用的标记语言，比如HTML，也可以使用像XML这样由相关人士自由决定的标记语言，这就是语言的可扩展性。XML是从标准通用标记语言（SGML）中简化修改出来的。它主要用到的有可扩展标记语言、可扩展样式语言（XSL）、XBRL和XPath等。</p><h1 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h1><p>XML定义结构、存储信息、传送信息。下例为小张发送给大元的便条，存储为XML。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">  &lt;小纸条&gt;</span><br><span class="line">    &lt;收件人&gt;大元&lt;/收件人&gt;</span><br><span class="line">    &lt;發件人&gt;小張&lt;/發件人&gt;</span><br><span class="line">    &lt;主題&gt;問候&lt;/主題&gt;</span><br><span class="line">    &lt;具體內容&gt;早啊，飯吃了沒？ &lt;/具體內容&gt;</span><br><span class="line">  &lt;/小纸条&gt;</span><br></pre></td></tr></table></figure><p>每个XML文档都由XML序言开始，在前面的代码中的第一行就是XML序言，&lt;?xml version=”1.0”?&gt;。这一行代码会告诉解析器或浏览器这个文件应该按照XML规则进行解析。</p><p>但是，根元素到底叫&lt;小纸条&gt;还是&lt;小便条&gt;，则是由文档类型定义（DTD）或XML纲要（XML Schema）定义的。如果DTD规定根元素必须叫&lt;小便条&gt;，那么若写作&lt;小纸条&gt;就不符合要求。这种不符合DTD或XML纲要的要求的XML文档，被称作不合法的XML，反之则是合法的XML。</p><p>XML文件的第二行并不一定要包含文档元素；如果有注释或者其他内容，文档元素可以迟些出现。</p><h1 id="XML解析器"><a href="#XML解析器" class="headerlink" title="XML解析器"></a>XML解析器</h1><p>C++类型XML解析器有：</p><ul><li>Boost.PropertyTree - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost]</li><li>Expat - An XML parser library written in C. [MIT]</li><li>Libxml2 - The XML C parser and toolkit of Gnome. [MIT]</li><li>libxml++ - An XML Parser for C++. [LGPL2]</li><li>Mini-XML - A small XML parsing library written in ANSI C. [LGPL2 with exceptions]</li><li>PugiXML - A light-weight, simple and fast XML parser for C++ with XPath support. [MIT]</li><li>RapidXml - An attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. [Boost]</li><li>TinyXML - A simple, small, minimal, C++ XML parser that can be easily integrating into other programs. [zlib]</li><li>TinyXML2 - A simple, small, efficient, C++ XML parser that can be easily integrating into other programs. [zlib]</li><li>TinyXML++ - A completely new interface to TinyXML that uses MANY of the C++ strengths. Templates, exceptions, and much better error * handling. [MIT]</li><li>Xerces-C++ - A validating XML parser written in a portable subset of C++. [Apache2]</li></ul><p>推荐使用TinyXML2。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/32046606" target="_blank" rel="noopener">C++解析xml有什么好用的轮子?</a>,by 知乎.</li><li><a href="https://github.com/fffaraz/awesome-cpp#xml" target="_blank" rel="noopener">awesome-cpp xml</a>,by fffaraz.</li><li><a href="https://blog.csdn.net/liangzhao_jay/article/details/8797224" target="_blank" rel="noopener">XML与C++对象的相互转化</a>,by Mr_John_Liang.</li><li><a href="https://www.cnblogs.com/sanmaospace/p/3139186.html" target="_blank" rel="noopener">JSON与XML的区别比较</a>,by SanMaoSpace.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在研究编写飞行动力学模型，发现需要使用很多用于插值的数据，这些数据可以是一维向量、二维表格或三维数据。在代码中直接硬编码存储是不合适的，降低程序的灵活性。直接使用文本文档存储也不合适，这些插值数据明显具有结构化的特征。于是想到用XML来存储表示这些数据。下面总结介绍XM
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>软件开发文档的编写方法</title>
    <link href="https://huangwang.github.io/2020/01/22/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E7%9A%84%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2020/01/22/软件开发文档的编写方法/</id>
    <published>2020-01-22T08:04:34.000Z</published>
    <updated>2020-01-22T12:14:17.670Z</updated>
    
    <content type="html"><![CDATA[<p>软件开发文档是软件开发过程的输出产物。软件开发过程的不同阶段将产生不同的软件开发文档。例如：软件需求分析阶段将产生软件需求规格说明书，软件概要设计阶段将产生概要设计说明书，软件详细设计阶段将产生详细设计说明书。按照软件工程的原则，软件开发过程输出这些文档的目的是为了保障软件开发的质量，确保软件项目能够按时完成，并保质保量。下面重点介绍各类软件开发文档的编写方法。</p><h1 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h1><p>软件过程模型是软件过程的简化表示。典型的软件过程模型有：瀑布模型、增量式开发模型和面向服用的软件工程模型。以瀑布模型为例，其涉及的开发活动如图1所示。</p><p></p><p align="center">    <img src="images/waterfall.jpg" width="80%" alt="瀑布模型"></p><p></p><center>图1 瀑布模型</center><p>各个开发活动对应产出的软件开发文档主要有：</p><ol><li>可行性研究报告</li><li>项目开发计划</li><li>软件需求说明书</li><li>概要设计说明书</li><li>详细设计说明书</li><li>数据库设计说明书</li><li>数据要求说明书</li><li>测试计划</li><li>测试分析报告</li><li>项目开发总结报告</li><li>操作手册</li><li>用户手册</li><li>开发进度月报</li></ol><h1 id="软件开发文档"><a href="#软件开发文档" class="headerlink" title="软件开发文档"></a>软件开发文档</h1><h2 id="可行性研究报告"><a href="#可行性研究报告" class="headerlink" title="可行性研究报告"></a>可行性研究报告</h2><p></p><p align="center">    <img src="images/doc2.jpg" width="80%" alt="可行性研究报告"></p><p></p><center>图2 可行性研究报告</center><h2 id="项目开发计划"><a href="#项目开发计划" class="headerlink" title="项目开发计划"></a>项目开发计划</h2><p></p><p align="center">    <img src="images/doc3.jpg" width="80%" alt="项目开发计划"></p><p></p><center>图3 项目开发计划</center><h2 id="软件需求说明书"><a href="#软件需求说明书" class="headerlink" title="软件需求说明书"></a>软件需求说明书</h2><p></p><p align="center">    <img src="images/doc4.jpg" width="80%" alt="软件需求说明书"></p><p></p><center>图4 软件需求说明书</center><h2 id="概要设计说明书"><a href="#概要设计说明书" class="headerlink" title="概要设计说明书"></a>概要设计说明书</h2><p></p><p align="center">    <img src="images/doc5.jpg" width="80%" alt="概要设计说明书"></p><p></p><center>图5 概要设计说明书</center><h2 id="详细设计说明书"><a href="#详细设计说明书" class="headerlink" title="详细设计说明书"></a>详细设计说明书</h2><p></p><p align="center">    <img src="images/doc6.jpg" width="80%" alt="详细设计说明书"></p><p></p><center>图6 详细设计说明书</center><h2 id="数据库设计说明书"><a href="#数据库设计说明书" class="headerlink" title="数据库设计说明书"></a>数据库设计说明书</h2><p></p><p align="center">    <img src="images/doc7.jpg" width="80%" alt="数据库设计说明书"></p><p></p><center>图7 数据库设计说明书</center><h2 id="数据要求说明书"><a href="#数据要求说明书" class="headerlink" title="数据要求说明书"></a>数据要求说明书</h2><p></p><p align="center">    <img src="images/doc8.jpg" width="80%" alt="数据要求说明书"></p><p></p><center>图8 数据要求说明书</center><h2 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h2><p></p><p align="center">    <img src="images/doc9.jpg" width="80%" alt="测试计划"></p><p></p><center>图9 测试计划</center><h2 id="测试分析报告"><a href="#测试分析报告" class="headerlink" title="测试分析报告"></a>测试分析报告</h2><p></p><p align="center">    <img src="images/doc10.jpg" width="80%" alt="测试分析报告"></p><p></p><center>图10 测试分析报告</center><h2 id="项目开发总结报告"><a href="#项目开发总结报告" class="headerlink" title="项目开发总结报告"></a>项目开发总结报告</h2><p></p><p align="center">    <img src="images/doc11.jpg" width="80%" alt="项目开发总结报告"></p><p></p><center>图11 项目开发总结报告</center><h2 id="操作手册"><a href="#操作手册" class="headerlink" title="操作手册"></a>操作手册</h2><p></p><p align="center">    <img src="images/doc12.jpg" width="80%" alt="操作手册"></p><p></p><center>图12 操作手册</center><h2 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h2><p></p><p align="center">    <img src="images/doc13.jpg" width="80%" alt="用户手册"></p><p></p><center>图13 用户手册</center><h1 id="软件开发文档的使用"><a href="#软件开发文档的使用" class="headerlink" title="软件开发文档的使用"></a>软件开发文档的使用</h1><h2 id="软件文档分类"><a href="#软件文档分类" class="headerlink" title="软件文档分类"></a>软件文档分类</h2><p></p><p align="center">    <img src="images/doc14.jpg" width="80%" alt="软件文档分类"></p><p></p><center>图14 软件文档分类</center><h2 id="软件文档读者"><a href="#软件文档读者" class="headerlink" title="软件文档读者"></a>软件文档读者</h2><p></p><p align="center">    <img src="images/doc15.jpg" width="80%" alt="软件文档读者"></p><p></p><center>图15 软件文档读者</center><h2 id="软件文档使用"><a href="#软件文档使用" class="headerlink" title="软件文档使用"></a>软件文档使用</h2><p></p><p align="center">    <img src="images/doc16.jpg" width="80%" alt="软件文档使用"></p><p></p><center>图16 软件文档使用</center><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B" target="_blank" rel="noopener">软件工程</a>,by wikipedia.</li><li><a href="https://www.jianshu.com/p/a52fe78962f0" target="_blank" rel="noopener">软件需求，概要设计，详细设计（文档）怎么做，做什么？</a>,by 安东尼_Anthony.</li><li><a href="http://www.ishenping.com/ArtInfo/3704232.html" target="_blank" rel="noopener">软件工程文档总结</a>,by BONIC.</li><li><a href="https://blog.csdn.net/iamlaosong/article/details/17304697" target="_blank" rel="noopener">国标：计算机软件文档编制规范</a>,by 宋哥.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件开发文档是软件开发过程的输出产物。软件开发过程的不同阶段将产生不同的软件开发文档。例如：软件需求分析阶段将产生软件需求规格说明书，软件概要设计阶段将产生概要设计说明书，软件详细设计阶段将产生详细设计说明书。按照软件工程的原则，软件开发过程输出这些文档的目的是为了保障软件
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="软件工程" scheme="https://huangwang.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CPlusPlus不常用语法解析</title>
    <link href="https://huangwang.github.io/2020/01/21/CPlusPlus%E4%B8%8D%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    <id>https://huangwang.github.io/2020/01/21/CPlusPlus不常用语法解析/</id>
    <published>2020-01-21T03:42:53.000Z</published>
    <updated>2020-01-21T03:53:10.430Z</updated>
    
    <content type="html"><![CDATA[<p>近年来C++发展很快，出现了一些新的语法和特性。熟练掌握这些语法和特性，可提高编写C++代码的效率。下面即简要介绍这些C++语法和特性。</p><h1 id="const-0"><a href="#const-0" class="headerlink" title="const=0"></a>const=0</h1><p>在类声明中，会出现const=0语法，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Weapon</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">    virtual void attack() const = 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此处 =0 说明该类成员函数是一个纯虚函数。而将const放在成员函数之后，表示该成员函数禁止修改该类的数据成员(mutable成员除外)。如果您无意中修改了该类的数据成员，编译器会报告一个错误。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.codenong.com/21187965/" target="_blank" rel="noopener">关于virtual：c ++：const = 0的方法原型的代码说明</a>,by 码农家园.</li><li><a href="https://blog.csdn.net/kenden23/article/details/15500485" target="_blank" rel="noopener">C++构造函数和析构函数的调用顺序</a>,by 靖心.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近年来C++发展很快，出现了一些新的语法和特性。熟练掌握这些语法和特性，可提高编写C++代码的效率。下面即简要介绍这些C++语法和特性。&lt;/p&gt;
&lt;h1 id=&quot;const-0&quot;&gt;&lt;a href=&quot;#const-0&quot; class=&quot;headerlink&quot; title=&quot;co
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>CPlusPlus单元测试框架Catch入门</title>
    <link href="https://huangwang.github.io/2020/01/15/CPlusPlus%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6Catch%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2020/01/15/CPlusPlus单元测试框架Catch入门/</id>
    <published>2020-01-15T15:06:19.000Z</published>
    <updated>2020-01-21T01:39:52.677Z</updated>
    
    <content type="html"><![CDATA[<p>最近在编写一个飞行力学的类库，随着类数量的增加，代码越来越复杂，质量越来越难以控制，因此引入单元测试，通过自动化测试以保障代码质量，防止因代码修改引入新的Bug。C++已经有一些成熟的代码测试框架，例如：Google Test, Boost.Test, CppUnit, Cute，等等。通过综合分析和比较，最终选择Catch2测试框架。选择该测试框架的原因是其够轻量级，够简单。</p><h1 id="Catch2简介"><a href="#Catch2简介" class="headerlink" title="Catch2简介"></a>Catch2简介</h1><p>Catch2是轻量级的C++的多范式测试框架。 它也支持Objective-C（也许还有C）。 它主要作为单个头文件分发，尽管某些扩展可能需要其他头文件。</p><h2 id="关键特征"><a href="#关键特征" class="headerlink" title="关键特征"></a>关键特征</h2><ul><li>快速且非常容易上手。 只需下载catch.hpp，＃include它就可以了。</li><li>没有外部依赖性。 只要您可以编译C ++ 11并拥有C ++标准库即可。</li><li>将测试用例编写为自注册函数（或方法，如果您愿意的话）。</li><li>将测试用例划分为几个部分，每个部分都是独立运行的（消除了对夹具的需求）。</li><li>使用BDD样式的“时准时限”部分以及传统的单元测试用例。</li><li>仅一个核心声明宏可以进行比较。 使用标准C / C ++运算符进行比较-但是完整的表达式已分解，并且记录了lhs和rhs值。</li><li>测试使用自由格式的字符串命名-合法标识符中没有其他名称。</li></ul><h2 id="核心特征"><a href="#核心特征" class="headerlink" title="核心特征"></a>核心特征</h2><ul><li>可以对测试进行标记，以方便地运行临时的测试组。</li><li>故障可能（可选）进入Windows和Mac上的调试器。</li><li>输出通过模块化报告器对象。 包括基本的文本和XML报告程序。 自定义记者可以轻松添加。</li><li>支持JUnit xml输出以与第三方工具（例如CI服务器）集成。</li><li>提供了默认的main（）函数，但您可以提供自己的控件来进行完全控制（例如，集成到自己的测试运行器GUI中）。</li><li>提供了命令行解析器，如果您选择提供自己的main（）函数，该解析器仍可以使用。</li><li>Catch可以测试自己。</li><li>替代性断言宏报告失败，但不中止测试用例</li><li>浮点公差比较是使用表达性的Approx（）语法构建的。</li><li>内部和友好的宏是隔离的，因此可以管理名称冲突</li><li>匹配器</li></ul><h1 id="Catch示例"><a href="#Catch示例" class="headerlink" title="Catch示例"></a>Catch示例</h1><p>使用Catch进行单元测试，只需简单掌握TEST_CASE、REQUIRE、SECTION三个宏即可编写绝大部分的测试用例。简单示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">TEST_CASE( &quot;vectors can be sized and resized&quot;, &quot;[vector]&quot; ) &#123;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;int&gt; v( 5 );</span><br><span class="line"></span><br><span class="line">    REQUIRE( v.size() == 5 );</span><br><span class="line">    REQUIRE( v.capacity() &gt;= 5 );</span><br><span class="line"></span><br><span class="line">    SECTION( &quot;resizing bigger changes size and capacity&quot; ) &#123;</span><br><span class="line">        v.resize( 10 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() == 10 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;= 10 );</span><br><span class="line">    &#125;</span><br><span class="line">    SECTION( &quot;resizing smaller changes size but not capacity&quot; ) &#123;</span><br><span class="line">        v.resize( 0 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() == 0 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;= 5 );</span><br><span class="line">    &#125;</span><br><span class="line">    SECTION( &quot;reserving bigger changes capacity but not size&quot; ) &#123;</span><br><span class="line">        v.reserve( 10 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() == 5 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;= 10 );</span><br><span class="line">    &#125;</span><br><span class="line">    SECTION( &quot;reserving smaller does not change size or capacity&quot; ) &#123;</span><br><span class="line">        v.reserve( 0 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() == 5 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;= 5 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述示例中，对于每个SECTION，TEST_CASE都是从头开始执行的，因此，当我们进入每个部分时，我们知道vector的大小为5，容量至少为5。通过REQUIRE宏在顶层确保vector大小和容量的正确性。这是可行的，因为SECTION宏包含一个if语句，该语句回调Catch来查看是否应执行该节。 通过TEST_CASE，每次运行都会执行一个叶子部分。 其他部分将被跳过。 下次执行下一个部分，依此类推，直到没有新的部分为止。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://filebox.ece.vt.edu/~ECE2574/testing.html" target="_blank" rel="noopener">Writing Unit Tests with Catch and CMake</a>,by filebox.</li><li><a href="https://schneide.blog/2017/12/11/integrating-catch2-with-cmake-and-jenkins/" target="_blank" rel="noopener">Integrating catch2 with CMake and Jenkins</a>,by mariuselvert.</li><li><a href="https://github.com/catchorg/Catch2" target="_blank" rel="noopener">Catch2</a>,by catchorg.</li><li><a href="https://segmentfault.com/q/1010000002412786" target="_blank" rel="noopener">C++单元测试入门</a>,by pezy.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在编写一个飞行力学的类库，随着类数量的增加，代码越来越复杂，质量越来越难以控制，因此引入单元测试，通过自动化测试以保障代码质量，防止因代码修改引入新的Bug。C++已经有一些成熟的代码测试框架，例如：Google Test, Boost.Test, CppUnit, C
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>四元数与旋转矩阵</title>
    <link href="https://huangwang.github.io/2020/01/15/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/"/>
    <id>https://huangwang.github.io/2020/01/15/四元数与旋转矩阵/</id>
    <published>2020-01-15T11:26:04.000Z</published>
    <updated>2020-01-15T14:11:30.931Z</updated>
    
    <content type="html"><![CDATA[<p>四元数是由爱尔兰数学家威廉·卢云·哈密顿在1843年创立出的数学概念。单位四元数（Unit quaternion）可以用于表示三维空间里的旋转。它与常用的另外两种表示方式（三维正交矩阵和欧拉角）是等价的，但是避免了欧拉角表示法中的万向锁问题。比起三维正交矩阵表示，四元数表示能够更方便地给出旋转的转轴与旋转角。</p><h1 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h1><p>欧拉角（Euler Angles）是一种描述三维旋转的方式，根据欧拉旋转定理，任何一个旋转都可以用三个旋转的参数来表示。但欧拉角的描述方式有很多种，并没有一个统一标准。对于定义一个欧拉角，需要明确的内容包括：</p><ol><li>三个旋转角的组合方式（是xyz还是yzx还是zxy）</li><li>旋转角度的参考坐标系统（旋转是相对于固定的坐标系还是相对于自身的坐标系）</li><li>使用旋转角度是左手系还是右手系</li><li>三个旋转角的记法</li></ol><h2 id="旋转角的记法"><a href="#旋转角的记法" class="headerlink" title="旋转角的记法"></a>旋转角的记法</h2><div class="table-container"><table><thead><tr><th>顺序</th><th>飞行器</th><th>望远镜</th><th>符号</th><th>角速度</th></tr></thead><tbody><tr><td>第一</td><td>heading</td><td>azimuth</td><td>$θ$</td><td>yaw</td></tr><tr><td>第二</td><td>attitude</td><td>elevation</td><td>$ϕ$</td><td>pitch</td></tr><tr><td>第三</td><td>bank</td><td>tilt</td><td>$ψ$</td><td>roll</td></tr></tbody></table></div><h1 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h1><p>对于两个三维点 $p_1(x_1, y_1, z_1)$，$p_2(x_2,y_2,z_2)$，由点 $p_1$ 经过旋转矩阵 $R$ 旋转到 $p_2$，则有：</p><script type="math/tex; mode=display">R = \left[ \begin{matrix} r_{11}  & r_{12} & r_{13}\\r_{21}  & r_{22} & r_{23}\\r_{31}  & r_{32} & r_{33}\end{matrix} \right]</script><script type="math/tex; mode=display">\left[ \begin{matrix}x_2 \\y_2 \\z_2 \end{matrix} \right] = R\left[ \begin{matrix}x_1 \\y_1 \\z_1 \end{matrix} \right]</script><p>注：旋转矩阵为正交矩阵$RR^T=E$</p><ul><li>绕x轴旋转：</li></ul><script type="math/tex; mode=display">R_x(\theta) = \left[ \begin{matrix} 1  & 0 & 0\\0  & cos\theta & -sin\theta\\0  & sin\theta & cos\theta\end{matrix} \right]</script><ul><li>绕y轴旋转:</li></ul><script type="math/tex; mode=display">R_y(\theta) = \left[ \begin{matrix} cos\theta  & 0 & sin\theta\\0  & 1 & 0\\-sin\theta  & 0 & cos\theta\end{matrix} \right]</script><ul><li>绕z轴旋转：</li></ul><script type="math/tex; mode=display">R_z(\theta) = \left[ \begin{matrix} cos\theta  & -sin\theta & 0\\sin\theta  & cos\theta & 0\\0  & 0 & 1\end{matrix} \right]</script><ul><li>任意旋转矩阵：</li></ul><p>任何一个旋转可以表示为依次绕着三个旋转轴旋三个角度的组合。这三个角度称为<strong>欧拉角</strong>。</p><h2 id="由欧拉角求旋转矩阵"><a href="#由欧拉角求旋转矩阵" class="headerlink" title="由欧拉角求旋转矩阵"></a>由欧拉角求旋转矩阵</h2><p>设三个轴$x，y，z$的欧拉角分别为$θ_x,θ_y,θ_z$，正弦值、余弦值分别为$s_x, c_x, s_y, c_y, s_z, c_z$那么旋转矩阵为：</p><script type="math/tex; mode=display">R(\theta_x,\theta_y,\theta_z)=R_z(\theta_z)R_y(\theta_y)R_x(\theta_x) = \left[ \begin{matrix} c_y c_z  & c_z s_x s_y - c_x s_z & s_x s_z + c_x c_z s_y\\c_y s_z  & c_x c_z + s_x s_y s_z & c_x s_y s_z - c_z s_z\\-s_y  & c_y s_x & c_x c_y\end{matrix} \right]</script><h2 id="由旋转矩阵求欧拉角"><a href="#由旋转矩阵求欧拉角" class="headerlink" title="由旋转矩阵求欧拉角"></a>由旋转矩阵求欧拉角</h2><script type="math/tex; mode=display">R = \left[ \begin{matrix} r_{11}  & r_{12} & r_{13}\\r_{21}  & r_{22} & r_{23}\\r_{31}  & r_{32} & r_{33}\end{matrix} \right] = \left[ \begin{matrix} c_y c_z  & c_z s_x s_y - c_x s_z & s_x s_z + c_x c_z s_y\\c_y s_z  & c_x c_z + s_x s_y s_z & c_x s_y s_z - c_z s_z\\-s_y  & c_y s_x & c_x c_y\end{matrix} \right]</script><p>解方程可得：</p><script type="math/tex; mode=display">\theta_x = atan2(r_{32}, r_{33})</script><script type="math/tex; mode=display">\theta_y = atan2(-r_{31}, \sqrt{r_{32}^2+r_{33}^2})</script><script type="math/tex; mode=display">\theta_z = atan2(r_{21}, r_{11})</script><p>注意：atan2()为C++中的函数，atan2(y，x) 求的是y/x的反正切，其返回值为[-pi,+pi]之间的一个数。</p><h1 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h1><p>三维空间的任意旋转，都可以用绕三维空间的某个轴旋转过某个角度来表示，即所谓的Axis-Angle表示方法。这种表示方法里，Axis可用一个三维向量$(x,y,z)$来表示，$θ$可以用一个角度值来表示，直观来讲，一个四维向量$(θ,x,y,z)$就可以表示出三维空间任意的旋转。注意，这里的三维向量$(x,y,z)$只是用来表示axis的方向朝向，因此更紧凑的表示方式是用一个单位向量来表示方向axis，而用该三维向量的长度来表示角度值$θ$。这样以来，可以用一个三维向量$(θ∗x,θ∗y,θ∗z)$就可以表示出三维空间任意的旋转，前提是其中$(x,y,z)$是单位向量。这就是旋转向量(Rotation Vector)的表示方式，OpenCV里大量使用的就是这种表示方法来表示旋转(见OpenCV相机标定部分的rvec)。</p><ul><li>单位向量(x,y,z)旋转θ角度后的四元数：</li></ul><script type="math/tex; mode=display">(cos \frac{\theta}{2}, x*sin \frac{\theta}{2}, y*sin \frac{\theta}{2}, z*sin \frac{\theta}{2})</script><ul><li>对于三维坐标的旋转，可以通过四元数乘法直接操作，与旋转矩阵操作可以等价，但是表示方式更加紧凑，计算量也可以小一些。</li></ul><h2 id="四元数求旋转矩阵"><a href="#四元数求旋转矩阵" class="headerlink" title="四元数求旋转矩阵"></a>四元数求旋转矩阵</h2><p>已知四元数:</p><script type="math/tex; mode=display">\mathbf{q} = q_0 +  q_1 i + q_2 j + q_3 k = [s, \mathbf{v}]</script><p>利用Rodrigues公式可以由四元数求得旋转矩阵R:</p><script type="math/tex; mode=display">R = \left[ \begin{matrix} 1 - 2 q_2^2 - 2 q_3^2 & 2q_1 q_2 - 2q_0 q_3 & 2 q_1 q_3 + 2 q_0 q_2 \\2q_1 q_2 + 2q_0 q_3 & 1 - 2 q_1^2 - 2 q_3^2 & 2 q_2 q_3 - 2 q_0 q_1 \\2 q_1 q_3 - 2 q_0 q_2 & 2 q_2 q_3 + 2 q_0 q_1 & 1 - 2 q_1^2 - 2 q_2^2\end{matrix} \right ]</script><h2 id="旋转矩阵求四元数"><a href="#旋转矩阵求四元数" class="headerlink" title="旋转矩阵求四元数"></a>旋转矩阵求四元数</h2><p>给出其中一种情况的计算方法：</p><script type="math/tex; mode=display">q_0 = \frac{\sqrt{1+r_{11}+r_{22}+r_{33}}}{2}</script><script type="math/tex; mode=display">q_1 = \frac{r_{32}-r_{23}}{4q_0}</script><script type="math/tex; mode=display">q_2 = \frac{r_{13}-r_{31}}{4q_0}</script><script type="math/tex; mode=display">q_3 = \frac{r_{21}-r_{12}}{4q_0}</script><p>其中要满足 $q<em>0 \neq 0$，$1+r</em>{11}+r<em>{22}+r</em>{33}&gt;0$，即 $1+tr(R)&gt;0$</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B8" target="_blank" rel="noopener">四元数</a>,by wikipedia.</li><li><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E6%97%8B%E8%BD%AC" target="_blank" rel="noopener">四元数与空间旋转</a>,by wikipedia.</li><li><a href="http://www.p-chao.com/2017-08-29/%E4%BB%8E%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97%E6%AC%A7%E6%8B%89%E8%A7%92/" target="_blank" rel="noopener">从旋转矩阵计算欧拉角</a>,by PengChao.</li><li><a href="https://blog.csdn.net/csxiaoshui/article/details/65446125" target="_blank" rel="noopener">旋转变换（一）旋转矩阵</a>,by csxiaoshui.</li><li><a href="https://blog.csdn.net/lql0716/article/details/72597719" target="_blank" rel="noopener">旋转矩阵、欧拉角、四元数理论及其转换关系</a>,by jason_ql.</li><li><a href="https://blog.csdn.net/csxiaoshui/article/details/65437633" target="_blank" rel="noopener">旋转变换（二）欧拉角</a>,by csxiaoshui.</li><li><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="noopener">欧拉角</a>,by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/85108850" target="_blank" rel="noopener">欧拉角细节/旋转顺序/内旋外旋</a>,by 能儿.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;四元数是由爱尔兰数学家威廉·卢云·哈密顿在1843年创立出的数学概念。单位四元数（Unit quaternion）可以用于表示三维空间里的旋转。它与常用的另外两种表示方式（三维正交矩阵和欧拉角）是等价的，但是避免了欧拉角表示法中的万向锁问题。比起三维正交矩阵表示，四元数表示
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="数学" scheme="https://huangwang.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>JSBSim源代码分析</title>
    <link href="https://huangwang.github.io/2020/01/13/JSBSim%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://huangwang.github.io/2020/01/13/JSBSim源代码分析/</id>
    <published>2020-01-13T10:07:09.000Z</published>
    <updated>2020-01-13T12:59:14.720Z</updated>
    
    <content type="html"><![CDATA[<p>JSBSim是一个开源跨平台的飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。JSBSim可以独立运行，通过命令行参数指定飞行器和初始状态，进行简单情境下的飞行动力学仿真，也可以将JSBSim作为代码库，编程实现飞行器模型加载，设置输入，获得输出。下面将通过分析JSBSim源代码，研究其实现通用飞行动力学模型的方法。</p><h1 id="入口分析"><a href="#入口分析" class="headerlink" title="入口分析"></a>入口分析</h1><p>下面是JSBSim参考手册中的最简单实例，因JSBSim的不断开发，JSBSim参考手册中该编程实例有点过时，因此进行了少量修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;FGFDMExec.h&gt;</span><br><span class="line">#include &lt;sg_path.hxx&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  JSBSim::FGFDMExec FDMExec;</span><br><span class="line">  bool result = true;</span><br><span class="line"> </span><br><span class="line">  FDMExec.LoadScript(SGPath::fromUtf8(argv[1]));</span><br><span class="line"> </span><br><span class="line">  while (result) result = FDMExec.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可知，调用JSBSim的主要方法是利用FGFDMExec类，通过实例化一个FGFDMExec类，就相当于获得了一个运行JSBSim仿真的工具箱，通过这个工具箱就可以调用JSBSim的大部分功能，实现我们要的仿真目标。同时FGFDMExec类通过加载外部飞机的XML脚本，实现飞行动力学模型的通用性。</p><h1 id="JSBSim初始化流程"><a href="#JSBSim初始化流程" class="headerlink" title="JSBSim初始化流程"></a>JSBSim初始化流程</h1><p>上述JSBSim最简仿真示例中已包含其初始化流程，采用图示如下：</p><p align="center">    <img src="images/initialization.jpg" width="80%" alt="JSBSim初始化流程"></p><center>图1 JSBSim初始化流程</center><h2 id="FGFDMExec初始化"><a href="#FGFDMExec初始化" class="headerlink" title="FGFDMExec初始化"></a>FGFDMExec初始化</h2><p>FGFDMExec类在其构造函数中对各个模型进行初始化，具体代码在Allocate函数中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FGFDMExec::FGFDMExec(FGPropertyManager* root, unsigned int* fdmctr)</span><br><span class="line">  : Root(root), RandomEngine(new default_random_engine), FDMctr(fdmctr)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  try &#123;</span><br><span class="line">    Allocate();</span><br><span class="line">  &#125; catch (const string&amp; msg ) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Caught error: &quot; &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Allocate函数代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">bool FGFDMExec::Allocate(void)</span><br><span class="line">&#123;</span><br><span class="line">  bool result=true;</span><br><span class="line"></span><br><span class="line">  Models.resize(eNumStandardModels);</span><br><span class="line"></span><br><span class="line">  // First build the inertial model since some other models are relying on</span><br><span class="line">  // the inertial model and the ground callback to build themselves.</span><br><span class="line">  // Note that this does not affect the order in which the models will be</span><br><span class="line">  // executed later.</span><br><span class="line">  Models[eInertial]          = new FGInertial(this);</span><br><span class="line"></span><br><span class="line">  // See the eModels enum specification in the header file. The order of the</span><br><span class="line">  // enums specifies the order of execution. The Models[] vector is the primary</span><br><span class="line">  // storage array for the list of models.</span><br><span class="line">  Models[ePropagate]         = new FGPropagate(this);</span><br><span class="line">  Models[eInput]             = new FGInput(this);</span><br><span class="line">  Models[eAtmosphere]        = new FGStandardAtmosphere(this);</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  // Assign the Model shortcuts for internal executive use only.</span><br><span class="line">  Propagate = (FGPropagate*)Models[ePropagate];</span><br><span class="line">  Inertial = (FGInertial*)Models[eInertial];</span><br><span class="line">  Atmosphere = (FGAtmosphere*)Models[eAtmosphere];</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  // Initialize planet (environment) constants</span><br><span class="line">  LoadPlanetConstants();</span><br><span class="line"></span><br><span class="line">  // Initialize models</span><br><span class="line">  for (unsigned int i = 0; i &lt; Models.size(); i++) &#123;</span><br><span class="line">    // The Input/Output models must not be initialized prior to IC loading</span><br><span class="line">    if (i == eInput || i == eOutput) continue;</span><br><span class="line"></span><br><span class="line">    LoadInputs(i);</span><br><span class="line">    Models[i]-&gt;InitModel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Allocate函数代码中需要注意LoadInputs函数，该函数决定各个子模型的初始化顺序，确定各个子模型的输入输出，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">void FGFDMExec::LoadInputs(unsigned int idx)</span><br><span class="line">&#123;</span><br><span class="line">  switch(idx) &#123;</span><br><span class="line">  case ePropagate:</span><br><span class="line">    Propagate-&gt;in.vPQRidot     = Accelerations-&gt;GetPQRidot();</span><br><span class="line">    Propagate-&gt;in.vUVWidot     = Accelerations-&gt;GetUVWidot();</span><br><span class="line">    Propagate-&gt;in.DeltaT       = dT;</span><br><span class="line">    break;</span><br><span class="line">  case eInput:</span><br><span class="line">    break;</span><br><span class="line">  case eInertial:</span><br><span class="line">    Inertial-&gt;in.Position      = Propagate-&gt;GetLocation();</span><br><span class="line">    break;</span><br><span class="line">  case eAtmosphere:</span><br><span class="line">    Atmosphere-&gt;in.altitudeASL = Propagate-&gt;GetAltitudeASL();</span><br><span class="line">    break;</span><br><span class="line">  case eWinds:</span><br><span class="line">    Winds-&gt;in.AltitudeASL      = Propagate-&gt;GetAltitudeASL();</span><br><span class="line">    Winds-&gt;in.DistanceAGL      = Propagate-&gt;GetDistanceAGL();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eAuxiliary:</span><br><span class="line">    Auxiliary-&gt;in.Pressure     = Atmosphere-&gt;GetPressure();</span><br><span class="line">    Auxiliary-&gt;in.Density      = Atmosphere-&gt;GetDensity();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eSystems:</span><br><span class="line">    // Dynamic inputs come into the components that FCS manages through properties</span><br><span class="line">    break;</span><br><span class="line">  case ePropulsion:</span><br><span class="line">    Propulsion-&gt;in.Pressure         = Atmosphere-&gt;GetPressure();</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    break;</span><br><span class="line">  case eAerodynamics:</span><br><span class="line">    Aerodynamics-&gt;in.Alpha     = Auxiliary-&gt;Getalpha();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eGroundReactions:</span><br><span class="line">    // There are no external inputs to this model.</span><br><span class="line">    GroundReactions-&gt;in.Vground         = Auxiliary-&gt;GetVground();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eExternalReactions:</span><br><span class="line">    // There are no external inputs to this model.</span><br><span class="line">    break;</span><br><span class="line">  case eBuoyantForces:</span><br><span class="line">    BuoyantForces-&gt;in.Density     = Atmosphere-&gt;GetDensity();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eMassBalance:</span><br><span class="line">    MassBalance-&gt;in.GasInertia  = BuoyantForces-&gt;GetGasMassInertia();</span><br><span class="line">    MassBalance-&gt;in.GasMass     = BuoyantForces-&gt;GetGasMass();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eAircraft:</span><br><span class="line">    Aircraft-&gt;in.AeroForce     = Aerodynamics-&gt;GetForces();</span><br><span class="line">    Aircraft-&gt;in.PropForce     = Propulsion-&gt;GetForces();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eAccelerations:</span><br><span class="line">    Accelerations-&gt;in.J        = MassBalance-&gt;GetJ();</span><br><span class="line">    Accelerations-&gt;in.Jinv     = MassBalance-&gt;GetJinv();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FGFDMExec加载飞机配置"><a href="#FGFDMExec加载飞机配置" class="headerlink" title="FGFDMExec加载飞机配置"></a>FGFDMExec加载飞机配置</h2><p>FGFDMExec的LoadScript函数在初始化时负责加载飞机配置，用于初始化各个子模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool FGFDMExec::LoadScript(const SGPath&amp; script, double deltaT,</span><br><span class="line">                           const SGPath&amp; initfile)</span><br><span class="line">&#123;</span><br><span class="line">  bool result;</span><br><span class="line"></span><br><span class="line">  Script = new FGScript(this);</span><br><span class="line">  result = Script-&gt;LoadScript(GetFullPath(script), deltaT, initfile);</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FGFDMExec运行"><a href="#FGFDMExec运行" class="headerlink" title="FGFDMExec运行"></a>FGFDMExec运行</h2><p>FGFDMExec的Run函数负责飞行动力学模型的计算，其代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bool FGFDMExec::Run(void)</span><br><span class="line">&#123;</span><br><span class="line">  bool success=true;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  // returns true if success, false if complete</span><br><span class="line">  if (Script != 0 &amp;&amp; !IntegrationSuspended()) success = Script-&gt;RunScript();</span><br><span class="line"></span><br><span class="line">  for (unsigned int i = 0; i &lt; Models.size(); i++) &#123;</span><br><span class="line">    LoadInputs(i);</span><br><span class="line">    Models[i]-&gt;Run(holding);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FGFDMExec的Run函数将依次调用各个子模型的Run函数。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://huangwang.github.io/2019/03/27/JSBSim%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%85%A5%E9%97%A8/">JSBSim编程实践之入门</a>,by jackhuang.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JSBSim是一个开源跨平台的飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。JSBSim可以独立运行，通过命令行参数指定飞行器和初始状态，进行简单情境下的飞行动力学仿真，也可以将
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行仿真" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法总结</title>
    <link href="https://huangwang.github.io/2020/01/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://huangwang.github.io/2020/01/05/排序算法总结/</id>
    <published>2020-01-05T12:59:32.000Z</published>
    <updated>2020-01-05T13:10:49.790Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法是计算机科学的基石之一，可从时间复杂度、空间复杂度、稳定性、是否原地排序等维度对排序算法进行分类。下面从时间复杂度方面对排序算法进行分类。</p><h1 id="O-n-2-算法"><a href="#O-n-2-算法" class="headerlink" title="O(n^2)算法"></a>O(n^2)算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h1 id="O-nlogn-算法"><a href="#O-nlogn-算法" class="headerlink" title="O(nlogn)算法"></a>O(nlogn)算法</h1><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h1 id="O-n-算法"><a href="#O-n-算法" class="headerlink" title="O(n)算法"></a>O(n)算法</h1><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/99273811" target="_blank" rel="noopener">漫画：“排序算法” 大总结</a>,by 小灰.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;排序算法是计算机科学的基石之一，可从时间复杂度、空间复杂度、稳定性、是否原地排序等维度对排序算法进行分类。下面从时间复杂度方面对排序算法进行分类。&lt;/p&gt;
&lt;h1 id=&quot;O-n-2-算法&quot;&gt;&lt;a href=&quot;#O-n-2-算法&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="数据结构" scheme="https://huangwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://huangwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Pandas入门教程</title>
    <link href="https://huangwang.github.io/2020/01/02/Pandas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2020/01/02/Pandas入门教程/</id>
    <published>2020-01-02T11:56:45.000Z</published>
    <updated>2020-01-03T12:09:04.281Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas是一个开源的，BSD许可的库，为Python编程语言提供高性能，易于使用的数据结构和数据分析工具。</p><h1 id="Pandas特色"><a href="#Pandas特色" class="headerlink" title="Pandas特色"></a>Pandas特色</h1><p>Pandas 适用于处理以下类型的数据：</p><ul><li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li><li>有序和无序（非固定频率）的时间序列数据;</li><li>带行列标签的矩阵数据，包括同构或异构型数据;</li><li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li></ul><h1 id="Pandas数据结构"><a href="#Pandas数据结构" class="headerlink" title="Pandas数据结构"></a>Pandas数据结构</h1><p>Pandas 的主要数据结构是 Series（一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 NumPy 开发，可以与其它第三方科学计算支持库完美集成。</p><div class="table-container"><table><thead><tr><th>维数</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>Series</td><td>带标签的一维同构数组</td></tr><tr><td>2</td><td>DataFrame</td><td>带标签的，大小可变的，二维异构表格</td></tr></tbody></table></div><h1 id="Pandas用法"><a href="#Pandas用法" class="headerlink" title="Pandas用法"></a>Pandas用法</h1><p>Pandas用法与Matlab中矩阵操作很类似，熟悉Matlab操作的同学可以很快上手Pandas。</p><h2 id="生成对象"><a href="#生成对象" class="headerlink" title="生成对象"></a>生成对象</h2><p>生成Series对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])</span><br><span class="line"></span><br><span class="line">In [4]: s</span><br><span class="line">Out[4]: </span><br><span class="line">0    1.0</span><br><span class="line">1    3.0</span><br><span class="line">2    5.0</span><br><span class="line">3    NaN</span><br><span class="line">4    6.0</span><br><span class="line">5    8.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>生成DataFrame对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(&apos;ABCD&apos;))</span><br><span class="line"></span><br><span class="line">In [8]: df</span><br><span class="line">Out[8]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文</a>,by pypandas.</li><li><a href="https://www.pypandas.cn/docs/getting_started/10min.html#%E7%94%9F%E6%88%90%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">十分钟入门 Pandas</a>,by pypandas.</li><li><a href="https://blog.csdn.net/m0_37829442/article/details/100853879" target="_blank" rel="noopener">Python读取csv文件的三种方式</a>,by 涛声依旧2019.</li><li><a href="https://blog.csdn.net/BabyFish13/article/details/54576674" target="_blank" rel="noopener">Python模块化开发组织代码程序示例</a>,by BabyFish13.</li><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">Python最佳实践指南！</a>,by Prodesire.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pandas是一个开源的，BSD许可的库，为Python编程语言提供高性能，易于使用的数据结构和数据分析工具。&lt;/p&gt;
&lt;h1 id=&quot;Pandas特色&quot;&gt;&lt;a href=&quot;#Pandas特色&quot; class=&quot;headerlink&quot; title=&quot;Pandas特色&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>jupyter notebook安装与使用</title>
    <link href="https://huangwang.github.io/2019/12/31/jupyter_notebook%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://huangwang.github.io/2019/12/31/jupyter_notebook安装与使用/</id>
    <published>2019-12-31T00:13:16.000Z</published>
    <updated>2019-12-31T00:32:57.268Z</updated>
    
    <content type="html"><![CDATA[<p>Jupyter Notebook（前身是IPython Notebook）是一个基于Web的交互式计算环境，用于创建Jupyter Notebook文档。Notebook一词可以通俗地引用许多不同的实体，主要是Jupyter Web应用程序、Jupyter Python Web服务器或Jupyter文档格式（取决于上下文）。Jupyter Notebook文档是一个JSON文档，遵循版本化模式，包含一个有序的输入/输出单元格列表，这些单元格可以包含代码、文本（使用Markdown语言）、数学、图表和富媒体，通常以“.ipynb”结尾扩展。</p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul><li>python&gt;3.3 或者python=2.7</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install notebook</span><br></pre></td></tr></table></figure><h1 id="启动Jupyter-Notebook"><a href="#启动Jupyter-Notebook" class="headerlink" title="启动Jupyter Notebook"></a>启动Jupyter Notebook</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/Jupyter" target="_blank" rel="noopener">Jupyter</a>,by wikipedia.</li><li><a href="https://jupyter.org/install.html" target="_blank" rel="noopener">Installing the Jupyter Software</a>,by jupyter.</li><li><a href="https://stackoverflow.com/questions/25333732/matplotlib-animation-not-working-in-ipython-notebook-blank-plot" target="_blank" rel="noopener">Matplotlib animation not working in IPython Notebook (blank plot)</a>,by stackoverflow.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jupyter Notebook（前身是IPython Notebook）是一个基于Web的交互式计算环境，用于创建Jupyter Notebook文档。Notebook一词可以通俗地引用许多不同的实体，主要是Jupyter Web应用程序、Jupyter Python W
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="python" scheme="https://huangwang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式入门</title>
    <link href="https://huangwang.github.io/2019/12/30/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>https://huangwang.github.io/2019/12/30/JavaScript正则表达式入门/</id>
    <published>2019-12-30T12:42:50.000Z</published>
    <updated>2019-12-31T11:31:55.700Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习逐行剖析 Vue.js 源码的时候，发现Vuejs在模板编译时大量使用正则表达式。因此，将正则表达式的知识再温习一下。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、matchAll、replace、search 和 split 方法。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>正则表达式中的特殊字符:</p><h3 id=""><a href="#" class="headerlink" title="\"></a>\</h3><p>依照下列规则匹配：</p><p>在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 “\” 的 “b” 通常匹配小写字母 “b”，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 “\”，它将不再匹配任何字符，而是表示一个字符边界。</p><p>在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 “转义（Escaping）” 部分。</p><p>如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。/[a-z]\s/i 和 new RegExp(“[a-z]\s”, “i”) 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（\s 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和表达式级别都对它进行转义。例如 /[a-z]:\/i 和 new RegExp(“[a-z]:\\“,”i”) 会创建相同的表达式，即匹配类似 “C:\” 字符串。</p><h3 id="-1"><a href="#-1" class="headerlink" title="^"></a>^</h3><p>匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。</p><p>例如，/^A/ 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。</p><p>当 ‘^’ 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。反向字符集合 一节有详细介绍和示例。</p><h3 id="-2"><a href="#-2" class="headerlink" title="$"></a>$</h3><p>匹配输入的结束。如果多行标示被设置为 true，那么也匹配换行符前的位置。</p><p>例如，/t$/ 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</p><h3 id="-3"><a href="#-3" class="headerlink" title="*"></a>*</h3><p>匹配前一个表达式 0 次或多次。等价于 {0,}。</p><p>例如，/bo*/ 会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</p><h3 id="-4"><a href="#-4" class="headerlink" title="+"></a>+</h3><p>匹配前面一个表达式 1 次或者多次。等价于 {1,}。</p><p>例如，/a+/ 会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’，但是在 “cndy” 中不会匹配任何内容。</p><h3 id="-5"><a href="#-5" class="headerlink" title="?"></a>?</h3><p>匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。</p><p>例如，/e?le?/ 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。</p><p>如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。例如，对 “123abc” 使用 /\d+/ 将会匹配 “123”，而使用 /\d+?/ 则只会匹配到 “1”。</p><p>还用于先行断言中，如本表的 x(?=y) 和 x(?!y) 条目所述。</p><h3 id="-6"><a href="#-6" class="headerlink" title="."></a>.</h3><p>小数点）默认匹配除换行符之外的任何单个字符。</p><p>例如，/.n/ 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。</p><p>如果 s (“dotAll”) 标志位被设为 true，它也会匹配换行符。</p><h3 id="n"><a href="#n" class="headerlink" title="\n"></a>\n</h3><p>在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。</p><p>比如 /apple(,)\sorange\1/ 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</p><h3 id="s"><a href="#s" class="headerlink" title="\s"></a>\s</h3><p>匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[ \f\n\r\t\v\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]。</p><p>例如, /\s\w*/ 匹配”foo bar.”中的’ bar’。</p><h3 id="w"><a href="#w" class="headerlink" title="\w"></a>\w</h3><p>匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。</p><p>例如, /\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p><h3 id="W"><a href="#W" class="headerlink" title="\W"></a>\W</h3><p>匹配一个非单字字符。等价于 <sup><a href="#fn_A-Za-z0-9_" id="reffn_A-Za-z0-9_">A-Za-z0-9_</a></sup>。</p><p>例如, /\W/ 或者 /<sup><a href="#fn_A-Za-z0-9_" id="reffn_A-Za-z0-9_">A-Za-z0-9_</a></sup>/ 匹配 “50%.” 中的 ‘%’。</p><h3 id="x"><a href="#x" class="headerlink" title="(x)"></a>(x)</h3><p>像下面的例子展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为捕获括号。</p><p>模式 /(foo) (bar) \1 \2/ 中的 ‘(foo)’ 和 ‘(bar)’ 匹配并记住字符串 “foo bar foo bar” 中前两个单词。模式中的 \1 和 \2 表示第一个和第二个被捕获括号匹配的子字符串，即 foo 和 bar，匹配了原字符串中的后两个单词。注意 \1、\2、…、\n 是用在正则表达式的匹配环节，详情可以参阅后文的 \n 条目。而在正则表达式的替换环节，则要使用像 $1、$2、…、$n 这样的语法，例如，’bar foo’.replace(/(…) (…)/, ‘$2 $1’)。$&amp; 表示整个用于匹配的原字符串。</p><h2 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h2><div class="table-container"><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>g</td><td>全局搜索。</td></tr><tr><td>i</td><td>不区分大小写搜索。</td></tr><tr><td>m</td><td>多行搜索。</td></tr><tr><td>s</td><td>允许 . 匹配换行符。</td></tr><tr><td>u</td><td>使用unicode码的模式进行匹配。</td></tr><tr><td>y</td><td>执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标</td><td>志。</td></tr></tbody></table></div><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>正则表达式可以被用于 RegExp 的 exec 和 test 方法以及 String 的 match、replace、search 和 split 方法。使用正则表达式的方法如下：</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>exec</td><td>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</td></tr><tr><td>test</td><td>一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。</td></tr><tr><td>match</td><td>一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</td></tr><tr><td>matchAll</td><td>一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</td></tr><tr><td>search</td><td>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td></tr><tr><td>replace</td><td>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td>split</td><td>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</td></tr></tbody></table></div><h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><div class="table-container"><table><thead><tr><th>对象</th><th>属性或索引</th><th>描述</th><th>在例子中对应的值</th></tr></thead><tbody><tr><td>myArray</td><td></td><td>匹配到的字符串和所有被记住的子字符串。</td><td>[“dbbd”, “bb”]</td></tr><tr><td>myArray</td><td>index</td><td>在输入的字符串中匹配到的以0开始的索引值。</td><td>1</td></tr><tr><td>myArray</td><td>input</td><td>初始字符串。</td><td>“cdbbdbsbz”</td></tr><tr><td>myArray</td><td>[0]</td><td>匹配到的所有字符串（并不是匹配后记住的字符串）。注：原文”The last matched characters.”，应该是原版错误。匹配到的最终字符。</td><td>“dbbd”</td></tr><tr><td>myRe</td><td>lastIndex</td><td>下一个匹配的索引值。（这个属性只有在使用g参数时可用在 通过参数进行高级搜索 一节有详细的描述.)</td><td>5</td></tr><tr><td>myRe</td><td>source</td><td>模式文本。在正则表达式创建时更新，不执行。</td><td>“d(b+)d”</td></tr></tbody></table></div><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var re = /\w+\s/g;</span><br><span class="line">var str = &quot;fee fi fo fum&quot;;</span><br><span class="line">var myArray = str.match(re);</span><br><span class="line">console.log(myArray);</span><br><span class="line"></span><br><span class="line">// [&quot;fee &quot;, &quot;fi &quot;, &quot;fo &quot;]</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://nlrx-wjc.github.io/Learn-Vue-Source-Code/" target="_blank" rel="noopener">逐行剖析 Vue.js 源码</a>,by nlrx.</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式</a>,by mozilla.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习逐行剖析 Vue.js 源码的时候，发现Vuejs在模板编译时大量使用正则表达式。因此，将正则表达式的知识再温习一下。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="前端" scheme="https://huangwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://huangwang.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>编译原理学习笔记</title>
    <link href="https://huangwang.github.io/2019/12/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2019/12/29/编译原理学习笔记/</id>
    <published>2019-12-29T12:34:24.000Z</published>
    <updated>2019-12-29T12:41:12.660Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理是计算机专业的一门重要专业课，旨在介绍编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生成、存储管理、代码优化和目标代码生成。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>词法分析 </li></ul><p>从左到右逐个字符地扫描，从中识别出一个个“单词”符号。“单词”符号是程序设计语言的基本语法单位，如关键字、标识符、常数、运算符和分隔符等。</p><ul><li>语法分析 </li></ul><p>根据语言的语法规则将单词符号序列分解成各类语法单位，比如表达式、语句和程序等。语法规则就是各类语法单位的构成规则。通过语法分析确定整个输入串是否构成一个语法上正确的程序。</p><ul><li>语义分析 </li></ul><p>检查源程序是否包含静态语义错误，并收集类型信息供后面的代码生成阶段使用。只有语法和语义都正确的源程序才能被翻译成正确的目标代码。</p><p>语义分析的一个主要工作是进行类型分析和检查。程序语言中的一个数据类型一般包含两个方面的内容：类型的载体及其上的运算。例如：整除取余运算只能对整型数据进行运算，若其运算对象中有浮点数就认为是类型不匹配的错误。静态的语义错误是指编译程序可以发现，动态的语义错误是指源程序虽然能够被编译和执行，但是结果不对，一般是逻辑上的错误。</p><h1 id="编译的过程"><a href="#编译的过程" class="headerlink" title="编译的过程"></a>编译的过程</h1><p>编译程序的工作过程一般可以分为5个阶段：</p><ol><li>词法分析</li><li>语法分析</li><li>语义分析和中间代码的产生</li><li>优化</li><li>目标代码生成</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://jartto.wang/2018/11/17/about-ast/" target="_blank" rel="noopener">AST 抽象语法树</a>,by Jartto.</li><li><a href="https://blog.csdn.net/cflys/article/details/71274116" target="_blank" rel="noopener">【编译原理】编译原理简单介绍</a>,by cflys.</li><li><a href="https://github.com/junhey/softwareDesigner/wiki/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">编译原理</a>,by junhey.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编译原理是计算机专业的一门重要专业课，旨在介绍编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生成、存储管理、代码优化和目标代码生成。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
      <category term="语法" scheme="https://huangwang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>3D模型动画分类及其使用</title>
    <link href="https://huangwang.github.io/2019/12/28/3D%E6%A8%A1%E5%9E%8B%E5%8A%A8%E7%94%BB%E5%88%86%E7%B1%BB%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://huangwang.github.io/2019/12/28/3D模型动画分类及其使用/</id>
    <published>2019-12-28T12:35:32.000Z</published>
    <updated>2019-12-28T13:05:19.180Z</updated>
    
    <content type="html"><![CDATA[<p>3DMax、Blender之类的3D建模软件易学难精，其原因在于很多人不了解其背后的计算机图形学原理。因此，掌握相关的计算机图形学原理和知识，对于我们熟练运用3D建模软件是十分必要的。下面简单介绍3D模型的分类及其使用方法。</p><h1 id="3D模型动画分类"><a href="#3D模型动画分类" class="headerlink" title="3D模型动画分类"></a>3D模型动画分类</h1><blockquote><p><strong>3D模型动画的基本原理是让模型中各顶点的位置随时间变化。</strong> 主要种类有Morph（变形）动画，关节动画和骨骼蒙皮动画(SkinnedMesh)。从动画数据的角度来说，三者一般都采用关键帧技术，即只给出关键帧的数据，其他帧的数据使用插值得到。但由于这三种技术的不同，关键帧的数据是不一样的。</p></blockquote><h2 id="变形动画"><a href="#变形动画" class="headerlink" title="变形动画"></a>变形动画</h2><blockquote><p>Morph（渐变，变形）动画是直接指定动画每一帧的顶点位置，其动画关键中存储的是Mesh所有顶点在关键帧对应时刻的位置。</p></blockquote><h2 id="关节动画"><a href="#关节动画" class="headerlink" title="关节动画"></a>关节动画</h2><blockquote><p>关节动画的模型不是一个整体的Mesh,而是分成很多部分(Mesh)，通过一个父子层次结构将这些分散的Mesh组织在一起，父Mesh带动其下子Mesh的运动，各Mesh中的顶点坐标定义在自己的坐标系中，这样各个Mesh是作为一个整体参与运动的。</p><p>动画帧中设置各子Mesh相对于其父Mesh的变换（主要是旋转，当然也可包括移动和缩放），通过子到父，一级级的变换累加（当然从技术上，如果是矩阵操作是累乘）得到该Mesh在整个动画模型所在的坐标空间中的变换（从本文的视角来说就是世界坐标系了，下同），从而确定每个Mesh在世界坐标系中的位置和方向，然后以Mesh为单位渲染即可。</p><p>关节动画的问题是，各部分Mesh中的顶点是固定在其Mesh坐标系中的，这样在两个Mesh结合处就可能产生裂缝。</p></blockquote><h2 id="骨骼蒙皮动画"><a href="#骨骼蒙皮动画" class="headerlink" title="骨骼蒙皮动画"></a>骨骼蒙皮动画</h2><blockquote><p>骨骼蒙皮动画即SkinnedMesh了，骨骼蒙皮动画的出现解决了关节动画的裂缝问题。骨骼动画的基本原理可概括为：在骨骼控制下，通过顶点混合动态计算蒙皮网格的顶点，而骨骼的运动相对于其父骨骼，并由动画关键帧数据驱动。</p><p>一个骨骼动画通常包括骨骼层次结构数据，网格(Mesh)数据，网格蒙皮数据(skin info)和骨骼的动画(关键帧)数据。</p></blockquote><h3 id="SkinnedMesh原理"><a href="#SkinnedMesh原理" class="headerlink" title="SkinnedMesh原理"></a>SkinnedMesh原理</h3><blockquote><p>SkinnedMesh中文一般称作骨骼蒙皮动画，正如其名，这种动画中包含骨骼（Bone）和蒙皮(Skinned Mesh)两个部分，Bone的层次结构和关节动画类似，Mesh则和关节动画不同：</p><p>关节动画中是使用多个分散的Mesh,而Skinned Mesh中Mesh是一个整体，也就是说只有一个Mesh,实际上如果没有骨骼让Mesh运动变形，Mesh就和静态模型一样了。</p><p>Skinned Mesh技术的精华在于蒙皮，所谓的皮并不是模型的贴图（也许会有人这么想过吧），而是Mesh本身，蒙皮是指将Mesh中的顶点附着（绑定）在骨骼之上，而且每个顶点可以被多个骨骼所控制，这样在关节处的顶点由于同时受到父子骨骼的拉扯而改变位置就消除了裂缝。</p><p>Skinned Mesh这个词从字面上理解似乎是有皮的模型，哦，如果贴图是皮，那么普通静态模型不也都有吗？所以我觉得应该理解为具有蒙皮信息的Mesh或可当做皮肤用的Mesh，这个皮肤就是Mesh。而为了有皮肤功能，Mesh还需要蒙皮信息，即Skin数据，没有Skin数据就是一个普通的静态Mesh了。</p><p>Skin数据决定顶点如何绑定到骨骼上。顶点的Skin数据包括顶点受哪些骨骼影响以及这些骨骼影响该顶点时的权重(weight)，另外对于每块骨骼还需要骨骼偏移矩阵(BoneOffsetMatrix)用来将顶点从Mesh空间变换到骨骼空间。</p></blockquote><h3 id="SkinnedMesh结构"><a href="#SkinnedMesh结构" class="headerlink" title="SkinnedMesh结构"></a>SkinnedMesh结构</h3><ul><li>骨骼决定了模型整体在世界坐标系中的位置和朝向。</li></ul><blockquote><p>先看看静态模型吧，静态模型没有骨骼，我们在世界坐标系中放置静态模型时，只要指定模型自身坐标系在世界坐标系中的位置和朝向。在骨骼动画中，不是把Mesh直接放到世界坐标系中，Mesh只是作为Skin使用的，是依附于骨骼的，真正决定模型在世界坐标系中的位置和朝向的是骨骼。</p><p>在渲染静态模型时，由于模型的顶点都是定义在模型坐标系中的，所以各顶点只要经过模型坐标系到世界坐标系的变换后就可进行渲染。而对于骨骼动画，我们设置模型的位置和朝向，实际是在设置根骨骼的位置和朝向，然后根据骨骼层次结构中父子骨骼之间的变换关系计算出各个骨骼的位置和朝向，然后根据骨骼对Mesh中顶点的绑定计算出顶点在世界坐标系中的坐标，从而对顶点进行渲染。要记住，在骨骼动画中，骨骼才是模型主体，Mesh不过是一层皮，一件衣服。</p></blockquote><ul><li>骨骼可理解为一个坐标空间。</li></ul><blockquote><p>骨骼只是一个形象的说法，实际上骨骼可理解为一个坐标空间，关节可理解为骨骼坐标空间的原点。关节的位置由它在父骨骼坐标空间中的位置描述。上图中有三块骨骼，分别是上臂，前臂和两个手指。Clavicle(锁骨)是一个关节，它是上臂的原点，同样肘关节(elbow joint)是前臂的原点，腕关节(wrist)是手指骨骼的原点。关节既决定了骨骼空间的位置，又是骨骼空间的旋转和缩放中心。</p><p>骨骼就是坐标空间，骨骼层次就是嵌套的坐标空间。关节只是描述骨骼的位置即骨骼自己的坐标空间原点在其父空间中的位置，绕关节旋转是指骨骼坐标空间（包括所有子空间）自身的旋转。</p><p>但还有两个可能的疑问，一是骨骼的长度问题，由于骨骼是坐标空间，没有所谓的长度和宽度的限制，我们看到的长度一方面是蒙皮后的结果，另一方面子骨骼的原点（也就是关节）的位置往往决定了视觉上父骨骼的长度，比如这里upper arm线段的长度实际是由elbow joint的位置决定的。</p><p>第二个问题，手指的那个端点是啥啊？实际上在我们的例子中手指没有子骨骼，所以那个端点并不存在：）那是为了方便演示画上去的。实际问题中总有最下层的骨骼，他们不能决定其他骨骼了，他们的作用只剩下控制Mesh顶点。对了，那么手指的长度如何确定？我们看到的长度应该是由蒙皮决定的，也就是由Mesh中属于手指的那些点离腕关节的距离决定。</p></blockquote><h1 id="3D模型动画使用"><a href="#3D模型动画使用" class="headerlink" title="3D模型动画使用"></a>3D模型动画使用</h1><p>下面给出一段在Unity3D中控制3D模型动画的代码，作为参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"> </span><br><span class="line">public class AnimationScript : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        Animation animation = this.animation;//动画控制器</span><br><span class="line">        animation.Play(&quot;idle&quot;);//上来直接播放idle动画</span><br><span class="line">    &#125;</span><br><span class="line">    void OnGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        if (GUI.Button(new Rect(0, 0, 100, 30), &quot;行走&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;run&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (GUI.Button(new Rect(100, 0, 100, 30), &quot;停止&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;idle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (GUI.Button(new Rect(200, 0, 100, 30), &quot;攻击&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;attack&quot;);</span><br><span class="line">            animation.PlayQueued(&quot;idle&quot;);//播放完attack之后再播放idle</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://gameinstitute.qq.com/community/detail/127900" target="_blank" rel="noopener">骨骼蒙皮动画(SkinnedMesh)的原理解析</a>,by feng.</li><li><a href="https://blog.csdn.net/yongh701/article/details/73001312" target="_blank" rel="noopener">【Unity3D】3D模型的使用——FBX的使用与Animation设置</a>,by yongh701.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3DMax、Blender之类的3D建模软件易学难精，其原因在于很多人不了解其背后的计算机图形学原理。因此，掌握相关的计算机图形学原理和知识，对于我们熟练运用3D建模软件是十分必要的。下面简单介绍3D模型的分类及其使用方法。&lt;/p&gt;
&lt;h1 id=&quot;3D模型动画分类&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="C/C++" scheme="https://huangwang.github.io/tags/C-C/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>GitBook入门教程</title>
    <link href="https://huangwang.github.io/2019/12/26/gitbook%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huangwang.github.io/2019/12/26/gitbook入门教程/</id>
    <published>2019-12-26T13:44:42.000Z</published>
    <updated>2020-01-28T11:07:28.880Z</updated>
    
    <content type="html"><![CDATA[<p>GitBook是一种制作在线书籍的工具。它基于Git支持多人协作，支持将采用Markdown语法编辑的文档导出成 PDF，EPUB，HTML等多种格式。</p><h1 id="GitBook安装"><a href="#GitBook安装" class="headerlink" title="GitBook安装"></a>GitBook安装</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>NodeJS (v4.0.0 and above is recommended)</li><li>Windows, Linux, Unix, or Mac OS X</li></ul><h2 id="NPM安装GitBook"><a href="#NPM安装GitBook" class="headerlink" title="NPM安装GitBook"></a>NPM安装GitBook</h2><p>通过NPM工具安装GitBook是最佳的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-cli -g</span><br><span class="line">$ gitbook init //下载稳定版的gitbook，同时创建在线书籍</span><br></pre></td></tr></table></figure><p>gitbook-cli工具可安装多个GitBook版本到系统上。对于Windows平台，gitbook-cli工具安装的多个GitBook版本通常存储在“C:\Users\CurrentLoginUser\.gitbook”。</p><h2 id="离线安装GitBook"><a href="#离线安装GitBook" class="headerlink" title="离线安装GitBook"></a>离线安装GitBook</h2><p>内网机器上安装GitBook的方法如下：</p><ul><li>安装最新Nodejs长期支持版。</li><li>使用npm-bundle命令在线打包gitbook-cli</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install npm-bundle -g</span><br><span class="line">npm-bundle gitbook-cli</span><br></pre></td></tr></table></figure><ul><li>内网机器上安装gitbook-cli</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ./gitbook-cli.tgz</span><br></pre></td></tr></table></figure><ul><li>将“C:\Users\CurrentLoginUser\.gitbook”目录打包拷贝至内网机器对应位置</li></ul><h1 id="创建书籍"><a href="#创建书籍" class="headerlink" title="创建书籍"></a>创建书籍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook init    //在当前目录创建书籍</span><br><span class="line">$ gitbook build   //构建在线书籍网站</span><br><span class="line">$ gitbook serve   //构建在线书籍网站并启动</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/lu_embedded/article/details/81100704" target="_blank" rel="noopener">GitBook 从懵逼到入门</a>,by 阿基米东.</li><li><a href="https://yq.aliyun.com/articles/384086" target="_blank" rel="noopener">使用 Gitbook 打造你的电子书</a>,by 文艺小青年.</li><li><a href="https://www.icharm.me/%E4%B8%96%E4%B8%8A%E6%9C%80%E4%BD%B3%E7%A6%BB%E7%BA%BFmakedown%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7%EF%BC%88gitbook%E5%92%8Cgitbook-editor%EF%BC%89.html" target="_blank" rel="noopener">世上最佳离线markdown编辑工具（gitbook和gitbook editor）</a>,by icharm.</li><li><a href="https://blog.tedxiong.com/how_to_remove_Published_with_GitBook_in_GitBook.html" target="_blank" rel="noopener">移除GitBook目录下方的“本书使用GitBook发布”字样</a>,by tedxiong.</li><li><a href="https://www.cnblogs.com/powercto/p/6917106.html" target="_blank" rel="noopener">EbookError: Error during ebook generation: ‘ebook-convert</a>,by 狼爷.</li><li><a href="http://gitbook.wiliam.me/bookjson.html" target="_blank" rel="noopener">书籍配置文件(book.json)</a>,by wiliam.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GitBook是一种制作在线书籍的工具。它基于Git支持多人协作，支持将采用Markdown语法编辑的文档导出成 PDF，EPUB，HTML等多种格式。&lt;/p&gt;
&lt;h1 id=&quot;GitBook安装&quot;&gt;&lt;a href=&quot;#GitBook安装&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>glTF2.0格式解析</title>
    <link href="https://huangwang.github.io/2019/12/25/gltf2-0%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    <id>https://huangwang.github.io/2019/12/25/gltf2-0格式解析/</id>
    <published>2019-12-25T15:13:58.000Z</published>
    <updated>2019-12-27T15:18:44.730Z</updated>
    
    <content type="html"><![CDATA[<p>glTF（GL传输格式的衍生简称）是一种使用JSON标准的3D场景和模型的文件格式。 它是Khronos Group 3D格式工作组开发的一种与API无关的运行时资产交付格式。 它在HTML5DevConf 2016上宣布。此格式旨在成为一种高效，可互操作的格式，具有最小的文件大小和应用程序对运行时的处理。 因此，其创建者将其描述为“3D JPEG”。 glTF还为3D内容工具和服务定义了一种通用的发布格式。本文旨通过对glTF2.0格式的解析，进一步加深对3D建模的理解。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>在对glTF2.0格式解析之前，应先了解一些3D建模或glTF独有的基本概念：</p><ul><li>scenes, nodes：场景的基本结构</li><li>cameras：场景的可视配置</li><li>meshes：构成3D对象的几何</li><li>buﬀers, buﬀerViews, accessors：数据参考和布局描述</li><li>materials：定义数据如何被渲染</li><li>textures, images, samplers：对象表面显示</li><li>skins：顶点蒙皮信息</li><li>animations：随时间改变的属性</li></ul><p></p><p align="center">    <img src="images/concept_relation.jpg" width="60%" alt="glTF概念之间的关系"></p><p></p><center>图1 glTF概念之间的关系</center><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/KhronosGroup/glTF" target="_blank" rel="noopener">glTF</a>,by KhronosGroup.</li><li><a href="https://en.wikipedia.org/wiki/GlTF" target="_blank" rel="noopener">glTF</a>,by wikipedia.</li><li><a href="https://www.khronos.org/files/gltf20-reference-guide.pdf" target="_blank" rel="noopener">glTF Overview</a>,by KhronosGroup.</li><li><a href="https://gameinstitute.qq.com/community/detail/127900" target="_blank" rel="noopener">骨骼蒙皮动画(SkinnedMesh)的原理解析</a>,by feng.</li><li><a href="https://blog.csdn.net/yongh701/article/details/73001312" target="_blank" rel="noopener">【Unity3D】3D模型的使用——FBX的使用与Animation设置</a>,by yongh701.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;glTF（GL传输格式的衍生简称）是一种使用JSON标准的3D场景和模型的文件格式。 它是Khronos Group 3D格式工作组开发的一种与API无关的运行时资产交付格式。 它在HTML5DevConf 2016上宣布。此格式旨在成为一种高效，可互操作的格式，具有最小的
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="Cesium" scheme="https://huangwang.github.io/tags/Cesium/"/>
    
  </entry>
  
</feed>
