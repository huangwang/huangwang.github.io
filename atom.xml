<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangwang.github.io/"/>
  <updated>2018-12-18T14:49:50.923Z</updated>
  <id>https://huangwang.github.io/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统仿真中一些问题的思考</title>
    <link href="https://huangwang.github.io/2018/12/18/%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F%E4%B8%AD%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/12/18/系统仿真中一些问题的思考/</id>
    <published>2018-12-18T10:41:42.000Z</published>
    <updated>2018-12-18T14:49:50.923Z</updated>
    
    <content type="html"><![CDATA[<p>系统仿真（system simulation）就是根据系统分析的目的，在分析系统各要素性质及其相互关系的基础上，建立能描述系统结构或行为过程的、且具有一定逻辑关系或数量关系的仿真模型，据此进行试验或定量分析，以获得正确决策所需的各种信息。</p><h1 id="系统仿真与仿真游戏的区别"><a href="#系统仿真与仿真游戏的区别" class="headerlink" title="系统仿真与仿真游戏的区别"></a>系统仿真与仿真游戏的区别</h1><p>系统仿真与仿真游戏本质上没有区别，都是计算机程序对现实的模拟，所不同的是各自对仿真保真度（Simulation Fidelity）的要求不同。</p><p>仿真保真度（Simulation Fidelity）用于描述仿真精度，模拟真实对应物有多近似：</p><ul><li>低保真：对系统的最小模拟，接受输入产生输出</li><li>中等保真：对刺激能自动响应，有限精度</li><li>高保真：接近不可辨识或者尽可能地接近真实系统</li></ul><p>通常系统仿真对仿真保真度的要求比仿真游戏要高。</p><h1 id="计算步长与采样周期"><a href="#计算步长与采样周期" class="headerlink" title="计算步长与采样周期"></a>计算步长与采样周期</h1><p>采用计算机进行数值模拟或系统仿真时，经常需要采用数值解法求解模型方程。系统模型一般采用微分方程描述（也有其它形式），采用数值方法求解，就是采用迭代法逐步逼近。</p><h2 id="计算步长"><a href="#计算步长" class="headerlink" title="计算步长"></a>计算步长</h2><p>积分与微分是互逆。对一个曲线（包括直线）方程求积分，其实就是求曲线与横轴围成的面积。该面积可以用一系列间隔很小的面积块相加得到。这些小间隔的宽度就是计算步长。显然，纯粹从精度的角度考虑，步长越小越精确，因为近似面积更接近实际图形面积。</p><h2 id="采样周期"><a href="#采样周期" class="headerlink" title="采样周期"></a>采样周期</h2><p>采样周期是对一个实际信号测量时，相邻两次测量之间的时间间隔。有时候，采样周期和计算步长相似，但采样周期要考虑实际限制，且是时间单位，而计算步长不一定是时间单位，且相对自由些。两者在数值上没必然联系。<strong>对于同一问题，且都是时间量纲的话，采样周期大于等于计算步长，前者是后者的整数倍</strong>。</p><p>系统仿真包含系统模型求解，也就是在每个采样周期内，要解出模型方程。控制系统仿真时在采样周期内要解出两个模型方程：控制器模型和系统模型。</p><p><strong>一个采样周期内可对系统模型迭代求解一次或多次</strong>。</p><h2 id="计算步长和采样周期大小的选择"><a href="#计算步长和采样周期大小的选择" class="headerlink" title="计算步长和采样周期大小的选择"></a>计算步长和采样周期大小的选择</h2><p>关于采样周期和计算步长的选择，一般考虑以下因素：</p><ul><li><p>从求解精度考虑，越小越好。</p></li><li><p>从计算量考虑，越大越好。</p></li></ul><h2 id="采样周期与每秒帧数-Frames-Per-Second，FPS"><a href="#采样周期与每秒帧数-Frames-Per-Second，FPS" class="headerlink" title="采样周期与每秒帧数(Frames Per Second，FPS)"></a>采样周期与每秒帧数(Frames Per Second，FPS)</h2><p>采样周期以秒为单位，则</p><script type="math/tex; mode=display">FPS=\frac{1}{采样周期}</script><p>FPS是指每秒画面重绘的次数，用于衡量画面切换速度。FPS越大，则动画效果越平滑，当FPS小于20时，一般就能明显感受到画面的卡滞现象。</p><p>当FPS足够大(比如达到60)，再增加帧数人眼也不会感受到明显的变化，反而相应地就要消耗更多资源(比如电影的胶片就需要更长了，或是电脑刷新画面需要消耗计算资源等等)。因此，选择一个适中的FPS即可。</p><p>NTSC标准的电视FPS是30，PAL标准的电视FPS是25，电影的FPS标准为24。</p><h1 id="WebGL动画"><a href="#WebGL动画" class="headerlink" title="WebGL动画"></a>WebGL动画</h1><p>WebGL是一种JavaScript API，用于在不使用插件的情况下在任何兼容的网页浏览器中呈现交互式2D和3D图形。但要产生WebGL动画，需要对运动的场景不停的采样，即不停地拍照。JavaScript的采样函数主要有setInterval方法和requestAnimationFrame方法。</p><h2 id="setInterval方法"><a href="#setInterval方法" class="headerlink" title="setInterval方法"></a>setInterval方法</h2><blockquote><p>如果要设置特定的FPS(虽然严格来说，即使使用这种方法，JavaScript也不能保证帧数精确性)，可以使用JavaScript DOM定义的方法：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(fn,mesc)</span><br></pre></td></tr></table></figure><p>其中，fn是每过msec毫秒执行的函数，如果将fn定义为重绘画面的函数，就能实现动画效果。setInterval函数返回一个变量timer，如果需要停止重绘，需要使用clearInterval方法，并传入该变量timer。</p><h2 id="requestAnimationFrame方法"><a href="#requestAnimationFrame方法" class="headerlink" title="requestAnimationFrame方法"></a>requestAnimationFrame方法</h2><blockquote><p>大多数时候，我们并不在意多久重绘一次，这时候就适合用requestAnimationFrame方法了。它告诉浏览器在合适的时候调用指定函数，通常可能达到60FPS。</p></blockquote><ul><li>requestAnimationFrame同样有对应的cancelAnimationFrame取消动画</li><li>和setInterval不同的是，由于requestAnimationFrame只请求一帧画面，因此，除了在init函数中需要调用，在被其调用的函数中需要再次调用requestAnimationFrame</li></ul><h2 id="使用stat-js记录FPS"><a href="#使用stat-js记录FPS" class="headerlink" title="使用stat.js记录FPS"></a>使用stat.js记录FPS</h2><p>stat.js是Three.js的作者Mr.Doob的另一个有用的JavaScript库。很多情况下，我们希望知道实时的FPS信息，从而更好地监测动画效果。这时候，stat.js就能提供一个很好的帮助，它占据屏幕中的一小块位置(如左上角)，显示实时的FPS信息。</p><p>在HTML中引用stat.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//mrdoob.github.io/stats.js/build/stats.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>再使用如下代码监视实时FPS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var stats = new Stats();</span><br><span class="line">stats.showPanel( 1 ); // 0: fps, 1: ms, 2: mb, 3+: custom</span><br><span class="line">document.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line">function animate() &#123;</span><br><span class="line"></span><br><span class="line">stats.begin();</span><br><span class="line"></span><br><span class="line">// monitored code goes here</span><br><span class="line"></span><br><span class="line">stats.end();</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.sciencenet.cn/blog-341979-776318.html" target="_blank" rel="noopener">计算步长和采样周期</a>,by 王永林.</li><li><a href="http://www.ufgame.com/5951.html" target="_blank" rel="noopener">离散和连续模拟之间的实际区别是什么？</a>,by UF Game.</li><li><a href="https://baike.baidu.com/item/系统仿真" target="_blank" rel="noopener">系统仿真</a>,by 百度百科.</li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-physicsengines/index.html" target="_blank" rel="noopener">开源的物理引擎</a>,by M. Jones.</li><li><a href="https://zh.wikipedia.org/wiki/数值分析" target="_blank" rel="noopener">数值分析</a>,by wikipedia.</li><li><a href="https://segmentfault.com/a/1190000012238927" target="_blank" rel="noopener">three.js 入门详解(二)</a>,by Levi.</li><li><a href="https://zh.wikipedia.org/wiki/WebGL" target="_blank" rel="noopener">WebGL</a>,by wikipedia.</li><li><a href="https://github.com/mrdoob/stats.js" target="_blank" rel="noopener">stats.js</a>, by mydoob.</li><li><a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener">详解JavaScript中的Event Loop（事件循环）机制</a>,by 暮雨清秋.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统仿真（system simulation）就是根据系统分析的目的，在分析系统各要素性质及其相互关系的基础上，建立能描述系统结构或行为过程的、且具有一定逻辑关系或数量关系的仿真模型，据此进行试验或定量分析，以获得正确决策所需的各种信息。&lt;/p&gt;
&lt;h1 id=&quot;系统仿真与
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="WebGL" scheme="https://huangwang.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>撰写学术论文的思考</title>
    <link href="https://huangwang.github.io/2018/12/17/%E6%92%B0%E5%86%99%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/12/17/撰写学术论文的思考/</id>
    <published>2018-12-17T12:25:20.000Z</published>
    <updated>2018-12-17T13:34:49.221Z</updated>
    
    <content type="html"><![CDATA[<p>迫于学业和工作的压力，撰写了不少的学术论文。但是并没有对如何撰写学术论文进行思考。看到清华大学的肖寒<br>博士在某个问题下的回答后，感觉茅塞顿开：</p><blockquote><p> 不过，一般注水的作者相对而言都是新手，因为比较有经验的研究者都知道：“<strong>论文的一切都在于贡献，不在于结果</strong>”</p><p> 你的结果只是一个说明你贡献的例证，多那么点少那么点，大家看了毫无区别。你注水除了恶心我们这些后来实验的人，就没什么别的用处了。有那些<strong>疯狂调参和使劲弄技巧</strong>的时间，真不如<strong>拿来整理好你自己的思路，把论文的论述过程做到有理有据</strong>！因为 80.2 和 80.3 正常人都没法记住其间区别，但你<strong>循循善诱的精致论述会让所有人印象深刻</strong>。我希望新手不要本末倒置！</p></blockquote><p>论文重在贡献，迫于学业和工作的压力造的注水论文实在无趣！</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/22520434" target="_blank" rel="noopener">看图说话的AI小朋友——图像标注趣谈（下）</a>, by 杜客.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迫于学业和工作的压力，撰写了不少的学术论文。但是并没有对如何撰写学术论文进行思考。看到清华大学的肖寒&lt;br&gt;博士在某个问题下的回答后，感觉茅塞顿开：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 不过，一般注水的作者相对而言都是新手，因为比较有经验的研究者都知道：“&lt;stron
      
    
    </summary>
    
    
      <category term="感悟" scheme="https://huangwang.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>node-gyp使用帮助</title>
    <link href="https://huangwang.github.io/2018/12/16/node-gyp%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <id>https://huangwang.github.io/2018/12/16/node-gyp使用帮助/</id>
    <published>2018-12-16T05:27:18.000Z</published>
    <updated>2018-12-16T16:19:14.031Z</updated>
    
    <content type="html"><![CDATA[<p>node-gyp是为了编译nodejs addon模块而构建的跨平台命令行工具。nodejs addon模块使用c++语言编写，在源代码级别进行分发，通过node-gyp实现跨平台的编译安装。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>node-gyp源于gyp。gyp是一个用来生成项目文件的工具，刚开始设计给chromium项目使用的。它可以从平台无关的配置生成平台相关的Visual Studio、Xcode、Makefile的项目文件，然后调用 vsbuild、xcode、gcc等编译平台来编译。这就不需要花额外的时间处理每个平台不同的项目配置以及项目之间的依赖关系。</p><p>nodejs addon模块采用源代码分发，安装需要根据不同平台采用合适的编译器编译安装，这就是node-gyp项目诞生的原由。</p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装node-gyp"><a href="#安装node-gyp" class="headerlink" title="安装node-gyp"></a>安装node-gyp</h2><p>在上线情况下，使用如下命令安装node-gyp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g node-gyp</span><br></pre></td></tr></table></figure></p><h2 id="安装C-编译器"><a href="#安装C-编译器" class="headerlink" title="安装C++编译器"></a>安装C++编译器</h2><p>根据操作系统平台的不同，需安装对应的编译器，以方便node-gyp调用。以Windows平台为例，安装VC++编译器有两种方法：</p><ul><li><p>直接安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 以管理员身份打开cmd或powershell</span><br><span class="line"></span><br><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure></li><li><p>手动安装</p><ul><li>安装Visual C++构建环境： 使用Visual Studio Build Tools的Visual C++ build tools工作负载或者Visual Studio 2017 Community的Desktop development with C++工作负载。</li><li>安装Python 2.7，不支持python3，然后运行npm config set python python2.7</li><li>在cmd中运行npm config set msvs_version 2017</li></ul></li></ul><p>手动安装Visual C++构建环境的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 使用Visual Studio Build Tools的Visual C++ build tools工作负载，确保安装win10sdk，编译nodejs源码时需要</span><br><span class="line"></span><br><span class="line">.\vs_buildtools__2041717674.1536666005.exe --layout d:\vc2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended</span><br><span class="line"></span><br><span class="line"># 使用Visual Studio 2017 Community的Desktop development with C++工作负载</span><br><span class="line"></span><br><span class="line">.\vs_community__208176120.1522073957.exe --layout e:\vs2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.CoreEditor --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended</span><br></pre></td></tr></table></figure></p><h2 id="node-gyp编译测试"><a href="#node-gyp编译测试" class="headerlink" title="node-gyp编译测试"></a>node-gyp编译测试</h2><p>以在Win10平台编译nodejs addon模块为例，在离线情况使用如下命令测试node-gyp是否工作正常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node-gyp configure --nodedir=d:\node-v8.11.3</span><br><span class="line"></span><br><span class="line">node-gyp build</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/36291768" target="_blank" rel="noopener">node-gyp的作用是什么?</a>,by zhihu.</li><li><a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener">node-gyp</a>, by nodejs</li><li><a href="https://github.com/felixrieseberg/windows-build-tools" target="_blank" rel="noopener">Windows-Build-Tools</a>, by felixrieseberg.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node-gyp是为了编译nodejs addon模块而构建的跨平台命令行工具。nodejs addon模块使用c++语言编写，在源代码级别进行分发，通过node-gyp实现跨平台的编译安装。&lt;/p&gt;
&lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="nodejs" scheme="https://huangwang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>树莓派使用lirc进行红外遥控测试</title>
    <link href="https://huangwang.github.io/2018/12/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8lirc%E8%BF%9B%E8%A1%8C%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7%E6%B5%8B%E8%AF%95/"/>
    <id>https://huangwang.github.io/2018/12/15/树莓派使用lirc进行红外遥控测试/</id>
    <published>2018-12-15T11:14:42.000Z</published>
    <updated>2018-12-18T10:45:52.341Z</updated>
    
    <content type="html"><![CDATA[<p>在树莓派上使用lirc进行红外遥控测试的步骤比较繁琐，记录一下以备忘。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="lirc库"><a href="#lirc库" class="headerlink" title="lirc库"></a>lirc库</h2><p>LIRC (Linux Infrared remote control,Linux红外线遥控)是一个开放源代码的包。这个包可以让你的Linux系统能够接收及发送红外线信号。</p><p>Microsoft Windows上有个功能相同的软件叫WinLIRC。</p><p>利用LIRC和红外线接收器，你就几乎可以用所有的红外线遥控器（例如：电视遥控器）来控制你的计算机。举例来说，你可以用遥控器来控制DVD或音乐的播放。</p><h3 id="lirc配置文件说明"><a href="#lirc配置文件说明" class="headerlink" title="lirc配置文件说明"></a>lirc配置文件说明</h3><ul><li>/etc/lirc/lircd.conf为遥控器配置文件</li><li>/etc/lirc/lircmd.conf为lircmd配置文件，后者可以将遥控器用作鼠标。</li><li>/etc/lirc/lircrc为irexec配置文件，后者可以在收到遥控器信号号运行设定的程序。</li></ul><h3 id="制作遥控器配置文件"><a href="#制作遥控器配置文件" class="headerlink" title="制作遥控器配置文件"></a>制作遥控器配置文件</h3><p>使用irrecord命令制作遥控器配置文件lircd.conf。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 首先停止lirc服务</span><br><span class="line">sudo service lirc stop</span><br><span class="line"></span><br><span class="line"># 制作遥控器配置文件</span><br><span class="line">irrecord -d /dev/lirc0 &lt;model&gt;.conf</span><br></pre></td></tr></table></figure></p><h1 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul><li>树莓派3B+</li><li>红外接收器</li><li>红外遥控器</li><li>杜邦线 </li></ul><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>红外接收器都有三个引脚：VCC、GND、Data。其中：<br>VCC：连接5V的引脚<br>GND：连接接地的引脚<br>Data：连接GPIO23</p><h2 id="lirc配置"><a href="#lirc配置" class="headerlink" title="lirc配置"></a>lirc配置</h2><ol><li><p>安装lirc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lirc -y</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/modules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># /etc/modules: kernel modules to load at boot time.</span><br><span class="line">#</span><br><span class="line"># This file contains the names of kernel modules that should be loaded</span><br><span class="line"># at boot time, one per line. Lines beginning with &quot;#&quot; are ignored.</span><br><span class="line"></span><br><span class="line">i2c-dev</span><br><span class="line"># 添加如下代码</span><br><span class="line">lirc_dev</span><br><span class="line">lirc_rpi gpio_in_pin=23 gpio_out_pin=22</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/lirc/lirc_options.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 修改如下两项</span><br><span class="line">driver          = default </span><br><span class="line">device          = /dev/lirc0</span><br></pre></td></tr></table></figure></li><li><p>修改/boot/config.txt<br>在/boot/config.txt文件中找到#dtoverlay=lirc-rpi，将其修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtoverlay=lirc-rpi:gpio_in_pin=23,gpio_out_pin=22</span><br></pre></td></tr></table></figure></li><li><p>重启测试</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo init 6</span><br><span class="line"># 查看lirc是否加载成功</span><br><span class="line">lsmod | grep lirc</span><br><span class="line">ls /dev/lirc0</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/zh-hans/LIRC" target="_blank" rel="noopener">LIRC</a>,by wikipedia.</li><li><a href="https://blog.newnius.com/raspberry-3b-setup-lirc.html" target="_blank" rel="noopener">树莓派—-红外遥控设置</a>,by 逍遥游.</li><li><a href="https://cnly.github.io/2016/07/30/raspi-lirc.html" target="_blank" rel="noopener">配置树莓派上的lirc(Raspbian, 2016)</a>,by Cnly.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在树莓派上使用lirc进行红外遥控测试的步骤比较繁琐，记录一下以备忘。&lt;/p&gt;
&lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;h2 id=&quot;lirc库&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>飞行力学中坐标系定义</title>
    <link href="https://huangwang.github.io/2018/12/10/%E9%A3%9E%E8%A1%8C%E5%8A%9B%E5%AD%A6%E4%B8%AD%E5%9D%90%E6%A0%87%E7%B3%BB%E5%AE%9A%E4%B9%89/"/>
    <id>https://huangwang.github.io/2018/12/10/飞行力学中坐标系定义/</id>
    <published>2018-12-10T15:32:27.000Z</published>
    <updated>2018-12-19T13:02:50.183Z</updated>
    
    <content type="html"><![CDATA[<p>建立飞机的运动学模型的前提是建立合适的坐标系，在此基础上才能定义各种参数描述飞机的状态。下面介绍常用的坐标系及常用描述飞机状态的参数。</p><h1 id="常用坐标系"><a href="#常用坐标系" class="headerlink" title="常用坐标系"></a>常用坐标系</h1><h2 id="地面固定坐标轴系-AX-gY-gZ-g"><a href="#地面固定坐标轴系-AX-gY-gZ-g" class="headerlink" title="地面固定坐标轴系($AX_gY_gZ_g$)"></a>地面固定坐标轴系($AX_gY_gZ_g$)</h2><p>将地球视为椭球体，则地面固定坐标轴系定义为：</p><p>以椭球面上一点为坐标系原点$A$，$Z_g$轴与椭球法线重合，向下为正，$X_g$与$Y_g$轴位于过坐标原地的椭球切平面上,按右手法则建立，$X_g$轴与椭球短半轴重合（北向），$Y_g$轴与地球椭球的长半轴重合（东向）。</p><p>在研究坐标转换关系时，<strong>常使用飞机牵连铅垂地面固定坐标系$OX_gY_gZ_g$</strong>。其原点$O$位于飞机质心，三坐标轴平行于地面固定坐标轴系$AX_gY_gZ_g$的各个轴。飞机姿态——偏航、俯仰、滚转的定义即与飞机牵连铅垂地面固定坐标系有关。</p><h2 id="机体坐标系-体轴系-OXYZ"><a href="#机体坐标系-体轴系-OXYZ" class="headerlink" title="机体坐标系(体轴系$OXYZ$)"></a>机体坐标系(体轴系$OXYZ$)</h2><p>机体坐标系定义为：</p><p>原点$O$位于质心，$O_X$平行于机身轴线或对称面机翼弦线指向前方（机头方向）；$O_Y$垂直于对称面指向右翼；$O_Z$在飞机对称面内，垂直于$O_X$指向下方。符合右手系建立规定。</p><p></p><p align="center">    <img src="images/plane_axis.png" width="90%" alt="机体坐标系"></p><p></p><center>图1  飞机牵连铅垂地面固定坐标系（OXgYgZg）与体轴系（OXYZ）</center><h2 id="航迹坐标系-OX-kY-kZ-k"><a href="#航迹坐标系-OX-kY-kZ-k" class="headerlink" title="航迹坐标系($OX_kY_kZ_k$)"></a>航迹坐标系($OX_kY_kZ_k$)</h2><p>航迹坐标系定义：</p><p>原点$O$位于飞机质心，$OX_k$沿飞机速度方向；$OZ_k$在$OX_k$所在铅垂平面内，垂直于$OX_k$指向下方；$OY_k$垂直于$OX_k$、$OZ_k$ 所在平面指向右方；符合右手系建立规定。</p><p></p><p align="center">    <img src="images/track_axis.png" width="90%" alt="航迹坐标系"></p><p></p><center>图2  航迹坐标系（OXkYkZk）</center><h2 id="气流坐标轴系-风轴系-OX-aY-aZ-a"><a href="#气流坐标轴系-风轴系-OX-aY-aZ-a" class="headerlink" title="气流坐标轴系(风轴系$OX_aY_aZ_a$)"></a>气流坐标轴系(风轴系$OX_aY_aZ_a$)</h2><p>气流坐标轴系又称速度坐标轴系，定义为：</p><p>原点$O$位于飞机质心，$OX_a$沿飞机速度方向；$OZ_a$在飞机对称面内，垂直于$OX_a$指向下方；$OY_a$垂直于$OX_a$、$OZ_a$ 所在平面指向右方；符合右手系建立规定。</p><p>气动力三个分量（升力、阻力、侧力）是根据风轴系定义的，其中升力与阻力分别沿$OZ_a$、$OX_a$的负向。</p><h2 id="半机体坐标系-OX-iY-iZ-i"><a href="#半机体坐标系-OX-iY-iZ-i" class="headerlink" title="半机体坐标系($OX_iY_iZ_i$)"></a>半机体坐标系($OX_iY_iZ_i$)</h2><p>半机体坐标系定义为：</p><p>原点$O$位于质心，$OX_i$沿飞机速度向飞机对称面内投影方向；$OZ_i$在飞机对称面内，垂直于$OX_i$指向下方；$OY_i$垂直于$OX_i$、$OZ_i$ 所在平面指向右方；符合右手系建立规定。</p><p></p><p align="center">    <img src="images/half_plane_axis.png" width="90%" alt="半机体坐标"></p><p></p><center>图3  风轴系（OXaYaZa）与半机体坐标系（OXiYiZi）</center><h2 id="稳定性坐标系-OX-sY-sZ-s"><a href="#稳定性坐标系-OX-sY-sZ-s" class="headerlink" title="稳定性坐标系($OX_sY_sZ_s$)"></a>稳定性坐标系($OX_sY_sZ_s$)</h2><p>稳定性坐标系定义为：</p><p>原点$O$位于质心，$OX_s$沿未受扰动的速度在对称面内的投影方向；$OY_s$在飞机对称面内，指向右；$OZ_s$对称平面内垂直于$OX_s$向下；符合右手系建立规定。</p><p></p><p align="center">    <img src="images/stable_axis.png" width="90%" alt="半机体坐标"></p><p></p><center>图4  稳定性坐标系（OXsYsZs）</center><h1 id="常用飞参"><a href="#常用飞参" class="headerlink" title="常用飞参"></a>常用飞参</h1><ul><li><p>机体坐标系相对于飞机牵连铅垂地面固定坐标系的夹角</p><ul><li>偏航角：机体坐标系$x$轴在水平面内投影与$x_g$的夹角，以$\psi$表示</li><li>俯仰角：机体坐标系$x$轴与水平面的夹角，以$\theta$表示</li><li>滚转角：过机体坐标系$x$轴的铅垂面与机体坐标系$z$轴的夹角，以$\phi$表示</li></ul></li><li><p>飞行速度矢量相对于体轴系的夹角</p><ul><li>迎角：速度矢量在飞机纵向对称面内投影与机体坐标系$x$轴夹角，以$\alpha$表示</li><li>侧滑角：速度矢量与飞机纵向对称面的夹角，以$\beta$表示</li></ul></li><li><p>飞行速度矢量相对于地面的夹角</p><ul><li>爬升角：速度与地面水平面夹角，以$\gamma$表示</li><li>航迹方位角：速度在地面水平面的投影与$x_g$夹角，以$\chi$表示</li></ul></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/23722074" target="_blank" rel="noopener">无人机飞控通俗演义之 纷繁复杂的飞行力学</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/25150076" target="_blank" rel="noopener">一起写飞行仿真之 六自由度动力学方程</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/20926052" target="_blank" rel="noopener">飞行器飞行动力学（二）坐标系与夹角们</a>, by 萝卜.</li><li><a href="https://huangwang.github.io/2018/06/10/Cesium中飞行器姿态控制/">Cesium中飞行器姿态控制</a>,by jack huang.</li><li><a href="https://blog.csdn.net/liyuanbhu/article/details/51474290" target="_blank" rel="noopener">MathJax 支持的 Latex 符号总结(希腊字母和希伯来字母)</a>,by liyuanbhu</li><li><a href="https://blog.csdn.net/tina_ttl/article/details/51279530" target="_blank" rel="noopener">空间中三维矢量</a>,by tina_ttl.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建立飞机的运动学模型的前提是建立合适的坐标系，在此基础上才能定义各种参数描述飞机的状态。下面介绍常用的坐标系及常用描述飞机状态的参数。&lt;/p&gt;
&lt;h1 id=&quot;常用坐标系&quot;&gt;&lt;a href=&quot;#常用坐标系&quot; class=&quot;headerlink&quot; title=&quot;常用坐标系&quot;&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="飞行力学" scheme="https://huangwang.github.io/tags/%E9%A3%9E%E8%A1%8C%E5%8A%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Debian系统安装NVIDIA驱动支持双显卡切换</title>
    <link href="https://huangwang.github.io/2018/12/10/Debian%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85NVIDIA%E9%A9%B1%E5%8A%A8%E6%94%AF%E6%8C%81%E5%8F%8C%E6%98%BE%E5%8D%A1%E5%88%87%E6%8D%A2/"/>
    <id>https://huangwang.github.io/2018/12/10/Debian系统安装NVIDIA驱动支持双显卡切换/</id>
    <published>2018-12-10T12:27:27.000Z</published>
    <updated>2018-12-10T13:36:51.168Z</updated>
    
    <content type="html"><![CDATA[<p>购买笔记本拥有Intel集成显卡和NVIDIA显卡，如何在Debian Linux下启用NVIDIA显卡是一个难题。幸运的是，通过bumblebee软件可在Linux下支持NVIDIA Optimus技术，实现Intel集成显卡和NVIDIA显卡之间的切换使用。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="NVIDIA-Optimus"><a href="#NVIDIA-Optimus" class="headerlink" title="NVIDIA Optimus"></a>NVIDIA Optimus</h2><p>Optimus是NVIDIA针对笔记本电脑的显示切换技术。它可以实现笔记本电脑中独立显卡与主板内置显卡之间无缝、自动、实时的切换（用户无需重启或手动调整），从而实现能源的节约。</p><p>利用Optimus技术后，计算机的显示输出永远都只会通过集成式芯片组的显示核心。独立显卡的显示输出将会被废掉，有关的输出亦会发送到前者。由于显示输出的设备是固定的，所以黑屏现象将会被解决。额外的切换线路亦变得不需要，因为在不需要独立显示核心的时候，系统会索性断绝其电源供应。当系统的显示负载轻的时候，就会完全利用内置的显示核心。当负载增加后，系统就会打开独立显示核心作计算之用。协议分工方面由驱动程序负责，NVIDIA声称可以兼容所有的API。</p><h2 id="Bumblebee"><a href="#Bumblebee" class="headerlink" title="Bumblebee"></a>Bumblebee</h2><p>Bumblebee 致力于使 NVIDIA Optimus 在 GNU/Linux 系统上可用，实现两块不同的供电配置的显卡同时插入使用，共享同一个 framebuffer。</p><h1 id="安装配置过程"><a href="#安装配置过程" class="headerlink" title="安装配置过程"></a>安装配置过程</h1><h2 id="禁止加载开源驱动nouveau"><a href="#禁止加载开源驱动nouveau" class="headerlink" title="禁止加载开源驱动nouveau"></a>禁止加载开源驱动nouveau</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/modprobe.d/nvidia-installer-disable-nouveau.conf</span><br><span class="line"></span><br><span class="line">#上述文件不存在则新建，在文件中添加下面两行文字</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset = 0</span><br><span class="line"></span><br><span class="line">#系统重启后使用以下命令查看nouveau驱动是否被禁止</span><br><span class="line">lsmod |grep -i nouveau</span><br></pre></td></tr></table></figure><h2 id="安装内核头文件"><a href="#安装内核头文件" class="headerlink" title="安装内核头文件"></a>安装内核头文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y linux-headers-$(uname -r)</span><br></pre></td></tr></table></figure><h2 id="安装NVIDIA驱动"><a href="#安装NVIDIA驱动" class="headerlink" title="安装NVIDIA驱动"></a>安装NVIDIA驱动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 关于是否生存xorg.conf文件，选no</span><br><span class="line">$ sudo apt-get install  nvidia-driver nvidia-xconfig nvidia-kernel-dkms</span><br></pre></td></tr></table></figure><h2 id="安装双显卡切换解决方案包"><a href="#安装双显卡切换解决方案包" class="headerlink" title="安装双显卡切换解决方案包"></a>安装双显卡切换解决方案包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install bumblebee-nvidia primus</span><br></pre></td></tr></table></figure><h2 id="添加当前用户到bumblebee用户组"><a href="#添加当前用户到bumblebee用户组" class="headerlink" title="添加当前用户到bumblebee用户组"></a>添加当前用户到bumblebee用户组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adduser $USER bumblebee</span><br></pre></td></tr></table></figure><h2 id="修改bumblebee配置"><a href="#修改bumblebee配置" class="headerlink" title="修改bumblebee配置"></a>修改bumblebee配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/bumeblebee/bumblebee.conf</span><br><span class="line">: Driver=nvidia</span><br><span class="line"></span><br><span class="line">#将/etc/bumeblebee/bumblebee.conf文件中的Driver=* 改成 =nvidia</span><br><span class="line"></span><br><span class="line">$ vi /etc/bumblebee/xorg.conf.nvidia</span><br><span class="line">:BusID &quot;PCI:01:00:0&quot; </span><br><span class="line"></span><br><span class="line">#在/etc/bumblebee/xorg.conf.nvidia文件中，将Section“Device”部分添加PCI ID</span><br><span class="line"></span><br><span class="line"># 可使用如下命令查看NVIDIA显卡的BUS ID</span><br><span class="line">nvidia-xconfig --query-gpu-info | grep &apos;BusID : &apos; | cut -d &apos; &apos; -f6</span><br></pre></td></tr></table></figure><h2 id="重启进入桌面"><a href="#重启进入桌面" class="headerlink" title="重启进入桌面"></a>重启进入桌面</h2><p>如果无法进入桌面环境，则安装失败，进入高级修复使用如下命令进行清理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge nvidia* bumblebee* prime*</span><br></pre></td></tr></table></figure></p><p>bumblebee服务开机不会启动，设置开机启动即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-rc.d -f bumblebee defaults</span><br></pre></td></tr></table></figure></p><h1 id="使用独显运行程序"><a href="#使用独显运行程序" class="headerlink" title="使用独显运行程序"></a>使用独显运行程序</h1><p>bumblebee不能做到集显和独显之间自动切换，系统运行时默认使用集显，当你需要使用独显运行某个程序或者游戏的时候，终端执行如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ optirum command #使用独显运行command程序</span><br><span class="line">$ optirum -b primus command #使用独显运行command程序，提升性能</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/37252268" target="_blank" rel="noopener">kali 在支持双显卡切换机器宏碁（Acer）V3下安装NVIDIA驱动</a>, by 不梦君.</li><li><a href="https://github.com/europa502/Installing-Nvidia-drivers-on-Kali-Linux" target="_blank" rel="noopener">Installing-Nvidia-drivers-on-Kali-Linux</a>, by europa502.</li><li><a href="https://zh.wikipedia.org/wiki/NVIDIA_Optimus" target="_blank" rel="noopener">NVIDIA Optimus</a>, by wikipedia.</li><li><a href="https://linux.cn/article-3946-1.html" target="_blank" rel="noopener">在Ubuntu上安装和配置Nvidia Optimus驱动</a>, by Linux中国.</li><li><a href="https://wiki.archlinux.org/index.php/Bumblebee(简体中文" target="_blank" rel="noopener">Bumblebee</a>),by archlinux.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;购买笔记本拥有Intel集成显卡和NVIDIA显卡，如何在Debian Linux下启用NVIDIA显卡是一个难题。幸运的是，通过bumblebee软件可在Linux下支持NVIDIA Optimus技术，实现Intel集成显卡和NVIDIA显卡之间的切换使用。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="https://huangwang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux图形界面基础知识</title>
    <link href="https://huangwang.github.io/2018/12/09/Linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://huangwang.github.io/2018/12/09/Linux图形界面基础知识/</id>
    <published>2018-12-09T11:55:24.000Z</published>
    <updated>2018-12-10T13:34:24.304Z</updated>
    
    <content type="html"><![CDATA[<p>Linux初学者经常分不清楚linux和X之间，X和Xfree86之间，X和KDE，GNOME等之间是什么关系。常常混淆概念，下面以易于理解的方式解释X，X11，XFREE，WM，KDE，GNOME等之间的关系。</p><h1 id="Linux内核没有图形用户界面"><a href="#Linux内核没有图形用户界面" class="headerlink" title="Linux内核没有图形用户界面"></a>Linux内核没有图形用户界面</h1><p>与Windows操作系统内核集成图形用户界面不同，Linux内核没有图形用户界面，是一个基于命令行的操作系统。</p><p>linux和Xfree的关系就相当于当年的DOS和 WINDOWS3.0一样，windows3.0不是独立的操作系统，它只是DOS的扩充，是DOS下的应用程序级别的系统，不是独立的操作系统，同样 XFree只是linux下的一个应用程序而已。不是系统的一部分，但是X的存在可以方便用户使用电脑。</p><p>WINDOWS95及以后的版本就不一样了，他们 的图形界面是操作系统的一部分，图形界面在系统内核中就实现了，没有了图形界面windows就不成为windows了，但linux却不一样，没有图形 界面linux还是linux，很多装linux的WEB服务器就根本不装X服务器.这也WINDOWS和linux的重要区别之一。</p><h1 id="X是协议，不是具体的某个软件"><a href="#X是协议，不是具体的某个软件" class="headerlink" title="X是协议，不是具体的某个软件"></a>X是协议，不是具体的某个软件</h1><p>X 是协议，就像HTTP协议，IP协议一样。一个基于X的应用程序需要运行并显示内容时他就联 接到X服务器，开始用X协议和服务器交谈。</p><p>比如一个X应用程序要在屏幕上输出一个圆那么他就用X协议对X服务器说：喂!我需要在屏幕上画一个圆.X应用程 序只负责告诉X服务器在屏幕的什么地方用什么颜色画一个多大的圆，而具体的”画”的动作，比如这个圆如何生成，用什么显卡的驱动程序去指挥显卡完成等等工作是由X服务器来完成的。</p><p>X服务器还负责捕捉键盘和鼠标的动作，假设X服务器捕捉到鼠标的左键被按下了，他就告诉X应用程序：亲爱的应用程序先生，我发现 鼠标被按下了，您有什么指示吗?如果X应用程序被设计成当按下鼠标左健后再在屏幕上画一个正方形的话，X应用程序就对X服务器说：请再画一个正方形，当然 他会告诉服务器在什么地方用什么颜色画多大的正方形，但不关心具体怎么画—那是服务器的事情。</p><h1 id="XFree86和Xorg是实现X协议的服务器程序"><a href="#XFree86和Xorg是实现X协议的服务器程序" class="headerlink" title="XFree86和Xorg是实现X协议的服务器程序"></a>XFree86和Xorg是实现X协议的服务器程序</h1><p>Xfree86就是这样一个去根据法规实现协议的 “交警”。他按照X协议的规定来完成X应用程序提交的在屏幕上显示的任务。当然不仅仅是某个特定的交警才可以去维护和实现这个法规，比如还可以由交通协管 员来实现交通法规，必要的时候警察也可以介入，当然前提是他们都要懂得交通法规，也就是要懂得协议。</p><p>所以实现X协议的软件也并不只有 XFree86，XFree86只是实现X协议的一个免费X服务器软件.商业上常用MOTIF，现在还有XORG，还有很多很小的由爱好者写的小的X服务器软件。</p><h1 id="X和X11R6的关系"><a href="#X和X11R6的关系" class="headerlink" title="X和X11R6的关系"></a>X和X11R6的关系</h1><p>X11R6 实际上是 X Protocol version 11 Release 6<br>(X协议第11版第六次发行)的意思，就是说目前用的X协议是第11版的，然后经过了6次小的修正。</p><p><strong>不同版本的X协议是不能通信的</strong>。就象我们现在IPV4和IPV6不能通信一样，不过不用担心，现在的X服务器软件和X应用程序都遵循X11R6。</p><h1 id="X服务器和WM-window-manager-窗口管理器-的关系"><a href="#X服务器和WM-window-manager-窗口管理器-的关系" class="headerlink" title="X服务器和WM(window manager 窗口管理器)的关系"></a>X服务器和WM(window manager 窗口管理器)的关系</h1><p> 窗口管理器是一种X应用程序，它负责窗口最大化，最小化，移动，关闭窗口等。这些不是X服务器负责完成的。</p><h1 id="KDE和GNOME"><a href="#KDE和GNOME" class="headerlink" title="KDE和GNOME"></a>KDE和GNOME</h1><p>KDE 和GNOME是LINUX里最常用的图形界面操作环境，他们不仅仅是一个窗口管理器那么简单， KDE是K Desktop Environment 的缩写。他不仅是一个窗口管理器，还有很多配套的应用软件和方便使用的桌面环境，比如任务栏，开始菜单，桌面图标等等。</p><p>GNOME是GNU Network Object Model Environment 的缩写。和KDE一样，也是一个功能强大的综合环境。</p><p>另外在其它UNIX系统中，常常使用CDE作为这样一个环境。</p><p>其它的小型窗口管理器有: window maker，after step，blackbox，fvwm，fvwm2，等等都是常用的优秀窗口管理器。</p><h1 id="linux图形界面层次关系总结"><a href="#linux图形界面层次关系总结" class="headerlink" title="linux图形界面层次关系总结"></a>linux图形界面层次关系总结</h1><p>linux本身—&gt;X服务器&lt;-[通过X协议交谈]-&gt;窗口管理器(综合桌面环境)—&gt;X应用程序。</p><p>Xfree86服务器的实现包括两个部分，一部分是和显卡直接打交道的低层，一部分是和X应用程序打交道的上层。</p><p>上层负责接收应用程序的请求和鼠标 键盘的动作。而和显卡直接打交道的底层负责指挥显卡生成图形，其实就是显卡驱动。上层接收到应用程序的请求后，将请求内容做适当处理，然后交给显卡驱动来 指挥 显卡完成画图的动作。</p><p>另外，上层的捕捉键盘和鼠标动作的部分会向应用程序提供鼠标和键盘的状态信息，应用程序接收到这些信息后决定是否再有相应的动作。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/huang_xw/article/details/9224683" target="_blank" rel="noopener">linux图形界面基本知识(X、X11、Xfree86、Xorg、GNOME、KDE)</a>, by  huang_xw.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux初学者经常分不清楚linux和X之间，X和Xfree86之间，X和KDE，GNOME等之间是什么关系。常常混淆概念，下面以易于理解的方式解释X，X11，XFREE，WM，KDE，GNOME等之间的关系。&lt;/p&gt;
&lt;h1 id=&quot;Linux内核没有图形用户界面&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="linux" scheme="https://huangwang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>家用电器安全使用年限与折旧</title>
    <link href="https://huangwang.github.io/2018/12/08/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8%E5%AE%89%E5%85%A8%E4%BD%BF%E7%94%A8%E5%B9%B4%E9%99%90%E4%B8%8E%E6%8A%98%E6%97%A7/"/>
    <id>https://huangwang.github.io/2018/12/08/家用电器安全使用年限与折旧/</id>
    <published>2018-12-08T13:42:07.000Z</published>
    <updated>2018-12-08T14:44:12.743Z</updated>
    
    <content type="html"><![CDATA[<p>家用电器都有一定的安全使用年限，超过安全使用年限，家用电器因产品老化将产生如下问题，造成安全隐患：</p><ul><li>绝缘体老化，产生漏电，导致电磁污染</li><li>元器件技术指标严重下降，导致有害物质泄漏，耗电量增加</li></ul><p>那么家用电器的安全使用年限是多少呢？购买二手家用电器时如何折旧呢？</p><h1 id="家用电器安全使用年限"><a href="#家用电器安全使用年限" class="headerlink" title="家用电器安全使用年限"></a>家用电器安全使用年限</h1><p>有关家电安全使用年限的标准通则早已出台，但是针对不同产品的具体年限细则却迟迟未发布。原因主要在于不同产品的使用年限评估难度较大，不同地区的使用差异性也较大，因此就目前而言国内尚无明确的家电使用年限方面的规定，国际通行年限可作参考：</p><ul><li>电吹风：4年</li><li>电热毯：6年</li><li>电脑：6年</li><li>吸尘器：8年</li><li>煤气灶：8年</li><li>电热水器：8年</li><li>洗衣机：8年</li><li>电视：8-10年</li><li>空调：8-10年</li><li>微波炉：10年</li><li>电饭煲：10年</li><li>电风扇：10年</li><li>冰箱：12-16年</li></ul><p>家用电器安全使用年限只是最高限定，<strong>如果在使用过程中不注意保养维护，也有可能缩减家用电器的使用寿命</strong>，这就要求用户在日常生活中需要注重维护保养，使家电处于良好的工作环境，确保家电安全“服役”。</p><h2 id="家用电器老化特征"><a href="#家用电器老化特征" class="headerlink" title="家用电器老化特征"></a>家用电器老化特征</h2><p>家用电器也有各自的老化特征，当出现以下老化特征时，建议及时保养或更换：</p><ol><li><p>空调：如果使用多年的空调开始出现制冷或制热变慢，噪音过大，在开机时会出现霉味且出风伴有灰尘，流出黑水，那么用户就应该考虑更换一台新空调。老旧空调此时不仅耗费更多电量，出风还会带有细菌污垢，影响身体健康。</p></li><li><p>冰箱：平时运行良好的冰箱开始出现制冷效果差，噪音过大，甚至发生轻微颤动时，说明已经老化。若继续使用，耗电量将会加大，食物的储鲜功能也会退化，有时还会出现冰箱制冷剂泄露，污染食材环境的问题。</p></li><li><p>洗衣机：洗衣机使用超龄的现象在用户中最为常见，判断它已经超龄的方式也最为简单。通常来说，洗衣机出现渗水、漏水、漏电，噪音过大，衣物清洗不净等问题都是达到使用年限的表现，严重时甚至会发生爆炸事件。</p></li><li><p>电视机：虽然各种类型的平板、投影仪的市场占有率越来越高，但电视机仍然是每个家庭不可或缺的电器之一。日常使用电视时，屏幕色彩暗淡，画面模糊抖动，除了要考虑电视自身质量问题，还要查看电视使用时长是否已经超出使用年限。超龄服役的电视机除了耗电量增加外，自燃或爆炸事故也时有发生。</p></li><li><p>热水器：热水器超出使用年限后，在运行时会出现异常声音，安全装置也会发生功能异常问题，再加上内胆中日积月累的杂质污垢，不仅会污染水质，还可能因漏电对人体造成伤害。除此之外，超龄热水器还易出现漏水、保温性差以及因内部电器元件老化导致的短路、冒烟等故障。</p></li></ol><p><strong>一旦发现家中电器存在以上类似的老化特征时，最好提前更换产品，以免带来严重后果</strong>。据媒体公开报道，每年我国因家电触电伤亡人数超过1000人，因家电引起的火灾损失更加惊人，而这其中最典型的原因就是家电超龄“使用”。</p><h1 id="家用电器折旧"><a href="#家用电器折旧" class="headerlink" title="家用电器折旧"></a>家用电器折旧</h1><p><strong>家用电器折旧可简单按固定资产折旧方法中的直线法，根据家用电器安全使用年限逐年折旧</strong>。</p><h2 id="固定资产折旧方法"><a href="#固定资产折旧方法" class="headerlink" title="固定资产折旧方法"></a>固定资产折旧方法</h2><p>固定资产折旧方法（Fixed-assets Depreciation Method），指将应提折旧总额在固定资产各使用期间进行分配时所采用的具体计算方法。折旧是指固定资产由于使用而逐渐磨损所减少的那部分价值。</p><p>固定资产的损耗有两种：</p><ul><li>有形损耗，也称作物质磨损，是由于使用而发生的机械磨损，以及由于自然力的作用所引起的自然损耗。</li><li>无形损耗，也称精神磨损，是指科学进步以及劳动生产率提高等原因而引起的固定资产价值的损失。</li></ul><p>一般情况下，当计算固定资产折旧时，要同时考虑这两种损耗。</p><p>固定资产折旧方法可分为三类：</p><h3 id="直线法"><a href="#直线法" class="headerlink" title="直线法"></a>直线法</h3><p>直线法（straight-line method）根据固定资产在整个使用寿命中的磨损状态而确定的成本分配结构。直线法依据是，固定资产的使用强度比较平均，而且各期所取得的收入差距不大。在直线法下，折旧金额是时间的线性函数。</p><p><strong>直线法折旧公式如下</strong>：</p><p>年折旧率 = （1 － 预计净残值率）÷ 预计使用寿命（年）× 100%</p><p>月折旧额 = 固定资产原价× 年折旧率 ÷ 12</p><p>其中，<strong>净残值是指预计固定资产清理报废时可收回的残值扣除清理费用后的数额</strong>。企业应根据固定资产的性质和使用方式，合理估计固定资产的净残值。</p><h3 id="加速折旧法"><a href="#加速折旧法" class="headerlink" title="加速折旧法"></a>加速折旧法</h3><p>加速折旧法也称为快速折旧法或递减折旧法。其特点是：在固定资产有效使用年限的前期多提折旧，后期则少提折旧。从而相对加快折旧的速度，以使固定资产成本在有效使用年限中加快得到补偿。在具体实务中，加速折旧方法又包括年数总和法和双倍余额递减法两种。</p><p><strong>年数总和法计算公式如下</strong>：</p><p>年折旧率 = 尚可使用寿命/ 预计使用寿命的年数总和 × 100 %</p><p>月折旧额 = （固定资产原价 － 预计净残值 ）× 年折旧率 ÷ 12</p><p>某设备预计使用5年，则预计使用寿命的年数总和为15（5+4+3+2+1）。第2年时尚可使用寿命为4，此年的年折旧率为4/15。</p><p><strong>双倍余额递减法计算公式如下</strong>：</p><p>年折旧率 =2÷　预计使用寿命（年）× 100%</p><p>月折旧额 = 固定资产净值 × 年折旧率 ÷ 12</p><h3 id="产量法"><a href="#产量法" class="headerlink" title="产量法"></a>产量法</h3><p>产量法（production method）根据固定资产的产出量分配其成本的方法。产量法的依据是固定资产的使用寿命主要是受其使用量影响，其合理性取决于三个条件：</p><p>（1）固定资产的每期用量波动较大；</p><p>（2）固定资产使用期内的产出的每期用量波动较大；</p><p>（3）固定资产服务潜力的下降与其使用程序密切相关。</p><p>如果符合这三个条件，产量法是最符合配比原则的。反对产量法的人认为，估计固定资产的产出量比估计固定资产的使用年限更加困难，而且很难考虑功能损耗因素。</p><p><strong>产量法计算公式如下</strong>：</p><p>单位工作量折旧额 = 固定资产原价 × （ 1 － 预计净残值率 ）/ 预计总工作量</p><p>某项固定资产月折旧额 = 该项固定资产当月工作量 × 单位工作量折旧额</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zhihu.com/question/64552198/answer/225583540" target="_blank" rel="noopener">家用电器的使用年限是多久？如何尽可能延长其寿命？</a>,by 海尔智慧生活.</li><li><a href="https://baike.baidu.com/item/固定资产折旧方法" target="_blank" rel="noopener">固定资产折旧方法</a>,by 百度百科.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;家用电器都有一定的安全使用年限，超过安全使用年限，家用电器因产品老化将产生如下问题，造成安全隐患：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝缘体老化，产生漏电，导致电磁污染&lt;/li&gt;
&lt;li&gt;元器件技术指标严重下降，导致有害物质泄漏，耗电量增加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么家用电器
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="生活常识" scheme="https://huangwang.github.io/tags/%E7%94%9F%E6%B4%BB%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>空战类游戏仿真的一些思考</title>
    <link href="https://huangwang.github.io/2018/12/08/%E7%A9%BA%E6%88%98%E7%B1%BB%E6%B8%B8%E6%88%8F%E4%BB%BF%E7%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://huangwang.github.io/2018/12/08/空战类游戏仿真的一些思考/</id>
    <published>2018-12-08T02:21:24.000Z</published>
    <updated>2018-12-18T10:42:33.260Z</updated>
    
    <content type="html"><![CDATA[<p>空战类游戏仿真涉及飞机、导弹、诱饵弹三种关键元素。为了使游戏仿真接近真实，一方面要使飞机、导弹、诱饵弹的模型及其特效（如尾焰）尽量逼真，另一方面要使飞机、导弹、诱饵弹的运动控制模型尽量接近真实。飞机、导弹、诱饵弹的模型可以用3d建模软件构建，尾焰也可以用粒子系统进行模拟，但飞机、导弹、诱饵弹的运动控制模型比较复杂，是实现空战类游戏仿真的关键。下面分别介绍飞机、导弹、诱饵弹的建模仿真。</p><h1 id="飞机的建模仿真"><a href="#飞机的建模仿真" class="headerlink" title="飞机的建模仿真"></a>飞机的建模仿真</h1><p>飞机的运动模型基于牛顿第二运动定律，即物体所受到的外力等于此物体的质量与加速度的乘积，而加速度与外力同方向。根据外部受力和力矩计算出各种惯性坐标系下的加速度和角加速度。将加速度和角加速度分别进行积分，则可以得出飞机在某个时间段内的速度变化量和角速度变化量，进一步积分便可得到位置变化量和角度的变化量，再通过积分过程中的坐标变换以及初始时刻的状态参数，便可获得任意时刻飞机的姿态、位置、速度等参数。</p><p>飞行员通过油门杆和操纵杆控制飞机的运动。油门杆决定飞机的推力，操纵杆则控制飞机的副翼、襟翼、尾翼，改变飞机所受合力矩，从而改变飞机姿态。飞行仿真采用同样原理，油门杆和操作杆的位移经过非线性函数变换改变飞机所受合力和合力矩，经飞机运动模型获得加速度和角加速度，再经积分获得任意时刻飞机的姿态、位置、速度等参数。</p><p>当使用键盘输入控制飞机时，应将键盘输入先虚拟成油门杆和操作杆。另外需要注意的是，油门杆不回中，操作杆则自动回中。</p><h1 id="导弹的建模仿真"><a href="#导弹的建模仿真" class="headerlink" title="导弹的建模仿真"></a>导弹的建模仿真</h1><p>根据导弹的工作原理，导弹的建模仿真应分成三个方面：</p><ul><li>探测模型</li><li>目标识别算法</li><li>运动控制模型</li></ul><h1 id="诱饵弹的建模仿真"><a href="#诱饵弹的建模仿真" class="headerlink" title="诱饵弹的建模仿真"></a>诱饵弹的建模仿真</h1><p>诱饵弹的运动模型比较简单，可运用牛顿第二运动定律分析得出。比较有难度的是诱饵弹的视觉特效建模。诱饵弹是一个变质量、不规则的发光体，如何3D建模有难度，不能像太阳一样直接用图片代替。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/23722074" target="_blank" rel="noopener">无人机飞控通俗演义之 纷繁复杂的飞行力学</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/25150076" target="_blank" rel="noopener">一起写飞行仿真之 六自由度动力学方程</a>, by 量子黑洞.</li><li><a href="https://zhuanlan.zhihu.com/p/34555581" target="_blank" rel="noopener">飞行仿真—1.三维建模篇</a>, by WFYX.</li><li><a href="https://zhuanlan.zhihu.com/p/23788458" target="_blank" rel="noopener">无人机飞控通俗演义之 无人机导航制导与控制</a>, by WFYX.</li><li><a href="http://home.flightgear.org/" target="_blank" rel="noopener">FLIGHTGEAR FLIGHT SIMULATOR</a>, by flightgear.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;空战类游戏仿真涉及飞机、导弹、诱饵弹三种关键元素。为了使游戏仿真接近真实，一方面要使飞机、导弹、诱饵弹的模型及其特效（如尾焰）尽量逼真，另一方面要使飞机、导弹、诱饵弹的运动控制模型尽量接近真实。飞机、导弹、诱饵弹的模型可以用3d建模软件构建，尾焰也可以用粒子系统进行模拟，但
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
      <category term="计算机仿真" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉研究范畴简介</title>
    <link href="https://huangwang.github.io/2018/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%A0%94%E7%A9%B6%E8%8C%83%E7%95%B4%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2018/12/07/计算机视觉研究范畴简介/</id>
    <published>2018-12-07T02:17:57.000Z</published>
    <updated>2018-12-07T14:58:16.416Z</updated>
    
    <content type="html"><![CDATA[<p>计算机视觉是一个跨领域的交叉学科，包括计算机科学（图形、算法、理论、系统、体系结构），数学（信息检索、机器学习），工程学（机器人、语音、自然语言处理、图像处理），物理学（光学 ），生物学（神经科学）和心理学（认知科学）等等。那么什么是计算机视觉呢？这里给出了几个比较严谨的定义：</p><ol><li>“对图像中的客观对象构建明确而有意义的描述”（Ballard＆Brown，1982）</li><li>“从一个或多个数字图像中计算三维世界的特性”（Trucco＆Verri，1998）</li><li>“基于感知图像做出对客观对象和场景有用的决策”（Sockman＆Shapiro，2001）</li></ol><h1 id="研究范畴"><a href="#研究范畴" class="headerlink" title="研究范畴"></a>研究范畴</h1><p>视觉识别是计算机视觉的关键组成部分，如图像分类、定位和检测。神经网络和深度学习的最新进展极大地推动了这些最先进的视觉识别系统的发展。下面介绍 5 种主要的计算机视觉技术：</p><ul><li>图像分类</li></ul><p>给定一组各自被标记为单一类别的图像，我们对一组新的测试图像的类别进行预测，并测量预测的准确性结果，这就是图像分类问题。图像分类问题需要面临以下几个挑战：</p><p>视点变化，尺度变化，类内变化，图像变形，图像遮挡，照明条件和背景杂斑</p><ul><li>对象检测</li></ul><p>识别图像中的对象这一任务，通常会涉及到为各个对象输出边界框和标签。这不同于分类/定位任务——对很多对象进行分类和定位，而不仅仅是对个主体对象进行分类和定位。在对象检测中，你只有 2 个对象分类类别，即对象边界框和非对象边界框。例如，在汽车检测中，你必须使用边界框检测所给定图像中的所有汽车。</p><ul><li>目标跟踪</li></ul><p>目标跟踪，是指在特定场景跟踪某一个或多个特定感兴趣对象的过程。传统的应用就是视频和真实世界的交互，在检测到初始对象之后进行观察。现在，目标跟踪在无人驾驶领域也很重要，例如 Uber 和特斯拉等公司的无人驾驶。</p><ul><li>语义分割</li></ul><p>计算机视觉的核心是分割，它将整个图像分成一个个像素组，然后对其进行标记和分类。特别地，语义分割试图在语义上理解图像中每个像素的角色（比如，识别它是汽车、摩托车还是其他的类别）。</p><ul><li>实例分割</li></ul><p>除了语义分割之外，实例分割将不同类型的实例进行分类，比如用 5 种不同颜色来标记 5 辆汽车。分类任务通常来说就是识别出包含单个对象的图像是什么，但在分割实例时，我们需要执行更复杂的任务。我们会看到多个重叠物体和不同背景的复杂景象，我们不仅需要将这些不同的对象进行分类，而且还要确定对象的边界、差异和彼此之间的关系！</p><h1 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h1><p>计算机视觉领域已经衍生出了一大批快速成长的、有实际作用的应用，例如：</p><ul><li>人脸识别： Snapchat 和 Facebook 使用人脸检测算法来识别人脸。</li><li>图像检索：Google Images 使用基于内容的查询来搜索相关图片，算法分析查询图像中的内容并根据最佳匹配内容返回结果。</li><li>游戏和控制：使用立体视觉较为成功的游戏应用产品是：微软 Kinect。</li><li>监测：用于监测可疑行为的监视摄像头遍布于各大公共场所中。</li><li>生物识别技术：指纹、虹膜和人脸匹配仍然是生物识别领域的一些常用方法。</li><li>智能汽车：计算机视觉仍然是检测交通标志、灯光和其他视觉特征的主要信息来源。</li></ul><h1 id="前沿研究"><a href="#前沿研究" class="headerlink" title="前沿研究"></a>前沿研究</h1><ul><li>超分辨率重建 (Image Super-Resolution)</li><li>图像着色 (Image Colorization)</li><li>“看图说话” (Image Caption)</li><li>人像复原 (Sketch Inversion)</li><li>图像自动生成</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/80016353" target="_blank" rel="noopener">详解计算机视觉五大技术：图像分类、对象检测、目标跟踪、语义分割和实例分割…</a>, by AI科技大本营</li><li><a href="https://zhuanlan.zhihu.com/p/21341440" target="_blank" rel="noopener">「无中生有」计算机视觉探奇</a>, by 魏秀参</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机视觉是一个跨领域的交叉学科，包括计算机科学（图形、算法、理论、系统、体系结构），数学（信息检索、机器学习），工程学（机器人、语音、自然语言处理、图像处理），物理学（光学 ），生物学（神经科学）和心理学（认知科学）等等。那么什么是计算机视觉呢？这里给出了几个比较严谨的定
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>三维建模方法简介</title>
    <link href="https://huangwang.github.io/2018/12/05/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://huangwang.github.io/2018/12/05/三维建模方法简介/</id>
    <published>2018-12-05T13:17:42.000Z</published>
    <updated>2018-12-05T13:39:26.700Z</updated>
    
    <content type="html"><![CDATA[<p>三维建模是一种常用技术，奈何心向往之，却没有时间去系统学习，也没有做出过一个作品。下面将我看到的一些好的有关三维建模的资料记录一下，以做备忘。</p><h1 id="三维建模方法"><a href="#三维建模方法" class="headerlink" title="三维建模方法"></a>三维建模方法</h1><h2 id="选择软件"><a href="#选择软件" class="headerlink" title="选择软件"></a>选择软件</h2><p>当前三维软件层出不穷，既有商业级的3ds MAX、MAYA、Creator，也有免费使用的Blender、MilkShape。</p><h2 id="下载蓝图"><a href="#下载蓝图" class="headerlink" title="下载蓝图"></a>下载蓝图</h2><p>飞行仿真的三维模型主要有飞行器、机场建筑等。和大多数虚拟现实中使用的模型一样，并不需要CAD级别的精度，一般是下载一些图片或飞机整体蓝图作为蓝本，采用多边形建模的方法分部建模。蓝图下载网址首推：</p><p><a href="http://www.the-blueprints.com/" target="_blank" rel="noopener">the‑blueprints.com</a></p><p>这里免费提供各种汽车、国内外飞机、船舶的三视图图纸下载。</p><h2 id="多边形建模"><a href="#多边形建模" class="headerlink" title="多边形建模"></a>多边形建模</h2><p>采用下载的蓝图，作为贴图放置在相应的投影平面上，然后采用多边形建模的方法画出各部分细节。多边形建模的思想就是采用一个诸如一个最接近的多边形，进行点线面的操作就可以绘制出复杂的飞机外形。</p><p>多边形建模从最基本的外形开始变形，可以从点线面及整体四个级别的操作，在越需要突出外形细节处用越多的点，通过建立网格模型，然后使用网格平滑功能生成平滑的曲面模型。</p><p>建模时不能有重复的点线面等几何体，否则即使表面上已经贴好了材质，但载入程序后，往往会因为Z向深度冲突的原因产生闪烁效果。其细节取决于您的需求，需要花费大量的时间。</p><h2 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h2><p>真实世界的模型带有各种彩色并具有光泽度。完成了几何体的建模对于一个模型来说只完成了一小半工作，还需要给模型添加材质。</p><p>与一般的模型不同，飞行器出于气动设计的考虑，其表面模型一般成流线型的曲面，且部件组成复杂，界线较难区分，即使是UVW贴图也难以胜任。因此，对飞行器的贴图主要采用3ds MAX的UVW展开贴图技术贴图。</p><p>一个模型最好只有一个贴图，因为贴图数目过多零散会影响计算机载入三维模型时间和效率。因此，一般将整个模型各个部件组合为一个多边形，各部件为元素，待完成UVW贴图后再分离成单独的部件。UVW展开贴图有多重形式，如长方体展开（即按六个视图投影）、平面展开等，按需选择。</p><p>在一张贴图上展开整个模型的UV坐标显然是有限的，需要根据现实精度调整各个部分的贴图大小。保存这些展开的贴图坐标并渲染输出UV模板图像文件。UV模板图像其实就是整个模型的贴图的界线图像，通过Photoshop等图像处理软件处理，采用尽可能真实的图像放置在对应的区域。最后将材质赋给对象即完成贴图渲染。</p><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><p>直接采用3ds MAX绘制的三维模型当然是<em>.max格式，它不能为外界程序读取。这时就需要根据自己的开发环境选择导出的数据格式，比如用开源的OSG做仿真开发，就需要OSGExp插件的支持，导成</em>.ive、<em>.osg、</em>.osgb等格式即可。但无论导出何种格式，<strong>切记保证模型质心与建模的原点不能相差不远，还要注意光照、贴图格式以及单位问题</strong>。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/34555581" target="_blank" rel="noopener">飞行仿真—1.三维建模篇</a>,by WFYX.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三维建模是一种常用技术，奈何心向往之，却没有时间去系统学习，也没有做出过一个作品。下面将我看到的一些好的有关三维建模的资料记录一下，以做备忘。&lt;/p&gt;
&lt;h1 id=&quot;三维建模方法&quot;&gt;&lt;a href=&quot;#三维建模方法&quot; class=&quot;headerlink&quot; title=&quot;三
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="3D" scheme="https://huangwang.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>深度强化学习研究笔记</title>
    <link href="https://huangwang.github.io/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/11/26/深度强化学习研究笔记/</id>
    <published>2018-11-26T02:07:07.000Z</published>
    <updated>2018-12-04T13:36:16.138Z</updated>
    
    <content type="html"><![CDATA[<p>深度强化学习Deep Reinforcement Learning是将深度学习与强化学习结合起来，从而实现从Perception感知到Action动作的端对端学习End-to-End Learning的一种全新的算法。深度强化学习具备使机器人实现真正完全自主地学习一种甚至多种技能的潜力。</p><h1 id="深度强化学习的起源"><a href="#深度强化学习的起源" class="headerlink" title="深度强化学习的起源"></a>深度强化学习的起源</h1><p>深度强化学习是深度学习与强化学习相结合的产物。</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>深度学习（deep learning）是机器学习的分支，是一种试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。</p><p>深度学习是机器学习中一种基于对数据进行表征学习的算法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的向量，或者更抽象地表示成一系列边、特定形状的区域等。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是用非监督式或半监督式的特征学习和分层特征提取高效算法来替代手工获取特征。</p><p>表征学习的目标是寻求更好的表示方法并创建更好的模型来从大规模未标记数据中学习这些表示方法。表示方法来自神经科学，并松散地创建在类似神经系统中的信息处理和对通信模式的理解上，如神经编码，试图定义拉动神经元的反应之间的关系以及大脑中的神经元的电活动之间的关系。</p><p>至今已有数种深度学习框架，如深度神经网络、卷积神经网络和深度置信网络和递归神经网络已被应用在计算机视觉、语音识别、自然语言处理、音频识别与生物信息学等领域并获取了极好的效果。</p><p>另外，“深度学习”已成为类似术语，或者说是神经网络的品牌重塑。</p><h3 id="深度神经网络"><a href="#深度神经网络" class="headerlink" title="深度神经网络"></a>深度神经网络</h3><p>深度神经网络是一种具备至少一个隐层的神经网络。与浅层神经网络类似，深度神经网络也能够为复杂非线性系统提供建模，但多出的层次为模型提供了更高的抽象层次，因而提高了模型的能力。</p><p>深度神经网络（Deep Neural Networks, DNN）是一种判别模型，可以使用反向传播算法进行训练。权重更新可以使用下式进行随机梯度下降法求解：</p><script type="math/tex; mode=display">\Delta w_{ij}(t+1)=\Delta w_{ij}(t) +  \eta\frac{\partial C}{\partial w_{ij}}</script><p>其中，$\eta$为学习率，$C$为代价函数。这一函数的选择与学习的类型（例如监督学习、无监督学习、增强学习）以及激活函数相关。例如，为了在一个多分类问题上进行监督学习，通常的选择是使用ReLU作为激活函数，而使用交叉熵作为代价函数。Softmax函数定义为${\displaystyle p<em>{j}={\frac {\exp(x</em>{j})}{\sum <em>{k}\exp(x</em>{k})}}}$，其中 ${\displaystyle p<em>{j}}$代表类别 ${\displaystyle j}$的概率，而 ${\displaystyle x</em>{j}}$和 ${\displaystyle x<em>{k}}$分别代表对单元 ${\displaystyle j}$ 和 ${\displaystyle k}$的输入。交叉熵定义为 $C = -\sum_j d_j \log(p_j)$ ，其中 ${\displaystyle d</em>{j}}$代表输出单元${\displaystyle j}$的目标概率， ${\displaystyle p_{j}}$代表应用了激活函数后对单元 ${\displaystyle j}$的概率输出。</p><h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>在人工智能领域，一般用智能体Agent表示一个具备行为能力的物体，比如机器人，无人车等等。而强化学习则研究智能体Agent和环境Environment之间交互过程如何取得任务的成功。</p><p>强化学习与环境的交互过程如图1所示。在某个时间点，智能体Agent会获得观察值(Observation)和反馈值(Reward)，然后根据这些选择下一步的动作(Action)。</p><p></p><p align="center">    <img src="images/reinforce_learning.png" width="90%" alt="强化学习示意图"></p><p></p><center>图1 强化学习示意图</center><p>在整个过程中，任务的目标是获取尽可能多的Reward，这是任务的目标。而在每个时间片，Agent都是根据当前的观察来确定下一步的动作。观察Observation的集合就作为Agent的所处的状态State，因此，状态State和动作Action存在映射关系，也就是一个state可以对应一个action，或者对应不同动作的概率（常常用概率来表示，概率最高的就是最值得执行的动作）。状态与动作的关系其实就是输入与输出的关系，而状态State到动作Action的过程就称之为一个策略Policy，一般用 $\pi$  表示，也就是需要找到以下关系：</p><script type="math/tex; mode=display">a=\pi(s)</script><p>或者</p><script type="math/tex; mode=display">\pi(a|s)</script><p>其中a是action，s是state。第一种是一一对应的表示，第二种是概率的表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">强化学习的任务就是找到一个最优的策略Policy从而使Reward最多。</span><br></pre></td></tr></table></figure></p><p>强化学习的训练一开始从采用随机策略进行试验开始，可获得一系列的状态,动作和反馈：</p><script type="math/tex; mode=display">\{s_1,a_1,r_1,s_2,a_2,r_2,...,s_t,a_t,r_t\}</script><p>根据这一系列样本，强化学习从中改进策略，使得任务反馈Reward越来越多。</p><h3 id="强化学习模型假设"><a href="#强化学习模型假设" class="headerlink" title="强化学习模型假设"></a>强化学习模型假设</h3><p>强化学习的研究建立在经典物理学基础上，基于以下两种假设：</p><ol><li>时间是可以分割成一个一个时间片的，并且有完全的先后顺序。</li><li>上帝不掷筛子！如果输入是确定的，那么输出也一定是确定的。</li></ol><h3 id="强化学习与马尔科夫决策过程"><a href="#强化学习与马尔科夫决策过程" class="headerlink" title="强化学习与马尔科夫决策过程"></a>强化学习与马尔科夫决策过程</h3><p>MDP基于这样一种假设：未来只取决于当前。</p><p>一个状态$S_t$是Markov当且仅当</p><script type="math/tex; mode=display">P(s_{t+1}|s_t)=P(s_{t+1}|s_t,s_{t-1},...s_1,s_0)</script><p>P为概率。简单的说就是下一个状态仅取决于当前的状态和当前的动作。注意这里的状态是完全可观察的全部的环境状态（也就是上帝视角）。</p><p>增强学习的问题都可以模型化为MDP的问题。</p><p>一个基本的MDP可以用（S,A,P）来表示，S表示状态，A表示动作，P表示状态转移概率，也就是根据当前的状态$s<em>t$和$a_t$转移到$s</em>{t+1}$的概率。如果我们知道了转移概率P，也就是称为我们获得了模型Model，有了模型，未来就可以求解，那么获取最优的动作也就有可能，这种通过模型来获取最优动作的方法也就称为Model-based的方法。但是现实情况下，很多问题是很难得到准确的模型的，因此就有Model-free的方法来寻找最优的动作。</p><h3 id="强化学习的回报Result"><a href="#强化学习的回报Result" class="headerlink" title="强化学习的回报Result"></a>强化学习的回报Result</h3><p>既然一个状态对应一个动作，或者动作的概率，而有了动作，下一个状态也就确定了。这就意味着每个状态可以用一个确定的值来进行描述。可以由此判断一个状态是好的状态还是不好的状态。</p><p>状态的好坏其实等价于对未来回报的期望。因此，引入回报Return来表示某个时刻t的状态将具备的回报：</p><script type="math/tex; mode=display">G_t = R_{t+1} + \lambda R_{t+2} + ... = \sum_{k=0}^\infty\lambda^kR_{t+k+1}</script><p>上面R是Reward反馈，λ是discount factor折扣因子，一般小于1，就是说一般当下的反馈是比较重要的，时间越久，影响越小。</p><p>那么实际上除非整个过程结束，否则显然我们无法获取所有的reward来计算出每个状态的Return，因此，再引入一个概念价值函数Value Function,用value function $v(s)$来表示一个状态未来的潜在价值。</p><p>从定义上看，value function就是回报的期望：</p><script type="math/tex; mode=display">v(s) = \mathbb E[G_t|S_t = s]</script><p>引出价值函数，对于获取最优的策略Policy这个目标，我们就会有两种方法：</p><ul><li>直接优化策略$\pi(a|s)$或者$a = \pi(s)$使得回报更高</li><li>通过估计value function来间接获得优化的策略。道理很简单，既然我知道每一种状态的优劣，那么我就知道我应该怎么选择了，而这种选择就是我们想要的策略。</li></ul><p>把值函数展开：</p><script type="math/tex; mode=display">\begin{aligned}    v(s) & = \mathbb E[G_t|S_t = s] \\\\      & = \mathbb E[R_{t+1}+\lambda R_{t+2} + \lambda ^2R_{t+3} + ...|S_t = s] \\\\       & = \mathbb E[R_{t+1}+\lambda (R_{t+2} + \lambda R_{t+3} + ...)|S_t = s] \\\\      & = \mathbb E[R_{t+1} + \lambda G_{t+1}|S_t = s] \\\\       & = \mathbb E[R_{t+1} + \lambda v(S_{t+1})|S_t = s]\end{aligned}</script><p>因此：</p><script type="math/tex; mode=display">v(s) = \mathbb E[R_{t+1} + \lambda v(S_{t+1})|S_t = s]</script><p>上面这个公式就是Bellman方程的基本形态。从公式上看，当前状态的价值和下一步的价值以及当前的反馈Reward有关。它表明Value Function是可以通过迭代来进行计算的!!!</p><h3 id="Action-Value-function-动作价值函数"><a href="#Action-Value-function-动作价值函数" class="headerlink" title="Action-Value function 动作价值函数"></a>Action-Value function 动作价值函数</h3><p>前面我们引出了价值函数，考虑到每个状态之后都有多种动作可以选择，每个动作之下的状态又多不一样，我们更关心在某个状态下的不同动作的价值。显然。如果知道了每个动作的价值，那么就可以选择价值最大的一个动作去执行了。这就是Action-Value function  $Q^\pi(s,a)$。那么同样的道理，也是使用reward来表示，只是这里的reward和之前的reward不一样，这里是执行完动作action之后得到的reward，之前state对应的reward则是多种动作对应的reward的期望值。显然，动作之后的reward更容易理解。</p><p>动作价值函数就为如下表示：</p><script type="math/tex; mode=display">\begin{aligned}Q^\pi(s,a) & =  \mathbb E[r_{t+1} + \lambda r_{t+2} + \lambda^2r_{t+3} + ... |s,a] \\\\& = \mathbb E_{s^\prime}[r+\lambda Q^\pi(s^\prime,a^\prime)|s,a]\end{aligned}</script><p>这里要说明的是动作价值函数的定义，加了$\pi$,也就是说是在策略下的动作价值。因为对于每一个动作而已，都需要由策略根据当前的状态生成，因此必须有策略的支撑。而前面的价值函数则不一定依赖于策略。当然，如果定义$v^\pi(s)$则表示在策略$\pi$下的价值。</p><h3 id="Optimal-value-function-最优价值函数"><a href="#Optimal-value-function-最优价值函数" class="headerlink" title="Optimal value function 最优价值函数"></a>Optimal value function 最优价值函数</h3><p>能计算动作价值函数是不够的，因为我们需要的是最优策略，现在求解最优策略等价于求解最优的value function，找到了最优的value function，自然而然策略也就是找到。（当然，这只是求解最优策略的一种方法，也就是value-based approach，由于DQN就是value-based，因此这里只讲这部分，以后我们会看到还有policy-based和model-based方法。一个就是直接计算策略函数，一个是估计模型，也就是计算出状态转移函数，从而整个MDP过程得解）</p><p>这里以动作价值函数来分析。</p><p>首先是最优动作价值函数和一般的动作价值函数的关系：</p><script type="math/tex; mode=display">\begin{aligned}Q^*(s,a) &= \max_\pi Q^\pi(s,a)\\\\ & = \mathbb E_{s^\prime}[r+\lambda \max _{a^\prime}Q^*(s^\prime,a^\prime)|s,a]\end{aligned}</script><p>也就是最优的动作价值函数就是所有策略下的动作价值函数的最大值。通过这样的定义就可以使最优的动作价值的唯一性，从而可以求解整个MDP。</p><p>下面介绍基于Bellman方程的两个最基本的算法，策略迭代和值迭代。</p><h3 id="策略迭代Policy-Iteration"><a href="#策略迭代Policy-Iteration" class="headerlink" title="策略迭代Policy Iteration"></a>策略迭代Policy Iteration</h3><p>Policy Iteration的目的是通过迭代计算value function 价值函数的方式来使policy收敛到最优。</p><p>Policy Iteration本质上就是直接使用Bellman方程而得到的：</p><script type="math/tex; mode=display">\begin{aligned}v_{k+1}(s) &\overset{.}{=} \mathbb E_{\pi}[R_{t+1}+\gamma v _{k}(S_{t+1})|S_t=s]\\\\&=\sum_{a}{\pi(a|s)}\sum_{s^\prime,r}{p(s^\prime,r|s,a)[r+\gamma v_k(s^\prime)]}\end{aligned}</script><p>那么Policy Iteration一般分成两步：</p><ol><li>Policy Evaluation 策略评估。目的是更新Value Function，或者说更好的估计基于当前策略的价值</li><li>Policy Improvement 策略改进。 使用 greedy policy 产生新的样本用于第一步的策略评估。</li></ol><p></p><p align="center">    <img src="images/policy_iteration.png" width="90%" alt="策略迭代算法示意图"></p><p></p><center>图2 策略迭代算法示意图</center><p>本质上就是使用当前策略产生新的样本，然后使用新的样本更好的估计策略的价值，然后利用策略的价值更新策略，然后不断反复。理论可以证明最终策略将收敛到最优。</p><p>具体算法：</p><p></p><p align="center">    <img src="images/policy_iteration_method.png" width="90%" alt="策略迭代算法"></p><p></p><center>图3 策略迭代算法</center><p>那么这里要注意的是policy evaluation部分。这里的迭代很重要的一点是需要知道state状态转移概率p。也就是说依赖于model模型。而且按照算法要反复迭代直到收敛为止。所以一般需要做限制。比如到某一个比率或者次数就停止迭代。那么需要特别说明的是不管是策略迭代还是值迭代都是在理想化的情况下（上帝视角）推导出来的算法，本质上并不能直接应用，因为依赖Model。</p><h3 id="Value-Iteration-价值迭代"><a href="#Value-Iteration-价值迭代" class="headerlink" title="Value Iteration 价值迭代"></a>Value Iteration 价值迭代</h3><p>Value Iteration则是使用Bellman 最优方程得到:</p><script type="math/tex; mode=display">\begin{aligned}v_{*}(s) & = \max_{a} \mathbb E_{\pi}[R_{t+1}+\gamma v _{*}(S_{t+1})|S_t=s,A_t=a]\\\\& = \max_{a} \sum_{s^\prime,r}p(s^\prime,r|s,a)[r+\gamma v_*(s^\prime)]\end{aligned}</script><p>然后改变成迭代形式:</p><script type="math/tex; mode=display">\begin{aligned}v_{k+1}(s) &\overset{.}{=} \max_{a} \mathbb E_{\pi}[R_{t+1}+\gamma v _{k}(S_{t+1})|S_t=s,A_t=a]\\\\& = \max_{a} \sum_{s^\prime,r}p(s^\prime,r|s,a)[r+\gamma v_k(s^\prime)]\end{aligned}</script><p>value iteration的算法如下：</p><p></p><p align="center">    <img src="images/policy_iteration_method.png" width="90%" alt="值迭代算法"></p><p></p><center>图4 值迭代算法</center><p>Policy Iteration和Value Iteration有什么本质区别？</p><p>policy iteration使用bellman方程来更新value，最后收敛的value 即$v_\pi$是当前policy下的value值（所以叫做对policy进行评估），目的是为了后面的policy improvement得到新的policy。</p><p>而value iteration是使用bellman 最优方程来更新value，最后收敛得到的value即$v_*$就是当前state状态下的最优的value值。因此，只要最后收敛，那么最优的policy也就得到的。因此这个方法是基于更新value的，所以叫value iteration。</p><p>从上面的分析看，value iteration较之policy iteration更直接。不过问题也都是一样，需要知道状态转移函数p才能计算。本质上依赖于模型，而且理想条件下需要遍历所有的状态，这在稍微复杂一点的问题上就基本不可能了。</p><h3 id="Q-Learning"><a href="#Q-Learning" class="headerlink" title="Q-Learning"></a>Q-Learning</h3><p>Q Learning的思想完全根据value iteration得到。但要明确一点是value iteration每次都对所有的Q值更新一遍，也就是所有的状态和动作。但事实上在实际情况下我们没办法遍历所有的状态，还有所有的动作，我们只能得到有限的系列样本。因此，只能使用有限的样本进行操作。那么，怎么处理？Q Learning提出了一种更新Q值的办法：</p><script type="math/tex; mode=display">Q(S_{t},A_{t}) \leftarrow Q(S_{t},A_{t})+\alpha({R_{t+1}+\lambda \max _aQ(S_{t+1},a)} - Q(S_t,A_t))</script><p>虽然根据value iteration计算出target Q值，但是这里并没有直接将这个Q值（是估计值）直接赋予新的Q，而是采用渐进的方式类似梯度下降，朝target迈近一小步，取决于α,这就能够减少估计误差造成的影响。类似随机梯度下降，最后可以收敛到最优的Q值。</p><p>具体的算法如下：</p><p></p><p align="center">    <img src="images/policy_iteration_method.png" width="90%" alt="Q学习算法"></p><p></p><center>图5 Q学习算法</center><h3 id="Exploration-and-Exploitation-探索与利用"><a href="#Exploration-and-Exploitation-探索与利用" class="headerlink" title="Exploration and Exploitation 探索与利用"></a>Exploration and Exploitation 探索与利用</h3><p>回到policy的问题，那么要选择怎样的policy来生成action呢？有两种做法：</p><ul><li><p>随机的生成一个动作</p></li><li><p>根据当前的Q值计算出一个最优的动作，这个policy\pi称之为greedy policy贪婪策略。也就是</p></li></ul><script type="math/tex; mode=display">\pi(S_{t+1}) = arg\max _aQ(S_{t+1},a)</script><p>使用随机的动作就是exploration，也就是探索未知的动作会产生的效果，有利于更新Q值，获得更好的policy。而使用greedy policy也就是target policy则是exploitation，利用policy，这个相对来说就不好更新出更好的Q值，但可以得到更好的测试效果用于判断算法是否有效。</p><p>将两者结合起来就是所谓的$\epsilon-greedy$策略，$\epsilon$一般是一个很小的值，作为选取随机动作的概率值。可以更改$\epsilon$的值从而得到不同的exploration和exploitation的比例。</p><p>这里需要说明的一点是使用$\epsilon-greedy$策略是一种极其简单粗暴的方法，对于一些复杂的任务采用这种方法来探索未知空间是不可取的。因此，最近有越来越多的方法来改进这种探索机制。</p><h2 id="深度强化学习"><a href="#深度强化学习" class="headerlink" title="深度强化学习"></a>深度强化学习</h2><p>深度强化学习始于DeepMind在NIPS 2013上发表的Playing Atari with Deep Reinforcement Learning一文，在该文中第一次提出Deep Reinforcement Learning 这个名称，并且提出DQN（Deep Q-Network）算法，实现从纯图像输入完全通过学习来玩Atari游戏的成果。</p><p>之后DeepMind在Nature上发表了改进版的DQN文章Human-level Control through Deep Reinforcement Learning，引起了广泛的关注，Deep Reinfocement Learning 从此成为深度学习领域的前沿研究方向。</p><h3 id="维度灾难"><a href="#维度灾难" class="headerlink" title="维度灾难"></a>维度灾难</h3><p>对简单问题可使用表格来表示Q(s,a)，但是这个在现实的很多问题上是几乎不可行的，因为状态实在是太多。使用表格的方式根本存不下。</p><p>以计算机玩Atari游戏为例，计算机玩Atari游戏的要求是输入原始图像数据，也就是210x160像素的图片，然后输出几个按键动作。总之就是和人类的要求一样，纯视觉输入，然后让计算机自己玩游戏。那么这种情况下，到底有多少种状态呢？有可能每一秒钟的状态都不一样。因为，从理论上看，如果每一个像素都有256种选择，那么就有：</p><script type="math/tex; mode=display">256^{210\times 160}</script><p>这简直是天文数字。所以，我们是不可能通过表格来存储状态的。我们有必要对状态的维度进行压缩，解决办法就是 价值函数近似Value Function Approximation</p><h3 id="价值函数近似Value-Function-Approximation"><a href="#价值函数近似Value-Function-Approximation" class="headerlink" title="价值函数近似Value Function Approximation"></a>价值函数近似Value Function Approximation</h3><p>什么是价值函数近似呢？说起来很简单，就是用一个函数来表示Q(s,a)。即</p><script type="math/tex; mode=display">Q(s,a) = f(s,a)</script><p>$f$可以是任意类型的函数，比如线性函数：</p><script type="math/tex; mode=display">Q(s,a) = w_1s + w_2a + b</script><p>其中$w_1$,$w_2$,$b$是函数$f$的参数。</p><p>通过函数表示，我们就可以无所谓s到底是多大的维度，反正最后都通过矩阵运算降维输出为单值的Q。</p><p>这就是价值函数近似的基本思路。</p><p>如果我们就用$w$来统一表示函数$f$的参数，那么就有</p><script type="math/tex; mode=display">Q(s,a) = f(s,a,w)</script><p>为什么叫近似，因为我们并不知道Q值的实际分布情况，本质上就是用一个函数来近似Q值的分布，所以，也可以说是</p><script type="math/tex; mode=display">Q(s,a)\approx f(s,a,w)</script><h3 id="Q值神经网络化——DQN算法"><a href="#Q值神经网络化——DQN算法" class="headerlink" title="Q值神经网络化——DQN算法"></a>Q值神经网络化——DQN算法</h3><p>意思很清楚，就是我们用一个深度神经网络来表示这个函数$f$。</p><p>以DQN为例，输入是经过处理的4个连续的84x84图像，然后经过两个卷积层，两个全连接层，最后输出包含每一个动作Q值的向量。</p><p>神经网络的训练是一个最优化问题，最优化一个损失函数loss function，也就是标签和网络输出的偏差，目标是让损失函数最小化。为此，我们需要有样本，巨量的有标签数据，然后通过反向传播使用梯度下降的方法来更新神经网络的参数。</p><p>如何为Q网络提供有标签的样本？答案就是利用Q-Learning算法。目标Q值作为标签，使Q值趋近于目标Q值。于是Q网络训练的损失函数就是：</p><p></p><p align="center">    <img src="images/loss_function.png" width="80%" alt="DQN损失函数"></p><p></p><center>图6 DQN损失函数</center><p>上面公式是$s^\prime$, $a^\prime$即下一个状态和动作。这里用了David Silver的表示方式，看起来比较清晰。<br>既然确定了损失函数，也就是cost，确定了获取样本的方式。那么DQN的整个算法也就成型了！</p><p>这里分析第一个版本的DQN，也就是NIPS 2013提出的DQN。</p><p></p><p align="center">    <img src="images/dqn_method.png" width="90%" alt="DQN算法"></p><p></p><center>图7 DQN算法</center><p>具体的算法主要涉及到Experience Replay，也就是经验池的技巧，就是如何存储样本及采样问题。</p><p>由于玩Atari采集的样本是一个时间序列，样本之间具有连续性，如果每次得到样本就更新Q值，受样本分布影响，效果会不好。因此，一个很直接的想法就是把样本先存起来，然后随机采样如何？这就是Experience Replay的意思。按照脑科学的观点，人的大脑也具有这样的机制，就是在回忆中学习。</p><p>那么上面的算法看起来那么长，其实就是反复试验，然后存储数据。接下来数据存到一定程度，就每次随机采用数据，进行梯度下降！</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/深度学习" target="_blank" rel="noopener">深度学习</a>, by wikipedia.</li><li><a href="https://zhuanlan.zhihu.com/p/21262246?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃1 DQN与增强学习</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21292697?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃2 增强学习与MDP</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21340755?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃3 价值函数与Bellman方程</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21378532" target="_blank" rel="noopener">DQN 从入门到放弃4 动态规划与Q-Learning</a>,by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21421729" target="_blank" rel="noopener">DQN从入门到放弃5 深度解读DQN算法</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21547911" target="_blank" rel="noopener">DQN从入门到放弃6 DQN的各种改进</a>, by Flood Sung.</li><li><a href="https://zhuanlan.zhihu.com/p/21609472" target="_blank" rel="noopener">DQN从入门到放弃7 连续控制DQN算法-NAF</a>,by Flood Sung.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深度强化学习Deep Reinforcement Learning是将深度学习与强化学习结合起来，从而实现从Perception感知到Action动作的端对端学习End-to-End Learning的一种全新的算法。深度强化学习具备使机器人实现真正完全自主地学习一种甚至多
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>wiringPi学习笔记</title>
    <link href="https://huangwang.github.io/2018/11/24/wiringPi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://huangwang.github.io/2018/11/24/wiringPi学习笔记/</id>
    <published>2018-11-24T12:26:31.000Z</published>
    <updated>2018-12-20T14:17:02.989Z</updated>
    
    <content type="html"><![CDATA[<p>wiringPi 库是由 Gordon Henderson 所编写并维护的一个用 C 语言写成的类库。起初,主要是作为 BCM2835 芯片的 GPIO 库。而现在,已经非常丰富,除了 GPIO 库,还包括了I2C 库、SPI 库、UART 库和软件 PWM 库等。</p><p>由于其与 Arduino 的“wiring”系统较为类似,故以此命名。它是采用 GNU LGPLv3许可证的,可以在 C 或 C++上使用,而且在其他编程语言上也有对应的扩展。</p><p>wiringPi 库包含了一个命令行工具 gpio,它可以用来设置 GPIO 管脚,可以用来读写GPIO 管脚,甚至可以在 Shell 脚本中使用来达到控制 GPIO 管脚的目的。</p><h1 id="下载、编译和测试wiringPi"><a href="#下载、编译和测试wiringPi" class="headerlink" title="下载、编译和测试wiringPi"></a>下载、编译和测试wiringPi</h1><ol><li><p>下载并编译wiringPi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.drogon.net/wiringPi</span><br><span class="line">cd wiringPi</span><br><span class="line">./build</span><br></pre></td></tr></table></figure></li><li><p>测试wiringPi是否安装成功<br>打开命令终端，可以通过 gpio 命令来检查 wiringPi 是否安装成功，运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpio –v</span><br><span class="line">gpio readall</span><br></pre></td></tr></table></figure></li></ol><p>运行上述第二条命令将得到树莓派的 GPIO 接口之间的对应关系。</p><p align="center">    <img src="images/gpio_map.png" width="100%" alt="gpio管脚定义"></p><h1 id="使用wiringPi"><a href="#使用wiringPi" class="headerlink" title="使用wiringPi"></a>使用wiringPi</h1><p>在使用wiringPi之前，应首先对wiringPi进行设置。</p><h2 id="wiringPi设置函数"><a href="#wiringPi设置函数" class="headerlink" title="wiringPi设置函数"></a>wiringPi设置函数</h2><p>wiringPi设置函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int wiringPiSetup (void) ;</span><br><span class="line">int wiringPiSetupGpio (void) ;</span><br><span class="line">int wiringPiSetupPhys (void) ;</span><br><span class="line">int wiringPiSetupSys (void) ;</span><br></pre></td></tr></table></figure></p><h3 id="wiringPiSetup-void-函数"><a href="#wiringPiSetup-void-函数" class="headerlink" title="wiringPiSetup (void) 函数"></a>wiringPiSetup (void) 函数</h3><p>该函数初始化wiringPi，假定程序将使用wiringPi的管脚定义图。具体管脚映射，可以通过gpio readall命令来查看。该函数需要root权限。</p><h3 id="wiringPiSetupGpio-void-函数"><a href="#wiringPiSetupGpio-void-函数" class="headerlink" title="wiringPiSetupGpio (void) 函数"></a>wiringPiSetupGpio (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于假定程序使用的是Broadcom的GPIO管脚定义，而没有重新映射。该函数需要root权限，需要注意v1和v2版本的树莓派是不同的。</p><h3 id="wiringPiSetupPhys-void-函数"><a href="#wiringPiSetupPhys-void-函数" class="headerlink" title="wiringPiSetupPhys (void) 函数"></a>wiringPiSetupPhys (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于允许程序使用物理管脚定义，但仅支持P1接口。该函数需要root权限。</p><h3 id="wiringPiSetupSys-void-函数"><a href="#wiringPiSetupSys-void-函数" class="headerlink" title="wiringPiSetupSys (void) 函数"></a>wiringPiSetupSys (void) 函数</h3><p>该函数初始化wiringPi，使用/sys/class/gpio接口，而不是直接通过操作硬件来实现。该函数可以使用非root权限用户，在此种模式下的管脚号是Broadcom的GPIO管脚号，不wiringPiSetupGpio函数类似，需要注意v1和v2板子的不同。</p><p>在此种模式下，在运行程序前，您需要通过/sys/class/gpio接口导出要使用的管脚。你可以在一个独立的shell脚本中来导出将要使用的管脚，或者使用系统的system()函数来调用GPIO命令。</p><h2 id="软件-PWM-库"><a href="#软件-PWM-库" class="headerlink" title="软件 PWM 库"></a>软件 PWM 库</h2><p>wiringPi 中包含了一个软件驱动的 PWM (Pulse Width Modulation, 脉冲宽度调节)处理库，可以在任意的树莓派 GPIO 上输出 PWM 信号。</p><p>但是也有一些限制。为了维护较低的 CPU 使用率，最小的脉冲宽度是 100 微秒，结合默认的建议值为 100，那么最小的 PWM 频率是 100Hz。如果需要更高的频率，可以使用更低的数值。如果看脉冲宽度的驱动代码，你会发现低于 100 微秒，wiringPi 是在软件循环中实现的，这就意味着 CPU 使用率将会动态增加，从而使得控制其他管脚成为不可能。</p><p>需要注意的是，当其他程序运行在更高的实时的优先级，Linux 可能会影响产生信号的精度。尽管有这些限制，控制 LED 或电机还是可以的。</p><p>使用前,需要包含相应的文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;wiringPi.h&gt;</span><br><span class="line">#include &lt;softPwm.h&gt;</span><br></pre></td></tr></table></figure></p><p>当编译程序时,必须加上 pthread 库,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc –o myprog myprog.c –lwiringPi –lpthread</span><br></pre></td></tr></table></figure></p><p>必须使用 wiringPiSetup()、 wiringPiSetupGpio()或者 wiringPiSetupPhys()函数来初始化 wiringPi。</p><p>wiringPiSetupSys()是不够快的，因此，必须使用 sudo 命令来运行程序。</p><h3 id="softPwmCreate-函数"><a href="#softPwmCreate-函数" class="headerlink" title="softPwmCreate 函数"></a>softPwmCreate 函数</h3><p>该函数的原型为：int softPwmCreate(int pin, int initialValue, int pwmRange);</p><p>该函数将会创建一个软件控制的 PWM 管脚。可以使用任何一个 GPIO 管脚 , pwmRange 参数可以为 0(关)~100(全开)。</p><p>返回值为 0，代表成功，其他值，代表失败。</p><h3 id="softPwmWrite-函数"><a href="#softPwmWrite-函数" class="headerlink" title="softPwmWrite 函数"></a>softPwmWrite 函数</h3><p>该函数的原型为: void softPwmWrite(int pin, int value);</p><p>该函数将会更新指定管脚的 PWM 值。value 参数的范围将会被检查,如果指定的管脚之前没有通过 softPwmCreate 初始化,将会被忽略。</p><h2 id="wiringPi核心函数"><a href="#wiringPi核心函数" class="headerlink" title="wiringPi核心函数"></a>wiringPi核心函数</h2><h3 id="pinMode函数"><a href="#pinMode函数" class="headerlink" title="pinMode函数"></a>pinMode函数</h3><p>该函数的原型为: void pinMode(int pin, int mode);</p><p>使用该函数可以将某个管脚讴置为 INPUT(输入)、 OUTPUT(输出)、 PWM_OUTPUT(脉冲输出)或者 GPIO_CLOCK(GPIO 时钟)。</p><p>需要注意的是仅有管脚 1(BCM_GPIO 18)支持 PWM_OUTPUT 模式,仅有管脚 7(BCM_GPIO 4)支持 CLOCK 输出模式。</p><p>在 Sys 模式下,返个函数没有影响。你可以通过调用 gpio 命令在 shell 脚本中来设置管脚的模式。</p><h3 id="digitalWrite-函数"><a href="#digitalWrite-函数" class="headerlink" title="digitalWrite 函数"></a>digitalWrite 函数</h3><p>该函数的原型为: void digitalWrite(int pin, int value);</p><p>使用该函数可以向指定的管脚写入 HIGH(高)或者 LOW(低),写入前,需要将管脚设置为输出模式。</p><p>wiringPi 将任何的非 0 值作为 HIGH (高)来对待,因此, 0 是唯一能够代表 LOW (低)的数值。</p><h3 id="digitalRead-函数"><a href="#digitalRead-函数" class="headerlink" title="digitalRead 函数"></a>digitalRead 函数</h3><p>该函数原型： digitalRead(int pin);</p><p>使用该函数可以读取指定管脚的值，读取到的值为HIGH（1）或者LOW（0），该值取决于该管脚的逻辑电平的高低。</p><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><h3 id="delay-函数"><a href="#delay-函数" class="headerlink" title="delay 函数"></a>delay 函数</h3><p>该函数的原型为：void delay(unsigned int howLong);</p><p>该函数将会中断程序执行至少 howLong 毫秒。因为 Linux 是多任务的原因，中断时间可能会更长。需要注意的是，最长的延迟值是一个无符号 32 位整数，其大约为 49 天。</p><h3 id="delayMicroseconds-函数"><a href="#delayMicroseconds-函数" class="headerlink" title="delayMicroseconds 函数"></a>delayMicroseconds 函数</h3><p>该函数的原型为：void delayMicroseconds(unsigned int howLong);</p><p>该函数将会中断程序执行至少 howLong 微秒。因为 Linux 是一个多任务的系统，因此中断时间可能会更长。需要注意的是，最长的延迟值是一个无符号 32 位整数，其大约为 71分钟。</p><p>延迟低于100 微秒，将会使用硬件循环来实现；超过 100 微秒，将会使用系统的nanosleep()函数来实现。</p><h2 id="优先级-时间-线程"><a href="#优先级-时间-线程" class="headerlink" title="优先级/时间/线程"></a>优先级/时间/线程</h2><h3 id="wiringPiISR-函数"><a href="#wiringPiISR-函数" class="headerlink" title="wiringPiISR 函数"></a>wiringPiISR 函数</h3><p>该函数的原型为：int wiringPiISR(int pin, int edgeType, void (*function)(void));</p><p>该函数会在指定管脚注册一个中断事件的函数，当指定管脚发生中断事件时，会自动调用该函数。</p><p>edgeType 参数可以为 INT_EDGE_FALLING（下降沿）、INT_EDGE_RISING（上升沿）、INT_EDGE_BOTH（上升沿或者下降沿）或者 INT_EDGE_SETUP。如果是INT_EDGE_SETUP，将不会初始化该管脚，因为它假定已经在别处设置过该管脚（比如使用 gpio 命令），但是，如果指定另外的类型，指定管脚将会被导出并初始化。完成此操作使用的是 gpio 命令，所以，必须保证 gpio 命令是可用的。</p><p>注册函数在中断触发时，将会被调用。在调用注册函数前，中断事件将会从分配器中清除，所以，即使有后续的触发发生，在处理完成前，也不会错过此次触发。（当然，如果在正在处理触发时，有不止一个的中断发生，已经发生的中断将会被忽略）。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.lxx1.com/树莓派-wiringpi-用户手册" target="_blank" rel="noopener">树莓派 wiringPi 用户手册</a>, by 科技爱好者博客</li><li><a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a></li><li><a href="https://hanbingyan.github.io/2016/03/07/pthread_on_linux/" target="_blank" rel="noopener">Pthreads 入门教程</a>,by hanbingyan.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;wiringPi 库是由 Gordon Henderson 所编写并维护的一个用 C 语言写成的类库。起初,主要是作为 BCM2835 芯片的 GPIO 库。而现在,已经非常丰富,除了 GPIO 库,还包括了I2C 库、SPI 库、UART 库和软件 PWM 库等。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>人工智能——人类科技再次飞跃的门槛</title>
    <link href="https://huangwang.github.io/2018/11/21/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E2%80%94%E2%80%94%E4%BA%BA%E7%B1%BB%E7%A7%91%E6%8A%80%E5%86%8D%E6%AC%A1%E9%A3%9E%E8%B7%83%E7%9A%84%E9%97%A8%E6%A7%9B/"/>
    <id>https://huangwang.github.io/2018/11/21/人工智能——人类科技再次飞跃的门槛/</id>
    <published>2018-11-21T02:13:10.000Z</published>
    <updated>2018-11-26T02:03:54.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h1><h1 id="问题的分析"><a href="#问题的分析" class="headerlink" title="问题的分析"></a>问题的分析</h1><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;问题的提出&lt;/h1&gt;&lt;h1 id=&quot;问题的分析&quot;&gt;&lt;a href=&quot;#问题的分析&quot; class=&quot;headerlink&quot; title=&quot;问题的
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之神经网络</title>
    <link href="https://huangwang.github.io/2018/11/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://huangwang.github.io/2018/11/20/机器学习之神经网络/</id>
    <published>2018-11-20T15:36:43.000Z</published>
    <updated>2018-11-26T02:07:26.598Z</updated>
    
    <content type="html"><![CDATA[<p>人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。</p><p>神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统，通俗的讲就是具备学习功能。<strong>现代神经网络是一种非线性统计性数据建模工具</strong>。</p><h1 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h1><p>神经元示意图：</p><p></p><p align="center">    <img src="images/Ncell.png" width="90%" alt="神经元示意图"></p><p></p><center>图1 神经元示意图</center><ul><li>a1~an为输入向量的各个分量</li><li>w1~wn为神经元各个突触的权值</li><li>b为偏置</li><li>f为传递函数，通常为非线性函数。一般有Sigmoid(), ReLU(), Softmax()。</li><li>t为神经元输出</li></ul><p>神经元的数学表示是：$t=f(\vec{W^{‘}}\vec{A}+b)$</p><ul><li>$\vec{W}$为权向量，$\vec{W^{‘}}$为$\vec{W}$的转置</li><li>$\vec{A}$为输入向量</li><li>$b$为偏置</li><li>$f$为传递函数</li></ul><p>可见，一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果。</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><ul><li>Sigmoid函数</li></ul><p>Sigmoid函数也称S型激活函数，其将加权和转换为介于 0 和 1 之间的值。</p><script type="math/tex; mode=display">F(x)=\frac{1} {1+e^{-x}}</script><p>曲线图如下：</p><p></p><p align="center">    <img src="images/sigmoid.svg" width="90%" alt="S 型激活函数"></p><p></p><center>图2 S 型激活函数</center><ul><li>ReLU函数</li></ul><p>相较于 S 型函数等平滑函数，以下修正线性单元激活函数（简称为 ReLU）的效果通常要好一点，同时还非常易于计算。</p><script type="math/tex; mode=display">F(x)=max(0,x)</script><p>ReLU 的优势在于它基于实证发现（可能由 ReLU 驱动），拥有更实用的响应范围。S 型函数的响应性在两端相对较快地减少。</p><p></p><p align="center">    <img src="images/relu.svg" width="90%" alt="ReLU 激活函数"></p><p></p><center>图3 ReLU 激活函数</center><ul><li>Softmax函数</li></ul><p>Softmax函数用于多类别神经网络。在多类别问题中，Softmax 会为每个类别分配一个用小数表示的概率。这些用小数表示的概率相加之和必须是 1.0。</p><p>Softmax 方程式如下所示：</p><script type="math/tex; mode=display">p(y = j|\textbf{x})  = \frac{e^{(\textbf{w}_j^{T}\textbf{x} + b_j)}}{\sum_{k\in K} {e^{(\textbf{w}_k^{T}\textbf{x} + b_k)}} }</script><p>请注意，此公式本质上是将逻辑回归公式延伸到了多类别。</p><p>Softmax 层是紧挨着输出层之前的神经网络层。Softmax 层必须和输出层拥有一样的节点数。</p><p></p><p align="center">    <img src="images/SoftmaxLayer.svg" width="90%" alt="神经网络中的 Softmax 层"></p><p></p><center>图4 神经网络中的 Softmax 层</center><h1 id="神经元网络"><a href="#神经元网络" class="headerlink" title="神经元网络"></a>神经元网络</h1><p>神经元网络可分为单层神经元网络和多层神经元网络。而常用的是多层神经元网络。</p><h2 id="多层神经元网络"><a href="#多层神经元网络" class="headerlink" title="多层神经元网络"></a>多层神经元网络</h2><p>一种常见的多层结构的前馈网络（Multilayer Feedforward Network）由三部分组成，如图2所示：</p><p></p><p align="center">    <img src="images/activation.svg" width="90%" alt="包含激活函数的三层模型的图表"></p><p></p><center>图5 包含激活函数的三层模型的图表</center><ul><li>输入层（Input layer），众多神经元（Neuron）接受大量非线形输入消息。输入的消息称为输入向量。</li><li>输出层（Output layer），消息在神经元链接中传输、分析、权衡，形成输出结果。输出的消息称为输出向量。</li><li>隐藏层（Hidden layer），简称“隐层”，是输入层和输出层之间众多神经元和链接组成的各个层面。隐层可以有一层或多层。隐层的节点（神经元）数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性（robustness）（控制系统在一定结构、大小等的参数摄动下，维持某些性能的特性）更显著。习惯上会选输入节点1.2至1.5倍的节点。</li></ul><p>这种网络一般称为感知器（对单隐藏层）或多层感知器（对多隐藏层），神经网络的类型已经演变出很多种，这种分层的结构也并不是对所有的神经网络都适用。</p><h1 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h1><p>通常使用方向传播算法训练神经网络<sup>[3]</sup>，但一些常见情况都会导致反向传播算法出错。</p><ul><li>梯度消失</li></ul><p>较低层（更接近输入）的梯度可能会变得非常小。在深度网络中，计算这些梯度时，可能涉及许多小项的乘积。</p><p>当较低层的梯度逐渐消失到 0 时，这些层的训练速度会非常缓慢，甚至不再训练。</p><p>ReLU 激活函数有助于防止梯度消失。</p><ul><li>梯度爆炸</li></ul><p>如果网络中的权重过大，则较低层的梯度会涉及许多大项的乘积。在这种情况下，梯度就会爆炸：梯度过大导致难以收敛。</p><p>批标准化可以降低学习速率，因而有助于防止梯度爆炸。</p><ul><li>ReLU 单元消失</li></ul><p>一旦 ReLU 单元的加权和低于 0，ReLU 单元就可能会停滞。它会输出对网络输出没有任何贡献的 0 激活，而梯度在反向传播算法期间将无法再从中流过。由于梯度的来源被切断，ReLU 的输入可能无法作出足够的改变来使加权和恢复到 0 以上。</p><p>降低学习速率有助于防止 ReLU 单元消失。</p><ul><li>丢弃正则化</li></ul><p>这是称为丢弃的另一种形式的正则化，可用于神经网络。其工作原理是，在梯度下降法的每一步中随机丢弃一些网络单元。丢弃得越多，正则化效果就越强。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/人工神经网络" target="_blank" rel="noopener">人工神经网络</a>,by wikipedia.</li><li><a href="https://developers.google.com/machine-learning/crash-course/introduction-to-neural-networks/anatomy?hl=zh-cn" target="_blank" rel="noopener">神经网络简介</a>,by google.</li><li><a href="https://www.leiphone.com/news/201705/TMsNCqjpOIfN3Bjr.html" target="_blank" rel="noopener">一文详解神经网络 BP 算法原理及 Python 实现</a>,by AI研习社.</li><li><a href="https://google-developers.appspot.com/machine-learning/crash-course/backprop-scroll/?hl=zh-CN" target="_blank" rel="noopener">反向传播算法动态演示</a>, by google.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://huangwang.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之相关概念</title>
    <link href="https://huangwang.github.io/2018/11/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <id>https://huangwang.github.io/2018/11/19/机器学习之相关概念/</id>
    <published>2018-11-19T08:04:16.000Z</published>
    <updated>2018-11-26T02:07:36.738Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>机器学习有下面几种定义：</p><ul><li>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。</li><li>机器学习是对能通过经验自动改进的计算机算法的研究。</li><li>机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。</li></ul><p>一种经常引用的英文定义是：A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>机器学习可以分成下面几种类别：</p><ul><li>监督学习：从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。</li></ul><p>监督学习和非监督学习的差别就是训练集目标是否人标注。他们都有训练集且都有输入和输出。</p><ul><li>无监督学习：与监督学习相比，训练集没有人为标注的结果。常见的无监督学习算法有生成对抗网络（GAN）、聚类。</li><li>半监督学习：介于监督学习与无监督学习之间。</li><li>强化学习：通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>具体的机器学习算法有：</p><ul><li>构造间隔理论分布：聚类分析和模式识别<ul><li>人工神经网络</li><li>决策树</li><li>感知器</li><li>支持向量机</li><li>集成学习AdaBoost</li><li>降维与度量学习</li><li>聚类</li><li>贝叶斯分类器</li></ul></li><li>构造条件概率：回归分析和统计分类<ul><li>高斯过程回归</li><li>线性判别分析</li><li>最近邻居法</li><li>径向基函数核</li></ul></li><li>通过再生模型构造概率密度函数：<ul><li>最大期望算法</li><li>概率图模型：包括贝叶斯网和Markov随机场</li><li>Generative Topographic Mapping</li></ul></li><li>近似推断技术：<ul><li>马尔可夫链</li><li>蒙特卡罗方法</li><li>变分法</li></ul></li><li>最优化：大多数以上方法，直接或者间接使用最优化算法。</li></ul><h1 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签是我们要预测的事物，即简单线性回归中的 y 变量。标签可以是小麦未来的价格、图片中显示的动物品种、音频剪辑的含义或任何事物。</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>特征是输入变量，即简单线性回归中的 x 变量。简单的机器学习项目可能会使用单个特征，而比较复杂的机器学习项目可能会使用数百万个特征，按如下方式指定：</p><script type="math/tex; mode=display">\{ x_1,x_2,...x_N \}</script><p>在垃圾邮件检测器示例中，特征可能包括：</p><ul><li>电子邮件文本中的字词</li><li>发件人的地址</li><li>发送电子邮件的时段</li><li>电子邮件中包含“一种奇怪的把戏”这样的短语。</li></ul><h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>样本是指数据的特定实例：x。（我们采用粗体 x 表示它是一个矢量。）我们将样本分为以下两类：</p><ul><li>有标签样本</li><li>无标签样本</li></ul><p>有标签样本同时包含特征和标签，常用于训练模型。。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labeled examples: &#123;features, label&#125;: (x, y)</span><br></pre></td></tr></table></figure></p><p>无标签样本包含特征，但不包含标签，常用于模型预测。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlabeled examples: &#123;features, ?&#125;: (x, ?)</span><br></pre></td></tr></table></figure></p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>模型定义了特征与标签之间的关系。例如，垃圾邮件检测模型可能会将某些特征与“垃圾邮件”紧密联系起来。我们来重点介绍一下模型生命周期的两个阶段：</p><ul><li><p>训练表示创建或学习模型。向模型展示有标签样本，让模型逐渐学习特征与标签之间的关系。</p></li><li><p>推断表示将训练后的模型应用于无标签样本。使用训练后的模型来做出有用的预测 (y’)。</p></li></ul><h2 id="回归与分类"><a href="#回归与分类" class="headerlink" title="回归与分类"></a>回归与分类</h2><p>回归模型可预测连续值。例如，回归模型做出的预测可回答如下问题：</p><ul><li><p>加利福尼亚州一栋房产的价值是多少？</p></li><li><p>用户点击此广告的概率是多少？</p></li></ul><p>分类模型可预测离散值。例如，分类模型做出的预测可回答如下问题：</p><ul><li><p>某个指定电子邮件是垃圾邮件还是非垃圾邮件？</p></li><li><p>这是一张狗、猫还是仓鼠图片？</p></li></ul><h2 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h2><p>训练模型表示通过有标签样本来学习（确定）所有权重和偏差的理想值。在监督式学习中，机器学习算法通过以下方式构建模型：检查多个样本并尝试找出可最大限度地减少损失的模型；这一过程称为经验风险最小化。</p><p>损失是对糟糕预测的惩罚。也就是说，损失是一个数值，表示对于单个样本而言模型预测的准确程度。如果模型的预测完全准确，则损失为零，否则损失会较大。训练模型的目标是从所有样本中找到一组平均损失“较小”的权重和偏差。</p><p>平方损失：又称为 $L_2$ 损失,一种常见的损失函数。例如单个样本的平方损失如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">= the square of the difference between the label and the prediction</span><br><span class="line">= (observation - prediction(x))^2</span><br><span class="line">= (y - y&apos;)^2</span><br></pre></td></tr></table></figure></p><p>均方误差 (MSE) 指的是每个样本的平均平方损失。要计算 MSE，请求出各个样本的所有平方损失之和，然后除以样本数量：</p><script type="math/tex; mode=display">MSE = \frac{1}{N} \sum_{(x,y)\in D} (y - prediction(x))^2</script><p>其中：</p><ul><li>(x,y)指的是样本，其中<ul><li>x指的是模型进行预测时使用的特征集（例如，温度、年龄和交配成功率）。</li><li>y指的是样本的标签（例如，每分钟的鸣叫次数）。</li></ul></li><li>prediction(x)指的是权重和偏差与特征集 x 结合的函数。</li><li>D指的是包含多个有标签样本（即 (x,y)）的数据集。</li><li>N指的是D中的样本数量。</li></ul><h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2><p>下图显示了机器学习算法用于训练模型的迭代试错过程：</p><p></p><p align="center">    <img src="images/GradientDescentDiagram.svg" width="90%" alt="用于训练模型的迭代方法"></p><p></p><center>图1 用于训练模型的迭代方法</center><h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><p>计算参数更新的目标是在模型的迭代试错过程中，使损失越来越小。而常用的方法就是梯度下降法。</p><p></p><p align="center">    <img src="images/convex.svg" width="90%" alt="回归问题产生的损失与权重图为凸形"></p><p></p><center>图2 回归问题产生的损失与权重图为凸形</center><p>对于图2所示的凸形问题，刚好存在一个斜率正好为 0 的位置，即是损失函数的收敛之处。梯度下降法的第一个阶段是为$w_1$ 选择一个起始值（起点）。</p><p>然后，梯度下降法算法会计算损失曲线在起点处的梯度。简而言之，梯度是偏导数的矢量；它可以让您了解哪个方向距离目标“更近”或“更远”。</p><p>请注意，梯度是一个矢量，因此具有以下两个特征：</p><ul><li>方向</li><li>大小</li></ul><p>梯度始终指向损失函数中增长最为迅猛的方向。梯度下降法算法会沿着负梯度的方向走一步，以便尽快降低损失。</p><p>为了确定损失函数曲线上的下一个点，梯度下降法算法会将梯度大小的一部分与起点相加，如图3所示：</p><p></p><p align="center">    <img src="images/GradientDescentGradientStep.svg" width="90%" alt="一个梯度步长将我们移动到损失曲线上的下一个点"></p><p></p><center>图3 一个梯度步长将我们移动到损失曲线上的下一个点</center><p>然后，梯度下降法会重复此过程，逐渐接近最低点。</p><h3 id="学习速率"><a href="#学习速率" class="headerlink" title="学习速率"></a>学习速率</h3><p>梯度下降法算法用梯度乘以一个称为<strong>学习速率</strong>（有时也称为步长）的标量，以确定下一个点的位置。例如，如果梯度大小为 2.5，学习速率为 0.01，则梯度下降法算法会选择距离前一个点 0.025 的位置作为下一个点。</p><p><strong>超参数</strong>是编程人员在机器学习算法中用于调整的旋钮。大多数机器学习编程人员会花费相当多的时间来调整学习速率。如果您选择的学习速率过小，就会花费太长的学习时间。如果您指定的学习速率过大，下一个点将永远在 U 形曲线的底部随意弹跳。</p><h3 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h3><p>在梯度下降法中，<strong>批量</strong>指的是用于在单次迭代中计算梯度的样本总数。到目前为止，我们一直假定批量是指整个数据集。就 Google 的规模而言，数据集通常包含数十亿甚至数千亿个样本。此外，Google 数据集通常包含海量特征。因此，一个批量可能相当巨大。如果是超大批量，则单次迭代就可能要花费很长时间进行计算。</p><p>通过从我们的数据集中随机选择样本，我们可以通过小得多的数据集估算（尽管过程非常杂乱）出较大的平均值。 随机梯度下降法 (SGD) 将这种想法运用到极致，它每次迭代只使用一个样本（批量大小为 1）。如果进行足够的迭代，SGD 也可以发挥作用，但过程会非常杂乱。“随机”这一术语表示构成各个批量的一个样本都是随机选择的。</p><p>小批量随机梯度下降法（小批量 SGD）是介于全批量迭代与 SGD 之间的折衷方案。小批量通常包含 10-1000 个随机选择的样本。小批量 SGD 可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。</p><h2 id="泛化-Generalization"><a href="#泛化-Generalization" class="headerlink" title="泛化(Generalization)"></a>泛化(Generalization)</h2><p>泛化是指机器学习对从真实概率分布（已隐藏）中抽取的新数据做出良好预测的能力。要取得良好的泛化能力，机器学习必须满足以下基本假设，同时防止过拟合。</p><ul><li><p>机器学习的基本假设：</p><ul><li>从分布中随机抽取独立同分布 (i.i.d) 的样本。换言之，样本之间不会互相影响。（另一种解释：i.i.d. 是表示变量随机性的一种方式）。</li><li>分布是平稳的；即分布在数据集内不会发生变化。</li><li>从同一分布的数据划分中抽取样本。</li></ul></li><li><p><strong>过拟合</strong>模型在训练过程中产生的损失很低，但在预测新数据方面的表现却非常糟糕。</p></li></ul><h2 id="训练集与测试集"><a href="#训练集与测试集" class="headerlink" title="训练集与测试集"></a>训练集与测试集</h2><p>机器学习模型旨在根据以前未见过的新数据做出良好预测。但是，如果您要根据数据集构建模型，如何获得以前未见过的数据呢？一种方法是将您的数据集分成两个子集：</p><ul><li>训练集 - 用于训练模型的子集。</li><li>测试集 - 用于测试模型的子集。</li></ul><p>测试集应满足以下两个条件：</p><ul><li>规模足够大，可产生具有统计意义的结果。</li><li>能代表整个数据集。换言之，挑选的测试集的特征应该与训练集的特征相同。</li></ul><h2 id="验证集"><a href="#验证集" class="headerlink" title="验证集"></a>验证集</h2><p>将数据集划分为训练集和测试集两个子集是个不错的想法，但不是万能良方。通过将数据集划分为训练集、验证集、测试集三个子集，可以大幅降低过拟合的发生几率。</p><p>使用验证集评估训练集的效果。然后，在模型“通过”验证集之后，使用测试集再次检查评估结果。图4展示了这一新工作流程：</p><p></p><p align="center">    <img src="images/WorkflowWithValidationSet.svg" width="90%" alt="使用验证集的工作流程"></p><p></p><center>图4 使用验证集的工作流程</center><h2 id="特征表示"><a href="#特征表示" class="headerlink" title="特征表示"></a>特征表示</h2><p>特征工程指的是将原始数据转换为特征矢量。进行特征工程预计需要大量时间。</p><ul><li>映射数值: 机器学习模型根据浮点值进行训练，因此整数和浮点原始数据不需要特殊编码。</li><li>映射字符串值: 首先为要表示的所有特征的字符串值定义一个词汇表。然后使用该词汇表创建一个独热编码，用于将指定字符串值表示为二元矢量。</li><li>映射分类（枚举）值</li></ul><p></p><p align="center">    <img src="images/OneHotEncoding.svg" width="90%" alt="通过独热编码映射字符串值"></p><p></p><center>图5 通过独热编码映射字符串值</center><h3 id="良好特征的特点"><a href="#良好特征的特点" class="headerlink" title="良好特征的特点"></a>良好特征的特点</h3><ul><li>避免很少使用的离散特征值。</li></ul><p>良好的特征值应该在数据集中出现大约 5 次以上。这样一来，模型就可以学习该特征值与标签是如何关联的。</p><ul><li>最好具有清晰明确的含义。</li></ul><p>每个特征对于项目中的任何人来说都应该具有清晰明确的含义。例如，下面的房龄适合作为特征，可立即识别为年龄：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">house_age: 27</span><br></pre></td></tr></table></figure></p><ul><li>不要将“神奇”的值与实际数据混为一谈</li></ul><p>良好的浮点特征不包含超出范围的异常断点或“神奇”的值。例如，假设一个特征具有 0 到 1 之间的浮点值。那么，如下值是可以接受的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quality_rating: 0.82</span><br><span class="line">quality_rating: 0.37</span><br></pre></td></tr></table></figure></p><p>不过，如果用户没有输入 quality_rating，则数据集可能使用如下神奇值来表示不存在该值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quality_rating: -1</span><br></pre></td></tr></table></figure></p><p>为解决神奇值的问题，需将该特征转换为两个特征：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个特征只存储质量评分，不含神奇值。</span><br><span class="line"></span><br><span class="line">一个特征存储布尔值，表示是否提供了 quality_rating。为该布尔值特征指定一个名称，例如 is_quality_rating_defined。</span><br></pre></td></tr></table></figure></p><ul><li>考虑上游不稳定性</li></ul><p>特征的定义不应随时间发生变化。例如，下列值是有用的，因为城市名称一般不会改变。（注意，我们仍然需要将“br/sao_paulo”这样的字符串转换为独热矢量。）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city_id: &quot;br/sao_paulo&quot;</span><br></pre></td></tr></table></figure></p><p>但收集由其他模型推理的值会产生额外成本。可能值“219”目前代表圣保罗，但这种表示在未来运行其他模型时可能轻易发生变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inferred_city_cluster: &quot;219&quot;</span><br></pre></td></tr></table></figure></p><h3 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h3><p>即使是非常少量的坏样本会破坏掉一个大规模数据集，因此需花费大量的时间挑出坏样本并加工可以挽救的样本。</p><ol><li><p>缩放特征值: 缩放是指将浮点特征值从自然范围（例如 100 到 900）转换为标准范围（例如 0 到 1 或 -1 到 +1）。如果特征集包含多个特征，则缩放特征可以带来以下优势：</p><ul><li>帮助梯度下降法更快速地收敛。</li><li>帮助避免“NaN 陷阱”。</li><li>帮助模型为每个特征确定合适的权重。</li></ul></li><li><p>处理极端离群值</p><ul><li>对每个值取对数</li><li>将最大值“限制”为某个任意值</li></ul></li><li>分箱</li><li>清查</li></ol><p>数据集中的很多样本是不可靠的，原因有以下一种或多种：</p><ul><li>遗漏值。 例如，有人忘记为某个房屋的年龄输入值。</li><li>重复样本。 例如，服务器错误地将同一条记录上传了两次。</li><li>不良标签。 例如，有人错误地将一颗橡树的图片标记为枫树。</li><li>不良特征值。 例如，有人输入了多余的位数，或者温度计被遗落在太阳底下。</li></ul><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><p>图6泛化曲线显示的是训练集和验证集相对于训练迭代次数的损失。</p><p></p><p align="center">    <img src="images/RegularizationTwoLossFunctions.svg" width="90%" alt="训练集和验证集损失"></p><p></p><center>图6 训练集和验证集损失</center><p>图6显示的是某个模型的训练损失逐渐减少，但验证损失最终增加。换言之，该泛化曲线显示该模型与训练集中的数据过拟合。根据奥卡姆剃刀定律，或许我们可以通过降低复杂模型的复杂度来防止过拟合，这种原则称为正则化。</p><p>正则化以最小化损失和复杂度为目标，这称为结构风险最小化：</p><script type="math/tex; mode=display">\text{minimize(Loss(Data|Model) + complexity(Model))}</script><p>现在，训练优化算法是一个由两项内容组成的函数：一个是损失项，用于衡量模型与数据的拟合度，另一个是正则化项，用于衡量模型复杂度。</p><p>有两种常用衡量模型复杂度的方法：</p><ul><li>将模型复杂度作为模型中所有特征的权重的函数。</li><li>将模型复杂度作为具有非零权重的特征总数的函数。</li></ul><p>如果模型复杂度是权重的函数，则特征权重的绝对值越高，对模型复杂度的贡献就越大。</p><h3 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a>L2正则化</h3><p>可以使用 L2 正则化公式来量化复杂度，该公式将正则化项定义为所有特征权重的平方和：</p><script type="math/tex; mode=display">L_2\text{ regularization term} = ||\boldsymbol w||_2^2 = {w_1^2 + w_2^2 + ... + w_n^2}</script><p>在这个公式中，接近于 0 的权重对模型复杂度几乎没有影响，而离群值权重则可能会产生巨大的影响。</p><p>模型开发者通过以下方式来调整正则化项的整体影响：用正则化项的值乘以名为 lambda（又称为正则化率）的标量。也就是说，模型开发者会执行以下运算：</p><script type="math/tex; mode=display">\text{minimize(Loss(Data|Model)} + \lambda \text{ complexity(Model))}</script><p>执行 L2 正则化对模型具有以下影响:</p><ul><li>使权重值接近于 0（但并非正好为 0）</li><li>使权重的平均值接近于 0，且呈正态（钟形曲线或高斯曲线）分布。</li></ul><p>在选择 lambda 值时，目标是在简单化和训练数据拟合之间达到适当的平衡：</p><ul><li><p>如果您的 lambda 值过高，则模型会非常简单，但是您将面临数据欠拟合的风险。您的模型将无法从训练数据中获得足够的信息来做出有用的预测。</p></li><li><p>如果您的 lambda 值过低，则模型会比较复杂，并且您将面临数据过拟合的风险。您的模型将因获得过多训练数据特点方面的信息而无法泛化到新数据。</p></li></ul><h3 id="L1正则化"><a href="#L1正则化" class="headerlink" title="L1正则化"></a>L1正则化</h3><p>稀疏矢量通常包含许多维度。创建特征组合会导致包含更多维度。由于使用此类高维度特征矢量，因此模型可能会非常庞大，并且需要大量的 RAM。</p><p>在高维度稀疏矢量中，最好尽可能使权重正好降至 0。正好为 0 的权重基本上会使相应特征从模型中移除。 将特征设为 0 可节省 RAM 空间，且可以减少模型中的噪点。</p><p>L1 正则化使模型中很多信息缺乏的系数正好为 0，从而在推理时节省 RAM，同时具有凸优化的优势，可有效进行计算。</p><p>L2 和 L1 采用不同的方式降低权重：</p><ul><li>L2 会降低权重<sup>2</sup>。</li><li>L1 会降低 |权重|。</li></ul><p>因此，L2 和 L1 具有不同的导数：</p><ul><li>L2 的导数为 2 * 权重。</li><li>L1 的导数为 k（一个常数，其值与权重无关）。</li></ul><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>许多问题需要将概率估算值作为输出。逻辑回归是一种极其高效的概率计算机制。实际上，您可以通过下两种方式之一使用返回的概率：</p><ul><li>“按原样”</li><li>转换成二元类别。</li></ul><p>在很多情况下，您会将逻辑回归输出映射到二元分类问题的解决方案，该二元分类问题的目标是正确预测两个可能的标签（例如，“垃圾邮件”或“非垃圾邮件”）中的一个。</p><p>您可能想知道逻辑回归模型如何确保输出值始终落在 0 和 1 之间。巧合的是，S 型函数生成的输出值正好具有这些特性，其定义如下：</p><script type="math/tex; mode=display">y = \frac{1}{1 + e^{-z}}</script><p>S 型函数会产生以下曲线图：</p><p></p><p align="center">    <img src="images/SigmoidFunction.png" width="90%" alt="S 型函数"></p><p></p><center>图7 S 型函数</center><p>如果 z 表示使用逻辑回归训练的模型的线性层的输出，则 S 型(z) 函数会生成一个介于 0 和 1 之间的值（概率）。用数学方法表示为：</p><script type="math/tex; mode=display">y' = \frac{1}{1 + e^{-(z)}}</script><p>其中：</p><ul><li>y’ 是逻辑回归模型针对特定样本的输出。</li><li>z 是 b + w<sub>1</sub>x<sub>1</sub> + w<sub>2</sub>x<sub>2</sub> + … w<sub>N</sub>x<sub>N</sub><ul><li>“w”值是该模型学习的权重和偏差。</li><li>“x”值是特定样本的特征值。</li></ul></li></ul><p>请注意，z 也称为对数几率，因为 S 型函数的反函数表明，z 可定义为标签“1”（例如“狗叫”）的概率除以标签“0”（例如“狗不叫”）的概率得出的值的对数：</p><script type="math/tex; mode=display">z = log(\frac{y}{1-y})</script><h3 id="逻辑回归模型训练"><a href="#逻辑回归模型训练" class="headerlink" title="逻辑回归模型训练"></a>逻辑回归模型训练</h3><p>线性回归的损失函数是平方损失。逻辑回归的损失函数是对数损失函数，定义如下：</p><script type="math/tex; mode=display">Log Loss = \sum_{(x,y)\in D} -ylog(y') - (1 - y)log(1 - y')</script><p>其中：</p><ul><li>(xy)ϵD 是包含很多有标签样本 (x,y) 的数据集。</li><li>“y”是有标签样本中的标签。由于这是逻辑回归，因此“y”的每个值必须是 0 或 1。</li><li>“y’”是对于特征集“x”的预测值（介于 0 和 1 之间）。</li></ul><p>对数损失函数的方程式与 Shannon 信息论中的熵测量密切相关。它也是似然函数的负对数（假设“y”属于伯努利分布）。实际上，最大限度地降低损失函数的值会生成最大的似然估计值。</p><p>正则化在逻辑回归建模中极其重要。如果没有正则化，逻辑回归的渐近性会不断促使损失在高维度空间内达到 0。因此，大多数逻辑回归模型会使用以下两个策略之一来降低模型复杂性：</p><ul><li>L2 正则化。</li><li>早停法，即，限制训练步数或学习速率。</li></ul><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><h3 id="指定阈值"><a href="#指定阈值" class="headerlink" title="指定阈值"></a>指定阈值</h3><p>为了将逻辑回归值映射到二元类别，您必须指定分类阈值（也称为判定阈值）。如果值高于该阈值，则表示“垃圾邮件”；如果值低于该阈值，则表示“非垃圾邮件”。人们往往会认为分类阈值应始终为 0.5，但阈值取决于具体问题，因此您必须对其进行调整。</p><h3 id="真与假以及正类别与负类别"><a href="#真与假以及正类别与负类别" class="headerlink" title="真与假以及正类别与负类别"></a>真与假以及正类别与负类别</h3><ul><li>真正例是指模型将正类别样本正确地预测为正类别。</li><li>真负例是指模型将负类别样本正确地预测为负类别。</li><li>假正例是指模型将负类别样本错误地预测为正类别</li><li>假负例是指模型将正类别样本错误地预测为负类别。</li></ul><h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><p>准确率是一个用于评估分类模型的指标。通俗来说，准确率是指我们的模型预测正确的结果所占的比例。正式点说，准确率的定义如下：</p><script type="math/tex; mode=display">\text{Accuracy} = \frac{\text{Number of correct predictions}}{\text{Total number of predictions}}</script><p>对于二元分类，也可以根据正类别和负类别按如下方式计算准确率：</p><script type="math/tex; mode=display">\text{Accuracy} = \frac{TP+TN}{TP+TN+FP+FN}</script><p>其中，TP = 真正例，TN = 真负例，FP = 假正例，FN = 假负例。</p><h3 id="精确率和召回率"><a href="#精确率和召回率" class="headerlink" title="精确率和召回率"></a>精确率和召回率</h3><p>当使用分类不平衡的数据集（比如正类别标签和负类别标签的数量之间存在明显差异）时，单单准确率一项并不能反映全面情况。这时需要能够更好地评估分类不平衡问题的指标：精确率和召回率。</p><p>精确率的定义如下：</p><script type="math/tex; mode=display">\text{Precision} = \frac{TP}{TP+FP}</script><p>从数学上讲，召回率的定义如下：</p><script type="math/tex; mode=display">\text{Recall} = \frac{TP}{TP+FN}</script><p>要全面评估模型的有效性，必须同时检查精确率和召回率。遗憾的是，精确率和召回率往往是此消彼长的情况。</p><h3 id="ROC-和曲线下面积"><a href="#ROC-和曲线下面积" class="headerlink" title="ROC 和曲线下面积"></a>ROC 和曲线下面积</h3><p>ROC 曲线（接收者操作特征曲线）是一种显示分类模型在所有分类阈值下的效果的图表。该曲线绘制了以下两个参数：</p><ul><li>真正例率</li><li>假正例率</li></ul><p>真正例率 (TPR) 是召回率的同义词，因此定义如下：</p><script type="math/tex; mode=display">TPR = \frac{TP} {TP + FN}</script><p>假正例率 (FPR) 的定义如下：</p><script type="math/tex; mode=display">FPR = \frac{FP} {FP + TN}</script><p>ROC 曲线用于绘制采用不同分类阈值时的 TPR 与 FPR。降低分类阈值会导致将更多样本归为正类别，从而增加假正例和真正例的个数。下图显示了一个典型的 ROC 曲线。</p><p></p><p align="center">    <img src="images/ROCCurve.svg" width="90%" alt="不同分类阈值下的 TP 率与 FP 率"></p><p></p><center>图8 不同分类阈值下的 TP 率与 FP 率</center><p>曲线下面积表示“ROC 曲线下面积”。也就是说，曲线下面积测量的是从 (0,0) 到 (1,1) 之间整个 ROC 曲线以下的整个二维面积（参考积分学）。</p><p></p><p align="center">    <img src="images/AUC.svg" width="90%" alt="曲线下面积（ROC 曲线下面积）"></p><p></p><center>图9 曲线下面积（ROC 曲线下面积）</center><p>曲线下面积对所有可能的分类阈值的效果进行综合衡量。曲线下面积的一种解读方式是看作模型将某个随机正类别样本排列在某个随机负类别样本之上的概率。</p><p>曲线下面积的取值范围为 0-1。预测结果 100% 错误的模型的曲线下面积为 0.0；而预测结果 100% 正确的模型的曲线下面积为 1.0。</p><p>曲线下面积因以下两个原因而比较实用：</p><ul><li>曲线下面积的尺度不变。它测量预测的排名情况，而不是测量其绝对值。</li><li>曲线下面积的分类阈值不变。它测量模型预测的质量，而不考虑所选的分类阈值。</li></ul><p>不过，这两个原因都有各自的局限性，这可能会导致曲线下面积在某些用例中不太实用：</p><ul><li><p>并非总是希望尺度不变。 例如，有时我们非常需要被良好校准的概率输出，而曲线下面积无法告诉我们这一结果。</p></li><li><p>并非总是希望分类阈值不变。 在假负例与假正例的代价存在较大差异的情况下，尽量减少一种类型的分类错误可能至关重要。例如，在进行垃圾邮件检测时，您可能希望优先考虑尽量减少假正例（即使这会导致假负例大幅增加）。对于此类优化，曲线下面积并非一个实用的指标。</p></li></ul><h2 id="预测偏差"><a href="#预测偏差" class="headerlink" title="预测偏差"></a>预测偏差</h2><p>逻辑回归预测应当无偏差。即:</p><script type="math/tex; mode=display">\text{预测平均值}\approx\text{观察平均值}</script><p>预测偏差指的是这两个平均值之间的差值。即：</p><script type="math/tex; mode=display">\text{预测偏差} = \text{预测平均值} - \text{数据集中相应标签的平均值}</script><p>造成预测偏差的可能原因包括：</p><ul><li>特征集不完整</li><li>数据集混乱</li><li>模型实现流水线中有错误？</li><li>训练样本有偏差</li><li>正则化过强</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki/机器学习" target="_blank" rel="noopener">机器学习</a>，by wikipedia.</li><li><a href="https://developers.google.com/machine-learning/crash-course/ml-intro?hl=zh-cn" target="_blank" rel="noopener">机器学习速成课程</a>，by google.</li><li><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">MathJax使用LaTeX语法编写数学公式教程</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。&lt;/p&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="机器学习" scheme="https://huangwang.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="https://huangwang.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉之相机成像原理与坐标系转换</title>
    <link href="https://huangwang.github.io/2018/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B9%8B%E7%9B%B8%E6%9C%BA%E6%88%90%E5%83%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E8%BD%AC%E6%8D%A2/"/>
    <id>https://huangwang.github.io/2018/11/19/计算机视觉之相机成像原理与坐标系转换/</id>
    <published>2018-11-19T08:02:41.000Z</published>
    <updated>2018-11-19T15:44:42.918Z</updated>
    
    <content type="html"><![CDATA[<p>计算机视觉是一门研究用摄影机和计算机代替人眼对目标进行识别、跟踪和测量的学科。为了解该门学科，首先应掌握投影原理和世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换关系。</p><h1 id="三维投影"><a href="#三维投影" class="headerlink" title="三维投影"></a>三维投影</h1><p>计算机3D图形学中，三维投影是将三维空间中的点映射到二维平面上的方法。常用三维投影有正交投影和透视投影。正交投影通常用于对现实物品的三维建模，而透视投影与人的视觉系统类似，常用于在二维平面呈现三维世界。</p><h2 id="正交投影原理"><a href="#正交投影原理" class="headerlink" title="正交投影原理"></a>正交投影原理</h2><p>正交投影是一系列用于显示三维物体的轮廓、细节或精确测量结果的变换方法。通常又称作截面图、鸟瞰图或立面图。</p><p>当视平面的法向（即摄像机的朝向）平行于笛卡尔坐标系三根坐标轴中的一根，数学变换定义如下： 若使用一个平行于y轴（侧视图）的正交投影将三维点 $a<em>{x}$, $a</em>{y}$,$a<em>{z}$投影到二维平面上得到二维点 $b</em>{x}$,$b_{y}$，可以使用如下公式</p><script type="math/tex; mode=display">b_x=s_xa_x+c_x</script><script type="math/tex; mode=display">b_y=s_za_z+c_z</script><p>其中向量s是一个任意的缩放因子，而c是一个任意的偏移量。这些常量可自由选择，通常用于将视口调整到一个合适的位置。该投影变换同样可以使用矩阵表示（为清晰起见引入临时向量d）</p><script type="math/tex; mode=display">\begin{bmatrix}    d_x  \\    d_y  \\\end{bmatrix}=\begin{bmatrix}    1 & 0 & 0 \\    0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}    a_x \\    a_y \\    a_z \\\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}    b_x\\    b_y\\\end{bmatrix}=\begin{bmatrix}    s_x & 0 \\    0     & s_z \\\end{bmatrix}\begin{bmatrix}    d_x\\    d_y\\\end{bmatrix}+\begin{bmatrix}    c_x\\    c_z\\\end{bmatrix}</script><p>虽然正交投影产生的图像在一定程度上反映了物体的三维特性，但此类投影图像和实际观测到的并不相同。特别是对于相同长度的平行线段，无论离虚拟观察者（摄像机）远近与否，它们都会在正交投影中显示为相同长度。这会导致较近的线段看起来被缩短了。</p><h2 id="透视投影原理"><a href="#透视投影原理" class="headerlink" title="透视投影原理"></a>透视投影原理</h2><p>透视投影是为了获得接近真实三维物体的视觉效果而在二维的纸或者画布平面上绘图或者渲染的一种方法，它也称为透视图。透视投影的绘制必须根据已有的几何规则进行。</p><p>常用的透视投影视椎体模型如图1所示。设视点E位于原点，视平面P垂直于Z轴，且四边分别平行于x轴和y轴，视椎体的近截面离视点的距离为n，远截面离视点的距离为f，且一般取近截面为视平面。</p><p></p><p align="center">    <img src="images/perspective_model.jpg" width="90%" alt="透视投影的标准视椎体模型"></p><p></p><center>图1 透视投影的标准视椎体模型</center><h1 id="坐标系之间的转换"><a href="#坐标系之间的转换" class="headerlink" title="坐标系之间的转换"></a>坐标系之间的转换</h1><p>计算机视觉通常涉及到四个坐标系：像素平面坐标系（u,v）、像平面坐标系（图像物理坐标第（x,y）、相机坐标系（Xc,Yc,Zc）和世界坐标系（Xw,Yw,Zw），如图2所示。</p><p></p><p align="center">    <img src="images/four_axis.png" width="90%" alt="四个坐标系"></p><p></p><center>图2 四个坐标系</center><p>1 : 世界坐标系：根据情况而定，可以表示任何物体。单位m。</p><p>2：相机坐标系：以摄像机光心为原点（在针孔模型中也就是针孔为光心），z轴与光轴重合也就是z轴指向相机的前方（也就是与成像平面垂直），x轴与y轴的正方向与物体坐标系平行，其中上图中的f为摄像机的焦距。单位m</p><p>3：图像物理坐标系（也叫平面坐标系）：用物理单位表示像素的位置，坐标原点为摄像机光轴与图像物理坐标系的交点位置。坐标系为图上o-xy。单位是mm。单位毫米的原因是此时由于相机内部的CCD传感器是很小的，比如8mm x 6mm。但是最后图像照片是也像素为单位比如640x480.这就涉及到了图像物理坐标系与像素坐标系的变换了。下面的像素坐标系将会讲到。</p><p>4：像素坐标系：以像素为单位，坐标原点在左上角。这也是一些opencv，OpenGL等库的坐标原点选在左上角的原因。当然明显看出CCD传感器以mm单位到像素中间有转换的。举个例子，CCD传感上上面的8mm x 6mm，转换到像素大小是640x480. 假如dx表示像素坐标系中每个像素的物理大小就是1/80. 也就是说毫米与像素点的之间关系是piexl/mm.</p><h2 id="世界坐标系到相机坐标系的转换"><a href="#世界坐标系到相机坐标系的转换" class="headerlink" title="世界坐标系到相机坐标系的转换"></a>世界坐标系到相机坐标系的转换</h2><p>物体之间的坐标系变换都可以表示坐标系的旋转变换加上平移变换，则世界坐标系到相机坐标系的转换关系也是如此，他们之间的变换如图3所示。</p><p></p><p align="center">    <img src="images/worldtocamera.jpg" width="90%" alt="世界坐标系到相机坐标系的转换"></p><p></p><center>图3 世界坐标系到相机坐标系的转换</center><p>可以得到P点在相机坐标系下的坐标:</p><script type="math/tex; mode=display">\begin{bmatrix}    X_c\\    Y_c\\    Z_c\\\end{bmatrix}=R\begin{bmatrix}    X_w\\    Y_w\\    Z_w\\\end{bmatrix}+T\Rightarrow \begin{bmatrix}    X_c\\    Y_c\\    Z_c\\    1\\\end{bmatrix}=\begin{bmatrix}    R & T\\    \vec{0} & 1\\\end{bmatrix}\begin{bmatrix}    X_w\\    Y_w\\    Z_w\\    1\\\end{bmatrix},R:3*3,T:3*1</script><h2 id="相机坐标系到图像物理坐标系的转换"><a href="#相机坐标系到图像物理坐标系的转换" class="headerlink" title="相机坐标系到图像物理坐标系的转换"></a>相机坐标系到图像物理坐标系的转换</h2><p>从相机坐标系到图像坐标系，属于透视投影关系，从3D转换到2D。 也可以看成是针孔模型的变种。该转换满足三角形的相似定理，如图4所示。</p><p></p><p align="center">    <img src="images/3dto2d.jpg" width="90%" alt="相机坐标系到图像物理坐标系的转换"></p><p></p><center>图4 相机坐标系到图像物理坐标系的转换</center><h2 id="图像物理坐标系到像素坐标系的转换"><a href="#图像物理坐标系到像素坐标系的转换" class="headerlink" title="图像物理坐标系到像素坐标系的转换"></a>图像物理坐标系到像素坐标系的转换</h2><p>图像物理坐标系到像素坐标系的转换不涉及旋转变换，但是坐标原点位置不一致，大小不一致，涉及伸缩变换及平移变换，如图5所示。</p><p></p><p align="center">    <img src="images/image2uv.jpg" width="90%" alt="图像物理坐标系到像素坐标系的转换"></p><p></p><center>图5 图像物理坐标系到像素坐标系的转换</center><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>四个坐标系之间存在着下述关系 ( 矩阵依次左乘 )，如图6所示:</p><p></p><p align="center">    <img src="images/summary1.jpg" width="90%" alt="世界坐标系到像素坐标系的转换"></p><p></p><p></p><p align="center">    <img src="images/summary2.jpg" width="90%"></p><p></p><center>图6 世界坐标系到像素坐标系的转换</center><p>其中相机的内参和外参可以通过张正友标定获取。通过最终的转换关系来看，一个三维中的坐标点，的确可以在图像中找到一个对应的像素点，但是反过来，通过图像中的一个点找到它在三维中对应的点就很成了一个问题，因为我们并不知道等式左边的Z<sub>c</sub>的值。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zh.wikipedia.org/wiki三维投影" target="_blank" rel="noopener">三维投影</a>,by wikipedia.</li><li><a href="https://blog.csdn.net/Goncely/article/details/5397729" target="_blank" rel="noopener">透视投影的原理和实现</a>,by Goncely.</li><li><a href="https://blog.csdn.net/chentravelling/article/details/53558096" target="_blank" rel="noopener">计算机视觉：相机成像原理：世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换</a>,by 生活没有if-else</li><li><a href="https://blog.csdn.net/lyl771857509/article/details/79633412" target="_blank" rel="noopener">【相机标定】四个坐标系之间的变换关系</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机视觉是一门研究用摄影机和计算机代替人眼对目标进行识别、跟踪和测量的学科。为了解该门学科，首先应掌握投影原理和世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换关系。&lt;/p&gt;
&lt;h1 id=&quot;三维投影&quot;&gt;&lt;a href=&quot;#三维投影&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="计算机视觉" scheme="https://huangwang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="透视投影" scheme="https://huangwang.github.io/tags/%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>生活中的统计学之购买车展黄牛票</title>
    <link href="https://huangwang.github.io/2018/11/17/%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%8B%E8%B4%AD%E4%B9%B0%E8%BD%A6%E5%B1%95%E9%BB%84%E7%89%9B%E7%A5%A8/"/>
    <id>https://huangwang.github.io/2018/11/17/生活中的统计学之购买车展黄牛票/</id>
    <published>2018-11-17T10:54:07.000Z</published>
    <updated>2018-11-18T09:56:24.133Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间去看车展，一出地铁口，就有黄牛兜售车展门票，只需30元一张，而从车展正规窗口购买需要50元一张，那么买黄牛票还是买正规车展门票呢？</p><p>黄牛票有可能是真的，这样我就只需30元就可以参观车展，也有可能是假的，这样我就得花80元才能参观车展。假设黄牛票为真的概率是p<sub>1</sub>，根据概率论的知识，我参观车展花费的期望是：</p><script type="math/tex; mode=display">E = 30*p_1+80*(1-p_1)</script><p>在没有任何先验知识的前提下，假设黄牛票为真的概率是0.5，于是每次买黄牛票参观车展的花费期望是55，而每次买正规门票参观车展的花费期望是50，因此不建议买黄牛票，而应该去买正规车展门票。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="noopener">Cmd Markdown 公式指导手册</a></li><li><a href="http://jzqt.github.io/2015/06/30/Markdown中写数学公式/" target="_blank" rel="noopener">Markdown中写数学公式</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间去看车展，一出地铁口，就有黄牛兜售车展门票，只需30元一张，而从车展正规窗口购买需要50元一张，那么买黄牛票还是买正规车展门票呢？&lt;/p&gt;
&lt;p&gt;黄牛票有可能是真的，这样我就只需30元就可以参观车展，也有可能是假的，这样我就得花80元才能参观车展。假设黄牛票为真的概
      
    
    </summary>
    
    
      <category term="概率论" scheme="https://huangwang.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>中国电信光猫华为HG8245C开启IPV6的方法</title>
    <link href="https://huangwang.github.io/2018/11/11/%E4%B8%AD%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%85%89%E7%8C%AB%E5%8D%8E%E4%B8%BAHG8245C%E5%BC%80%E5%90%AFIPV6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://huangwang.github.io/2018/11/11/中国电信光猫华为HG8245C开启IPV6的方法/</id>
    <published>2018-11-11T12:50:15.000Z</published>
    <updated>2018-11-11T14:14:44.897Z</updated>
    
    <content type="html"><![CDATA[<p>据报道，目前中国电信已成功创建了IP骨干网全面支持IPv6，并且在4G网络开启了IPv6服务，在100多个城域网提供了IPv6服务<sup>[1]</sup>。那么如何使家里宽带用上IPv6服务呢？这个问题最关键是设置入户光猫使其支持IPv6。以如何光猫华为HG8245C为例，说明设置过程。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="IPv6简介"><a href="#IPv6简介" class="headerlink" title="IPv6简介"></a>IPv6简介</h2><p>网际协议第6版（英文：Internet Protocol version 6，缩写：IPv6）是网际协议（IP）的最新版本，用作互联网的网上层协议，用它来取代IPv4主要是为了解决IPv4地址枯竭问题，不过它也在其他很多方面对IPv4有所改进。</p><h2 id="IPv6格式"><a href="#IPv6格式" class="headerlink" title="IPv6格式"></a>IPv6格式</h2><p>IPv6二进位制下为128位长度，以16位为一组，每组以冒号“:”隔开，可以分为8组，每组以4位十六进制方式表示。例如：2001:0db8:85a3:08d3:1319:8a2e:0370:7344 是一个合法的IPv6地址。</p><p>同时IPv6在某些条件下可以省略：</p><ol><li><p>每项数字前导的0可以省略，省略后前导数字仍是0则继续，例如下组IPv6是等价的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2001:0DB8:02de:0000:0000:0000:0000:0e13</span><br><span class="line">2001:DB8:2de:0000:0000:0000:0000:e13</span><br><span class="line">2001:DB8:2de:000:000:000:000:e13</span><br><span class="line">2001:DB8:2de:00:00:00:00:e13</span><br><span class="line">2001:DB8:2de:0:0:0:0:e13</span><br></pre></td></tr></table></figure></li><li><p>可以用双冒号“::”表示一组0或多组连续的0，但只能出现一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 2001:DB8:2de:0:0:0:0:e13</span><br><span class="line">   2001:DB8:2de::e13</span><br><span class="line">* 2001:0DB8:0000:0000:0000:0000:1428:57ab</span><br><span class="line">   2001:0DB8:0000:0000:0000::1428:57ab</span><br><span class="line">   2001:0DB8:0:0:0:0:1428:57ab</span><br><span class="line">   2001:0DB8:0::0:1428:57ab</span><br><span class="line">   2001:0DB8::1428:57ab</span><br></pre></td></tr></table></figure></li><li><p>如果这个地址实际上是IPv4的地址，后32位可以用10进制数表示；因此::ffff:192.168.89.9 相等于::ffff:c0a8:5909。</p></li></ol><h2 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h2><h3 id="常用地址"><a href="#常用地址" class="headerlink" title="常用地址"></a>常用地址</h3><p>IPv6地址可分为三种:</p><ul><li>单播（unicast）地址：单播地址标示一个网上接口。协议会把送往地址的数据包送往给其接口。</li><li>任播（anycast）地址: Anycast是IPv6特有的数据发送方式，它像是IPv4的Unicast（单点传播）与Broadcast（多点广播）的综合。</li><li>多播（multicast）地址: 多播地址也称组播地址。多播地址也被指定到一群不同的接口，送到多播地址的数据包会被发送到所有的地址。</li></ul><h3 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h3><h4 id="未指定地址"><a href="#未指定地址" class="headerlink" title="未指定地址"></a>未指定地址</h4><ul><li>::/128－所有比特皆为零的地址称作未指定地址。</li></ul><h4 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h4><ul><li>::1/128－是一种单播绕回地址。如果一个应用程序将数据包送到此地址，IPv6堆栈会转送这些数据包绕回到同样的虚拟接口（相当于IPv4中的127.0.0.1/8）。</li><li>fe80::/10－这些链路本地地址指明，这些地址只在区域连线中是合法的，这有点类似于IPv4中的169.254.0.0/16。</li></ul><h4 id="唯一区域位域"><a href="#唯一区域位域" class="headerlink" title="唯一区域位域"></a>唯一区域位域</h4><ul><li>fc00::/7－唯一区域地址（ULA，unique local address）只可在一群网站中绕送。</li></ul><h4 id="多播地址"><a href="#多播地址" class="headerlink" title="多播地址"></a>多播地址</h4><ul><li>ff00::/8－这个前置表明定义在”IP Version 6 Addressing Architecture”（RFC 4291）中的多播地址[</li></ul><h4 id="IPv4转译地址"><a href="#IPv4转译地址" class="headerlink" title="IPv4转译地址"></a>IPv4转译地址</h4><ul><li>::ffff:x.x.x.x/96－用于IPv4映射地址。</li><li>2001::/32－用于Teredo隧道。</li><li>2002::/16－用于6to4。</li></ul><h2 id="IPv6优势"><a href="#IPv6优势" class="headerlink" title="IPv6优势"></a>IPv6优势</h2><ul><li>巨大的地址空间</li><li>新的协议头格式，加快路由速度</li><li>有效地、分级的寻址和路由结构</li><li>有状态和无状态的地址配置</li><li>内置的安全性</li><li>更好的支持Qos</li><li>用新协议处理邻节点的交互</li><li>可扩展性</li></ul><h1 id="设置华为光猫HG8245C开启IPv6步骤"><a href="#设置华为光猫HG8245C开启IPv6步骤" class="headerlink" title="设置华为光猫HG8245C开启IPv6步骤"></a>设置华为光猫HG8245C开启IPv6步骤</h1><p>在设置华为光猫HG8245C开启IPv6之前，一是要确保所在电信已支持IPv6服务。二是获取华为HG8245C隐藏管理员帐号telecomadmin的密码。</p><p>以隐藏管理员帐号telecomadmin登录华为HG8245C的Web管理控制台后，选择“网络-&gt;宽带设置”，选择连接”2<em>INTERNET_R_VID</em>“,设置协议类型为“IPv4/IPv6”，设置前缀获取方式为“DHCPv6-PD”,再点应用即可。</p><p align="center">    <img src="images/open_ipv6.png" width="90%" alt="开启IPv6"></p><p>在Debian Linux中打开终端，输入如下命令或者浏览网站<a href="http://test-ipv6.com/验证IPv6。" target="_blank" rel="noopener">http://test-ipv6.com/验证IPv6。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether e4:70:b8:30:f1:5b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.100/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0</span><br><span class="line">       valid_lft 251566sec preferred_lft 251566sec</span><br><span class="line">    inet6 240e:bc:e60:3d00:ea5b:f704:6b65:fab1/64 scope global dynamic noprefixroute </span><br><span class="line">       valid_lft 258984sec preferred_lft 172584sec</span><br><span class="line">    inet6 fe80::4e2c:4397:f016:3eb4/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.c114.com.cn/news/117/a1059059.html" target="_blank" rel="noopener">中国电信：IPv6在线用户已超千万 年底将完成端到端服务能力</a>.2018-07-16</li><li>维基百科.<a href="https://zh.wikipedia.org/wiki/IPv6" target="_blank" rel="noopener">IPv6</a></li><li><a href="http://network.51cto.com/art/201006/204898.htm" target="_blank" rel="noopener">掌握IPv6网络协议的优势</a>,2010-06-10</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;据报道，目前中国电信已成功创建了IP骨干网全面支持IPv6，并且在4G网络开启了IPv6服务，在100多个城域网提供了IPv6服务&lt;sup&gt;[1]&lt;/sup&gt;。那么如何使家里宽带用上IPv6服务呢？这个问题最关键是设置入户光猫使其支持IPv6。以如何光猫华为HG8245C为
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="IPv6" scheme="https://huangwang.github.io/tags/IPv6/"/>
    
  </entry>
  
  <entry>
    <title>树莓派学习之SFTP管理文件</title>
    <link href="https://huangwang.github.io/2018/11/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BSFTP%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6/"/>
    <id>https://huangwang.github.io/2018/11/09/树莓派学习之SFTP管理文件/</id>
    <published>2018-11-09T13:53:11.000Z</published>
    <updated>2018-11-09T14:39:13.065Z</updated>
    
    <content type="html"><![CDATA[<p>当需要向树莓派发送文件时，可使用SFTP上传下载文件。下面介绍如何使用SFTP向树莓派发送下载文件。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>SFTP是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。</p><p>SFTP 为 SSH的其中一部分，是一种传输文件至服务器的安全方式。在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作。</p><p>SFTP传输使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。</p><h2 id="SFTP客户端程序"><a href="#SFTP客户端程序" class="headerlink" title="SFTP客户端程序"></a>SFTP客户端程序</h2><p>在Windows平台，常用的SFTP客户端程序有：</p><ul><li>FileZilla</li><li>WinSCP</li><li>Xftp</li><li>Core FTP</li></ul><p>在Linux平台，可直接使用sftp命令进行连接服务器。</p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>下面介绍在Debian平台使用sftp命令连接树莓派，<strong>在此之前应配置树莓派开启ssh服务</strong>。</p><ol><li>建立连接</li></ol><p>使用如下命令连接树莓派：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp pi@192.168.0.103</span><br></pre></td></tr></table></figure></p><ol><li>查看帮助</li></ol><p>通过help查看在sftp连接下能使用的命令。从帮助中可知，在命令前加前缀“l”或者“！”即可在本地操作系统shell执行命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; help</span><br><span class="line">Available commands:</span><br><span class="line">bye                                Quit sftp</span><br><span class="line">cd path                            Change remote directory to &apos;path&apos;</span><br><span class="line">chgrp grp path                     Change group of file &apos;path&apos; to &apos;grp&apos;</span><br><span class="line">chmod mode path                    Change permissions of file &apos;path&apos; to &apos;mode&apos;</span><br><span class="line">chown own path                     Change owner of file &apos;path&apos; to &apos;own&apos;</span><br><span class="line">df [-hi] [path]                    Display statistics for current directory or</span><br><span class="line">                                   filesystem containing &apos;path&apos;</span><br><span class="line">exit                               Quit sftp</span><br><span class="line">get [-afPpRr] remote [local]       Download file</span><br><span class="line">reget [-fPpRr] remote [local]      Resume download file</span><br><span class="line">reput [-fPpRr] [local] remote      Resume upload file</span><br><span class="line">help                               Display this help text</span><br><span class="line">lcd path                           Change local directory to &apos;path&apos;</span><br><span class="line">lls [ls-options [path]]            Display local directory listing</span><br><span class="line">lmkdir path                        Create local directory</span><br><span class="line">ln [-s] oldpath newpath            Link remote file (-s for symlink)</span><br><span class="line">lpwd                               Print local working directory</span><br><span class="line">ls [-1afhlnrSt] [path]             Display remote directory listing</span><br><span class="line">lumask umask                       Set local umask to &apos;umask&apos;</span><br><span class="line">mkdir path                         Create remote directory</span><br><span class="line">progress                           Toggle display of progress meter</span><br><span class="line">put [-afPpRr] local [remote]       Upload file</span><br><span class="line">pwd                                Display remote working directory</span><br><span class="line">quit                               Quit sftp</span><br><span class="line">rename oldpath newpath             Rename remote file</span><br><span class="line">rm path                            Delete remote file</span><br><span class="line">rmdir path                         Remove remote directory</span><br><span class="line">symlink oldpath newpath            Symlink remote file</span><br><span class="line">version                            Show SFTP version</span><br><span class="line">!command                           Execute &apos;command&apos; in local shell</span><br><span class="line">!                                  Escape to local shell</span><br><span class="line">?                                  Synonym for help</span><br></pre></td></tr></table></figure></p><ol><li>下载远程文件到本地主机<br>使用get命令下载远程文件到本地主机：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; get README.TXT </span><br><span class="line">Fetching /home/pi/wiringPi/README.TXT to README.TXT</span><br><span class="line">/home/pi/wiringPi/README.TXT                  100%  606    39.1KB/s   00:00</span><br></pre></td></tr></table></figure></li></ol><p>get命令还有一些有用参数，如递归选项“ -r ”来递归的复制一个文件夹里面的内容，“ -P ”或者“ -p ”参数来告诉 SFTP 保持文件的权限访问位的设置和访问时间。</p><ol><li>上传本地文件到远程主机<br>使用“ put ”命令将文件上传到远程主机：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; put README.TXT </span><br><span class="line">Uploading README.TXT to /home/pi/README.TXT</span><br><span class="line">README.TXT                                    100%  606    33.6KB/s   00:00</span><br></pre></td></tr></table></figure></li></ol><p>” put “具有类似“ get ”的参数。例如，递归选项“ -r ”可以上传整个文件夹。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li>华华. <a href="https://linuxstory.org/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server/" target="_blank" rel="noopener">手把手教你使用 SFTP 安全地传输文件</a>.2015-12-5.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当需要向树莓派发送文件时，可使用SFTP上传下载文件。下面介绍如何使用SFTP向树莓派发送下载文件。&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;SFTP
      
    
    </summary>
    
    
      <category term="笔记本" scheme="https://huangwang.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
      <category term="树莓派" scheme="https://huangwang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
</feed>
