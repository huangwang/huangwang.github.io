<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[树莓派学习之SFTP管理文件]]></title>
    <url>%2F2018%2F11%2F09%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BSFTP%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[当需要向树莓派发送文件时，可使用SFTP上传下载文件。下面介绍如何使用SFTP向树莓派发送下载文件。 基础知识SFTP是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。 SFTP 为 SSH的其中一部分，是一种传输文件至服务器的安全方式。在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作。 SFTP传输使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。 SFTP客户端程序在Windows平台，常用的SFTP客户端程序有： FileZilla WinSCP Xftp Core FTP 在Linux平台，可直接使用sftp命令进行连接服务器。 基本操作下面介绍在Debian平台使用sftp命令连接树莓派，在此之前应配置树莓派开启ssh服务。 建立连接 使用如下命令连接树莓派：1sftp pi@192.168.0.103 查看帮助 通过help查看在sftp连接下能使用的命令。从帮助中可知，在命令前加前缀“l”或者“！”即可在本地操作系统shell执行命令。12345678910111213141516171819202122232425262728293031323334sftp&gt; helpAvailable commands:bye Quit sftpcd path Change remote directory to &apos;path&apos;chgrp grp path Change group of file &apos;path&apos; to &apos;grp&apos;chmod mode path Change permissions of file &apos;path&apos; to &apos;mode&apos;chown own path Change owner of file &apos;path&apos; to &apos;own&apos;df [-hi] [path] Display statistics for current directory or filesystem containing &apos;path&apos;exit Quit sftpget [-afPpRr] remote [local] Download filereget [-fPpRr] remote [local] Resume download filereput [-fPpRr] [local] remote Resume upload filehelp Display this help textlcd path Change local directory to &apos;path&apos;lls [ls-options [path]] Display local directory listinglmkdir path Create local directoryln [-s] oldpath newpath Link remote file (-s for symlink)lpwd Print local working directoryls [-1afhlnrSt] [path] Display remote directory listinglumask umask Set local umask to &apos;umask&apos;mkdir path Create remote directoryprogress Toggle display of progress meterput [-afPpRr] local [remote] Upload filepwd Display remote working directoryquit Quit sftprename oldpath newpath Rename remote filerm path Delete remote filermdir path Remove remote directorysymlink oldpath newpath Symlink remote fileversion Show SFTP version!command Execute &apos;command&apos; in local shell! Escape to local shell? Synonym for help 下载远程文件到本地主机使用get命令下载远程文件到本地主机：123sftp&gt; get README.TXT Fetching /home/pi/wiringPi/README.TXT to README.TXT/home/pi/wiringPi/README.TXT 100% 606 39.1KB/s 00:00 get命令还有一些有用参数，如递归选项“ -r ”来递归的复制一个文件夹里面的内容，“ -P ”或者“ -p ”参数来告诉 SFTP 保持文件的权限访问位的设置和访问时间。 上传本地文件到远程主机使用“ put ”命令将文件上传到远程主机：123sftp&gt; put README.TXT Uploading README.TXT to /home/pi/README.TXTREADME.TXT 100% 606 33.6KB/s 00:00 ” put “具有类似“ get ”的参数。例如，递归选项“ -r ”可以上传整个文件夹。 参考文献 华华. 手把手教你使用 SFTP 安全地传输文件.2015-12-5.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cesium摄像头跟踪飞机实体时晃动问题分析]]></title>
    <url>%2F2018%2F11%2F08%2FCesium%E6%91%84%E5%83%8F%E5%A4%B4%E8%B7%9F%E8%B8%AA%E9%A3%9E%E6%9C%BA%E5%AE%9E%E4%BD%93%E6%97%B6%E6%99%83%E5%8A%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[在3D场景下使用Cesium跟踪飞机时会出现摄像头晃动问题，导致地图背景不断晃动，影响观看。下面以最新的Cesium1.51源码为例，解析Cesium 渲染过程原理，分析跟踪实体时摄像头晃动的原因，找出可能的解决方法。 Cesium渲染过程分析使用Cesium最简单示例代码如下：1var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;); Viewer是Cesium构建应用的最基础的组件。它又是其他组件的容器，包括： animation:控制时间前进、倒退、暂停以及前进和倒退速度的组件 baseLayerPicker：图层选择组件 fullscreenButton：控制是否全屏的组件 vrButton：控制是否VR显示的组件 geocoder：地理位置搜索组件 homeButton：返回摄像头默认位置按钮组建 infoBox：信息框组件 sceneModePicker：场景模式选择组件 selectionIndicator：选择指示组件 timeline：时间线组件 navigationHelpButton：导航帮助按钮，告诉使用者如何使用鼠标和触摸屏操纵虚拟地球 CesiumWidget：虚拟地球组件 其中，虚拟地球组件CesiumWidget是Viewer包含核心组件，在Viewer中创建CesiumWidget对象时，将设置其useDefaultRenderLoop属性。设置该属性将启动渲染函数startRenderLoop。1234567891011121314//from Source/Widgets/CesiumWidget/CesiumWidget.jsuseDefaultRenderLoop : &#123; get : function() &#123; return this._useDefaultRenderLoop; &#125;, set : function(value) &#123; if (this._useDefaultRenderLoop !== value) &#123; this._useDefaultRenderLoop = value; if (value &amp;&amp; !this._renderLoopRunning) &#123; startRenderLoop(this); &#125; &#125; &#125;&#125;, 函数startRenderLoop是Cesium渲染的开始，其代码如下：12345678910111213141516171819202122232425262728293031323334353637function startRenderLoop(widget) &#123; widget._renderLoopRunning = true; var lastFrameTime = 0; function render(frameTime) &#123; if (widget.isDestroyed()) &#123; return; &#125; if (widget._useDefaultRenderLoop) &#123; try &#123; var targetFrameRate = widget._targetFrameRate; if (!defined(targetFrameRate)) &#123; widget.resize(); widget.render(); requestAnimationFrame(render); &#125; else &#123; var interval = 1000.0 / targetFrameRate; var delta = frameTime - lastFrameTime; if (delta &gt; interval) &#123; widget.resize(); widget.render(); lastFrameTime = frameTime - (delta % interval); &#125; requestAnimationFrame(render); &#125; &#125; catch (error) &#123; ... &#125; &#125; else &#123; widget._renderLoopRunning = false; &#125; &#125; requestAnimationFrame(render);&#125; CesiumWidget组建的render方法随后调用Scene的render方法。12345678910111213141516171819202122232425262728293031323334353637383940414243Scene.prototype.render = function(time) &#123; if (!defined(time)) &#123; time = JulianDate.now(); &#125; var frameState = this._frameState; this._jobScheduler.resetBudgets(); var cameraChanged = this._view.checkForCameraUpdates(this); var shouldRender = !this.requestRenderMode || this._renderRequested || cameraChanged || this._logDepthBufferDirty || (this.mode === SceneMode.MORPHING); if (!shouldRender &amp;&amp; defined(this.maximumRenderTimeChange) &amp;&amp; defined(this._lastRenderTime)) &#123; var difference = Math.abs(JulianDate.secondsDifference(this._lastRenderTime, time)); shouldRender = shouldRender || difference &gt; this.maximumRenderTimeChange; &#125; if (shouldRender) &#123; this._lastRenderTime = JulianDate.clone(time, this._lastRenderTime); this._renderRequested = false; this._logDepthBufferDirty = false; var frameNumber = CesiumMath.incrementWrap(frameState.frameNumber, 15000000.0, 1.0); updateFrameNumber(this, frameNumber, time); &#125; // Update this._preUpdate.raiseEvent(this, time); tryAndCatchError(this, update); this._postUpdate.raiseEvent(this, time); if (shouldRender) &#123; // Render this._preRender.raiseEvent(this, time); tryAndCatchError(this, render); RequestScheduler.update(); &#125; updateDebugShowFramesPerSecond(this, shouldRender); callAfterRenderFunctions(this); if (shouldRender) &#123; this._postRender.raiseEvent(this, time); &#125; &#125;; Scene的render方法中tryAndCatchError函数将调用render函数。在该render函数中，地球的主要要素（地形&amp;影像）的渲染，将在Globe的beginFrame和endFrame之间完成的。123456789101112131415161718192021222324function render(scene) &#123; ... if (defined(scene.globe)) &#123; scene.globe.beginFrame(frameState); &#125; updateEnvironment(scene); updateAndExecuteCommands(scene, passState, backgroundColor); resolveFramebuffers(scene, passState); passState.framebuffer = undefined; executeOverlayCommands(scene, passState); if (defined(scene.globe)) &#123; scene.globe.endFrame(frameState); if (!scene.globe.tilesLoaded) &#123; scene._renderRequested = true; &#125; &#125; ...&#125; 其中updateAndExecuteCommands负责数据的调度，比如哪些Tile需要创建，这些Tile相关的地形数据，以及涉及到的影像数据之间的调度，都是在该函数中维护。而scene.globe.endFrame中，会对该帧所涉及的GlobeTile的下载，解析等进行处理。 Cesium跟踪实体在Viewer组件构造函数内，Viewer订阅了场景组件Scene的渲染后事件postRender，以执行Viewer自己的_postRender函数。1eventHelper.add(scene.postRender, Viewer.prototype._postRender, this); Viewer的_postRender函数代码如下，其中updateTrackedEntity函数将更新被跟踪实体的摄像头位置：1234Viewer.prototype._postRender = function() &#123; updateZoomTarget(this); updateTrackedEntity(this);&#125;; updateTrackedEntity函数代码如下：1234567891011121314151617181920212223242526272829303132333435363738function updateTrackedEntity(viewer) &#123; if (!viewer._needTrackedEntityUpdate) &#123; return; &#125; var trackedEntity = viewer._trackedEntity; var currentTime = viewer.clock.currentTime; //Verify we have a current position at this time. This is only triggered if a position //has become undefined after trackedEntity is set but before the boundingSphere has been //computed. In this case, we will track the entity once it comes back into existence. var currentPosition = Property.getValueOrUndefined(trackedEntity.position, currentTime); if (!defined(currentPosition)) &#123; return; &#125; var scene = viewer.scene; var state = viewer._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch); if (state === BoundingSphereState.PENDING) &#123; return; &#125; var sceneMode = scene.mode; if (sceneMode === SceneMode.COLUMBUS_VIEW || sceneMode === SceneMode.SCENE2D) &#123; scene.screenSpaceCameraController.enableTranslate = false; &#125; if (sceneMode === SceneMode.COLUMBUS_VIEW || sceneMode === SceneMode.SCENE3D) &#123; scene.screenSpaceCameraController.enableTilt = false; &#125; var bs = state !== BoundingSphereState.FAILED ? boundingSphereScratch : undefined; viewer._entityView = new EntityView(trackedEntity, scene, scene.mapProjection.ellipsoid); viewer._entityView.update(currentTime, bs); viewer._needTrackedEntityUpdate = false;&#125; 除此之外，Viewer组件订阅了Clock组建的onTick事件，以执行其自身的_onTick事件处理函数：1eventHelper.add(clock.onTick, Viewer.prototype._onTick, this); 在Viewer组件的_onTick事件处理函数中，同样会更新被跟踪实体的摄像头位置。而Cesium摄像头跟踪飞机实体时产生晃动的根源即在此处。12345678910111213141516171819Viewer.prototype._onTick = function(clock) &#123; var time = clock.currentTime; var isUpdated = this._dataSourceDisplay.update(time); if (this._allowDataSourcesToSuspendAnimation) &#123; this._clockViewModel.canAnimate = isUpdated; &#125; var entityView = this._entityView; if (defined(entityView)) &#123; var trackedEntity = this._trackedEntity; var trackedState = this._dataSourceDisplay.getBoundingSphere(trackedEntity, false, boundingSphereScratch); if (trackedState === BoundingSphereState.DONE) &#123; entityView.update(time, boundingSphereScratch); &#125; &#125; ... &#125;; 参考文献 http://www.cnblogs.com/fuckgiser/p/5744509.html, by 法克鸡丝]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派学习之远程登录]]></title>
    <url>%2F2018%2F11%2F07%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[每次通过USB转串口登录树莓派比较麻烦，可以设置树莓派开启ssh和vnc服务，以便通过ssh或vnc远程登录树莓派。下面介绍在Debian中通过ssh或vnc远程登录树莓派的过程。 基础知识SSHSecure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。 SSH基本用法1234# 以用户名user，登录远程主机host$ ssh user@host# SSH的默认端口是22。使用p参数，可以修改这个端口。$ ssh -p 2222 user@host SSH通信过程及风险SSH采用了公钥加密保证安全。 整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。 这个过程本身是安全的，但是实施的时候存在”中间人攻击”风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。 VNCVNC（Virtual Network Computing），为一种使用RFB协议的显示屏画面分享及远程操作软件。此软件借由网上，可发送键盘与鼠标的动作及即时的显示屏画面。 VNC与操作系统无关，因此可跨平台使用，例如可用Windows连线到某Linux的计算机，反之亦同。甚至在没有安装客户端程序的计算机中，只要有支持JAVA的浏览器，也可使用。 原理VNC系统由客户端，服务端和一个协议组成 VNC的服务端目的是分享其所运行机器的屏幕，服务端被动的允许客户端控制它。VNC客户端（或Viewer）观察控制服务端，与服务端交互。VNC协议Protocol（RFB）是一个简单的协议，传送服务端的原始图像到客户端（一个X,Y位置上的正方形的点阵数据），客户端传送事件消息到服务端。 服务器发送小方块的帧缓存给客户端，在最简单的情况，VNC协议使用大量的带宽，因此各种各样的方法被发明出来减少通讯的开支，举例来说，有各种各样的编码方法来决定最有效率的方法来传送这些点阵方块。 VNC默认使用TCP端口5900至5906，而JAVA的VNC客户端使用5800至5806。一个服务端可以在5900端口用“监听模式”连接一个客户端，使用监听模式的一个好处是服务端不需要设置防火墙。 安全性VNC并非是安全的协议，虽然VNC伺服程序需设置密码才可接受外来连线，且VNC客户端与VNC伺服程序之间的密码传输经过加密，但仍可被轻易的拦截到并使用暴力破解法破解。不过VNC可设计以SSH或VPN传输，以增加安全性。 VNC软件由于VNC以GPL授权，派生出了几个VNC软件： RealVNC：由VNC团队部分成员开发，分为全功能商业版及免费版。 TightVNC：强调节省带宽使用。 UltraVNC：加入了TightVNC的部分程序及加强性能的图型映射驱动程序，并结合Active Directory及NTLM的账号密码认证，但仅有Windows版本。 Vine Viewer：MacOSX的VNC客户端。 配置树莓派支持SSH和VNC通过USB转串口登录树莓派后，按如下步骤开启SSH和VNC： 运行命令raspi-config 1sudo raspi-config 选择第五项Interfacing Options 选择enable SSH 启用SSH，重复步骤一和二，再选择enable VNC。 通过SSH或VNC连接树莓派debian主机与树莓派在同一个局域网内，则按如下步骤通过SSH或VNC连接树莓派。 通过nmap命令获取树莓派ip地址1234567891011$ nmap 192.168.0.1/24Starting Nmap 7.70 ( https://nmap.org ) at 2018-11-08 13:08 CSTNmap scan report for 192.168.0.103Host is up (0.041s latency).Not shown: 998 closed portsPORT STATE SERVICE22/tcp open ssh5900/tcp open vncNmap done: 256 IP addresses (6 hosts up) scanned in 35.77 seconds 开启22和5900端口的主机即是树莓派。 通过ssh远程登录树莓派 12# 首次登录会给出主机认证不能建立的提示，输入yes可继续，再输入用户密码即可远程登录树莓派$ ssh pi@192.168.0.103 通过vnc远程登录树莓派 通过ssh登录树莓派后查看其使用的vnc程序 123$ apt list --installed | grep vncrealvnc-vnc-server/now 6.3.1.36657 armhf [已安装，可升级至：6.3.2.39069]# 可知，树莓派上使用realvnc程序 在Debian上安装realvnc客户端程序realvnc-vnc-viewer 在终端输入vncviewer，输入树莓派ip、用户名、密码即可登录树莓派 参考文献 http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html， by 阮一峰 https://zh.wikipedia.org/zh-hans/Secure_Shell， by wikipedia https://zh.wikipedia.org/zh-hans/VNC， by wikipedia]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派学习之USB转串口]]></title>
    <url>%2F2018%2F11%2F05%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E4%B9%8BUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[最近研究树莓派，需要通过usb转串口去连接树莓派，然后设置其wifi连接。于是将用到计算机硬件知识整理一下，并记录通过usb转串口设置树莓派wifi连接的过程。 硬件知识计算机硬件常用接口有并口和串口，对应串行通信和并行通信。串行通信（英语：Serial communication）是指在计算机总线或其他数据信道上，每次传输一个比特数据，并连续进行以上单次过程的通信方式。与之对应的是并行通信，它在串行端口上通过一次同时传输若干比特数据的方式进行通信。 串行通信被用于长距离通信以及大多数计算机网络，在这些应用场合里，电缆和同步化使并行通信实际应用面临困难。凭借着其改善的信号完整性和传播速度，串行通信总线正在变得越来越普遍，甚至在短程距离的应用中，其优越性已经开始超越并行总线不需要串行化组件(serializer)，并解决了诸如时钟偏移（Clock skew）、互联密度（interconnect density）等缺点。PCI到PCI Express的升级就一个例子。 并口并行接口，简称并口。并口采用的是25针D形接头。所谓“并行”，是指8位数据同时通过并行线进行传送，这样数据传送速度大大提高，但并行传送的线路长度受到限制，因为长度增加，干扰就会增加，数据也就容易出错，目前，并行接口主要作为打印机端口等。 串口串口叫做串行接口，也称串行通信接口，即COM口。按电气标准及协议来分包括RS-232-C、RS-422、RS485、USB等。 RS-232-C、RS-422与RS-485标准只对接口的电气特性做出规定，不涉及接插件、电缆或协议。 串行端口可以用于连接外置调制解调器、绘图仪或串行打印机。它也可以控制台连接的方式连接网络设备，例如路由器和交换机，主要用来配置它们。 RS-232-C 也称标准接口，是目前最常用的一种串行通讯接口。它是在1970年由美国电子工业协会（EIA）联合贝尔系统、 调制解调器厂家及计算机终端生产厂家共同制定的用于串行通讯的标准。 传统的RS-232-C接口标准有22根线，采用标准25芯D型插头座。自IBM PC/AT开始使用简化了的9芯D型插座。计算机一般有两个串行口：COM1和COM2，9针D形接口通常在计算机后面能看到。现在有很多手机数据线或者物流接收器都采用COM口与计算机相连。 RS-422 为改进RS-232通信距离短、速率低的缺点，RS-422定义了一种平衡通信接口，将传输速率提高到10Mb/s，传输距离延长到4000英尺（速率低于100kb/s时），并允许在一条平衡总线上连接最多10个接收器。 RS-485 为扩展应用范围，EIA又于1983年在RS-422基础上制定了RS-485 标准，增加了多点、双向通信能力，即允许多个发送器连接到同一条总线上，同时增加了发送器的驱动能力和冲突保护特性，扩展了总线共模范围，后命名为 TIA/EIA-485-A标准。 Universal Serial Bus（通用串行总线） 简称USB，是目前计算机上应用较广泛的接口规范，由Intel、Microsoft、Compaq、IBM、NEC、Northern Telcom等几家大厂商发起的新型外设接口标准。USB接口是计算机主板上的一种四针接口，其中中间两个针传输数据，两边两个针给外设供电。USB接口速度快、连接简单、不需要外接电源，传输速度12Mbps，新的USB 2.0可达480Mbps；电缆最大长度5米，USB电缆有4条线：2条信号线，2条电源线，可提供5伏特电源，USB电缆还分屏蔽和非屏蔽两种，屏蔽电缆传输速度可达12Mbps，价格较贵，非屏蔽电缆速度为1.5Mbps，但价格便宜；USB通过串联方式最多可串接127个设备；支持热插拔。最新的规格是USB 3.1。 RJ-45接口 是以太网最为常用的接口，RJ45是一个常用名称，指的是由IEC(60)603-7标准化，使用由国际性的接插件标准定义的8个位置（8针）的模块化插孔或者插头。 USB转串口原理硬件接口电气特性 TTL电平：一般用作数字芯片的电平，例如芯片的供电电压是5V，那么高电平就是5V，低电平就是0V，这里所说的电平，就是TTL电平。 232电平：232电平特制电脑串口的电平，-12V左右为正电平，+12V左右为低电平。我们刚才所见到的“USB转串口线”和电脑原生的串口，就是232电平。 USB转串口方法PC的串口电气特性是232电平，单片机的串口电气特性是TTL电平，这两个就不一样，肯定需要某个芯片或者电路来进行转换匹配才可以通信。这个时候我们就需要TTL转232芯片了，常见的是MAX232,MAX3232等。连接方式如下: 但是随着USB接口的普及，当前计算机已经取消了串口。为实现232到TTL的转换，又需要USB转232。连接方式如下： 为简化，可将USB转232和232转TTL集成到一个芯片上。这样的芯片常见的有CH340、PL2303。连接方式如下： 常见的CH340芯片如下图所示： 通过USB转串口连接树莓派下面介绍在Debian Linux主机通过USB转串口连接树莓派的过程。 通过USB转串口物理连接树莓派通过将USB转串口将Debian主机和树莓派物理连接好之后，给树莓派加电启动。 查看Debian系统能否识别ch340芯片在官方Linux内核版本中自Kernel2.6以后就默认包含了对CH340/CH341芯片的驱动支持。在系统的默认驱动目录/lib/modules/$(uname -r)/kernel/drivers内可找到ch340芯片的驱动文件ch341.ko。 使用命令lsusb或dmesg查看linux系统是否识别USB转串口硬件。12345678~$ lsusbBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hubBus 001 Device 005: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader ControllerBus 001 Device 004: ID 8087:0a2a Intel Corp. Bus 001 Device 003: ID 1bcf:2b8a Sunplus Innovation Technology Inc. Bus 001 Device 006: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapterBus 001 Device 002: ID 046d:c062 Logitech, Inc. M-UAS144 [LS1 Laser Mouse]Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 006: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapter表明Linux系统识别了usb转串口线缆，芯片类型为HL-340。 ‘dmesg’命令显示linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。运行dmesg，输出如下：1234567891011~$ sudo dmesg | tail[ 4248.441104] usbcore: registered new interface driver usbserial_generic[ 4248.441112] usbserial: USB Serial support registered for generic[ 4248.456079] usbcore: registered new interface driver ch341[ 4248.456088] usbserial: USB Serial support registered for ch341-uart[ 4248.456097] ch341 1-3:1.0: ch341-uart converter detected[ 4248.456464] usb 1-3: ch341-uart converter now attached to ttyUSB0[ 4284.405593] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535)[ 4284.407844] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535)[ 4657.772761] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535)[ 4657.774969] i2c_hid i2c-ELAN1010:00: i2c_hid_get_input: incomplete report (14/65535) [ 4248.456097] ch341 1-3:1.0: ch341-uart converter detected;[ 4248.456464] usb 1-3: ch341-uart converter now attached to ttyUSB0说明linux系统识别了usb转串口适配器，并附加到ttyUSB0文件上。 使用minicom连接树莓派minicom是linux平台的串行通信程序，类似于windows的超级终端程序。12345678910111213141516171819202122232425262728#首次运行minicom使用-s选项，用于设置串行通信参数$ minicom -s+-----[configuration]------+| Filenames and paths || File transfer protocols || Serial port setup || Modem and dialing || Screen and keyboard || Save setup as dfl || Save setup as.. || Exit || Exit from Minicom |+--------------------------+#通过上下键选择Serial port setup+----------------------------------- +| A - Serial Device : /dev/ttyUSB0 || B - Lockfile Location : /var/lock || C - Callin Program : || D - Callout Program : || E - Bps/Par/Bits : 115200 8N1 || F - Hardware Flow Control : Yes || G - Software Flow Control : No || || Change which setting? |+----------------------------------+# 设置Serial Device为/dev/ttyUSB0，然后推出到上一界面，使用enter键Save setup as dfl，保存配置。下次即可直接运行minicom使用之前保存的配置进行串口通信 # 这时候要选择单独Exit（退出），不要选择Exit from Minicom（退出Minicom），不然你就把minicom关了。# 这时即可连接树莓派。 连接上树莓派后，输入用户名pi和密码raspberry，即可进入系统。1234567891011121314151617Raspbian GNU/Linux 9 raspberrypi ttyS0 raspberrypi login: pi Password: Last login: Tue Oct 9 13:12:40 UTC 2018 on tty1 Linux raspberrypi 4.14.71-v7+ #1145 SMP Fri Sep 21 15:38:35 BST 2018 armv7l The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Wi-Fi is disabled because the country is not set. Use raspi-config to set the country before use. pi@raspberrypi:~$ 退出minicom，按Ctrl＋A，再按下X键，会提示你是否退出，yes就可以了。 配置树莓派wifi连接查看周围wifi热点信息1pi@raspberrypi:~$ iwlist scan 配置连接到wifi热点123456789101112# 编辑wifi文件pi@raspberrypi:~$ sudo vi /etc/wpa_supplicant/wpa_supplicant.conf# 在该文件最后添加下面的话network=&#123; ssid=&quot;WIFINAME&quot; psk=&quot;password&quot;&#125;# 引号部分分别为wifi的名字和密码# 重启系统pi@raspberrypi:~$ sudo init 6# 登录后查看是否连接成功pi@raspberrypi:~$ ip addr 参考文献 https://www.cnblogs.com/zcshan/archive/2010/12/03/com.html ,by 水寒 https://zh.wikipedia.org/wiki串行端口 , by wikipedia https://blog.csdn.net/he_wen_jie/article/details/50983076. by hwj666 https://linux.cn/article-3587-1.html , by linux中国 https://blog.csdn.net/JAZZSOLDIER/article/details/70170466 ， by SoldierJazz2018 http://blog.51cto.com/irinilu/289622, by feng9422 Pipci. Linux 串口终端调试工具minicom[EB/OL].https://blog.csdn.net/Pipcie/article/details/79379451, 2018-02-26. https://blog.csdn.net/huayucong/article/details/51376279， by huayucong]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派操作系统镜像烧录方法指南]]></title>
    <url>%2F2018%2F11%2F03%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%83%A7%E5%BD%95%E6%96%B9%E6%B3%95%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[树莓派是一个微型计算机硬件平台，为使其正常工作还需要安装操作系统。通常将树莓派操作系统烧录到SD卡上，再将SD卡插到树莓派上。加电启动后，树莓派就会从SD卡引导启动操作系统，开始工作。这里SD卡就相当于普通计算机的硬盘。下面记录在Debian Linux下烧录树莓派操作系统到SD卡的方法。 镜像烧录工具EtcherEtcher是树莓派官方推荐的镜像烧录工具。它采用图形界面，支持Windows、Linux、Mac，使用简单方便，推荐普通用户使用。 ddLinux的dd命令用于复制文件并对原文件的内容进行转换和格式化处理。dd命令功能很强大的，对于一些比较底层的问题，使用dd命令往往可以得到出人意料的效果。用的比较多的还是用dd来备份裸设备。同样也可用dd命令烧录系统镜像。 使用dd命令必须非常小心，如果输出指定了错误分区，将摧毁该分区的所有数据。 Linux下镜像烧录过程使用Etcher烧录镜像比较简单，重点介绍使用dd命令烧录镜像的方法。 查找sd卡设备可使用lsblk或者fdisk命令查找sd卡存储设备。需要注意的是： 块设备以/dev/sdX命名，其中X是小写字母，例如/dev/sda。 测试时发现当计算机只有usb3.0接口时，将不识别usb2.0的sd读卡器。 烧录镜像到sd卡将镜像烧录到sd卡使用如下dd命令将树莓派镜像少量到sd卡：1dd bs=4M if=2018-10-09-raspbian-stretch.img of=/dev/sdX conv=fsync 其中： if=文件名：输入文件名，缺省为标准输入。即指定源文件。 of=文件名：输出文件名，缺省为标准输出。即指定目的文件。 bs=bytes：同时设置读入/输出的块大小为bytes个字节。 conv=conversion：用指定的参数转换文件。 将压缩镜像烧录到sd卡当文件系统不支持大于4GB的文件时，可使用利用管道技术烧录镜像，命令如下：1unzip -p 2018-10-09-raspbian-stretch.zip | sudo dd of=/dev/sdX bs=4M conv=fsync 检查烧录进度默认情况下dd命令不给出烧录进度信息，最新的dd提供status=progress选项给出进度信息，命令如下：1dd bs=4M if=2018-10-09-raspbian-stretch.img of=/dev/sdX status=progress conv=fsync 或者可使用dcfldd命令替换dd进行烧录操作。 检查镜像是否正确的烧录到sd卡先使用dd命令将sd卡中内容复制到硬盘，在使用diff或者md5sum检查镜像文件与sd卡内容镜像之间的一致性。 之前dd命令烧录镜像到sd卡完成后会在shell中输出如下结果：123xxx+0 records inyyy+0 records outyyyyyyyyyy bytes (yyy kB, yyy KiB) copied, 0.00144744 s, 283 MB/s xxx是我们需要的，表示读取xxx块记录烧录到sd卡，xxx乘以bs=4M应该等于原始镜像的大小。 使用如下命令复制sd卡内容到硬盘上：12# 经测试count命令没有其作用，该命令将整个sd内容复制到了硬盘，但我们期望只复制之前烧录到sd卡内容dd bs=4M if=/dev/sdX of=from-sd-card.img count=xxx 如果from-sd-card.img文件大于原始镜像文件，那么先使用truncate命令将from-sd-card.img缩小到原始镜像文件的大小，命令如下：1truncate --reference 2018-10-09-raspbian-stretch.img from-sd-card.img 使用diff命令比较两者直接的一致性，如果不一致，可能烧录过程中有错误。1diff -s from-sd-card.img 2018-10-09-raspbian-stretch.img 使用sync命令强制将缓存写入硬盘，然后umount sd卡文件系统，最后移除sd卡。 参考文献 https://www.raspberrypi.org/documentation/installation/installing-images/linux.md, by raspberrypi. https://blog.csdn.net/liumang_D/article/details/3899462, by liumang_d. https://linux.cn/article-8024-1.html, by linux中国 https://www.jianshu.com/p/ff09ceffa816, by 二石兄.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派学习笔记]]></title>
    <url>%2F2018%2F11%2F03%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[WiringPi简介WiringPi是应用于树莓派平台的GPIO控制库函数，WiringPi遵守GUN Lv3。wiringPi使用C或者C++开发并且可以被其他语言包转，例如python、ruby或者PHP等。WiringPi中的函数类似于Arduino的wiring系统，这使得熟悉arduino的用户使用wringPi更为方便。 树莓派具有26个普通输入和输出引脚。在这26个引脚中具有8个普通输入和输出管脚，这8个引脚既可以作为输入管脚也可以作为输出管脚。除此之外，树莓派还有一个2线形式的I2C、一个4线形式的SPI和一个UART接口。树莓派上的I2C和SPI接口也可以作为普通端口使用。如果串口控制台被关闭便可以使用树莓派上的UART功能。如果不使用I2C，SPI和UART等复用接口，那么树莓派总共具有8+2+5+2 =17个普通IO。 wiringPi包括一套gpio控制命令，使用gpio命令可以控制树莓派GPIO管脚。用户可以利用gpio命令通过shell脚本控制或查询GPIO管脚。wiringPi是可以扩展的，可以利用wiringPi的内部模块扩展模拟量输入芯片，可以使用MCP23x17/MCP23x08（I2C 或者SPI）扩展GPIO接口。另外可通过树莓派上的串口和Atmega（例如arduino等）扩展更多的GPIO功能。另外，用户可以自己编写扩展模块并把自定义的扩展模块集成到wiringPi中。WiringPi支持模拟量的读取和设置功能，不过在树莓派上并没有模拟量设备。但是使用WiringPi中的软件模块却可以轻松地应用AD或DA芯片。 参考文献1.https://blog.csdn.net/xukai871105/article/details/17737005, by xukai871105.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>树莓派</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debian下编译QGroundControl源码]]></title>
    <url>%2F2018%2F11%2F01%2FDebian%E4%B8%8B%E7%BC%96%E8%AF%91QGroundControl%E6%BA%90%E7%A0%81%2F</url>
    <content type="text"><![CDATA[MAVLink（Micro Air Vehicle Link，微型空中飞行器链路通讯协议）是无人飞行器与地面站之间通讯，以及无人飞行器之间通讯最常用的协议。它已经在PX4、APM、PIXHAWK和Parrot AR.Drone飞控平台上进行了大量测试。 QGroundControl则是一种操纵基于MAVLink通信协议的无人机的跨平台地面站开源软件。下面记录在Debian Linux下从源码编译QGroundControl的过程。 下载源码1234# 下载QGroundControl源码git clone --recursive https://github.com/mavlink/qgroundcontrol.git# 更新子模块git submodule update 安装编译环境 下载Qt社区版在线安装器，安装5.11.0版本的Qt，安装路径可在/opt下。 安装必要的包 1sudo apt-get install speech-dispatcher libudev-dev libsdl2-dev 解决编译时libQt5PositioningQuick.so.5不存在的bug 123sudo apt-get install libqt5positioningquick5sudo find /usr/ -name libQt5PositioningQuick.so.5cp /usr/lib/x86_64-linux-gnu/libQt5PositioningQuick.so.5 /opt/Qt/5.10.0/gcc_64/lib/libQt5PositioningQuick.so.5 将当前用户添加到dialout组，获取串口访问权限 12# 运行QGroundControl需要当前用户拥有串口访问权限sudo usermod -a -G dialout $USER 编译运行打开Qt Creater，打开qgroundcontrol.pro工程，构建后运行，即可打开QGroundControl地面站软件。 参考链接 https://blog.csdn.net/hebbely/article/details/79022799, by hebbely https://dev.qgroundcontrol.com/en/getting_started/, by Dronecode]]></content>
      <tags>
        <tag>linux</tag>
        <tag>无人机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令用法总结]]></title>
    <url>%2F2018%2F11%2F01%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[记录一些常用的linux命令用法，以备查询。 查找文件 123# find基本语法：find [PATH] [option] [action]find /usr/lib -name libQt5Xml.so 批量转换文件格式 1234567# 将png格式图像转换为jpg# -1 – 告诉 ls 每行列出一个图像名称的选项标识# -n – 指定最多参数个数，例子中为 1# -c – 指示 bash 运行给定的命令# $&#123;0%.png&#125;.jpg – 设置新转换的图像文件的名字，% 符号用来删除源文件的扩展名ls -1 *.png | xargs -n 1 bash -c &apos;convert &quot;$0&quot; &quot;$&#123;0%.png&#125;.jpg&quot;&apos; 修改用户 12# 将用户$USER添加到dialout用户组，以获取串口访问权限sudo usermod -a -G dialout $USER 校验文件 下载的文件最好校验完整性，防止被人篡改。以sha256sum为例：1234#以下命令将生成树莓派映像的sha256哈希码，从树莓派官网复制该映像sha256哈希码，以便校验。当然通常应该会提供映像的哈希码校验文件。sha256sum 2018-10-09-raspbian-stretch.zip &gt;2018-10-09-raspbian-stretch.zip.sha256sum#使用下面校验文件的完整性，如果成功则映像与官方一致，未被篡改。注意被校验文件与校验文件应放在同一个目录。sha256sum -c 2018-10-09-raspbian-stretch.zip.sha256sum]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用tensorflow_object_detection_api训练自定义模型]]></title>
    <url>%2F2018%2F10%2F20%2F%E4%BD%BF%E7%94%A8tensorflow-object-detection-api%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[近期研究目标对象检测和识别，发现谷歌开源的基于tensorflow的object detection api模型效果不错，于是git clone下来测试一下。下面记录我在debian linux上安装配置object detection api模型，构建自定义数据集，训练和测试object detection api模型的过程，以及整个过程中遇到的一下问题，需要注意的事项。 准备工作docker安装TensorFlow 程序在 GPU 上的运行速度通常要比在 CPU 上快得多，在系统满足NVIDIA 软件要求的前提下，推荐使用支持 GPU 的 TensorFlow。 官方推荐使用Docker简化TensorFlow的GPU支持配置，这样只需要linux主机安装好Nvidia GPU驱动即可。 安装docker安装docker的方法可参考链接1。 安装nvidia-docker 123456789# Add the package repositoriescurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -curl -s -L https://nvidia.github.io/nvidia-docker/debian9/nvidia-docker.list | \ sudo tee /etc/apt/sources.list.d/nvidia-docker.listsudo apt-get update# Install nvidia-docker2 and reload the Docker daemon configurationsudo apt-get install -y nvidia-docker2sudo service docker restart 下载最新支持GPU和Python3的tensorflow映像[2] 1docker pull tensorflow/tensorflow:latest-gpu-py3 测试tensorflow映像 12docker run --runtime=nvidia -it --rm tensorflow/tensorflow:latest-gpu-py3 \ python -c &quot;import tensorflow as tf; print(tf.contrib.eager.num_gpus())&quot; 下载TFModel库及其相关库1234# 基于tensorflow的模型和例子git clone https://github.com/tensorflow/models.git# raccoon数据集，可参考其中生成TFRecord格式数据的方法git clone https://github.com/datitran/raccoon_dataset.git 安装Python虚拟环境管理工具1234# 具体安装配置过程参见链接3sudo pip3 install virtualenvsudo pip3 install virtualenvwrappermkvirtualenv object-detection --python=/usr/bin/python3# 创建python3虚拟环境 数据标注以分类几何形状为例，收集相关图片后，需要对它们进行标注。推荐使用 LabelImg 进行标注，生成的文件是 PASCAL VOC 的 xml 格式。这个工具还可以加载标注文件，检查标注结果[3]。123456789git clone https://github.com/tzutalin/labelImg.gitworkon object-detection# 启动python3虚拟环境workon object-detection# 安装配置labelImgsudo apt-get install pyqt5-dev-toolssudo pip3 install -r requirements/requirements-linux-python3.txtmake qt5py3python3 labelImg.py 除了标注图片，还需创建一个 .pbtxt 文件用来说明标注的分类。例如：123456789101112item &#123; id: 1 name: &apos;circle&apos;&#125;item &#123; id: 2 name: &apos;square&apos;&#125;item &#123; id: 3 name: &apos;triangle&apos;&#125; 需要特别注意以下两点： name 不支持直接写中文，需要 UTF-8 编码 id 从 1 开始编号，不能从 0 开始编号。 数据准备标注好的数据是图片文件（.jpg）和标注文件（.xml），而 TensorFlow 不能直接用这些数据作为输入，还需要转成 TFRecord 格式。可采用两种方法生成TFRecord格式数据： tensorflow/models中方法 项目中使用create_pascal_tf_record.py, create_pet_tf_record.py生成TFrecord 格式数据 raccoon_dataset中方法 项目中使用xml_to_csv.py把xml合并成一个CSV文件，使用split labels.ipynb 随机划分训练集和测试集，以及使用generate_tfrecord.py 生成相对应的 TFRecord 训练集和测试集。123456789workon object-detection# 将生成geometry_labels.csvpython xml_to_csv.py# 打开split labels.ipynb生产训练集train_labels.csv和测试集test_labels.csvjupyter notebook# 创建训练用TFRecord文件:python generate_tfrecord.py --csv_input=data/train_labels.csv --output_path=training/geometry_train.record# 创建测试用TFRecord文件:python generate_tfrecord.py --csv_input=data/test_labels.csv --output_path=training/geometry_test.record 第二种方法比较直观，因此我采用第二种方法生产TFRecord数据。 安装配置安装TFModel依赖123456789101112workon object-detection# For CPUpip install tensorflow# For GPUpip install tensorflow-gpupip install --user Cythonpip install --user contextlib2pip install --user pillowpip install --user lxmlpip install --user jupyterpip install --user matplotlib 安装COCO API1234git clone https://github.com/cocodataset/cocoapi.gitcd cocoapi/PythonAPImakecp -r pycocotools &lt;path_to_tensorflow&gt;/models/research/ 编译Protobuf123456# From tensorflow/models/research/wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zipunzip protobuf.zip# From tensorflow/models/research/./bin/protoc object_detection/protos/*.proto --python_out=. 添加库到PYTHONPATH123# From tensorflow/models/research/# 每次调用TFModel的Object Detection API之前都要设置export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim 安装测试12# if all tests is ok, the installation is no problem.python object_detection/builders/model_builder_test.py 模型训练数据准备 将label_map文件、训练用TFRecord文件、测试用TFRecord文件复制到tensorflow/models/research/object_detection/data文件夹下。 12345# 推荐的数据目录结构+ data - geometry.pbtxt - geometry_test.record - geometry_train.record 下载COCO预训练模型用于迁移学习 123# From tensorflow/models/research/object-detectionwget http://download.tensorflow.org/models/object_detection/ssd_mobilenet_v1_coco_2018_01_28.tar.gztar -xvf ssd_mobilenet_v1_coco_2018_01_28.tar.gz 修改解压后模型文件夹中pipeline.config 解压ssd_mobilenet_v1_coco_2018_01_28模型后会看到一个 .config 文件，里面包含有模型的参数，训练的参数，评估的参数等。这里需要修改到的有， 模型参数中的 num_classes，改成你的类别数， 训练参数中的 fine_tune_checkpoint，采用迁移学习，这里路径的指向刚才下载的Pre-train模型，比如 ssd_mobilenet_v1_coco_11_06_2017/model.ckpt train_input_reader 下面的 input_path，改成你的训练数据，例如 data/train.record。label_map_path，改成你的 pbtxt 文件路径，例如 data/object.pbtxt eval_input_reader 下面的 input_path，也需要改成你的测试集，例如 data/test.record。同样，label_map_path，也改成你的 pbtxt 文件路径，例如 data/object.pbtxt1234567891011121314151617181920212223242526272829//pipeline.config修改示例model &#123; ssd &#123; num_classes: 3 ... &#125;&#125;train_config &#123; ... fine_tune_checkpoint: &quot;object_detection/ssd_mobilenet_v1_coco_2018_01_28/model.ckpt&quot; from_detection_checkpoint: true num_steps: 50000&#125;train_input_reader &#123; label_map_path: &quot;object_detection/data/geometry.pbtxt&quot; tf_record_input_reader &#123; input_path: &quot;object_detection/data/geometry_train.record&quot; &#125;&#125;eval_input_reader &#123; label_map_path: &quot;object_detection/data/geometry.pbtxt&quot; shuffle: false num_epochs: 1 num_readers: 1 tf_record_input_reader &#123; input_path: &quot;object_detection/data/geometry_test.record&quot; &#125; sample_1_of_n_examples: 1&#125; 训练数据在GPU上训练TFModel，与在CPU上训练TFModel相比，要快五倍左右，因此推荐在GPU上训练TFModel。 启动docker 12# 启动docker，并使用-v参数将目录/home/$USER挂载到容器上docker run --runtime=nvidia -v /home/$USER:/home/$USER -it tensorflow/tensorflow:latest-gpu-py3 bash 执行训练 1234# From tensorflow/models/research/export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim# 开始训练python object_detection/model_main.py --pipeline_config_path=object_detection/ssd_mobilenet_v1_coco_2018_01_28/pipeline.config --model_dir=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/ --num_train_steps=50000 --alsologtostderr 使用tensorboard查看训练进度 12# From tensorflow/models/research/tensorboard --logdir=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/ 在CPU上训练只需执行第二步和第三步。 导出模型12# From tensorflow/models/research/python object_detection/export_inference_graph.py --input_type=image_tensor --pipeline_config_path=object_detection/ssd_mobilenet_v1_coco_2018_01_28/pipeline.config --trained_checkpoint_prefix=object_detection/ssd_mobilenet_v1_coco_2018_01_28/saved_model/model.ckpt-50000 --output_directory=../../../../ssd_mobilenet_v1_coco_2018_01_28 运行完命令后模型就导出到 ssd_mobilenet_v1_coco_2018_01_28 文件夹中，其中的frozen_inference_graph.pb即是所需模型。 需要注意的是，参数中的 –trained_checkpoint_prefix 是需要指定到单个模型的，例如 model.ckpt-50000，这个50000就是训练了 50000 步后自动保存模型。 参考文献 https://huangwang.github.io/2018/10/18/Debian-Linux下安装Docker的方法/， by jack huang https://www.tensorflow.org/install/docker?hl=zh-cn , by tensorflow. https://huangwang.github.io/2018/10/09/Virtualenv简易教程/ , by jack huang https://laddiexu.github.io/tech/2017/11/04/TF-ODYourData.html , by 菁菁者莪 https://blog.csdn.net/xunan003/article/details/78720189?utm_source=blogxgwz2, by xunan003]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker使用帮助]]></title>
    <url>%2F2018%2F10%2F19%2FDocker%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9%2F</url>
    <content type="text"><![CDATA[Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。 Docker与传统虚拟机如virtualbox、vmware相比，占用资源少，更加轻便，启动快，更适用于解决软件环境配置难题。 基本概念 镜像 Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 容器 镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库 镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。 一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。 通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。 使用方法操作镜像获取镜像Docker Hub 上有大量的高质量的镜像可以用，使用docker pull命令拉取镜像。1234// 拉取镜像$ docker pull ubuntu:16.04// 以该镜像启动容器$ docker run -it --rm ubuntu:16.04 bash docker run 就是运行容器的命令,其参数含义如下： -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。 –rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。 ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。 bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。 列出镜像1docker image ls 删除镜像删除本地镜像格式如下：1docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...] 以删除hello-world镜像为例：1docker image rm hello-world 操作容器启动容器1234// 新建并启动容器docker run ubuntu:14.04 /bin/echo &apos;Hello world&apos;// 启动已终止容器docker container start 后台运行1234567// 后台运行容器$ docker run -d ubuntu:17.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;// 通过 docker container ls 命令来查看容器信息$ docker container ls// 通过 docker container logs 命令获取容器的输出信息$ docker container logs [container ID or NAMES] 终止容器1docker container stop 进入容器在使用 -d 参数时，容器启动后会进入后台。 某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令。1234$ docker run -dit ubuntu$ docker container ls$ docker exec -i 69d1 bash$ docker exec -it 69d1 bash 如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。 删除容器12345// 删除一个处于终止状态的容器$ docker container rm trusting_newton// 清理所有处于终止状态的容器docker container prune 参考文献 https://yeasy.gitbooks.io/docker_practice/introduction/what.html http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html ，by 阮一峰 https://zh.wikipedia.org/wiki/Docker ,by wikipedia.]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debian_Linux下安装Docker的方法]]></title>
    <url>%2F2018%2F10%2F18%2FDebian-Linux%E4%B8%8B%E5%AE%89%E8%A3%85Docker%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。 Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心名字空间（name space），来创建独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机造成的额外负担。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网上、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、存储器、block I/O与网上。 下面即记录在Debian Linux下按照Docker社区版的方法。 前期准备添加Docker的pgp key。1curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - 配置Docker的Apt仓库。1echo &apos;deb https://download.docker.com/linux/debian stretch stable&apos; | sudo tee /etc/apt/sources.list.d/docker.list 更新Apt仓库1sudo apt-get update 安装Docker123456// 清除之前安装的Docker版本apt-get remove docker docker-engine docker.io// 在安装最新的Docker社区版apt-get install docker-ce// 测试dockerdocker run hello-world 以非root用户管理docker12sudo groupadd dockersudo usermod -aG docker $USER 参考文献 https://zh.wikipedia.org/wiki/Docker ,by wikipedia.]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tensorflow学习笔记]]></title>
    <url>%2F2018%2F10%2F14%2Ftensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。 tensorflow入门tensorflow实现机器学习的基本步骤如下： 定义模型，建立数据流图 定义loss，并指定优化器 传入数据并进行训练 使用测试集进行评测 通用代码框架1234567891011121314151617181920212223242526272829303132333435363738394041424344import tensorflow as tf# 初始化变量和模型参数，定义训练闭环中的运算def inference(X): # 计算推断模型在数据X上的输出，并将结果返回def loss(X,Y): # 依据训练数据X及其期望输出Y计算损失def inputs(): # 读取或生成训练数据X及其期望输出Ydef train(total_loss): # 依据计算的总损失训练或调整模型参数def evaluate(sess,X,Y): # 对训练得到的模型进行评估# 在一个会话对象中启动数据流图，搭建流程with tf.Session() as sess: tf.initialize_all_variables().run() X,Y=inputs() total_loss=loss(X,Y) train_op=train(total_loss) coord=tf.train.Coordinator() threads=tf.train.start_queue_runners(sess=sess,coord=coord) # 实际的训练迭代次数 training_steps=1000 for step in range(training_steps): sess.run([train_op]) # 出于调试和学习的目的，查看损失在训练过程中递减的情况 if step % 10 =0: print &quot;loss: &quot;,sess,run([total_loss]) evalute(sess,X,Y) coord.request_stop() coord.join(threads) sess.close() 保存训练检查点借助tf.train.Saver类可创建检查点文件，将数据流图中变量保存至其中。修改后框架如下：1234567891011121314151617181920# 模型定义代码# 创建一个Saver对象saver=tf.train.Saver()# 在会话对象中启动数据流图，搭建流程with tf.Session() as sess: # 模型设置 # 实际的训练闭环 for step in range(training_steps): sess.run([train_op]) if step % 1000 ==0 # 将创建遵循命名模板为my-model-&#123;step&#125;的检查点文件，默认保存最近的5个文件 saver.save(sess,&apos;my-model&apos;,global_step=step) # 模型评估 saver.save(sess,&apos;my-model&apos;,global_step=training_steps) sess.close() 如果希望从检查点恢复，则使用tf.train.get_checkpoint_state方法验证检查点文件的存在，并使用tf.train.Saver.restore方法恢复变量值。123456789101112131415with tf.Session() as sess: # 模型设置 initial_step=0 # 验证之前是否已经保存了检查点文件 ckpt=tf.train.get_checkpoint_state(os.path.dirname(__file__)) if ckpt and ckpt.model_checkpoint_path: # 从检查点恢复模型参数 saver.restore(sess,ckpt.model_checkpoint_path) initial_step=int(ckpt.model_checkpoint_path.rsplite(&apos;_&apos;,1)[1]) # 实际的训练闭环 for step in range(initial_step, training_steps): ... 参考文献 https://www.tensorflow.org/?hl=zh-cn . 面向机器智能的TensorFlow实践, by Sam Abrahams, Danijar Hafner,etc.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python常用库简介]]></title>
    <url>%2F2018%2F10%2F14%2FPython%E5%B8%B8%E7%94%A8%E5%BA%93%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Python的高效开发建立在大量常用库基础上，因此掌握常用的Python库十分必要。下面简单介绍Python的各类常用库。 常用标准库 os： 访问操作系统功能模块 sys： 访问一些环境变量和与 Python 解释器交互 datetime： 日期时间处理 collections： 高级数据结构，有序字典，队列等等 uuid： 生成 UUID 模块 random： 随机数生成模块 re： 正则表达式模块 json： JSON 处理模块 pdb： 单步调试模块 科学计算 scipy：基于Python的matlab实现，旨在实现matlab的所有功能。包含Numpy、Ipython、Pandas、Matplotlib、Sympy等常用库 numpy： 基于Python的科学计算第三方库，提供了矩阵，线性代数，傅立叶变换等等的解决方案 pandas： 支持表格等多维数据 matplotlib： 用Python实现的类matlab的第三方库，用以绘制一些高质量的数学二维图形 命令交互 ipython： 交互命令行，适合科学计算 jupyter： ipython notebook 的延伸，可以直接放在github上 argparse：(Python 标准库)用于命令项选项与参数解析的模块 爬虫相关 requests:人性化的HTTP请求库 环境管理 virtualenv：创建独立 Python 环境的工具 virtualenvwrapper：virtualenv 的一组扩展 包管理 pip：Python 包和依赖关系管理工具 conda：跨平台，Python 二进制包管理工具 并发和并行 threading：(Python 标准库)更高层的线程接口 multiprocessing：(Python 标准库) 基于进程的“线程”接口 日志 logging：(Python 标准库) 为 Python 提供日志功能。 兼容性 six：Python 2 和 3 的兼容性工具 计算机视觉 opencv 机器学习 tensorflow 参考文献 https://www.jianshu.com/p/886cbabbfe9e ,by brandonxiang]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Virtualenv简易教程]]></title>
    <url>%2F2018%2F10%2F09%2FVirtualenv%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[virtualenv是一个创建隔离python环境的工具，主要用于解决包冲突问题。 安装方法1sudo pip3 install virtualenv 使用方法创建项目的虚拟环境12$ cd my_project_folder$ virtualenv venv #venv是虚拟环境名称 执行上述命令后，将生成一个与虚拟环境同名的文件夹，包含 Python 可执行文件和 pip 库的拷贝，可用于安装其他包。 但是默认情况下，虚拟环境中不会包含也无法使用系统环境的global site-packages。比如系统环境里安装了 requests 模块，在虚拟环境里import requests会提示ImportError。如果想使用系统环境的第三方软件包，可以在创建虚拟环境时使用参数–system-site-packages。如下所示：1virtualenv --system-site-packages venv 此外可以指定虚拟环境所使用的 Python 版本，但前提是系统中已经安装了该版本：1virtualenv -p /usr/bin/python2.7 venv 使用虚拟环境启动虚拟环境：123cd venvsource bin/activate python -V 退出虚拟环境：1deactivate virtualenvwrappervirtualenvwrapper是virtualenv 的扩展工具，提供了一系列命令行命令，可以方便地创建、删除、复制、切换不同的虚拟环境。同时，使用该扩展后，所有虚拟环境都会被放置在同一个目录下。 安装方法1pip3 install virtualenvwrapper 环境配置在$home/.bashrc文件中添加如下几行代码：12345# bash -f file检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 trueif [ -f /usr/local/bin/virtualenvwrapper.sh ]; then export WORKON_HOME=$HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.shfi 使用方法mkvirtualenv 也可以使用 virtualenv 的参数，比如 –python 来指定 Python 版本。123456789101112131415mkvirtualenv venv # 创建虚拟环境，虚拟环境目录都在 WORKON_HOME 里lsvirtualenv -b # 列出虚拟环境workon [虚拟环境名称] # 切换虚拟环境lssitepackages # 查看环境里安装了哪些包cdvirtualenv [子目录名] # 进入当前环境的目录cpvirtualenv [source] [dest] # 复制虚拟环境deactivate # 退出虚拟环境rmvirtualenv [虚拟环境名称] # 删除虚拟环境 conda vs. pip vs. virtualenvConda是一个开源包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 它适用于Linux，OS X和Windows，是为Python程序创建的，但可以打包和分发任何软件。 Pip是一个以Python计算机程序语言写成的软件包管理系统，用于安装和管理软件包。 它们直接的区别如下： pip使用方法1234# 导出python安装包环境pip freeze &gt; requirements.txt# 导入requirements文件pip install -r requirements.txt 参考文献 http://codingpy.com/article/virtualenv-must-have-tool-for-python-development/. https://conda.io/docs/commands.html#conda-vs-pip-vs-virtualenv-commands.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blender简易教程]]></title>
    <url>%2F2018%2F09%2F19%2FBlender%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近需要用Blender建3D模型，试用了半天，将经验简单总结一下。 3D建模流程 建立3D模型：通常在Blender的3D视图窗口对物体进行建模。 拆分制作纹理：设置缝合边，再展开。打开U/V图像编辑器窗口即可看到拆分效果。导出图片后制作纹理。 使用材质贴图：设置材质着色，添加纹理。 Blender快捷键Blender快捷键很多，熟练使用可加速3D模型的建立。 3D视图窗口字母键 T：打开左侧工具栏 Tab：编辑模式和物体模式切换 N：打开物体属性 A：全选、取消选择 B：框选，进行多选 C：刷选，加Shift取消选择，按Esc退出选择 X：删除 Shift+A：增加物件，新建的物件会出现在准星的位置 Ctrl+Alt+Q：切换四视图 Ctrl+Space：调出三维坐标系操纵物体 H：隐藏对象（Hide） Alt+H：显示对象 Z：线框模式与实体模式之间切换 Ctrl+U：用户的内置设置 Ctrl+Tab：进行点、线、面的编辑模式 Shift+空格键：放大视图 F12：计算结果（算图模式），如果是黑色的，需要把摄像机和光源放在同一个图层中，或者选择摄像机和光源的图层。 G：移动选中对象 R: 旋转 S: 缩放 Alt+S：法向缩放 E：挤出选中对象 Ctrl+R: 环切并滑动 数字键数字键主要用于视角切换 1：前视图 3：侧视图 7：俯视图 鼠标键 右键：选择物体 shift+中键：平移 滚轴/（Ctrl+中键拖拽）：缩放 参考文献 JinunMeng. Blender常用快捷键. https://blog.csdn.net/u010670734/article/details/64538633.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下将cmd命令添加到右键菜单]]></title>
    <url>%2F2018%2F09%2F11%2FWindows%E4%B8%8B%E5%B0%86cmd%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[经常需要使用cmd命令，如果打开cmd窗口后在cd到目标路径，则非常麻烦。可使用如下方法将cmd添加到右键菜单，这样一打开cmd窗口就到了目标路径。设置方法如下： 打开注册表 添加注册项123a) 找到[HKEY_CLASSESS_ROOT\Folder\shell]子键，在其下新建“cmdPrompt”子项，在窗口右侧名称列上点击右键修改，将数值数据改为“CMD快速通道”。b) 再在这个项下，新建名为“command”子项，同样修改数值数据修改为c:\windows\system32\cmd.exe /k cd &quot;%1&quot; 设置完成后即可在目标路径文件夹上右键单击，选择“CMD快速通道”命令，打开cmd窗口的同时，已跳转到目标路径下。]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows平台Python安装与配置教程]]></title>
    <url>%2F2018%2F09%2F07%2FWindows%E5%B9%B3%E5%8F%B0Python%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[下面记录在Windows平台安装配置Python的过程。 去Python官网下载最新的Python3，当前最新版本为3.7。 双击Python3.7的安装包进行安装，设置安装路径为C:\Python\Python37，同时将Python路径加入系统Path变量中。 使用如下命令安装ipython。加参数–trusted-host，否则会报错误：SSLError(SSLCertVerificationError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed。加参数-i，制定国内pip源，显著提高下载速度。1pip install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows与Linux双系统Grub引导修复]]></title>
    <url>%2F2018%2F09%2F06%2FWindows%E4%B8%8ELinux%E5%8F%8C%E7%B3%BB%E7%BB%9FGrub%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D%2F</url>
    <content type="text"><![CDATA[因为个人爱好，我再笔记本中安装了Windows和Linux的双系统。最近因为Windows系统故障原因，重装Windows系统，导致无法引导Linux启动。 故障原因是之前安装双系统时，先安装Windows，再安装Linux，这样将由Grub2来引导Linux和Windows的启动。而重装Windows的过程中，将覆盖Grub2引导程序，导致无法Linux的启动。 故障解决方法是重新在硬盘中写入Grub2引导程序。具体步骤如下： 使用Linux安装盘，使用Live CD方式进行Linux系统。 使用fdisk -l命令查看硬盘信息。 使用grub-install –root-directory=/media/boot /dev/sda将grub2引导程序写入硬盘。/media/boot为引导分区所在位置，grub-install写入grub2引导程序时需要使用引导分区所在linux映像。 使用update-grub2更新引导配置。]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中文文献免费下载方法]]></title>
    <url>%2F2018%2F08%2F26%2F%E4%B8%AD%E6%96%87%E6%96%87%E7%8C%AE%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[下面记录经过验证可用的中文文献下载方法: idata中国知网 1234idata中国知网网址：https://www.cn-ki.net/进入系统，注册账号，登陆就可以每天免费下载五篇知网论文。额度用完之后，第二天可以继续下载。每天五篇的额度基本能满足需要，这样还不够的话，可以多注册几个账号。 全国图书馆参考咨询联盟 123全国图书馆参考咨询联盟网址：http://www.ucdrs.superlib.net/很全，可以查图书，查期刊，报纸等。还有硕士，博士的毕业论文。不仅有中文，还有外文。网站无需注册，通过文献传递服务，即通过邮箱接收全文。最快一两分钟，最慢三四个小时即可接收到全文。 上海研发公共服务平台 123上海研发公共服务平台网址：http://www.sgst.cn/。注册后可直接下载，论文、文献数量直接匹配知网和万方数据。下载速度较快，但有数量限制，可注册多个用户名。 库问搜索 12库问搜索网址：http://www.koovin.com/。库问搜索提供千万级文献免费下载。]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++跨平台移植开发思考]]></title>
    <url>%2F2018%2F07%2F16%2FCPP%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%A7%BB%E6%A4%8D%E5%BC%80%E5%8F%91%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[最近需要将一份C++代码通过Emscripten编译成asm.js，结果失败，因为这份C++代码使用MFC GUI库，导致Emscripten编译失败。这引起了我对C++跨平台移植的思考。 C++代码理论上能实现源代码级别的跨平台移植，即同一份代码可以不加修改的在不同的平台上编译运行且表现一致。这要求编写的C++代码符合跨平台移植的规范，如链接[1]所指出的那样，它给出了很多实现C++代码跨平台移植的编码细节，在编写跨平台的底层库方面十分有用。但在编写跨平台的C++应用方面，应使用经过长期实践证明能用的跨平台库来帮助编码，建立在巨人的肩膀上，使跨平台C++代码编写工作变得简单容易。下面给出一些常用的跨平台C++库供参考： 语言及基础库 标准 C++：标准 c++ 是98年制定的，现在主流的 c++ 编译器都能够比较好的支持了。这里建议使用VC7.1和GCC4.0及以上版本。在Linux中，glibc是标准C的实现，libstdc++则是标准C++的实现。在Windows中，VS2015之前MSVCRT.DLL是标准C/C++的实现，之后UCRTBASE.DLLz则是标准C/C++的实现。 boost：boost 则是 C++ 标准委员会的一群人弄起来的一个 C++ 库集合，其中不少库以经进入 C++ TR1，可以说是准标准。使用这里的库我们有着充分的理由。象字符串的操作可以用 boost 的 String algorithms 库，格式化操作可以用 boost::format，正则式可用 boost::regex 等等。 网络 ACE（Adaptive Communication Environment）：ACE是一个以C++的Template技术所做成的开放源代码的可跨平台的网络应用程序的程式库套件。ACE自适配通信环境（ADAPTIVE Communication Environment）是可以自由使用、开放源码的面向对象（OO）框架（Framework），在其中实现了许多用于并发通信软件的核心模式。ACE提供了一组丰富的可复用C++ Wrapper Facade（包装外观）和框架组件，可跨越多种平台完成通用的通信软件任务，其中包括：事件多路分离和事件处理器分派、信号处理、服务初始化、进程间通信、共享内存管理、消息路由、分布式服务动态（重）配置、并发执行和同步，等等。 Boost.Asio：用于网络和底层I/O编程的跨平台的C++库 数据库 OTL (Oracle, Odbc and DB2-CLI Template Library)：不但支持跨平台，还跨数据库。OTL支持以下面的数据库 : OTL Oracle ,SQL Server, Access, MySQL。还有其它的库如DTL，这个库不但支持ODBC，它还支持数据库的原生接口，可以有更佳的性能。 GUI QT：QT是双认证的，当你的程序免费时它就免费，你的程序打算卖钱时，它也要，而且要价很高。所以，如果有版权，成本上的考虑的话，则可以考虑wxWidgets。 wxWidgets：wxWidgets（/wɪksˈwɪdʒɪts/，原名wxWindows）是一个开放源代码且跨平台的对象工具集（widget toolkit），其库可用来创建基本的图形用户界面（GUI）。wxWidgets由Julian Smart于1992年首先开发。 科学计算 GSL：GNU科学库。 游戏开发 Cocos2d-x：一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。 视频 FFmpeg：一个完整的，跨平台的解决方案，用于记录，转换视频和音频流 参考文献 http://hongbomin.com/2017/03/08/cpp-cross-platform-guide/. by 洪柏敏. http://developer.51cto.com/art/201002/181960.htm. by 博客园. https://zh.wikipedia.org/wiki/ACE自适配通信环境. by wikipedia. https://blog.csdn.net/weiwangchao_/article/details/51130863. by 工程师WWW. https://zhuanlan.zhihu.com/p/25443704, by zhihu.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Emscripten教程]]></title>
    <url>%2F2018%2F07%2F15%2FEmscripten%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Emscripten是一种基于LLVM的编译器，理论上能够将任何能够生成LLVM位码的代码编译成javascript的严格子集asm.js，实际上主要用于将C/C++代码编译成asm.js。本文主要介绍Emscripten的安装过程。 下载和安装从源码编译安装十分麻烦，推荐安装核心的Emscripten SDK。以Windows为例，先使用如下命令下载emsdk。12345# Get the emsdk repogit clone https://github.com/juj/emsdk.git# Enter that directorycd emsdk 再使用如下命令安装配置Emscripten。1234567891011# Fetch the latest registry of available tools..\emsdk.bat update# Download and install the latest SDK tools. Need install Python first. .\emsdk.bat install latest# Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes ~/.emscripten file).\emsdk.bat activate latest# Activate PATH and other environment variables in the current terminal.\emsdk_env.bat 验证使用如下命令验证Emscripten是否安装配置正确。12345678# Enter that directorycd emsdk# Activate PATH and other environment variables in the current terminal.\emsdk_env.bat# Verifying Emscriptenemcc.bat -v 运行如果验证通过，即可使用Emscripten编译C/C++代码到asm.js。 创建名为helloWorld.cpp的文件，其内容如下：123456#include &lt;stdio.h&gt;int main() &#123; printf(&quot;hello, world!\n&quot;); return 0;&#125; 使用如下命令编译：1emcc.bat helloWorld.cpp 编译后将生成a.out.js和a.out.wasm两个文件。后者是包含编译后代码的WebAssembly文件，前者是用于加载和执行后者的Javascipt文件。使用如下命令测试编译后生成的代码，将输出“hello,world!”。1node a.out.js 参考链接 http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html. by kripken.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器中运行3D游戏的思考]]></title>
    <url>%2F2018%2F07%2F10%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C3D%E6%B8%B8%E6%88%8F%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[Web技术突飞猛进，几乎无所不能，无所不在。然而在3D游戏领域，web技术乏善可陈，性能瓶颈问题制约其发展。但是开发者们没有放弃这个梦想，不断努力，孜孜不倦地改进和增强浏览器中运行3D游戏性能的方法和技术，目前已能看到一丝曙光。 对C/S架构的3D游戏而言，渲染和计算通常都在客户端，服务器端负责用户状态的管理和分发。同样对B/S架构的运行在浏览器中的3D游戏，所有的渲染和计算也应该在浏览器端。如果渲染和计算放在服务器端，将导致可怕的延迟，并严重损害3D游戏的可伸缩性。 当前很多3D游戏使用C/C++语言编写，如果能够将C/C++语言编译成JavaScript语言，可大大促进Web 3D游戏的开发。而编译器项目Emscripten正是一个这样的工具。它能将C/C++代码编译成一种叫做asm.js的Javascript变体。需要指出的是，Emscripten的输入，即C/C++代码最好是开放源代码的，因为Emscripten不支持闭源代码的编译。例如Emscripten不支持mfc程序的转换，因为mfc是闭源的[4]。 asm.js是一个JavaScript的严格子集，它只提供32位带符号整数和64位带符号浮点数两种数据类型，其他Javascript类型如字符串、布尔值等以数值形式存在，保存在内存中，通过TypedArray调用。另外asm.js没有垃圾回收机制，所有内存操作都由程序员自己控制。asm.js是优化后的JavaScript，它在浏览器中的运行速度大约是原生代码的一倍左右[1]。 asm.js虽然比原生javascript运行速度快了一倍左右，但是相比C/C++代码，运行速度还是有差距。幸运的是出现了名为WebAssembly的技术。WebAssembly或称wasm是一个实验性的低级编程语言，应用于浏览器内的客户端[5]。WebAssembly是便携式的抽象语法树，被设计来提供比JavaScript更快速的编译及运行。WebAssembly将让开发者能运用自己熟悉的编程语言（最初以C/C++作为实现目标）编译，再藉虚拟机引擎在浏览器内运行。WebAssembly的开发团队分别来自Mozilla、Google、Microsoft、Apple，代表着四大网络浏览器Firefox、Chrome、Microsoft Edge、Safari。2017年11月，所有以上四个浏览器都开始实验性的支持WebAssembly。目前，最新版本的Emscripten已支持将C/C++代码编译成wasm。 参考文献 http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html. by 阮一峰. https://www.cnblogs.com/slly/p/6639173.html. by 李某龙. http://kripken.github.io/emscripten-site/. by emscripten. https://github.com/kripken/emscripten/issues/941. by emscripten. https://zh.wikipedia.org/wiki/WebAssembly. by wikipedia.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>3D游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cookie,Session和Token会话知识整理]]></title>
    <url>%2F2018%2F07%2F08%2FCookie-Session%E5%92%8CToken%E4%BC%9A%E8%AF%9D%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[HTTP是一种无状态的协议，然而当服务器端需要判断用户能否访问某些资源，记录用户的购物车内容等场景时，就需要一种机制维护会话状态，这时候Cookie、Session和Token就派上了用场。 CookieCookie技术最早用于解决HTTP的会话问题， 它是 http 协议的一部分，它的处理分为如下几步： 服务器向客户端发送 cookie。 通常使用 HTTP 协议规定的 set-cookie 头操作。 规范规定 cookie 的格式为 name = value 格式，且必须包含这部分。 浏览器将 cookie 保存。 每次请求浏览器都会将 cookie 发向服务器。 可选的Cookie参数其他可选的 cookie 参数会影响将 cookie 发送给服务器端的过程，主要有以下几种： path：表示 cookie 影响到的路径，匹配该路径才发送这个 cookie。 expires 和 maxAge：告诉浏览器这个 cookie 什么时候过期，expires 是 UTC 格式时间，maxAge 是 cookie 多久后过期的相对时间。当不设置这两个选项时，会产生 session cookie，session cookie 是 transient 的，当用户关闭浏览器时，就被清除。一般用来保存 session 的 session_id。 secure：当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。 httpOnly：浏览器不允许脚本操作 document.cookie 去更改 cookie。一般情况下都应该设置这个为 true，这样可以避免被 xss 攻击拿到 cookie。 常用场景当给Cookie设置expires和maxAge后，在未到期前，浏览器端的Cookie不会因为浏览器的关闭而消失。该特性常用于自动登录，记录用户浏览信息。例如很多购物网站常用该特性记录用户的喜好和购买的物品。 Cookie安全隐患Cookie提供了一种手段使得HTTP请求可以附加当前状态， 大多数网站就是靠Cookie来标识用户的登录状态的，例如： 用户提交用户名和密码的表单，这通常是一个POST HTTP请求。 服务器验证用户名与密码，如果合法则返回200（OK）并设置Set-Cookie为authed=true。 浏览器存储该Cookie。 浏览器发送请求时，设置Cookie字段为authed=true。 服务器收到第二次请求，从Cookie字段得知该用户已经登录。 按照已登录用户的权限来处理此次请求。 上述认证流程存在安全隐患，因为Cookie是可以被篡改的。如果使用一些HTTP客户端软件，设置Cookie字段为authed=true并发送该HTTP请求，服务器就会被欺骗。 Cookie防篡改机制服务器为每个Cookie项生成签名，可有效地防止Cookie被篡改。因为用户篡改Cookie后无法生成对应的签名， 服务器便可得知用户对Cookie进行了篡改。一个简单的校验过程可能是这样的： 在服务器中配置一个不为人知的字符串（我们叫它Secret），比如：x$sfz32。 当服务器需要设置Cookie时（比如authed=false），不仅设置authed的值为false， 在值的后面进一步设置一个签名，最终设置的Cookie是authed=false|6hTiBl7lVpd1P。 签名6hTiBl7lVpd1P是这样生成的：Hash(‘x$sfz32’+’false’)。 要设置的值与Secret相加再取哈希。 用户收到HTTP响应并发现头字段Set-Cookie: authed=false|6hTiBl7lVpd1P。 用户在发送HTTP请求时，篡改了authed值，设置头字段Cookie: authed=true|???。 因为用户不知道Secret，无法生成签名，只能随便填一个。 服务器收到HTTP请求，发现Cookie: authed=true|???。服务器开始进行校验： Hash(‘true’+’x$sfz32’)，便会发现用户提供的签名不正确。 通过给Cookie添加签名，使得服务器得以知道Cookie被篡改。然而故事并未结束。 因为Cookie是明文传输的， 只要服务器设置过一次authed=true|xxxx我不就知道true的签名是xxxx了么， 以后就可以用这个签名来欺骗服务器了。因此Cookie中最好不要放敏感数据。 一般来讲Cookie中只会放一个Session Id，而Session存储在服务器端。 Session为了解决Cookie的安全隐患，Session机制应运而生。session机制是一种服务器端的机制，它存储在服务器端的，避免了在客户端Cookie中存储敏感数据。Session可以存储在HTTP服务器的内存中，也可以存在内存数据库（如redis）中， 对于重量级的应用甚至可以存储在数据库中。 客户端对服务端请求时,服务端会检查请求中是否包含一个session标识( 称为session id ). 如果没有,那么服务端就生成一个随机的session以及和它匹配的session id,并将session id返回给客户端. 如果有,那么服务器就在存储中根据session id 查找到对应的session. 基于Session的登录流程一个简单的使用Session机制的登录流程可能是这样的： 用户提交包含用户名和密码的表单，发送HTTP请求。 服务器验证用户发来的用户名密码。 如果正确则把当前用户名（通常是用户对象）存储到redis中，并生成它在redis中的ID。这个ID称为Session ID，通过Session ID可以从Redis中取出对应的用户对象， 敏感数据（比如authed=true）都存储在这个用户对象中。 设置Cookie为sessionId=xxxxxx|checksum并发送HTTP响应， 仍然为每一项Cookie都设置签名。 用户收到HTTP响应后，便看不到任何敏感数据了。在此后的请求中发送该Cookie给服务器。 服务器收到此后的HTTP请求后，发现Cookie中有SessionID，进行放篡改验证。 如果通过了验证，根据该ID从Redis中取出对应的用户对象， 查看该对象的状态并继续执行业务逻辑。 Session安全隐患Session ID作为Cookie存储在浏览器端，因此存在被劫持的风险，尤其是开发者没有正确的关闭会话。用户关闭会话时，应删除传递 Session ID 的 Cookie，同时撤销服务器端的Session内容。例如：123456789101112/* 普通用户登出 */router.post(&apos;/signout&apos;, function(req, res, next) &#123; if (_.isEmpty(req.body) === false) &#123; req.session.account = null; // 删除session res.json(&#123; message: &apos;登出成功！&apos; &#125;); &#125; else &#123; res.send(406, &#123; message: &apos;The params is not correct!&apos; &#125;); &#125;&#125;); TokenToken是用户的验证方式,最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。 基于Token的身份验证流程使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的： 客户端使用用户名跟密码请求登录 服务端收到请求，去验证用户名与密码 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里 客户端每次向服务端请求资源的时候需要带着服务端签发的 Token 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据 基于Token方法的优势 JWT 方法允许我们进行AJAX调用任何服务器或域。由于HTTP头是用来传输用户信息的。 没必要在服务器存储一个单独的session。JWT本身传达全部的信息。 服务器端减少到只是一个API和可以通过CDN服务的静态资源（HTML，CSS，JS)。 认证系统是手机兼容的，任何设备上可以生成令牌。 由于已经消除了cookie的需要，也不再需要保护跨站请求。 API密钥提供非此即彼的解决方案，然而JWT提供更颗粒度的控制，它可以用于任何调试目的的检查。 API密钥依赖于中央存储和服务。JWT可以自发行或者外部服务在允许的范围和期限发布它。 JWT结构Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。 一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。 Cookie、Session和Token对比cookie与session的区别 cookie数据存放在客户端上，session数据放在服务器上。 cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗。考虑到安全应当使用session。 session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到减轻服务器性能方面，应当使用COOKIE。 session与token的区别作为身份认证token安全性比session好，因为每个请求都有签名还能防止监听以及重放攻击。 Session 是一种HTTP存储机制，目的是为无状态的HTTP提供的持久机制。Session 认证只是简单的把User 信息存储到Session 里，因为SID 的不可预测性，暂且认为是安全的。这是一种认证手段。 但是如果有了某个User的SID,就相当于拥有该User的全部权利.SID不应该共享给其他网站或第三方。 Token, 如果指的是OAuth Token 或类似的机制的话，提供的是 认证 和 授权，认证是针对用户，授权是针对App。其目的是让某App有权利访问某用户的信息。这里的Token是唯一的。不可以转移到其它App上，也不可以转到其它用户上。 参考链接 http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html, by 极客学院. https://harttle.land/2015/08/10/cookie-session.html. by Harttle Land. https://python.freelycode.com/contribution/detail/84. by Python部落. https://www.jianshu.com/p/576dbf44b2ae, by Dearmadman]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[兼容前后端多种JS模块规范的代码]]></title>
    <url>%2F2018%2F07%2F02%2F%E5%85%BC%E5%AE%B9%E5%89%8D%E5%90%8E%E7%AB%AF%E5%A4%9A%E7%A7%8DJS%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%E7%9A%84%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[最近研究如何在前后端调用同一份js代码。该问题本质是如何兼容前后端各类JS模块规范。上网一搜，已经有很多详细的解决方案和JS模块规范介绍，在这里简单记录一下。 JS模块规范JS模块规范前端主要有AMD、CMD，后端主要有CommonJS。此外还有最新的ES2015模块规范。 AMDAMD（异步模块定义，Asynchronous Module Definition）格式总体的目标是为现在的开发者提供一个可用的模块化 JavaScript 的解决方案。它诞生于 Dojo 在使用 XHR+eval 时的实践经验，其支持者希望未来的解决方案都可以免受由于过去方案的缺陷所带来的麻烦。 AMD风格模块定义通常包括：一个用来进行模块定义的 define 方法以及一个用来处理依赖项加载的 require 方法。define 根据如下的方法签名来定义具名或匿名的模块：12345define( module_id /*可选*/, [dependencies] /*可选*/, definition function /*用来初始化模块或对象的函数*/); CMDCMD(Common Module Definition)表示通用模块定义，该规范是国内发展出来的，由阿里的玉伯提出。就像AMD有个requireJS，CMD有个浏览器的实现SeaJS，SeaJS和requireJS一样，都是javascript的前端模块化解决方案。CMD规范简单到只有一个API，即define函数：12345define(function(require, exports, module) &#123; // The module code goes here&#125;); CMD 与 AMD 挺相近，二者区别如下： 对于依赖的模块 CMD 是延迟执行，而 AMD 是提前执行（不过 RequireJS 从 2.0 开始，也改成可以延迟执行。 ） CMD 推崇依赖就近，AMD 推崇依赖前置。 AMD 的 api 默认是一个当多个用，CMD 严格的区分推崇职责单一，其每个 API 都简单纯粹。例如：AMD 里 require 分全局的和局部的。CMD 里面没有全局的 require，提供 seajs.use() 来实现模块系统的加载启动。 CommonJSCommonJS是一个志愿性质的工作组，它致力于设计、规划并标准化 JavaScript API。至今为止他们已经尝试着认可了模块标准以及程序包标准。CommonJS 的模块提案为在服务器端声明模块指定了一个简单的 API。不像 AMD，它试图覆盖更宽泛的方面比如 IO、文件系统、promise 模式等等。CommonJS风格模块在nodejs中得到广泛的应用。 CommonJS风格模块是一段可重用的 JavaScript，它导出一系列特定的对象给依赖它的代码调用——通常来说这样的模块外围没有函数包裹（所以你在这里的例子中不会看到 define）。例如：12345678910// package/lib 是我们须要的一个依赖项var lib = require(&apos;package/lib&apos;); // 我们的模块的一些行为function foo()&#123; lib.log(&apos;hello world!&apos;);&#125; // 把 foo 导出（暴露）给其它模块exports.foo = foo; ES2015模块规范2015 年 6 月， ES2015（即 ECMAScript 6、ES6） 正式发布。ES2015 是该语言的一个显著更新，也是自 2009 年 ES5 标准确定后的第一个重大更新。 ES2015的模块规范如下： 一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。 export 命令用于规定模块的对外接口。 import 命令用于输入其他模块提供的功能。 ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。 ES2015模块示例如下：123456789//circle.js//圆面积计算export function area(radius) &#123; return Math.PI * radius * radius;&#125;//main.jsimport &#123;area&#125; from &apos;./hangge&apos;;console.log(&apos;圆面积：&apos; + area(10)); 兼容多种模块规范需要指出的是下面兼容多种JS模块规范的代码并不支持最新的ES2015模块规范。 1234567891011121314151617181920;(function (name, definition) &#123; // 检测上下文环境是否为AMD或CMD var hasDefine = typeof define === &apos;function&apos;, // 检查上下文环境是否为Node hasExports = typeof module !== &apos;undefined&apos; &amp;&amp; module.exports; if (hasDefine) &#123; // AMD环境或CMD环境 define(definition); &#125; else if (hasExports) &#123; // 定义为普通Node模块 module.exports = definition(); &#125; else &#123; // 将模块的执行结果挂在window变量中，在浏览器中this指向window对象 this[name] = definition(); &#125;&#125;)(&apos;hello&apos;, function () &#123; var hello = function () &#123;&#125;; return hello;&#125;); 参考链接 https://i.jakeyu.top/2017/09/14/兼容前后端共用模块代码/. by Jake. https://segmentfault.com/a/1190000011633813. by CodeMan. http://justineo.github.io/singles/writing-modular-js/. by ADDY OSMANI. http://www.hangge.com/blog/cache/detail_1686.html. by hangge.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sequelize-cli使用经验总结]]></title>
    <url>%2F2018%2F06%2F22%2Fsequelize-cli%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能[2]. 下面主要介绍如何使用sequelize-cli工具快速构建nodejs的数据访问层。 基于express创建nodejs web应用基于express建立nodejs的web应用，在此基础上再使用sequlize建立数据访问层和数据库。1234mkdir myappcd myappexpressnpm install 基于sequelize创建数据访问层和数据库安装sequlize12npm install --save sequelizenpm install --save mysql2 安装sequelize-cli首先应安装sequelize-cli工具，可以选择全局安装，也可以选择本地安装。12npm install --save sequelize-clinpm install -g sequelize-cli 建立初始的ORM引导框架使用如下命令在Nodejs Web应用中建立初始的数据访问层。123mkdir dbcd db../node_modules/.bin/sequelize init 这将创建以下文件夹: config, 包含配置文件，它告诉CLI如何连接数据库 models,包含您的项目的所有模型 migrations, 包含所有迁移文件 seeders, 包含所有种子文件 修改配置文件以连接到数据库管理系统，并创建数据库在建立模型之前，应先修改config/config.json，以告诉 CLI 如何连接到数据库。config/config.json内容如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&#123; &quot;development&quot;: &#123; &quot;username&quot;: &quot;root&quot;, &quot;password&quot;: &quot;root&quot;, &quot;database&quot;: &quot;database_development&quot;, &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;dialect&quot;: &quot;mysql&quot;, &quot;pool&quot;:&#123; &quot;max&quot;: 5, &quot;min&quot;: 0, &quot;idle&quot;: 10000 &#125;, &quot;timezone&quot;: &quot;+08:00&quot;, &quot;define&quot;:&#123; &quot;charset&quot;: &quot;utf8&quot;, &quot;dialectOptions&quot;:&#123; &quot;collate&quot;: &quot;utf8_general_ci&quot; &#125; &#125; &#125;, &quot;test&quot;: &#123; &quot;username&quot;: &quot;root&quot;, &quot;password&quot;: &quot;root&quot;, &quot;database&quot;: &quot;database_test&quot;, &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;dialect&quot;: &quot;mysql&quot; &#125;, &quot;production&quot;: &#123; &quot;username&quot;: &quot;root&quot;, &quot;password&quot;: &quot;root&quot;, &quot;database&quot;: &quot;database_test&quot;, &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;dialect&quot;: &quot;mysql&quot;, &quot;pool&quot;:&#123; &quot;max&quot;: 5, &quot;min&quot;: 0, &quot;idle&quot;: 10000 &#125;, &quot;timezone&quot;: &quot;+08:00&quot;, &quot;define&quot;:&#123; &quot;charset&quot;: &quot;utf8&quot;, &quot;dialectOptions&quot;:&#123; &quot;collate&quot;: &quot;utf8_general_ci&quot; &#125; &#125; &#125;&#125; 上述配置修改了数据库的字符集，使之能支持中文。当然在创建数据库之前，应配置mysql数据库管理系，使其支持utf8字符集。可执行如下命令查看其支持的字符集，如果其不支持uft字符集，请按照参考链接[3]进行修改。1234567891011121314mysql&gt; show variables like &apos;%char%&apos;;+--------------------------+---------------------------------------------------------+| Variable_name | Value |+--------------------------+---------------------------------------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | C:\Program Files\MySQL\MySQL Server 5.5\share\charsets\ |+--------------------------+---------------------------------------------------------+8 rows in set (0.00 sec) 使用如下命令创建数据库：1../node_modules/.bin/sequelize db:create 创建模型我们将使用 model:generate 命令。 此命令需要两个选项： name, 模型的名称 attributes, 模型的属性列表 创建一个名叫 User 的模型：1../node_modules/.bin/sequelize model:generate --name User --attributes firstName:string,lastName:string,email:string 这将发生以下事情: 在 models 文件夹中创建了一个 user 模型文件 在 migrations 文件夹中创建了一个名字像 XXXXXXXXXXXXXX-create-user.js 的迁移文件 注意: _Sequelize 将只使用模型文件，它是表描述。另一边，迁移文件是该模型的更改，或更具体的是说 CLI 所使用的表。 处理迁移，如提交或日志，以进行数据库的某些更改。 再创建一个名为Role的模型，它跟User是一对多的关系：1../node_modules/.bin/sequelize model:generate --name Role --attributes roleName:string 定义关系Role和User是一对多的关系，因此需要修改它们的模型定义。修改migrations/20180622153726-create-role.js如下：1234567891011&apos;use strict&apos;;module.exports = (sequelize, DataTypes) =&gt; &#123; var Role = sequelize.define(&apos;Role&apos;, &#123; roleName: DataTypes.STRING &#125;, &#123;&#125;); Role.associate = function(models) &#123; // associations can be defined here Role.hasMany(models.User) &#125;; return Role;&#125;; 修改migrations/20180622153152-create-user.js如下：123456789101112131415161718&apos;use strict&apos;;module.exports = (sequelize, DataTypes) =&gt; &#123; var User = sequelize.define(&apos;User&apos;, &#123; firstName: DataTypes.STRING, lastName: DataTypes.STRING, email: DataTypes.STRING &#125;, &#123;&#125;); User.associate = function(models) &#123; // associations can be defined here User.belongsTo(models.Role, &#123; onDelete: &quot;NULL&quot;, foreignKey: &#123; allowNull: false &#125; &#125;) &#125;; return User;&#125;; 修改和运行迁移Role和User是一对多的关系，因此需要修改User迁移文件的定义。修改models/user.js如下：12345678910111213141516171819202122232425262728293031323334353637383940414243&apos;use strict&apos;;module.exports = &#123; up: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.createTable(&apos;Users&apos;, &#123; id: &#123; allowNull: false, autoIncrement: true, primaryKey: true, type: Sequelize.INTEGER &#125;, roleId: &#123; // name of the key we&apos;re adding type: Sequelize.INTEGER, allowNull: false, references: &#123; model: &apos;Roles&apos;, // name of Target model key: &apos;id&apos;, // key in Target model that we&apos;re referencing &#125;, onUpdate: &apos;CASCADE&apos;, onDelete: &apos;CASCADE&apos;, &#125;, firstName: &#123; type: Sequelize.STRING &#125;, lastName: &#123; type: Sequelize.STRING &#125;, email: &#123; type: Sequelize.STRING &#125;, createdAt: &#123; allowNull: false, type: Sequelize.DATE &#125;, updatedAt: &#123; allowNull: false, type: Sequelize.DATE &#125; &#125;); &#125;, down: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.dropTable(&apos;Users&apos;); &#125;&#125;; 注意：这里主要给User添加了外键字段，外键字段命名有规则：通常为小写的模型名加Id，即驼峰风格。例如这里加了roleId的外键字段。 直到目前为止，CLI没有将任何东西插入数据库。 刚刚为模型 User和Role创建了必需的模型和迁移文件。 现在要在数据库中实际创建该表，需要运行 db:migrate 命令。1../node_modules/.bin/sequelize db:migrate 此命令将执行这些步骤： 将在数据库中确保一个名为 SequelizeMeta 的表。 此表用于记录在当前数据库上运行的迁移 开始寻找尚未运行的任何迁移文件。 这可以通过检查 SequelizeMeta 表。 在这个例子中，它将运行创建的 XXXXXXXXXXXXXX-create-role.js和XXXXXXXXXXXXXX-create-user.js 迁移。 创建一个名为 Roles 的表，其中包含其迁移文件中指定的所有列。 创建一个名为 Users 的表，其中包含其迁移文件中指定的所有列。 创建种子，生成测试数据假设我们希望在默认情况下将一些数据插入到几个表中。 例如创建几个用户和角色：12../node_modules/.bin/sequelize seed:generate --name demo-role../node_modules/.bin/sequelize seed:generate --name demo-user 这个命令将会在 seeders 文件夹中创建两个种子文件。文件名看起来像是 XXXXXXXXXXXXXX-demo-role.js和XXXXXXXXXXXXXX-demo-user.js，它遵循相同的 up/down 语义，如迁移文件。 现在我们应该编辑这两个文件，将演示角色插入Role表,将演示用户插入User表。修改XXXXXXXXXXXXXX-demo-role.js如下：123456789101112131415161718192021&apos;use strict&apos;;module.exports = &#123; up: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.bulkInsert(&apos;Roles&apos;, [&#123; roleName: &apos;管理员&apos;, createdAt:new Date(), updatedAt:new Date() &#125;,&#123; roleName: &apos;普通用户&apos;, createdAt:new Date(), updatedAt:new Date() &#125;], &#123;&#125;); &#125;, down: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.bulkDelete(&apos;Roles&apos;, null, &#123;&#125;); &#125;&#125;; 修改XXXXXXXXXXXXXX-demo-user.js如下：1234567891011121314151617181920212223242526&apos;use strict&apos;;module.exports = &#123; up: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.bulkInsert(&apos;Users&apos;, [&#123; roleId:1, firstName: &apos;John&apos;, lastName: &apos;Doe&apos;, email: &apos;demo@demo.com&apos;, createdAt:new Date(), updatedAt:new Date() &#125;,&#123; roleId:1, firstName: &apos;Jack&apos;, lastName: &apos;Smith&apos;, email: &apos;jack@demo.com&apos;, createdAt:new Date(), updatedAt:new Date() &#125;], &#123;&#125;); &#125;, down: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.bulkDelete(&apos;Users&apos;, null, &#123;&#125;); &#125;&#125;; 种子文件修改后，即可使用如下命令将演示数据插入数据库中：1../node_modules/.bin/sequelize db:seed:all 参考链接 http://docs.sequelizejs.com/，by sequelizejs https://github.com/demopark/sequelize-docs-Zh-CN，by demopark https://www.jianshu.com/p/b85cc8a05e53, by 最怕认真]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual_Studio_Community_2017离线安装]]></title>
    <url>%2F2018%2F06%2F21%2FVisual-Studio-Community-2017%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Visual Studio 2017版本采用模块化安装方式，根据用户选择模块按需安装。这种方式在用户能够上网的情况下十分方便，但在离线情况下就无法使用。下面介绍在离线情况下如何打包安装Visual Studio community 2017的方法。 下载VS2017社区版安装包获取程序到官网下载最新版本的vs_community_xxxxxx.exe的下载器。 运行命令下载所需安装包运行如下命令获取VS2017的工作负载：1.\vs_community__208176120.1522073957.exe --layout e:\vs2017_offline --lang zh-CN --add Microsoft.VisualStudio.Workload.CoreEditor --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended --includeOptional 可从参考链接[2]中获取工作负载ID。如需更多语言包或者更多安装指令，请参考官方离线安装命令指南，即参考链接[3]。 参考链接 https://docs.microsoft.com/en-us/visualstudio/install/create-an-offline-installation-of-visual-studio, by microsoft https://docs.microsoft.com/zh-cn/visualstudio/install/workload-component-id-vs-community, by microsoft https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio, by microsoft]]></content>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node_C++_Addon插件编写方法]]></title>
    <url>%2F2018%2F06%2F20%2FNode-Addon%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[最近研究在Nodejs中调用DLL，上网搜索发现主要有两种方法： 使用Nodeffi调用C风格接口的DLL，但是无法调用C++风格导出类的DLL。 使用Nodejs C++ Addon 插件，该方法可直接与C++代码交互，理论上可以调用C++风格导出类的DLL。 下面研究Nodejs Addon C++插件的编写方法。 什么是Nodejs C++ AddonNode.js插件（Addons）是C/C++编写的动态链接对象，这些对象可以被Node.js的require()函数引用，并可以像普通的Node.js模块一样使用。Addons主要用于提供一个Node.js中运行的JavaScript和C/C++库之间的接口。 插件（Addons）是动态链接的共享对象，它提供了C/C++类库的调用能力。实现插件的方法比较复杂，涉及到以下元组件及API: V8：C++库，Node.js用于提供JavaScript执行环境。V8提供了对象创建、函数调用等执行机制，V8相关API包含在了v8.h头文件中（位于Node.js源码树的deps/v8/include/v8.h），也可以查看在线文档。 libuv：C库，实现了Node.js中的事件循环、工作线程及在不同平台中异步行为的相关功能。也可以做为是一个跨平台的抽象库，提供了简单的、类POSIX的对主要操作系统的常见系统任务功能，如：与文件系统、套接字、计时器、系统事件的交互等。libuv还提供了一个类pthreads的线程池抽象对象，可用于更复杂的、超越标准事件循环的异步插件的控制功能。 内部Node.js库：Node.js自身提供了一定义数量的C/C++API的插件可以使用 - 其中最重要的可能是node::ObjectWrap类 Node.js静态链接库：Node.js自身还包含了一部分静态链接库，如OpenSSL。这些位于Node.js源码树的deps/目录下，只有V8和OpenSSL提供了符号出口，可以供Node.js和基它插件所使用。详见Node.js依赖链接 Node Addon插件编写方法Node Addon插件的编写需要解决两个关键问题： 当数据流向 javaScript -&gt; C++时，如何将javascript类型数据包装成C++类型数据，供C++代码使用。 当数据流向 C++ -&gt; JavaScript时，如何将C++类型数据包装成JavaScript类型数据，供JavaScript代码使用。 这两个关键问题的分析请参见淘宝前端团队成员发表的文章“Node.js 和 C++ 之间的类型转换[3]”。解决这两个关键问题后，Node Addon插件编写难度就不大了。 Node Addon插件调用C++导出类DLL方法测试现有一个采用成熟方法导出类接口的DLL[4]，如何在Node Addon插件中调用该DLL呢?下面nodejs官网Node Addon插件例子Factory of wrapped objects为例进行讲解。 Factory of wrapped objects例子在Addon插件中包装了一个MyObject类，现在就在MyObject类调用DLL导出类的接口方法。修改MyObject.h代码，增加DLL导出类接口方法，增加类接口成员变量IExport和DLL句柄变量hDll，如下所示：123456789101112131415161718192021222324252627282930313233343536// myobject.h#ifndef MYOBJECT_H#define MYOBJECT_H#include &lt;node.h&gt;#include &lt;iostream&gt;#include &lt;windows.h&gt;#include &lt;node_object_wrap.h&gt;#include &quot;MatureApproach.h&quot;namespace demo &#123;typedef IExport*(*TYPE_fnCreateExportObj) (void);//定义函数指针 typedef void(*TYPE_fnDestroyExportObj) (IExport*);//定义函数指针 class MyObject : public node::ObjectWrap &#123; public: static void Init(v8::Isolate* isolate); static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args); private: explicit MyObject(double value = 0); ~MyObject(); static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args); static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args); static void Hi(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args); static void Test(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args); static v8::Persistent&lt;v8::Function&gt; constructor; HMODULE hDll; IExport* pExport; double value_;&#125;;&#125; // namespace demo#endif 接下来将在MyObject类的构造函数中动态加载DLL，创建DLL导出类对象，在析构函数中析构DLL导出类对象，动态卸载DLL,在MyObject成员方法中调用DLL导出类方法，代码如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108// myobject.cc#include &lt;node.h&gt;#include &quot;myobject.h&quot;namespace demo &#123;using v8::Context;using v8::Function;using v8::FunctionCallbackInfo;using v8::FunctionTemplate;using v8::Isolate;using v8::Local;using v8::Number;using v8::Object;using v8::Persistent;using v8::String;using v8::Value;Persistent&lt;Function&gt; MyObject::constructor;MyObject::MyObject(double value) : value_(value)&#123; MyObject::hDll = LoadLibrary(&quot;MatureApproach.dll&quot;); //加载动态链接库DllDemo.dll文件； TYPE_fnCreateExportObj fnCreateExportObj = (TYPE_fnCreateExportObj)GetProcAddress(MyObject::hDll, &quot;CreateExportObj&quot;); MyObject::pExport = fnCreateExportObj();&#125;MyObject::~MyObject() &#123; TYPE_fnDestroyExportObj fnDestroyExportObj = (TYPE_fnDestroyExportObj)GetProcAddress(MyObject::hDll, &quot;DestroyExportObj&quot;); fnDestroyExportObj(MyObject::pExport); FreeLibrary(MyObject::hDll);&#125;void MyObject::Init(Isolate* isolate) &#123; // Prepare constructor template Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New); tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;)); tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(3); // Prototype NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne); NODE_SET_PROTOTYPE_METHOD(tpl, &quot;hi&quot;, Hi); NODE_SET_PROTOTYPE_METHOD(tpl, &quot;test&quot;, Test); constructor.Reset(isolate, tpl-&gt;GetFunction());&#125;void MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123; Isolate* isolate = args.GetIsolate(); if (args.IsConstructCall()) &#123; // Invoked as constructor: `new MyObject(...)` double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue(); MyObject* obj = new MyObject(value); obj-&gt;Wrap(args.This()); args.GetReturnValue().Set(args.This()); &#125; else &#123; // Invoked as plain function `MyObject(...)`, turn into construct call. const int argc = 1; Local&lt;Value&gt; argv[argc] = &#123; args[0] &#125;; Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor); Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext(); Local&lt;Object&gt; instance = cons-&gt;NewInstance(context, argc, argv).ToLocalChecked(); args.GetReturnValue().Set(instance); &#125;&#125;void MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123; Isolate* isolate = args.GetIsolate(); const unsigned argc = 1; Local&lt;Value&gt; argv[argc] = &#123; args[0] &#125;; Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor); Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext(); Local&lt;Object&gt; instance = cons-&gt;NewInstance(context, argc, argv).ToLocalChecked(); args.GetReturnValue().Set(instance);&#125;void MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123; Isolate* isolate = args.GetIsolate(); MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder()); obj-&gt;value_ += 1; args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));&#125;void MyObject::Hi(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123; Isolate* isolate = args.GetIsolate(); MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder()); Local&lt;String&gt; str=v8::String::NewFromUtf8(isolate, obj-&gt;pExport-&gt;Hi().data()); args.GetReturnValue().Set(str);&#125;void MyObject::Test(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123; Isolate* isolate = args.GetIsolate(); MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder()); Local&lt;String&gt; str=v8::String::NewFromUtf8(isolate, obj-&gt;pExport-&gt;Test().data()); args.GetReturnValue().Set(str);&#125;&#125; // namespace demo 参考链接 https://itbilu.com/nodejs/core/4y4-Nrd5G.html，by IT笔录 https://nodejs.org/dist/latest-v8.x/docs/api/addons.html，by nodejs http://taobaofed.org/blog/2016/09/20/type-casts-between-node-and-cpp/，by 淘宝前端团队 https://huangwang.github.io/2018/06/15/DLL导出类和函数/,by jackhuang]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在Vistual_Studio中调试Node_Addon_C++插件]]></title>
    <url>%2F2018%2F06%2F18%2F%E5%A6%82%E4%BD%95%E5%9C%A8Vistual-Studio%E4%B8%AD%E8%B0%83%E8%AF%95Node-Addon-C-%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[最近研究如何在Vistual Studio 2017社区版中调试Node addon C++插件，遇到很多问题，花费了不少时间，为防止遗忘，将方法记录下来。 准备工作 安装VS2017社区版 安装python 2.7 安装Nodejs 8.11.3 LTS 下载Nodejs 8.11.3 LTS源码 安装配置环境 安装node-gyp和nannode-gyp和nan用于编译生成node addon 插件。 12npm install -g node-gypnpm install -g nan 编译nodejs源码在nodejs源码解压后文件中执行如下命令： 1vcbuild.bat debug x64 创建nodejs addon c++插件示例工程使用如下命名生成调试用的vs工程： 1node-gyp configure rebuild --nodedir=&quot;D:\project\cpp_project\node-v8.11.3&quot; --debug 修改测试用的index.js,使其调用上一步骤生成的调试用的插件 //该js调用生成的插件 var addon = require(&apos;./build/Debug/max&apos;); var y=addon.max(2,3); console.log(y); 使用VS2017打开插件示例工程的build文件夹下node-gyp生成的解决方案。右键单击工程，在上下文菜单中点击属性，配置其调试命令和命令参数，如下图所示。 设置断点进行调试 参考链接 https://blog.csdn.net/zcyzsy/article/details/72821755, by Zmyths. https://computer-vision-talks.com/how-to-debug-nodejs-addons-in-visual-studio/.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DLL导出类和函数]]></title>
    <url>%2F2018%2F06%2F15%2FDLL%E5%AF%BC%E5%87%BA%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[最近研究在DLL中导出类，探寻最佳的DLL导出类的方法和技术。把整个过程记录一下，防止遗忘。 基础知识动态链接库动态链接库（英语：Dynamic-link library，缩写为DLL）是微软公司在微软视窗操作系统中实现共享函数库概念的一种实现方式。这些库函数的扩展名是.DLL、.OCX（包含ActiveX控制的库）或者.DRV（旧式的系统驱动程序)。 所谓动态链接，就是把一些经常会共用的代码（静态链接的OBJ程序库）制作成DLL档，当可执行文件调用到DLL档内的函数时，Windows操作系统才会把DLL档加载存储器内，DLL档本身的结构就是可执行档，当程序有需求时函数才进行链接。通过动态链接方式，存储器浪费的情形将可大幅降低。静态链接库则是直接链接到可执行文件。 编写方法使用DLL导出C函数或全局变量很简单，具体代码如下：12345678910111213141516171819// 下列 ifdef 块是创建使从 DLL 导出更简单的// 宏的标准方法。此 DLL 中的所有文件都是用命令行上定义的 DLLDEMO_EXPORTS// 符号编译的。在使用此 DLL 的// 任何其他项目上不应定义此符号。这样，源文件中包含此文件的任何其他项目都会将// DLLDEMO_API 函数视为是从 DLL 导入的，而此 DLL 则将用此宏定义的// 符号视为是被导出的。#ifdef DLLDEMO_EXPORTS#define DLLDEMO_API __declspec(dllexport)#else#define DLLDEMO_API __declspec(dllimport)#endifextern &quot;C&quot; extern DLLDEMO_API int nDllDemo;//不使用extern &quot;C&quot;将导致函数名字改编DLLDEMO_API int fnDllDemo(int);extern &quot;C&quot; DLLDEMO_API int fnExternCDllDemo(int); 运行时通知DLL进程/线程加载进程/线程加载时，可以通过DllMain函数通知DLL相关信息，提供对应处理的机会。12345678910111213141516171819BOOL WINAPI DLLMain(HINSTANCE hinstDLL,DWORD fdwReason,LPVOID fImpLoad)&#123; switch(fdwReason) &#123; case DLL_PROCESS_ATTACH: //当这个DLL第一次被映射到了这个进程的地址空间时。DLLMain函数的返回值为FALSE，说明DLL的初始化没有成功，系统就会终结整个进程，去掉所有文件映象，之后显示一个对话框告诉用户进程不能启动。 break; case DLL_THREAD_ATTACH: //一个线程被创建，新创建的线程负责执行这次的DllMain函数。系统不会让进程已经存在的线程以DLL_THREAD_ATTACH的值来调用DllMain函数。主线程永远不会以DLL_THREAD_ATTACH的值来调用DllMain函数。系统是顺序调用DllMain函数的，一个线程执行完DllMain函数才会让另外一个线程执行DllMain函数。 break; case DLL_THREAD_DETACH: //如果线程调用了ExitThread来结束线程（线程函数返回时，系统也会自动调用ExitThread）。线程调用了TerminateThread，系统就不会用值DLL_THREAD_DETACH来调用所有DLL的DllMain函数。 break; case DLL_PROCESS_DETACH: //这个DLL从进程的地址空间中解除映射。如果进程的终结是因为调用了TerminateProcess，系统就不会用DLL_PROCESS_DETACH来调用DLL的DllMain函数。这就意味着DLL在进程结束前没有机会执行任何清理工作。 break; &#125; return(TRUE);&#125; DLL的静态调用方法采用静态调用方法，DLL最终将打包到生成的EXE中。静态调用方法步骤如下[2]： 把你的youApp.DLL拷到你目标工程(需调用youApp.DLL的工程)的Debug目录下; 把你的youApp.lib拷到你目标工程(需调用youApp.DLL的工程)目录下; 把你的youApp.h(包含输出函数的定义)拷到你目标工程(需调用youApp.DLL的工程)目录下; 打开你的目标工程选中工程,选择Visual C++的Project主菜单的Settings菜单; 执行第4步后，VC将会弹出一个对话框，在对话框的多页显示控件中选择Link页。然后在Object/library modules输入框中输入:youApp.lib 选择你的目标工程Head Files加入：youApp.h文件; 最后在你目标工程(*.cpp,需要调用DLL中的函数)中包含你的:#include “youApp.h” DLL的动态调用方法动态调用DLL的步骤： 创建一个函数指针，其指针数据类型要与调用的DLL引出函数相吻合。 通过Win32 API函数LoadLibrary()显式的调用DLL，此函数返回DLL的实例句柄。 通过Win32 API函数GetProcAddress()获取要调用的DLL的函数地址, 把结果赋给自定义函数的指针类型。 使用函数指针来调用DLL函数。 最后调用完成后，通过Win32 API函数FreeLibrary()释放DLL函数。 123456789101112131415161718192021222324int main()&#123; HMODULE hModule = LoadLibrary(_T(&quot;DllDemo.dll&quot;)); typedef int(*TYPE_fnDllDemo) (int);//定义函数指针 typedef int(*TYPE_fnExternCDllDemo) (int);//定义函数指针 //创建类对象 CDllDemo* pCDllDemo = (CDllDemo*)malloc(sizeof(CDllDemo)); TYPE_fnDllDemo fnDllDemo = (TYPE_fnDllDemo)GetProcAddress(hModule, &quot;?fnDllDemo@@YAHH@Z&quot;); int *nDllDemo = (int *)GetProcAddress(hModule, &quot;nDllDemo&quot;); TYPE_fnExternCDllDemo fnExternCDllDemo = (TYPE_fnExternCDllDemo)GetProcAddress(hModule, &quot;fnExternCDllDemo&quot;); if (pCDllDemo != NULL) // printf(&quot;pCDllDemo-&gt;Max(32,42) = %d\n&quot;, pCDllDemo-&gt;Max(32, 42));//Dll导出类的调用太麻烦，因为DLL本来就是为C函数服务设计的。 if (fnDllDemo != NULL) printf(&quot;fnDllDemo(32) = %d\n&quot;, fnDllDemo(32)); if (nDllDemo != NULL) printf(&quot;*nDllDemo = %d\n&quot;, *nDllDemo); if (fnExternCDllDemo != NULL) printf(&quot;fnExternCDllDemo(22) = %d\n&quot;, fnExternCDllDemo(22)); _tsystem(_T(&quot;pause&quot;)); FreeLibrary(hModule); return 0;&#125; COM技术COM主要是一套给C/C++用的接口，当然为了微软的野心，它也被推广到了VB、Delphi以及其他一大堆奇奇怪怪的平台上。它主要为了使用dll发布基于interface的接口。我们知道dll的接口是为了C设计的，它导出的基本都是C的函数，从原理上来说，将dll加载到内存之后，会告诉你一组函数的地址，你自己call进去就可以调用相应的函数[3]。 但是对于C++来说这个事情就头疼了，现在假设你有一个类，我们知道使用一个类的第一步是创建这个类：new MyClass()。这里直接就出问题了，new方法通过编译器计算MyClass的大小来分配相应的内存空间，但是如果库升级了，相应的类可能会增加新的成员，大小就变了，那么使用旧的定义分配出来的空间就不能在新的库当中使用。 要解决这问题，我们必须在dll当中导出一个CreateObject的方法，用来代替构造函数，然后返回一个接口。然而，接口的定义在不同版本当中也是有可能会变化的，为了兼容以前的版本同时也提供新功能，还需要让这个对象可以返回不同版本的接口。接口其实是一个只有纯虚函数的C++类，不过对它进行了一些改造来兼容C和其他一些编程语言。 在这样改造之后，出问题的还有析构过程~MyClass()或者说delete myClass，因为同一个对象可能返回了很多个接口，有些接口还在被使用，如果其中一个被人delete了，其他接口都会出错，所以又引入了引用计数，来让许多人可以共享同一个对象。 其实到此为止也并不算是很奇怪的技术，我们用C++有的时候也会使用Factory方法来代替构造函数实现某些特殊的多态，也会用引用计数等等。COM技术的奇怪地方在于微软实在是脑洞太大了，它们构造了一个操作系统级别的Factory，规定所有人的Interface都统一用UUID来标识，以后想要哪个Interface只要报出UUID来就行了。这样甚至连链接到特定的dll都省了。 这就好比一个COM程序员，只要他在Windows平台上，调用别的库就只要首先翻一下魔导书，查到了一个用奇怪文字写的“Excel = {xxx-xxx-xxxx…}”的记号，然后它只要对着空中喊一声：“召唤，Excel！CoCreateInstance, {xxx-xxx-xxxx…}”然后呼的从魔法阵里面窜出来了一个怪物，它长什么样我们完全看不清，因为这时候它的类型是IUnknow，这是脑洞奇大无比的微软为所有接口设计的一个基类。 我们需要进一步要求它变成我们能控制的接口形态，于是我们再喊下一条指令：“变身，Excel 2003形态！QueryInterface, {xxx-xxx-xxxx…}”QueryInterface使用的是另一个UUID，用来表示不同版本的接口。于是怪物就变成了我们需要的Excel 2003接口，虽然我们不知道它实际上是2003还是2007还是更高版本。等我们使唤完这只召唤兽，我们就会对它说“回去吧，召唤兽！Release！”但是它不一定听话，因为之前给它的命令也许还没有执行完，它会忠诚地等到执行完再回去，当然我们并不关心这些细节。 微软大概会觉得自己设计出了软件史上最完美的二进制接口，从今以后所有的第三方库都可以涵盖在这套接口之下。然而历史的车轮是无情的，它碾过那些自以为是的人的速度总是会比想象的更快。Java的直接基于类的接口被广泛应用，开发使用起来远远来的简单，即便偶尔出点问题大家也都想办法解决了，事实证明程序员并不愿意花10倍的编写代码的时间来解决二进制库的版本兼容问题，他们更愿意假装没看见。很快微软也抄了一个.NET托管dll的方案出来，于是纯的二进制接口COM就慢慢被抛弃了。 COM，OLE，ActiveX，OCX，VBScript，历史不会忘记你们的，如果历史忘了，我替历史记住你们。安息吧。 DLL导出类借鉴COM技术，这里直接给出DLL到处类的成熟方法，可有效避免DLL地狱问题。具体结构为： 导出类是一个派生类，派生自一个抽象类——都是纯虚函数。使用者需要知道这个抽象类的结构。DLL最少只需要提供一个用于获取类对象指针的接口。使用者跟DLL提供者共用一个抽象类的头文件，使用者依赖于DLL的东西很少，只需要知道抽象类的接口，以及获取对象指针的导出函数，对象内存空间的申请是在DLL模块中做的，释放也在DLL模块中完成,最后记得要调用释放对象的函数。 这种方式比较好，通用，产生的DLL没有特定环境限制。借助了C++类的虚函数。一般都是采用这种方式。除了对DLL导出类有好处外，采用接口跟实现分离，可以使得工程的结构更清晰，使用者只需要知道接口，而不需要知道实现。 具体代码如下： DLL导出类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//DLL导出类头文件MatureApproach.h，与DLL使用者共享#ifdef MATUREAPPROACH_EXPORTS#define MATUREAPPROACH_API __declspec(dllexport)#else#define MATUREAPPROACH_API __declspec(dllimport)#endifclass IExport &#123;public: virtual void Hi() = 0; virtual void Test() = 0; virtual void Release() = 0;&#125;;extern &quot;C&quot; MATUREAPPROACH_API IExport* _stdcall CreateExportObj();extern &quot;C&quot; MATUREAPPROACH_API void _stdcall DestroyExportObj(IExport* pExport);//DLL导出接口函数的实现MatureApproach.cpp#include &quot;stdafx.h&quot;#include &quot;MatureApproach.h&quot;#include &quot;ExportClassImpl.h&quot;BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved )&#123; switch (ul_reason_for_call) &#123; case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; &#125; return TRUE;&#125;MATUREAPPROACH_API IExport* APIENTRY CreateExportObj()&#123; return new ExportImpl;&#125;//这里不能直接delete pExport，因为没有把IExport的析构函数定义为虚函数MATUREAPPROACH_API void APIENTRY DestroyExportObj(IExport* pExport)&#123; pExport-&gt;Release();&#125; DLL导出类的具体实现 123456789101112131415161718192021222324252627282930313233343536//DLL导出类头文件ExportClassImpl.h#include &quot;MatureApproach.h&quot;class ExportImpl : public IExport&#123;public: virtual void Hi(); virtual void Test(); virtual void Release(); ~ExportImpl();private:&#125;;//DLL导出类的实现ExportClassImpl.cpp#include &quot;stdafx.h&quot;#include &quot;ExportClassImpl.h&quot;void ExportImpl::Hi()&#123; wcout &lt;&lt; L&quot;Hello World&quot; &lt;&lt; endl;&#125;void ExportImpl::Test()&#123; wcout &lt;&lt; L&quot;Hi cswuyg&quot; &lt;&lt; endl;&#125;void ExportImpl::Release()&#123; delete this;&#125;ExportImpl::~ExportImpl()&#123; cout &lt;&lt; &quot;Release OK&quot; &lt;&lt; endl;&#125; 参考链接 https://zh.wikipedia.org/wiki/动态链接库, by wikipedia http://www.cnblogs.com/micro-chen/p/5937428.html，by 特洛伊-Micro https://www.zhihu.com/question/49433640/answer/115952604, by 灵剑. http://www.cnblogs.com/cswuyg/archive/2011/10/06/DLL2.html，by 烛秋.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cesium卫星地图和高程数据切片经验总结]]></title>
    <url>%2F2018%2F06%2F13%2FCesium%E5%8D%AB%E6%98%9F%E5%9C%B0%E5%9B%BE%E5%92%8C%E9%AB%98%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[最近研究在Cesium中调用自定义的图像和地形，不借助任何GIS系统（如Arcgis、天地图等），方便在网络不好或离线的情况下使用。下面对整个过程进行总结。 基础知识地图服务提供方法目前互联网地图服务商提供的地图服务分成两种[3]： 图像瓦片地图服务这种方法目前最常见，其提供的是图片格式的瓦片，在客户端将拼接成真正的地图。 矢量瓦片地图服务这种方法正在发展，其提供矢量的瓦片数据，然后在客户端进行渲染，是今后的发展方向。 地图服务在使用过程中需要获取特定经纬度所在区域的瓦片和获取瓦片上像素点对应的经纬度，因此需要进行经纬度坐标与瓦片坐标、像素坐标的相互转换。 经纬度与瓦片编号互换互联网地图的经纬度坐标与瓦片坐标相互转换只与该地图商的墨卡托投影和瓦片编号的定义有关，跟地图商采用的大地坐标系标准无关。 经纬度与瓦片像素互换转换方式与地图商采用的大地坐标系有关。国际标准的经纬度坐标是WGS84。Open Street Map、外国版的Google Map都是采用WGS84；高德地图使用的坐标系是GCJ-02；百度地图使用的坐标系是BD-09。 地图投影地图投影，是指按照一定的数学法则将地球椭球面上的经纬网转换到平面上，使地面的地理坐标与平面直角坐标建立起函数关系。这是绘制地图的数学基础之一。由于地球是一个不可展的球体，使用物理方法将其展平会引起褶皱、拉伸和断裂，因此要使用地图投影实现由曲面向平面的转化。 麦卡托投影法麦卡托投影法 (Mercator projection)，又称麦卡托投影法、正轴等角圆柱投影，是一种等角的圆柱形地图投影法。本投影法得名于法兰德斯出身的地理学家杰拉杜斯·麦卡托，他于1569年发表长202公分、宽124公分以此方式绘制的世界地图。在以此投影法绘制的地图上，经纬线于任何位置皆垂直相交，使世界地图可以绘制在一个长方形上。由于可显示任两点间的正确方位，航海用途的海图、航路图大都以此方式绘制。在该投影中线型比例尺在图中任意一点周围都保持不变，从而可以保持大陆轮廓投影后的角度和形状不变（即等角）；但麦卡托投影会使面积产生变形，极点的比例甚至达到了无穷大。 各大地图服务商大都采用了Web Mercator进行投影，瓦片坐标系的不同主要是投影截取的地球范围不同、瓦片坐标起点不同[3]。## 瓦片切割和瓦片坐标对于经过墨卡托投影为平面的世界地图，在不同的地图分辨率(整个世界地图的像素大小)下，通过切割的方式将世界地图划分为像素为256px/256px的地图单元，划分成的每一块地图单元称为地图瓦片。其特定如下： 具有唯一的瓦片等级（Level）和瓦片坐标编号（tileX, tileY）。 瓦片分辨率为256256。 最小的地图等级是0，此时世界地图只由一张瓦片组成。 瓦片等级越高，组成世界地图的瓦片数越多，可以展示的地图越详细。 某一瓦片等级地图的瓦片是由低一级的各瓦片切割成的4个瓦片组成，形成了瓦片金字塔。 过程总结将自定义图像和地形以Web形式发布后，在cesium中调用自定义图像和地形很简单，代码如下，关键是图像和地形的获取和处理。123456789101112131415var tmsImageryProvider=Cesium.createTileMapServiceImageryProvider(&#123; url:&apos;http://localhost:8080/test_tms_tiles&apos;&#125;);var terrainProvider=new Cesium.CesiumTerrainProvider(&#123; url:&apos;http://localhost:8080/terrain_tiles&apos;&#125;);var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;, &#123; imageryProvider : tmsImageryProvider, terrainProvider: terrainProvider, baseLayerPicker: false, geocoder: false, shadows: false, shouldAnimate: true&#125;) 卫星图像的获取和处理卫星图像获取可以使用一些相关软件，如水经注等。其原理通常是从一些地图服务商下载地图瓦片后重新拼接，再分割成对应格式的瓦片。拼接的图像最好输出为tif格式，因为tif格式可以在头部包含一些信息，例如地理坐标等信息，以方便后续的瓦片切割，以及被GIS系统直接识别导入。为使切割后的瓦片能够被Cesium直接调用，应采用标准TMS方式。通常卫星图像下载软件提供多种瓦片分割方式，如果能直接进行标准TMS瓦片分割最好不过，如果不可以进行标准TMS分割，则可使用GDAL。GDAL是地理空间数据抽象库的简称，是一个地理空间数据的格式转换及处理工具。文章最后将详细介绍其安装使用方法。使用GDAL进行卫星图像瓦片分割主要使用gdal2tiles.py工具。具体步骤如下： 选取之前下载拼接的最大分辨率的tif卫星图像 使用如下命令切割卫星图片,将自动生成瓦片金字塔。1gdal2tiles.py &lt;image&gt; &lt;tilesdir&gt; 地形的获取和处理Cesium支持多种地形provider来接收地形数据瓦片[8]： Cesium Terrain Server——高分辨率的全球地形数据，支持地形光照和水流效果。地形瓦片提交给客户端的数据的格式用的是quantized-mesh v1.0。 Esri ArcGIS Image Server——从Esri影像服务里的高度图中产生地形数据集。详情见Cesium里的ArcGisImageServerTerrainProvider. VR-TheWorld Server——从一个VR-TheWorld服务里的高度图中产生地形数据。它们的托管服务器有全球90米的数据，包括深度测量。 Ellipsoid——是Cesium默认的地形provider，是一个光滑的椭球面，没有现实的地形，地形高度为0。 常用的CesiumTerrainProvider支持两种格式的地形：一种是quantized-mesh格式的地形数据，另一种是基于高度图技术的DEM。前一种技术是Cesium独有不开放，因此将使用DEM数据在Cesium中渲染地形。 DEM数据是数字高程模型，是描述每个点位的高程数据，没有其他附加信息[9]。DEM数据在ArcGIS中打开只能看到是灰度图。通过相关软件可直接下载各大地图服务商的高程数据，但没有在Cesium中加载成功。下面介绍一种经过验证可在Cesium中成功加载地形的方法： 下载地形数据。可以从地理空间数据云下载地形数据，网址为http://www.gscloud.cn/。注册登录后，在首页选择“DEM 数字高程数据”，在选择“GDEMV2 30M 分辨率数字高程数据”。 合并地形数据。使用GDAL下的gdal_merge.py工具将下载的地形数据合并成一个Tif文件。 1gdal_merge.py -o out.tif input1.tif input2.tif 切割地形数据。使用牛人制作的gdal2srtmtiles.py脚本分割地形数据。编辑gdal2srtmtiles.py，在最后设置高程文件和输出目录。 发布地形服务。把terrain_tiles直接放到与 Cesium同端口的Tomcat或IIS站点下（不能跨域），即可发布服务。 需要在Web Server中增加配置 .terrain文件的 Content-Type设为 application/octet-stream，同时拷贝“覆盖至生成tiles结果”目录中的 layer.json文件和0文件夹至生成结果目录下，比如我当前是 terrain_tiles目录下。 GDAL的安装使用GDAL不推荐从源码编译安装，建议从gisinternals下载gdal-203-1911-x64-core.msi、GDAL-2.3.0.win-amd64-py2.7.msi直接二进制安装。安装步骤如下： 安装python2.7。安装完成后配置环境变量，在path中添加 C:\Python27; 安装gdal-203-1911-x64-core.msi。安装完成后，设置环境变量GDAL_DATA，值为C:\Program Files\GDAL\gdal-data\，修改环境变量PATH，增加C:\Program Files\GDAL; pip install numpy。这是为了使用地形切割的脚本gdal2srtmtiles.py。 安装GDAL-2.3.0.win-amd64-py2.7.msi。 参考链接 https://cesiumjs.org/tutorials/Imagery-Layers-Tutorial/, by cesiumjs https://cesiumjs.org/tutorials/Terrain-Tutorial/, by cesiumjs http://cntchen.github.io/2016/05/09/国内主要地图瓦片坐标系定义及计算原理/, by CntChen https://zh.wikipedia.org/wiki/地图投影, by wikipedia https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/, by Yan Yinhong https://blog.csdn.net/wbz810/article/details/79294511，by wbz810. http://www.gdal.org/，by gdal https://blog.csdn.net/u013929284/article/details/71616600, by Super洛伽 https://www.jianshu.com/p/62d6f03f44e3，by CrazyGIS]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cesium中飞行器姿态控制]]></title>
    <url>%2F2018%2F06%2F10%2FCesium%E4%B8%AD%E9%A3%9E%E8%A1%8C%E5%99%A8%E5%A7%BF%E6%80%81%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[问题提出最近研究开源虚拟地球Cesium，遇到一个问题：在获取飞行器经度纬度高度偏航俯仰滚转六个参数的前提下，如何在Cesium中用CZML文件表示，从而完美实现飞行器姿态轨迹的复现。在CZML的position属性中使用cartographicDegrees表示飞行器的经度纬度高度，可以很好复现飞行器的轨迹。然而在CZML的orientation属性中使用unitQuaternion表示飞机自身姿态时，飞机姿态总是不对。 问题分析基本知识在Cesium中存在两种常用坐标系： 世界坐标系世界坐标系统是以椭球中心为原点的笛卡尔空间直角坐标系。 地理坐标系地理坐标系即人们常用的使用经度、纬度、高度表示位置的坐标系。 站心坐标系又称为Earth-fixed coordinate system（站点坐标系、东-北-天坐标系ENU）。可分为站心直角坐标系和站心极坐标系。常用的站心直角坐标系定义为：以站心（如GPS接收天线中心）为坐标系原点O，Z轴与椭球法线重合，向上为正（天向），y与椭球短半轴重合（北向），x轴与地球椭球的长半轴重合（东向）所构成的直角坐标系，称为当地东北天坐标系（ENU）。飞行器的偏航、俯仰、滚转即是以站心直角坐标系为参考。 模型坐标系模型坐标系以物体的中心为坐标原点，物体旋转、平移等操作都是围绕局部坐标系进行的。这时当物体模型进行旋转、平移等操作时，局部坐标系也执行相应的旋转、平移等操作。局部坐标系是一个假想的坐标系，该坐标系与物体的相对位置至始至终是不变的，假想出这个坐标系的目的主要是为了正向理解对三维场景中物体执行的平移和旋转操作。使用局部坐标系理解模型变换时，所有的变换操作直接作用与局部坐标系，由于局部坐标系与物体的相对位置不变，因此对局部坐标系进行平移、旋转和缩放时，物体在场景中位置和形状也会发生相应的变化。 在Cesium中存在两种世界坐标系和地理坐标系之间坐标转换的方法：123456789# 经纬度转换为世界坐标Cesium.Cartesian3.fromDegrees(longitude, latitude, height, ellipsoid, result) # 世界坐标转换为经纬度var ellipsoid=viewer.scene.globe.ellipsoid;var cartesian3=new Cesium.cartesian3(x,y,z);var cartographic=ellipsoid.cartesianToCartographic(cartesian3);var lat=Cesium.Math.toDegrees(cartograhphic.latitude);var lng=Cesium.Math.toDegrees(cartograhpinc.longitude);var alt=cartographic.height; CZML分析CZML是一种用来描述动态场景的JSON架构的语言，主要用于Cesium在浏览器中的展示。它可以用来描述点、线、布告板、模型以及其他的图元，同时定义他们是怎样随时间变化的[3]。CZML可使用model属性直接加载3D模型，由position属性决定模型在世界坐标系内的位置，由orientation决定模型在世界坐标系内的姿态，并最终由orientation的unitQuaternion表示。unitQuaternion即单位四元数，可与偏航俯仰滚转相互转换，并避免偏航俯仰滚转的万向节锁定问题，但其本质上都是一个旋转矩阵，可决定模型在世界坐标系内的姿态。 获取正确的飞行器姿态首先计算飞行器模型坐标系对站点直角坐标系的旋转矩阵（在制作飞行器3D模型时，应使其中心在本地坐标系原点，机头机翼与轴平行，方便计算在站点直角坐标系内的旋转角度），再乘以由飞行器偏航俯仰滚转得到的旋转矩阵，再乘以站点直角坐标系对世界坐标系的旋转矩阵。将最终得到旋转矩阵转换为单位四元数，即得到正确的飞行器姿态。 解决方法参考代码如下：123456var lon=113,lat=34;//站点经纬度var h1=0,p1=0,r1=0;//模型坐标系对站点坐标系的旋转角度var h2=0,p2=0,r2=0;//模型在站点坐标系的姿态var center = Cesium.Cartesian3.fromDegrees(lon, lat)var hpr = new Cesium.HeadingPitchRoll(h1+h2, p1+p2, r1+r2)var q1 = Cesium.Transforms.headingPitchRollQuaternion(center, hpr) 参考链接 https://stackoverflow.com/questions/43389069/cesium-how-to-animate-an-aircraft-from-pitch-roll-heading, by stackoverflow. https://blog.csdn.net/qq_34149805/article/details/78393540. by finalLi. http://www.cnblogs.com/laixiangran/p/4997971.html. by laixiangran. https://github.com/AnalyticalGraphicsInc/cesium/wiki/CZML-Structure. by AnalyticalGraphicsInc. 3D坐标系.https://www.jianshu.com/p/8d483fa1acbd. by S_H_C. 3D空间的坐标系. https://blog.csdn.net/trojanpizza/article/details/6652533. by trojanpizza.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[春江花月夜]]></title>
    <url>%2F2018%2F06%2F09%2F%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%88%E5%A4%9C%2F</url>
    <content type="text"><![CDATA[作者：张若虚春江潮水连海平，海上明月共潮生。滟滟随波千万里，何处春江无月明？江流宛转绕芳甸，月照花林皆似霰。空里流霜不觉飞，汀上白沙看不见。江天一色无纤尘，皎皎空中孤月轮。江畔何人初见月，江月何年初照人？人生代代无穷已，江月年年祇相似。不知江月待何人？但见长江送流水。白云一片去悠悠，青枫浦上不胜愁。谁家今夜扁舟子，何处相思明月楼？可怜楼上月徘徊，应照离人妆镜台。玉户帘中卷不去，捣衣砧上拂还来。此时相望不相闻，愿逐月华流照君。鸿雁长飞光不度，鱼龙潜跃水成文。昨夜闲潭梦落花，可怜春半不还家。江水流春去欲尽，江潭落月复西斜。斜月沉沉藏海雾，碣石潇湘无限路。不知乘月几人归，落月摇情满江树。]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>唐诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cesium小部件animation和timeline的系统时间显示]]></title>
    <url>%2F2018%2F06%2F09%2FCesium%E5%B0%8F%E9%83%A8%E4%BB%B6animation%E5%92%8Ctimeline%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[Cesium的小部件animation和timeline显示UTC系统时间，需要将其改为本地系统时间。修改方法如下：12345678910111213141516171819202122232425this.viewer.animation.viewModel.dateFormatter = localeDateTimeFormatterthis.viewer.animation.viewModel.timeFormatter = localeTimeFormatterthis.viewer.timeline.makeLabel = function (time) &#123; return localeDateTimeFormatter(time) &#125;// Date formatting to a global formfunction localeDateTimeFormatter(datetime, viewModel, ignoredate) &#123; var julianDT = new Cesium.JulianDate(); Cesium.JulianDate.addHours(datetime,8,julianDT) var gregorianDT= Cesium.JulianDate.toGregorianDate(julianDT) var objDT; if (ignoredate) objDT = &apos;&apos;; else &#123; objDT = new Date(gregorianDT.year, gregorianDT.month - 1, gregorianDT.day); objDT = gregorianDT.year + &apos;年&apos; +objDT.toLocaleString(&quot;zh-cn&quot;, &#123; month: &quot;short&quot; &#125;)+ gregorianDT.day + &apos;日&apos; ; if (viewModel || gregorianDT.hour + gregorianDT.minute === 0) return objDT; objDT += &apos; &apos;; &#125; return objDT + Cesium.sprintf(&quot;%02d:%02d:%02d&quot;, gregorianDT.hour, gregorianDT.minute, gregorianDT.second);&#125;function localeTimeFormatter(time, viewModel) &#123; return localeDateTimeFormatter(time, viewModel, true);&#125; 上述代码还存在一个问题，当timeline小部件不活动时，其仍然显示UTC标准系统时间。 参考链接 https://blog.csdn.net/chienchia/article/details/29185479, by chienchia. https://stackoverflow.com/questions/45875490/change-utc-timezone-to-sgt-timezone-in-cesiumjs, by stackoverflow.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>Cesium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matplotlib蜡烛图绘制教程]]></title>
    <url>%2F2018%2F06%2F03%2FMatplotlib%E8%9C%A1%E7%83%9B%E5%9B%BE%E7%BB%98%E5%88%B6%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[股票分析离不开各种图表的绘制，尤其是最常用的蜡烛图。下面介绍python中使用matplotlib绘制蜡烛图的过程。 环境及配置使用的环境如下：123456789101112$ python3 --versionPython 3.6.5rc1$ ipython3In [1]: import matplotlibIn [2]: matplotlib.__version__Out[2]: &apos;2.2.2&apos;In [3]: import tushare as tsIn [4]: ts.__version__Out[4]: &apos;1.1.9&apos;In [5]: import talibIn [6]: talib.__version__Out[6]: &apos;0.4.17&apos; 绘制蜡烛图通常使用matplotlib.finance库，但这个库在matplotlib 2.0后已经被废弃，并被移到一个名叫mpl_finance的库中。可使用如下命令安装mpl_finance。1pip3 install https://github.com/matplotlib/mpl_finance/archive/master.zip mpl_finance使用雅虎接口获取股票数据，但是不稳定，因此推荐使用tushare库获取股票数据。另外使用talib计算股票各种技术分析指标，例如常用的均线数据。需要注意的是通过pip3按照的talib库是对C/C++版talib的包装，因此需先安装C/C++版talib。 蜡烛图绘制蜡烛图绘制函数简介mpl_finance库中蜡烛图的绘制主要有以下四个函数：1234candlestick2_ochl(ax, opens, closes, highs, lows, width=4, colorup=&apos;k&apos;, colordown=&apos;r&apos;, alpha=0.75)candlestick2_ohlc(ax, opens, highs, lows, closes, width=4, colorup=&apos;k&apos;, colordown=&apos;r&apos;, alpha=0.75)candlestick_ochl(ax, quotes, width=0.2, colorup=&apos;k&apos;, colordown=&apos;r&apos;, alpha=1.0)candlestick_ohlc(ax, quotes, width=0.2, colorup=&apos;k&apos;, colordown=&apos;r&apos;, alpha=1.0) 在这四个函数的使用过程中需要注意的是： candlestick2_ohlc函数假定opens, highs, lows, closes中任意一个值不存在，则其他值也不存在。 candlestick_ochl和candlestick_ohlc的输入参数quotes是(time, open, close, high, low, …)元组序列，其中time必须是浮点日期格式，具体参见date2num。 蜡烛图绘制函数存在日线图的时间间隔问题（非交易日无法跳过，导致图像断裂）。常用解决方法是建议重新调整横坐标，被动地过滤掉非交易时间段[2]。例如：12ax.set_xticks(range(0, len(data[&apos;date&apos;]), 10))ax.set_xticklabels(data[&apos;date&apos;][::10]) 蜡烛图的简单绘制蜡烛图的简单例子如下：12345678910111213141516171819import numpy as npimport talibimport tushare as tsimport matplotlib.pyplot as pltimport mpl_finance as mpf data = ts.get_k_data(&apos;002320&apos;)sma_10 = talib.SMA(np.array(data[&apos;close&apos;]), 10)sma_30 = talib.SMA(np.array(data[&apos;close&apos;]), 30)fig = plt.figure(figsize=(24, 8))ax = fig.add_subplot(1, 1, 1)ax.set_xticks(range(0, len(data[&apos;date&apos;]), 50))ax.set_xticklabels(data[&apos;date&apos;][::50])ax.plot(sma_10, label=&apos;10 日均线&apos;)ax.plot(sma_30, label=&apos;30 日均线&apos;)ax.legend(loc=&apos;upper left&apos;)mpf.candlestick2_ochl(ax, data[&apos;open&apos;], data[&apos;close&apos;], data[&apos;high&apos;], data[&apos;low&apos;],width=0.5, colorup=&apos;r&apos;, colordown=&apos;green&apos;,alpha=0.6)plt.grid()plt.show() 参考链接 https://matplotlib.org/api/finance_api.html, by matplotlib https://ipreacher.github.io/2017/candlestick/, by The North]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matplotlib用法笔记]]></title>
    <url>%2F2018%2F05%2F26%2Fmatplotlib%E7%94%A8%E6%B3%95%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[matplotlib 是Python编程语言及其数值数学扩展包 NumPy的可视化操作界面。它为利用通用的图形用户界面工具包，如Tkinter, wxPython, Qt或GTK+向应用程序嵌入式绘图提供了应用程序接口（API）。此外，matplotlib还有一个基于图像处理库（如开放图形库OpenGL）的pylab接口，其设计与MATLAB非常类似–尽管并不怎么好用。SciPy就是用matplotlib进行图形绘制。 基本用法使用plt.figure定义一个图像窗口。1234567import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 50)y = 2*x + 1plt.figure() plt.plot(x, y)plt.show() 设置坐标轴使用plt.xlim设置x坐标轴范围：(-1, 2)； 使用plt.ylim设置y坐标轴范围：(-2, 3)；使用plt.xlabel设置x坐标轴名称：’I am x’； 使用plt.ylabel设置y坐标轴名称：’I am y’；1234plt.xlim((-1, 2))plt.ylim((-2, 3))plt.xlabel(&apos;I am x&apos;)plt.ylabel(&apos;I am y&apos;) 使用np.linspace定义范围以及个数：范围是(-1,2);个数是5. 使用print打印出新定义的范围. 使用plt.xticks设置x轴刻度：范围是(-1,2);个数是5.123new_ticks = np.linspace(-1, 2, 5)print(new_ticks)plt.xticks(new_ticks) 使用plt.yticks设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]；对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]. 使用plt.show显示图像.12plt.yticks([-2, -1.8, -1, 1.22, 3],[r&apos;$really\ bad$&apos;, r&apos;$bad$&apos;, r&apos;$normal$&apos;, r&apos;$good$&apos;, r&apos;$really\ good$&apos;])plt.show() 使用plt.gca获取当前坐标轴信息. 使用.spines设置边框：右侧边框；使用.set_color设置边框颜色：默认白色； 使用.spines设置边框：上边框；使用.set_color设置边框颜色：默认白色；1234ax = plt.gca()ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)plt.show() 调整坐标轴使用.xaxis.set_ticks_position设置x坐标刻度数字或名称的位置：bottom.（所有位置：top，bottom，both，default，none）1ax.xaxis.set_ticks_position(&apos;bottom&apos;) 使用.spines设置边框：x轴；使用.set_position设置边框位置：y=0的位置；（位置所有属性：outward，axes，data）使用.yaxis.set_ticks_position设置y坐标刻度数字或名称的位置：left.（所有位置：left，right，both，default，none）使用.spines设置边框：y轴；使用.set_position设置边框位置：x=0的位置；（位置所有属性：outward，axes，data） 使用plt.show显示图像.1234ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0))ax.yaxis.set_ticks_position(&apos;left&apos;)ax.spines[&apos;left&apos;].set_position((&apos;data&apos;,0))plt.show() legend图例基本用法123456789101112131415161718192021222324import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 50)y1 = 2*x + 1y2 = x**2plt.figure()#set x limitsplt.xlim((-1, 2))plt.ylim((-2, 3))# set new sticksnew_sticks = np.linspace(-1, 2, 5)plt.xticks(new_sticks)# set tick labelsplt.yticks([-2, -1.8, -1, 1.22, 3], [r&apos;$really\ bad$&apos;, r&apos;$bad$&apos;, r&apos;$normal$&apos;, r&apos;$good$&apos;, r&apos;$really\ good$&apos;])# set line sylesl1, = plt.plot(x, y1, label=&apos;linear line&apos;)l2, = plt.plot(x, y2, color=&apos;red&apos;, linewidth=1.0, linestyle=&apos;--&apos;, label=&apos;square line&apos;)plt.legend(loc=&apos;upper right&apos;) 调整位置和名称1plt.legend(handles=[l1, l2], labels=[&apos;up&apos;, &apos;down&apos;], loc=&apos;best&apos;) 其中’loc’参数有多种，’best’表示自动分配最佳位置。1234567891011&apos;best&apos; : 0, &apos;upper right&apos; : 1,&apos;upper left&apos; : 2,&apos;lower left&apos; : 3,&apos;lower right&apos; : 4,&apos;right&apos; : 5,&apos;center left&apos; : 6,&apos;center right&apos; : 7,&apos;lower center&apos; : 8,&apos;upper center&apos; : 9,&apos;center&apos; : 10, 参考链接 https://zh.wikipedia.org/wiki/Matplotlib, by wikipedia https://morvanzhou.github.io, by morvanzhou]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3与python2的区别与兼容]]></title>
    <url>%2F2018%2F05%2F26%2Fpython3%E4%B8%8Epython2%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E5%85%BC%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[Python是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。 与Scheme、Ruby、Perl、Tcl等动态类型编程语言一样，Python拥有动态类型系统和垃圾回收功能，能够自动管理内存使用，并且支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。其本身拥有一个巨大而广泛的标准库。 Python 解释器本身几乎可以在所有的操作系统中运行。Python的正式解释器CPython是用C语言编写的、是一个由社区驱动的自由软件，目前由Python软件基金会管理。 python3与python2区别print函数Python 2 的 print 声明在Python 3中已经被 print() 函数取代12345#!/usr/bin/python2print &apos;Hello, World!&apos;#!/usr/bin/python3print(&apos;Hello, World!&apos;) 整除/是精确除法，//是向下取整除法，%是求模。 //和%运算符在2和3版本中一样，但是运算符/不一样。12345678910111213141516171819#!/usr/bin/python2&gt;&gt;&gt; 3 / 21&gt;&gt;&gt; 3 // 21&gt;&gt;&gt; 3 / 2.01.5&gt;&gt;&gt; 3 // 2.01.0#!/usr/bin/python3&gt;&gt;&gt; 3 / 21.5&gt;&gt;&gt; 3 // 21&gt;&gt;&gt; 3 / 2.01.5&gt;&gt;&gt; 3 // 2.01.0 Unicode由于历史遗留问题，Python 2.x版本虽然支持Unicode，但在语法上需要’xxx’和u’xxx’两种字符串表示方式。 在Python 3.x版本中，把’xxx’和u’xxx’统一成Unicode编码，即写不写前缀u都是一样的，而以字节形式表示的字符串则必须加上b前缀：b’xxx’。123456#!/usr/bin/python2#!/usr/bin/python3&gt;&gt;&gt; 中国 = &apos;china&apos; &gt;&gt;&gt; print(中国)china xrange模块在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。 在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 Python 3 中 xrange() 会抛出命名异常）。 不等运算符Python 2.x中不等于有两种写法 != 和 &lt;&gt; Python 3.x中去掉了&lt;&gt;, 只有!=一种写法 数据类型 Py3.X去除了long类型，现在只有一种整型——int，但它的行为就像2.X版本的long 新增了bytes类型，对应于2.X版本的八位串 dict的.keys()、.items 和.values()方法返回迭代器，而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key()，用 in替代它吧 。 异常 在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。 捕获异常的语法由 except exc, var 改为 except exc as var。使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python 2.6已经支持这两种语法。 解析用户的输入 在python2.x中raw_input()和input()，两个函数都存在，其中区别为 raw_input()—将所有输入作为字符串看待，返回字符串类型 input()—–只能接收“数字”的输入，在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（int, float） 在python3.x中raw_input()和input()进行了整合，去除了raw_input()，仅保留了input()函数，其接收任意任性输入，将所有输入默认为字符串处理，并返回字符串类型。 返回可迭代对象，而不是列表如果在 xrange 章节看到的，现在在 Python 3 中一些方法和函数返回迭代对象 — 代替 Python 2 中的列表。 因为我们通常那些遍历只有一次，我认为这个改变对节约内存很有意义。尽管如此，它也是可能的，相对于生成器 —- 如需要遍历多次。它是不那么高效的。 而对于那些情况下，我们真正需要的是列表对象，我们可以通过 list() 函数简单的把迭代对象转换成一个列表。12345678910111213#!/usr/bin/python2&gt;&gt;&gt; print range(3) [0, 1, 2]&gt;&gt;&gt; print type(range(3))&lt;type &apos;list&apos;&gt;#!/usr/bin/python3&gt;&gt;&gt; print(range(3))range(0, 3)&gt;&gt;&gt; print(type(range(3)))&lt;class &apos;range&apos;&gt;&gt;&gt;&gt; print(list(range(3)))[0, 1, 2] For循环变量和全局命名空间泄漏在 Python 3.x 中 for 循环变量不会再导致命名空间泄漏。 在 Python 3.x 中做了一个改变，在 What’s New In Python 3.0 中有如下描述：“列表推导不再支持 [… for var in item1, item2, …] 这样的语法。使用 [… for var in (item1, item2, …)] 代替。1234567891011121314151617#!/usr/bin/python2&gt;&gt;&gt; i = 1&gt;&gt;&gt; print &apos;before: i =&apos;, ibefore: i = 1&gt;&gt;&gt; print &apos;comprehension: &apos;, [i for i in range(5)]comprehension: [0, 1, 2, 3, 4]&gt;&gt;&gt; print &apos;after: i =&apos;, iafter: i = 4#!/usr/bin/python3&gt;&gt;&gt; i = 1&gt;&gt;&gt; print(&apos;before: i =&apos;, i)before: i = 1&gt;&gt;&gt; print(&apos;comprehension:&apos;, [i for i in range(5)])comprehension: [0, 1, 2, 3, 4]&gt;&gt;&gt; print(&apos;after: i =&apos;, i)after: i = 1 兼容python3与python2当前python3的普及还不尽人意，因此编写的python程序能同时兼容python2与python3是十分必要的。下面介绍同时支持python2与python3的方法。 放弃python 2.6之前的python版本 使用 2to3 工具对代码检查 使用python -3执行python程序 from future import “from future import”后即可使使用python的未来特性了。python的完整future特性可见 future 。python3中所有字符都变成了unicode。在python2中unicode字符在定义时需要在字符前面加 u，但在3中则不需要家u，而且在加u后程序会无法编译通过。为了解决该问题可以 “from future import unicode_literals” ，这样python2中字符的行为将和python3中保持一致，python2中定义普通字符将自动识别为unicode。 import问题 python3中“少”了很多python2的包，在大多情况下这些包之是改了个名字而已。我们可以在import的时候对这些问题进行处理。 1234567try:#python2 from UserDict import UserDict #建议按照python3的名字进行import from UserDict import DictMixin as MutableMappingexcept ImportError:#python3 from collections import UserDict from collections import MutableMapping 使用python3的方式写程序 检查当前运行的python版本 12345import sysif sys.version &gt; &apos;3&apos;: PY3 = Trueelse: PY3 = False six不推荐使用six。 参考链接 https://zh.wikipedia.org/wiki/Python, by wikipedia https://www.jianshu.com/p/85583e032eb8, by EarthChen http://python.jobbole.com/83987/, by 天地一沙鸥]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git用法总结]]></title>
    <url>%2F2018%2F05%2F24%2Fgit%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[git是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计[1]。 查看代码仓库中标签 1git tag 检出指定标签代码 1git checkout tag_name 打包导出仓库代码 1git archive --format zip --output ..\emsdk\zips\1.38.8.zip HEAD 参考链接 https://zh.wikipedia.org/zh-hans/Git, by wikipedia http://yijiebuyi.com/blog/eacf4d053fad77affffae397d9af7172.html, by 一介布衣]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js集成three.js]]></title>
    <url>%2F2018%2F05%2F13%2FVue-js%E9%9B%86%E6%88%90three-js%2F</url>
    <content type="text"><![CDATA[Three.js是一个跨浏览器的脚本，使用JavaScript函数库或API来在网页浏览器中创建和展示动画的三维计算机图形。Three.js使用WebGL。源代码托管在GitHub。 下面介绍在Vue.js中集成three.js的步骤。 安装vue-cli脚手架 安装three.js 1npm install --save three 编写使用three.js创建3D场景的Vuejs组件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;template&gt; &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import * as Three from &apos;three&apos;export default &#123; name: &apos;Home&apos;, data () &#123; return &#123; camera: null, scene: null, renderer: null, mesh: null &#125; &#125;, methods: &#123; init: function () &#123; var container = document.getElementById(&apos;container&apos;) this.camera = new Three.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 0.01, 10) this.camera.position.z = 1 this.scene = new Three.Scene() var geometry = new Three.BoxGeometry(0.2, 0.2, 0.2) var material = new Three.MeshNormalMaterial() this.mesh = new Three.Mesh(geometry, material) this.scene.add(this.mesh) this.renderer = new Three.WebGLRenderer(&#123; antialias: true &#125;) this.renderer.setSize(container.clientWidth, container.clientHeight) container.appendChild(this.renderer.domElement) &#125;, animate: function () &#123; requestAnimationFrame(this.animate) this.mesh.rotation.x += 0.01 this.mesh.rotation.y += 0.02 this.renderer.render(this.scene, this.camera) &#125; &#125;, mounted () &#123; this.init() this.animate() &#125;&#125;&lt;/script&gt;&lt;style rel=&quot;stylesheet/scss&quot; lang=&quot;scss&quot; scoped&gt;#container &#123; width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;&#125;&lt;/style&gt; 参考链接 https://zh.wikipedia.org/wiki/Three.js, by Wikipedia https://stackoverflow.com/questions/47849626/import-and-use-three-js-library-in-vue-component, by Stackoverlflow]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows批处理编程语法解析]]></title>
    <url>%2F2018%2F05%2F13%2FWindows%E6%89%B9%E5%A4%84%E7%90%86%E7%BC%96%E7%A8%8B%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[批处理文件(BAT文件)是DOS，OS/2和Microsoft Windows中的一种脚本文件[1]。 它由命令行解释器执行的一系列命令组成，存储在纯文本文件中，通常以BAT为扩展名。批处理文件可以包含解释器交互接受的任何命令，并使用在批处理文件中启用条件分支和循环的构造，如IF，FOR和GOTO标签。在Windows平台自动化部署或处理日常重复性工作时，常使用Windows批处理文件。 下面简单介绍Windows BAT文件的语法。 @ 让执行窗口中不显示它后面这一行的命令本身。12// 使用@将不显示后面的echo off命令@ echo off echo echo即回显或反馈的意思。它由两种状态：打开和关闭。1234// 将不显示后续的命令@ echo off// 将显示后续的命令@ echo on :: 注释命令。在批处理文件中与rem命令等效 call call命令用来从一个批处理文件调用另一个批处理文件。只有当被调用的批处理文件执行完成时，才返回。1call pm2-startup install pause 暂停命令。方便用户查看信息，查看完毕后可继续执行。 参考链接 https://en.wikipedia.org/wiki/Batch_file,by Wikipedia. https://www.cnblogs.com/s1ihome/archive/2009/01/15/batTutorial.html, by s1ihome.]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js集成Cesium]]></title>
    <url>%2F2018%2F05%2F11%2FVue-js%E9%9B%86%E6%88%90Cesium%2F</url>
    <content type="text"><![CDATA[近期在研究集成封装Cesium为Vue.js组件，记录一下过程，防止忘了。 安装环境 node.js: v8.9.4 npm: 5.6.0 vue: 2.5.2 cesium: 1.45.0 vue-cli: 2.9.3 webpack: 3.6.0 安装配置 安装nodejs 安装vue-cli脚手架 12345npm install -g vue-clivue init webpack my-projectcd my-projectnpm installnpm run dev 安装cesium 1npm install --save cesium webpack配置 在build/webpack.base.conf.js文件中做如下修改 123456789101112131415161718192021222324252627282930313233343536//定义cesium源代码位置const cesiumSource = &apos;../node_modules/cesium/Source&apos;...module.exports = &#123;...output: &#123; path: config.build.assetsRoot, filename: &apos;[name].js&apos;, publicPath: process.env.NODE_ENV === &apos;production&apos; ? config.build.assetsPublicPath : config.dev.assetsPublicPath, // Needed to compile multiline strings in Cesium sourcePrefix: &apos;&apos; &#125;,amd:&#123; // Enable webpack-friendly use of require in Cesium toUrlUndefined: true &#125;,resolve: &#123; extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;], alias: &#123; &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;, &apos;@&apos;: resolve(&apos;src&apos;), //设置cesium的别名 &apos;cesium&apos;: path.resolve(__dirname, cesiumSource) &#125; &#125;,module: &#123; rules: [ ... ], //不让Webpack打印载入特定库时候的警告 unknownContextCritical: false &#125;,...&#125; 在build/webpack.dev.conf.js文件中做如下修改 12345678910111213141516//定义 Cesium 源代码路径，前面没有../const cesiumSource = &apos;node_modules/cesium/Source&apos;//定义 Cesium Workers 路径const cesiumWorkers = &apos;../Build/Cesium/Workers&apos;...plugins: [ ... new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, cesiumWorkers), to: &apos;Workers&apos; &#125; ]), new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &apos;Assets&apos;), to: &apos;Assets&apos; &#125; ]), new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &apos;Widgets&apos;), to: &apos;Widgets&apos; &#125; ]), new webpack.DefinePlugin(&#123; // Define relative base path in cesium for loading assets CESIUM_BASE_URL: JSON.stringify(&apos;&apos;) &#125;) ... ] 在build/webpack.prod.conf.js文件中做如下修改 12345678910111213141516//定义 Cesium 源代码路径，前面没有../const cesiumSource = &apos;node_modules/cesium/Source&apos;//定义 Cesium Workers 路径const cesiumWorkers = &apos;../Build/Cesium/Workers&apos;...plugins: [ ... new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, cesiumWorkers), to: &apos;Workers&apos; &#125; ]), new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &apos;Assets&apos;), to: &apos;Assets&apos; &#125; ]), new CopyWebpackPlugin([ &#123; from: path.join(cesiumSource, &apos;Widgets&apos;), to: &apos;Widgets&apos; &#125; ]), new webpack.DefinePlugin(&#123; //定义 Cesium 从哪里加载资源，如果使用默认的&apos;&apos;，却变成了绝对路径了，所以这里使用&apos;./&apos;,使用相对路径 CESIUM_BASE_URL: JSON.stringify(&apos;./&apos;) &#125;) ... ] Vue.js组件编写 在src/components下新建 CesiumViewer.vue vue组件 12345678910111213141516171819202122232425&lt;template&gt; &lt;div id=&quot;cesiumContainer&quot;&gt; &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/javascript&quot;&gt;import Cesium from &apos;cesium/Cesium&apos;import widgets from &apos;cesium/Widgets/widgets.css&apos;export default &#123; name: &apos;CesiumViewer&apos;, mounted () &#123; var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;) &#125;&#125;&lt;/script&gt;&lt;style rel=&quot;stylesheet/scss&quot; lang=&quot;scss&quot; scoped&gt;#cesiumContainer &#123; width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;&#125;&lt;/style&gt; 创建全局样式文件src/styles/index.scss，做如下修改 12345678html,body &#123; width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;&#125; 在src/main.js中做如下修改 1import &apos;@/styles/index.scss&apos; // global css 参考链接 https://www.jianshu.com/p/fb237c7eb48c, by QingMings https://cesiumjs.org/tutorials/cesium-and-webpack/, by cesiumjs.org]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[离线环境下Node.js应用部署方法]]></title>
    <url>%2F2018%2F05%2F10%2F%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%B8%8BNode-js%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[离线环境下Node.js应用部署时需要解决以下三个基本问题： Node.js应用的进程管理，如性能监控、自动重启、负载均衡等 Node.js应用开机如何自启动 离线环境下如何部署Node.js应用 下面以在Windows Server 2012上离线部署Node.js应用为例，记录上述问题的解决方案： Node.js应用的进程管理在生产环境中运行 Express 应用程序时，使用进程管理器对于完成以下任务很有帮助[1]： 在应用程序崩溃后将其重新启动。 获得对运行时性能和资源消耗的洞察。 动态修改设置以改善性能。 控制集群。 进程管理器有点类似于应用程序服务器：它是应用程序的“容器”，可促进部署，提供高可用性并使您可以在运行时管理应用程序。 用于 Express 和其他 Node.js 应用程序的最流行的进程管理器包括： StrongLoop Process Manager PM2 Forever 上述三种工具的比较请参阅http://strong-pm.io/compare/。其中，StrongLoop Process Manager无法在Windows平台工作，再综合比较PM2和Forever，由于Forever没有操作系统自启动的脚本，故选择PM2作为Windows平台Node.js应用的进程管理器。 Node.js应用开机如何自启动选择PM2作为Node.js应用的进程管理器后，Node.js应用开机自启动的问题就变为如何开机自启动PM2。Windows平台存在两个自启动PM2的脚本： pm2-windows-service pm2-windows-startup pm2-windows-service基于 node-windows将PM2注册为Windows服务，从而实现自启动。pm2-windows-startup则基于start-on-windows-boot在注册表中将PM2设为自启动程序，从而实现自启动。两种方案经测试，只有pm2-windows-startup在Windows Server 2012上可行，故选择pm2-windows-startup作为解决Node.js应用开机自启动的方案。 离线环境下如何部署Node.js应用PM2和pm2-windows-startup必须全局安装，如何简单方便地在离线环境下全局安装这两个模块是一个问题。网上搜到的方法有： npm link npm-bundle npm link[2]是npm的一个命令，可将本地包链接成全局包，但实际测试过程中，无法解决PM2包的依赖问题，故放弃。而npm-bundle[3]则能很好的解决PM2的依赖问题。具体过程为：12345\\在线环境下npm install -g npm-bundlenpm-bundle pm2\\离线环境下call npm install .\pm2-2.10.3.tgz -g 参考链接 http://expressjs.com/zh-cn/advanced/pm.html, by Express https://blog.csdn.net/fay462298322/article/details/53432691, by 爱死费崇政 https://stackoverflow.com/questions/41156556/what-exact-command-is-to-install-pm2-on-offline-rhel, by stackoverflow]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js集成Highcharts]]></title>
    <url>%2F2018%2F05%2F10%2FVue-js%E9%9B%86%E6%88%90Highcharts%2F</url>
    <content type="text"><![CDATA[Vue.js集成Highcharts方法 安装highcharts 1npm install --save highcharts 封装hightcharts成Vue.js组件 12345678910111213141516171819202122232425262728293031323334353637&lt;template&gt; &lt;div class=&quot;highcharts-container&quot;&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Highcharts from &apos;highcharts/highstock&apos;import HighchartsMore from &apos;highcharts/highcharts-more&apos;import HighchartsDrilldown from &apos;highcharts/modules/drilldown&apos;import Highcharts3D from &apos;highcharts/highcharts-3d&apos;HighchartsMore(Highcharts)HighchartsDrilldown(Highcharts)Highcharts3D(Highcharts)export default &#123; props: [&apos;options&apos;], name: &apos;HighCharts&apos;, data () &#123; return &#123; chart: null &#125; &#125;, watch: &#123; options: function (newVal, oldVal) &#123; // watch it this.chart.update(newVal, true) &#125; &#125;, mounted () &#123; this.initChart() &#125;, methods: &#123; initChart () &#123; this.chart = new Highcharts.Chart(this.$el, this.options) &#125; &#125;&#125;&lt;/script&gt; 在src/main.js引入组件 12import HighCharts from &apos;./components/HighCharts.vue&apos;Vue.component(&apos;HighCharts&apos;, HighCharts) 使用组件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;template&gt; &lt;div class=&quot;radarGraph&quot;&gt; &lt;HighCharts :options=&quot;options&quot; class=&quot;radar&quot; &gt;&lt;/HighCharts&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;RadarGraph&apos;, computed: &#123; gameInfo () &#123; return this.$store.state.gameInfo &#125;, options () &#123; return &#123; chart: &#123; polar: true, type: &apos;line&apos;, marginTop: 0, marginBottom: 0, marginLeft: 0, marginRight: 0 &#125;, credits: &#123; enabled: false &#125;, pane: &#123; size: &apos;75%&apos; &#125;, title: null, legend: &#123; enabled: false &#125;, xAxis: &#123; categories: [&apos;分类1&apos;, &apos;分类2&apos;, &apos;分类3&apos;, &apos;分类4&apos;, &apos;分类5&apos;, &apos;分类6&apos; ], labels: &#123; style: &#123; fontSize: &apos;14px&apos; &#125; &#125;, tickmarkPlacement: &apos;on&apos;, lineWidth: 0 &#125;, yAxis: &#123; gridLineInterpolation: &apos;polygon&apos;, lineWidth: 0, min: 0 &#125;, series: [&#123; type: &apos;area&apos;, name: &apos;得分&apos;, data: [this.gameInfo.radar1, this.gameInfo.radar2, this.gameInfo.radar3, this.gameInfo.radar4, this.gameInfo.radar5, this.gameInfo.radar6], pointPlacement: &apos;on&apos; &#125;] &#125; &#125;, ...mapGetters([ &apos;userId&apos; ]) &#125;, created () &#123; this.fetchData() &#125;, methods: &#123; fetchData () &#123; this.$store.dispatch(&apos;GetGameInfo&apos;, this.userId) &#125; &#125;&#125;&lt;/script&gt; 参考链接 https://blog.jianshukeji.com/2017/09/use-highcharts-with-vue/]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js集成Socket.io]]></title>
    <url>%2F2018%2F05%2F09%2FVue-js%E9%9B%86%E6%88%90Socket-io%2F</url>
    <content type="text"><![CDATA[Socket.IO简介 Socket.IO 是一个面向实时 web 应用的 JavaScript 库。它使得服务器和客户端之间实时双向的通信成为可能。他有两个部分：在浏览器中运行的客户端库，和一个面向Node.js的服务端库。两者有着几乎一样的API。像Node.js一样，它也是事件驱动的. Socket.IO 主要使用WebSocket协议。但是如果需要的话，Socket.io可以回退到几种其它方法，例如Adobe Flash Sockets，JSONP拉取，或是传统的AJAX拉取，[2]并且在同时提供完全相同的接口。尽管它可以被用作WebSocket的包装库，它还是提供了许多其它功能，比如广播至多个套接字，存储与不同客户有关的数据，和异步IO操作。 Vue.js集成Socket.IO 安装socket.io-client 1npm install --save socket.io-client 在src/main.js中载入socket.io-client 123import io from &apos;socket.io-client&apos;const socket = io(process.env.BASE_API)Object.defineProperty(Vue.prototype, &apos;$socket&apos;, &#123; value: socket &#125;) 在Vuejs组件中使用socket.io-client 1this.$socket.on(&apos;event&apos;,function(e)&#123;&#125;) 参考链接 https://zh.wikipedia.org/wiki/Socket.IO, by Wikipedia https://socket.io/get-started/chat/, by socket.io]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PowerDesigner使用经验总结]]></title>
    <url>%2F2018%2F05%2F09%2FPowerDesigner%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[需求分析在系统工程及软件工程中，需求分析指的是在创建一个新的或改变一个现存的系统或产品时，确定新系统的目的、范围、定义和功能时所要做的所有工作。需求分析是软件工程中的一个关键过程。在这个过程中，系统分析员和软件工程师确定顾客的需要。只有在确定了这些需要后他们才能够分析和寻求新系统的解决方法。 在软件工程的历史中，很长时间里人们一直认为需求分析是整个软件工程中最简单的一个步骤，但在过去十年中越来越多的人认识到它是整个过程中最关键的一个过程。假如在需求分析时，分析者们未能正确地认识到顾客的需要的话，那么最后的软件实际上不可能达到顾客的需要，或者软体无法在规定的时间里完工。 软件设计软件设计是从软件需求规格说明书出发，根据需求分析阶段确定的功能设计软件系统的整体结构、划分功能模块、确定每个模块的实现算法以及编写具体的代码，形成软件的具体设计方案。 软件设计是把许多事物和问题抽象起来，并且抽象它们不同的层次和角度。将问题或事物分解并模块化使得解决问题变得容易，分解的越细模块数量也就越多，它的副作用就是使得设计者考虑更多的模块之间耦合度的情况。 UML统一建模语言（英语：Unified Modeling Language，缩写UML）是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。 这个语言由葛来迪·布区，伊瓦尔·雅各布森与詹姆士·兰宝于1994年至1995年间，在Rational Software公司中开发，于1996年，又进一步发展。UML集成了Booch，OMT和面向对象软件工程的概念，将这些方法融合为单一的，通用的，并且可以广泛使用的建模语言。UML打算成为可以对并发和分布式系统的标准建模语言。 在UML系统开发中有三个主要的模型： 功能模型：从用户的角度展示系统的功能，包括用例图。 静态模型：采用对象，属性，操作，关联等概念展示系统的结构和基础，包括类别图、对象图。 动态模型：展现系统的内部行为。包括序列图，活动图，状态图。） PowerDesigner工具PowerDesigner是Sybase的企业建模和设计解决方案，采用模型驱动方法，将业务与IT结合起来，可帮助部署有效的企业体系架构，并为研发生命周期管理提供强大的分析与设计技术。 PowerDesigner独具匠心地将多种标准数据建模技术（UML、业务流程建模以及市场领先的数据建模）集成一体，并与 .NET、WorkSpace、PowerBuilder、Java™、Eclipse 等主流开发平台集成起来，从而为传统的软件开发周期管理提供业务分析和规范的数据库设计解决方案。此外，它支持60多种关系数据库管理系统（RDBMS）／版本[来源请求]。PowerDesigner运行在Microsoft Windows平台上，并提供了Eclipse插件。 PowerDesigner使用经验遵循UML方法，使用PowerDesigner对系统进行建模。 在需求分析阶段，通常使用用例图、序列图（序列图中主要描述用户与系统之间交互关系）、组合结构图、类图（用于描述组件或类的接口及其调用关系）等UML图描述。 在设计阶段，从架构设计、概要设计到详细设计，粒度由粗到细。 通常架构设计是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。架构设计通常使用组织结构图、对象图、活动图、状态图等UML图描述。 概要设计就是设计软件的结构，包括组成模块，模块的层次结构，模块的调用关系，每个模块的功能等等。同时，还要设计该项目的应用系统的总体数据结构和数据库结构，即应用系统要存储什么数据，这些数据是什么样的结构，它们之间有什么关系。概要设计从模块角度描述系统，通常使用组合结构图进行描述。 详细设计就是为每个模块完成的功能进行具体的描述，要把功能描述转变为精确的、结构化的过程描述。如采用面向对象的开发方法，详细设计通常使用UML类图描述。]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>powerdesigner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js集成Bootstrap4]]></title>
    <url>%2F2018%2F05%2F09%2FVue-js%E9%9B%86%E6%88%90Bootstrap4%2F</url>
    <content type="text"><![CDATA[记录在Vue.js中集成Bootstrap4的方法，防止忘了！ 创建Vue.js工程 12npm install -g vue-clivue init webpack project_name 安裝Sass / Sass-loader / node-sass 1npm install sass sass-loader node-sass --save 安裝BootStrap / jQuery / Popper 1npm install bootstrap jquery popper.js --save 配置build/webpack.base.conf.js 123456789101112module.exports = &#123; ... // 新增plugins plugins: [ new webpack.ProvidePlugin(&#123; &apos;$&apos;: &quot;jquery&quot;, &apos;jQuery&apos;: &quot;jquery&quot;, &apos;Popper&apos;: &apos;popper.js&apos; &#125;) ], ...&#125; 在src/main.js中载入Bootstrap 12import &apos;bootstrap&apos;import &apos;bootstrap/dist/css/bootstrap.css&apos; 使用Bootstrap和sass编写Vue.js组件]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux mysql 终端操作]]></title>
    <url>%2F2018%2F05%2F08%2Flinux-mysql-%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[进入mysql数据库 1#mysql -uroot -proot 创建mysql user 12MariaDB [(none)]&gt; create user &apos;stock&apos;@&apos;localhost&apos; identified by &apos;stock&apos;;Query OK, 0 rows affected (0.00 sec) 查询mysql用户 12345678MariaDB [(none)]&gt; SELECT User,Host FROM mysql.user;+-------+-----------+| User | Host |+-------+-----------+| root | localhost || stock | localhost |+-------+-----------+2 rows in set (0.00 sec) 授予mysql用户权限 12MariaDB [(none)]&gt; GRANT ALL ON stock.* TO &apos;stock&apos;@&apos;localhost&apos;;Query OK, 0 rows affected (0.00 sec) 使用show语句查找数据库 123456789MariaDB [(none)]&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema |+--------------------+3 rows in set (0.00 sec) 创建数据库stock 12MariaDB [(none)]&gt; create database stock;Query OK, 1 row affected (0.00 sec) 选择创建的数据库 12MariaDB [(none)]&gt; use stock;Database changed 使用show语句查找数据库中的表 1MariaDB [stock]&gt; show tables; 删除创建的数据库 12MariaDB [(none)]&gt; drop database stock;Query OK, 0 rows affected (0.00 sec) 删除表 12mysql&gt; drop table sequelizemeta;Query OK, 0 rows affected (0.01 sec) 查询表结构 1mysql&gt; desc t_records; 清除表记录 1mysql&gt; delete from t_records;]]></content>
      <tags>
        <tag>笔记本</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[侠客行]]></title>
    <url>%2F2018%2F05%2F08%2F%E4%BE%A0%E5%AE%A2%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[作者：李白赵客缦胡缨，吴钩霜雪明。银鞍照白马，飒沓如流星。十步杀一人，千里不留行。事了拂衣去，深藏身与名。闲过信陵饮，脱剑膝前横。将炙啖朱亥，持觞劝侯嬴。三杯吐然诺，五岳倒为轻。眼花耳热后，意气素霓生。救赵挥金锤，邯郸先震惊。千秋二壮士，烜赫大梁城。纵死侠骨香，不惭世上英。谁能书阁下，白首太玄经。]]></content>
      <tags>
        <tag>传统文化</tag>
        <tag>唐诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[立功立德立言]]></title>
    <url>%2F2018%2F05%2F08%2F%E7%AB%8B%E5%8A%9F%E7%AB%8B%E5%BE%B7%E7%AB%8B%E8%A8%80%2F</url>
    <content type="text"><![CDATA[来源：《左传》二十四年春，穆叔如晋。范宣子逆之，问焉，曰：“古人有言曰：‘死而不朽’，何谓也？”穆叔未对。宣子曰：“昔匄之祖，自虞以上为陶唐氏，在夏为御龙氏，在商为豕韦氏，在周为唐杜氏，晋主夏盟为范氏，其是之谓乎？”穆叔曰：“以豹所闻，此之谓世禄，非不朽也。鲁有先大夫曰臧文仲，既没，其言立，其是之谓乎！豹闻之，‘太上有立德，其次有立功，其次有立言’，虽久不废，此之谓不朽。若夫保姓受氏，以守宗祊，世不绝祀，无国无之，禄之大者，不可谓不朽。]]></content>
      <tags>
        <tag>传统文化</tag>
        <tag>左转</tag>
      </tags>
  </entry>
</search>
